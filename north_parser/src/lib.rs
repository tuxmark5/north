#![feature(box_syntax)]
#![feature(core_intrinsics)]
#![feature(specialization)]
#![feature(unsize)]

////////////////////////////////////////////////////////////////////////////////////////////////

pub mod grammar;
pub mod parse;
pub mod parse_aspect;
pub mod parse_ctx;
pub mod parse_pass;
pub mod parser;

pub use self::{
  grammar::{Grammar, RuleTrait},
  parse::{Parse},
  parse_aspect::ParseAspect,
  parse_ctx::ParseCtx,
  parse_pass::ParsePass,
  parser::Parser,
};

////////////////////////////////////////////////////////////////////////////////////////////////

pub mod assoc {
  pub struct LeftAssoc;
  pub struct RightAssoc;
}

////////////////////////////////////////////////////////////////////////////////////////////////

pub mod prelude {
  pub use {
    crate::{
      Parse, ParseAspect, ParseCtx, Result,
      assoc::*,
      parse_part, parse_part_add_trait, parse_r,
    },
    north_core::{
      compiler::{AspectPart, aspect::aspect_cast},
    },
  };
}

////////////////////////////////////////////////////////////////////////////////////////////////

use {
  std::result
};

////////////////////////////////////////////////////////////////////////////////////////////////

pub type Result<T> = result::Result<T, ()>;

////////////////////////////////////////////////////////////////////////////////////////////////
