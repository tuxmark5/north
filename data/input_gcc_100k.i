typedef void *__builtin_va_list;
typedef long int ptrdiff_t;
typedef long unsigned int size_t;
typedef int wchar_t;
extern char *gettext (const char *__msgid)
     ;
extern char *dgettext (const char *__domainname, const char *__msgid)
     ;
extern char *__dgettext (const char *__domainname, const char *__msgid)
     ;
extern char *dcgettext (const char *__domainname,
   const char *__msgid, int __category)
     ;
extern char *__dcgettext (const char *__domainname,
     const char *__msgid, int __category)
     ;
extern char *ngettext (const char *__msgid1, const char *__msgid2,
         unsigned long int __n)
     ;
extern char *dngettext (const char *__domainname, const char *__msgid1,
   const char *__msgid2, unsigned long int __n)
     ;
extern char *dcngettext (const char *__domainname, const char *__msgid1,
    const char *__msgid2, unsigned long int __n,
    int __category)
     ;
extern char *textdomain (const char *__domainname) ;
extern char *bindtextdomain (const char *__domainname,
        const char *__dirname) ;
extern char *bind_textdomain_codeset (const char *__domainname,
          const char *__codeset) ;
typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;
typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;
typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef int __daddr_t;
typedef int __key_t;
typedef int __clockid_t;
typedef void * __timer_t;
typedef long int __blksize_t;
typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;
typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;
typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;
typedef long int __fsword_t;
typedef long int __ssize_t;
typedef long int __syscall_slong_t;
typedef unsigned long int __syscall_ulong_t;
typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;
typedef long int __intptr_t;
typedef unsigned int __socklen_t;
static unsigned short int
__bswap_16 (unsigned short int __bsx)
{
  return ((unsigned short int) ((((__bsx) >> 8) & 0xff) | (((__bsx) & 0xff) << 8)));
}
static unsigned int
__bswap_32 (unsigned int __bsx)
{
  return ((((__bsx) & 0xff000000) >> 24) | (((__bsx) & 0x00ff0000) >> 8) | (((__bsx) & 0x0000ff00) << 8) | (((__bsx) & 0x000000ff) << 24));
}
static __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return ((((__bsx) & 0xff00000000000000ull) >> 56) | (((__bsx) & 0x00ff000000000000ull) >> 40) | (((__bsx) & 0x0000ff0000000000ull) >> 24) | (((__bsx) & 0x000000ff00000000ull) >> 8) | (((__bsx) & 0x00000000ff000000ull) << 8) | (((__bsx) & 0x0000000000ff0000ull) << 24) | (((__bsx) & 0x000000000000ff00ull) << 40) | (((__bsx) & 0x00000000000000ffull) << 56));
}
union wait
  {
    int w_status;
    struct
      {
 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;
      } __wait_terminated;
    struct
      {
 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;
      } __wait_stopped;
  };
typedef struct
  {
    int quot;
    int rem;
  } div_t;
typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;
 typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
extern size_t __ctype_get_mb_cur_max (void) ;
extern double atof (const char *__nptr)
     ;
extern int atoi (const char *__nptr)
     ;
extern long int atol (const char *__nptr)
     ;
 extern long long int atoll (const char *__nptr)
     ;
extern double strtod (const char * __nptr,
        char ** __endptr)
     ;
extern float strtof (const char * __nptr,
       char ** __endptr) ;
extern long double strtold (const char * __nptr,
       char ** __endptr)
     ;
extern long int strtol (const char * __nptr,
   char ** __endptr, int __base)
     ;
extern unsigned long int strtoul (const char * __nptr,
      char ** __endptr, int __base)
     ;
extern long long int strtoq (const char * __nptr,
        char ** __endptr, int __base)
     ;
extern unsigned long long int strtouq (const char * __nptr,
           char ** __endptr, int __base)
     ;
extern long long int strtoll (const char * __nptr,
         char ** __endptr, int __base)
     ;
extern unsigned long long int strtoull (const char * __nptr,
     char ** __endptr, int __base)
     ;
typedef struct __locale_struct
{
  struct __locale_data *__locales[13];
  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;
  const char *__names[13];
} *__locale_t;
typedef __locale_t locale_t;
extern long int strtol_l (const char * __nptr,
     char ** __endptr, int __base,
     __locale_t __loc) ;
extern unsigned long int strtoul_l (const char * __nptr,
        char ** __endptr,
        int __base, __locale_t __loc)
     ;
extern long long int strtoll_l (const char * __nptr,
    char ** __endptr, int __base,
    __locale_t __loc)
     ;
extern unsigned long long int strtoull_l (const char * __nptr,
       char ** __endptr,
       int __base, __locale_t __loc)
     ;
extern double strtod_l (const char * __nptr,
   char ** __endptr, __locale_t __loc)
     ;
extern float strtof_l (const char * __nptr,
         char ** __endptr, __locale_t __loc)
     ;
extern long double strtold_l (const char * __nptr,
         char ** __endptr,
         __locale_t __loc)
     ;
extern char *l64a (long int __n) ;
extern long int a64l (const char *__s)
     ;
typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;
typedef __loff_t loff_t;
typedef __ino_t ino_t;
typedef __ino64_t ino64_t;
typedef __dev_t dev_t;
typedef __gid_t gid_t;
typedef __mode_t mode_t;
typedef __nlink_t nlink_t;
typedef __uid_t uid_t;
typedef __off_t off_t;
typedef __off64_t off64_t;
typedef __pid_t pid_t;
typedef __id_t id_t;
typedef __ssize_t ssize_t;
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;
typedef __key_t key_t;
typedef __clock_t clock_t;
typedef __time_t time_t;
typedef __clockid_t clockid_t;
typedef __timer_t timer_t;
typedef __useconds_t useconds_t;
typedef __suseconds_t suseconds_t;
typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
typedef char int8_t;
typedef short int int16_t;
typedef int int32_t;
typedef long int int64_t;
typedef unsigned char u_int8_t;
typedef unsigned short int u_int16_t;
typedef unsigned int u_int32_t;
typedef unsigned long int u_int64_t;
typedef int register_t;
typedef int __sig_atomic_t;
typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
typedef __sigset_t sigset_t;
struct timespec
  {
    __time_t tv_sec;
    __syscall_slong_t tv_nsec;
  };
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
typedef long int __fd_mask;
typedef struct
  {
    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];
  } fd_set;
typedef __fd_mask fd_mask;
extern int select (int __nfds, fd_set * __readfds,
     fd_set * __writefds,
     fd_set * __exceptfds,
     struct timeval * __timeout);
extern int pselect (int __nfds, fd_set * __readfds,
      fd_set * __writefds,
      fd_set * __exceptfds,
      const struct timespec * __timeout,
      const __sigset_t * __sigmask);
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     ;
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     ;
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     ;
typedef __blksize_t blksize_t;
typedef __blkcnt_t blkcnt_t;
typedef __fsblkcnt_t fsblkcnt_t;
typedef __fsfilcnt_t fsfilcnt_t;
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;
typedef unsigned long int pthread_t;
union pthread_attr_t
{
  char __size[56];
  long int __align;
};
typedef union pthread_attr_t pthread_attr_t;
typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;
    unsigned int __nusers;
    int __kind;
    short __spins;
    short __elision;
    __pthread_list_t __list;
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;
typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;
typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    unsigned long long int __total_seq;
    unsigned long long int __wakeup_seq;
    unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  long long int __align;
} pthread_cond_t;
typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;
typedef unsigned int pthread_key_t;
typedef int pthread_once_t;
typedef union
{
  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    signed char __rwelision;
    unsigned char __pad1[7];
    unsigned long int __pad2;
    unsigned int __flags;
  } __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;
typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;
typedef volatile int pthread_spinlock_t;
typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;
typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
extern long int random (void) ;
extern void srandom (unsigned int __seed) ;
extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) ;
extern char *setstate (char *__statebuf) ;
struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };
extern int random_r (struct random_data * __buf,
       int32_t * __result) ;
extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     ;
extern int initstate_r (unsigned int __seed, char * __statebuf,
   size_t __statelen,
   struct random_data * __buf)
     ;
extern int setstate_r (char * __statebuf,
         struct random_data * __buf)
     ;
extern int rand (void) ;
extern void srand (unsigned int __seed) ;
extern int rand_r (unsigned int *__seed) ;
extern double drand48 (void) ;
extern double erand48 (unsigned short int __xsubi[3]) ;
extern long int lrand48 (void) ;
extern long int nrand48 (unsigned short int __xsubi[3])
     ;
extern long int mrand48 (void) ;
extern long int jrand48 (unsigned short int __xsubi[3])
     ;
extern void srand48 (long int __seedval) ;
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     ;
extern void lcong48 (unsigned short int __param[7]) ;
struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    unsigned long long int __a;
  };
extern int drand48_r (struct drand48_data * __buffer,
        double * __result) ;
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data * __buffer,
        double * __result) ;
extern int lrand48_r (struct drand48_data * __buffer,
        long int * __result)
     ;
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data * __buffer,
        long int * __result)
     ;
extern int mrand48_r (struct drand48_data * __buffer,
        long int * __result)
     ;
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data * __buffer,
        long int * __result)
     ;
extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     ;
extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) ;
extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     ;
extern void *malloc (size_t __size) ;
extern void *calloc (size_t __nmemb, size_t __size)
     ;
extern void *realloc (void *__ptr, size_t __size)
     ;
extern void free (void *__ptr) ;
extern void cfree (void *__ptr) ;
extern void *alloca (size_t __size) ;
extern void *valloc (size_t __size) ;
extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     ;
extern void *aligned_alloc (size_t __alignment, size_t __size)
     ;
extern void abort (void) ;
extern int atexit (void (*__func) (void)) ;
extern int at_quick_exit (void (*__func) (void)) ;
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     ;
extern void exit (int __status) ;
extern void quick_exit (int __status) ;
extern void _Exit (int __status) ;
extern char *getenv (const char *__name) ;
extern char *secure_getenv (const char *__name)
     ;
extern int putenv (char *__string) ;
extern int setenv (const char *__name, const char *__value, int __replace)
     ;
extern int unsetenv (const char *__name) ;
extern int clearenv (void) ;
extern char *mktemp (char *__template) ;
extern int mkstemp (char *__template) ;
extern int mkstemp64 (char *__template) ;
extern int mkstemps (char *__template, int __suffixlen) ;
extern int mkstemps64 (char *__template, int __suffixlen)
     ;
extern char *mkdtemp (char *__template) ;
extern int mkostemp (char *__template, int __flags) ;
extern int mkostemp64 (char *__template, int __flags) ;
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     ;
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     ;
extern int system (const char *__command) ;
extern char *canonicalize_file_name (const char *__name)
     ;
extern char *realpath (const char * __name,
         char * __resolved) ;
typedef int (*__compar_fn_t) (const void *, const void *);
typedef __compar_fn_t comparison_fn_t;
typedef int (*__compar_d_fn_t) (const void *, const void *, void *);
extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     ;
extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) ;
extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  ;
extern int abs (int __x) ;
extern long int labs (long int __x) ;
 extern long long int llabs (long long int __x)
     ;
extern div_t div (int __numer, int __denom)
     ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     ;
 extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     ;
extern char *ecvt (double __value, int __ndigit, int * __decpt,
     int * __sign) ;
extern char *fcvt (double __value, int __ndigit, int * __decpt,
     int * __sign) ;
extern char *gcvt (double __value, int __ndigit, char *__buf)
     ;
extern char *qecvt (long double __value, int __ndigit,
      int * __decpt, int * __sign)
     ;
extern char *qfcvt (long double __value, int __ndigit,
      int * __decpt, int * __sign)
     ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     ;
extern int ecvt_r (double __value, int __ndigit, int * __decpt,
     int * __sign, char * __buf,
     size_t __len) ;
extern int fcvt_r (double __value, int __ndigit, int * __decpt,
     int * __sign, char * __buf,
     size_t __len) ;
extern int qecvt_r (long double __value, int __ndigit,
      int * __decpt, int * __sign,
      char * __buf, size_t __len)
     ;
extern int qfcvt_r (long double __value, int __ndigit,
      int * __decpt, int * __sign,
      char * __buf, size_t __len)
     ;
extern int mblen (const char *__s, size_t __n) ;
extern int mbtowc (wchar_t * __pwc,
     const char * __s, size_t __n) ;
extern int wctomb (char *__s, wchar_t __wchar) ;
extern size_t mbstowcs (wchar_t * __pwcs,
   const char * __s, size_t __n) ;
extern size_t wcstombs (char * __s,
   const wchar_t * __pwcs, size_t __n)
     ;
extern int rpmatch (const char *__response) ;
extern int getsubopt (char ** __optionp,
        char *const * __tokens,
        char ** __valuep)
     ;
extern void setkey (const char *__key) ;
extern int posix_openpt (int __oflag) ;
extern int grantpt (int __fd) ;
extern int unlockpt (int __fd) ;
extern char *ptsname (int __fd) ;
extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     ;
extern int getpt (void);
extern int getloadavg (double __loadavg[], int __nelem)
     ;
extern void *memcpy (void * __dest, const void * __src,
       size_t __n) ;
extern void *memmove (void *__dest, const void *__src, size_t __n)
     ;
extern void *memccpy (void * __dest, const void * __src,
        int __c, size_t __n)
     ;
extern void *memset (void *__s, int __c, size_t __n) ;
extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     ;
extern void *memchr (const void *__s, int __c, size_t __n)
      ;
extern void *rawmemchr (const void *__s, int __c)
     ;
extern void *memrchr (const void *__s, int __c, size_t __n)
      ;
extern char *strcpy (char * __dest, const char * __src)
     ;
extern char *strncpy (char * __dest,
        const char * __src, size_t __n)
     ;
extern char *strcat (char * __dest, const char * __src)
     ;
extern char *strncat (char * __dest, const char * __src,
        size_t __n) ;
extern int strcmp (const char *__s1, const char *__s2)
     ;
extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     ;
extern int strcoll (const char *__s1, const char *__s2)
     ;
extern size_t strxfrm (char * __dest,
         const char * __src, size_t __n)
     ;
extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __l)
     ;
extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    __locale_t __l) ;
extern char *strdup (const char *__s)
     ;
extern char *strndup (const char *__string, size_t __n)
     ;
extern char *strchr (const char *__s, int __c)
     ;
extern char *strrchr (const char *__s, int __c)
     ;
extern char *strchrnul (const char *__s, int __c)
     ;
extern size_t strcspn (const char *__s, const char *__reject)
     ;
extern size_t strspn (const char *__s, const char *__accept)
     ;
extern char *strpbrk (const char *__s, const char *__accept)
     ;
extern char *strstr (const char *__haystack, const char *__needle)
     ;
extern char *strtok (char * __s, const char * __delim)
     ;
extern char *__strtok_r (char * __s,
    const char * __delim,
    char ** __save_ptr)
     ;
extern char *strtok_r (char * __s, const char * __delim,
         char ** __save_ptr)
     ;
extern char *strcasestr (const char *__haystack, const char *__needle)
     ;
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     ;
extern void *__mempcpy (void * __dest,
   const void * __src, size_t __n)
     ;
extern void *mempcpy (void * __dest,
        const void * __src, size_t __n)
     ;
extern size_t strlen (const char *__s)
     ;
extern size_t strnlen (const char *__string, size_t __maxlen)
     ;
extern char *strerror (int __errnum) ;
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     ;
extern char *strerror_l (int __errnum, __locale_t __l) ;
extern void __bzero (void *__s, size_t __n) ;
extern void bcopy (const void *__src, void *__dest, size_t __n)
     ;
extern void bzero (void *__s, size_t __n) ;
extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     ;
extern char *index (const char *__s, int __c)
     ;
extern char *rindex (const char *__s, int __c)
     ;
extern int ffs (int __i) ;
extern int ffsl (long int __l) ;
 extern int ffsll (long long int __ll)
     ;
extern int strcasecmp (const char *__s1, const char *__s2)
     ;
extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     ;
extern int strcasecmp_l (const char *__s1, const char *__s2,
    __locale_t __loc)
     ;
extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, __locale_t __loc)
     ;
extern char *strsep (char ** __stringp,
       const char * __delim)
     ;
extern char *strsignal (int __sig) ;
extern char *__stpcpy (char * __dest, const char * __src)
     ;
extern char *stpcpy (char * __dest, const char * __src)
     ;
extern char *__stpncpy (char * __dest,
   const char * __src, size_t __n)
     ;
extern char *stpncpy (char * __dest,
        const char * __src, size_t __n)
     ;
extern int strverscmp (const char *__s1, const char *__s2)
     ;
extern char *strfry (char *__string) ;
extern void *memfrob (void *__s, size_t __n) ;
extern char *basename (const char *__filename) ;
typedef long int s_reg_t;
typedef unsigned long int active_reg_t;
typedef unsigned long int reg_syntax_t;
extern reg_syntax_t xre_syntax_options;
typedef enum
{
  REG_ENOSYS = -1,
  REG_NOERROR = 0,
  REG_NOMATCH,
  REG_BADPAT,
  REG_ECOLLATE,
  REG_ECTYPE,
  REG_EESCAPE,
  REG_ESUBREG,
  REG_EBRACK,
  REG_EPAREN,
  REG_EBRACE,
  REG_BADBR,
  REG_ERANGE,
  REG_ESPACE,
  REG_BADRPT,
  REG_EEND,
  REG_ESIZE,
  REG_ERPAREN
} reg_errcode_t;
struct re_pattern_buffer
{
  unsigned char *buffer;
  unsigned long int allocated;
  unsigned long int used;
  reg_syntax_t syntax;
  char *fastmap;
  char * translate;
  size_t re_nsub;
  unsigned can_be_null : 1;
  unsigned regs_allocated : 2;
  unsigned fastmap_accurate : 1;
  unsigned no_sub : 1;
  unsigned not_bol : 1;
  unsigned not_eol : 1;
  unsigned newline_anchor : 1;
};
typedef struct re_pattern_buffer regex_t;
typedef int regoff_t;
struct re_registers
{
  unsigned num_regs;
  regoff_t *start;
  regoff_t *end;
};
typedef struct
{
  regoff_t rm_so;
  regoff_t rm_eo;
} regmatch_t;
extern reg_syntax_t xre_set_syntax (reg_syntax_t syntax);
extern const char *xre_compile_pattern
  (const char *pattern, size_t length, struct re_pattern_buffer *buffer)
                                               ;
extern int xre_compile_fastmap (struct re_pattern_buffer *buffer);
extern int xre_search
  (struct re_pattern_buffer *buffer, const char *string, int length, int start, int range, struct re_registers *regs)
                                                                         ;
extern int xre_search_2
  (struct re_pattern_buffer *buffer, const char *string1, int length1, const char *string2, int length2, int start, int range, struct re_registers *regs, int stop)
                                                                        ;
extern int xre_match
  (struct re_pattern_buffer *buffer, const char *string, int length, int start, struct re_registers *regs)
                                                               ;
extern int xre_match_2
  (struct re_pattern_buffer *buffer, const char *string1, int length1, const char *string2, int length2, int start, struct re_registers *regs, int stop)
                                                             ;
extern void xre_set_registers
  (struct re_pattern_buffer *buffer, struct re_registers *regs, unsigned num_regs, regoff_t *starts, regoff_t *ends)
                                                                  ;
extern char *xre_comp (const char *);
extern int xre_exec (const char *);
extern int xregcomp (regex_t * __preg, const char * __pattern, int __cflags)
                       ;
extern int xregexec (const regex_t * __preg, const char * __string, size_t __nmatch, regmatch_t __pmatch[], int __eflags)
                       ;
extern size_t xregerror (int __errcode, const regex_t *__preg, char *__errbuf, size_t __errbuf_size)
                                            ;
extern void xregfree (regex_t *__preg);
enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
extern const unsigned short int **__ctype_b_loc (void)
     ;
extern const __int32_t **__ctype_tolower_loc (void)
     ;
extern const __int32_t **__ctype_toupper_loc (void)
     ;
extern int isalnum (int) ;
extern int isalpha (int) ;
extern int iscntrl (int) ;
extern int isdigit (int) ;
extern int islower (int) ;
extern int isgraph (int) ;
extern int isprint (int) ;
extern int ispunct (int) ;
extern int isspace (int) ;
extern int isupper (int) ;
extern int isxdigit (int) ;
extern int tolower (int __c) ;
extern int toupper (int __c) ;
extern int isblank (int) ;
extern int isctype (int __c, int __mask) ;
extern int isascii (int __c) ;
extern int toascii (int __c) ;
extern int _toupper (int) ;
extern int _tolower (int) ;
extern int isalnum_l (int, __locale_t) ;
extern int isalpha_l (int, __locale_t) ;
extern int iscntrl_l (int, __locale_t) ;
extern int isdigit_l (int, __locale_t) ;
extern int islower_l (int, __locale_t) ;
extern int isgraph_l (int, __locale_t) ;
extern int isprint_l (int, __locale_t) ;
extern int ispunct_l (int, __locale_t) ;
extern int isspace_l (int, __locale_t) ;
extern int isupper_l (int, __locale_t) ;
extern int isxdigit_l (int, __locale_t) ;
extern int isblank_l (int, __locale_t) ;
extern int __tolower_l (int __c, __locale_t __l) ;
extern int tolower_l (int __c, __locale_t __l) ;
extern int __toupper_l (int __c, __locale_t __l) ;
extern int toupper_l (int __c, __locale_t __l) ;
static char re_syntax_table[256];
static void init_syntax_once (void);
static void
init_syntax_once ()
{
   register int c;
   static int done = 0;
   if (done)
     return;
   (memset (re_syntax_table, '\0', sizeof re_syntax_table), (re_syntax_table));
   for (c = 0; c < 256; ++c)
     if ((1 && ((*__ctype_b_loc ())[(int) ((c))] & (unsigned short int) _ISalnum)))
 re_syntax_table[c] = 1;
   re_syntax_table['_'] = 1;
   done = 1;
}
typedef char boolean;
static reg_errcode_t byte_regex_compile (const char *pattern, size_t size, reg_syntax_t syntax, struct re_pattern_buffer *bufp)
                                                                                   ;
static int byte_re_match_2_internal (struct re_pattern_buffer *bufp, const char *string1, int size1, const char *string2, int size2, int pos, struct re_registers *regs, int stop)
                    ;
static int byte_re_search_2 (struct re_pattern_buffer *bufp, const char *string1, int size1, const char *string2, int size2, int startpos, int range, struct re_registers *regs, int stop)
                                              ;
static int byte_re_compile_fastmap (struct re_pattern_buffer *bufp);
typedef enum
{
  no_op = 0,
  succeed,
  exactn,
  anychar,
  charset,
  charset_not,
  start_memory,
  stop_memory,
  duplicate,
  begline,
  endline,
  begbuf,
  endbuf,
  jump,
  jump_past_alt,
  on_failure_jump,
  on_failure_keep_string_jump,
  pop_failure_jump,
  maybe_pop_jump,
  dummy_failure_jump,
  push_dummy_failure,
  succeed_n,
  jump_n,
  set_number_at,
  wordchar,
  notwordchar,
  wordbeg,
  wordend,
  wordbound,
  notwordbound
} re_opcode_t;
int xre_max_failures = 4000;
union byte_fail_stack_elt
{
  unsigned char *pointer;
  int integer;
};
typedef union byte_fail_stack_elt byte_fail_stack_elt_t;
typedef struct
{
  byte_fail_stack_elt_t *stack;
  unsigned size;
  unsigned avail;
} byte_fail_stack_type;
typedef union
{
  byte_fail_stack_elt_t word;
  struct
  {
    unsigned match_null_string_p : 2;
    unsigned is_active : 1;
    unsigned matched_something : 1;
    unsigned ever_matched_something : 1;
  } bits;
} byte_register_info_type;
static char byte_reg_unset_dummy;
static void byte_store_op1 (re_opcode_t op, unsigned char *loc, int arg);
static void byte_store_op2 (re_opcode_t op, unsigned char *loc, int arg1, int arg2)
                         ;
static void byte_insert_op1 (re_opcode_t op, unsigned char *loc, int arg, unsigned char *end)
                             ;
static void byte_insert_op2 (re_opcode_t op, unsigned char *loc, int arg1, int arg2, unsigned char *end)
                                        ;
static boolean byte_at_begline_loc_p (const char *pattern, const char *p, reg_syntax_t syntax)
                             ;
static boolean byte_at_endline_loc_p (const char *p, const char *pend, reg_syntax_t syntax)
                             ;
static reg_errcode_t byte_compile_range (unsigned int range_start, const char **p_ptr, const char *pend, char *translate, reg_syntax_t syntax, unsigned char *b)
                           ;
typedef unsigned regnum_t;
typedef long pattern_offset_t;
typedef struct
{
  pattern_offset_t begalt_offset;
  pattern_offset_t fixup_alt_jump;
  pattern_offset_t inner_group_offset;
  pattern_offset_t laststart_offset;
  regnum_t regnum;
} compile_stack_elt_t;
typedef struct
{
  compile_stack_elt_t *stack;
  unsigned size;
  unsigned avail;
} compile_stack_type;
static boolean group_in_compile_stack (compile_stack_type compile_stack, regnum_t regnum)
                        ;
static reg_errcode_t
byte_regex_compile (pattern, size, syntax, bufp)
     const char *pattern;
     size_t size;
     reg_syntax_t syntax;
     struct re_pattern_buffer *bufp;
{
  register unsigned char c, c1;
  const char *p1;
  register unsigned char *b;
  compile_stack_type compile_stack;
  const char *p = pattern;
  const char *pend = pattern + size;
  char * translate = bufp->translate;
  unsigned char *pending_exact = 0;
  unsigned char *laststart = 0;
  unsigned char *begalt;
  unsigned char *fixup_alt_jump = 0;
  regnum_t regnum = 0;
  compile_stack.stack = ((compile_stack_elt_t *) malloc ((32) * sizeof (compile_stack_elt_t)));
  if (compile_stack.stack == ((void *)0))
    {
      return REG_ESPACE;
    }
  compile_stack.size = 32;
  compile_stack.avail = 0;
  bufp->syntax = syntax;
  bufp->fastmap_accurate = 0;
  bufp->not_bol = bufp->not_eol = 0;
  bufp->used = 0;
  bufp->re_nsub = 0;
   init_syntax_once ();
  if (bufp->allocated == 0)
    {
      if (bufp->buffer)
 {
          ((bufp->buffer) = (unsigned char *) realloc (bufp->buffer, ((32 * sizeof(unsigned char))) * sizeof (unsigned char)));
        }
      else
        {
          bufp->buffer = ((unsigned char *) malloc (((32 * sizeof(unsigned char)) / sizeof(unsigned char)) * sizeof (unsigned char)))
             ;
        }
      if (!bufp->buffer) return (free (compile_stack.stack), REG_ESPACE);
      bufp->allocated = (32 * sizeof(unsigned char));
    }
  begalt = b = bufp->buffer;
  while (p != pend)
    {
      do {if (p == pend) return REG_EEND; c = (unsigned char) *p++; if (translate) c = (unsigned char) translate[c]; } while (0);
      switch (c)
        {
        case '^':
          {
            if (
                   p == pattern + 1
                || syntax & (((((unsigned long int) 1) << 1) << 1) << 1)
                || byte_at_begline_loc_p (pattern, p, syntax))
              do { while ((unsigned long) (b - bufp->buffer + (1)) > bufp->allocated) do { unsigned char *old_buffer = bufp->buffer; if (bufp->allocated == (1L << 16)) return REG_ESIZE; bufp->allocated <<= 1; if (bufp->allocated > (1L << 16)) bufp->allocated = (1L << 16); bufp->buffer = (unsigned char *) realloc ((bufp->buffer), (bufp->allocated)); if (bufp->buffer == ((void *)0)) return REG_ESPACE; if (old_buffer != bufp->buffer) { int incr = bufp->buffer - old_buffer; (b) += incr; (begalt) += incr; if (fixup_alt_jump) (fixup_alt_jump) += incr; if (laststart) (laststart) += incr; if (pending_exact) (pending_exact) += incr; } } while (0); *b++ = (unsigned char) (begline); } while (0);
            else
              goto normal_char;
          }
          break;
        case '$':
          {
            if (
                   p == pend
                || syntax & (((((unsigned long int) 1) << 1) << 1) << 1)
                || byte_at_endline_loc_p (p, pend, syntax))
               do { while ((unsigned long) (b - bufp->buffer + (1)) > bufp->allocated) do { unsigned char *old_buffer = bufp->buffer; if (bufp->allocated == (1L << 16)) return REG_ESIZE; bufp->allocated <<= 1; if (bufp->allocated > (1L << 16)) bufp->allocated = (1L << 16); bufp->buffer = (unsigned char *) realloc ((bufp->buffer), (bufp->allocated)); if (bufp->buffer == ((void *)0)) return REG_ESPACE; if (old_buffer != bufp->buffer) { int incr = bufp->buffer - old_buffer; (b) += incr; (begalt) += incr; if (fixup_alt_jump) (fixup_alt_jump) += incr; if (laststart) (laststart) += incr; if (pending_exact) (pending_exact) += incr; } } while (0); *b++ = (unsigned char) (endline); } while (0);
             else
               goto normal_char;
           }
           break;
 case '+':
        case '?':
          if ((syntax & (((unsigned long int) 1) << 1))
              || (syntax & ((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
            goto normal_char;
        handle_plus:
        case '*':
          if (!laststart)
            {
              if (syntax & (((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1))
                return (free (compile_stack.stack), REG_BADRPT);
              else if (!(syntax & ((((((unsigned long int) 1) << 1) << 1) << 1) << 1)))
                goto normal_char;
            }
          {
            boolean keep_string_p = 0;
            char zero_times_ok = 0, many_times_ok = 0;
            for (;;)
              {
                zero_times_ok |= c != '+';
                many_times_ok |= c != '?';
                if (p == pend)
                  break;
                do {if (p == pend) return REG_EEND; c = (unsigned char) *p++; if (translate) c = (unsigned char) translate[c]; } while (0);
                if (c == '*'
                    || (!(syntax & (((unsigned long int) 1) << 1)) && (c == '+' || c == '?')))
                  ;
                else if (syntax & (((unsigned long int) 1) << 1) && c == '\\')
                  {
                    if (p == pend) return (free (compile_stack.stack), REG_EESCAPE);
                    do {if (p == pend) return REG_EEND; c1 = (unsigned char) *p++; if (translate) c1 = (unsigned char) translate[c1]; } while (0);
                    if (!(c1 == '+' || c1 == '?'))
                      {
                        p--;
                        p--;
                        break;
                      }
                    c = c1;
                  }
                else
                  {
                    p--;
                    break;
                  }
               }
            if (!laststart)
              break;
            if (many_times_ok)
              {
                ;
                while ((unsigned long) (b - bufp->buffer + (1 + 2)) > bufp->allocated) do { unsigned char *old_buffer = bufp->buffer; if (bufp->allocated == (1L << 16)) return REG_ESIZE; bufp->allocated <<= 1; if (bufp->allocated > (1L << 16)) bufp->allocated = (1L << 16); bufp->buffer = (unsigned char *) realloc ((bufp->buffer), (bufp->allocated)); if (bufp->buffer == ((void *)0)) return REG_ESPACE; if (old_buffer != bufp->buffer) { int incr = bufp->buffer - old_buffer; (b) += incr; (begalt) += incr; if (fixup_alt_jump) (fixup_alt_jump) += incr; if (laststart) (laststart) += incr; if (pending_exact) (pending_exact) += incr; } } while (0);
                if ((translate ? (char) translate[(unsigned char) (*(p - 2))] : (*(p - 2))) == (translate ? (char) translate[(unsigned char) ('.')] : ('.'))
      && zero_times_ok
                    && p < pend && (translate ? (char) translate[(unsigned char) (*p)] : (*p)) == (translate ? (char) translate[(unsigned char) ('\n')] : ('\n'))
                    && !(syntax & ((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1)))
                  {
                    byte_store_op1 (jump, b, (int) ((laststart) - (b) - (1 + 2)));
                    keep_string_p = 1;
                  }
                else
                  byte_store_op1 (maybe_pop_jump, b, (int) ((laststart - (1 + 2)) - (b) - (1 + 2)))
                                   ;
                b += 1 + 2;
              }
            while ((unsigned long) (b - bufp->buffer + (1 + 2)) > bufp->allocated) do { unsigned char *old_buffer = bufp->buffer; if (bufp->allocated == (1L << 16)) return REG_ESIZE; bufp->allocated <<= 1; if (bufp->allocated > (1L << 16)) bufp->allocated = (1L << 16); bufp->buffer = (unsigned char *) realloc ((bufp->buffer), (bufp->allocated)); if (bufp->buffer == ((void *)0)) return REG_ESPACE; if (old_buffer != bufp->buffer) { int incr = bufp->buffer - old_buffer; (b) += incr; (begalt) += incr; if (fixup_alt_jump) (fixup_alt_jump) += incr; if (laststart) (laststart) += incr; if (pending_exact) (pending_exact) += incr; } } while (0);
            byte_insert_op1 (keep_string_p ? on_failure_keep_string_jump : on_failure_jump, laststart, (int) ((b + 1 + 2) - (laststart) - (1 + 2)), b)
                                                                ;
            pending_exact = 0;
            b += 1 + 2;
            if (!zero_times_ok)
              {
                while ((unsigned long) (b - bufp->buffer + (1 + 2)) > bufp->allocated) do { unsigned char *old_buffer = bufp->buffer; if (bufp->allocated == (1L << 16)) return REG_ESIZE; bufp->allocated <<= 1; if (bufp->allocated > (1L << 16)) bufp->allocated = (1L << 16); bufp->buffer = (unsigned char *) realloc ((bufp->buffer), (bufp->allocated)); if (bufp->buffer == ((void *)0)) return REG_ESPACE; if (old_buffer != bufp->buffer) { int incr = bufp->buffer - old_buffer; (b) += incr; (begalt) += incr; if (fixup_alt_jump) (fixup_alt_jump) += incr; if (laststart) (laststart) += incr; if (pending_exact) (pending_exact) += incr; } } while (0);
                byte_insert_op1 (dummy_failure_jump, laststart, (int) ((laststart + 2 + 2 * 2) - (laststart) - (1 + 2)), b)
                                    ;
                b += 1 + 2;
              }
            }
   break;
 case '.':
          laststart = b;
          do { while ((unsigned long) (b - bufp->buffer + (1)) > bufp->allocated) do { unsigned char *old_buffer = bufp->buffer; if (bufp->allocated == (1L << 16)) return REG_ESIZE; bufp->allocated <<= 1; if (bufp->allocated > (1L << 16)) bufp->allocated = (1L << 16); bufp->buffer = (unsigned char *) realloc ((bufp->buffer), (bufp->allocated)); if (bufp->buffer == ((void *)0)) return REG_ESPACE; if (old_buffer != bufp->buffer) { int incr = bufp->buffer - old_buffer; (b) += incr; (begalt) += incr; if (fixup_alt_jump) (fixup_alt_jump) += incr; if (laststart) (laststart) += incr; if (pending_exact) (pending_exact) += incr; } } while (0); *b++ = (unsigned char) (anychar); } while (0);
          break;
        case '[':
          {
            boolean had_char_class = 0;
     unsigned int range_start = 0xffffffff;
            if (p == pend) return (free (compile_stack.stack), REG_EBRACK);
     while ((unsigned long) (b - bufp->buffer + (34)) > bufp->allocated) do { unsigned char *old_buffer = bufp->buffer; if (bufp->allocated == (1L << 16)) return REG_ESIZE; bufp->allocated <<= 1; if (bufp->allocated > (1L << 16)) bufp->allocated = (1L << 16); bufp->buffer = (unsigned char *) realloc ((bufp->buffer), (bufp->allocated)); if (bufp->buffer == ((void *)0)) return REG_ESPACE; if (old_buffer != bufp->buffer) { int incr = bufp->buffer - old_buffer; (b) += incr; (begalt) += incr; if (fixup_alt_jump) (fixup_alt_jump) += incr; if (laststart) (laststart) += incr; if (pending_exact) (pending_exact) += incr; } } while (0);
            laststart = b;
            do { while ((unsigned long) (b - bufp->buffer + (1)) > bufp->allocated) do { unsigned char *old_buffer = bufp->buffer; if (bufp->allocated == (1L << 16)) return REG_ESIZE; bufp->allocated <<= 1; if (bufp->allocated > (1L << 16)) bufp->allocated = (1L << 16); bufp->buffer = (unsigned char *) realloc ((bufp->buffer), (bufp->allocated)); if (bufp->buffer == ((void *)0)) return REG_ESPACE; if (old_buffer != bufp->buffer) { int incr = bufp->buffer - old_buffer; (b) += incr; (begalt) += incr; if (fixup_alt_jump) (fixup_alt_jump) += incr; if (laststart) (laststart) += incr; if (pending_exact) (pending_exact) += incr; } } while (0); *b++ = (unsigned char) (*p == '^' ? charset_not : charset); } while (0);
            if (*p == '^')
              p++;
            p1 = p;
            do { while ((unsigned long) (b - bufp->buffer + (1)) > bufp->allocated) do { unsigned char *old_buffer = bufp->buffer; if (bufp->allocated == (1L << 16)) return REG_ESIZE; bufp->allocated <<= 1; if (bufp->allocated > (1L << 16)) bufp->allocated = (1L << 16); bufp->buffer = (unsigned char *) realloc ((bufp->buffer), (bufp->allocated)); if (bufp->buffer == ((void *)0)) return REG_ESPACE; if (old_buffer != bufp->buffer) { int incr = bufp->buffer - old_buffer; (b) += incr; (begalt) += incr; if (fixup_alt_jump) (fixup_alt_jump) += incr; if (laststart) (laststart) += incr; if (pending_exact) (pending_exact) += incr; } } while (0); *b++ = (unsigned char) ((1 << 8) / 8); } while (0);
            (memset (b, '\0', (1 << 8) / 8), (b));
            if ((re_opcode_t) b[-2] == charset_not
                && (syntax & ((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
              (b[((unsigned char) ('\n')) / 8] |= 1 << (((unsigned char) '\n') % 8));
            for (;;)
              {
                if (p == pend) return (free (compile_stack.stack), REG_EBRACK);
                do {if (p == pend) return REG_EEND; c = (unsigned char) *p++; if (translate) c = (unsigned char) translate[c]; } while (0);
                if ((syntax & ((unsigned long int) 1)) && c == '\\')
                  {
                    if (p == pend) return (free (compile_stack.stack), REG_EESCAPE);
                    do {if (p == pend) return REG_EEND; c1 = (unsigned char) *p++; if (translate) c1 = (unsigned char) translate[c1]; } while (0);
                    (b[((unsigned char) (c1)) / 8] |= 1 << (((unsigned char) c1) % 8));
      range_start = c1;
                    continue;
                  }
                if (c == ']' && p != p1 + 1)
                  break;
                if (had_char_class && c == '-' && *p != ']')
                  return (free (compile_stack.stack), REG_ERANGE);
                if (c == '-'
                    && !(p - 2 >= pattern && p[-2] == '[')
                    && !(p - 3 >= pattern && p[-3] == '[' && p[-2] == '^')
                    && *p != ']')
                  {
                    reg_errcode_t ret
                      = byte_compile_range (range_start, &p, pend, translate,
         syntax, b);
                    if (ret != REG_NOERROR) return (free (compile_stack.stack), ret);
      range_start = 0xffffffff;
                  }
                else if (p[0] == '-' && p[1] != ']')
                  {
                    reg_errcode_t ret;
                    do {if (p == pend) return REG_EEND; c1 = (unsigned char) *p++; if (translate) c1 = (unsigned char) translate[c1]; } while (0);
                    ret = byte_compile_range (c, &p, pend, translate, syntax, b);
                    if (ret != REG_NOERROR) return (free (compile_stack.stack), ret);
      range_start = 0xffffffff;
                  }
                else if (syntax & ((((unsigned long int) 1) << 1) << 1) && c == '[' && *p == ':')
                  {
                    char str[6 + 1];
                    do {if (p == pend) return REG_EEND; c = (unsigned char) *p++; if (translate) c = (unsigned char) translate[c]; } while (0);
                    c1 = 0;
                    if (p == pend) return (free (compile_stack.stack), REG_EBRACK);
                    for (;;)
                      {
                        do {if (p == pend) return REG_EEND; c = (unsigned char) *p++; if (translate) c = (unsigned char) translate[c]; } while (0);
                        if ((c == ':' && *p == ']') || p == pend)
                          break;
   if (c1 < 6)
     str[c1++] = c;
   else
     str[0] = '\0';
                      }
                    str[c1] = '\0';
                    if (c == ':' && *p == ']')
                      {
                        int ch;
                        boolean is_alnum = ((strcmp (str, "alnum") == 0));
                        boolean is_alpha = ((strcmp (str, "alpha") == 0));
                        boolean is_blank = ((strcmp (str, "blank") == 0));
                        boolean is_cntrl = ((strcmp (str, "cntrl") == 0));
                        boolean is_digit = ((strcmp (str, "digit") == 0));
                        boolean is_graph = ((strcmp (str, "graph") == 0));
                        boolean is_lower = ((strcmp (str, "lower") == 0));
                        boolean is_print = ((strcmp (str, "print") == 0));
                        boolean is_punct = ((strcmp (str, "punct") == 0));
                        boolean is_space = ((strcmp (str, "space") == 0));
                        boolean is_upper = ((strcmp (str, "upper") == 0));
                        boolean is_xdigit = ((strcmp (str, "xdigit") == 0));
                        if (!(((strcmp (str, "alpha") == 0)) || ((strcmp (str, "upper") == 0)) || ((strcmp (str, "lower") == 0)) || ((strcmp (str, "digit") == 0)) || ((strcmp (str, "alnum") == 0)) || ((strcmp (str, "xdigit") == 0)) || ((strcmp (str, "space") == 0)) || ((strcmp (str, "print") == 0)) || ((strcmp (str, "punct") == 0)) || ((strcmp (str, "graph") == 0)) || ((strcmp (str, "cntrl") == 0)) || ((strcmp (str, "blank") == 0))))
     return (free (compile_stack.stack), REG_ECTYPE);
                        do {if (p == pend) return REG_EEND; c = (unsigned char) *p++; if (translate) c = (unsigned char) translate[c]; } while (0);
                        if (p == pend) return (free (compile_stack.stack), REG_EBRACK);
                        for (ch = 0; ch < 1 << 8; ch++)
                          {
                            if ( (is_alnum && (1 && ((*__ctype_b_loc ())[(int) ((ch))] & (unsigned short int) _ISalnum)))
                                || (is_alpha && (1 && ((*__ctype_b_loc ())[(int) ((ch))] & (unsigned short int) _ISalpha)))
                                || (is_blank && (1 && ((*__ctype_b_loc ())[(int) ((ch))] & (unsigned short int) _ISblank)))
                                || (is_cntrl && (1 && ((*__ctype_b_loc ())[(int) ((ch))] & (unsigned short int) _IScntrl))))
         (b[((unsigned char) (ch)) / 8] |= 1 << (((unsigned char) ch) % 8));
       if ( (is_digit && (1 && ((*__ctype_b_loc ())[(int) ((ch))] & (unsigned short int) _ISdigit)))
                                || (is_graph && (1 && ((*__ctype_b_loc ())[(int) ((ch))] & (unsigned short int) _ISgraph)))
                                || (is_lower && (1 && ((*__ctype_b_loc ())[(int) ((ch))] & (unsigned short int) _ISlower)))
                                || (is_print && (1 && ((*__ctype_b_loc ())[(int) ((ch))] & (unsigned short int) _ISprint))))
         (b[((unsigned char) (ch)) / 8] |= 1 << (((unsigned char) ch) % 8));
       if ( (is_punct && (1 && ((*__ctype_b_loc ())[(int) ((ch))] & (unsigned short int) _ISpunct)))
                                || (is_space && (1 && ((*__ctype_b_loc ())[(int) ((ch))] & (unsigned short int) _ISspace)))
                                || (is_upper && (1 && ((*__ctype_b_loc ())[(int) ((ch))] & (unsigned short int) _ISupper)))
                                || (is_xdigit && (1 && ((*__ctype_b_loc ())[(int) ((ch))] & (unsigned short int) _ISxdigit))))
         (b[((unsigned char) (ch)) / 8] |= 1 << (((unsigned char) ch) % 8));
       if ( translate && (is_upper || is_lower)
    && ((1 && ((*__ctype_b_loc ())[(int) ((ch))] & (unsigned short int) _ISupper)) || (1 && ((*__ctype_b_loc ())[(int) ((ch))] & (unsigned short int) _ISlower))))
         (b[((unsigned char) (ch)) / 8] |= 1 << (((unsigned char) ch) % 8));
                          }
                        had_char_class = 1;
                      }
                    else
                      {
                        c1++;
                        while (c1--)
                          p--;
                        (b[((unsigned char) ('[')) / 8] |= 1 << (((unsigned char) '[') % 8));
                        (b[((unsigned char) (':')) / 8] |= 1 << (((unsigned char) ':') % 8));
   range_start = ':';
                        had_char_class = 0;
                      }
                  }
                else if (syntax & ((((unsigned long int) 1) << 1) << 1) && c == '[' && *p == '=')
    {
      unsigned char str[16 + 1];
      do {if (p == pend) return REG_EEND; c = (unsigned char) *p++; if (translate) c = (unsigned char) translate[c]; } while (0);
      c1 = 0;
      if (p == pend) return (free (compile_stack.stack), REG_EBRACK);
      for (;;)
        {
   do {if (p == pend) return REG_EEND; c = (unsigned char) *p++; if (translate) c = (unsigned char) translate[c]; } while (0);
   if ((c == '=' && *p == ']') || p == pend)
     break;
   if (c1 < 16)
     str[c1++] = c;
   else
     str[0] = '\0';
                      }
      str[c1] = '\0';
      if (c == '=' && *p == ']' && str[0] != '\0')
        {
     {
       if (c1 != 1)
         return (free (compile_stack.stack), REG_ECOLLATE);
       do {if (p == pend) return REG_EEND; c = (unsigned char) *p++; if (translate) c = (unsigned char) translate[c]; } while (0);
       (b[((unsigned char) (str[0])) / 8] |= 1 << (((unsigned char) str[0]) % 8));
     }
   had_char_class = 1;
        }
                    else
                      {
                        c1++;
                        while (c1--)
                          p--;
                        (b[((unsigned char) ('[')) / 8] |= 1 << (((unsigned char) '[') % 8));
                        (b[((unsigned char) ('=')) / 8] |= 1 << (((unsigned char) '=') % 8));
   range_start = '=';
                        had_char_class = 0;
                      }
    }
                else if (syntax & ((((unsigned long int) 1) << 1) << 1) && c == '[' && *p == '.')
    {
      unsigned char str[128];
      do {if (p == pend) return REG_EEND; c = (unsigned char) *p++; if (translate) c = (unsigned char) translate[c]; } while (0);
      c1 = 0;
      if (p == pend) return (free (compile_stack.stack), REG_EBRACK);
      for (;;)
        {
   do {if (p == pend) return REG_EEND; c = (unsigned char) *p++; if (translate) c = (unsigned char) translate[c]; } while (0);
   if ((c == '.' && *p == ']') || p == pend)
     break;
   if (c1 < sizeof (str))
     str[c1++] = c;
   else
     str[0] = '\0';
                      }
      str[c1] = '\0';
      if (c == '.' && *p == ']' && str[0] != '\0')
        {
     {
       if (c1 != 1)
         return (free (compile_stack.stack), REG_ECOLLATE);
       do {if (p == pend) return REG_EEND; c = (unsigned char) *p++; if (translate) c = (unsigned char) translate[c]; } while (0);
       (b[((unsigned char) (str[0])) / 8] |= 1 << (((unsigned char) str[0]) % 8));
       range_start = ((const unsigned char *) str)[0];
     }
   had_char_class = 0;
        }
                    else
                      {
                        c1++;
                        while (c1--)
                          p--;
                        (b[((unsigned char) ('[')) / 8] |= 1 << (((unsigned char) '[') % 8));
                        (b[((unsigned char) ('.')) / 8] |= 1 << (((unsigned char) '.') % 8));
   range_start = '.';
                        had_char_class = 0;
                      }
    }
                else
                  {
                    had_char_class = 0;
                    (b[((unsigned char) (c)) / 8] |= 1 << (((unsigned char) c) % 8));
      range_start = c;
                  }
              }
            while ((int) b[-1] > 0 && b[b[-1] - 1] == 0)
              b[-1]--;
            b += b[-1];
          }
          break;
 case '(':
          if (syntax & (((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto handle_open;
          else
            goto normal_char;
        case ')':
          if (syntax & (((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto handle_close;
          else
            goto normal_char;
        case '\n':
          if (syntax & (((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto handle_alt;
          else
            goto normal_char;
 case '|':
          if (syntax & (((((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
            goto handle_alt;
          else
            goto normal_char;
        case '{':
           if (syntax & (((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) && syntax & ((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
             goto handle_interval;
           else
             goto normal_char;
        case '\\':
          if (p == pend) return (free (compile_stack.stack), REG_EESCAPE);
          do {if (p == pend) return REG_EEND; c = (unsigned char) *p++; } while (0);
          switch (c)
            {
            case '(':
              if (syntax & (((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                goto normal_backslash;
            handle_open:
              bufp->re_nsub++;
              regnum++;
              if ((compile_stack.avail == compile_stack.size))
                {
                  ((compile_stack.stack) = (compile_stack_elt_t *) realloc (compile_stack.stack, (compile_stack.size << 1) * sizeof (compile_stack_elt_t)))
                                                ;
                  if (compile_stack.stack == ((void *)0)) return REG_ESPACE;
                  compile_stack.size <<= 1;
                }
              (compile_stack.stack[compile_stack.avail]).begalt_offset = begalt - bufp->buffer;
              (compile_stack.stack[compile_stack.avail]).fixup_alt_jump
                = fixup_alt_jump ? fixup_alt_jump - bufp->buffer + 1 : 0;
              (compile_stack.stack[compile_stack.avail]).laststart_offset = b - bufp->buffer;
              (compile_stack.stack[compile_stack.avail]).regnum = regnum;
              if (regnum <= 255)
                {
                  (compile_stack.stack[compile_stack.avail]).inner_group_offset = b
      - bufp->buffer + 2;
                  do { while ((unsigned long) (b - bufp->buffer + (3)) > bufp->allocated) do { unsigned char *old_buffer = bufp->buffer; if (bufp->allocated == (1L << 16)) return REG_ESIZE; bufp->allocated <<= 1; if (bufp->allocated > (1L << 16)) bufp->allocated = (1L << 16); bufp->buffer = (unsigned char *) realloc ((bufp->buffer), (bufp->allocated)); if (bufp->buffer == ((void *)0)) return REG_ESPACE; if (old_buffer != bufp->buffer) { int incr = bufp->buffer - old_buffer; (b) += incr; (begalt) += incr; if (fixup_alt_jump) (fixup_alt_jump) += incr; if (laststart) (laststart) += incr; if (pending_exact) (pending_exact) += incr; } } while (0); *b++ = (unsigned char) (start_memory); *b++ = (unsigned char) (regnum); *b++ = (unsigned char) (0); } while (0);
                }
              compile_stack.avail++;
              fixup_alt_jump = 0;
              laststart = 0;
              begalt = b;
       pending_exact = 0;
              break;
            case ')':
              if (syntax & (((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) goto normal_backslash;
              if ((compile_stack.avail == 0))
  {
    if (syntax & (((((((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
      goto normal_backslash;
    else
      return (free (compile_stack.stack), REG_ERPAREN);
  }
            handle_close:
              if (fixup_alt_jump)
                {
                  do { while ((unsigned long) (b - bufp->buffer + (1)) > bufp->allocated) do { unsigned char *old_buffer = bufp->buffer; if (bufp->allocated == (1L << 16)) return REG_ESIZE; bufp->allocated <<= 1; if (bufp->allocated > (1L << 16)) bufp->allocated = (1L << 16); bufp->buffer = (unsigned char *) realloc ((bufp->buffer), (bufp->allocated)); if (bufp->buffer == ((void *)0)) return REG_ESPACE; if (old_buffer != bufp->buffer) { int incr = bufp->buffer - old_buffer; (b) += incr; (begalt) += incr; if (fixup_alt_jump) (fixup_alt_jump) += incr; if (laststart) (laststart) += incr; if (pending_exact) (pending_exact) += incr; } } while (0); *b++ = (unsigned char) (push_dummy_failure); } while (0);
                  byte_store_op1 (jump_past_alt, fixup_alt_jump, (int) ((b - 1) - (fixup_alt_jump) - (1 + 2)));
                }
              if ((compile_stack.avail == 0))
  {
    if (syntax & (((((((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
      goto normal_char;
    else
      return (free (compile_stack.stack), REG_ERPAREN);
  }
              ;
              {
                regnum_t this_group_regnum;
                compile_stack.avail--;
                begalt = bufp->buffer + (compile_stack.stack[compile_stack.avail]).begalt_offset;
                fixup_alt_jump
                  = (compile_stack.stack[compile_stack.avail]).fixup_alt_jump
                    ? bufp->buffer + (compile_stack.stack[compile_stack.avail]).fixup_alt_jump - 1
                    : 0;
                laststart = bufp->buffer + (compile_stack.stack[compile_stack.avail]).laststart_offset;
                this_group_regnum = (compile_stack.stack[compile_stack.avail]).regnum;
  pending_exact = 0;
                if (this_group_regnum <= 255)
                  {
      unsigned char *inner_group_loc
                      = bufp->buffer + (compile_stack.stack[compile_stack.avail]).inner_group_offset;
                    *inner_group_loc = regnum - this_group_regnum;
                    do { while ((unsigned long) (b - bufp->buffer + (3)) > bufp->allocated) do { unsigned char *old_buffer = bufp->buffer; if (bufp->allocated == (1L << 16)) return REG_ESIZE; bufp->allocated <<= 1; if (bufp->allocated > (1L << 16)) bufp->allocated = (1L << 16); bufp->buffer = (unsigned char *) realloc ((bufp->buffer), (bufp->allocated)); if (bufp->buffer == ((void *)0)) return REG_ESPACE; if (old_buffer != bufp->buffer) { int incr = bufp->buffer - old_buffer; (b) += incr; (begalt) += incr; if (fixup_alt_jump) (fixup_alt_jump) += incr; if (laststart) (laststart) += incr; if (pending_exact) (pending_exact) += incr; } } while (0); *b++ = (unsigned char) (stop_memory); *b++ = (unsigned char) (this_group_regnum); *b++ = (unsigned char) (regnum - this_group_regnum); } while (0)
                                                           ;
                  }
              }
              break;
            case '|':
              if (syntax & ((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || syntax & (((((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                goto normal_backslash;
            handle_alt:
              if (syntax & ((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                goto normal_char;
              while ((unsigned long) (b - bufp->buffer + (1 + 2)) > bufp->allocated) do { unsigned char *old_buffer = bufp->buffer; if (bufp->allocated == (1L << 16)) return REG_ESIZE; bufp->allocated <<= 1; if (bufp->allocated > (1L << 16)) bufp->allocated = (1L << 16); bufp->buffer = (unsigned char *) realloc ((bufp->buffer), (bufp->allocated)); if (bufp->buffer == ((void *)0)) return REG_ESPACE; if (old_buffer != bufp->buffer) { int incr = bufp->buffer - old_buffer; (b) += incr; (begalt) += incr; if (fixup_alt_jump) (fixup_alt_jump) += incr; if (laststart) (laststart) += incr; if (pending_exact) (pending_exact) += incr; } } while (0);
              byte_insert_op1 (on_failure_jump, begalt, (int) ((b + 2 + 2 * 2) - (begalt) - (1 + 2)), b)
                                      ;
              pending_exact = 0;
              b += 1 + 2;
              if (fixup_alt_jump)
                byte_store_op1 (jump_past_alt, fixup_alt_jump, (int) ((b) - (fixup_alt_jump) - (1 + 2)));
              fixup_alt_jump = b;
              while ((unsigned long) (b - bufp->buffer + (1 + 2)) > bufp->allocated) do { unsigned char *old_buffer = bufp->buffer; if (bufp->allocated == (1L << 16)) return REG_ESIZE; bufp->allocated <<= 1; if (bufp->allocated > (1L << 16)) bufp->allocated = (1L << 16); bufp->buffer = (unsigned char *) realloc ((bufp->buffer), (bufp->allocated)); if (bufp->buffer == ((void *)0)) return REG_ESPACE; if (old_buffer != bufp->buffer) { int incr = bufp->buffer - old_buffer; (b) += incr; (begalt) += incr; if (fixup_alt_jump) (fixup_alt_jump) += incr; if (laststart) (laststart) += incr; if (pending_exact) (pending_exact) += incr; } } while (0);
              b += 1 + 2;
              laststart = 0;
              begalt = b;
              break;
            case '{':
              if (!(syntax & (((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    || (syntax & ((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
                goto normal_backslash;
            handle_interval:
              {
                int lower_bound = -1, upper_bound = -1;
  const char *beg_interval = p;
                if (p == pend)
    goto invalid_interval;
                { while (p != pend) { do {if (p == pend) return REG_EEND; c = (unsigned char) *p++; if (translate) c = (unsigned char) translate[c]; } while (0); if (c < '0' || c > '9') break; if (lower_bound <= (0x7fff)) { if (lower_bound < 0) lower_bound = 0; lower_bound = lower_bound * 10 + c - '0'; } } };
                if (c == ',')
                  {
                    { while (p != pend) { do {if (p == pend) return REG_EEND; c = (unsigned char) *p++; if (translate) c = (unsigned char) translate[c]; } while (0); if (c < '0' || c > '9') break; if (upper_bound <= (0x7fff)) { if (upper_bound < 0) upper_bound = 0; upper_bound = upper_bound * 10 + c - '0'; } } };
      if (upper_bound < 0)
        upper_bound = (0x7fff);
                  }
                else
                  upper_bound = lower_bound;
                if (! (0 <= lower_bound && lower_bound <= upper_bound))
    goto invalid_interval;
                if (!(syntax & ((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
                  {
      if (c != '\\' || p == pend)
        goto invalid_interval;
                    do {if (p == pend) return REG_EEND; c = (unsigned char) *p++; if (translate) c = (unsigned char) translate[c]; } while (0);
                  }
                if (c != '}')
    goto invalid_interval;
                if (!laststart)
                  {
      if (syntax & (((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1)
   && !(syntax & (((((((((((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
                      return (free (compile_stack.stack), REG_BADRPT);
                    else if (syntax & ((((((unsigned long int) 1) << 1) << 1) << 1) << 1))
                      laststart = b;
                    else
                      goto unfetch_interval;
                  }
                if ((0x7fff) < upper_bound)
    return (free (compile_stack.stack), REG_BADBR);
                 if (upper_bound == 0)
                   {
                     while ((unsigned long) (b - bufp->buffer + (1 + 2)) > bufp->allocated) do { unsigned char *old_buffer = bufp->buffer; if (bufp->allocated == (1L << 16)) return REG_ESIZE; bufp->allocated <<= 1; if (bufp->allocated > (1L << 16)) bufp->allocated = (1L << 16); bufp->buffer = (unsigned char *) realloc ((bufp->buffer), (bufp->allocated)); if (bufp->buffer == ((void *)0)) return REG_ESPACE; if (old_buffer != bufp->buffer) { int incr = bufp->buffer - old_buffer; (b) += incr; (begalt) += incr; if (fixup_alt_jump) (fixup_alt_jump) += incr; if (laststart) (laststart) += incr; if (pending_exact) (pending_exact) += incr; } } while (0);
                     byte_insert_op1 (jump, laststart, (int) ((b + 1 + 2) - (laststart) - (1 + 2)), b)
                            ;
                     b += 1 + 2;
                   }
                 else
                   {
                     unsigned nbytes = 2 + 4 * 2 +
         (upper_bound > 1) * (2 + 4 * 2);
                     while ((unsigned long) (b - bufp->buffer + (nbytes)) > bufp->allocated) do { unsigned char *old_buffer = bufp->buffer; if (bufp->allocated == (1L << 16)) return REG_ESIZE; bufp->allocated <<= 1; if (bufp->allocated > (1L << 16)) bufp->allocated = (1L << 16); bufp->buffer = (unsigned char *) realloc ((bufp->buffer), (bufp->allocated)); if (bufp->buffer == ((void *)0)) return REG_ESPACE; if (old_buffer != bufp->buffer) { int incr = bufp->buffer - old_buffer; (b) += incr; (begalt) += incr; if (fixup_alt_jump) (fixup_alt_jump) += incr; if (laststart) (laststart) += incr; if (pending_exact) (pending_exact) += incr; } } while (0);
                     byte_insert_op2 (succeed_n, laststart, (int) ((b + 1 + 2 * 2 + (upper_bound > 1) * (1 + 2 * 2)) - (laststart) - (1 + 2)), lower_bound, b)
                     ;
                     b += 1 + 2 * 2;
                     byte_insert_op2 (set_number_at, laststart, 1
     + 2 * 2, lower_bound, b);
                     b += 1 + 2 * 2;
                     if (upper_bound > 1)
                       {
                         byte_store_op2 (jump_n, b, (int) ((laststart + 2 * 2 + 1) - (b) - (1 + 2)), upper_bound - 1)
                                                      ;
                         b += 1 + 2 * 2;
                         byte_insert_op2 (set_number_at, laststart,
          b - laststart,
          upper_bound - 1, b);
                         b += 1 + 2 * 2;
                       }
                   }
                pending_exact = 0;
  break;
       invalid_interval:
  if (!(syntax & (((((((((((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)))
    return (free (compile_stack.stack), p == pend ? REG_EBRACE : REG_BADBR);
       unfetch_interval:
  p = beg_interval;
  c = '{';
  if (syntax & ((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    goto normal_char;
  else
    goto normal_backslash;
       }
            case 'w':
       if (syntax & (((((((((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
  goto normal_char;
              laststart = b;
              do { while ((unsigned long) (b - bufp->buffer + (1)) > bufp->allocated) do { unsigned char *old_buffer = bufp->buffer; if (bufp->allocated == (1L << 16)) return REG_ESIZE; bufp->allocated <<= 1; if (bufp->allocated > (1L << 16)) bufp->allocated = (1L << 16); bufp->buffer = (unsigned char *) realloc ((bufp->buffer), (bufp->allocated)); if (bufp->buffer == ((void *)0)) return REG_ESPACE; if (old_buffer != bufp->buffer) { int incr = bufp->buffer - old_buffer; (b) += incr; (begalt) += incr; if (fixup_alt_jump) (fixup_alt_jump) += incr; if (laststart) (laststart) += incr; if (pending_exact) (pending_exact) += incr; } } while (0); *b++ = (unsigned char) (wordchar); } while (0);
              break;
            case 'W':
       if (syntax & (((((((((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
  goto normal_char;
              laststart = b;
              do { while ((unsigned long) (b - bufp->buffer + (1)) > bufp->allocated) do { unsigned char *old_buffer = bufp->buffer; if (bufp->allocated == (1L << 16)) return REG_ESIZE; bufp->allocated <<= 1; if (bufp->allocated > (1L << 16)) bufp->allocated = (1L << 16); bufp->buffer = (unsigned char *) realloc ((bufp->buffer), (bufp->allocated)); if (bufp->buffer == ((void *)0)) return REG_ESPACE; if (old_buffer != bufp->buffer) { int incr = bufp->buffer - old_buffer; (b) += incr; (begalt) += incr; if (fixup_alt_jump) (fixup_alt_jump) += incr; if (laststart) (laststart) += incr; if (pending_exact) (pending_exact) += incr; } } while (0); *b++ = (unsigned char) (notwordchar); } while (0);
              break;
            case '<':
       if (syntax & (((((((((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
  goto normal_char;
              do { while ((unsigned long) (b - bufp->buffer + (1)) > bufp->allocated) do { unsigned char *old_buffer = bufp->buffer; if (bufp->allocated == (1L << 16)) return REG_ESIZE; bufp->allocated <<= 1; if (bufp->allocated > (1L << 16)) bufp->allocated = (1L << 16); bufp->buffer = (unsigned char *) realloc ((bufp->buffer), (bufp->allocated)); if (bufp->buffer == ((void *)0)) return REG_ESPACE; if (old_buffer != bufp->buffer) { int incr = bufp->buffer - old_buffer; (b) += incr; (begalt) += incr; if (fixup_alt_jump) (fixup_alt_jump) += incr; if (laststart) (laststart) += incr; if (pending_exact) (pending_exact) += incr; } } while (0); *b++ = (unsigned char) (wordbeg); } while (0);
              break;
            case '>':
       if (syntax & (((((((((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
  goto normal_char;
              do { while ((unsigned long) (b - bufp->buffer + (1)) > bufp->allocated) do { unsigned char *old_buffer = bufp->buffer; if (bufp->allocated == (1L << 16)) return REG_ESIZE; bufp->allocated <<= 1; if (bufp->allocated > (1L << 16)) bufp->allocated = (1L << 16); bufp->buffer = (unsigned char *) realloc ((bufp->buffer), (bufp->allocated)); if (bufp->buffer == ((void *)0)) return REG_ESPACE; if (old_buffer != bufp->buffer) { int incr = bufp->buffer - old_buffer; (b) += incr; (begalt) += incr; if (fixup_alt_jump) (fixup_alt_jump) += incr; if (laststart) (laststart) += incr; if (pending_exact) (pending_exact) += incr; } } while (0); *b++ = (unsigned char) (wordend); } while (0);
              break;
            case 'b':
       if (syntax & (((((((((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
  goto normal_char;
              do { while ((unsigned long) (b - bufp->buffer + (1)) > bufp->allocated) do { unsigned char *old_buffer = bufp->buffer; if (bufp->allocated == (1L << 16)) return REG_ESIZE; bufp->allocated <<= 1; if (bufp->allocated > (1L << 16)) bufp->allocated = (1L << 16); bufp->buffer = (unsigned char *) realloc ((bufp->buffer), (bufp->allocated)); if (bufp->buffer == ((void *)0)) return REG_ESPACE; if (old_buffer != bufp->buffer) { int incr = bufp->buffer - old_buffer; (b) += incr; (begalt) += incr; if (fixup_alt_jump) (fixup_alt_jump) += incr; if (laststart) (laststart) += incr; if (pending_exact) (pending_exact) += incr; } } while (0); *b++ = (unsigned char) (wordbound); } while (0);
              break;
            case 'B':
       if (syntax & (((((((((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
  goto normal_char;
              do { while ((unsigned long) (b - bufp->buffer + (1)) > bufp->allocated) do { unsigned char *old_buffer = bufp->buffer; if (bufp->allocated == (1L << 16)) return REG_ESIZE; bufp->allocated <<= 1; if (bufp->allocated > (1L << 16)) bufp->allocated = (1L << 16); bufp->buffer = (unsigned char *) realloc ((bufp->buffer), (bufp->allocated)); if (bufp->buffer == ((void *)0)) return REG_ESPACE; if (old_buffer != bufp->buffer) { int incr = bufp->buffer - old_buffer; (b) += incr; (begalt) += incr; if (fixup_alt_jump) (fixup_alt_jump) += incr; if (laststart) (laststart) += incr; if (pending_exact) (pending_exact) += incr; } } while (0); *b++ = (unsigned char) (notwordbound); } while (0);
              break;
            case '`':
       if (syntax & (((((((((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
  goto normal_char;
              do { while ((unsigned long) (b - bufp->buffer + (1)) > bufp->allocated) do { unsigned char *old_buffer = bufp->buffer; if (bufp->allocated == (1L << 16)) return REG_ESIZE; bufp->allocated <<= 1; if (bufp->allocated > (1L << 16)) bufp->allocated = (1L << 16); bufp->buffer = (unsigned char *) realloc ((bufp->buffer), (bufp->allocated)); if (bufp->buffer == ((void *)0)) return REG_ESPACE; if (old_buffer != bufp->buffer) { int incr = bufp->buffer - old_buffer; (b) += incr; (begalt) += incr; if (fixup_alt_jump) (fixup_alt_jump) += incr; if (laststart) (laststart) += incr; if (pending_exact) (pending_exact) += incr; } } while (0); *b++ = (unsigned char) (begbuf); } while (0);
              break;
            case '\'':
       if (syntax & (((((((((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
  goto normal_char;
              do { while ((unsigned long) (b - bufp->buffer + (1)) > bufp->allocated) do { unsigned char *old_buffer = bufp->buffer; if (bufp->allocated == (1L << 16)) return REG_ESIZE; bufp->allocated <<= 1; if (bufp->allocated > (1L << 16)) bufp->allocated = (1L << 16); bufp->buffer = (unsigned char *) realloc ((bufp->buffer), (bufp->allocated)); if (bufp->buffer == ((void *)0)) return REG_ESPACE; if (old_buffer != bufp->buffer) { int incr = bufp->buffer - old_buffer; (b) += incr; (begalt) += incr; if (fixup_alt_jump) (fixup_alt_jump) += incr; if (laststart) (laststart) += incr; if (pending_exact) (pending_exact) += incr; } } while (0); *b++ = (unsigned char) (endbuf); } while (0);
              break;
            case '1': case '2': case '3': case '4': case '5':
            case '6': case '7': case '8': case '9':
              if (syntax & ((((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                goto normal_char;
              c1 = c - '0';
              if (c1 > regnum)
                return (free (compile_stack.stack), REG_ESUBREG);
              if (group_in_compile_stack (compile_stack, (regnum_t) c1))
                goto normal_char;
              laststart = b;
              do { while ((unsigned long) (b - bufp->buffer + (2)) > bufp->allocated) do { unsigned char *old_buffer = bufp->buffer; if (bufp->allocated == (1L << 16)) return REG_ESIZE; bufp->allocated <<= 1; if (bufp->allocated > (1L << 16)) bufp->allocated = (1L << 16); bufp->buffer = (unsigned char *) realloc ((bufp->buffer), (bufp->allocated)); if (bufp->buffer == ((void *)0)) return REG_ESPACE; if (old_buffer != bufp->buffer) { int incr = bufp->buffer - old_buffer; (b) += incr; (begalt) += incr; if (fixup_alt_jump) (fixup_alt_jump) += incr; if (laststart) (laststart) += incr; if (pending_exact) (pending_exact) += incr; } } while (0); *b++ = (unsigned char) (duplicate); *b++ = (unsigned char) (c1); } while (0);
              break;
            case '+':
            case '?':
              if (syntax & (((unsigned long int) 1) << 1))
                goto handle_plus;
              else
                goto normal_backslash;
            default:
            normal_backslash:
              c = (translate ? (char) translate[(unsigned char) (c)] : (c));
              goto normal_char;
            }
          break;
 default:
 normal_char:
          if (!pending_exact
              || pending_exact + *pending_exact + 1 != b
       || *pending_exact == (1 << 8) - 1
              || *p == '*' || *p == '^'
       || ((syntax & (((unsigned long int) 1) << 1))
    ? *p == '\\' && (p[1] == '+' || p[1] == '?')
    : (*p == '+' || *p == '?'))
       || ((syntax & (((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
                  && ((syntax & ((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
        ? *p == '{'
                      : (p[0] == '\\' && p[1] == '{'))))
     {
              laststart = b;
       do { while ((unsigned long) (b - bufp->buffer + (2)) > bufp->allocated) do { unsigned char *old_buffer = bufp->buffer; if (bufp->allocated == (1L << 16)) return REG_ESIZE; bufp->allocated <<= 1; if (bufp->allocated > (1L << 16)) bufp->allocated = (1L << 16); bufp->buffer = (unsigned char *) realloc ((bufp->buffer), (bufp->allocated)); if (bufp->buffer == ((void *)0)) return REG_ESPACE; if (old_buffer != bufp->buffer) { int incr = bufp->buffer - old_buffer; (b) += incr; (begalt) += incr; if (fixup_alt_jump) (fixup_alt_jump) += incr; if (laststart) (laststart) += incr; if (pending_exact) (pending_exact) += incr; } } while (0); *b++ = (unsigned char) (exactn); *b++ = (unsigned char) (0); } while (0);
       pending_exact = b - 1;
            }
   do { while ((unsigned long) (b - bufp->buffer + (1)) > bufp->allocated) do { unsigned char *old_buffer = bufp->buffer; if (bufp->allocated == (1L << 16)) return REG_ESIZE; bufp->allocated <<= 1; if (bufp->allocated > (1L << 16)) bufp->allocated = (1L << 16); bufp->buffer = (unsigned char *) realloc ((bufp->buffer), (bufp->allocated)); if (bufp->buffer == ((void *)0)) return REG_ESPACE; if (old_buffer != bufp->buffer) { int incr = bufp->buffer - old_buffer; (b) += incr; (begalt) += incr; if (fixup_alt_jump) (fixup_alt_jump) += incr; if (laststart) (laststart) += incr; if (pending_exact) (pending_exact) += incr; } } while (0); *b++ = (unsigned char) (c); } while (0);
          (*pending_exact)++;
   break;
        }
    }
  if (fixup_alt_jump)
    byte_store_op1 (jump_past_alt, fixup_alt_jump, (int) ((b) - (fixup_alt_jump) - (1 + 2)));
  if (!(compile_stack.avail == 0))
    return (free (compile_stack.stack), REG_EPAREN);
  if (syntax & ((((((((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
    do { while ((unsigned long) (b - bufp->buffer + (1)) > bufp->allocated) do { unsigned char *old_buffer = bufp->buffer; if (bufp->allocated == (1L << 16)) return REG_ESIZE; bufp->allocated <<= 1; if (bufp->allocated > (1L << 16)) bufp->allocated = (1L << 16); bufp->buffer = (unsigned char *) realloc ((bufp->buffer), (bufp->allocated)); if (bufp->buffer == ((void *)0)) return REG_ESPACE; if (old_buffer != bufp->buffer) { int incr = bufp->buffer - old_buffer; (b) += incr; (begalt) += incr; if (fixup_alt_jump) (fixup_alt_jump) += incr; if (laststart) (laststart) += incr; if (pending_exact) (pending_exact) += incr; } } while (0); *b++ = (unsigned char) (succeed); } while (0);
  free (compile_stack.stack);
  bufp->used = b - bufp->buffer;
  return REG_NOERROR;
}
static void
byte_store_op1 (op, loc, arg)
    re_opcode_t op;
    unsigned char *loc;
    int arg;
{
  *loc = (unsigned char) op;
  do { (loc + 1)[0] = (arg) & 0377; (loc + 1)[1] = (arg) >> 8; } while (0);
}
static void
byte_store_op2 (op, loc, arg1, arg2)
    re_opcode_t op;
    unsigned char *loc;
    int arg1, arg2;
{
  *loc = (unsigned char) op;
  do { (loc + 1)[0] = (arg1) & 0377; (loc + 1)[1] = (arg1) >> 8; } while (0);
  do { (loc + 1 + 2)[0] = (arg2) & 0377; (loc + 1 + 2)[1] = (arg2) >> 8; } while (0);
}
static void
byte_insert_op1 (op, loc, arg, end)
    re_opcode_t op;
    unsigned char *loc;
    int arg;
    unsigned char *end;
{
  register unsigned char *pfrom = end;
  register unsigned char *pto = end + 1 + 2;
  while (pfrom != loc)
    *--pto = *--pfrom;
  byte_store_op1 (op, loc, arg);
}
static void
byte_insert_op2 (op, loc, arg1, arg2, end)
    re_opcode_t op;
    unsigned char *loc;
    int arg1, arg2;
    unsigned char *end;
{
  register unsigned char *pfrom = end;
  register unsigned char *pto = end + 1 + 2 * 2;
  while (pfrom != loc)
    *--pto = *--pfrom;
  byte_store_op2 (op, loc, arg1, arg2);
}
static boolean
byte_at_begline_loc_p (pattern, p, syntax)
    const char *pattern, *p;
    reg_syntax_t syntax;
{
  const char *prev = p - 2;
  boolean prev_prev_backslash = prev > pattern && prev[-1] == '\\';
  return
       (*prev == '(' && (syntax & (((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || prev_prev_backslash))
    || (*prev == '|' && (syntax & (((((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || prev_prev_backslash));
}
static boolean
byte_at_endline_loc_p (p, pend, syntax)
    const char *p, *pend;
    reg_syntax_t syntax;
{
  const char *next = p;
  boolean next_backslash = *next == '\\';
  const char *next_next = p + 1 < pend ? p + 1 : 0;
  return
       (syntax & (((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? *next == ')'
        : next_backslash && next_next && *next_next == ')')
    || (syntax & (((((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? *next == '|'
        : next_backslash && next_next && *next_next == '|');
}
static reg_errcode_t
byte_compile_range (range_start_char, p_ptr, pend, translate, syntax, b)
     unsigned int range_start_char;
     const char **p_ptr, *pend;
     char * translate;
     reg_syntax_t syntax;
     unsigned char *b;
{
  unsigned this_char;
  const char *p = *p_ptr;
  reg_errcode_t ret;
  unsigned end_char;
  if (p == pend)
    return REG_ERANGE;
  (*p_ptr)++;
  ret = syntax & ((((((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? REG_ERANGE : REG_NOERROR;
  range_start_char = (translate ? (char) translate[(unsigned char) (range_start_char)] : (range_start_char));
  end_char = ((unsigned)(translate ? (char) translate[(unsigned char) (p[0])] : (p[0])) & ((1 << 8) - 1));
  for (this_char = range_start_char; this_char <= end_char; ++this_char)
    {
      (b[((unsigned char) ((translate ? (char) translate[(unsigned char) (this_char)] : (this_char)))) / 8] |= 1 << (((unsigned char) (translate ? (char) translate[(unsigned char) (this_char)] : (this_char))) % 8));
      ret = REG_NOERROR;
    }
  return ret;
}
static int
byte_re_compile_fastmap (bufp)
     struct re_pattern_buffer *bufp;
{
  int j, k;
  byte_fail_stack_type fail_stack;
  char *destination;
  register char *fastmap = bufp->fastmap;
  unsigned char *pattern = bufp->buffer;
  register unsigned char *pend = pattern + bufp->used;
  unsigned char *p = pattern;
  boolean path_can_be_null = 1;
  boolean succeed_n_p = 0;
  ;
  do { fail_stack.stack = (byte_fail_stack_elt_t *) alloca (5 * sizeof (byte_fail_stack_elt_t)); if (fail_stack.stack == ((void *)0)) return -2; fail_stack.size = 5; fail_stack.avail = 0; } while (0);
  (memset (fastmap, '\0', 1 << 8), (fastmap));
  bufp->fastmap_accurate = 1;
  bufp->can_be_null = 0;
  while (1)
    {
      if (p == pend || *p == (unsigned char) succeed)
 {
   if (!(fail_stack.avail == 0))
     {
       bufp->can_be_null |= path_can_be_null;
       path_can_be_null = 1;
       p = fail_stack.stack[--fail_stack.avail].pointer;
       continue;
     }
   else
     break;
 }
      ;
      switch (((re_opcode_t) *p++))
 {
 case duplicate:
   bufp->can_be_null = 1;
          goto done;
 case exactn:
          fastmap[p[1]] = 1;
   break;
        case charset:
          for (j = *p++ * 8 - 1; j >= 0; j--)
     if (p[j / 8] & (1 << (j % 8)))
              fastmap[j] = 1;
   break;
 case charset_not:
   for (j = *p * 8; j < (1 << 8); j++)
            fastmap[j] = 1;
   for (j = *p++ * 8 - 1; j >= 0; j--)
     if (!(p[j / 8] & (1 << (j % 8))))
              fastmap[j] = 1;
          break;
 case wordchar:
   for (j = 0; j < (1 << 8); j++)
     if (re_syntax_table[(unsigned char) (j)] == 1)
       fastmap[j] = 1;
   break;
 case notwordchar:
   for (j = 0; j < (1 << 8); j++)
     if (re_syntax_table[(unsigned char) (j)] != 1)
       fastmap[j] = 1;
   break;
        case anychar:
   {
     int fastmap_newline = fastmap['\n'];
     for (j = 0; j < (1 << 8); j++)
       fastmap[j] = 1;
     if (!(bufp->syntax & ((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1)))
       fastmap['\n'] = fastmap_newline;
     else if (bufp->can_be_null)
       goto done;
     break;
   }
        case no_op:
        case begline:
        case endline:
 case begbuf:
 case endbuf:
 case wordbound:
 case notwordbound:
 case wordbeg:
 case wordend:
        case push_dummy_failure:
          continue;
 case jump_n:
        case pop_failure_jump:
 case maybe_pop_jump:
 case jump:
        case jump_past_alt:
 case dummy_failure_jump:
          do { do { (j) = *(p) & 0377; (j) += ((signed char) (*((p) + 1))) << 8; } while (0); (p) += 2; } while (0);
   p += j;
   if (j > 0)
     continue;
          if ((re_opcode_t) *p != on_failure_jump
       && (re_opcode_t) *p != succeed_n)
     continue;
          p++;
          do { do { (j) = *(p) & 0377; (j) += ((signed char) (*((p) + 1))) << 8; } while (0); (p) += 2; } while (0);
          p += j;
          if (!(fail_stack.avail == 0)
       && fail_stack.stack[fail_stack.avail - 1].pointer == p)
            fail_stack.avail--;
          continue;
        case on_failure_jump:
        case on_failure_keep_string_jump:
 handle_on_failure_jump:
          do { do { (j) = *(p) & 0377; (j) += ((signed char) (*((p) + 1))) << 8; } while (0); (p) += 2; } while (0);
          if (p + j < pend)
            {
              if (!(((fail_stack.avail == fail_stack.size) && !((fail_stack).size > (unsigned) (xre_max_failures * (5 * 3 + 4)) ? 0 : ((fail_stack).stack = (byte_fail_stack_elt_t *) (destination = (char *) alloca (((fail_stack).size << 1) * sizeof (byte_fail_stack_elt_t)), memcpy (destination, (fail_stack).stack, (fail_stack).size * sizeof (byte_fail_stack_elt_t))), (fail_stack).stack == ((void *)0) ? 0 : ((fail_stack).size <<= 1, 1)))) ? 0 : ((fail_stack).stack[(fail_stack).avail++].pointer = p + j, 1)))
  {
    ;
    return -2;
  }
            }
          else
            bufp->can_be_null = 1;
          if (succeed_n_p)
            {
              do { do { (k) = *(p) & 0377; (k) += ((signed char) (*((p) + 1))) << 8; } while (0); (p) += 2; } while (0);
              succeed_n_p = 0;
     }
          continue;
 case succeed_n:
          p += 2;
          do { do { (k) = *(p) & 0377; (k) += ((signed char) (*((p) + 1))) << 8; } while (0); (p) += 2; } while (0);
          if (k == 0)
     {
              p -= 2 * 2;
         succeed_n_p = 1;
              goto handle_on_failure_jump;
            }
          continue;
 case set_number_at:
          p += 2 * 2;
          continue;
 case start_memory:
        case stop_memory:
   p += 2;
   continue;
 default:
          abort ();
        }
      path_can_be_null = 0;
      p = pend;
    }
  bufp->can_be_null |= path_can_be_null;
 done:
  ;
  return 0;
}
static int
byte_re_search_2 (bufp, string1, size1, string2, size2, startpos, range,
       regs, stop)
     struct re_pattern_buffer *bufp;
     const char *string1, *string2;
     int size1, size2;
     int startpos;
     int range;
     struct re_registers *regs;
     int stop;
{
  int val;
  register char *fastmap = bufp->fastmap;
  register char * translate = bufp->translate;
  int total_size = size1 + size2;
  int endpos = startpos + range;
  if (startpos < 0 || startpos > total_size)
    return -1;
  if (endpos < 0)
    range = 0 - startpos;
  else if (endpos > total_size)
    range = total_size - startpos;
  if (bufp->used > 0 && range > 0
      && ((re_opcode_t) bufp->buffer[0] == begbuf
   || ((re_opcode_t) bufp->buffer[0] == begline
       && !bufp->newline_anchor)))
    {
      if (startpos > 0)
 return -1;
      else
 range = 1;
    }
  if (fastmap && !bufp->fastmap_accurate)
    if (xre_compile_fastmap (bufp) == -2)
      return -2;
  for (;;)
    {
      if (fastmap && startpos < total_size && !bufp->can_be_null)
 {
   if (range > 0)
     {
       register const char *d;
       register int lim = 0;
       int irange = range;
              if (startpos < size1 && startpos + range >= size1)
                lim = range - (size1 - startpos);
       d = (startpos >= size1 ? string2 - size1 : string1) + startpos;
       if (translate)
                while (range > lim
                       && !fastmap[(unsigned char)
       translate[(unsigned char) *d++]])
                  range--;
       else
                while (range > lim && !fastmap[(unsigned char) *d++])
                  range--;
       startpos += irange - range;
     }
   else
     {
       register char c = (size1 == 0 || startpos >= size1
          ? string2[startpos - size1]
          : string1[startpos]);
       if (!fastmap[(unsigned char) (translate ? (char) translate[(unsigned char) (c)] : (c))])
  goto advance;
     }
 }
      if (range >= 0 && startpos == total_size && fastmap
          && !bufp->can_be_null)
       {
         return -1;
       }
      val = byte_re_match_2_internal (bufp, string1, size1, string2,
          size2, startpos, regs, stop);
      if (val >= 0)
 {
   return startpos;
 }
      if (val == -2)
 {
   return -2;
 }
    advance:
      if (!range)
        break;
      else if (range > 0)
        {
          range--;
          startpos++;
        }
      else
        {
          range++;
          startpos--;
        }
    }
  return -1;
}
static boolean byte_group_match_null_string_p (unsigned char **p, unsigned char *end, byte_register_info_type *reg_info)
                                           ;
static boolean byte_alt_match_null_string_p (unsigned char *p, unsigned char *end, byte_register_info_type *reg_info)
                                           ;
static boolean byte_common_op_match_null_string_p (unsigned char **p, unsigned char *end, byte_register_info_type *reg_info)
                                           ;
static int byte_bcmp_translate (const char *s1, const char *s2, int len, char *translate)
                                   ;
static int
byte_re_match_2_internal (bufp, string1, size1,string2, size2, pos,
     regs, stop)
     struct re_pattern_buffer *bufp;
     const char *string1, *string2;
     int size1, size2;
     int pos;
     struct re_registers *regs;
     int stop;
{
  int mcnt;
  unsigned char *p1;
  const char *end1, *end2;
  const char *end_match_1, *end_match_2;
  const char *d, *dend;
  unsigned char *p = bufp->buffer;
  register unsigned char *pend = p + bufp->used;
  unsigned char *just_past_start_mem = 0;
  char * translate = bufp->translate;
  byte_fail_stack_type fail_stack;
  size_t num_regs = bufp->re_nsub + 1;
  active_reg_t lowest_active_reg = ((1 << 8) + 1);
  active_reg_t highest_active_reg = (1 << 8);
  const char **regstart, **regend;
  const char **old_regstart, **old_regend;
  byte_register_info_type *reg_info;
  unsigned best_regs_set = 0;
  const char **best_regstart, **best_regend;
  const char *match_end = ((void *)0);
  int set_regs_matched_done = 0;
  const char **reg_dummy;
  byte_register_info_type *reg_info_dummy;
  ;
  do { fail_stack.stack = (byte_fail_stack_elt_t *) alloca (5 * sizeof (byte_fail_stack_elt_t)); if (fail_stack.stack == ((void *)0)) return -2; fail_stack.size = 5; fail_stack.avail = 0; } while (0);
  if (bufp->re_nsub)
    {
      regstart = ((const char * *) alloca ((num_regs) * sizeof (const char *)));
      regend = ((const char * *) alloca ((num_regs) * sizeof (const char *)));
      old_regstart = ((const char * *) alloca ((num_regs) * sizeof (const char *)));
      old_regend = ((const char * *) alloca ((num_regs) * sizeof (const char *)));
      best_regstart = ((const char * *) alloca ((num_regs) * sizeof (const char *)));
      best_regend = ((const char * *) alloca ((num_regs) * sizeof (const char *)));
      reg_info = ((byte_register_info_type *) alloca ((num_regs) * sizeof (byte_register_info_type)));
      reg_dummy = ((const char * *) alloca ((num_regs) * sizeof (const char *)));
      reg_info_dummy = ((byte_register_info_type *) alloca ((num_regs) * sizeof (byte_register_info_type)));
      if (!(regstart && regend && old_regstart && old_regend && reg_info
            && best_regstart && best_regend && reg_dummy && reg_info_dummy))
        {
          do { ; if (regstart) ((void)0); regstart = ((void *)0); if (regend) ((void)0); regend = ((void *)0); if (old_regstart) ((void)0); old_regstart = ((void *)0); if (old_regend) ((void)0); old_regend = ((void *)0); if (best_regstart) ((void)0); best_regstart = ((void *)0); if (best_regend) ((void)0); best_regend = ((void *)0); if (reg_info) ((void)0); reg_info = ((void *)0); if (reg_dummy) ((void)0); reg_dummy = ((void *)0); if (reg_info_dummy) ((void)0); reg_info_dummy = ((void *)0); } while (0);
          return -2;
        }
    }
  else
    {
      regstart = regend = old_regstart = old_regend = best_regstart
        = best_regend = reg_dummy = ((void *)0);
      reg_info = reg_info_dummy = (byte_register_info_type *) ((void *)0);
    }
  if (pos < 0 || pos > size1 + size2)
    {
      do { ; if (regstart) ((void)0); regstart = ((void *)0); if (regend) ((void)0); regend = ((void *)0); if (old_regstart) ((void)0); old_regstart = ((void *)0); if (old_regend) ((void)0); old_regend = ((void *)0); if (best_regstart) ((void)0); best_regstart = ((void *)0); if (best_regend) ((void)0); best_regend = ((void *)0); if (reg_info) ((void)0); reg_info = ((void *)0); if (reg_dummy) ((void)0); reg_dummy = ((void *)0); if (reg_info_dummy) ((void)0); reg_info_dummy = ((void *)0); } while (0);
      return -1;
    }
  for (mcnt = 1; (unsigned) mcnt < num_regs; mcnt++)
    {
      regstart[mcnt] = regend[mcnt]
        = old_regstart[mcnt] = old_regend[mcnt] = (&byte_reg_unset_dummy);
      ((reg_info[mcnt]).bits.match_null_string_p) = 3;
      ((reg_info[mcnt]).bits.is_active) = 0;
      ((reg_info[mcnt]).bits.matched_something) = 0;
      ((reg_info[mcnt]).bits.ever_matched_something) = 0;
    }
  if (size2 == 0 && string1 != ((void *)0))
    {
      string2 = string1;
      size2 = size1;
      string1 = 0;
      size1 = 0;
    }
  end1 = string1 + size1;
  end2 = string2 + size2;
  if (stop <= size1)
    {
      end_match_1 = string1 + stop;
      end_match_2 = string2;
    }
  else
    {
      end_match_1 = end1;
      end_match_2 = string2 + stop - size1;
    }
  if (size1 > 0 && pos <= size1)
    {
      d = string1 + pos;
      dend = end_match_1;
    }
  else
    {
      d = string2 + pos - size1;
      dend = end_match_2;
    }
  ;
  ;
  ;
  ;
  ;
  for (;;)
    {
      ;
      if (p == pend)
 {
          ;
          if (d != end_match_2)
     {
       boolean same_str_p = ((size1 && string1 <= (match_end) && (match_end) <= string1 + size1)
        == (dend == end_match_1));
       boolean best_match_p;
       if (same_str_p)
  best_match_p = d > match_end;
       else
  best_match_p = !(dend == end_match_1);
              ;
              if (!(fail_stack.avail == 0))
                {
                  if (!best_regs_set || best_match_p)
                    {
                      best_regs_set = 1;
                      match_end = d;
                      ;
                      for (mcnt = 1; (unsigned) mcnt < num_regs; mcnt++)
                        {
                          best_regstart[mcnt] = regstart[mcnt];
                          best_regend[mcnt] = regend[mcnt];
                        }
                    }
                  goto fail;
                }
              else if (best_regs_set && !best_match_p)
                {
           restore_best_regs:
                  ;
                  d = match_end;
                  dend = ((d >= string1 && d <= end1)
             ? end_match_1 : end_match_2);
    for (mcnt = 1; (unsigned) mcnt < num_regs; mcnt++)
      {
        regstart[mcnt] = best_regstart[mcnt];
        regend[mcnt] = best_regend[mcnt];
      }
                }
            }
 succeed_label:
          ;
          if (regs && !bufp->no_sub)
     {
              if (bufp->regs_allocated == 0)
                {
                  regs->num_regs = ((30) > (num_regs + 1) ? (30) : (num_regs + 1));
                  regs->start = ((regoff_t *) malloc ((regs->num_regs) * sizeof (regoff_t)));
                  regs->end = ((regoff_t *) malloc ((regs->num_regs) * sizeof (regoff_t)));
                  if (regs->start == ((void *)0) || regs->end == ((void *)0))
      {
        do { ; if (regstart) ((void)0); regstart = ((void *)0); if (regend) ((void)0); regend = ((void *)0); if (old_regstart) ((void)0); old_regstart = ((void *)0); if (old_regend) ((void)0); old_regend = ((void *)0); if (best_regstart) ((void)0); best_regstart = ((void *)0); if (best_regend) ((void)0); best_regend = ((void *)0); if (reg_info) ((void)0); reg_info = ((void *)0); if (reg_dummy) ((void)0); reg_dummy = ((void *)0); if (reg_info_dummy) ((void)0); reg_info_dummy = ((void *)0); } while (0);
        return -2;
      }
                  bufp->regs_allocated = 1;
                }
              else if (bufp->regs_allocated == 1)
                {
                  if (regs->num_regs < num_regs + 1)
                    {
                      regs->num_regs = num_regs + 1;
                      ((regs->start) = (regoff_t *) realloc (regs->start, (regs->num_regs) * sizeof (regoff_t)));
                      ((regs->end) = (regoff_t *) realloc (regs->end, (regs->num_regs) * sizeof (regoff_t)));
                      if (regs->start == ((void *)0) || regs->end == ((void *)0))
   {
     do { ; if (regstart) ((void)0); regstart = ((void *)0); if (regend) ((void)0); regend = ((void *)0); if (old_regstart) ((void)0); old_regstart = ((void *)0); if (old_regend) ((void)0); old_regend = ((void *)0); if (best_regstart) ((void)0); best_regstart = ((void *)0); if (best_regend) ((void)0); best_regend = ((void *)0); if (reg_info) ((void)0); reg_info = ((void *)0); if (reg_dummy) ((void)0); reg_dummy = ((void *)0); if (reg_info_dummy) ((void)0); reg_info_dummy = ((void *)0); } while (0);
     return -2;
   }
                    }
                }
              else
  {
    ;
  }
              if (regs->num_regs > 0)
                {
                  regs->start[0] = pos;
                  regs->end[0] = ((dend == end_match_1)
      ? ((regoff_t) (d - string1))
             : ((regoff_t) (d - string2 + size1)));
                }
       for (mcnt = 1; (unsigned) mcnt < ((num_regs) < (regs->num_regs) ? (num_regs) : (regs->num_regs));
     mcnt++)
  {
                  if (((regstart[mcnt]) == (&byte_reg_unset_dummy)) || ((regend[mcnt]) == (&byte_reg_unset_dummy)))
                    regs->start[mcnt] = regs->end[mcnt] = -1;
                  else
                    {
        regs->start[mcnt]
   = (regoff_t) ((size1 && string1 <= (regstart[mcnt]) && (regstart[mcnt]) <= string1 + size1) ? ((regoff_t) ((regstart[mcnt]) - string1)) : ((regoff_t) ((regstart[mcnt]) - string2 + size1)));
                      regs->end[mcnt]
   = (regoff_t) ((size1 && string1 <= (regend[mcnt]) && (regend[mcnt]) <= string1 + size1) ? ((regoff_t) ((regend[mcnt]) - string1)) : ((regoff_t) ((regend[mcnt]) - string2 + size1)));
                    }
  }
              for (mcnt = num_regs; (unsigned) mcnt < regs->num_regs; mcnt++)
                regs->start[mcnt] = regs->end[mcnt] = -1;
     }
         
                                                                        ;
          ;
          mcnt = d - pos - ((dend == end_match_1)
       ? string1
       : string2 - size1);
          ;
          do { ; if (regstart) ((void)0); regstart = ((void *)0); if (regend) ((void)0); regend = ((void *)0); if (old_regstart) ((void)0); old_regstart = ((void *)0); if (old_regend) ((void)0); old_regend = ((void *)0); if (best_regstart) ((void)0); best_regstart = ((void *)0); if (best_regend) ((void)0); best_regend = ((void *)0); if (reg_info) ((void)0); reg_info = ((void *)0); if (reg_dummy) ((void)0); reg_dummy = ((void *)0); if (reg_info_dummy) ((void)0); reg_info_dummy = ((void *)0); } while (0);
          return mcnt;
        }
      switch (((re_opcode_t) *p++))
 {
        case no_op:
          ;
          break;
 case succeed:
          ;
   goto succeed_label;
 case exactn:
   mcnt = *p++;
          ;
          if (translate)
     {
       do
  {
    while (d == dend) { if (dend == end_match_2) goto fail; d = string2; dend = end_match_2; };
    if ((unsigned char) translate[(unsigned char) *d++]
        != (unsigned char) *p++)
                    goto fail;
  }
       while (--mcnt);
     }
   else
     {
       do
  {
    while (d == dend) { if (dend == end_match_2) goto fail; d = string2; dend = end_match_2; };
    if (*d++ != (char) *p++) goto fail;
  }
       while (--mcnt);
     }
   do { if (!set_regs_matched_done) { active_reg_t r; set_regs_matched_done = 1; for (r = lowest_active_reg; r <= highest_active_reg; r++) { ((reg_info[r]).bits.matched_something) = ((reg_info[r]).bits.ever_matched_something) = 1; } } } while (0);
          break;
 case anychar:
          ;
          while (d == dend) { if (dend == end_match_2) goto fail; d = string2; dend = end_match_2; };
          if ((!(bufp->syntax & ((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1)) && (translate ? (char) translate[(unsigned char) (*d)] : (*d)) == '\n')
              || (bufp->syntax & (((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) && (translate ? (char) translate[(unsigned char) (*d)] : (*d)) == '\000'))
     goto fail;
          do { if (!set_regs_matched_done) { active_reg_t r; set_regs_matched_done = 1; for (r = lowest_active_reg; r <= highest_active_reg; r++) { ((reg_info[r]).bits.matched_something) = ((reg_info[r]).bits.ever_matched_something) = 1; } } } while (0);
          ;
          d++;
   break;
 case charset:
 case charset_not:
   {
     register unsigned char c;
     boolean not = (re_opcode_t) *(p - 1) == charset_not;
            ;
     while (d == dend) { if (dend == end_match_2) goto fail; d = string2; dend = end_match_2; };
     c = (translate ? (char) translate[(unsigned char) (*d)] : (*d));
     if (c < (unsigned) (*p * 8)
  && p[1 + c / 8] & (1 << (c % 8)))
       not = !not;
     p += 1 + *p;
     if (!not) goto fail;
     do { if (!set_regs_matched_done) { active_reg_t r; set_regs_matched_done = 1; for (r = lowest_active_reg; r <= highest_active_reg; r++) { ((reg_info[r]).bits.matched_something) = ((reg_info[r]).bits.ever_matched_something) = 1; } } } while (0);
            d++;
     break;
   }
        case start_memory:
  
                                  ;
   p1 = p;
          if (((reg_info[*p]).bits.match_null_string_p) == 3)
            ((reg_info[*p]).bits.match_null_string_p)
              = byte_group_match_null_string_p (&p1, pend, reg_info);
          old_regstart[*p] = ((reg_info[*p]).bits.match_null_string_p)
                             ? ((regstart[*p]) == (&byte_reg_unset_dummy))
                             : regstart[*p];
  
                                         ;
          regstart[*p] = d;
   ;
          ((reg_info[*p]).bits.is_active) = 1;
          ((reg_info[*p]).bits.matched_something) = 0;
   set_regs_matched_done = 0;
          highest_active_reg = *p;
          if (lowest_active_reg == ((1 << 8) + 1))
            lowest_active_reg = *p;
          p += 2;
   just_past_start_mem = p;
          break;
 case stop_memory:
  
                                  ;
          old_regend[*p] = ((reg_info[*p]).bits.match_null_string_p)
                           ? ((regend[*p]) == (&byte_reg_unset_dummy)) : regend[*p];
  
                                       ;
          regend[*p] = d;
   ;
          ((reg_info[*p]).bits.is_active) = 0;
   set_regs_matched_done = 0;
          if (lowest_active_reg == highest_active_reg)
            {
              lowest_active_reg = ((1 << 8) + 1);
              highest_active_reg = (1 << 8);
            }
          else
            {
              unsigned char r = *p - 1;
              while (r > 0 && !((reg_info[r]).bits.is_active))
                r--;
       if (r == 0)
                {
                  lowest_active_reg = ((1 << 8) + 1);
                  highest_active_reg = (1 << 8);
                }
              else
                highest_active_reg = r;
            }
          if ((!((reg_info[*p]).bits.matched_something)
               || just_past_start_mem == p - 1)
       && (p + 2) < pend)
            {
              boolean is_a_jump_n = 0;
              p1 = p + 2;
              mcnt = 0;
              switch ((re_opcode_t) *p1++)
                {
                  case jump_n:
      is_a_jump_n = 1;
                  case pop_failure_jump:
    case maybe_pop_jump:
    case jump:
    case dummy_failure_jump:
                    do { do { (mcnt) = *(p1) & 0377; (mcnt) += ((signed char) (*((p1) + 1))) << 8; } while (0); (p1) += 2; } while (0);
      if (is_a_jump_n)
        p1 += 2;
                    break;
                  default:
                                     ;
                }
       p1 += mcnt;
              if (mcnt < 0 && (re_opcode_t) *p1 == on_failure_jump
                  && (re_opcode_t) p1[1+2] == start_memory
    && p1[2+2] == *p)
  {
                  if (((reg_info[*p]).bits.ever_matched_something))
      {
        unsigned r;
                      ((reg_info[*p]).bits.ever_matched_something) = 0;
                      for (r = *p; r < (unsigned) *p + (unsigned) *(p + 1);
      r++)
                        {
                          regstart[r] = old_regstart[r];
                          if (old_regend[r] >= regstart[r])
                            regend[r] = old_regend[r];
                        }
                    }
    p1++;
                  do { do { (mcnt) = *(p1) & 0377; (mcnt) += ((signed char) (*((p1) + 1))) << 8; } while (0); (p1) += 2; } while (0);
                  do { char *destination; active_reg_t this_reg; ; ; ; ; ; ; ; while (((fail_stack).size - (fail_stack).avail) < (((0 ? 0 : highest_active_reg - lowest_active_reg + 1) * 3) + 4)) { if (!((fail_stack).size > (unsigned) (xre_max_failures * (5 * 3 + 4)) ? 0 : ((fail_stack).stack = (byte_fail_stack_elt_t *) (destination = (char *) alloca (((fail_stack).size << 1) * sizeof (byte_fail_stack_elt_t)), memcpy (destination, (fail_stack).stack, (fail_stack).size * sizeof (byte_fail_stack_elt_t))), (fail_stack).stack == ((void *)0) ? 0 : ((fail_stack).size <<= 1, 1)))) return -2; ; ; } ; if (1) for (this_reg = lowest_active_reg; this_reg <= highest_active_reg; this_reg++) { ; ; ; fail_stack.stack[fail_stack.avail++].pointer = (unsigned char *) (regstart[this_reg]); ; fail_stack.stack[fail_stack.avail++].pointer = (unsigned char *) (regend[this_reg]); ; ; ; ; ; ; fail_stack.stack[fail_stack.avail++] = (reg_info[this_reg].word); } ; fail_stack.stack[fail_stack.avail++].integer = (lowest_active_reg); ; fail_stack.stack[fail_stack.avail++].integer = (highest_active_reg); ; ; fail_stack.stack[fail_stack.avail++].pointer = (unsigned char *) (p1 + mcnt); ; ; ; fail_stack.stack[fail_stack.avail++].pointer = (unsigned char *) (d); ; ; } while (0);
                  goto fail;
                }
            }
          p += 2;
          break;
        case duplicate:
   {
     register const char *d2, *dend2;
     int regno = *p++;
     ;
            if (((regstart[regno]) == (&byte_reg_unset_dummy)) || ((regend[regno]) == (&byte_reg_unset_dummy)))
              goto fail;
            d2 = regstart[regno];
            dend2 = (((size1 && string1 <= (regstart[regno]) && (regstart[regno]) <= string1 + size1)
        == (size1 && string1 <= (regend[regno]) && (regend[regno]) <= string1 + size1))
       ? regend[regno] : end_match_1);
     for (;;)
       {
  while (d2 == dend2)
    {
      if (dend2 == end_match_2) break;
      if (dend2 == regend[regno]) break;
                    d2 = string2;
                    dend2 = regend[regno];
    }
  if (d2 == dend2) break;
  while (d == dend) { if (dend == end_match_2) goto fail; d = string2; dend = end_match_2; };
  mcnt = dend - d;
                if (mcnt > dend2 - d2)
    mcnt = dend2 - d2;
  if (translate
                    ? byte_bcmp_translate (d, d2, mcnt, translate)
                    : memcmp (d, d2, mcnt*sizeof(unsigned char)))
    goto fail;
  d += mcnt, d2 += mcnt;
  do { if (!set_regs_matched_done) { active_reg_t r; set_regs_matched_done = 1; for (r = lowest_active_reg; r <= highest_active_reg; r++) { ((reg_info[r]).bits.matched_something) = ((reg_info[r]).bits.ever_matched_something) = 1; } } } while (0);
       }
   }
   break;
 case begline:
          ;
          if (((d) == (size1 ? string1 : string2) || !size2))
            {
              if (!bufp->not_bol) break;
            }
          else if (d[-1] == '\n' && bufp->newline_anchor)
            {
              break;
            }
          goto fail;
 case endline:
          ;
          if (((d) == end2))
            {
              if (!bufp->not_eol) break;
            }
          else if ((d == end1 ? *string2 : *d) == '\n'
                   && bufp->newline_anchor)
            {
              break;
            }
          goto fail;
        case begbuf:
          ;
          if (((d) == (size1 ? string1 : string2) || !size2))
            break;
          goto fail;
        case endbuf:
          ;
   if (((d) == end2))
     break;
          goto fail;
        case on_failure_keep_string_jump:
          ;
          do { do { (mcnt) = *(p) & 0377; (mcnt) += ((signed char) (*((p) + 1))) << 8; } while (0); (p) += 2; } while (0);
          ;
          do { char *destination; active_reg_t this_reg; ; ; ; ; ; ; ; while (((fail_stack).size - (fail_stack).avail) < (((0 ? 0 : highest_active_reg - lowest_active_reg + 1) * 3) + 4)) { if (!((fail_stack).size > (unsigned) (xre_max_failures * (5 * 3 + 4)) ? 0 : ((fail_stack).stack = (byte_fail_stack_elt_t *) (destination = (char *) alloca (((fail_stack).size << 1) * sizeof (byte_fail_stack_elt_t)), memcpy (destination, (fail_stack).stack, (fail_stack).size * sizeof (byte_fail_stack_elt_t))), (fail_stack).stack == ((void *)0) ? 0 : ((fail_stack).size <<= 1, 1)))) return -2; ; ; } ; if (1) for (this_reg = lowest_active_reg; this_reg <= highest_active_reg; this_reg++) { ; ; ; fail_stack.stack[fail_stack.avail++].pointer = (unsigned char *) (regstart[this_reg]); ; fail_stack.stack[fail_stack.avail++].pointer = (unsigned char *) (regend[this_reg]); ; ; ; ; ; ; fail_stack.stack[fail_stack.avail++] = (reg_info[this_reg].word); } ; fail_stack.stack[fail_stack.avail++].integer = (lowest_active_reg); ; fail_stack.stack[fail_stack.avail++].integer = (highest_active_reg); ; ; fail_stack.stack[fail_stack.avail++].pointer = (unsigned char *) (p + mcnt); ; ; ; fail_stack.stack[fail_stack.avail++].pointer = (unsigned char *) (((void *)0)); ; ; } while (0);
          break;
 case on_failure_jump:
        on_failure:
          ;
          do { do { (mcnt) = *(p) & 0377; (mcnt) += ((signed char) (*((p) + 1))) << 8; } while (0); (p) += 2; } while (0);
          ;
          p1 = p;
          while (p1 < pend && (re_opcode_t) *p1 == no_op)
            p1++;
          if (p1 < pend && (re_opcode_t) *p1 == start_memory)
            {
              highest_active_reg = *(p1 + 1) + *(p1 + 2);
              if (lowest_active_reg == ((1 << 8) + 1))
                lowest_active_reg = *(p1 + 1);
            }
          ;
          do { char *destination; active_reg_t this_reg; ; ; ; ; ; ; ; while (((fail_stack).size - (fail_stack).avail) < (((0 ? 0 : highest_active_reg - lowest_active_reg + 1) * 3) + 4)) { if (!((fail_stack).size > (unsigned) (xre_max_failures * (5 * 3 + 4)) ? 0 : ((fail_stack).stack = (byte_fail_stack_elt_t *) (destination = (char *) alloca (((fail_stack).size << 1) * sizeof (byte_fail_stack_elt_t)), memcpy (destination, (fail_stack).stack, (fail_stack).size * sizeof (byte_fail_stack_elt_t))), (fail_stack).stack == ((void *)0) ? 0 : ((fail_stack).size <<= 1, 1)))) return -2; ; ; } ; if (1) for (this_reg = lowest_active_reg; this_reg <= highest_active_reg; this_reg++) { ; ; ; fail_stack.stack[fail_stack.avail++].pointer = (unsigned char *) (regstart[this_reg]); ; fail_stack.stack[fail_stack.avail++].pointer = (unsigned char *) (regend[this_reg]); ; ; ; ; ; ; fail_stack.stack[fail_stack.avail++] = (reg_info[this_reg].word); } ; fail_stack.stack[fail_stack.avail++].integer = (lowest_active_reg); ; fail_stack.stack[fail_stack.avail++].integer = (highest_active_reg); ; ; fail_stack.stack[fail_stack.avail++].pointer = (unsigned char *) (p + mcnt); ; ; ; fail_stack.stack[fail_stack.avail++].pointer = (unsigned char *) (d); ; ; } while (0);
          break;
        case maybe_pop_jump:
          do { do { (mcnt) = *(p) & 0377; (mcnt) += ((signed char) (*((p) + 1))) << 8; } while (0); (p) += 2; } while (0);
          ;
          {
     register unsigned char *p2 = p;
     while (1)
       {
  if (p2 + 2 < pend
      && ((re_opcode_t) *p2 == stop_memory
   || (re_opcode_t) *p2 == start_memory))
    p2 += 3;
  else if (p2 + 2 + 2 * 2 < pend
    && (re_opcode_t) *p2 == dummy_failure_jump)
    p2 += 2 + 2 * 2;
  else
    break;
       }
     p1 = p + mcnt;
            if (p2 == pend)
       {
           p[-(1+2)] = (unsigned char)
    pop_failure_jump;
               
                                                                       ;
              }
            else if ((re_opcode_t) *p2 == exactn
       || (bufp->newline_anchor && (re_opcode_t) *p2 == endline))
       {
  register unsigned char c
                  = *p2 == (unsigned char) endline ? '\n' : p2[2];
                if (((re_opcode_t) p1[1+2] == exactn
      ) && p1[3+2] != c)
                  {
        p[-(1+2)] = (unsigned char)
        pop_failure_jump;
       
                                         ;
                  }
  else if ((re_opcode_t) p1[3] == charset
    || (re_opcode_t) p1[3] == charset_not)
    {
      int not = (re_opcode_t) p1[3] == charset_not;
      if (c < (unsigned) (p1[4] * 8)
   && p1[5 + c / 8] & (1 << (c % 8)))
        not = !not;
      if (!not)
                      {
            p[-3] = (unsigned char) pop_failure_jump;
                        ;
                      }
    }
       }
            else if ((re_opcode_t) *p2 == charset)
       {
                if ((re_opcode_t) p1[3] == exactn
       && ! ((int) p2[1] * 8 > (int) p1[5]
      && (p2[2 + p1[5] / 8]
          & (1 << (p1[5] % 8)))))
    {
      p[-3] = (unsigned char) pop_failure_jump;
      ;
                  }
  else if ((re_opcode_t) p1[3] == charset_not)
    {
      int idx;
      for (idx = 0; idx < (int) p2[1]; idx++)
        if (! (p2[2 + idx] == 0
        || (idx < (int) p1[4]
     && ((p2[2 + idx] & ~ p1[5 + idx]) == 0))))
   break;
      if (idx == p2[1])
                      {
            p[-3] = (unsigned char) pop_failure_jump;
                        ;
                      }
    }
  else if ((re_opcode_t) p1[3] == charset)
    {
      int idx;
      for (idx = 0;
    idx < (int) p2[1] && idx < (int) p1[4];
    idx++)
        if ((p2[2 + idx] & p1[5 + idx]) != 0)
   break;
      if (idx == p2[1] || idx == p1[4])
                      {
            p[-3] = (unsigned char) pop_failure_jump;
                        ;
                      }
    }
       }
   }
   p -= 2;
   if ((re_opcode_t) p[-1] != pop_failure_jump)
     {
       p[-1] = (unsigned char) jump;
              ;
       goto unconditional_jump;
     }
        case pop_failure_jump:
          {
            active_reg_t dummy_low_reg, dummy_high_reg;
            unsigned char *pdummy = ((void *)0);
            const char *sdummy = ((void *)0);
            ;
            { active_reg_t this_reg; const unsigned char *string_temp; ; ; ; ; ; ; ; string_temp = fail_stack.stack[--fail_stack.avail].pointer; if (string_temp != ((void *)0)) sdummy = (const char *) string_temp; ; ; ; pdummy = (unsigned char *) fail_stack.stack[--fail_stack.avail].pointer; ; ; dummy_high_reg = (active_reg_t) fail_stack.stack[--fail_stack.avail].integer; ; dummy_low_reg = (active_reg_t) fail_stack.stack[--fail_stack.avail].integer; ; if (1) for (this_reg = dummy_high_reg; this_reg >= dummy_low_reg; this_reg--) { ; reg_info_dummy[this_reg].word = fail_stack.stack[--fail_stack.avail]; ; reg_dummy[this_reg] = (const char *) fail_stack.stack[--fail_stack.avail].pointer; ; reg_dummy[this_reg] = (const char *) fail_stack.stack[--fail_stack.avail].pointer; ; } else { for (this_reg = highest_active_reg; this_reg > dummy_high_reg; this_reg--) { reg_info_dummy[this_reg].word.integer = 0; reg_dummy[this_reg] = 0; reg_dummy[this_reg] = 0; } highest_active_reg = dummy_high_reg; } set_regs_matched_done = 0; ; }
                                                                    ;
          }
 unconditional_jump:
   ;
        case jump:
   do { do { (mcnt) = *(p) & 0377; (mcnt) += ((signed char) (*((p) + 1))) << 8; } while (0); (p) += 2; } while (0);
          ;
   p += mcnt;
          ;
   break;
        case jump_past_alt:
          ;
          goto unconditional_jump;
        case dummy_failure_jump:
          ;
          do { char *destination; active_reg_t this_reg; ; ; ; ; ; ; ; while (((fail_stack).size - (fail_stack).avail) < (((0 ? 0 : highest_active_reg - lowest_active_reg + 1) * 3) + 4)) { if (!((fail_stack).size > (unsigned) (xre_max_failures * (5 * 3 + 4)) ? 0 : ((fail_stack).stack = (byte_fail_stack_elt_t *) (destination = (char *) alloca (((fail_stack).size << 1) * sizeof (byte_fail_stack_elt_t)), memcpy (destination, (fail_stack).stack, (fail_stack).size * sizeof (byte_fail_stack_elt_t))), (fail_stack).stack == ((void *)0) ? 0 : ((fail_stack).size <<= 1, 1)))) return -2; ; ; } ; if (1) for (this_reg = lowest_active_reg; this_reg <= highest_active_reg; this_reg++) { ; ; ; fail_stack.stack[fail_stack.avail++].pointer = (unsigned char *) (regstart[this_reg]); ; fail_stack.stack[fail_stack.avail++].pointer = (unsigned char *) (regend[this_reg]); ; ; ; ; ; ; fail_stack.stack[fail_stack.avail++] = (reg_info[this_reg].word); } ; fail_stack.stack[fail_stack.avail++].integer = (lowest_active_reg); ; fail_stack.stack[fail_stack.avail++].integer = (highest_active_reg); ; ; fail_stack.stack[fail_stack.avail++].pointer = (unsigned char *) (((void *)0)); ; ; ; fail_stack.stack[fail_stack.avail++].pointer = (unsigned char *) (((void *)0)); ; ; } while (0);
          goto unconditional_jump;
        case push_dummy_failure:
          ;
          do { char *destination; active_reg_t this_reg; ; ; ; ; ; ; ; while (((fail_stack).size - (fail_stack).avail) < (((0 ? 0 : highest_active_reg - lowest_active_reg + 1) * 3) + 4)) { if (!((fail_stack).size > (unsigned) (xre_max_failures * (5 * 3 + 4)) ? 0 : ((fail_stack).stack = (byte_fail_stack_elt_t *) (destination = (char *) alloca (((fail_stack).size << 1) * sizeof (byte_fail_stack_elt_t)), memcpy (destination, (fail_stack).stack, (fail_stack).size * sizeof (byte_fail_stack_elt_t))), (fail_stack).stack == ((void *)0) ? 0 : ((fail_stack).size <<= 1, 1)))) return -2; ; ; } ; if (1) for (this_reg = lowest_active_reg; this_reg <= highest_active_reg; this_reg++) { ; ; ; fail_stack.stack[fail_stack.avail++].pointer = (unsigned char *) (regstart[this_reg]); ; fail_stack.stack[fail_stack.avail++].pointer = (unsigned char *) (regend[this_reg]); ; ; ; ; ; ; fail_stack.stack[fail_stack.avail++] = (reg_info[this_reg].word); } ; fail_stack.stack[fail_stack.avail++].integer = (lowest_active_reg); ; fail_stack.stack[fail_stack.avail++].integer = (highest_active_reg); ; ; fail_stack.stack[fail_stack.avail++].pointer = (unsigned char *) (((void *)0)); ; ; ; fail_stack.stack[fail_stack.avail++].pointer = (unsigned char *) (((void *)0)); ; ; } while (0);
          break;
        case succeed_n:
          do { (mcnt) = *(p + 2) & 0377; (mcnt) += ((signed char) (*((p + 2) + 1))) << 8; } while (0);
          ;
          ;
          if (mcnt > 0)
            {
               mcnt--;
        p += 2;
               do { do { (p)[0] = (mcnt) & 0377; (p)[1] = (mcnt) >> 8; } while (0); (p) += 2; } while (0);
              
               ;
            }
   else if (mcnt == 0)
            {
             
                               ;
       p[2] = (unsigned char) no_op;
              p[3] = (unsigned char) no_op;
              goto on_failure;
            }
          break;
        case jump_n:
          do { (mcnt) = *(p + 2) & 0377; (mcnt) += ((signed char) (*((p + 2) + 1))) << 8; } while (0);
          ;
          if (mcnt)
            {
               mcnt--;
               do { (p + 2)[0] = (mcnt) & 0377; (p + 2)[1] = (mcnt) >> 8; } while (0);
              
             ;
        goto unconditional_jump;
            }
   else
     p += 2 * 2;
          break;
 case set_number_at:
   {
            ;
            do { do { (mcnt) = *(p) & 0377; (mcnt) += ((signed char) (*((p) + 1))) << 8; } while (0); (p) += 2; } while (0);
            p1 = p + mcnt;
            do { do { (mcnt) = *(p) & 0377; (mcnt) += ((signed char) (*((p) + 1))) << 8; } while (0); (p) += 2; } while (0);
            ;
     do { (p1)[0] = (mcnt) & 0377; (p1)[1] = (mcnt) >> 8; } while (0);
            break;
          }
 case wordbound:
 {
   boolean prevchar, thischar;
   ;
   if (((d) == (size1 ? string1 : string2) || !size2) || ((d) == end2))
     break;
   prevchar = (re_syntax_table[(unsigned char) ((d - 1) == end1 ? *string2 : (d - 1) == string2 - 1 ? *(end1 - 1) : *(d - 1))] == 1);
   thischar = (re_syntax_table[(unsigned char) ((d) == end1 ? *string2 : (d) == string2 - 1 ? *(end1 - 1) : *(d))] == 1);
   if (prevchar != thischar)
     break;
   goto fail;
 }
      case notwordbound:
 {
   boolean prevchar, thischar;
   ;
   if (((d) == (size1 ? string1 : string2) || !size2) || ((d) == end2))
     goto fail;
   prevchar = (re_syntax_table[(unsigned char) ((d - 1) == end1 ? *string2 : (d - 1) == string2 - 1 ? *(end1 - 1) : *(d - 1))] == 1);
   thischar = (re_syntax_table[(unsigned char) ((d) == end1 ? *string2 : (d) == string2 - 1 ? *(end1 - 1) : *(d))] == 1);
   if (prevchar != thischar)
     goto fail;
   break;
 }
 case wordbeg:
          ;
   if (!((d) == end2) && (re_syntax_table[(unsigned char) ((d) == end1 ? *string2 : (d) == string2 - 1 ? *(end1 - 1) : *(d))] == 1)
       && (((d) == (size1 ? string1 : string2) || !size2) || !(re_syntax_table[(unsigned char) ((d - 1) == end1 ? *string2 : (d - 1) == string2 - 1 ? *(end1 - 1) : *(d - 1))] == 1)))
     break;
          goto fail;
 case wordend:
          ;
   if (!((d) == (size1 ? string1 : string2) || !size2) && (re_syntax_table[(unsigned char) ((d - 1) == end1 ? *string2 : (d - 1) == string2 - 1 ? *(end1 - 1) : *(d - 1))] == 1)
              && (((d) == end2) || !(re_syntax_table[(unsigned char) ((d) == end1 ? *string2 : (d) == string2 - 1 ? *(end1 - 1) : *(d))] == 1)))
     break;
          goto fail;
 case wordchar:
          ;
   while (d == dend) { if (dend == end_match_2) goto fail; d = string2; dend = end_match_2; };
          if (!(re_syntax_table[(unsigned char) ((d) == end1 ? *string2 : (d) == string2 - 1 ? *(end1 - 1) : *(d))] == 1))
            goto fail;
   do { if (!set_regs_matched_done) { active_reg_t r; set_regs_matched_done = 1; for (r = lowest_active_reg; r <= highest_active_reg; r++) { ((reg_info[r]).bits.matched_something) = ((reg_info[r]).bits.ever_matched_something) = 1; } } } while (0);
          d++;
   break;
 case notwordchar:
          ;
   while (d == dend) { if (dend == end_match_2) goto fail; d = string2; dend = end_match_2; };
   if ((re_syntax_table[(unsigned char) ((d) == end1 ? *string2 : (d) == string2 - 1 ? *(end1 - 1) : *(d))] == 1))
            goto fail;
          do { if (!set_regs_matched_done) { active_reg_t r; set_regs_matched_done = 1; for (r = lowest_active_reg; r <= highest_active_reg; r++) { ((reg_info[r]).bits.matched_something) = ((reg_info[r]).bits.ever_matched_something) = 1; } } } while (0);
          d++;
   break;
        default:
          abort ();
 }
      continue;
    fail:
      if (!(fail_stack.avail == 0))
 {
          ;
          { active_reg_t this_reg; const unsigned char *string_temp; ; ; ; ; ; ; ; string_temp = fail_stack.stack[--fail_stack.avail].pointer; if (string_temp != ((void *)0)) d = (const char *) string_temp; ; ; ; p = (unsigned char *) fail_stack.stack[--fail_stack.avail].pointer; ; ; highest_active_reg = (active_reg_t) fail_stack.stack[--fail_stack.avail].integer; ; lowest_active_reg = (active_reg_t) fail_stack.stack[--fail_stack.avail].integer; ; if (1) for (this_reg = highest_active_reg; this_reg >= lowest_active_reg; this_reg--) { ; reg_info[this_reg].word = fail_stack.stack[--fail_stack.avail]; ; regend[this_reg] = (const char *) fail_stack.stack[--fail_stack.avail].pointer; ; regstart[this_reg] = (const char *) fail_stack.stack[--fail_stack.avail].pointer; ; } else { for (this_reg = highest_active_reg; this_reg > highest_active_reg; this_reg--) { reg_info[this_reg].word.integer = 0; regend[this_reg] = 0; regstart[this_reg] = 0; } highest_active_reg = highest_active_reg; } set_regs_matched_done = 0; ; }
                                                        ;
          if (!p)
     goto fail;
   ;
          if (p < pend)
            {
              boolean is_a_jump_n = 0;
              switch ((re_opcode_t) *p)
                {
                case jump_n:
                  is_a_jump_n = 1;
                case maybe_pop_jump:
                case pop_failure_jump:
                case jump:
                  p1 = p + 1;
                  do { do { (mcnt) = *(p1) & 0377; (mcnt) += ((signed char) (*((p1) + 1))) << 8; } while (0); (p1) += 2; } while (0);
                  p1 += mcnt;
                  if ((is_a_jump_n && (re_opcode_t) *p1 == succeed_n)
                      || (!is_a_jump_n
                          && (re_opcode_t) *p1 == on_failure_jump))
                    goto fail;
                  break;
                default:
                                   ;
                }
            }
          if (d >= string1 && d <= end1)
     dend = end_match_1;
        }
      else
        break;
    }
  if (best_regs_set)
    goto restore_best_regs;
  do { ; if (regstart) ((void)0); regstart = ((void *)0); if (regend) ((void)0); regend = ((void *)0); if (old_regstart) ((void)0); old_regstart = ((void *)0); if (old_regend) ((void)0); old_regend = ((void *)0); if (best_regstart) ((void)0); best_regstart = ((void *)0); if (best_regend) ((void)0); best_regend = ((void *)0); if (reg_info) ((void)0); reg_info = ((void *)0); if (reg_dummy) ((void)0); reg_dummy = ((void *)0); if (reg_info_dummy) ((void)0); reg_info_dummy = ((void *)0); } while (0);
  return -1;
}
static boolean
byte_group_match_null_string_p (p, end, reg_info)
    unsigned char **p, *end;
    byte_register_info_type *reg_info;
{
  int mcnt;
  unsigned char *p1 = *p + 2;
  while (p1 < end)
    {
      switch ((re_opcode_t) *p1)
        {
        case on_failure_jump:
          p1++;
          do { do { (mcnt) = *(p1) & 0377; (mcnt) += ((signed char) (*((p1) + 1))) << 8; } while (0); (p1) += 2; } while (0);
   if (mcnt >= 0)
     {
              while ((re_opcode_t) p1[mcnt-(1+2)] ==
       jump_past_alt)
                {
                  if (!byte_alt_match_null_string_p (p1, p1 + mcnt -
      (1 + 2),
      reg_info))
                    return 0;
                  p1 += mcnt;
                  if ((re_opcode_t) *p1 != on_failure_jump)
                    break;
    p1++;
                  do { do { (mcnt) = *(p1) & 0377; (mcnt) += ((signed char) (*((p1) + 1))) << 8; } while (0); (p1) += 2; } while (0);
                  if ((re_opcode_t) p1[mcnt-(1+2)] !=
        jump_past_alt)
                    {
                      p1 -= 1 + 2;
                      break;
                    }
                }
              do { (mcnt) = *(p1 - 2) & 0377; (mcnt) += ((signed char) (*((p1 - 2) + 1))) << 8; } while (0);
              if (!byte_alt_match_null_string_p (p1, p1 + mcnt, reg_info))
                return 0;
              p1 += mcnt;
            }
          break;
        case stop_memory:
   ;
          *p = p1 + 2;
          return 1;
        default:
          if (!byte_common_op_match_null_string_p (&p1, end, reg_info))
            return 0;
        }
    }
  return 0;
}
static boolean
byte_alt_match_null_string_p (p, end, reg_info)
    unsigned char *p, *end;
    byte_register_info_type *reg_info;
{
  int mcnt;
  unsigned char *p1 = p;
  while (p1 < end)
    {
      switch ((re_opcode_t) *p1)
        {
        case on_failure_jump:
          p1++;
          do { do { (mcnt) = *(p1) & 0377; (mcnt) += ((signed char) (*((p1) + 1))) << 8; } while (0); (p1) += 2; } while (0);
          p1 += mcnt;
          break;
 default:
          if (!byte_common_op_match_null_string_p (&p1, end, reg_info))
            return 0;
        }
    }
  return 1;
}
static boolean
byte_common_op_match_null_string_p (p, end, reg_info)
    unsigned char **p, *end;
    byte_register_info_type *reg_info;
{
  int mcnt;
  boolean ret;
  int reg_no;
  unsigned char *p1 = *p;
  switch ((re_opcode_t) *p1++)
    {
    case no_op:
    case begline:
    case endline:
    case begbuf:
    case endbuf:
    case wordbeg:
    case wordend:
    case wordbound:
    case notwordbound:
      break;
    case start_memory:
      reg_no = *p1;
      ;
      ret = byte_group_match_null_string_p (&p1, end, reg_info);
      if (((reg_info[reg_no]).bits.match_null_string_p) == 3)
        ((reg_info[reg_no]).bits.match_null_string_p) = ret;
      if (!ret)
        return 0;
      break;
    case jump:
      do { do { (mcnt) = *(p1) & 0377; (mcnt) += ((signed char) (*((p1) + 1))) << 8; } while (0); (p1) += 2; } while (0);
      if (mcnt >= 0)
        p1 += mcnt;
      else
        return 0;
      break;
    case succeed_n:
      p1 += 2;
      do { do { (mcnt) = *(p1) & 0377; (mcnt) += ((signed char) (*((p1) + 1))) << 8; } while (0); (p1) += 2; } while (0);
      if (mcnt == 0)
        {
          p1 -= 2 * 2;
          do { do { (mcnt) = *(p1) & 0377; (mcnt) += ((signed char) (*((p1) + 1))) << 8; } while (0); (p1) += 2; } while (0);
          p1 += mcnt;
        }
      else
        return 0;
      break;
    case duplicate:
      if (!((reg_info[*p1]).bits.match_null_string_p))
        return 0;
      break;
    case set_number_at:
      p1 += 2 * 2;
    default:
      return 0;
  }
  *p = p1;
  return 1;
}
static int
byte_bcmp_translate (s1, s2, len, translate)
     const char *s1, *s2;
     register int len;
     char * translate;
{
  register const unsigned char *p1 = (const unsigned char *) s1;
  register const unsigned char *p2 = (const unsigned char *) s2;
  while (len)
    {
      if (translate[*p1++] != translate[*p2++]) return 1;
      len--;
    }
  return 0;
}
reg_syntax_t xre_syntax_options;
reg_syntax_t
xre_set_syntax (syntax)
    reg_syntax_t syntax;
{
  reg_syntax_t ret = xre_syntax_options;
  xre_syntax_options = syntax;
  return ret;
}
static const char *re_error_msgid[] =
  {
    "Success",
    "No match",
    "Invalid regular expression",
    "Invalid collation character",
    "Invalid character class name",
    "Trailing backslash",
    "Invalid back reference",
    "Unmatched [ or [^",
    "Unmatched ( or \\(",
    "Unmatched \\{",
    "Invalid content of \\{\\}",
    "Invalid range end",
    "Memory exhausted",
    "Invalid preceding regular expression",
    "Premature end of regular expression",
    "Regular expression too big",
    "Unmatched ) or \\)"
  };
static boolean
group_in_compile_stack (compile_stack, regnum)
    compile_stack_type compile_stack;
    regnum_t regnum;
{
  int this_element;
  for (this_element = compile_stack.avail - 1;
       this_element >= 0;
       this_element--)
    if (compile_stack.stack[this_element].regnum == regnum)
      return 1;
  return 0;
}
int
xre_compile_fastmap (bufp)
     struct re_pattern_buffer *bufp;
{
    return byte_re_compile_fastmap(bufp);
}
void
xre_set_registers (bufp, regs, num_regs, starts, ends)
    struct re_pattern_buffer *bufp;
    struct re_registers *regs;
    unsigned num_regs;
    regoff_t *starts, *ends;
{
  if (num_regs)
    {
      bufp->regs_allocated = 1;
      regs->num_regs = num_regs;
      regs->start = starts;
      regs->end = ends;
    }
  else
    {
      bufp->regs_allocated = 0;
      regs->num_regs = 0;
      regs->start = regs->end = (regoff_t *) 0;
    }
}
int
xre_search (bufp, string, size, startpos, range, regs)
     struct re_pattern_buffer *bufp;
     const char *string;
     int size, startpos, range;
     struct re_registers *regs;
{
  return xre_search_2 (bufp, ((void *)0), 0, string, size, startpos, range,
        regs, size);
}
int
xre_search_2 (bufp, string1, size1, string2, size2, startpos, range, regs, stop)
     struct re_pattern_buffer *bufp;
     const char *string1, *string2;
     int size1, size2;
     int startpos;
     int range;
     struct re_registers *regs;
     int stop;
{
    return byte_re_search_2 (bufp, string1, size1, string2, size2, startpos,
        range, regs, stop);
}
int
xre_match (bufp, string, size, pos, regs)
     struct re_pattern_buffer *bufp;
     const char *string;
     int size, pos;
     struct re_registers *regs;
{
  int result;
    result = byte_re_match_2_internal (bufp, ((void *)0), 0, string, size,
      pos, regs, size);
  return result;
}
int
xre_match_2 (bufp, string1, size1, string2, size2, pos, regs, stop)
     struct re_pattern_buffer *bufp;
     const char *string1, *string2;
     int size1, size2;
     int pos;
     struct re_registers *regs;
     int stop;
{
  int result;
    result = byte_re_match_2_internal (bufp, string1, size1, string2, size2,
      pos, regs, stop);
  return result;
}
const char *
xre_compile_pattern (pattern, length, bufp)
     const char *pattern;
     size_t length;
     struct re_pattern_buffer *bufp;
{
  reg_errcode_t ret;
  bufp->regs_allocated = 0;
  bufp->no_sub = 0;
  bufp->newline_anchor = 1;
    ret = byte_regex_compile (pattern, length, xre_syntax_options, bufp);
  if (!ret)
    return ((void *)0);
  return gettext (re_error_msgid[(int) ret]);
}
static struct re_pattern_buffer re_comp_buf;
char *
xre_comp (s)
    const char *s;
{
  reg_errcode_t ret;
  if (!s)
    {
      if (!re_comp_buf.buffer)
 return gettext ("No previous regular expression");
      return 0;
    }
  if (!re_comp_buf.buffer)
    {
      re_comp_buf.buffer = (unsigned char *) malloc (200);
      if (re_comp_buf.buffer == ((void *)0))
        return (char *) gettext (re_error_msgid[(int) REG_ESPACE]);
      re_comp_buf.allocated = 200;
      re_comp_buf.fastmap = (char *) malloc (1 << 8);
      if (re_comp_buf.fastmap == ((void *)0))
 return (char *) gettext (re_error_msgid[(int) REG_ESPACE]);
    }
  re_comp_buf.newline_anchor = 1;
    ret = byte_regex_compile (s, strlen (s), xre_syntax_options, &re_comp_buf);
  if (!ret)
    return ((void *)0);
  return (char *) gettext (re_error_msgid[(int) ret]);
}
int
xre_exec (s)
    const char *s;
{
  const int len = strlen (s);
  return
    0 <= xre_search (&re_comp_buf, s, len, 0, len, (struct re_registers *) 0);
}
int
xregcomp (preg, pattern, cflags)
    regex_t *preg;
    const char *pattern;
    int cflags;
{
  reg_errcode_t ret;
  reg_syntax_t syntax
    = (cflags & 1) ?
      ((((((unsigned long int) 1) << 1) << 1) | ((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) | (((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | (((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((unsigned long int) 1) << 1) << 1) << 1) | ((((((unsigned long int) 1) << 1) << 1) << 1) << 1) | ((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | (((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | (((((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | (((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) | (((((((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) : ((((((unsigned long int) 1) << 1) << 1) | ((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) | (((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | (((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) | ((((((((((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((unsigned long int) 1) << 1));
  preg->buffer = 0;
  preg->allocated = 0;
  preg->used = 0;
  preg->fastmap = (char *) malloc (1 << 8);
  if (cflags & (1 << 1))
    {
      unsigned i;
      preg->translate
 = (char *) malloc (256
          * sizeof (*(char *)0));
      if (preg->translate == ((void *)0))
        return (int) REG_ESPACE;
      for (i = 0; i < 256; i++)
        preg->translate[i] = (1 && ((*__ctype_b_loc ())[(int) ((i))] & (unsigned short int) _ISupper)) ? ((int) (*__ctype_tolower_loc ())[(int) (i)]) : (int) i;
    }
  else
    preg->translate = ((void *)0);
  if (cflags & ((1 << 1) << 1))
    {
      syntax &= ~((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1);
      syntax |= ((((((((((unsigned long int) 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1);
      preg->newline_anchor = 1;
    }
  else
    preg->newline_anchor = 0;
  preg->no_sub = !!(cflags & (((1 << 1) << 1) << 1));
    ret = byte_regex_compile (pattern, strlen (pattern), syntax, preg);
  if (ret == REG_ERPAREN) ret = REG_EPAREN;
  if (ret == REG_NOERROR && preg->fastmap)
    {
      if (xre_compile_fastmap (preg) == -2)
 {
   free (preg->fastmap);
   preg->fastmap = ((void *)0);
 }
    }
  return (int) ret;
}
int
xregexec (preg, string, nmatch, pmatch, eflags)
    const regex_t *preg;
    const char *string;
    size_t nmatch;
    regmatch_t pmatch[];
    int eflags;
{
  int ret;
  struct re_registers regs;
  regex_t private_preg;
  int len = strlen (string);
  boolean want_reg_info = !preg->no_sub && nmatch > 0;
  private_preg = *preg;
  private_preg.not_bol = !!(eflags & 1);
  private_preg.not_eol = !!(eflags & (1 << 1));
  private_preg.regs_allocated = 2;
  if (want_reg_info)
    {
      regs.num_regs = nmatch;
      regs.start = ((regoff_t *) malloc ((nmatch * 2) * sizeof (regoff_t)));
      if (regs.start == ((void *)0))
        return (int) REG_NOMATCH;
      regs.end = regs.start + nmatch;
    }
  ret = xre_search (&private_preg, string, len,
                                0, len,
                   want_reg_info ? &regs : (struct re_registers *) 0);
  if (want_reg_info)
    {
      if (ret >= 0)
        {
          unsigned r;
          for (r = 0; r < nmatch; r++)
            {
              pmatch[r].rm_so = regs.start[r];
              pmatch[r].rm_eo = regs.end[r];
            }
        }
      free (regs.start);
    }
  return ret >= 0 ? (int) REG_NOERROR : (int) REG_NOMATCH;
}
size_t
xregerror (errcode, preg, errbuf, errbuf_size)
    int errcode;
    const regex_t *preg ;
    char *errbuf;
    size_t errbuf_size;
{
  const char *msg;
  size_t msg_size;
  if (errcode < 0
      || errcode >= (int) (sizeof (re_error_msgid)
      / sizeof (re_error_msgid[0])))
    abort ();
  msg = gettext (re_error_msgid[errcode]);
  msg_size = strlen (msg) + 1;
  if (errbuf_size != 0)
    {
      if (msg_size > errbuf_size)
        {
   *((char *) mempcpy (errbuf, msg, errbuf_size - 1)) = '\0';
        }
      else
        memcpy (errbuf, msg, msg_size);
    }
  return msg_size;
}
void
xregfree (preg)
    regex_t *preg;
{
  if (preg->buffer != ((void *)0))
    free (preg->buffer);
  preg->buffer = ((void *)0);
  preg->allocated = 0;
  preg->used = 0;
  if (preg->fastmap != ((void *)0))
    free (preg->fastmap);
  preg->fastmap = ((void *)0);
  preg->fastmap_accurate = 0;
  if (preg->translate != ((void *)0))
    free (preg->translate);
  preg->translate = ((void *)0);
}
enum {
  _sch_isblank = 0x0001,
  _sch_iscntrl = 0x0002,
  _sch_isdigit = 0x0004,
  _sch_islower = 0x0008,
  _sch_isprint = 0x0010,
  _sch_ispunct = 0x0020,
  _sch_isspace = 0x0040,
  _sch_isupper = 0x0080,
  _sch_isxdigit = 0x0100,
  _sch_isidst = 0x0200,
  _sch_isvsp = 0x0400,
  _sch_isnvsp = 0x0800,
  _sch_isalpha = _sch_isupper|_sch_islower,
  _sch_isalnum = _sch_isalpha|_sch_isdigit,
  _sch_isidnum = _sch_isidst|_sch_isdigit,
  _sch_isgraph = _sch_isalnum|_sch_ispunct,
  _sch_iscppsp = _sch_isvsp|_sch_isnvsp,
  _sch_isbasic = _sch_isprint|_sch_iscppsp
};
extern const unsigned short _sch_istable[256];
extern const unsigned char _sch_toupper[256];
extern const unsigned char _sch_tolower[256];
struct _IO_FILE;
typedef struct _IO_FILE FILE;
typedef struct _IO_FILE __FILE;
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
typedef __builtin_va_list __gnuc_va_list;
struct _IO_jump_t; struct _IO_FILE;
typedef void _IO_lock_t;
struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;
  int _pos;
};
enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
struct _IO_FILE {
  int _flags;
  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;
  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;
  struct _IO_marker *_markers;
  struct _IO_FILE *_chain;
  int _fileno;
  int _flags2;
  __off_t _old_offset;
  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];
  _IO_lock_t *_lock;
  __off64_t _offset;
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;
  int _mode;
  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
typedef struct _IO_FILE _IO_FILE;
struct _IO_FILE_plus;
extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);
typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);
typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);
typedef int __io_close_fn (void *__cookie);
typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;
typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;
struct _IO_cookie_file;
extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);
extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) ;
extern int _IO_ferror (_IO_FILE *__fp) ;
extern int _IO_peekc_locked (_IO_FILE *__fp);
extern void _IO_flockfile (_IO_FILE *) ;
extern void _IO_funlockfile (_IO_FILE *) ;
extern int _IO_ftrylockfile (_IO_FILE *) ;
extern int _IO_vfscanf (_IO_FILE * , const char * ,
   __gnuc_va_list, int *);
extern int _IO_vfprintf (_IO_FILE *, const char *,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);
extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);
extern void _IO_free_backup_area (_IO_FILE *) ;
typedef __gnuc_va_list va_list;
typedef _G_fpos_t fpos_t;
typedef _G_fpos64_t fpos64_t;
extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;
extern int remove (const char *__filename) ;
extern int rename (const char *__old, const char *__new) ;
extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) ;
extern FILE *tmpfile (void) ;
extern FILE *tmpfile64 (void) ;
extern char *tmpnam (char *__s) ;
extern char *tmpnam_r (char *__s) ;
extern char *tempnam (const char *__dir, const char *__pfx)
     ;
extern int fclose (FILE *__stream);
extern int fflush (FILE *__stream);
extern int fflush_unlocked (FILE *__stream);
extern int fcloseall (void);
extern FILE *fopen (const char * __filename,
      const char * __modes) ;
extern FILE *freopen (const char * __filename,
        const char * __modes,
        FILE * __stream) ;
extern FILE *fopen64 (const char * __filename,
        const char * __modes) ;
extern FILE *freopen64 (const char * __filename,
   const char * __modes,
   FILE * __stream) ;
extern FILE *fdopen (int __fd, const char *__modes) ;
extern FILE *fopencookie (void * __magic_cookie,
     const char * __modes,
     _IO_cookie_io_functions_t __io_funcs) ;
extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  ;
extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) ;
extern void setbuf (FILE * __stream, char * __buf) ;
extern int setvbuf (FILE * __stream, char * __buf,
      int __modes, size_t __n) ;
extern void setbuffer (FILE * __stream, char * __buf,
         size_t __size) ;
extern void setlinebuf (FILE *__stream) ;
extern int fprintf (FILE * __stream,
      const char * __format, ...);
extern int printf (const char * __format, ...);
extern int sprintf (char * __s,
      const char * __format, ...) ;
extern int vfprintf (FILE * __s, const char * __format,
       __gnuc_va_list __arg);
extern int vprintf (const char * __format, __gnuc_va_list __arg);
extern int vsprintf (char * __s, const char * __format,
       __gnuc_va_list __arg) ;
extern int snprintf (char * __s, size_t __maxlen,
       const char * __format, ...)
     ;
extern int vsnprintf (char * __s, size_t __maxlen,
        const char * __format, __gnuc_va_list __arg)
     ;
extern int vasprintf (char ** __ptr, const char * __f,
        __gnuc_va_list __arg)
     ;
extern int __asprintf (char ** __ptr,
         const char * __fmt, ...)
     ;
extern int asprintf (char ** __ptr,
       const char * __fmt, ...)
     ;
extern int vdprintf (int __fd, const char * __fmt,
       __gnuc_va_list __arg)
     ;
extern int dprintf (int __fd, const char * __fmt, ...)
     ;
extern int fscanf (FILE * __stream,
     const char * __format, ...) ;
extern int scanf (const char * __format, ...) ;
extern int sscanf (const char * __s,
     const char * __format, ...) ;
extern int vfscanf (FILE * __s, const char * __format,
      __gnuc_va_list __arg)
     ;
extern int vscanf (const char * __format, __gnuc_va_list __arg)
     ;
extern int vsscanf (const char * __s,
      const char * __format, __gnuc_va_list __arg)
     ;
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);
extern int getchar (void);
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
extern int fgetc_unlocked (FILE *__stream);
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);
extern int putchar (int __c);
extern int fputc_unlocked (int __c, FILE *__stream);
extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);
extern int getw (FILE *__stream);
extern int putw (int __w, FILE *__stream);
extern char *fgets (char * __s, int __n, FILE * __stream)
     ;
extern char *fgets_unlocked (char * __s, int __n,
        FILE * __stream) ;
extern __ssize_t __getdelim (char ** __lineptr,
          size_t * __n, int __delimiter,
          FILE * __stream) ;
extern __ssize_t getdelim (char ** __lineptr,
        size_t * __n, int __delimiter,
        FILE * __stream) ;
extern __ssize_t getline (char ** __lineptr,
       size_t * __n,
       FILE * __stream) ;
extern int fputs (const char * __s, FILE * __stream);
extern int puts (const char *__s);
extern int ungetc (int __c, FILE *__stream);
extern size_t fread (void * __ptr, size_t __size,
       size_t __n, FILE * __stream) ;
extern size_t fwrite (const void * __ptr, size_t __size,
        size_t __n, FILE * __s);
extern int fputs_unlocked (const char * __s,
      FILE * __stream);
extern size_t fread_unlocked (void * __ptr, size_t __size,
         size_t __n, FILE * __stream) ;
extern size_t fwrite_unlocked (const void * __ptr, size_t __size,
          size_t __n, FILE * __stream);
extern int fseek (FILE *__stream, long int __off, int __whence);
extern long int ftell (FILE *__stream) ;
extern void rewind (FILE *__stream);
extern int fseeko (FILE *__stream, __off_t __off, int __whence);
extern __off_t ftello (FILE *__stream) ;
extern int fgetpos (FILE * __stream, fpos_t * __pos);
extern int fsetpos (FILE *__stream, const fpos_t *__pos);
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE * __stream, fpos64_t * __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);
extern void clearerr (FILE *__stream) ;
extern int feof (FILE *__stream) ;
extern int ferror (FILE *__stream) ;
extern void clearerr_unlocked (FILE *__stream) ;
extern int feof_unlocked (FILE *__stream) ;
extern int ferror_unlocked (FILE *__stream) ;
extern void perror (const char *__s);
extern int sys_nerr;
extern const char *const sys_errlist[];
extern int _sys_nerr;
extern const char *const _sys_errlist[];
extern int fileno (FILE *__stream) ;
extern int fileno_unlocked (FILE *__stream) ;
extern FILE *popen (const char *__command, const char *__modes) ;
extern int pclose (FILE *__stream);
extern char *ctermid (char *__s) ;
extern char *cuserid (char *__s);
struct obstack;
extern int obstack_printf (struct obstack * __obstack,
      const char * __format, ...)
     ;
extern int obstack_vprintf (struct obstack * __obstack,
       const char * __format,
       __gnuc_va_list __args)
     ;
extern void flockfile (FILE *__stream) ;
extern int ftrylockfile (FILE *__stream) ;
extern void funlockfile (FILE *__stream) ;
extern char **buildargv (const char *) ;
extern void freeargv (char **);
extern char **dupargv (char **) ;
extern const char *lbasename (const char *);
extern char *lrealpath (const char *);
extern char *concat (const char *, ...) ;
extern char *reconcat (char *, const char *, ...) ;
extern unsigned long concat_length (const char *, ...);
extern char *concat_copy (char *, const char *, ...);
extern char *concat_copy2 (const char *, ...);
extern char *libiberty_concat_ptr;
extern int fdmatch (int fd1, int fd2);
extern char * getpwd (void);
extern long get_run_time (void);
extern char *make_relative_prefix (const char *, const char *, const char *)
                      ;
extern char *choose_temp_base (void) ;
extern char *make_temp_file (const char *) ;
extern const char *spaces (int count);
extern int errno_max (void);
extern const char *strerrno (int);
extern int strtoerrno (const char *);
extern char *xstrerror (int);
extern int signo_max (void);
extern const char *strsigno (int);
extern int strtosigno (const char *);
extern int xatexit (void (*fn) (void));
extern void xexit (int status) ;
extern void xmalloc_set_program_name (const char *);
extern void xmalloc_failed (size_t) ;
extern void * xmalloc (size_t) ;
extern void * xrealloc (void *, size_t);
extern void * xcalloc (size_t, size_t) ;
extern char *xstrdup (const char *) ;
extern void * xmemdup (const void *, size_t, size_t) ;
extern double physmem_total (void);
extern double physmem_available (void);
extern const unsigned char _hex_value[256];
extern void hex_init (void);
extern int pexecute (const char *, char * const *, const char *, const char *, char **, char **, int)
                                            ;
extern int pwait (int, int *, int);
extern int asprintf (char **, const char *, ...) ;
extern void * C_alloca (size_t) ;
extern const char *libiberty_optr;
extern char *libiberty_nptr;
extern unsigned long libiberty_len;
extern enum demangling_styles
{
  no_demangling = -1,
  unknown_demangling = 0,
  auto_demangling = (1 << 8),
  gnu_demangling = (1 << 9),
  lucid_demangling = (1 << 10),
  arm_demangling = (1 << 11),
  hp_demangling = (1 << 12),
  edg_demangling = (1 << 13),
  gnu_v3_demangling = (1 << 14),
  java_demangling = (1 << 2),
  gnat_demangling = (1 << 15)
} current_demangling_style;
extern const struct demangler_engine
{
  const char *const demangling_style_name;
  const enum demangling_styles demangling_style;
  const char *const demangling_style_doc;
} libiberty_demanglers[];
extern char *
cplus_demangle (const char *mangled, int options);
extern int
cplus_demangle_opname (const char *opname, char *result, int options);
extern const char *
cplus_mangle_opname (const char *opname, int options);
extern void
set_cplus_marker_for_demangling (int ch);
extern enum demangling_styles
cplus_demangle_set_style (enum demangling_styles style);
extern enum demangling_styles
cplus_demangle_name_to_style (const char *name);
extern char*
cplus_demangle_v3 (const char* mangled, int options);
extern char*
java_demangle_v3 (const char* mangled);
enum gnu_v3_ctor_kinds {
  gnu_v3_complete_object_ctor = 1,
  gnu_v3_base_object_ctor,
  gnu_v3_complete_object_allocating_ctor
};
extern enum gnu_v3_ctor_kinds
 is_gnu_v3_mangled_ctor (const char *name);
enum gnu_v3_dtor_kinds {
  gnu_v3_deleting_dtor = 1,
  gnu_v3_complete_object_dtor,
  gnu_v3_base_object_dtor
};
extern enum gnu_v3_dtor_kinds
 is_gnu_v3_mangled_dtor (const char *name);
enum demangle_component_type
{
  DEMANGLE_COMPONENT_NAME,
  DEMANGLE_COMPONENT_QUAL_NAME,
  DEMANGLE_COMPONENT_LOCAL_NAME,
  DEMANGLE_COMPONENT_TYPED_NAME,
  DEMANGLE_COMPONENT_TEMPLATE,
  DEMANGLE_COMPONENT_TEMPLATE_PARAM,
  DEMANGLE_COMPONENT_CTOR,
  DEMANGLE_COMPONENT_DTOR,
  DEMANGLE_COMPONENT_VTABLE,
  DEMANGLE_COMPONENT_VTT,
  DEMANGLE_COMPONENT_CONSTRUCTION_VTABLE,
  DEMANGLE_COMPONENT_TYPEINFO,
  DEMANGLE_COMPONENT_TYPEINFO_NAME,
  DEMANGLE_COMPONENT_TYPEINFO_FN,
  DEMANGLE_COMPONENT_THUNK,
  DEMANGLE_COMPONENT_VIRTUAL_THUNK,
  DEMANGLE_COMPONENT_COVARIANT_THUNK,
  DEMANGLE_COMPONENT_JAVA_CLASS,
  DEMANGLE_COMPONENT_GUARD,
  DEMANGLE_COMPONENT_REFTEMP,
  DEMANGLE_COMPONENT_SUB_STD,
  DEMANGLE_COMPONENT_RESTRICT,
  DEMANGLE_COMPONENT_VOLATILE,
  DEMANGLE_COMPONENT_CONST,
  DEMANGLE_COMPONENT_RESTRICT_THIS,
  DEMANGLE_COMPONENT_VOLATILE_THIS,
  DEMANGLE_COMPONENT_CONST_THIS,
  DEMANGLE_COMPONENT_VENDOR_TYPE_QUAL,
  DEMANGLE_COMPONENT_POINTER,
  DEMANGLE_COMPONENT_REFERENCE,
  DEMANGLE_COMPONENT_COMPLEX,
  DEMANGLE_COMPONENT_IMAGINARY,
  DEMANGLE_COMPONENT_BUILTIN_TYPE,
  DEMANGLE_COMPONENT_VENDOR_TYPE,
  DEMANGLE_COMPONENT_FUNCTION_TYPE,
  DEMANGLE_COMPONENT_ARRAY_TYPE,
  DEMANGLE_COMPONENT_PTRMEM_TYPE,
  DEMANGLE_COMPONENT_ARGLIST,
  DEMANGLE_COMPONENT_TEMPLATE_ARGLIST,
  DEMANGLE_COMPONENT_OPERATOR,
  DEMANGLE_COMPONENT_EXTENDED_OPERATOR,
  DEMANGLE_COMPONENT_CAST,
  DEMANGLE_COMPONENT_UNARY,
  DEMANGLE_COMPONENT_BINARY,
  DEMANGLE_COMPONENT_BINARY_ARGS,
  DEMANGLE_COMPONENT_TRINARY,
  DEMANGLE_COMPONENT_TRINARY_ARG1,
  DEMANGLE_COMPONENT_TRINARY_ARG2,
  DEMANGLE_COMPONENT_LITERAL,
  DEMANGLE_COMPONENT_LITERAL_NEG
};
struct demangle_operator_info;
struct demangle_builtin_type_info;
struct demangle_component
{
  enum demangle_component_type type;
  union
  {
    struct
    {
      const char *s;
      int len;
    } s_name;
    struct
    {
      const struct demangle_operator_info *op;
    } s_operator;
    struct
    {
      int args;
      struct demangle_component *name;
    } s_extended_operator;
    struct
    {
      enum gnu_v3_ctor_kinds kind;
      struct demangle_component *name;
    } s_ctor;
    struct
    {
      enum gnu_v3_dtor_kinds kind;
      struct demangle_component *name;
    } s_dtor;
    struct
    {
      const struct demangle_builtin_type_info *type;
    } s_builtin;
    struct
    {
      const char* string;
      int len;
    } s_string;
    struct
    {
      long number;
    } s_number;
    struct
    {
      struct demangle_component *left;
      struct demangle_component *right;
    } s_binary;
  } u;
};
extern int
cplus_demangle_fill_component (struct demangle_component *fill, enum demangle_component_type, struct demangle_component *left, struct demangle_component *right)
                                             ;
extern int
cplus_demangle_fill_name (struct demangle_component *fill, const char *, int)
                         ;
extern int
cplus_demangle_fill_builtin_type (struct demangle_component *fill, const char *type_name)
                              ;
extern int
cplus_demangle_fill_operator (struct demangle_component *fill, const char *opname, int args)
                                        ;
extern int
cplus_demangle_fill_extended_operator (struct demangle_component *fill, int numargs, struct demangle_component *nm)
                                           ;
extern int
cplus_demangle_fill_ctor (struct demangle_component *fill, enum gnu_v3_ctor_kinds kind, struct demangle_component *name)
                                       ;
extern int
cplus_demangle_fill_dtor (struct demangle_component *fill, enum gnu_v3_dtor_kinds kind, struct demangle_component *name)
                                       ;
extern struct demangle_component *
cplus_demangle_v3_components (const char *mangled, int options, void **mem)
                      ;
extern char *
cplus_demangle_print (int options, const struct demangle_component *tree, int estimated_length, size_t *p_allocated_size)
                                   ;
static char *ada_demangle (const char *, int);
enum demangling_styles current_demangling_style = auto_demangling;
static char cplus_markers[] = { '$', '.', '$', '\0' };
static char char_str[2] = { '\000', '\000' };
void
set_cplus_marker_for_demangling (ch)
     int ch;
{
  cplus_markers[0] = ch;
}
typedef struct string
{
  char *b;
  char *p;
  char *e;
} string;
struct work_stuff
{
  int options;
  char **typevec;
  char **ktypevec;
  char **btypevec;
  int numk;
  int numb;
  int ksize;
  int bsize;
  int ntypes;
  int typevec_size;
  int constructor;
  int destructor;
  int static_type;
  int temp_start;
  int type_quals;
  int dllimported;
  char **tmpl_argvec;
  int ntmpl_args;
  int forgetting_types;
  string* previous_argument;
  int nrepeats;
};
static const struct optable
{
  const char *const in;
  const char *const out;
  const int flags;
} optable[] = {
  {"nw", " new", (1 << 1)},
  {"dl", " delete", (1 << 1)},
  {"new", " new", 0},
  {"delete", " delete", 0},
  {"vn", " new []", (1 << 1)},
  {"vd", " delete []", (1 << 1)},
  {"as", "=", (1 << 1)},
  {"ne", "!=", (1 << 1)},
  {"eq", "==", (1 << 1)},
  {"ge", ">=", (1 << 1)},
  {"gt", ">", (1 << 1)},
  {"le", "<=", (1 << 1)},
  {"lt", "<", (1 << 1)},
  {"plus", "+", 0},
  {"pl", "+", (1 << 1)},
  {"apl", "+=", (1 << 1)},
  {"minus", "-", 0},
  {"mi", "-", (1 << 1)},
  {"ami", "-=", (1 << 1)},
  {"mult", "*", 0},
  {"ml", "*", (1 << 1)},
  {"amu", "*=", (1 << 1)},
  {"aml", "*=", (1 << 1)},
  {"convert", "+", 0},
  {"negate", "-", 0},
  {"trunc_mod", "%", 0},
  {"md", "%", (1 << 1)},
  {"amd", "%=", (1 << 1)},
  {"trunc_div", "/", 0},
  {"dv", "/", (1 << 1)},
  {"adv", "/=", (1 << 1)},
  {"truth_andif", "&&", 0},
  {"aa", "&&", (1 << 1)},
  {"truth_orif", "||", 0},
  {"oo", "||", (1 << 1)},
  {"truth_not", "!", 0},
  {"nt", "!", (1 << 1)},
  {"postincrement","++", 0},
  {"pp", "++", (1 << 1)},
  {"postdecrement","--", 0},
  {"mm", "--", (1 << 1)},
  {"bit_ior", "|", 0},
  {"or", "|", (1 << 1)},
  {"aor", "|=", (1 << 1)},
  {"bit_xor", "^", 0},
  {"er", "^", (1 << 1)},
  {"aer", "^=", (1 << 1)},
  {"bit_and", "&", 0},
  {"ad", "&", (1 << 1)},
  {"aad", "&=", (1 << 1)},
  {"bit_not", "~", 0},
  {"co", "~", (1 << 1)},
  {"call", "()", 0},
  {"cl", "()", (1 << 1)},
  {"alshift", "<<", 0},
  {"ls", "<<", (1 << 1)},
  {"als", "<<=", (1 << 1)},
  {"arshift", ">>", 0},
  {"rs", ">>", (1 << 1)},
  {"ars", ">>=", (1 << 1)},
  {"component", "->", 0},
  {"pt", "->", (1 << 1)},
  {"rf", "->", (1 << 1)},
  {"indirect", "*", 0},
  {"method_call", "->()", 0},
  {"addr", "&", 0},
  {"array", "[]", 0},
  {"vc", "[]", (1 << 1)},
  {"compound", ", ", 0},
  {"cm", ", ", (1 << 1)},
  {"cond", "?:", 0},
  {"cn", "?:", (1 << 1)},
  {"max", ">?", 0},
  {"mx", ">?", (1 << 1)},
  {"min", "<?", 0},
  {"mn", "<?", (1 << 1)},
  {"nop", "", 0},
  {"rm", "->*", (1 << 1)},
  {"sz", "sizeof ", (1 << 1)}
};
typedef enum type_kind_t
{
  tk_none,
  tk_pointer,
  tk_reference,
  tk_integral,
  tk_bool,
  tk_char,
  tk_real
} type_kind_t;
const struct demangler_engine libiberty_demanglers[] =
{
  {
    "none",
    no_demangling,
    "Demangling disabled"
  }
  ,
  {
    "auto",
      auto_demangling,
      "Automatic selection based on executable"
  }
  ,
  {
    "gnu",
      gnu_demangling,
      "GNU (g++) style demangling"
  }
  ,
  {
    "lucid",
      lucid_demangling,
      "Lucid (lcc) style demangling"
  }
  ,
  {
    "arm",
      arm_demangling,
      "ARM style demangling"
  }
  ,
  {
    "hp",
      hp_demangling,
      "HP (aCC) style demangling"
  }
  ,
  {
    "edg",
      edg_demangling,
      "EDG style demangling"
  }
  ,
  {
    "gnu-v3",
    gnu_v3_demangling,
    "GNU (g++) V3 ABI-style demangling"
  }
  ,
  {
    "java",
    java_demangling,
    "Java style demangling"
  }
  ,
  {
    "gnat",
    gnat_demangling,
    "GNAT style demangling"
  }
  ,
  {
    ((void *)0), unknown_demangling, ((void *)0)
  }
};
static void
delete_work_stuff (struct work_stuff *);
static void
delete_non_B_K_work_stuff (struct work_stuff *);
static char *
mop_up (struct work_stuff *, string *, int);
static void
squangle_mop_up (struct work_stuff *);
static void
work_stuff_copy_to_from (struct work_stuff *, struct work_stuff *);
static char *
internal_cplus_demangle (struct work_stuff *, const char *);
static int
demangle_template_template_parm (struct work_stuff *work, const char **, string *)
                               ;
static int
demangle_template (struct work_stuff *work, const char **, string *, string *, int, int)
                          ;
static int
arm_pt (struct work_stuff *, const char *, int, const char **, const char **)
                 ;
static int
demangle_class_name (struct work_stuff *, const char **, string *);
static int
demangle_qualified (struct work_stuff *, const char **, string *, int, int)
                 ;
static int
demangle_class (struct work_stuff *, const char **, string *);
static int
demangle_fund_type (struct work_stuff *, const char **, string *);
static int
demangle_signature (struct work_stuff *, const char **, string *);
static int
demangle_prefix (struct work_stuff *, const char **, string *);
static int
gnu_special (struct work_stuff *, const char **, string *);
static int
arm_special (const char **, string *);
static void
string_need (string *, int);
static void
string_delete (string *);
static void
string_init (string *);
static void
string_clear (string *);
static void
string_append (string *, const char *);
static void
string_appends (string *, string *);
static void
string_appendn (string *, const char *, int);
static void
string_prepend (string *, const char *);
static void
string_prependn (string *, const char *, int);
static void
string_append_template_idx (string *, int);
static int
get_count (const char **, int *);
static int
consume_count (const char **);
static int
consume_count_with_underscores (const char**);
static int
demangle_args (struct work_stuff *, const char **, string *);
static int
demangle_nested_args (struct work_stuff*, const char**, string*);
static int
do_type (struct work_stuff *, const char **, string *);
static int
do_arg (struct work_stuff *, const char **, string *);
static void
demangle_function_name (struct work_stuff *, const char **, string *, const char *)
                  ;
static int
iterate_demangle_function (struct work_stuff *, const char **, string *, const char *)
                                              ;
static void
remember_type (struct work_stuff *, const char *, int);
static void
remember_Btype (struct work_stuff *, const char *, int, int);
static int
register_Btype (struct work_stuff *);
static void
remember_Ktype (struct work_stuff *, const char *, int);
static void
forget_types (struct work_stuff *);
static void
forget_B_and_K_types (struct work_stuff *);
static void
string_prepends (string *, string *);
static int
demangle_template_value_parm (struct work_stuff*, const char**, string*, type_kind_t)
                                ;
static int
do_hpacc_template_const_value (struct work_stuff *, const char **, string *);
static int
do_hpacc_template_literal (struct work_stuff *, const char **, string *);
static int
snarf_numeric_literal (const char **, string *);
static int
code_for_qualifier (int);
static const char*
qualifier_string (int);
static const char*
demangle_qualifier (int);
static int
demangle_expression (struct work_stuff *, const char **, string *, type_kind_t)
                     ;
static int
demangle_integral_value (struct work_stuff *, const char **, string *)
               ;
static int
demangle_real_value (struct work_stuff *, const char **, string *);
static void
demangle_arm_hp_template (struct work_stuff *, const char **, int, string *)
                ;
static void
recursively_demangle (struct work_stuff *, const char **, string *, int)
              ;
static void
grow_vect (char **, size_t *, size_t, int);
static int
consume_count (type)
     const char **type;
{
  int count = 0;
  if (! (_sch_istable[((unsigned char)**type) & 0xff] & (unsigned short)(_sch_isdigit)))
    return -1;
  while ((_sch_istable[((unsigned char)**type) & 0xff] & (unsigned short)(_sch_isdigit)))
    {
      count *= 10;
      if ((count % 10) != 0)
 {
   while ((_sch_istable[((unsigned char) **type) & 0xff] & (unsigned short)(_sch_isdigit)))
     (*type)++;
   return -1;
 }
      count += **type - '0';
      (*type)++;
    }
  if (count < 0)
    count = -1;
  return (count);
}
static int
consume_count_with_underscores (mangled)
     const char **mangled;
{
  int idx;
  if (**mangled == '_')
    {
      (*mangled)++;
      if (!(_sch_istable[((unsigned char)**mangled) & 0xff] & (unsigned short)(_sch_isdigit)))
 return -1;
      idx = consume_count (mangled);
      if (**mangled != '_')
 return -1;
      (*mangled)++;
    }
  else
    {
      if (**mangled < '0' || **mangled > '9')
 return -1;
      idx = **mangled - '0';
      (*mangled)++;
    }
  return idx;
}
static int
code_for_qualifier (c)
  int c;
{
  switch (c)
    {
    case 'C':
      return 0x1;
    case 'V':
      return 0x2;
    case 'u':
      return 0x4;
    default:
      break;
    }
  abort ();
}
static const char*
qualifier_string (type_quals)
     int type_quals;
{
  switch (type_quals)
    {
    case 0x0:
      return "";
    case 0x1:
      return "const";
    case 0x2:
      return "volatile";
    case 0x4:
      return "";
    case 0x1 | 0x2:
      return "const volatile";
    case 0x1 | 0x4:
      return "const ";
    case 0x2 | 0x4:
      return "volatile ";
    case 0x1 | 0x2 | 0x4:
      return "const volatile ";
    default:
      break;
    }
  abort ();
}
static const char*
demangle_qualifier (c)
  int c;
{
  return qualifier_string (code_for_qualifier (c));
}
int
cplus_demangle_opname (opname, result, options)
     const char *opname;
     char *result;
     int options;
{
  int len, len1, ret;
  string type;
  struct work_stuff work[1];
  const char *tem;
  len = strlen(opname);
  result[0] = '\0';
  ret = 0;
  memset ((char *) work, 0, sizeof (work));
  work->options = options;
  if (opname[0] == '_' && opname[1] == '_'
      && opname[2] == 'o' && opname[3] == 'p')
    {
      tem = opname + 4;
      if (do_type (work, &tem, &type))
 {
   strcat (result, "operator ");
   strncat (result, type.b, type.p - type.b);
   string_delete (&type);
   ret = 1;
 }
    }
  else if (opname[0] == '_' && opname[1] == '_'
    && (_sch_istable[((unsigned char)opname[2]) & 0xff] & (unsigned short)(_sch_islower))
    && (_sch_istable[((unsigned char)opname[3]) & 0xff] & (unsigned short)(_sch_islower)))
    {
      if (opname[4] == '\0')
 {
   size_t i;
   for (i = 0; i < (sizeof (optable) / sizeof ((optable)[0])); i++)
     {
       if (strlen (optable[i].in) == 2
    && memcmp (optable[i].in, opname + 2, 2) == 0)
  {
    strcat (result, "operator");
    strcat (result, optable[i].out);
    ret = 1;
    break;
  }
     }
 }
      else
 {
   if (opname[2] == 'a' && opname[5] == '\0')
     {
       size_t i;
       for (i = 0; i < (sizeof (optable) / sizeof ((optable)[0])); i++)
  {
    if (strlen (optable[i].in) == 3
        && memcmp (optable[i].in, opname + 2, 3) == 0)
      {
        strcat (result, "operator");
        strcat (result, optable[i].out);
        ret = 1;
        break;
      }
  }
     }
 }
    }
  else if (len >= 3
    && opname[0] == 'o'
    && opname[1] == 'p'
    && strchr (cplus_markers, opname[2]) != ((void *)0))
    {
      if (len >= 10
   && memcmp (opname + 3, "assign_", 7) == 0)
 {
   size_t i;
   for (i = 0; i < (sizeof (optable) / sizeof ((optable)[0])); i++)
     {
       len1 = len - 10;
       if ((int) strlen (optable[i].in) == len1
    && memcmp (optable[i].in, opname + 10, len1) == 0)
  {
    strcat (result, "operator");
    strcat (result, optable[i].out);
    strcat (result, "=");
    ret = 1;
    break;
  }
     }
 }
      else
 {
   size_t i;
   for (i = 0; i < (sizeof (optable) / sizeof ((optable)[0])); i++)
     {
       len1 = len - 3;
       if ((int) strlen (optable[i].in) == len1
    && memcmp (optable[i].in, opname + 3, len1) == 0)
  {
    strcat (result, "operator");
    strcat (result, optable[i].out);
    ret = 1;
    break;
  }
     }
 }
    }
  else if (len >= 5 && memcmp (opname, "type", 4) == 0
    && strchr (cplus_markers, opname[4]) != ((void *)0))
    {
      tem = opname + 5;
      if (do_type (work, &tem, &type))
 {
   strcat (result, "operator ");
   strncat (result, type.b, type.p - type.b);
   string_delete (&type);
   ret = 1;
 }
    }
  squangle_mop_up (work);
  return ret;
}
const char *
cplus_mangle_opname (opname, options)
     const char *opname;
     int options;
{
  size_t i;
  int len;
  len = strlen (opname);
  for (i = 0; i < (sizeof (optable) / sizeof ((optable)[0])); i++)
    {
      if ((int) strlen (optable[i].out) == len
   && (options & (1 << 1)) == (optable[i].flags & (1 << 1))
   && memcmp (optable[i].out, opname, len) == 0)
 return optable[i].in;
    }
  return (0);
}
enum demangling_styles
cplus_demangle_set_style (style)
     enum demangling_styles style;
{
  const struct demangler_engine *demangler = libiberty_demanglers;
  for (; demangler->demangling_style != unknown_demangling; ++demangler)
    if (style == demangler->demangling_style)
      {
 current_demangling_style = style;
 return current_demangling_style;
      }
  return unknown_demangling;
}
enum demangling_styles
cplus_demangle_name_to_style (name)
     const char *name;
{
  const struct demangler_engine *demangler = libiberty_demanglers;
  for (; demangler->demangling_style != unknown_demangling; ++demangler)
    if (strcmp (name, demangler->demangling_style_name) == 0)
      return demangler->demangling_style;
  return unknown_demangling;
}
char *
cplus_demangle (mangled, options)
     const char *mangled;
     int options;
{
  char *ret;
  struct work_stuff work[1];
  if (current_demangling_style == no_demangling)
    return xstrdup (mangled);
  memset ((char *) work, 0, sizeof (work));
  work->options = options;
  if ((work->options & ((1 << 8)|(1 << 9)|(1 << 10)|(1 << 11)|(1 << 12)|(1 << 13)|(1 << 14)|(1 << 2)|(1 << 15))) == 0)
    work->options |= (int) current_demangling_style & ((1 << 8)|(1 << 9)|(1 << 10)|(1 << 11)|(1 << 12)|(1 << 13)|(1 << 14)|(1 << 2)|(1 << 15));
  if ((((int) work->options) & (1 << 14)) || (((int) work->options) & (1 << 8)))
    {
      ret = cplus_demangle_v3 (mangled, work->options);
      if (ret || (((int) work->options) & (1 << 14)))
 return ret;
    }
  if ((((int) work->options) & (1 << 2)))
    {
      ret = java_demangle_v3 (mangled);
      if (ret)
        return ret;
    }
  if ((((int) work->options) & (1 << 15)))
    return ada_demangle(mangled,options);
  ret = internal_cplus_demangle (work, mangled);
  squangle_mop_up (work);
  return (ret);
}
static void
grow_vect (old_vect, size, min_size, element_size)
     char **old_vect;
     size_t *size;
     size_t min_size;
     int element_size;
{
  if (*size < min_size)
    {
      *size *= 2;
      if (*size < min_size)
 *size = min_size;
      *old_vect = (void *) xrealloc (*old_vect, *size * element_size);
    }
}
static char *
ada_demangle (mangled, option)
     const char *mangled;
     int option ;
{
  int i, j;
  int len0;
  const char* p;
  char *demangled = ((void *)0);
  int at_start_name;
  int changed;
  size_t demangled_size = 0;
  changed = 0;
  if (strncmp (mangled, "_ada_", 5) == 0)
    {
      mangled += 5;
      changed = 1;
    }
  if (mangled[0] == '_' || mangled[0] == '<')
    goto Suppress;
  p = strstr (mangled, "___");
  if (p == ((void *)0))
    len0 = strlen (mangled);
  else
    {
      if (p[3] == 'X')
 {
   len0 = p - mangled;
   changed = 1;
 }
      else
 goto Suppress;
    }
  grow_vect (&demangled,
      &demangled_size, 2 * len0 + 1,
      sizeof (char));
  if ((_sch_istable[((unsigned char) mangled[len0 - 1]) & 0xff] & (unsigned short)(_sch_isdigit))) {
    for (i = len0 - 2; i >= 0 && (_sch_istable[((unsigned char) mangled[i]) & 0xff] & (unsigned short)(_sch_isdigit)); i -= 1)
      ;
    if (i > 1 && mangled[i] == '_' && mangled[i - 1] == '_')
      {
 len0 = i - 1;
 changed = 1;
      }
    else if (mangled[i] == '$')
      {
 len0 = i;
 changed = 1;
      }
  }
  for (i = 0, j = 0; i < len0 && ! (_sch_istable[((unsigned char)mangled[i]) & 0xff] & (unsigned short)(_sch_isalpha));
       i += 1, j += 1)
    demangled[j] = mangled[i];
  at_start_name = 1;
  while (i < len0)
    {
      at_start_name = 0;
      if (i < len0 - 2 && mangled[i] == '_' && mangled[i + 1] == '_')
 {
   demangled[j] = '.';
   changed = at_start_name = 1;
   i += 2; j += 1;
 }
      else
 {
   demangled[j] = mangled[i];
   i += 1; j += 1;
 }
    }
  demangled[j] = '\000';
  for (i = 0; demangled[i] != '\0'; i += 1)
    if ((_sch_istable[((unsigned char)demangled[i]) & 0xff] & (unsigned short)(_sch_isupper)) || demangled[i] == ' ')
      goto Suppress;
  if (! changed)
    return ((void *)0);
  else
    return demangled;
 Suppress:
  grow_vect (&demangled,
      &demangled_size, strlen (mangled) + 3,
      sizeof (char));
  if (mangled[0] == '<')
     strcpy (demangled, mangled);
  else
    sprintf (demangled, "<%s>", mangled);
  return demangled;
}
static char *
internal_cplus_demangle (work, mangled)
     struct work_stuff *work;
     const char *mangled;
{
  string decl;
  int success = 0;
  char *demangled = ((void *)0);
  int s1, s2, s3, s4;
  s1 = work->constructor;
  s2 = work->destructor;
  s3 = work->static_type;
  s4 = work->type_quals;
  work->constructor = work->destructor = 0;
  work->type_quals = 0x0;
  work->dllimported = 0;
  if ((mangled != ((void *)0)) && (*mangled != '\0'))
    {
      string_init (&decl);
      if (((((int) work->options) & (1 << 8)) || (((int) work->options) & (1 << 9))))
 {
   success = gnu_special (work, &mangled, &decl);
 }
      if (!success)
 {
   success = demangle_prefix (work, &mangled, &decl);
 }
      if (success && (*mangled != '\0'))
 {
   success = demangle_signature (work, &mangled, &decl);
 }
      if (work->constructor == 2)
        {
          string_prepend (&decl, "global constructors keyed to ");
          work->constructor = 0;
        }
      else if (work->destructor == 2)
        {
          string_prepend (&decl, "global destructors keyed to ");
          work->destructor = 0;
        }
      else if (work->dllimported == 1)
        {
          string_prepend (&decl, "import stub for ");
          work->dllimported = 0;
        }
      demangled = mop_up (work, &decl, success);
    }
  work->constructor = s1;
  work->destructor = s2;
  work->static_type = s3;
  work->type_quals = s4;
  return demangled;
}
static void
squangle_mop_up (work)
     struct work_stuff *work;
{
  forget_B_and_K_types (work);
  if (work -> btypevec != ((void *)0))
    {
      free ((char *) work -> btypevec);
    }
  if (work -> ktypevec != ((void *)0))
    {
      free ((char *) work -> ktypevec);
    }
}
static void
work_stuff_copy_to_from (to, from)
     struct work_stuff *to;
     struct work_stuff *from;
{
  int i;
  delete_work_stuff (to);
  memcpy (to, from, sizeof (*to));
  if (from->typevec_size)
    to->typevec
      = (char **) xmalloc (from->typevec_size * sizeof (to->typevec[0]));
  for (i = 0; i < from->ntypes; i++)
    {
      int len = strlen (from->typevec[i]) + 1;
      to->typevec[i] = xmalloc (len);
      memcpy (to->typevec[i], from->typevec[i], len);
    }
  if (from->ksize)
    to->ktypevec
      = (char **) xmalloc (from->ksize * sizeof (to->ktypevec[0]));
  for (i = 0; i < from->numk; i++)
    {
      int len = strlen (from->ktypevec[i]) + 1;
      to->ktypevec[i] = xmalloc (len);
      memcpy (to->ktypevec[i], from->ktypevec[i], len);
    }
  if (from->bsize)
    to->btypevec
      = (char **) xmalloc (from->bsize * sizeof (to->btypevec[0]));
  for (i = 0; i < from->numb; i++)
    {
      int len = strlen (from->btypevec[i]) + 1;
      to->btypevec[i] = xmalloc (len);
      memcpy (to->btypevec[i], from->btypevec[i], len);
    }
  if (from->ntmpl_args)
    to->tmpl_argvec
      = (char **) xmalloc (from->ntmpl_args * sizeof (to->tmpl_argvec[0]));
  for (i = 0; i < from->ntmpl_args; i++)
    {
      int len = strlen (from->tmpl_argvec[i]) + 1;
      to->tmpl_argvec[i] = xmalloc (len);
      memcpy (to->tmpl_argvec[i], from->tmpl_argvec[i], len);
    }
  if (from->previous_argument)
    {
      to->previous_argument = (string*) xmalloc (sizeof (string));
      string_init (to->previous_argument);
      string_appends (to->previous_argument, from->previous_argument);
    }
}
static void
delete_non_B_K_work_stuff (work)
     struct work_stuff *work;
{
  forget_types (work);
  if (work -> typevec != ((void *)0))
    {
      free ((char *) work -> typevec);
      work -> typevec = ((void *)0);
      work -> typevec_size = 0;
    }
  if (work->tmpl_argvec)
    {
      int i;
      for (i = 0; i < work->ntmpl_args; i++)
 if (work->tmpl_argvec[i])
   free ((char*) work->tmpl_argvec[i]);
      free ((char*) work->tmpl_argvec);
      work->tmpl_argvec = ((void *)0);
    }
  if (work->previous_argument)
    {
      string_delete (work->previous_argument);
      free ((char*) work->previous_argument);
      work->previous_argument = ((void *)0);
    }
}
static void
delete_work_stuff (work)
     struct work_stuff *work;
{
  delete_non_B_K_work_stuff (work);
  squangle_mop_up (work);
}
static char *
mop_up (work, declp, success)
     struct work_stuff *work;
     string *declp;
     int success;
{
  char *demangled = ((void *)0);
  delete_non_B_K_work_stuff (work);
  if (!success)
    {
      string_delete (declp);
    }
  else
    {
      string_appendn (declp, "", 1);
      demangled = declp->b;
    }
  return (demangled);
}
static int
demangle_signature (work, mangled, declp)
     struct work_stuff *work;
     const char **mangled;
     string *declp;
{
  int success = 1;
  int func_done = 0;
  int expect_func = 0;
  int expect_return_type = 0;
  const char *oldmangled = ((void *)0);
  string trawname;
  string tname;
  while (success && (**mangled != '\0'))
    {
      switch (**mangled)
 {
 case 'Q':
   oldmangled = *mangled;
   success = demangle_qualified (work, mangled, declp, 1, 0);
   if (success)
     remember_type (work, oldmangled, *mangled - oldmangled);
   if ((((int) work->options) & (1 << 8)) || (((int) work->options) & (1 << 9)))
     expect_func = 1;
   oldmangled = ((void *)0);
   break;
        case 'K':
   oldmangled = *mangled;
   success = demangle_qualified (work, mangled, declp, 1, 0);
   if ((((int) work->options) & (1 << 8)) || (((int) work->options) & (1 << 9)))
     {
       expect_func = 1;
     }
   oldmangled = ((void *)0);
   break;
 case 'S':
   if (oldmangled == ((void *)0))
     {
       oldmangled = *mangled;
     }
   (*mangled)++;
   work -> static_type = 1;
   break;
 case 'C':
 case 'V':
 case 'u':
   work->type_quals |= code_for_qualifier (**mangled);
   if (oldmangled == ((void *)0))
     oldmangled = *mangled;
   (*mangled)++;
   break;
 case 'L':
   if ((((int) work->options) & (1 << 12)))
     {
       while (**mangled && (**mangled != '_'))
  (*mangled)++;
       if (!**mangled)
  success = 0;
       else
  (*mangled)++;
     }
   else
     success = 0;
   break;
 case '0': case '1': case '2': case '3': case '4':
 case '5': case '6': case '7': case '8': case '9':
   if (oldmangled == ((void *)0))
     {
       oldmangled = *mangled;
     }
          work->temp_start = -1;
   success = demangle_class (work, mangled, declp);
   if (success)
     {
       remember_type (work, oldmangled, *mangled - oldmangled);
     }
   if ((((int) work->options) & (1 << 8)) || (((int) work->options) & (1 << 9)) || (((int) work->options) & (1 << 13)))
     {
              if (**mangled != 'F')
                 expect_func = 1;
     }
   oldmangled = ((void *)0);
   break;
 case 'B':
   {
     string s;
     success = do_type (work, mangled, &s);
     if (success)
       {
  string_append (&s, ((work->options & (1 << 2)) ? "." : "::"));
  string_prepends (declp, &s);
  string_delete (&s);
       }
     oldmangled = ((void *)0);
     expect_func = 1;
   }
   break;
 case 'F':
   oldmangled = ((void *)0);
   func_done = 1;
   (*mangled)++;
   if ((((int) work->options) & (1 << 10)) || (((int) work->options) & (1 << 11)) || (((int) work->options) & (1 << 12)) || (((int) work->options) & (1 << 13)))
     {
       forget_types (work);
     }
   success = demangle_args (work, mangled, declp);
   if (success && ((((int) work->options) & (1 << 8)) || (((int) work->options) & (1 << 13))) && **mangled == '_')
     {
       ++(*mangled);
              success = do_type (work, mangled, &tname);
              string_delete (&tname);
            }
   break;
 case 't':
   string_init(&trawname);
   string_init(&tname);
   if (oldmangled == ((void *)0))
     {
       oldmangled = *mangled;
     }
   success = demangle_template (work, mangled, &tname,
           &trawname, 1, 1);
   if (success)
     {
       remember_type (work, oldmangled, *mangled - oldmangled);
     }
   string_append (&tname, ((work->options & (1 << 2)) ? "." : "::"));
   string_prepends(declp, &tname);
   if (work -> destructor & 1)
     {
       string_prepend (&trawname, "~");
       string_appends (declp, &trawname);
       work->destructor -= 1;
     }
   if ((work->constructor & 1) || (work->destructor & 1))
     {
       string_appends (declp, &trawname);
       work->constructor -= 1;
     }
   string_delete(&trawname);
   string_delete(&tname);
   oldmangled = ((void *)0);
   expect_func = 1;
   break;
 case '_':
   if (((((int) work->options) & (1 << 8)) || (((int) work->options) & (1 << 9))) && expect_return_type)
     {
       string return_type;
       (*mangled)++;
       success = do_type (work, mangled, &return_type);
       {if (!((&return_type) -> b == (&return_type) -> p)) string_append(&return_type, " ");};
       string_prepends (declp, &return_type);
       string_delete (&return_type);
       break;
     }
   else
            if ((((int) work->options) & (1 << 12)))
              {
                (*mangled)++;
                while (**mangled && (_sch_istable[((unsigned char)**mangled) & 0xff] & (unsigned short)(_sch_isdigit)))
                  (*mangled)++;
              }
            else
       success = 0;
   break;
 case 'H':
   if ((((int) work->options) & (1 << 8)) || (((int) work->options) & (1 << 9)))
     {
       success = demangle_template (work, mangled, declp, 0, 0,
        0);
       if (!(work->constructor & 1))
  expect_return_type = 1;
       (*mangled)++;
       break;
     }
   else
     {;}
 default:
   if ((((int) work->options) & (1 << 8)) || (((int) work->options) & (1 << 9)))
     {
       func_done = 1;
       success = demangle_args (work, mangled, declp);
     }
   else
     {
       success = 0;
     }
   break;
 }
      {
 if (success && expect_func)
   {
     func_done = 1;
              if ((((int) work->options) & (1 << 10)) || (((int) work->options) & (1 << 11)) || (((int) work->options) & (1 << 13)))
                {
                  forget_types (work);
                }
     success = demangle_args (work, mangled, declp);
     expect_func = 0;
   }
      }
    }
  if (success && !func_done)
    {
      if ((((int) work->options) & (1 << 8)) || (((int) work->options) & (1 << 9)))
 {
   success = demangle_args (work, mangled, declp);
 }
    }
  if (success && (work -> options & (1 << 0)))
    {
      if (work->static_type)
 string_append (declp, " static");
      if (work->type_quals != 0x0)
 {
   {if (!((declp) -> b == (declp) -> p)) string_append(declp, " ");};
   string_append (declp, qualifier_string (work->type_quals));
 }
    }
  return (success);
}
static int
demangle_template_template_parm (work, mangled, tname)
     struct work_stuff *work;
     const char **mangled;
     string *tname;
{
  int i;
  int r;
  int need_comma = 0;
  int success = 1;
  string temp;
  string_append (tname, "template <");
  if (get_count (mangled, &r))
    {
      for (i = 0; i < r; i++)
 {
   if (need_comma)
     {
       string_append (tname, ", ");
     }
     if (**mangled == 'Z')
       {
  (*mangled)++;
  string_append (tname, "class");
       }
     else if (**mangled == 'z')
       {
  (*mangled)++;
  success =
    demangle_template_template_parm (work, mangled, tname);
  if (!success)
    {
      break;
    }
       }
     else
       {
  success = do_type (work, mangled, &temp);
  if (success)
    {
      string_appends (tname, &temp);
    }
  string_delete(&temp);
  if (!success)
    {
      break;
    }
       }
   need_comma = 1;
 }
    }
  if (tname->p[-1] == '>')
    string_append (tname, " ");
  string_append (tname, "> class");
  return (success);
}
static int
demangle_expression (work, mangled, s, tk)
     struct work_stuff *work;
     const char** mangled;
     string* s;
     type_kind_t tk;
{
  int need_operator = 0;
  int success;
  success = 1;
  string_appendn (s, "(", 1);
  (*mangled)++;
  while (success && **mangled != 'W' && **mangled != '\0')
    {
      if (need_operator)
 {
   size_t i;
   size_t len;
   success = 0;
   len = strlen (*mangled);
   for (i = 0; i < (sizeof (optable) / sizeof ((optable)[0])); ++i)
     {
       size_t l = strlen (optable[i].in);
       if (l <= len
    && memcmp (optable[i].in, *mangled, l) == 0)
  {
    string_appendn (s, " ", 1);
    string_append (s, optable[i].out);
    string_appendn (s, " ", 1);
    success = 1;
    (*mangled) += l;
    break;
  }
     }
   if (!success)
     break;
 }
      else
 need_operator = 1;
      success = demangle_template_value_parm (work, mangled, s, tk);
    }
  if (**mangled != 'W')
    success = 0;
  else
    {
      string_appendn (s, ")", 1);
      (*mangled)++;
    }
  return success;
}
static int
demangle_integral_value (work, mangled, s)
     struct work_stuff *work;
     const char** mangled;
     string* s;
{
  int success;
  if (**mangled == 'E')
    success = demangle_expression (work, mangled, s, tk_integral);
  else if (**mangled == 'Q' || **mangled == 'K')
    success = demangle_qualified (work, mangled, s, 0, 1);
  else
    {
      int value1;
      int multidigit_without_leading_underscore = 0;
      int leave_following_underscore = 0;
      success = 0;
      if (**mangled == '_')
        {
   if (mangled[0][1] == 'm')
     {
       multidigit_without_leading_underscore = 1;
       string_appendn (s, "-", 1);
       (*mangled) += 2;
     }
   else
     {
       leave_following_underscore = 1;
     }
 }
      else
 {
   if (**mangled == 'm')
   {
     string_appendn (s, "-", 1);
     (*mangled)++;
   }
   multidigit_without_leading_underscore = 1;
   leave_following_underscore = 1;
 }
      if (multidigit_without_leading_underscore)
 value = consume_count (mangled);
      else
 value = consume_count_with_underscores (mangled);
      if (value != -1)
 {
   char buf[32];
   sprintf (buf, "%d", value);
   string_append (s, buf);
   if ((value > 9 || multidigit_without_leading_underscore)
       && ! leave_following_underscore
       && **mangled == '_')
     (*mangled)++;
   success = 1;
 }
      }
  return success;
}
static int
demangle_real_value (work, mangled, s)
     struct work_stuff *work;
     const char **mangled;
     string* s;
{
  if (**mangled == 'E')
    return demangle_expression (work, mangled, s, tk_real);
  if (**mangled == 'm')
    {
      string_appendn (s, "-", 1);
      (*mangled)++;
    }
  while ((_sch_istable[((unsigned char)**mangled) & 0xff] & (unsigned short)(_sch_isdigit)))
    {
      string_appendn (s, *mangled, 1);
      (*mangled)++;
    }
  if (**mangled == '.')
    {
      string_appendn (s, ".", 1);
      (*mangled)++;
      while ((_sch_istable[((unsigned char)**mangled) & 0xff] & (unsigned short)(_sch_isdigit)))
 {
   string_appendn (s, *mangled, 1);
   (*mangled)++;
 }
    }
  if (**mangled == 'e')
    {
      string_appendn (s, "e", 1);
      (*mangled)++;
      while ((_sch_istable[((unsigned char)**mangled) & 0xff] & (unsigned short)(_sch_isdigit)))
 {
   string_appendn (s, *mangled, 1);
   (*mangled)++;
 }
    }
  return 1;
}
static int
demangle_template_value_parm (work, mangled, s, tk)
     struct work_stuff *work;
     const char **mangled;
     string* s;
     type_kind_t tk;
{
  int success = 1;
  if (**mangled == 'Y')
    {
      int idx;
      (*mangled)++;
      idx = consume_count_with_underscores (mangled);
      if (idx == -1
   || (work->tmpl_argvec && idx >= work->ntmpl_args)
   || consume_count_with_underscores (mangled) == -1)
 return -1;
      if (work->tmpl_argvec)
 string_append (s, work->tmpl_argvec[idx]);
      else
 string_append_template_idx (s, idx);
    }
  else if (tk == tk_integral)
    success = demangle_integral_value (work, mangled, s);
  else if (tk == tk_char)
    {
      char tmp[2];
      int val;
      if (**mangled == 'm')
 {
   string_appendn (s, "-", 1);
   (*mangled)++;
 }
      string_appendn (s, "'", 1);
      val = consume_count(mangled);
      if (val <= 0)
 success = 0;
      else
 {
   tmp[0] = (char)val;
   tmp[1] = '\0';
   string_appendn (s, &tmp[0], 1);
   string_appendn (s, "'", 1);
 }
    }
  else if (tk == tk_bool)
    {
      int val = consume_count (mangled);
      if (val == 0)
 string_appendn (s, "false", 5);
      else if (val == 1)
 string_appendn (s, "true", 4);
      else
 success = 0;
    }
  else if (tk == tk_real)
    success = demangle_real_value (work, mangled, s);
  else if (tk == tk_pointer || tk == tk_reference)
    {
      if (**mangled == 'Q')
 success = demangle_qualified (work, mangled, s,
                         0,
                     1);
      else
 {
   int symbol_len = consume_count (mangled);
   if (symbol_len == -1)
     return -1;
   if (symbol_len == 0)
     string_appendn (s, "0", 1);
   else
     {
       char *p = xmalloc (symbol_len + 1), *q;
       strncpy (p, *mangled, symbol_len);
       p [symbol_len] = '\0';
       q = cplus_demangle (p, work->options);
       if (tk == tk_pointer)
  string_appendn (s, "&", 1);
       if (q)
  {
    string_append (s, q);
    free (q);
  }
       else
  string_append (s, p);
       free (p);
     }
   *mangled += symbol_len;
 }
    }
  return success;
}
static int
demangle_template (work, mangled, tname, trawname, is_type, remember)
     struct work_stuff *work;
     const char **mangled;
     string *tname;
     string *trawname;
     int is_type;
     int remember;
{
  int i;
  int r;
  int need_comma = 0;
  int success = 0;
  const char *start;
  int is_java_array = 0;
  string temp;
  (*mangled)++;
  if (is_type)
    {
      start = *mangled;
      if (**mangled == 'z')
 {
   int idx;
   (*mangled)++;
   (*mangled)++;
   idx = consume_count_with_underscores (mangled);
   if (idx == -1
       || (work->tmpl_argvec && idx >= work->ntmpl_args)
       || consume_count_with_underscores (mangled) == -1)
     return (0);
   if (work->tmpl_argvec)
     {
       string_append (tname, work->tmpl_argvec[idx]);
       if (trawname)
  string_append (trawname, work->tmpl_argvec[idx]);
     }
   else
     {
       string_append_template_idx (tname, idx);
       if (trawname)
  string_append_template_idx (trawname, idx);
     }
 }
      else
 {
   if ((r = consume_count (mangled)) <= 0
       || (int) strlen (*mangled) < r)
     {
       return (0);
     }
   is_java_array = (work -> options & (1 << 2))
     && strncmp (*mangled, "JArray1Z", 8) == 0;
   if (! is_java_array)
     {
       string_appendn (tname, *mangled, r);
     }
   if (trawname)
     string_appendn (trawname, *mangled, r);
   *mangled += r;
 }
    }
  if (!is_java_array)
    string_append (tname, "<");
  if (!get_count (mangled, &r))
    {
      return (0);
    }
  if (!is_type)
    {
      work->tmpl_argvec = (char**) xmalloc (r * sizeof (char *));
      work->ntmpl_args = r;
      for (i = 0; i < r; i++)
 work->tmpl_argvec[i] = 0;
    }
  for (i = 0; i < r; i++)
    {
      if (need_comma)
 {
   string_append (tname, ", ");
 }
      if (**mangled == 'Z')
 {
   (*mangled)++;
   success = do_type (work, mangled, &temp);
   if (success)
     {
       string_appends (tname, &temp);
       if (!is_type)
  {
    int len = temp.p - temp.b;
    work->tmpl_argvec[i] = xmalloc (len + 1);
    memcpy (work->tmpl_argvec[i], temp.b, len);
    work->tmpl_argvec[i][len] = '\0';
  }
     }
   string_delete(&temp);
   if (!success)
     {
       break;
     }
 }
      else if (**mangled == 'z')
 {
   int r2;
   (*mangled)++;
   success = demangle_template_template_parm (work, mangled, tname);
   if (success
       && (r2 = consume_count (mangled)) > 0
       && (int) strlen (*mangled) >= r2)
     {
       string_append (tname, " ");
       string_appendn (tname, *mangled, r2);
       if (!is_type)
  {
    int len = r2;
    work->tmpl_argvec[i] = xmalloc (len + 1);
    memcpy (work->tmpl_argvec[i], *mangled, len);
    work->tmpl_argvec[i][len] = '\0';
  }
       *mangled += r2;
     }
   if (!success)
     {
       break;
     }
 }
      else
 {
   string param;
   string* s;
   success = do_type (work, mangled, &temp);
   string_delete(&temp);
   if (!success)
     break;
   if (!is_type)
     {
       s = &param;
       string_init (s);
     }
   else
     s = tname;
   success = demangle_template_value_parm (work, mangled, s,
        (type_kind_t) success);
   if (!success)
     {
       if (!is_type)
  string_delete (s);
       success = 0;
       break;
     }
   if (!is_type)
     {
       int len = s->p - s->b;
       work->tmpl_argvec[i] = xmalloc (len + 1);
       memcpy (work->tmpl_argvec[i], s->b, len);
       work->tmpl_argvec[i][len] = '\0';
       string_appends (tname, s);
       string_delete (s);
     }
 }
      need_comma = 1;
    }
  if (is_java_array)
    {
      string_append (tname, "[]");
    }
  else
    {
      if (tname->p[-1] == '>')
 string_append (tname, " ");
      string_append (tname, ">");
    }
  if (is_type && remember)
    {
      const int bindex = register_Btype (work);
      remember_Btype (work, tname->b, ( (((tname) -> b == (tname) -> p))?0:((tname)->p - (tname)->b)), bindex);
    }
  return (success);
}
static int
arm_pt (work, mangled, n, anchor, args)
     struct work_stuff *work;
     const char *mangled;
     int n;
     const char **anchor, **args;
{
  if (((((int) work->options) & (1 << 11)) || (((int) work->options) & (1 << 12))) && (*anchor = strstr (mangled, "__pt__")))
    {
      int len;
      *args = *anchor + 6;
      len = consume_count (args);
      if (len == -1)
 return 0;
      if (*args + len == mangled + n && **args == '_')
 {
   ++*args;
   return 1;
 }
    }
  if ((((int) work->options) & (1 << 8)) || (((int) work->options) & (1 << 13)))
    {
      if ((*anchor = strstr (mangled, "__tm__"))
          || (*anchor = strstr (mangled, "__ps__"))
          || (*anchor = strstr (mangled, "__pt__")))
        {
          int len;
          *args = *anchor + 6;
          len = consume_count (args);
   if (len == -1)
     return 0;
          if (*args + len == mangled + n && **args == '_')
            {
              ++*args;
              return 1;
            }
        }
      else if ((*anchor = strstr (mangled, "__S")))
        {
    int len;
    *args = *anchor + 3;
    len = consume_count (args);
   if (len == -1)
     return 0;
    if (*args + len == mangled + n && **args == '_')
            {
              ++*args;
        return 1;
            }
        }
    }
  return 0;
}
static void
demangle_arm_hp_template (work, mangled, n, declp)
     struct work_stuff *work;
     const char **mangled;
     int n;
     string *declp;
{
  const char *p;
  const char *args;
  const char *e = *mangled + n;
  string arg;
  if ((((int) work->options) & (1 << 12)) && ((*mangled)[n] == 'X'))
    {
      char *start_spec_args = ((void *)0);
      int hold_options;
      start_spec_args = strchr (*mangled, '<');
      if (start_spec_args && (start_spec_args - *mangled < n))
        string_appendn (declp, *mangled, start_spec_args - *mangled);
      else
        string_appendn (declp, *mangled, n);
      (*mangled) += n + 1;
      string_init (&arg);
      if (work->temp_start == -1)
        work->temp_start = declp->p - declp->b;
      hold_options = work->options;
      work->options |= (1 << 0);
      string_append (declp, "<");
      while (1)
        {
          string_delete (&arg);
          switch (**mangled)
            {
              case 'T':
                (*mangled)++;
                if (!do_type (work, mangled, &arg))
                  goto hpacc_template_args_done;
                break;
              case 'U':
              case 'S':
                if (!do_hpacc_template_const_value (work, mangled, &arg))
                  goto hpacc_template_args_done;
                break;
              case 'A':
                if (!do_hpacc_template_literal (work, mangled, &arg))
                  goto hpacc_template_args_done;
                break;
              default:
                goto hpacc_template_args_done;
            }
          string_appends (declp, &arg);
          if ((**mangled == '\000') || (**mangled == '_'))
            break;
          else
            string_append (declp, ",");
        }
    hpacc_template_args_done:
      string_append (declp, ">");
      string_delete (&arg);
      if (**mangled == '_')
        (*mangled)++;
      work->options = hold_options;
      return;
    }
  else if (arm_pt (work, *mangled, n, &p, &args))
    {
      int hold_options;
      string type_str;
      string_init (&arg);
      string_appendn (declp, *mangled, p - *mangled);
      if (work->temp_start == -1)
 work->temp_start = declp->p - declp->b;
      hold_options = work->options;
      work->options |= (1 << 0);
      string_append (declp, "<");
      while (args < e) {
 string_delete (&arg);
 switch (*args)
   {
          case 'X':
            args++;
            if (!do_type (work, &args, &type_str))
       goto cfront_template_args_done;
            string_append (&arg, "(");
            string_appends (&arg, &type_str);
            string_delete (&type_str);
            string_append (&arg, ")");
            if (*args != 'L')
              goto cfront_template_args_done;
            args++;
            if (!snarf_numeric_literal (&args, &arg))
       goto cfront_template_args_done;
            break;
          case 'L':
            args++;
            if (!snarf_numeric_literal (&args, &arg))
       goto cfront_template_args_done;
            break;
          default:
            {
              const char* old_args = args;
              if (!do_type (work, &args, &arg))
                goto cfront_template_args_done;
              if (args == old_args)
  {
    work->options = hold_options;
    return;
  }
            }
   }
 string_appends (declp, &arg);
 string_append (declp, ",");
      }
    cfront_template_args_done:
      string_delete (&arg);
      if (args >= e)
 --declp->p;
      string_append (declp, ">");
      work->options = hold_options;
    }
  else if (n>10 && strncmp (*mangled, "_GLOBAL_", 8) == 0
    && (*mangled)[9] == 'N'
    && (*mangled)[8] == (*mangled)[10]
    && strchr (cplus_markers, (*mangled)[8]))
    {
      string_append (declp, "{anonymous}");
    }
  else
    {
      if (work->temp_start == -1)
 work->temp_start = 0;
      string_appendn (declp, *mangled, n);
    }
  *mangled += n;
}
static int
demangle_class_name (work, mangled, declp)
     struct work_stuff *work;
     const char **mangled;
     string *declp;
{
  int n;
  int success = 0;
  n = consume_count (mangled);
  if (n == -1)
    return 0;
  if ((int) strlen (*mangled) >= n)
    {
      demangle_arm_hp_template (work, mangled, n, declp);
      success = 1;
    }
  return (success);
}
static int
demangle_class (work, mangled, declp)
     struct work_stuff *work;
     const char **mangled;
     string *declp;
{
  int success = 0;
  int btype;
  string class_name;
  char *save_class_name_end = 0;
  string_init (&class_name);
  btype = register_Btype (work);
  if (demangle_class_name (work, mangled, &class_name))
    {
      save_class_name_end = class_name.p;
      if ((work->constructor & 1) || (work->destructor & 1))
 {
          if (work->temp_start && (work->temp_start != -1))
            {
              class_name.p = class_name.b + work->temp_start;
            }
   string_prepends (declp, &class_name);
   if (work -> destructor & 1)
     {
       string_prepend (declp, "~");
              work -> destructor -= 1;
     }
   else
     {
       work -> constructor -= 1;
     }
 }
      class_name.p = save_class_name_end;
      remember_Ktype (work, class_name.b, ( (((&class_name) -> b == (&class_name) -> p))?0:((&class_name)->p - (&class_name)->b)));
      remember_Btype (work, class_name.b, ( (((&class_name) -> b == (&class_name) -> p))?0:((&class_name)->p - (&class_name)->b)), btype);
      string_prepend (declp, ((work->options & (1 << 2)) ? "." : "::"));
      string_prepends (declp, &class_name);
      success = 1;
    }
  string_delete (&class_name);
  return (success);
}
static int
iterate_demangle_function (work, mangled, declp, scan)
     struct work_stuff *work;
     const char **mangled;
     string *declp;
     const char *scan;
{
  const char *mangle_init = *mangled;
  int success = 0;
  string decl_init;
  struct work_stuff work_init;
  if (*(scan + 2) == '\0')
    return 0;
  if ((((int) work->options) & (1 << 11)) || (((int) work->options) & (1 << 10)) || (((int) work->options) & (1 << 12)) || (((int) work->options) & (1 << 13))
      || strstr (scan + 2, "__") == ((void *)0))
    {
      demangle_function_name (work, mangled, declp, scan);
      return 1;
    }
  string_init (&decl_init);
  string_appends (&decl_init, declp);
  memset (&work_init, 0, sizeof work_init);
  work_stuff_copy_to_from (&work_init, work);
  while (scan[2])
    {
      demangle_function_name (work, mangled, declp, scan);
      success = demangle_signature (work, mangled, declp);
      if (success)
 break;
      *mangled = mangle_init;
      string_clear (declp);
      string_appends (declp, &decl_init);
      work_stuff_copy_to_from (work, &work_init);
      scan += 2;
      while (*scan && (scan[0] != '_' || scan[1] != '_'))
 scan++;
      while (*scan && *scan == '_')
 scan++;
      scan -= 2;
    }
  delete_work_stuff (&work_init);
  string_delete (&decl_init);
  return success;
}
static int
demangle_prefix (work, mangled, declp)
     struct work_stuff *work;
     const char **mangled;
     string *declp;
{
  int success = 1;
  const char *scan;
  int i;
  if (strlen(*mangled) > 6
      && (strncmp(*mangled, "_imp__", 6) == 0
          || strncmp(*mangled, "__imp_", 6) == 0))
    {
      (*mangled) += 6;
      work->dllimported = 1;
    }
  else if (strlen(*mangled) >= 11 && strncmp(*mangled, "_GLOBAL_", 8) == 0)
    {
      char *marker = strchr (cplus_markers, (*mangled)[8]);
      if (marker != ((void *)0) && *marker == (*mangled)[10])
 {
   if ((*mangled)[9] == 'D')
     {
       (*mangled) += 11;
       work->destructor = 2;
       if (gnu_special (work, mangled, declp))
  return success;
     }
   else if ((*mangled)[9] == 'I')
     {
       (*mangled) += 11;
       work->constructor = 2;
       if (gnu_special (work, mangled, declp))
  return success;
     }
 }
    }
  else if (((((int) work->options) & (1 << 11)) || (((int) work->options) & (1 << 12)) || (((int) work->options) & (1 << 13))) && strncmp(*mangled, "__std__", 7) == 0)
    {
      (*mangled) += 7;
      work->destructor = 2;
    }
  else if (((((int) work->options) & (1 << 11)) || (((int) work->options) & (1 << 12)) || (((int) work->options) & (1 << 13))) && strncmp(*mangled, "__sti__", 7) == 0)
    {
      (*mangled) += 7;
      work->constructor = 2;
    }
  {
    scan = *mangled;
    do {
      scan = strchr (scan, '_');
    } while (scan != ((void *)0) && *++scan != '_');
    if (scan != ((void *)0)) --scan;
  }
  if (scan != ((void *)0))
    {
      i = strspn (scan, "_");
      if (i > 2)
 {
   scan += (i - 2);
 }
    }
  if (scan == ((void *)0))
    {
      success = 0;
    }
  else if (work -> static_type)
    {
      if (!(_sch_istable[((unsigned char)scan[0]) & 0xff] & (unsigned short)(_sch_isdigit)) && (scan[0] != 't'))
 {
   success = 0;
 }
    }
  else if ((scan == *mangled)
    && ((_sch_istable[((unsigned char)scan[2]) & 0xff] & (unsigned short)(_sch_isdigit)) || (scan[2] == 'Q')
        || (scan[2] == 't') || (scan[2] == 'K') || (scan[2] == 'H')))
    {
      if (((((int) work->options) & (1 << 10)) || (((int) work->options) & (1 << 11)) || (((int) work->options) & (1 << 12)))
   && (_sch_istable[((unsigned char)scan[2]) & 0xff] & (unsigned short)(_sch_isdigit)))
 {
   *mangled = scan + 2;
   consume_count (mangled);
   string_append (declp, *mangled);
   *mangled += strlen (*mangled);
   success = 1;
 }
      else
 {
   if (!((((int) work->options) & (1 << 10)) || (((int) work->options) & (1 << 11)) || (((int) work->options) & (1 << 12)) || (((int) work->options) & (1 << 13))))
     work -> constructor += 1;
   *mangled = scan + 2;
 }
    }
  else if ((((int) work->options) & (1 << 11)) && scan[2] == 'p' && scan[3] == 't')
    {
      success = 1;
      demangle_arm_hp_template (work, mangled, strlen (*mangled), declp);
    }
  else if ((((int) work->options) & (1 << 13)) && ((scan[2] == 't' && scan[3] == 'm')
                              || (scan[2] == 'p' && scan[3] == 's')
                              || (scan[2] == 'p' && scan[3] == 't')))
    {
      success = 1;
      demangle_arm_hp_template (work, mangled, strlen (*mangled), declp);
    }
  else if ((scan == *mangled) && !(_sch_istable[((unsigned char)scan[2]) & 0xff] & (unsigned short)(_sch_isdigit))
    && (scan[2] != 't'))
    {
      if (!((((int) work->options) & (1 << 11)) || (((int) work->options) & (1 << 10)) || (((int) work->options) & (1 << 12)) || (((int) work->options) & (1 << 13)))
   || (arm_special (mangled, declp) == 0))
 {
   while (*scan == '_')
     {
       scan++;
     }
   if ((scan = strstr (scan, "__")) == ((void *)0) || (*(scan + 2) == '\0'))
     {
       success = 0;
     }
   else
     return iterate_demangle_function (work, mangled, declp, scan);
 }
    }
  else if (*(scan + 2) != '\0')
    {
      return iterate_demangle_function (work, mangled, declp, scan);
    }
  else
    {
      success = 0;
    }
  if (!success && (work->constructor == 2 || work->destructor == 2))
    {
      string_append (declp, *mangled);
      *mangled += strlen (*mangled);
      success = 1;
    }
  return (success);
}
static int
gnu_special (work, mangled, declp)
     struct work_stuff *work;
     const char **mangled;
     string *declp;
{
  int n;
  int success = 1;
  const char *p;
  if ((*mangled)[0] == '_'
      && strchr (cplus_markers, (*mangled)[1]) != ((void *)0)
      && (*mangled)[2] == '_')
    {
      (*mangled) += 3;
      work -> destructor += 1;
    }
  else if ((*mangled)[0] == '_'
    && (((*mangled)[1] == '_'
  && (*mangled)[2] == 'v'
  && (*mangled)[3] == 't'
  && (*mangled)[4] == '_')
        || ((*mangled)[1] == 'v'
     && (*mangled)[2] == 't'
     && strchr (cplus_markers, (*mangled)[3]) != ((void *)0))))
    {
      if ((*mangled)[2] == 'v')
 (*mangled) += 5;
      else
 (*mangled) += 4;
      while (**mangled != '\0')
 {
   switch (**mangled)
     {
     case 'Q':
     case 'K':
       success = demangle_qualified (work, mangled, declp, 0, 1);
       break;
     case 't':
       success = demangle_template (work, mangled, declp, 0, 1,
        1);
       break;
     default:
       if ((_sch_istable[((unsigned char)*mangled[0]) & 0xff] & (unsigned short)(_sch_isdigit)))
  {
    n = consume_count(mangled);
    if (n > (int) strlen (*mangled))
      {
        success = 1;
        break;
      }
  }
       else
  {
    n = strcspn (*mangled, cplus_markers);
  }
       string_appendn (declp, *mangled, n);
       (*mangled) += n;
     }
   p = strpbrk (*mangled, cplus_markers);
   if (success && ((p == ((void *)0)) || (p == *mangled)))
     {
       if (p != ((void *)0))
  {
    string_append (declp, ((work->options & (1 << 2)) ? "." : "::"));
    (*mangled)++;
  }
     }
   else
     {
       success = 0;
       break;
     }
 }
      if (success)
 string_append (declp, " virtual table");
    }
  else if ((*mangled)[0] == '_'
    && (strchr("0123456789Qt", (*mangled)[1]) != ((void *)0))
    && (p = strpbrk (*mangled, cplus_markers)) != ((void *)0))
    {
      (*mangled)++;
      switch (**mangled)
 {
 case 'Q':
 case 'K':
   success = demangle_qualified (work, mangled, declp, 0, 1);
   break;
 case 't':
   success = demangle_template (work, mangled, declp, 0, 1, 1);
   break;
 default:
   n = consume_count (mangled);
   if (n < 0 || n > (long) strlen (*mangled))
     {
       success = 0;
       break;
     }
   if (n > 10 && strncmp (*mangled, "_GLOBAL_", 8) == 0
       && (*mangled)[9] == 'N'
       && (*mangled)[8] == (*mangled)[10]
       && strchr (cplus_markers, (*mangled)[8]))
     {
       string_append (declp, "{anonymous}");
       (*mangled) += n;
       p = strpbrk (*mangled, cplus_markers);
       break;
     }
   string_appendn (declp, *mangled, n);
   (*mangled) += n;
 }
      if (success && (p == *mangled))
 {
   (*mangled)++;
   string_append (declp, ((work->options & (1 << 2)) ? "." : "::"));
   n = strlen (*mangled);
   string_appendn (declp, *mangled, n);
   (*mangled) += n;
 }
      else
 {
   success = 0;
 }
    }
  else if (strncmp (*mangled, "__thunk_", 8) == 0)
    {
      int delta;
      (*mangled) += 8;
      delta = consume_count (mangled);
      if (delta == -1)
 success = 0;
      else
 {
   char *method = internal_cplus_demangle (work, ++*mangled);
   if (method)
     {
       char buf[50];
       sprintf (buf, "virtual function thunk (delta:%d) for ", -delta);
       string_append (declp, buf);
       string_append (declp, method);
       free (method);
       n = strlen (*mangled);
       (*mangled) += n;
     }
   else
     {
       success = 0;
     }
 }
    }
  else if (strncmp (*mangled, "__t", 3) == 0
    && ((*mangled)[3] == 'i' || (*mangled)[3] == 'f'))
    {
      p = (*mangled)[3] == 'i' ? " type_info node" : " type_info function";
      (*mangled) += 4;
      switch (**mangled)
 {
 case 'Q':
 case 'K':
   success = demangle_qualified (work, mangled, declp, 0, 1);
   break;
 case 't':
   success = demangle_template (work, mangled, declp, 0, 1, 1);
   break;
 default:
   success = do_type (work, mangled, declp);
   break;
 }
      if (success && **mangled != '\0')
 success = 0;
      if (success)
 string_append (declp, p);
    }
  else
    {
      success = 0;
    }
  return (success);
}
static void
recursively_demangle(work, mangled, result, namelength)
     struct work_stuff *work;
     const char **mangled;
     string *result;
     int namelength;
{
  char * recurse = (char *)((void *)0);
  char * recurse_dem = (char *)((void *)0);
  recurse = (char *) xmalloc (namelength + 1);
  memcpy (recurse, *mangled, namelength);
  recurse[namelength] = '\000';
  recurse_dem = cplus_demangle (recurse, work->options);
  if (recurse_dem)
    {
      string_append (result, recurse_dem);
      free (recurse_dem);
    }
  else
    {
      string_appendn (result, *mangled, namelength);
    }
  free (recurse);
  *mangled += namelength;
}
static int
arm_special (mangled, declp)
     const char **mangled;
     string *declp;
{
  int n;
  int success = 1;
  const char *scan;
  if (strncmp (*mangled, "__vtbl__", 8) == 0)
    {
      scan = *mangled + 8;
      while (*scan != '\0')
        {
          n = consume_count (&scan);
          if (n == -1)
     {
       return (0);
     }
          scan += n;
          if (scan[0] == '_' && scan[1] == '_')
     {
       scan += 2;
     }
        }
      (*mangled) += 8;
      while (**mangled != '\0')
 {
   n = consume_count (mangled);
          if (n == -1
       || n > (long) strlen (*mangled))
     return 0;
   string_prependn (declp, *mangled, n);
   (*mangled) += n;
   if ((*mangled)[0] == '_' && (*mangled)[1] == '_')
     {
       string_prepend (declp, "::");
       (*mangled) += 2;
     }
 }
      string_append (declp, " virtual table");
    }
  else
    {
      success = 0;
    }
  return (success);
}
static int
demangle_qualified (work, mangled, result, isfuncname, append)
     struct work_stuff *work;
     const char **mangled;
     string *result;
     int isfuncname;
     int append;
{
  int qualifiers = 0;
  int success = 1;
  char num[2];
  string temp;
  string last_name;
  int bindex = register_Btype (work);
  isfuncname = (isfuncname
  && ((work->constructor & 1) || (work->destructor & 1)));
  string_init (&temp);
  string_init (&last_name);
  if ((*mangled)[0] == 'K')
    {
      int idx;
      (*mangled)++;
      idx = consume_count_with_underscores (mangled);
      if (idx == -1 || idx >= work -> numk)
        success = 0;
      else
        string_append (&temp, work -> ktypevec[idx]);
    }
  else
    switch ((*mangled)[1])
    {
    case '_':
      (*mangled)++;
      qualifiers = consume_count_with_underscores (mangled);
      if (qualifiers == -1)
 success = 0;
      break;
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      num[0] = (*mangled)[1];
      num[1] = '\0';
      qualifiers = atoi (num);
      if ((*mangled)[2] == '_')
 {
   (*mangled)++;
 }
      (*mangled) += 2;
      break;
    case '0':
    default:
      success = 0;
    }
  if (!success)
    return success;
  while (qualifiers-- > 0)
    {
      int remember_K = 1;
      string_clear (&last_name);
      if (*mangled[0] == '_')
 (*mangled)++;
      if (*mangled[0] == 't')
 {
   success = demangle_template(work, mangled, &temp,
          &last_name, 1, 0);
   if (!success)
     break;
 }
      else if (*mangled[0] == 'K')
 {
          int idx;
          (*mangled)++;
          idx = consume_count_with_underscores (mangled);
          if (idx == -1 || idx >= work->numk)
            success = 0;
          else
            string_append (&temp, work->ktypevec[idx]);
          remember_K = 0;
   if (!success) break;
 }
      else
 {
   if ((((int) work->options) & (1 << 13)))
            {
       int namelength;
       namelength = consume_count (mangled);
       if (namelength == -1)
  {
    success = 0;
    break;
  }
        recursively_demangle(work, mangled, &temp, namelength);
            }
          else
            {
              string_delete (&last_name);
              success = do_type (work, mangled, &last_name);
              if (!success)
                break;
              string_appends (&temp, &last_name);
            }
 }
      if (remember_K)
 remember_Ktype (work, temp.b, ( (((&temp) -> b == (&temp) -> p))?0:((&temp)->p - (&temp)->b)));
      if (qualifiers > 0)
 string_append (&temp, ((work->options & (1 << 2)) ? "." : "::"));
    }
  remember_Btype (work, temp.b, ( (((&temp) -> b == (&temp) -> p))?0:((&temp)->p - (&temp)->b)), bindex);
  if (isfuncname)
    {
      string_append (&temp, ((work->options & (1 << 2)) ? "." : "::"));
      if (work -> destructor & 1)
 string_append (&temp, "~");
      string_appends (&temp, &last_name);
    }
  if (append)
    string_appends (result, &temp);
  else
    {
      if (!((result) -> b == (result) -> p))
 string_append (&temp, ((work->options & (1 << 2)) ? "." : "::"));
      string_prepends (result, &temp);
    }
  string_delete (&last_name);
  string_delete (&temp);
  return (success);
}
static int
get_count (type, count)
     const char **type;
     int *count;
{
  const char *p;
  int n;
  if (!(_sch_istable[((unsigned char)**type) & 0xff] & (unsigned short)(_sch_isdigit)))
    return (0);
  else
    {
      *count = **type - '0';
      (*type)++;
      if ((_sch_istable[((unsigned char)**type) & 0xff] & (unsigned short)(_sch_isdigit)))
 {
   p = *type;
   n = *count;
   do
     {
       n *= 10;
       n += *p - '0';
       p++;
     }
   while ((_sch_istable[((unsigned char)*p) & 0xff] & (unsigned short)(_sch_isdigit)));
   if (*p == '_')
     {
       *type = p + 1;
       *count = n;
     }
 }
    }
  return (1);
}
static int
do_type (work, mangled, result)
     struct work_stuff *work;
     const char **mangled;
     string *result;
{
  int n;
  int done;
  int success;
  string decl;
  const char *remembered_type;
  int type_quals;
  type_kind_t tk = tk_none;
  string_init (&decl);
  string_init (result);
  done = 0;
  success = 1;
  while (success && !done)
    {
      int member;
      switch (**mangled)
 {
 case 'P':
 case 'p':
   (*mangled)++;
   if (! (work -> options & (1 << 2)))
     string_prepend (&decl, "*");
   if (tk == tk_none)
     tk = tk_pointer;
   break;
 case 'R':
   (*mangled)++;
   string_prepend (&decl, "&");
   if (tk == tk_none)
     tk = tk_reference;
   break;
 case 'A':
   {
     ++(*mangled);
     if (!((&decl) -> b == (&decl) -> p)
  && (decl.b[0] == '*' || decl.b[0] == '&'))
       {
  string_prepend (&decl, "(");
  string_append (&decl, ")");
       }
     string_append (&decl, "[");
     if (**mangled != '_')
       success = demangle_template_value_parm (work, mangled, &decl,
            tk_integral);
     if (**mangled == '_')
       ++(*mangled);
     string_append (&decl, "]");
     break;
   }
 case 'T':
   (*mangled)++;
   if (!get_count (mangled, &n) || n >= work -> ntypes)
     {
       success = 0;
     }
   else
     {
       remembered_type = work -> typevec[n];
       mangled = &remembered_type;
     }
   break;
 case 'F':
   (*mangled)++;
     if (!((&decl) -> b == (&decl) -> p)
  && (decl.b[0] == '*' || decl.b[0] == '&'))
     {
       string_prepend (&decl, "(");
       string_append (&decl, ")");
     }
   if (!demangle_nested_args (work, mangled, &decl)
       || (**mangled != '_' && **mangled != '\0'))
     {
       success = 0;
       break;
     }
   if (success && (**mangled == '_'))
     (*mangled)++;
   break;
 case 'M':
 case 'O':
   {
     type_quals = 0x0;
     member = **mangled == 'M';
     (*mangled)++;
     string_append (&decl, ")");
     if (**mangled != 'Q')
       string_prepend (&decl, ((work->options & (1 << 2)) ? "." : "::"));
     if ((_sch_istable[((unsigned char)**mangled) & 0xff] & (unsigned short)(_sch_isdigit)))
       {
  n = consume_count (mangled);
  if (n == -1
      || (int) strlen (*mangled) < n)
    {
      success = 0;
      break;
    }
  string_prependn (&decl, *mangled, n);
  *mangled += n;
       }
     else if (**mangled == 'X' || **mangled == 'Y')
       {
  string temp;
  do_type (work, mangled, &temp);
  string_prepends (&decl, &temp);
  string_delete (&temp);
       }
     else if (**mangled == 't')
       {
  string temp;
  string_init (&temp);
  success = demangle_template (work, mangled, &temp,
          ((void *)0), 1, 1);
  if (success)
    {
      string_prependn (&decl, temp.b, temp.p - temp.b);
      string_delete (&temp);
    }
  else
    break;
       }
     else if (**mangled == 'Q')
       {
  success = demangle_qualified (work, mangled, &decl,
                         0,
                      0);
  if (!success)
    break;
       }
     else
       {
  success = 0;
  break;
       }
     string_prepend (&decl, "(");
     if (member)
       {
  switch (**mangled)
    {
    case 'C':
    case 'V':
    case 'u':
      type_quals |= code_for_qualifier (**mangled);
      (*mangled)++;
      break;
    default:
      break;
    }
  if (*(*mangled)++ != 'F')
    {
      success = 0;
      break;
    }
       }
     if ((member && !demangle_nested_args (work, mangled, &decl))
  || **mangled != '_')
       {
  success = 0;
  break;
       }
     (*mangled)++;
     if (! (work -> options & (1 << 1)))
       {
  break;
       }
     if (type_quals != 0x0)
       {
  {if (!((&decl) -> b == (&decl) -> p)) string_append(&decl, " ");};
  string_append (&decl, qualifier_string (type_quals));
       }
     break;
   }
        case 'G':
   (*mangled)++;
   break;
 case 'C':
 case 'V':
 case 'u':
   if ((work -> options & (1 << 1)))
     {
       if (!((&decl) -> b == (&decl) -> p))
  string_prepend (&decl, " ");
       string_prepend (&decl, demangle_qualifier (**mangled));
     }
   (*mangled)++;
   break;
 default:
   done = 1;
   break;
 }
    }
  if (success) switch (**mangled)
    {
    case 'Q':
    case 'K':
      {
        success = demangle_qualified (work, mangled, result, 0, 1);
        break;
      }
    case 'B':
      (*mangled)++;
      if (!get_count (mangled, &n) || n >= work -> numb)
 success = 0;
      else
 string_append (result, work->btypevec[n]);
      break;
    case 'X':
    case 'Y':
      {
 int idx;
 (*mangled)++;
 idx = consume_count_with_underscores (mangled);
 if (idx == -1
     || (work->tmpl_argvec && idx >= work->ntmpl_args)
     || consume_count_with_underscores (mangled) == -1)
   {
     success = 0;
     break;
   }
 if (work->tmpl_argvec)
   string_append (result, work->tmpl_argvec[idx]);
 else
   string_append_template_idx (result, idx);
 success = 1;
      }
    break;
    default:
      success = demangle_fund_type (work, mangled, result);
      if (tk == tk_none)
 tk = (type_kind_t) success;
      break;
    }
  if (success)
    {
      if (!((&decl) -> b == (&decl) -> p))
 {
   string_append (result, " ");
   string_appends (result, &decl);
 }
    }
  else
    string_delete (result);
  string_delete (&decl);
  if (success)
    return (int) ((tk == tk_none) ? tk_integral : tk);
  else
    return 0;
}
static int
demangle_fund_type (work, mangled, result)
     struct work_stuff *work;
     const char **mangled;
     string *result;
{
  int done = 0;
  int success = 1;
  char buf[10];
  unsigned int dec = 0;
  type_kind_t tk = tk_integral;
  while (!done)
    {
      switch (**mangled)
 {
 case 'C':
 case 'V':
 case 'u':
   if ((work -> options & (1 << 1)))
     {
              if (!((result) -> b == (result) -> p))
                string_prepend (result, " ");
       string_prepend (result, demangle_qualifier (**mangled));
     }
   (*mangled)++;
   break;
 case 'U':
   (*mangled)++;
   {if (!((result) -> b == (result) -> p)) string_append(result, " ");};
   string_append (result, "unsigned");
   break;
 case 'S':
   (*mangled)++;
   {if (!((result) -> b == (result) -> p)) string_append(result, " ");};
   string_append (result, "signed");
   break;
 case 'J':
   (*mangled)++;
   {if (!((result) -> b == (result) -> p)) string_append(result, " ");};
   string_append (result, "__complex");
   break;
 default:
   done = 1;
   break;
 }
    }
  switch (**mangled)
    {
    case '\0':
    case '_':
      break;
    case 'v':
      (*mangled)++;
      {if (!((result) -> b == (result) -> p)) string_append(result, " ");};
      string_append (result, "void");
      break;
    case 'x':
      (*mangled)++;
      {if (!((result) -> b == (result) -> p)) string_append(result, " ");};
      string_append (result, "long long");
      break;
    case 'l':
      (*mangled)++;
      {if (!((result) -> b == (result) -> p)) string_append(result, " ");};
      string_append (result, "long");
      break;
    case 'i':
      (*mangled)++;
      {if (!((result) -> b == (result) -> p)) string_append(result, " ");};
      string_append (result, "int");
      break;
    case 's':
      (*mangled)++;
      {if (!((result) -> b == (result) -> p)) string_append(result, " ");};
      string_append (result, "short");
      break;
    case 'b':
      (*mangled)++;
      {if (!((result) -> b == (result) -> p)) string_append(result, " ");};
      string_append (result, "bool");
      tk = tk_bool;
      break;
    case 'c':
      (*mangled)++;
      {if (!((result) -> b == (result) -> p)) string_append(result, " ");};
      string_append (result, "char");
      tk = tk_char;
      break;
    case 'w':
      (*mangled)++;
      {if (!((result) -> b == (result) -> p)) string_append(result, " ");};
      string_append (result, "wchar_t");
      tk = tk_char;
      break;
    case 'r':
      (*mangled)++;
      {if (!((result) -> b == (result) -> p)) string_append(result, " ");};
      string_append (result, "long double");
      tk = tk_real;
      break;
    case 'd':
      (*mangled)++;
      {if (!((result) -> b == (result) -> p)) string_append(result, " ");};
      string_append (result, "double");
      tk = tk_real;
      break;
    case 'f':
      (*mangled)++;
      {if (!((result) -> b == (result) -> p)) string_append(result, " ");};
      string_append (result, "float");
      tk = tk_real;
      break;
    case 'G':
      (*mangled)++;
      if (!(_sch_istable[((unsigned char)**mangled) & 0xff] & (unsigned short)(_sch_isdigit)))
 {
   success = 0;
   break;
 }
    case 'I':
      (*mangled)++;
      if (**mangled == '_')
 {
   int i;
   (*mangled)++;
   for (i = 0;
        i < (long) sizeof (buf) - 1 && **mangled && **mangled != '_';
        (*mangled)++, i++)
     buf[i] = **mangled;
   if (**mangled != '_')
     {
       success = 0;
       break;
     }
   buf[i] = '\0';
   (*mangled)++;
 }
      else
 {
   strncpy (buf, *mangled, 2);
   buf[2] = '\0';
   *mangled += (((strlen (*mangled)) < (2)) ? (strlen (*mangled)) : (2));
 }
      sscanf (buf, "%x", &dec);
      sprintf (buf, "int%u_t", dec);
      {if (!((result) -> b == (result) -> p)) string_append(result, " ");};
      string_append (result, buf);
      break;
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      {
        int bindex = register_Btype (work);
        string btype;
        string_init (&btype);
        if (demangle_class_name (work, mangled, &btype)) {
          remember_Btype (work, btype.b, ( (((&btype) -> b == (&btype) -> p))?0:((&btype)->p - (&btype)->b)), bindex);
          {if (!((result) -> b == (result) -> p)) string_append(result, " ");};
          string_appends (result, &btype);
        }
        else
          success = 0;
        string_delete (&btype);
        break;
      }
    case 't':
      {
        string btype;
        string_init (&btype);
        success = demangle_template (work, mangled, &btype, 0, 1, 1);
        string_appends (result, &btype);
        string_delete (&btype);
        break;
      }
    default:
      success = 0;
      break;
    }
  return success ? ((int) tk) : 0;
}
static int
do_hpacc_template_const_value (work, mangled, result)
     struct work_stuff *work ;
     const char **mangled;
     string *result;
{
  int unsigned_const;
  if (**mangled != 'U' && **mangled != 'S')
    return 0;
  unsigned_const = (**mangled == 'U');
  (*mangled)++;
  switch (**mangled)
    {
      case 'N':
        string_append (result, "-");
      case 'P':
        (*mangled)++;
        break;
      case 'M':
        string_append (result, "-2147483648");
        (*mangled)++;
        return 1;
      default:
        return 0;
    }
  if (!((_sch_istable[((unsigned char)**mangled) & 0xff] & (unsigned short)(_sch_isdigit))))
    return 0;
  while ((_sch_istable[((unsigned char)**mangled) & 0xff] & (unsigned short)(_sch_isdigit)))
    {
      char_str[0] = **mangled;
      string_append (result, char_str);
      (*mangled)++;
    }
  if (unsigned_const)
    string_append (result, "U");
  return 1;
}
static int
do_hpacc_template_literal (work, mangled, result)
     struct work_stuff *work;
     const char **mangled;
     string *result;
{
  int literal_len = 0;
  char * recurse;
  char * recurse_dem;
  if (**mangled != 'A')
    return 0;
  (*mangled)++;
  literal_len = consume_count (mangled);
  if (literal_len <= 0)
    return 0;
  string_append (result, "&");
  recurse = (char *) xmalloc (literal_len + 1);
  memcpy (recurse, *mangled, literal_len);
  recurse[literal_len] = '\000';
  recurse_dem = cplus_demangle (recurse, work->options);
  if (recurse_dem)
    {
      string_append (result, recurse_dem);
      free (recurse_dem);
    }
  else
    {
      string_appendn (result, *mangled, literal_len);
    }
  (*mangled) += literal_len;
  free (recurse);
  return 1;
}
static int
snarf_numeric_literal (args, arg)
     const char ** args;
     string * arg;
{
  if (**args == '-')
    {
      char_str[0] = '-';
      string_append (arg, char_str);
      (*args)++;
    }
  else if (**args == '+')
    (*args)++;
  if (!(_sch_istable[((unsigned char)**args) & 0xff] & (unsigned short)(_sch_isdigit)))
    return 0;
  while ((_sch_istable[((unsigned char)**args) & 0xff] & (unsigned short)(_sch_isdigit)))
    {
      char_str[0] = **args;
      string_append (arg, char_str);
      (*args)++;
    }
  return 1;
}
static int
do_arg (work, mangled, result)
     struct work_stuff *work;
     const char **mangled;
     string *result;
{
  const char *start = *mangled;
  string_init (result);
  if (work->nrepeats > 0)
    {
      --work->nrepeats;
      if (work->previous_argument == 0)
 return 0;
      string_appends (result, work->previous_argument);
      return 1;
    }
  if (**mangled == 'n')
    {
      (*mangled)++;
      work->nrepeats = consume_count(mangled);
      if (work->nrepeats <= 0)
 return 0;
      if (work->nrepeats > 9)
 {
   if (**mangled != '_')
     return 0;
   else
     (*mangled)++;
 }
      return do_arg (work, mangled, result);
    }
  if (work->previous_argument)
    string_delete (work->previous_argument);
  else
    work->previous_argument = (string*) xmalloc (sizeof (string));
  if (!do_type (work, mangled, work->previous_argument))
    return 0;
  string_appends (result, work->previous_argument);
  remember_type (work, start, *mangled - start);
  return 1;
}
static void
remember_type (work, start, len)
     struct work_stuff *work;
     const char *start;
     int len;
{
  char *tem;
  if (work->forgetting_types)
    return;
  if (work -> ntypes >= work -> typevec_size)
    {
      if (work -> typevec_size == 0)
 {
   work -> typevec_size = 3;
   work -> typevec
     = (char **) xmalloc (sizeof (char *) * work -> typevec_size);
 }
      else
 {
   work -> typevec_size *= 2;
   work -> typevec
     = (char **) xrealloc ((char *)work -> typevec,
      sizeof (char *) * work -> typevec_size);
 }
    }
  tem = xmalloc (len + 1);
  memcpy (tem, start, len);
  tem[len] = '\0';
  work -> typevec[work -> ntypes++] = tem;
}
static void
remember_Ktype (work, start, len)
     struct work_stuff *work;
     const char *start;
     int len;
{
  char *tem;
  if (work -> numk >= work -> ksize)
    {
      if (work -> ksize == 0)
 {
   work -> ksize = 5;
   work -> ktypevec
     = (char **) xmalloc (sizeof (char *) * work -> ksize);
 }
      else
 {
   work -> ksize *= 2;
   work -> ktypevec
     = (char **) xrealloc ((char *)work -> ktypevec,
      sizeof (char *) * work -> ksize);
 }
    }
  tem = xmalloc (len + 1);
  memcpy (tem, start, len);
  tem[len] = '\0';
  work -> ktypevec[work -> numk++] = tem;
}
static int
register_Btype (work)
     struct work_stuff *work;
{
  int ret;
  if (work -> numb >= work -> bsize)
    {
      if (work -> bsize == 0)
 {
   work -> bsize = 5;
   work -> btypevec
     = (char **) xmalloc (sizeof (char *) * work -> bsize);
 }
      else
 {
   work -> bsize *= 2;
   work -> btypevec
     = (char **) xrealloc ((char *)work -> btypevec,
      sizeof (char *) * work -> bsize);
 }
    }
  ret = work -> numb++;
  work -> btypevec[ret] = ((void *)0);
  return(ret);
}
static void
remember_Btype (work, start, len, index)
     struct work_stuff *work;
     const char *start;
     int len, index;
{
  char *tem;
  tem = xmalloc (len + 1);
  memcpy (tem, start, len);
  tem[len] = '\0';
  work -> btypevec[index] = tem;
}
static void
forget_B_and_K_types (work)
     struct work_stuff *work;
{
  int i;
  while (work -> numk > 0)
    {
      i = --(work -> numk);
      if (work -> ktypevec[i] != ((void *)0))
 {
   free (work -> ktypevec[i]);
   work -> ktypevec[i] = ((void *)0);
 }
    }
  while (work -> numb > 0)
    {
      i = --(work -> numb);
      if (work -> btypevec[i] != ((void *)0))
 {
   free (work -> btypevec[i]);
   work -> btypevec[i] = ((void *)0);
 }
    }
}
static void
forget_types (work)
     struct work_stuff *work;
{
  int i;
  while (work -> ntypes > 0)
    {
      i = --(work -> ntypes);
      if (work -> typevec[i] != ((void *)0))
 {
   free (work -> typevec[i]);
   work -> typevec[i] = ((void *)0);
 }
    }
}
static int
demangle_args (work, mangled, declp)
     struct work_stuff *work;
     const char **mangled;
     string *declp;
{
  string arg;
  int need_comma = 0;
  int r;
  int t;
  const char *tem;
  char temptype;
  if ((work -> options & (1 << 0)))
    {
      string_append (declp, "(");
      if (**mangled == '\0')
 {
   string_append (declp, "void");
 }
    }
  while ((**mangled != '_' && **mangled != '\0' && **mangled != 'e')
  || work->nrepeats > 0)
    {
      if ((**mangled == 'N') || (**mangled == 'T'))
 {
   temptype = *(*mangled)++;
   if (temptype == 'N')
     {
       if (!get_count (mangled, &r))
  {
    return (0);
  }
     }
   else
     {
       r = 1;
     }
          if (((((int) work->options) & (1 << 12)) || (((int) work->options) & (1 << 11)) || (((int) work->options) & (1 << 13))) && work -> ntypes >= 10)
            {
              if ((t = consume_count(mangled)) <= 0)
                {
                  return (0);
                }
            }
          else
     {
       if (!get_count (mangled, &t))
      {
           return (0);
      }
     }
   if ((((int) work->options) & (1 << 10)) || (((int) work->options) & (1 << 11)) || (((int) work->options) & (1 << 12)) || (((int) work->options) & (1 << 13)))
     {
       t--;
     }
   if ((t < 0) || (t >= work -> ntypes))
     {
       return (0);
     }
   while (work->nrepeats > 0 || --r >= 0)
     {
       tem = work -> typevec[t];
       if (need_comma && (work -> options & (1 << 0)))
  {
    string_append (declp, ", ");
  }
       if (!do_arg (work, &tem, &arg))
  {
    return (0);
  }
       if ((work -> options & (1 << 0)))
  {
    string_appends (declp, &arg);
  }
       string_delete (&arg);
       need_comma = 1;
     }
 }
      else
 {
   if (need_comma && (work -> options & (1 << 0)))
     string_append (declp, ", ");
   if (!do_arg (work, mangled, &arg))
     return (0);
   if ((work -> options & (1 << 0)))
     string_appends (declp, &arg);
   string_delete (&arg);
   need_comma = 1;
 }
    }
  if (**mangled == 'e')
    {
      (*mangled)++;
      if ((work -> options & (1 << 0)))
 {
   if (need_comma)
     {
       string_append (declp, ",");
     }
   string_append (declp, "...");
 }
    }
  if ((work -> options & (1 << 0)))
    {
      string_append (declp, ")");
    }
  return (1);
}
static int
demangle_nested_args (work, mangled, declp)
     struct work_stuff *work;
     const char **mangled;
     string *declp;
{
  string* saved_previous_argument;
  int result;
  int saved_nrepeats;
  ++work->forgetting_types;
  saved_previous_argument = work->previous_argument;
  saved_nrepeats = work->nrepeats;
  work->previous_argument = 0;
  work->nrepeats = 0;
  result = demangle_args (work, mangled, declp);
  if (work->previous_argument)
    {
      string_delete (work->previous_argument);
      free ((char *) work->previous_argument);
    }
  work->previous_argument = saved_previous_argument;
  --work->forgetting_types;
  work->nrepeats = saved_nrepeats;
  return result;
}
static void
demangle_function_name (work, mangled, declp, scan)
     struct work_stuff *work;
     const char **mangled;
     string *declp;
     const char *scan;
{
  size_t i;
  string type;
  const char *tem;
  string_appendn (declp, (*mangled), scan - (*mangled));
  string_need (declp, 1);
  *(declp -> p) = '\0';
  (*mangled) = scan + 2;
  if ((((int) work->options) & (1 << 12)) && (**mangled == 'X'))
    {
      demangle_arm_hp_template (work, mangled, 0, declp);
    }
  if ((((int) work->options) & (1 << 10)) || (((int) work->options) & (1 << 11)) || (((int) work->options) & (1 << 12)) || (((int) work->options) & (1 << 13)))
    {
      if (strcmp (declp -> b, "__ct") == 0)
 {
   work -> constructor += 1;
   string_clear (declp);
   return;
 }
      else if (strcmp (declp -> b, "__dt") == 0)
 {
   work -> destructor += 1;
   string_clear (declp);
   return;
 }
    }
  if (declp->p - declp->b >= 3
      && declp->b[0] == 'o'
      && declp->b[1] == 'p'
      && strchr (cplus_markers, declp->b[2]) != ((void *)0))
    {
      if (declp->p - declp->b >= 10
   && memcmp (declp->b + 3, "assign_", 7) == 0)
 {
   for (i = 0; i < (sizeof (optable) / sizeof ((optable)[0])); i++)
     {
       int len = declp->p - declp->b - 10;
       if ((int) strlen (optable[i].in) == len
    && memcmp (optable[i].in, declp->b + 10, len) == 0)
  {
    string_clear (declp);
    string_append (declp, "operator");
    string_append (declp, optable[i].out);
    string_append (declp, "=");
    break;
  }
     }
 }
      else
 {
   for (i = 0; i < (sizeof (optable) / sizeof ((optable)[0])); i++)
     {
       int len = declp->p - declp->b - 3;
       if ((int) strlen (optable[i].in) == len
    && memcmp (optable[i].in, declp->b + 3, len) == 0)
  {
    string_clear (declp);
    string_append (declp, "operator");
    string_append (declp, optable[i].out);
    break;
  }
     }
 }
    }
  else if (declp->p - declp->b >= 5 && memcmp (declp->b, "type", 4) == 0
    && strchr (cplus_markers, declp->b[4]) != ((void *)0))
    {
      tem = declp->b + 5;
      if (do_type (work, &tem, &type))
 {
   string_clear (declp);
   string_append (declp, "operator ");
   string_appends (declp, &type);
   string_delete (&type);
 }
    }
  else if (declp->b[0] == '_' && declp->b[1] == '_'
    && declp->b[2] == 'o' && declp->b[3] == 'p')
    {
      tem = declp->b + 4;
      if (do_type (work, &tem, &type))
 {
   string_clear (declp);
   string_append (declp, "operator ");
   string_appends (declp, &type);
   string_delete (&type);
 }
    }
  else if (declp->b[0] == '_' && declp->b[1] == '_'
    && (_sch_istable[((unsigned char)declp->b[2]) & 0xff] & (unsigned short)(_sch_islower))
    && (_sch_istable[((unsigned char)declp->b[3]) & 0xff] & (unsigned short)(_sch_islower)))
    {
      if (declp->b[4] == '\0')
 {
   for (i = 0; i < (sizeof (optable) / sizeof ((optable)[0])); i++)
     {
       if (strlen (optable[i].in) == 2
    && memcmp (optable[i].in, declp->b + 2, 2) == 0)
  {
    string_clear (declp);
    string_append (declp, "operator");
    string_append (declp, optable[i].out);
    break;
  }
     }
 }
      else
 {
   if (declp->b[2] == 'a' && declp->b[5] == '\0')
     {
       for (i = 0; i < (sizeof (optable) / sizeof ((optable)[0])); i++)
  {
    if (strlen (optable[i].in) == 3
        && memcmp (optable[i].in, declp->b + 2, 3) == 0)
      {
        string_clear (declp);
        string_append (declp, "operator");
        string_append (declp, optable[i].out);
        break;
      }
  }
     }
 }
    }
}
static void
string_need (s, n)
     string *s;
     int n;
{
  int tem;
  if (s->b == ((void *)0))
    {
      if (n < 32)
 {
   n = 32;
 }
      s->p = s->b = xmalloc (n);
      s->e = s->b + n;
    }
  else if (s->e - s->p < n)
    {
      tem = s->p - s->b;
      n += tem;
      n *= 2;
      s->b = xrealloc (s->b, n);
      s->p = s->b + tem;
      s->e = s->b + n;
    }
}
static void
string_delete (s)
     string *s;
{
  if (s->b != ((void *)0))
    {
      free (s->b);
      s->b = s->e = s->p = ((void *)0);
    }
}
static void
string_init (s)
     string *s;
{
  s->b = s->p = s->e = ((void *)0);
}
static void
string_clear (s)
     string *s;
{
  s->p = s->b;
}
static void
string_append (p, s)
     string *p;
     const char *s;
{
  int n;
  if (s == ((void *)0) || *s == '\0')
    return;
  n = strlen (s);
  string_need (p, n);
  memcpy (p->p, s, n);
  p->p += n;
}
static void
string_appends (p, s)
     string *p, *s;
{
  int n;
  if (s->b != s->p)
    {
      n = s->p - s->b;
      string_need (p, n);
      memcpy (p->p, s->b, n);
      p->p += n;
    }
}
static void
string_appendn (p, s, n)
     string *p;
     const char *s;
     int n;
{
  if (n != 0)
    {
      string_need (p, n);
      memcpy (p->p, s, n);
      p->p += n;
    }
}
static void
string_prepend (p, s)
     string *p;
     const char *s;
{
  if (s != ((void *)0) && *s != '\0')
    {
      string_prependn (p, s, strlen (s));
    }
}
static void
string_prepends (p, s)
     string *p, *s;
{
  if (s->b != s->p)
    {
      string_prependn (p, s->b, s->p - s->b);
    }
}
static void
string_prependn (p, s, n)
     string *p;
     const char *s;
     int n;
{
  char *q;
  if (n != 0)
    {
      string_need (p, n);
      for (q = p->p - 1; q >= p->b; q--)
 {
   q[n] = q[0];
 }
      memcpy (p->b, s, n);
      p->p += n;
    }
}
static void
string_append_template_idx (s, idx)
     string *s;
     int idx;
{
  char buf[32 + 1 ];
  sprintf(buf, "T%d", idx);
  string_append (s, buf);
}
struct demangle_operator_info
{
  const char *code;
  const char *name;
  int len;
  int args;
};
enum d_builtin_type_print
{
  D_PRINT_DEFAULT,
  D_PRINT_INT,
  D_PRINT_UNSIGNED,
  D_PRINT_LONG,
  D_PRINT_UNSIGNED_LONG,
  D_PRINT_LONG_LONG,
  D_PRINT_UNSIGNED_LONG_LONG,
  D_PRINT_BOOL,
  D_PRINT_FLOAT,
  D_PRINT_VOID
};
struct demangle_builtin_type_info
{
  const char *name;
  int len;
  const char *java_name;
  int java_len;
  enum d_builtin_type_print print;
};
struct d_info
{
  const char *s;
  const char *send;
  int options;
  const char *n;
  struct demangle_component *comps;
  int next_comp;
  int num_comps;
  struct demangle_component **subs;
  int next_sub;
  int num_subs;
  int did_subs;
  struct demangle_component *last_name;
  int expansion;
};
extern
const struct demangle_operator_info cplus_demangle_operators[];
extern
const struct demangle_builtin_type_info
cplus_demangle_builtin_types[(26)];
extern
struct demangle_component *
cplus_demangle_mangled_name (struct d_info *, int);
extern
struct demangle_component *
cplus_demangle_type (struct d_info *);
extern void
cplus_demangle_init_info (const char *, int, size_t, struct d_info *);
struct d_standard_sub_info
{
  char code;
  const char *simple_expansion;
  int simple_len;
  const char *full_expansion;
  int full_len;
  const char *set_last_name;
  int set_last_name_len;
};
struct d_print_template
{
  struct d_print_template *next;
  const struct demangle_component *template;
};
struct d_print_mod
{
  struct d_print_mod *next;
  const struct demangle_component *mod;
  int printed;
  struct d_print_template *templates;
};
struct d_print_info
{
  int options;
  char *buf;
  size_t len;
  size_t alc;
  struct d_print_template *templates;
  struct d_print_mod *modifiers;
  int allocation_failure;
};
static struct demangle_component *
d_make_empty (struct d_info *);
static struct demangle_component *
d_make_comp (struct d_info *, enum demangle_component_type, struct demangle_component *, struct demangle_component *)
                                    ;
static struct demangle_component *
d_make_name (struct d_info *, const char *, int);
static struct demangle_component *
d_make_builtin_type (struct d_info *, const struct demangle_builtin_type_info *)
                                                   ;
static struct demangle_component *
d_make_operator (struct d_info *, const struct demangle_operator_info *)
                                           ;
static struct demangle_component *
d_make_extended_operator (struct d_info *, int, struct demangle_component *)
                                   ;
static struct demangle_component *
d_make_ctor (struct d_info *, enum gnu_v3_ctor_kinds, struct demangle_component *)
                                    ;
static struct demangle_component *
d_make_dtor (struct d_info *, enum gnu_v3_dtor_kinds, struct demangle_component *)
                                    ;
static struct demangle_component *
d_make_template_param (struct d_info *, long);
static struct demangle_component *
d_make_sub (struct d_info *, const char *, int);
static int
has_return_type (struct demangle_component *);
static int
is_ctor_dtor_or_conversion (struct demangle_component *);
static struct demangle_component *
d_encoding (struct d_info *, int);
static struct demangle_component *
d_name (struct d_info *);
static struct demangle_component *
d_nested_name (struct d_info *);
static struct demangle_component *
d_prefix (struct d_info *);
static struct demangle_component *
d_unqualified_name (struct d_info *);
static struct demangle_component *
d_source_name (struct d_info *);
static long
d_number (struct d_info *);
static struct demangle_component *
d_identifier (struct d_info *, int);
static struct demangle_component *
d_operator_name (struct d_info *);
static struct demangle_component *
d_special_name (struct d_info *);
static int
d_call_offset (struct d_info *, int);
static struct demangle_component *
d_ctor_dtor_name (struct d_info *);
static struct demangle_component **
d_cv_qualifiers (struct d_info *, struct demangle_component **, int);
static struct demangle_component *
d_function_type (struct d_info *);
static struct demangle_component *
d_bare_function_type (struct d_info *, int);
static struct demangle_component *
d_class_enum_type (struct d_info *);
static struct demangle_component *
d_array_type (struct d_info *);
static struct demangle_component *
d_pointer_to_member_type (struct d_info *);
static struct demangle_component *
d_template_param (struct d_info *);
static struct demangle_component *
d_template_args (struct d_info *);
static struct demangle_component *
d_template_arg (struct d_info *);
static struct demangle_component *
d_expression (struct d_info *);
static struct demangle_component *
d_expr_primary (struct d_info *);
static struct demangle_component *
d_local_name (struct d_info *);
static int
d_discriminator (struct d_info *);
static int
d_add_substitution (struct d_info *, struct demangle_component *);
static struct demangle_component *
d_substitution (struct d_info *, int);
static void
d_print_resize (struct d_print_info *, size_t);
static void
d_print_append_char (struct d_print_info *, int);
static void
d_print_append_buffer (struct d_print_info *, const char *, size_t);
static void
d_print_error (struct d_print_info *);
static void
d_print_comp (struct d_print_info *, const struct demangle_component *)
                                           ;
static void
d_print_java_identifier (struct d_print_info *, const char *, int);
static void
d_print_mod_list (struct d_print_info *, struct d_print_mod *, int);
static void
d_print_mod (struct d_print_info *, const struct demangle_component *)
                                          ;
static void
d_print_function_type (struct d_print_info *, const struct demangle_component *, struct d_print_mod *)
                                ;
static void
d_print_array_type (struct d_print_info *, const struct demangle_component *, struct d_print_mod *)
                             ;
static void
d_print_expr_op (struct d_print_info *, const struct demangle_component *)
                                       ;
static void
d_print_cast (struct d_print_info *, const struct demangle_component *)
                                           ;
static char *
d_demangle (const char *, int, size_t *);
int
cplus_demangle_fill_name (p, s, len)
     struct demangle_component *p;
     const char *s;
     int len;
{
  if (p == ((void *)0) || s == ((void *)0) || len == 0)
    return 0;
  p->type = DEMANGLE_COMPONENT_NAME;
  p->u.s_name.s = s;
  p->u.s_name.len = len;
  return 1;
}
int
cplus_demangle_fill_extended_operator (p, args, name)
     struct demangle_component *p;
     int args;
     struct demangle_component *name;
{
  if (p == ((void *)0) || args < 0 || name == ((void *)0))
    return 0;
  p->type = DEMANGLE_COMPONENT_EXTENDED_OPERATOR;
  p->u.s_extended_operator.args = args;
  p->u.s_extended_operator.name = name;
  return 1;
}
int
cplus_demangle_fill_ctor (p, kind, name)
     struct demangle_component *p;
     enum gnu_v3_ctor_kinds kind;
     struct demangle_component *name;
{
  if (p == ((void *)0)
      || name == ((void *)0)
      || (kind < gnu_v3_complete_object_ctor
   && kind > gnu_v3_complete_object_allocating_ctor))
    return 0;
  p->type = DEMANGLE_COMPONENT_CTOR;
  p->u.s_ctor.kind = kind;
  p->u.s_ctor.name = name;
  return 1;
}
int
cplus_demangle_fill_dtor (p, kind, name)
     struct demangle_component *p;
     enum gnu_v3_dtor_kinds kind;
     struct demangle_component *name;
{
  if (p == ((void *)0)
      || name == ((void *)0)
      || (kind < gnu_v3_deleting_dtor
   && kind > gnu_v3_base_object_dtor))
    return 0;
  p->type = DEMANGLE_COMPONENT_DTOR;
  p->u.s_dtor.kind = kind;
  p->u.s_dtor.name = name;
  return 1;
}
static struct demangle_component *
d_make_empty (di)
     struct d_info *di;
{
  struct demangle_component *p;
  if (di->next_comp >= di->num_comps)
    return ((void *)0);
  p = &di->comps[di->next_comp];
  ++di->next_comp;
  return p;
}
static struct demangle_component *
d_make_comp (di, type, left, right)
     struct d_info *di;
     enum demangle_component_type type;
     struct demangle_component *left;
     struct demangle_component *right;
{
  struct demangle_component *p;
  switch (type)
    {
    case DEMANGLE_COMPONENT_QUAL_NAME:
    case DEMANGLE_COMPONENT_LOCAL_NAME:
    case DEMANGLE_COMPONENT_TYPED_NAME:
    case DEMANGLE_COMPONENT_TEMPLATE:
    case DEMANGLE_COMPONENT_CONSTRUCTION_VTABLE:
    case DEMANGLE_COMPONENT_VENDOR_TYPE_QUAL:
    case DEMANGLE_COMPONENT_PTRMEM_TYPE:
    case DEMANGLE_COMPONENT_UNARY:
    case DEMANGLE_COMPONENT_BINARY:
    case DEMANGLE_COMPONENT_BINARY_ARGS:
    case DEMANGLE_COMPONENT_TRINARY:
    case DEMANGLE_COMPONENT_TRINARY_ARG1:
    case DEMANGLE_COMPONENT_TRINARY_ARG2:
    case DEMANGLE_COMPONENT_LITERAL:
    case DEMANGLE_COMPONENT_LITERAL_NEG:
      if (left == ((void *)0) || right == ((void *)0))
 return ((void *)0);
      break;
    case DEMANGLE_COMPONENT_VTABLE:
    case DEMANGLE_COMPONENT_VTT:
    case DEMANGLE_COMPONENT_TYPEINFO:
    case DEMANGLE_COMPONENT_TYPEINFO_NAME:
    case DEMANGLE_COMPONENT_TYPEINFO_FN:
    case DEMANGLE_COMPONENT_THUNK:
    case DEMANGLE_COMPONENT_VIRTUAL_THUNK:
    case DEMANGLE_COMPONENT_COVARIANT_THUNK:
    case DEMANGLE_COMPONENT_JAVA_CLASS:
    case DEMANGLE_COMPONENT_GUARD:
    case DEMANGLE_COMPONENT_REFTEMP:
    case DEMANGLE_COMPONENT_POINTER:
    case DEMANGLE_COMPONENT_REFERENCE:
    case DEMANGLE_COMPONENT_COMPLEX:
    case DEMANGLE_COMPONENT_IMAGINARY:
    case DEMANGLE_COMPONENT_VENDOR_TYPE:
    case DEMANGLE_COMPONENT_ARGLIST:
    case DEMANGLE_COMPONENT_TEMPLATE_ARGLIST:
    case DEMANGLE_COMPONENT_CAST:
      if (left == ((void *)0))
 return ((void *)0);
      break;
    case DEMANGLE_COMPONENT_ARRAY_TYPE:
      if (right == ((void *)0))
 return ((void *)0);
      break;
    case DEMANGLE_COMPONENT_FUNCTION_TYPE:
    case DEMANGLE_COMPONENT_RESTRICT:
    case DEMANGLE_COMPONENT_VOLATILE:
    case DEMANGLE_COMPONENT_CONST:
    case DEMANGLE_COMPONENT_RESTRICT_THIS:
    case DEMANGLE_COMPONENT_VOLATILE_THIS:
    case DEMANGLE_COMPONENT_CONST_THIS:
      break;
    default:
      return ((void *)0);
    }
  p = d_make_empty (di);
  if (p != ((void *)0))
    {
      p->type = type;
      p->u.s_binary.left = left;
      p->u.s_binary.right = right;
    }
  return p;
}
static struct demangle_component *
d_make_name (di, s, len)
     struct d_info *di;
     const char *s;
     int len;
{
  struct demangle_component *p;
  p = d_make_empty (di);
  if (! cplus_demangle_fill_name (p, s, len))
    return ((void *)0);
  return p;
}
static struct demangle_component *
d_make_builtin_type (di, type)
     struct d_info *di;
     const struct demangle_builtin_type_info *type;
{
  struct demangle_component *p;
  if (type == ((void *)0))
    return ((void *)0);
  p = d_make_empty (di);
  if (p != ((void *)0))
    {
      p->type = DEMANGLE_COMPONENT_BUILTIN_TYPE;
      p->u.s_builtin.type = type;
    }
  return p;
}
static struct demangle_component *
d_make_operator (di, op)
     struct d_info *di;
     const struct demangle_operator_info *op;
{
  struct demangle_component *p;
  p = d_make_empty (di);
  if (p != ((void *)0))
    {
      p->type = DEMANGLE_COMPONENT_OPERATOR;
      p->u.s_operator.op = op;
    }
  return p;
}
static struct demangle_component *
d_make_extended_operator (di, args, name)
     struct d_info *di;
     int args;
     struct demangle_component *name;
{
  struct demangle_component *p;
  p = d_make_empty (di);
  if (! cplus_demangle_fill_extended_operator (p, args, name))
    return ((void *)0);
  return p;
}
static struct demangle_component *
d_make_ctor (di, kind, name)
     struct d_info *di;
     enum gnu_v3_ctor_kinds kind;
     struct demangle_component *name;
{
  struct demangle_component *p;
  p = d_make_empty (di);
  if (! cplus_demangle_fill_ctor (p, kind, name))
    return ((void *)0);
  return p;
}
static struct demangle_component *
d_make_dtor (di, kind, name)
     struct d_info *di;
     enum gnu_v3_dtor_kinds kind;
     struct demangle_component *name;
{
  struct demangle_component *p;
  p = d_make_empty (di);
  if (! cplus_demangle_fill_dtor (p, kind, name))
    return ((void *)0);
  return p;
}
static struct demangle_component *
d_make_template_param (di, i)
     struct d_info *di;
     long i;
{
  struct demangle_component *p;
  p = d_make_empty (di);
  if (p != ((void *)0))
    {
      p->type = DEMANGLE_COMPONENT_TEMPLATE_PARAM;
      p->u.s_number.number = i;
    }
  return p;
}
static struct demangle_component *
d_make_sub (di, name, len)
     struct d_info *di;
     const char *name;
     int len;
{
  struct demangle_component *p;
  p = d_make_empty (di);
  if (p != ((void *)0))
    {
      p->type = DEMANGLE_COMPONENT_SUB_STD;
      p->u.s_string.string1 = name;
      p->u.s_string.len = len;
    }
  return p;
}
struct demangle_component *
cplus_demangle_mangled_name (di, top_level)
     struct d_info *di;
     int top_level;
{
  if ((*((di)->n++)) != '_')
    return ((void *)0);
  if ((*((di)->n++)) != 'Z')
    return ((void *)0);
  return d_encoding (di, top_level);
}
static int
has_return_type (dc)
     struct demangle_component *dc;
{
  if (dc == ((void *)0))
    return 0;
  switch (dc->type)
    {
    default:
      return 0;
    case DEMANGLE_COMPONENT_TEMPLATE:
      return ! is_ctor_dtor_or_conversion (((dc)->u.s_binary.left));
    case DEMANGLE_COMPONENT_RESTRICT_THIS:
    case DEMANGLE_COMPONENT_VOLATILE_THIS:
    case DEMANGLE_COMPONENT_CONST_THIS:
      return has_return_type (((dc)->u.s_binary.left));
    }
}
static int
is_ctor_dtor_or_conversion (dc)
     struct demangle_component *dc;
{
  if (dc == ((void *)0))
    return 0;
  switch (dc->type)
    {
    default:
      return 0;
    case DEMANGLE_COMPONENT_QUAL_NAME:
    case DEMANGLE_COMPONENT_LOCAL_NAME:
      return is_ctor_dtor_or_conversion (((dc)->u.s_binary.right));
    case DEMANGLE_COMPONENT_CTOR:
    case DEMANGLE_COMPONENT_DTOR:
    case DEMANGLE_COMPONENT_CAST:
      return 1;
    }
}
static struct demangle_component *
d_encoding (di, top_level)
     struct d_info *di;
     int top_level;
{
  char peek = (*((di)->n));
  if (peek == 'G' || peek == 'T')
    return d_special_name (di);
  else
    {
      struct demangle_component *dc;
      dc = d_name (di);
      if (dc != ((void *)0) && top_level && (di->options & (1 << 0)) == 0)
 {
   while (dc->type == DEMANGLE_COMPONENT_RESTRICT_THIS
   || dc->type == DEMANGLE_COMPONENT_VOLATILE_THIS
   || dc->type == DEMANGLE_COMPONENT_CONST_THIS)
     dc = ((dc)->u.s_binary.left);
   if (dc->type == DEMANGLE_COMPONENT_LOCAL_NAME)
     {
       struct demangle_component *dcr;
       dcr = ((dc)->u.s_binary.right);
       while (dcr->type == DEMANGLE_COMPONENT_RESTRICT_THIS
       || dcr->type == DEMANGLE_COMPONENT_VOLATILE_THIS
       || dcr->type == DEMANGLE_COMPONENT_CONST_THIS)
  dcr = ((dcr)->u.s_binary.left);
       dc->u.s_binary.right = dcr;
     }
   return dc;
 }
      peek = (*((di)->n));
      if (peek == '\0' || peek == 'E')
 return dc;
      return d_make_comp (di, DEMANGLE_COMPONENT_TYPED_NAME, dc,
     d_bare_function_type (di, has_return_type (dc)));
    }
}
static struct demangle_component *
d_name (di)
     struct d_info *di;
{
  char peek = (*((di)->n));
  struct demangle_component *dc;
  switch (peek)
    {
    case 'N':
      return d_nested_name (di);
    case 'Z':
      return d_local_name (di);
    case 'S':
      {
 int subst;
 if (((di)->n[1]) != 't')
   {
     dc = d_substitution (di, 0);
     subst = 1;
   }
 else
   {
     ((di)->n += (2));
     dc = d_make_comp (di, DEMANGLE_COMPONENT_QUAL_NAME,
         d_make_name (di, "std", 3),
         d_unqualified_name (di));
     di->expansion += 3;
     subst = 0;
   }
 if ((*((di)->n)) != 'I')
   {
   }
 else
   {
     if (! subst)
       {
  if (! d_add_substitution (di, dc))
    return ((void *)0);
       }
     dc = d_make_comp (di, DEMANGLE_COMPONENT_TEMPLATE, dc,
         d_template_args (di));
   }
 return dc;
      }
    default:
      dc = d_unqualified_name (di);
      if ((*((di)->n)) == 'I')
 {
   if (! d_add_substitution (di, dc))
     return ((void *)0);
   dc = d_make_comp (di, DEMANGLE_COMPONENT_TEMPLATE, dc,
       d_template_args (di));
 }
      return dc;
    }
}
static struct demangle_component *
d_nested_name (di)
     struct d_info *di;
{
  struct demangle_component *ret;
  struct demangle_component **pret;
  if ((*((di)->n++)) != 'N')
    return ((void *)0);
  pret = d_cv_qualifiers (di, &ret, 1);
  if (pret == ((void *)0))
    return ((void *)0);
  *pret = d_prefix (di);
  if (*pret == ((void *)0))
    return ((void *)0);
  if ((*((di)->n++)) != 'E')
    return ((void *)0);
  return ret;
}
static struct demangle_component *
d_prefix (di)
     struct d_info *di;
{
  struct demangle_component *ret = ((void *)0);
  while (1)
    {
      char peek;
      enum demangle_component_type comb_type;
      struct demangle_component *dc;
      peek = (*((di)->n));
      if (peek == '\0')
 return ((void *)0);
      comb_type = DEMANGLE_COMPONENT_QUAL_NAME;
      if (((peek) >= '0' && (peek) <= '9')
   || ((peek) >= 'a' && (peek) <= 'z')
   || peek == 'C'
   || peek == 'D')
 dc = d_unqualified_name (di);
      else if (peek == 'S')
 dc = d_substitution (di, 1);
      else if (peek == 'I')
 {
   if (ret == ((void *)0))
     return ((void *)0);
   comb_type = DEMANGLE_COMPONENT_TEMPLATE;
   dc = d_template_args (di);
 }
      else if (peek == 'T')
 dc = d_template_param (di);
      else if (peek == 'E')
 return ret;
      else
 return ((void *)0);
      if (ret == ((void *)0))
 ret = dc;
      else
 ret = d_make_comp (di, comb_type, ret, dc);
      if (peek != 'S' && (*((di)->n)) != 'E')
 {
   if (! d_add_substitution (di, ret))
     return ((void *)0);
 }
    }
}
static struct demangle_component *
d_unqualified_name (di)
     struct d_info *di;
{
  char peek;
  peek = (*((di)->n));
  if (((peek) >= '0' && (peek) <= '9'))
    return d_source_name (di);
  else if (((peek) >= 'a' && (peek) <= 'z'))
    {
      struct demangle_component *ret;
      ret = d_operator_name (di);
      if (ret != ((void *)0) && ret->type == DEMANGLE_COMPONENT_OPERATOR)
 di->expansion += sizeof "operator" + ret->u.s_operator.op->len - 2;
      return ret;
    }
  else if (peek == 'C' || peek == 'D')
    return d_ctor_dtor_name (di);
  else
    return ((void *)0);
}
static struct demangle_component *
d_source_name (di)
     struct d_info *di;
{
  long len;
  struct demangle_component *ret;
  len = d_number (di);
  if (len <= 0)
    return ((void *)0);
  ret = d_identifier (di, len);
  di->last_name = ret;
  return ret;
}
static long
d_number (di)
     struct d_info *di;
{
  int negative;
  char peek;
  long ret;
  negative = 0;
  peek = (*((di)->n));
  if (peek == 'n')
    {
      negative = 1;
      ((di)->n += (1));
      peek = (*((di)->n));
    }
  ret = 0;
  while (1)
    {
      if (! ((peek) >= '0' && (peek) <= '9'))
 {
   if (negative)
     ret = - ret;
   return ret;
 }
      ret = ret * 10 + peek - '0';
      ((di)->n += (1));
      peek = (*((di)->n));
    }
}
static struct demangle_component *
d_identifier (di, len)
     struct d_info *di;
     int len;
{
  const char *name;
  name = ((di)->n);
  if (di->send - name < len)
    return ((void *)0);
  ((di)->n += (len));
  if ((di->options & (1 << 2)) != 0
      && (*((di)->n)) == '$')
    ((di)->n += (1));
  if (len >= (int) (sizeof ("_GLOBAL_") - 1) + 2
      && memcmp (name, "_GLOBAL_",
   (sizeof ("_GLOBAL_") - 1)) == 0)
    {
      const char *s;
      s = name + (sizeof ("_GLOBAL_") - 1);
      if ((*s == '.' || *s == '_' || *s == '$')
   && s[1] == 'N')
 {
   di->expansion -= len - sizeof "(anonymous namespace)";
   return d_make_name (di, "(anonymous namespace)",
         sizeof "(anonymous namespace)" - 1);
 }
    }
  return d_make_name (di, name, len);
}
const struct demangle_operator_info cplus_demangle_operators[] =
{
  { "aN", "&=", (sizeof "&=") - 1, 2 },
  { "aS", "=", (sizeof "=") - 1, 2 },
  { "aa", "&&", (sizeof "&&") - 1, 2 },
  { "ad", "&", (sizeof "&") - 1, 1 },
  { "an", "&", (sizeof "&") - 1, 2 },
  { "cl", "()", (sizeof "()") - 1, 0 },
  { "cm", ",", (sizeof ",") - 1, 2 },
  { "co", "~", (sizeof "~") - 1, 1 },
  { "dV", "/=", (sizeof "/=") - 1, 2 },
  { "da", "delete[]", (sizeof "delete[]") - 1, 1 },
  { "de", "*", (sizeof "*") - 1, 1 },
  { "dl", "delete", (sizeof "delete") - 1, 1 },
  { "dv", "/", (sizeof "/") - 1, 2 },
  { "eO", "^=", (sizeof "^=") - 1, 2 },
  { "eo", "^", (sizeof "^") - 1, 2 },
  { "eq", "==", (sizeof "==") - 1, 2 },
  { "ge", ">=", (sizeof ">=") - 1, 2 },
  { "gt", ">", (sizeof ">") - 1, 2 },
  { "ix", "[]", (sizeof "[]") - 1, 2 },
  { "lS", "<<=", (sizeof "<<=") - 1, 2 },
  { "le", "<=", (sizeof "<=") - 1, 2 },
  { "ls", "<<", (sizeof "<<") - 1, 2 },
  { "lt", "<", (sizeof "<") - 1, 2 },
  { "mI", "-=", (sizeof "-=") - 1, 2 },
  { "mL", "*=", (sizeof "*=") - 1, 2 },
  { "mi", "-", (sizeof "-") - 1, 2 },
  { "ml", "*", (sizeof "*") - 1, 2 },
  { "mm", "--", (sizeof "--") - 1, 1 },
  { "na", "new[]", (sizeof "new[]") - 1, 1 },
  { "ne", "!=", (sizeof "!=") - 1, 2 },
  { "ng", "-", (sizeof "-") - 1, 1 },
  { "nt", "!", (sizeof "!") - 1, 1 },
  { "nw", "new", (sizeof "new") - 1, 1 },
  { "oR", "|=", (sizeof "|=") - 1, 2 },
  { "oo", "||", (sizeof "||") - 1, 2 },
  { "or", "|", (sizeof "|") - 1, 2 },
  { "pL", "+=", (sizeof "+=") - 1, 2 },
  { "pl", "+", (sizeof "+") - 1, 2 },
  { "pm", "->*", (sizeof "->*") - 1, 2 },
  { "pp", "++", (sizeof "++") - 1, 1 },
  { "ps", "+", (sizeof "+") - 1, 1 },
  { "pt", "->", (sizeof "->") - 1, 2 },
  { "qu", "?", (sizeof "?") - 1, 3 },
  { "rM", "%=", (sizeof "%=") - 1, 2 },
  { "rS", ">>=", (sizeof ">>=") - 1, 2 },
  { "rm", "%", (sizeof "%") - 1, 2 },
  { "rs", ">>", (sizeof ">>") - 1, 2 },
  { "st", "sizeof ", (sizeof "sizeof ") - 1, 1 },
  { "sz", "sizeof ", (sizeof "sizeof ") - 1, 1 },
  { ((void *)0), ((void *)0), 0, 0 }
};
static struct demangle_component *
d_operator_name (di)
     struct d_info *di;
{
  char c1;
  char c2;
  c1 = (*((di)->n++));
  c2 = (*((di)->n++));
  if (c1 == 'v' && ((c2) >= '0' && (c2) <= '9'))
    return d_make_extended_operator (di, c2 - '0', d_source_name (di));
  else if (c1 == 'c' && c2 == 'v')
    return d_make_comp (di, DEMANGLE_COMPONENT_CAST,
   cplus_demangle_type (di), ((void *)0));
  else
    {
      int low = 0;
      int high = ((sizeof (cplus_demangle_operators)
     / sizeof (cplus_demangle_operators[0]))
    - 1);
      while (1)
 {
   int i;
   const struct demangle_operator_info *p;
   i = low + (high - low) / 2;
   p = cplus_demangle_operators + i;
   if (c1 == p->code[0] && c2 == p->code[1])
     return d_make_operator (di, p);
   if (c1 < p->code[0] || (c1 == p->code[0] && c2 < p->code[1]))
     high = i;
   else
     low = i + 1;
   if (low == high)
     return ((void *)0);
 }
    }
}
static struct demangle_component *
d_special_name (di)
     struct d_info *di;
{
  char c;
  di->expansion += 20;
  c = (*((di)->n++));
  if (c == 'T')
    {
      switch ((*((di)->n++)))
 {
 case 'V':
   di->expansion -= 5;
   return d_make_comp (di, DEMANGLE_COMPONENT_VTABLE,
         cplus_demangle_type (di), ((void *)0));
 case 'T':
   di->expansion -= 10;
   return d_make_comp (di, DEMANGLE_COMPONENT_VTT,
         cplus_demangle_type (di), ((void *)0));
 case 'I':
   return d_make_comp (di, DEMANGLE_COMPONENT_TYPEINFO,
         cplus_demangle_type (di), ((void *)0));
 case 'S':
   return d_make_comp (di, DEMANGLE_COMPONENT_TYPEINFO_NAME,
         cplus_demangle_type (di), ((void *)0));
 case 'h':
   if (! d_call_offset (di, 'h'))
     return ((void *)0);
   return d_make_comp (di, DEMANGLE_COMPONENT_THUNK,
         d_encoding (di, 0), ((void *)0));
 case 'v':
   if (! d_call_offset (di, 'v'))
     return ((void *)0);
   return d_make_comp (di, DEMANGLE_COMPONENT_VIRTUAL_THUNK,
         d_encoding (di, 0), ((void *)0));
 case 'c':
   if (! d_call_offset (di, '\0'))
     return ((void *)0);
   if (! d_call_offset (di, '\0'))
     return ((void *)0);
   return d_make_comp (di, DEMANGLE_COMPONENT_COVARIANT_THUNK,
         d_encoding (di, 0), ((void *)0));
 case 'C':
   {
     struct demangle_component *derived_type;
     long offset;
     struct demangle_component *base_type;
     derived_type = cplus_demangle_type (di);
     offset = d_number (di);
     if (offset < 0)
       return ((void *)0);
     if ((*((di)->n++)) != '_')
       return ((void *)0);
     base_type = cplus_demangle_type (di);
     di->expansion += 5;
     return d_make_comp (di, DEMANGLE_COMPONENT_CONSTRUCTION_VTABLE,
    base_type, derived_type);
   }
 case 'F':
   return d_make_comp (di, DEMANGLE_COMPONENT_TYPEINFO_FN,
         cplus_demangle_type (di), ((void *)0));
 case 'J':
   return d_make_comp (di, DEMANGLE_COMPONENT_JAVA_CLASS,
         cplus_demangle_type (di), ((void *)0));
 default:
   return ((void *)0);
 }
    }
  else if (c == 'G')
    {
      switch ((*((di)->n++)))
 {
 case 'V':
   return d_make_comp (di, DEMANGLE_COMPONENT_GUARD, d_name (di), ((void *)0));
 case 'R':
   return d_make_comp (di, DEMANGLE_COMPONENT_REFTEMP, d_name (di),
         ((void *)0));
 default:
   return ((void *)0);
 }
    }
  else
    return ((void *)0);
}
static int
d_call_offset (di, c)
     struct d_info *di;
     int c;
{
  long offset;
  long virtual_offset;
  if (c == '\0')
    c = (*((di)->n++));
  if (c == 'h')
    offset = d_number (di);
  else if (c == 'v')
    {
      offset = d_number (di);
      if ((*((di)->n++)) != '_')
 return 0;
      virtual_offset = d_number (di);
    }
  else
    return 0;
  if ((*((di)->n++)) != '_')
    return 0;
  return 1;
}
static struct demangle_component *
d_ctor_dtor_name (di)
     struct d_info *di;
{
  if (di->last_name != ((void *)0))
    {
      if (di->last_name->type == DEMANGLE_COMPONENT_NAME)
 di->expansion += di->last_name->u.s_name.len;
      else if (di->last_name->type == DEMANGLE_COMPONENT_SUB_STD)
 di->expansion += di->last_name->u.s_string.len;
    }
  switch ((*((di)->n++)))
    {
    case 'C':
      {
 enum gnu_v3_ctor_kinds kind;
 switch ((*((di)->n++)))
   {
   case '1':
     kind = gnu_v3_complete_object_ctor;
     break;
   case '2':
     kind = gnu_v3_base_object_ctor;
     break;
   case '3':
     kind = gnu_v3_complete_object_allocating_ctor;
     break;
   default:
     return ((void *)0);
   }
 return d_make_ctor (di, kind, di->last_name);
      }
    case 'D':
      {
 enum gnu_v3_dtor_kinds kind;
 switch ((*((di)->n++)))
   {
   case '0':
     kind = gnu_v3_deleting_dtor;
     break;
   case '1':
     kind = gnu_v3_complete_object_dtor;
     break;
   case '2':
     kind = gnu_v3_base_object_dtor;
     break;
   default:
     return ((void *)0);
   }
 return d_make_dtor (di, kind, di->last_name);
      }
    default:
      return ((void *)0);
    }
}
const struct demangle_builtin_type_info
cplus_demangle_builtin_types[(26)] =
{
          { "signed char", (sizeof "signed char") - 1, "signed char", (sizeof "signed char") - 1, D_PRINT_DEFAULT },
          { "bool", (sizeof "bool") - 1, "boolean", (sizeof "boolean") - 1, D_PRINT_BOOL },
          { "char", (sizeof "char") - 1, "byte", (sizeof "byte") - 1, D_PRINT_DEFAULT },
          { "double", (sizeof "double") - 1, "double", (sizeof "double") - 1, D_PRINT_FLOAT },
          { "long double", (sizeof "long double") - 1, "long double", (sizeof "long double") - 1, D_PRINT_FLOAT },
          { "float", (sizeof "float") - 1, "float", (sizeof "float") - 1, D_PRINT_FLOAT },
          { "__float128", (sizeof "__float128") - 1, "__float128", (sizeof "__float128") - 1, D_PRINT_FLOAT },
          { "unsigned char", (sizeof "unsigned char") - 1, "unsigned char", (sizeof "unsigned char") - 1, D_PRINT_DEFAULT },
          { "int", (sizeof "int") - 1, "int", (sizeof "int") - 1, D_PRINT_INT },
          { "unsigned int", (sizeof "unsigned int") - 1, "unsigned", (sizeof "unsigned") - 1, D_PRINT_UNSIGNED },
          { ((void *)0), 0, ((void *)0), 0, D_PRINT_DEFAULT },
          { "long", (sizeof "long") - 1, "long", (sizeof "long") - 1, D_PRINT_LONG },
          { "unsigned long", (sizeof "unsigned long") - 1, "unsigned long", (sizeof "unsigned long") - 1, D_PRINT_UNSIGNED_LONG },
          { "__int128", (sizeof "__int128") - 1, "__int128", (sizeof "__int128") - 1, D_PRINT_DEFAULT },
          { "unsigned __int128", (sizeof "unsigned __int128") - 1, "unsigned __int128", (sizeof "unsigned __int128") - 1,
     D_PRINT_DEFAULT },
          { ((void *)0), 0, ((void *)0), 0, D_PRINT_DEFAULT },
          { ((void *)0), 0, ((void *)0), 0, D_PRINT_DEFAULT },
          { ((void *)0), 0, ((void *)0), 0, D_PRINT_DEFAULT },
          { "short", (sizeof "short") - 1, "short", (sizeof "short") - 1, D_PRINT_DEFAULT },
          { "unsigned short", (sizeof "unsigned short") - 1, "unsigned short", (sizeof "unsigned short") - 1, D_PRINT_DEFAULT },
          { ((void *)0), 0, ((void *)0), 0, D_PRINT_DEFAULT },
          { "void", (sizeof "void") - 1, "void", (sizeof "void") - 1, D_PRINT_VOID },
          { "wchar_t", (sizeof "wchar_t") - 1, "char", (sizeof "char") - 1, D_PRINT_DEFAULT },
          { "long long", (sizeof "long long") - 1, "long", (sizeof "long") - 1, D_PRINT_LONG_LONG },
          { "unsigned long long", (sizeof "unsigned long long") - 1, "unsigned long long", (sizeof "unsigned long long") - 1,
     D_PRINT_UNSIGNED_LONG_LONG },
          { "...", (sizeof "...") - 1, "...", (sizeof "...") - 1, D_PRINT_DEFAULT },
};
struct demangle_component *
cplus_demangle_type (di)
     struct d_info *di;
{
  char peek;
  struct demangle_component *ret;
  int can_subst;
  peek = (*((di)->n));
  if (peek == 'r' || peek == 'V' || peek == 'K')
    {
      struct demangle_component **pret;
      pret = d_cv_qualifiers (di, &ret, 0);
      if (pret == ((void *)0))
 return ((void *)0);
      *pret = cplus_demangle_type (di);
      if (! d_add_substitution (di, ret))
 return ((void *)0);
      return ret;
    }
  can_subst = 1;
  switch (peek)
    {
    case 'a': case 'b': case 'c': case 'd': case 'e': case 'f': case 'g':
    case 'h': case 'i': case 'j': case 'l': case 'm': case 'n':
    case 'o': case 's': case 't':
    case 'v': case 'w': case 'x': case 'y': case 'z':
      ret = d_make_builtin_type (di,
     &cplus_demangle_builtin_types[peek - 'a']);
      di->expansion += ret->u.s_builtin.type->len;
      can_subst = 0;
      ((di)->n += (1));
      break;
    case 'u':
      ((di)->n += (1));
      ret = d_make_comp (di, DEMANGLE_COMPONENT_VENDOR_TYPE,
    d_source_name (di), ((void *)0));
      break;
    case 'F':
      ret = d_function_type (di);
      break;
    case '0': case '1': case '2': case '3': case '4':
    case '5': case '6': case '7': case '8': case '9':
    case 'N':
    case 'Z':
      ret = d_class_enum_type (di);
      break;
    case 'A':
      ret = d_array_type (di);
      break;
    case 'M':
      ret = d_pointer_to_member_type (di);
      break;
    case 'T':
      ret = d_template_param (di);
      if ((*((di)->n)) == 'I')
 {
   if (! d_add_substitution (di, ret))
     return ((void *)0);
   ret = d_make_comp (di, DEMANGLE_COMPONENT_TEMPLATE, ret,
        d_template_args (di));
 }
      break;
    case 'S':
      {
 char peek_next;
 peek_next = ((di)->n[1]);
 if (((peek_next) >= '0' && (peek_next) <= '9')
     || peek_next == '_'
     || ((peek_next) >= 'A' && (peek_next) <= 'Z'))
   {
     ret = d_substitution (di, 0);
     if ((*((di)->n)) == 'I')
       ret = d_make_comp (di, DEMANGLE_COMPONENT_TEMPLATE, ret,
     d_template_args (di));
     else
       can_subst = 0;
   }
 else
   {
     ret = d_class_enum_type (di);
     if (ret != ((void *)0) && ret->type == DEMANGLE_COMPONENT_SUB_STD)
       can_subst = 0;
   }
      }
      break;
    case 'P':
      ((di)->n += (1));
      ret = d_make_comp (di, DEMANGLE_COMPONENT_POINTER,
    cplus_demangle_type (di), ((void *)0));
      break;
    case 'R':
      ((di)->n += (1));
      ret = d_make_comp (di, DEMANGLE_COMPONENT_REFERENCE,
    cplus_demangle_type (di), ((void *)0));
      break;
    case 'C':
      ((di)->n += (1));
      ret = d_make_comp (di, DEMANGLE_COMPONENT_COMPLEX,
    cplus_demangle_type (di), ((void *)0));
      break;
    case 'G':
      ((di)->n += (1));
      ret = d_make_comp (di, DEMANGLE_COMPONENT_IMAGINARY,
    cplus_demangle_type (di), ((void *)0));
      break;
    case 'U':
      ((di)->n += (1));
      ret = d_source_name (di);
      ret = d_make_comp (di, DEMANGLE_COMPONENT_VENDOR_TYPE_QUAL,
    cplus_demangle_type (di), ret);
      break;
    default:
      return ((void *)0);
    }
  if (can_subst)
    {
      if (! d_add_substitution (di, ret))
 return ((void *)0);
    }
  return ret;
}
static struct demangle_component **
d_cv_qualifiers (di, pret, member_fn)
     struct d_info *di;
     struct demangle_component **pret;
     int member_fn;
{
  char peek;
  peek = (*((di)->n));
  while (peek == 'r' || peek == 'V' || peek == 'K')
    {
      enum demangle_component_type t;
      ((di)->n += (1));
      if (peek == 'r')
 {
   t = (member_fn
        ? DEMANGLE_COMPONENT_RESTRICT_THIS
        : DEMANGLE_COMPONENT_RESTRICT);
   di->expansion += sizeof "restrict";
 }
      else if (peek == 'V')
 {
   t = (member_fn
        ? DEMANGLE_COMPONENT_VOLATILE_THIS
        : DEMANGLE_COMPONENT_VOLATILE);
   di->expansion += sizeof "volatile";
 }
      else
 {
   t = (member_fn
        ? DEMANGLE_COMPONENT_CONST_THIS
        : DEMANGLE_COMPONENT_CONST);
   di->expansion += sizeof "const";
 }
      *pret = d_make_comp (di, t, ((void *)0), ((void *)0));
      if (*pret == ((void *)0))
 return ((void *)0);
      pret = &((*pret)->u.s_binary.left);
      peek = (*((di)->n));
    }
  return pret;
}
static struct demangle_component *
d_function_type (di)
     struct d_info *di;
{
  struct demangle_component *ret;
  if ((*((di)->n++)) != 'F')
    return ((void *)0);
  if ((*((di)->n)) == 'Y')
    {
      ((di)->n += (1));
    }
  ret = d_bare_function_type (di, 1);
  if ((*((di)->n++)) != 'E')
    return ((void *)0);
  return ret;
}
static struct demangle_component *
d_bare_function_type (di, has_return_type)
     struct d_info *di;
     int has_return_type;
{
  struct demangle_component *return_type;
  struct demangle_component *tl;
  struct demangle_component **ptl;
  return_type = ((void *)0);
  tl = ((void *)0);
  ptl = &tl;
  while (1)
    {
      char peek;
      struct demangle_component *type;
      peek = (*((di)->n));
      if (peek == '\0' || peek == 'E')
 break;
      type = cplus_demangle_type (di);
      if (type == ((void *)0))
 return ((void *)0);
      if (has_return_type)
 {
   return_type = type;
   has_return_type = 0;
 }
      else
 {
   *ptl = d_make_comp (di, DEMANGLE_COMPONENT_ARGLIST, type, ((void *)0));
   if (*ptl == ((void *)0))
     return ((void *)0);
   ptl = &((*ptl)->u.s_binary.right);
 }
    }
  if (tl == ((void *)0))
    return ((void *)0);
  if (((tl)->u.s_binary.right) == ((void *)0)
      && ((tl)->u.s_binary.left)->type == DEMANGLE_COMPONENT_BUILTIN_TYPE
      && ((tl)->u.s_binary.left)->u.s_builtin.type->print == D_PRINT_VOID)
    {
      di->expansion -= ((tl)->u.s_binary.left)->u.s_builtin.type->len;
      tl = ((void *)0);
    }
  return d_make_comp (di, DEMANGLE_COMPONENT_FUNCTION_TYPE, return_type, tl);
}
static struct demangle_component *
d_class_enum_type (di)
     struct d_info *di;
{
  return d_name (di);
}
static struct demangle_component *
d_array_type (di)
     struct d_info *di;
{
  char peek;
  struct demangle_component *dim;
  if ((*((di)->n++)) != 'A')
    return ((void *)0);
  peek = (*((di)->n));
  if (peek == '_')
    dim = ((void *)0);
  else if (((peek) >= '0' && (peek) <= '9'))
    {
      const char *s;
      s = ((di)->n);
      do
 {
   ((di)->n += (1));
   peek = (*((di)->n));
 }
      while (((peek) >= '0' && (peek) <= '9'));
      dim = d_make_name (di, s, ((di)->n) - s);
      if (dim == ((void *)0))
 return ((void *)0);
    }
  else
    {
      dim = d_expression (di);
      if (dim == ((void *)0))
 return ((void *)0);
    }
  if ((*((di)->n++)) != '_')
    return ((void *)0);
  return d_make_comp (di, DEMANGLE_COMPONENT_ARRAY_TYPE, dim,
        cplus_demangle_type (di));
}
static struct demangle_component *
d_pointer_to_member_type (di)
     struct d_info *di;
{
  struct demangle_component *cl;
  struct demangle_component *mem;
  struct demangle_component **pmem;
  if ((*((di)->n++)) != 'M')
    return ((void *)0);
  cl = cplus_demangle_type (di);
  pmem = d_cv_qualifiers (di, &mem, 1);
  if (pmem == ((void *)0))
    return ((void *)0);
  *pmem = cplus_demangle_type (di);
  return d_make_comp (di, DEMANGLE_COMPONENT_PTRMEM_TYPE, cl, mem);
}
static struct demangle_component *
d_template_param (di)
     struct d_info *di;
{
  long param;
  if ((*((di)->n++)) != 'T')
    return ((void *)0);
  if ((*((di)->n)) == '_')
    param = 0;
  else
    {
      param = d_number (di);
      if (param < 0)
 return ((void *)0);
      param += 1;
    }
  if ((*((di)->n++)) != '_')
    return ((void *)0);
  ++di->did_subs;
  return d_make_template_param (di, param);
}
static struct demangle_component *
d_template_args (di)
     struct d_info *di;
{
  struct demangle_component *hold_last_name;
  struct demangle_component *al;
  struct demangle_component **pal;
  hold_last_name = di->last_name;
  if ((*((di)->n++)) != 'I')
    return ((void *)0);
  al = ((void *)0);
  pal = &al;
  while (1)
    {
      struct demangle_component *a;
      a = d_template_arg (di);
      if (a == ((void *)0))
 return ((void *)0);
      *pal = d_make_comp (di, DEMANGLE_COMPONENT_TEMPLATE_ARGLIST, a, ((void *)0));
      if (*pal == ((void *)0))
 return ((void *)0);
      pal = &((*pal)->u.s_binary.right);
      if ((*((di)->n)) == 'E')
 {
   ((di)->n += (1));
   break;
 }
    }
  di->last_name = hold_last_name;
  return al;
}
static struct demangle_component *
d_template_arg (di)
     struct d_info *di;
{
  struct demangle_component *ret;
  switch ((*((di)->n)))
    {
    case 'X':
      ((di)->n += (1));
      ret = d_expression (di);
      if ((*((di)->n++)) != 'E')
 return ((void *)0);
      return ret;
    case 'L':
      return d_expr_primary (di);
    default:
      return cplus_demangle_type (di);
    }
}
static struct demangle_component *
d_expression (di)
     struct d_info *di;
{
  char peek;
  peek = (*((di)->n));
  if (peek == 'L')
    return d_expr_primary (di);
  else if (peek == 'T')
    return d_template_param (di);
  else if (peek == 's' && ((di)->n[1]) == 'r')
    {
      struct demangle_component *type;
      struct demangle_component *name;
      ((di)->n += (2));
      type = cplus_demangle_type (di);
      name = d_unqualified_name (di);
      if ((*((di)->n)) != 'I')
 return d_make_comp (di, DEMANGLE_COMPONENT_QUAL_NAME, type, name);
      else
 return d_make_comp (di, DEMANGLE_COMPONENT_QUAL_NAME, type,
       d_make_comp (di, DEMANGLE_COMPONENT_TEMPLATE, name,
      d_template_args (di)));
    }
  else
    {
      struct demangle_component *op;
      int args;
      op = d_operator_name (di);
      if (op == ((void *)0))
 return ((void *)0);
      if (op->type == DEMANGLE_COMPONENT_OPERATOR)
 di->expansion += op->u.s_operator.op->len - 2;
      if (op->type == DEMANGLE_COMPONENT_OPERATOR
   && strcmp (op->u.s_operator.op->code, "st") == 0)
 return d_make_comp (di, DEMANGLE_COMPONENT_UNARY, op,
       cplus_demangle_type (di));
      switch (op->type)
 {
 default:
   return ((void *)0);
 case DEMANGLE_COMPONENT_OPERATOR:
   args = op->u.s_operator.op->args;
   break;
 case DEMANGLE_COMPONENT_EXTENDED_OPERATOR:
   args = op->u.s_extended_operator.args;
   break;
 case DEMANGLE_COMPONENT_CAST:
   args = 1;
   break;
 }
      switch (args)
 {
 case 1:
   return d_make_comp (di, DEMANGLE_COMPONENT_UNARY, op,
         d_expression (di));
 case 2:
   {
     struct demangle_component *left;
     left = d_expression (di);
     return d_make_comp (di, DEMANGLE_COMPONENT_BINARY, op,
    d_make_comp (di,
          DEMANGLE_COMPONENT_BINARY_ARGS,
          left,
          d_expression (di)));
   }
 case 3:
   {
     struct demangle_component *first;
     struct demangle_component *second;
     first = d_expression (di);
     second = d_expression (di);
     return d_make_comp (di, DEMANGLE_COMPONENT_TRINARY, op,
    d_make_comp (di,
          DEMANGLE_COMPONENT_TRINARY_ARG1,
          first,
          d_make_comp (di,
         DEMANGLE_COMPONENT_TRINARY_ARG2,
         second,
         d_expression (di))));
   }
 default:
   return ((void *)0);
 }
    }
}
static struct demangle_component *
d_expr_primary (di)
     struct d_info *di;
{
  struct demangle_component *ret;
  if ((*((di)->n++)) != 'L')
    return ((void *)0);
  if ((*((di)->n)) == '_')
    ret = cplus_demangle_mangled_name (di, 0);
  else
    {
      struct demangle_component *type;
      enum demangle_component_type t;
      const char *s;
      type = cplus_demangle_type (di);
      if (type == ((void *)0))
 return ((void *)0);
      if (type->type == DEMANGLE_COMPONENT_BUILTIN_TYPE
   && type->u.s_builtin.type->print != D_PRINT_DEFAULT)
 di->expansion -= type->u.s_builtin.type->len;
      t = DEMANGLE_COMPONENT_LITERAL;
      if ((*((di)->n)) == 'n')
 {
   t = DEMANGLE_COMPONENT_LITERAL_NEG;
   ((di)->n += (1));
 }
      s = ((di)->n);
      while ((*((di)->n)) != 'E')
 ((di)->n += (1));
      ret = d_make_comp (di, t, type, d_make_name (di, s, ((di)->n) - s));
    }
  if ((*((di)->n++)) != 'E')
    return ((void *)0);
  return ret;
}
static struct demangle_component *
d_local_name (di)
     struct d_info *di;
{
  struct demangle_component *function;
  if ((*((di)->n++)) != 'Z')
    return ((void *)0);
  function = d_encoding (di, 0);
  if ((*((di)->n++)) != 'E')
    return ((void *)0);
  if ((*((di)->n)) == 's')
    {
      ((di)->n += (1));
      if (! d_discriminator (di))
 return ((void *)0);
      return d_make_comp (di, DEMANGLE_COMPONENT_LOCAL_NAME, function,
     d_make_name (di, "string literal",
           sizeof "string literal" - 1));
    }
  else
    {
      struct demangle_component *name;
      name = d_name (di);
      if (! d_discriminator (di))
 return ((void *)0);
      return d_make_comp (di, DEMANGLE_COMPONENT_LOCAL_NAME, function, name);
    }
}
static int
d_discriminator (di)
     struct d_info *di;
{
  long discrim;
  if ((*((di)->n)) != '_')
    return 1;
  ((di)->n += (1));
  discrim = d_number (di);
  if (discrim < 0)
    return 0;
  return 1;
}
static int
d_add_substitution (di, dc)
     struct d_info *di;
     struct demangle_component *dc;
{
  if (dc == ((void *)0))
    return 0;
  if (di->next_sub >= di->num_subs)
    return 0;
  di->subs[di->next_sub] = dc;
  ++di->next_sub;
  return 1;
}
static const struct d_standard_sub_info standard_subs[] =
{
  { 't', "std", (sizeof "std") - 1,
    "std", (sizeof "std") - 1,
    ((void *)0), 0 },
  { 'a', "std::allocator", (sizeof "std::allocator") - 1,
    "std::allocator", (sizeof "std::allocator") - 1,
    "allocator", (sizeof "allocator") - 1 },
  { 'b', "std::basic_string", (sizeof "std::basic_string") - 1,
    "std::basic_string", (sizeof "std::basic_string") - 1,
    "basic_string", (sizeof "basic_string") - 1 },
  { 's', "std::string", (sizeof "std::string") - 1,
    "std::basic_string<char, std::char_traits<char>, std::allocator<char> >", (sizeof "std::basic_string<char, std::char_traits<char>, std::allocator<char> >") - 1,
    "basic_string", (sizeof "basic_string") - 1 },
  { 'i', "std::istream", (sizeof "std::istream") - 1,
    "std::basic_istream<char, std::char_traits<char> >", (sizeof "std::basic_istream<char, std::char_traits<char> >") - 1,
    "basic_istream", (sizeof "basic_istream") - 1 },
  { 'o', "std::ostream", (sizeof "std::ostream") - 1,
    "std::basic_ostream<char, std::char_traits<char> >", (sizeof "std::basic_ostream<char, std::char_traits<char> >") - 1,
    "basic_ostream", (sizeof "basic_ostream") - 1 },
  { 'd', "std::iostream", (sizeof "std::iostream") - 1,
    "std::basic_iostream<char, std::char_traits<char> >", (sizeof "std::basic_iostream<char, std::char_traits<char> >") - 1,
    "basic_iostream", (sizeof "basic_iostream") - 1 }
};
static struct demangle_component *
d_substitution (di, prefix)
     struct d_info *di;
     int prefix;
{
  char c;
  if ((*((di)->n++)) != 'S')
    return ((void *)0);
  c = (*((di)->n++));
  if (c == '_' || ((c) >= '0' && (c) <= '9') || ((c) >= 'A' && (c) <= 'Z'))
    {
      int id;
      id = 0;
      if (c != '_')
 {
   do
     {
       if (((c) >= '0' && (c) <= '9'))
  id = id * 36 + c - '0';
       else if (((c) >= 'A' && (c) <= 'Z'))
  id = id * 36 + c - 'A' + 10;
       else
  return ((void *)0);
       c = (*((di)->n++));
     }
   while (c != '_');
   ++id;
 }
      if (id >= di->next_sub)
 return ((void *)0);
      ++di->did_subs;
      return di->subs[id];
    }
  else
    {
      int verbose;
      const struct d_standard_sub_info *p;
      const struct d_standard_sub_info *pend;
      verbose = (di->options & (1 << 3)) != 0;
      if (! verbose && prefix)
 {
   char peek;
   peek = (*((di)->n));
   if (peek == 'C' || peek == 'D')
     verbose = 1;
 }
      pend = (&standard_subs[0]
       + sizeof standard_subs / sizeof standard_subs[0]);
      for (p = &standard_subs[0]; p < pend; ++p)
 {
   if (c == p->code)
     {
       const char *s;
       int len;
       if (p->set_last_name != ((void *)0))
  di->last_name = d_make_sub (di, p->set_last_name,
         p->set_last_name_len);
       if (verbose)
  {
    s = p->full_expansion;
    len = p->full_len;
  }
       else
  {
    s = p->simple_expansion;
    len = p->simple_len;
  }
       di->expansion += len;
       return d_make_sub (di, s, len);
     }
 }
      return ((void *)0);
    }
}
static void
d_print_resize (dpi, add)
     struct d_print_info *dpi;
     size_t add;
{
  size_t need;
  if (dpi->buf == ((void *)0))
    return;
  need = dpi->len + add;
  while (need > dpi->alc)
    {
      size_t newalc;
      char *newbuf;
      newalc = dpi->alc * 2;
      newbuf = realloc (dpi->buf, newalc);
      if (newbuf == ((void *)0))
 {
   free (dpi->buf);
   dpi->buf = ((void *)0);
   dpi->allocation_failure = 1;
   return;
 }
      dpi->buf = newbuf;
      dpi->alc = newalc;
    }
}
static void
d_print_append_char (dpi, c)
     struct d_print_info *dpi;
     int c;
{
  if (dpi->buf != ((void *)0))
    {
      if (dpi->len >= dpi->alc)
 {
   d_print_resize (dpi, 1);
   if (dpi->buf == ((void *)0))
     return;
 }
      dpi->buf[dpi->len] = c;
      ++dpi->len;
    }
}
static void
d_print_append_buffer (dpi, s, l)
     struct d_print_info *dpi;
     const char *s;
     size_t l;
{
  if (dpi->buf != ((void *)0))
    {
      if (dpi->len + l > dpi->alc)
 {
   d_print_resize (dpi, l);
   if (dpi->buf == ((void *)0))
     return;
 }
      memcpy (dpi->buf + dpi->len, s, l);
      dpi->len += l;
    }
}
static void
d_print_error (dpi)
     struct d_print_info *dpi;
{
  free (dpi->buf);
  dpi->buf = ((void *)0);
}
char *
cplus_demangle_print (options, dc, estimate, palc)
     int options;
     const struct demangle_component *dc;
     int estimate;
     size_t *palc;
{
  struct d_print_info dpi;
  dpi.options = options;
  dpi.alc = estimate + 1;
  dpi.buf = malloc (dpi.alc);
  if (dpi.buf == ((void *)0))
    {
      *palc = 1;
      return ((void *)0);
    }
  dpi.len = 0;
  dpi.templates = ((void *)0);
  dpi.modifiers = ((void *)0);
  dpi.allocation_failure = 0;
  d_print_comp (&dpi, dc);
  do { if ((&dpi)->buf != ((void *)0) && (&dpi)->len < (&dpi)->alc) (&dpi)->buf[(&dpi)->len++] = ('\0'); else d_print_append_char ((&dpi), ('\0')); } while (0);
  if (dpi.buf != ((void *)0))
    *palc = dpi.alc;
  else
    *palc = dpi.allocation_failure;
  return dpi.buf;
}
static void
d_print_comp (dpi, dc)
     struct d_print_info *dpi;
     const struct demangle_component *dc;
{
  if (dc == ((void *)0))
    {
      d_print_error (dpi);
      return;
    }
  if (((dpi)->buf == ((void *)0)))
    return;
  switch (dc->type)
    {
    case DEMANGLE_COMPONENT_NAME:
      if ((dpi->options & (1 << 2)) == 0)
 do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (dc->u.s_name.len) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (dc->u.s_name.s), (dc->u.s_name.len)); (dpi)->len += dc->u.s_name.len; } else d_print_append_buffer ((dpi), (dc->u.s_name.s), (dc->u.s_name.len)); } while (0);
      else
 d_print_java_identifier (dpi, dc->u.s_name.s, dc->u.s_name.len);
      return;
    case DEMANGLE_COMPONENT_QUAL_NAME:
    case DEMANGLE_COMPONENT_LOCAL_NAME:
      d_print_comp (dpi, ((dc)->u.s_binary.left));
      if ((dpi->options & (1 << 2)) == 0)
 do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof ("::") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (("::")), (sizeof ("::") - 1)); (dpi)->len += sizeof ("::") - 1; } else d_print_append_buffer ((dpi), (("::")), (sizeof ("::") - 1)); } while (0);
      else
 do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = ('.'); else d_print_append_char ((dpi), ('.')); } while (0);
      d_print_comp (dpi, ((dc)->u.s_binary.right));
      return;
    case DEMANGLE_COMPONENT_TYPED_NAME:
      {
 struct d_print_mod *hold_modifiers;
 struct demangle_component *typed_name;
 struct d_print_mod adpm[4];
 unsigned int i;
 struct d_print_template dpt;
 hold_modifiers = dpi->modifiers;
 i = 0;
 typed_name = ((dc)->u.s_binary.left);
 while (typed_name != ((void *)0))
   {
     if (i >= sizeof adpm / sizeof adpm[0])
       {
  d_print_error (dpi);
  return;
       }
     adpm[i].next = dpi->modifiers;
     dpi->modifiers = &adpm[i];
     adpm[i].mod = typed_name;
     adpm[i].printed = 0;
     adpm[i].templates = dpi->templates;
     ++i;
     if (typed_name->type != DEMANGLE_COMPONENT_RESTRICT_THIS
  && typed_name->type != DEMANGLE_COMPONENT_VOLATILE_THIS
  && typed_name->type != DEMANGLE_COMPONENT_CONST_THIS)
       break;
     typed_name = ((typed_name)->u.s_binary.left);
   }
 if (typed_name->type == DEMANGLE_COMPONENT_TEMPLATE)
   {
     dpt.next = dpi->templates;
     dpi->templates = &dpt;
     dpt.template = typed_name;
   }
 if (typed_name->type == DEMANGLE_COMPONENT_LOCAL_NAME)
   {
     struct demangle_component *local_name;
     local_name = ((typed_name)->u.s_binary.right);
     while (local_name->type == DEMANGLE_COMPONENT_RESTRICT_THIS
     || local_name->type == DEMANGLE_COMPONENT_VOLATILE_THIS
     || local_name->type == DEMANGLE_COMPONENT_CONST_THIS)
       {
  if (i >= sizeof adpm / sizeof adpm[0])
    {
      d_print_error (dpi);
      return;
    }
  adpm[i] = adpm[i - 1];
  adpm[i].next = &adpm[i - 1];
  dpi->modifiers = &adpm[i];
  adpm[i - 1].mod = local_name;
  adpm[i - 1].printed = 0;
  adpm[i - 1].templates = dpi->templates;
  ++i;
  local_name = ((local_name)->u.s_binary.left);
       }
   }
 d_print_comp (dpi, ((dc)->u.s_binary.right));
 if (typed_name->type == DEMANGLE_COMPONENT_TEMPLATE)
   dpi->templates = dpt.next;
 while (i > 0)
   {
     --i;
     if (! adpm[i].printed)
       {
  do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = (' '); else d_print_append_char ((dpi), (' ')); } while (0);
  d_print_mod (dpi, adpm[i].mod);
       }
   }
 dpi->modifiers = hold_modifiers;
 return;
      }
    case DEMANGLE_COMPONENT_TEMPLATE:
      {
 struct d_print_mod *hold_dpm;
 hold_dpm = dpi->modifiers;
 dpi->modifiers = ((void *)0);
 d_print_comp (dpi, ((dc)->u.s_binary.left));
 if (((dpi)->buf == ((void *)0) || (dpi)->len == 0 ? '\0' : (dpi)->buf[(dpi)->len - 1]) == '<')
   do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = (' '); else d_print_append_char ((dpi), (' ')); } while (0);
 do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = ('<'); else d_print_append_char ((dpi), ('<')); } while (0);
 d_print_comp (dpi, ((dc)->u.s_binary.right));
 if (((dpi)->buf == ((void *)0) || (dpi)->len == 0 ? '\0' : (dpi)->buf[(dpi)->len - 1]) == '>')
   do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = (' '); else d_print_append_char ((dpi), (' ')); } while (0);
 do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = ('>'); else d_print_append_char ((dpi), ('>')); } while (0);
 dpi->modifiers = hold_dpm;
 return;
      }
    case DEMANGLE_COMPONENT_TEMPLATE_PARAM:
      {
 long i;
 struct demangle_component *a;
 struct d_print_template *hold_dpt;
 if (dpi->templates == ((void *)0))
   {
     d_print_error (dpi);
     return;
   }
 i = dc->u.s_number.number;
 for (a = ((dpi->templates->template)->u.s_binary.right);
      a != ((void *)0);
      a = ((a)->u.s_binary.right))
   {
     if (a->type != DEMANGLE_COMPONENT_TEMPLATE_ARGLIST)
       {
  d_print_error (dpi);
  return;
       }
     if (i <= 0)
       break;
     --i;
   }
 if (i != 0 || a == ((void *)0))
   {
     d_print_error (dpi);
     return;
   }
 hold_dpt = dpi->templates;
 dpi->templates = hold_dpt->next;
 d_print_comp (dpi, ((a)->u.s_binary.left));
 dpi->templates = hold_dpt;
 return;
      }
    case DEMANGLE_COMPONENT_CTOR:
      d_print_comp (dpi, dc->u.s_ctor.name);
      return;
    case DEMANGLE_COMPONENT_DTOR:
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = ('~'); else d_print_append_char ((dpi), ('~')); } while (0);
      d_print_comp (dpi, dc->u.s_dtor.name);
      return;
    case DEMANGLE_COMPONENT_VTABLE:
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof ("vtable for ") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (("vtable for ")), (sizeof ("vtable for ") - 1)); (dpi)->len += sizeof ("vtable for ") - 1; } else d_print_append_buffer ((dpi), (("vtable for ")), (sizeof ("vtable for ") - 1)); } while (0);
      d_print_comp (dpi, ((dc)->u.s_binary.left));
      return;
    case DEMANGLE_COMPONENT_VTT:
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof ("VTT for ") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (("VTT for ")), (sizeof ("VTT for ") - 1)); (dpi)->len += sizeof ("VTT for ") - 1; } else d_print_append_buffer ((dpi), (("VTT for ")), (sizeof ("VTT for ") - 1)); } while (0);
      d_print_comp (dpi, ((dc)->u.s_binary.left));
      return;
    case DEMANGLE_COMPONENT_CONSTRUCTION_VTABLE:
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof ("construction vtable for ") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (("construction vtable for ")), (sizeof ("construction vtable for ") - 1)); (dpi)->len += sizeof ("construction vtable for ") - 1; } else d_print_append_buffer ((dpi), (("construction vtable for ")), (sizeof ("construction vtable for ") - 1)); } while (0);
      d_print_comp (dpi, ((dc)->u.s_binary.left));
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof ("-in-") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (("-in-")), (sizeof ("-in-") - 1)); (dpi)->len += sizeof ("-in-") - 1; } else d_print_append_buffer ((dpi), (("-in-")), (sizeof ("-in-") - 1)); } while (0);
      d_print_comp (dpi, ((dc)->u.s_binary.right));
      return;
    case DEMANGLE_COMPONENT_TYPEINFO:
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof ("typeinfo for ") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (("typeinfo for ")), (sizeof ("typeinfo for ") - 1)); (dpi)->len += sizeof ("typeinfo for ") - 1; } else d_print_append_buffer ((dpi), (("typeinfo for ")), (sizeof ("typeinfo for ") - 1)); } while (0);
      d_print_comp (dpi, ((dc)->u.s_binary.left));
      return;
    case DEMANGLE_COMPONENT_TYPEINFO_NAME:
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof ("typeinfo name for ") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (("typeinfo name for ")), (sizeof ("typeinfo name for ") - 1)); (dpi)->len += sizeof ("typeinfo name for ") - 1; } else d_print_append_buffer ((dpi), (("typeinfo name for ")), (sizeof ("typeinfo name for ") - 1)); } while (0);
      d_print_comp (dpi, ((dc)->u.s_binary.left));
      return;
    case DEMANGLE_COMPONENT_TYPEINFO_FN:
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof ("typeinfo fn for ") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (("typeinfo fn for ")), (sizeof ("typeinfo fn for ") - 1)); (dpi)->len += sizeof ("typeinfo fn for ") - 1; } else d_print_append_buffer ((dpi), (("typeinfo fn for ")), (sizeof ("typeinfo fn for ") - 1)); } while (0);
      d_print_comp (dpi, ((dc)->u.s_binary.left));
      return;
    case DEMANGLE_COMPONENT_THUNK:
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof ("non-virtual thunk to ") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (("non-virtual thunk to ")), (sizeof ("non-virtual thunk to ") - 1)); (dpi)->len += sizeof ("non-virtual thunk to ") - 1; } else d_print_append_buffer ((dpi), (("non-virtual thunk to ")), (sizeof ("non-virtual thunk to ") - 1)); } while (0);
      d_print_comp (dpi, ((dc)->u.s_binary.left));
      return;
    case DEMANGLE_COMPONENT_VIRTUAL_THUNK:
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof ("virtual thunk to ") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (("virtual thunk to ")), (sizeof ("virtual thunk to ") - 1)); (dpi)->len += sizeof ("virtual thunk to ") - 1; } else d_print_append_buffer ((dpi), (("virtual thunk to ")), (sizeof ("virtual thunk to ") - 1)); } while (0);
      d_print_comp (dpi, ((dc)->u.s_binary.left));
      return;
    case DEMANGLE_COMPONENT_COVARIANT_THUNK:
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof ("covariant return thunk to ") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (("covariant return thunk to ")), (sizeof ("covariant return thunk to ") - 1)); (dpi)->len += sizeof ("covariant return thunk to ") - 1; } else d_print_append_buffer ((dpi), (("covariant return thunk to ")), (sizeof ("covariant return thunk to ") - 1)); } while (0);
      d_print_comp (dpi, ((dc)->u.s_binary.left));
      return;
    case DEMANGLE_COMPONENT_JAVA_CLASS:
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof ("java Class for ") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (("java Class for ")), (sizeof ("java Class for ") - 1)); (dpi)->len += sizeof ("java Class for ") - 1; } else d_print_append_buffer ((dpi), (("java Class for ")), (sizeof ("java Class for ") - 1)); } while (0);
      d_print_comp (dpi, ((dc)->u.s_binary.left));
      return;
    case DEMANGLE_COMPONENT_GUARD:
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof ("guard variable for ") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (("guard variable for ")), (sizeof ("guard variable for ") - 1)); (dpi)->len += sizeof ("guard variable for ") - 1; } else d_print_append_buffer ((dpi), (("guard variable for ")), (sizeof ("guard variable for ") - 1)); } while (0);
      d_print_comp (dpi, ((dc)->u.s_binary.left));
      return;
    case DEMANGLE_COMPONENT_REFTEMP:
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof ("reference temporary for ") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (("reference temporary for ")), (sizeof ("reference temporary for ") - 1)); (dpi)->len += sizeof ("reference temporary for ") - 1; } else d_print_append_buffer ((dpi), (("reference temporary for ")), (sizeof ("reference temporary for ") - 1)); } while (0);
      d_print_comp (dpi, ((dc)->u.s_binary.left));
      return;
    case DEMANGLE_COMPONENT_SUB_STD:
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (dc->u.s_string.len) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (dc->u.s_string.string1), (dc->u.s_string.len)); (dpi)->len += dc->u.s_string.len; } else d_print_append_buffer ((dpi), (dc->u.s_string.string1), (dc->u.s_string.len)); } while (0);
      return;
    case DEMANGLE_COMPONENT_RESTRICT:
    case DEMANGLE_COMPONENT_VOLATILE:
    case DEMANGLE_COMPONENT_CONST:
      {
 struct d_print_mod *pdpm;
 for (pdpm = dpi->modifiers; pdpm != ((void *)0); pdpm = pdpm->next)
   {
     if (! pdpm->printed)
       {
  if (pdpm->mod->type != DEMANGLE_COMPONENT_RESTRICT
      && pdpm->mod->type != DEMANGLE_COMPONENT_VOLATILE
      && pdpm->mod->type != DEMANGLE_COMPONENT_CONST)
    break;
  if (pdpm->mod->type == dc->type)
    {
      d_print_comp (dpi, ((dc)->u.s_binary.left));
      return;
    }
       }
   }
      }
    case DEMANGLE_COMPONENT_RESTRICT_THIS:
    case DEMANGLE_COMPONENT_VOLATILE_THIS:
    case DEMANGLE_COMPONENT_CONST_THIS:
    case DEMANGLE_COMPONENT_VENDOR_TYPE_QUAL:
    case DEMANGLE_COMPONENT_POINTER:
    case DEMANGLE_COMPONENT_REFERENCE:
    case DEMANGLE_COMPONENT_COMPLEX:
    case DEMANGLE_COMPONENT_IMAGINARY:
      {
 struct d_print_mod dpm;
 dpm.next = dpi->modifiers;
 dpi->modifiers = &dpm;
 dpm.mod = dc;
 dpm.printed = 0;
 dpm.templates = dpi->templates;
 d_print_comp (dpi, ((dc)->u.s_binary.left));
 if (! dpm.printed)
   d_print_mod (dpi, dc);
 dpi->modifiers = dpm.next;
 return;
      }
    case DEMANGLE_COMPONENT_BUILTIN_TYPE:
      if ((dpi->options & (1 << 2)) == 0)
 do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (dc->u.s_builtin.type->len) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (dc->u.s_builtin.type->name), (dc->u.s_builtin.type->len)); (dpi)->len += dc->u.s_builtin.type->len; } else d_print_append_buffer ((dpi), (dc->u.s_builtin.type->name), (dc->u.s_builtin.type->len)); } while (0)
                              ;
      else
 do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (dc->u.s_builtin.type->java_len) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (dc->u.s_builtin.type->java_name), (dc->u.s_builtin.type->java_len)); (dpi)->len += dc->u.s_builtin.type->java_len; } else d_print_append_buffer ((dpi), (dc->u.s_builtin.type->java_name), (dc->u.s_builtin.type->java_len)); } while (0)
                                   ;
      return;
    case DEMANGLE_COMPONENT_VENDOR_TYPE:
      d_print_comp (dpi, ((dc)->u.s_binary.left));
      return;
    case DEMANGLE_COMPONENT_FUNCTION_TYPE:
      {
 if (((dc)->u.s_binary.left) != ((void *)0))
   {
     struct d_print_mod dpm;
     dpm.next = dpi->modifiers;
     dpi->modifiers = &dpm;
     dpm.mod = dc;
     dpm.printed = 0;
     dpm.templates = dpi->templates;
     d_print_comp (dpi, ((dc)->u.s_binary.left));
     dpi->modifiers = dpm.next;
     if (dpm.printed)
       return;
     do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = (' '); else d_print_append_char ((dpi), (' ')); } while (0);
   }
 d_print_function_type (dpi, dc, dpi->modifiers);
 return;
      }
    case DEMANGLE_COMPONENT_ARRAY_TYPE:
      {
 struct d_print_mod *hold_modifiers;
 struct d_print_mod adpm[4];
 unsigned int i;
 struct d_print_mod *pdpm;
 hold_modifiers = dpi->modifiers;
 adpm[0].next = hold_modifiers;
 dpi->modifiers = &adpm[0];
 adpm[0].mod = dc;
 adpm[0].printed = 0;
 adpm[0].templates = dpi->templates;
 i = 1;
 pdpm = hold_modifiers;
 while (pdpm != ((void *)0)
        && (pdpm->mod->type == DEMANGLE_COMPONENT_RESTRICT
     || pdpm->mod->type == DEMANGLE_COMPONENT_VOLATILE
     || pdpm->mod->type == DEMANGLE_COMPONENT_CONST))
   {
     if (! pdpm->printed)
       {
  if (i >= sizeof adpm / sizeof adpm[0])
    {
      d_print_error (dpi);
      return;
    }
  adpm[i] = *pdpm;
  adpm[i].next = dpi->modifiers;
  dpi->modifiers = &adpm[i];
  pdpm->printed = 1;
  ++i;
       }
     pdpm = pdpm->next;
   }
 d_print_comp (dpi, ((dc)->u.s_binary.right));
 dpi->modifiers = hold_modifiers;
 if (adpm[0].printed)
   return;
 while (i > 1)
   {
     --i;
     d_print_mod (dpi, adpm[i].mod);
   }
 d_print_array_type (dpi, dc, dpi->modifiers);
 return;
      }
    case DEMANGLE_COMPONENT_PTRMEM_TYPE:
      {
 struct d_print_mod dpm;
 dpm.next = dpi->modifiers;
 dpi->modifiers = &dpm;
 dpm.mod = dc;
 dpm.printed = 0;
 dpm.templates = dpi->templates;
 d_print_comp (dpi, ((dc)->u.s_binary.right));
 if (! dpm.printed)
   {
     do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = (' '); else d_print_append_char ((dpi), (' ')); } while (0);
     d_print_comp (dpi, ((dc)->u.s_binary.left));
     do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof ("::*") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (("::*")), (sizeof ("::*") - 1)); (dpi)->len += sizeof ("::*") - 1; } else d_print_append_buffer ((dpi), (("::*")), (sizeof ("::*") - 1)); } while (0);
   }
 dpi->modifiers = dpm.next;
 return;
      }
    case DEMANGLE_COMPONENT_ARGLIST:
    case DEMANGLE_COMPONENT_TEMPLATE_ARGLIST:
      d_print_comp (dpi, ((dc)->u.s_binary.left));
      if (((dc)->u.s_binary.right) != ((void *)0))
 {
   do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof (", ") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, ((", ")), (sizeof (", ") - 1)); (dpi)->len += sizeof (", ") - 1; } else d_print_append_buffer ((dpi), ((", ")), (sizeof (", ") - 1)); } while (0);
   d_print_comp (dpi, ((dc)->u.s_binary.right));
 }
      return;
    case DEMANGLE_COMPONENT_OPERATOR:
      {
 char c;
 do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof ("operator") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (("operator")), (sizeof ("operator") - 1)); (dpi)->len += sizeof ("operator") - 1; } else d_print_append_buffer ((dpi), (("operator")), (sizeof ("operator") - 1)); } while (0);
 c = dc->u.s_operator.op->name[0];
 if (((c) >= 'a' && (c) <= 'z'))
   do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = (' '); else d_print_append_char ((dpi), (' ')); } while (0);
 do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (dc->u.s_operator.op->len) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (dc->u.s_operator.op->name), (dc->u.s_operator.op->len)); (dpi)->len += dc->u.s_operator.op->len; } else d_print_append_buffer ((dpi), (dc->u.s_operator.op->name), (dc->u.s_operator.op->len)); } while (0)
                             ;
 return;
      }
    case DEMANGLE_COMPONENT_EXTENDED_OPERATOR:
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof ("operator ") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (("operator ")), (sizeof ("operator ") - 1)); (dpi)->len += sizeof ("operator ") - 1; } else d_print_append_buffer ((dpi), (("operator ")), (sizeof ("operator ") - 1)); } while (0);
      d_print_comp (dpi, dc->u.s_extended_operator.name);
      return;
    case DEMANGLE_COMPONENT_CAST:
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof ("operator ") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (("operator ")), (sizeof ("operator ") - 1)); (dpi)->len += sizeof ("operator ") - 1; } else d_print_append_buffer ((dpi), (("operator ")), (sizeof ("operator ") - 1)); } while (0);
      d_print_cast (dpi, dc);
      return;
    case DEMANGLE_COMPONENT_UNARY:
      if (((dc)->u.s_binary.left)->type != DEMANGLE_COMPONENT_CAST)
 d_print_expr_op (dpi, ((dc)->u.s_binary.left));
      else
 {
   do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = ('('); else d_print_append_char ((dpi), ('(')); } while (0);
   d_print_cast (dpi, ((dc)->u.s_binary.left));
   do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = (')'); else d_print_append_char ((dpi), (')')); } while (0);
 }
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = ('('); else d_print_append_char ((dpi), ('(')); } while (0);
      d_print_comp (dpi, ((dc)->u.s_binary.right));
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = (')'); else d_print_append_char ((dpi), (')')); } while (0);
      return;
    case DEMANGLE_COMPONENT_BINARY:
      if (((dc)->u.s_binary.right)->type != DEMANGLE_COMPONENT_BINARY_ARGS)
 {
   d_print_error (dpi);
   return;
 }
      if (((dc)->u.s_binary.left)->type == DEMANGLE_COMPONENT_OPERATOR
   && ((dc)->u.s_binary.left)->u.s_operator.op->len == 1
   && ((dc)->u.s_binary.left)->u.s_operator.op->name[0] == '>')
 do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = ('('); else d_print_append_char ((dpi), ('(')); } while (0);
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = ('('); else d_print_append_char ((dpi), ('(')); } while (0);
      d_print_comp (dpi, ((((dc)->u.s_binary.right))->u.s_binary.left));
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof (") ") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, ((") ")), (sizeof (") ") - 1)); (dpi)->len += sizeof (") ") - 1; } else d_print_append_buffer ((dpi), ((") ")), (sizeof (") ") - 1)); } while (0);
      d_print_expr_op (dpi, ((dc)->u.s_binary.left));
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof (" (") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, ((" (")), (sizeof (" (") - 1)); (dpi)->len += sizeof (" (") - 1; } else d_print_append_buffer ((dpi), ((" (")), (sizeof (" (") - 1)); } while (0);
      d_print_comp (dpi, ((((dc)->u.s_binary.right))->u.s_binary.right));
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = (')'); else d_print_append_char ((dpi), (')')); } while (0);
      if (((dc)->u.s_binary.left)->type == DEMANGLE_COMPONENT_OPERATOR
   && ((dc)->u.s_binary.left)->u.s_operator.op->len == 1
   && ((dc)->u.s_binary.left)->u.s_operator.op->name[0] == '>')
 do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = (')'); else d_print_append_char ((dpi), (')')); } while (0);
      return;
    case DEMANGLE_COMPONENT_BINARY_ARGS:
      d_print_error (dpi);
      return;
    case DEMANGLE_COMPONENT_TRINARY:
      if (((dc)->u.s_binary.right)->type != DEMANGLE_COMPONENT_TRINARY_ARG1
   || ((((dc)->u.s_binary.right))->u.s_binary.right)->type != DEMANGLE_COMPONENT_TRINARY_ARG2)
 {
   d_print_error (dpi);
   return;
 }
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = ('('); else d_print_append_char ((dpi), ('(')); } while (0);
      d_print_comp (dpi, ((((dc)->u.s_binary.right))->u.s_binary.left));
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof (") ") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, ((") ")), (sizeof (") ") - 1)); (dpi)->len += sizeof (") ") - 1; } else d_print_append_buffer ((dpi), ((") ")), (sizeof (") ") - 1)); } while (0);
      d_print_expr_op (dpi, ((dc)->u.s_binary.left));
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof (" (") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, ((" (")), (sizeof (" (") - 1)); (dpi)->len += sizeof (" (") - 1; } else d_print_append_buffer ((dpi), ((" (")), (sizeof (" (") - 1)); } while (0);
      d_print_comp (dpi, ((((((dc)->u.s_binary.right))->u.s_binary.right))->u.s_binary.left));
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof (") : (") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, ((") : (")), (sizeof (") : (") - 1)); (dpi)->len += sizeof (") : (") - 1; } else d_print_append_buffer ((dpi), ((") : (")), (sizeof (") : (") - 1)); } while (0);
      d_print_comp (dpi, ((((((dc)->u.s_binary.right))->u.s_binary.right))->u.s_binary.right));
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = (')'); else d_print_append_char ((dpi), (')')); } while (0);
      return;
    case DEMANGLE_COMPONENT_TRINARY_ARG1:
    case DEMANGLE_COMPONENT_TRINARY_ARG2:
      d_print_error (dpi);
      return;
    case DEMANGLE_COMPONENT_LITERAL:
    case DEMANGLE_COMPONENT_LITERAL_NEG:
      {
 enum d_builtin_type_print tp;
 tp = D_PRINT_DEFAULT;
 if (((dc)->u.s_binary.left)->type == DEMANGLE_COMPONENT_BUILTIN_TYPE)
   {
     tp = ((dc)->u.s_binary.left)->u.s_builtin.type->print;
     switch (tp)
       {
       case D_PRINT_INT:
       case D_PRINT_UNSIGNED:
       case D_PRINT_LONG:
       case D_PRINT_UNSIGNED_LONG:
       case D_PRINT_LONG_LONG:
       case D_PRINT_UNSIGNED_LONG_LONG:
  if (((dc)->u.s_binary.right)->type == DEMANGLE_COMPONENT_NAME)
    {
      if (dc->type == DEMANGLE_COMPONENT_LITERAL_NEG)
        do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = ('-'); else d_print_append_char ((dpi), ('-')); } while (0);
      d_print_comp (dpi, ((dc)->u.s_binary.right));
      switch (tp)
        {
        default:
   break;
        case D_PRINT_UNSIGNED:
   do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = ('u'); else d_print_append_char ((dpi), ('u')); } while (0);
   break;
        case D_PRINT_LONG:
   do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = ('l'); else d_print_append_char ((dpi), ('l')); } while (0);
   break;
        case D_PRINT_UNSIGNED_LONG:
   do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof ("ul") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (("ul")), (sizeof ("ul") - 1)); (dpi)->len += sizeof ("ul") - 1; } else d_print_append_buffer ((dpi), (("ul")), (sizeof ("ul") - 1)); } while (0);
   break;
        case D_PRINT_LONG_LONG:
   do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof ("ll") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (("ll")), (sizeof ("ll") - 1)); (dpi)->len += sizeof ("ll") - 1; } else d_print_append_buffer ((dpi), (("ll")), (sizeof ("ll") - 1)); } while (0);
   break;
        case D_PRINT_UNSIGNED_LONG_LONG:
   do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof ("ull") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (("ull")), (sizeof ("ull") - 1)); (dpi)->len += sizeof ("ull") - 1; } else d_print_append_buffer ((dpi), (("ull")), (sizeof ("ull") - 1)); } while (0);
   break;
        }
      return;
    }
  break;
       case D_PRINT_BOOL:
  if (((dc)->u.s_binary.right)->type == DEMANGLE_COMPONENT_NAME
      && ((dc)->u.s_binary.right)->u.s_name.len == 1
      && dc->type == DEMANGLE_COMPONENT_LITERAL)
    {
      switch (((dc)->u.s_binary.right)->u.s_name.s[0])
        {
        case '0':
   do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof ("false") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (("false")), (sizeof ("false") - 1)); (dpi)->len += sizeof ("false") - 1; } else d_print_append_buffer ((dpi), (("false")), (sizeof ("false") - 1)); } while (0);
   return;
        case '1':
   do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof ("true") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (("true")), (sizeof ("true") - 1)); (dpi)->len += sizeof ("true") - 1; } else d_print_append_buffer ((dpi), (("true")), (sizeof ("true") - 1)); } while (0);
   return;
        default:
   break;
        }
    }
  break;
       default:
  break;
       }
   }
 do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = ('('); else d_print_append_char ((dpi), ('(')); } while (0);
 d_print_comp (dpi, ((dc)->u.s_binary.left));
 do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = (')'); else d_print_append_char ((dpi), (')')); } while (0);
 if (dc->type == DEMANGLE_COMPONENT_LITERAL_NEG)
   do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = ('-'); else d_print_append_char ((dpi), ('-')); } while (0);
 if (tp == D_PRINT_FLOAT)
   do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = ('['); else d_print_append_char ((dpi), ('[')); } while (0);
 d_print_comp (dpi, ((dc)->u.s_binary.right));
 if (tp == D_PRINT_FLOAT)
   do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = (']'); else d_print_append_char ((dpi), (']')); } while (0);
      }
      return;
    default:
      d_print_error (dpi);
      return;
    }
}
static void
d_print_java_identifier (dpi, name, len)
     struct d_print_info *dpi;
     const char *name;
     int len;
{
  const char *p;
  const char *end;
  end = name + len;
  for (p = name; p < end; ++p)
    {
      if (end - p > 3
   && p[0] == '_'
   && p[1] == '_'
   && p[2] == 'U')
 {
   unsigned long c;
   const char *q;
   c = 0;
   for (q = p + 3; q < end; ++q)
     {
       int dig;
       if (((*q) >= '0' && (*q) <= '9'))
  dig = *q - '0';
       else if (*q >= 'A' && *q <= 'F')
  dig = *q - 'A' + 10;
       else if (*q >= 'a' && *q <= 'f')
  dig = *q - 'a' + 10;
       else
  break;
       c = c * 16 + dig;
     }
   if (q < end && *q == '_' && c < 256)
     {
       do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = (c); else d_print_append_char ((dpi), (c)); } while (0);
       p = q;
       continue;
     }
 }
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = (*p); else d_print_append_char ((dpi), (*p)); } while (0);
    }
}
static void
d_print_mod_list (dpi, mods, suffix)
     struct d_print_info *dpi;
     struct d_print_mod *mods;
     int suffix;
{
  struct d_print_template *hold_dpt;
  if (mods == ((void *)0) || ((dpi)->buf == ((void *)0)))
    return;
  if (mods->printed
      || (! suffix
   && (mods->mod->type == DEMANGLE_COMPONENT_RESTRICT_THIS
       || mods->mod->type == DEMANGLE_COMPONENT_VOLATILE_THIS
       || mods->mod->type == DEMANGLE_COMPONENT_CONST_THIS)))
    {
      d_print_mod_list (dpi, mods->next, suffix);
      return;
    }
  mods->printed = 1;
  hold_dpt = dpi->templates;
  dpi->templates = mods->templates;
  if (mods->mod->type == DEMANGLE_COMPONENT_FUNCTION_TYPE)
    {
      d_print_function_type (dpi, mods->mod, mods->next);
      dpi->templates = hold_dpt;
      return;
    }
  else if (mods->mod->type == DEMANGLE_COMPONENT_ARRAY_TYPE)
    {
      d_print_array_type (dpi, mods->mod, mods->next);
      dpi->templates = hold_dpt;
      return;
    }
  else if (mods->mod->type == DEMANGLE_COMPONENT_LOCAL_NAME)
    {
      struct d_print_mod *hold_modifiers;
      struct demangle_component *dc;
      hold_modifiers = dpi->modifiers;
      dpi->modifiers = ((void *)0);
      d_print_comp (dpi, ((mods->mod)->u.s_binary.left));
      dpi->modifiers = hold_modifiers;
      if ((dpi->options & (1 << 2)) == 0)
 do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof ("::") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (("::")), (sizeof ("::") - 1)); (dpi)->len += sizeof ("::") - 1; } else d_print_append_buffer ((dpi), (("::")), (sizeof ("::") - 1)); } while (0);
      else
 do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = ('.'); else d_print_append_char ((dpi), ('.')); } while (0);
      dc = ((mods->mod)->u.s_binary.right);
      while (dc->type == DEMANGLE_COMPONENT_RESTRICT_THIS
      || dc->type == DEMANGLE_COMPONENT_VOLATILE_THIS
      || dc->type == DEMANGLE_COMPONENT_CONST_THIS)
 dc = ((dc)->u.s_binary.left);
      d_print_comp (dpi, dc);
      dpi->templates = hold_dpt;
      return;
    }
  d_print_mod (dpi, mods->mod);
  dpi->templates = hold_dpt;
  d_print_mod_list (dpi, mods->next, suffix);
}
static void
d_print_mod (dpi, mod)
     struct d_print_info *dpi;
     const struct demangle_component *mod;
{
  switch (mod->type)
    {
    case DEMANGLE_COMPONENT_RESTRICT:
    case DEMANGLE_COMPONENT_RESTRICT_THIS:
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof (" restrict") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, ((" restrict")), (sizeof (" restrict") - 1)); (dpi)->len += sizeof (" restrict") - 1; } else d_print_append_buffer ((dpi), ((" restrict")), (sizeof (" restrict") - 1)); } while (0);
      return;
    case DEMANGLE_COMPONENT_VOLATILE:
    case DEMANGLE_COMPONENT_VOLATILE_THIS:
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof (" volatile") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, ((" volatile")), (sizeof (" volatile") - 1)); (dpi)->len += sizeof (" volatile") - 1; } else d_print_append_buffer ((dpi), ((" volatile")), (sizeof (" volatile") - 1)); } while (0);
      return;
    case DEMANGLE_COMPONENT_CONST:
    case DEMANGLE_COMPONENT_CONST_THIS:
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof (" const") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, ((" const")), (sizeof (" const") - 1)); (dpi)->len += sizeof (" const") - 1; } else d_print_append_buffer ((dpi), ((" const")), (sizeof (" const") - 1)); } while (0);
      return;
    case DEMANGLE_COMPONENT_VENDOR_TYPE_QUAL:
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = (' '); else d_print_append_char ((dpi), (' ')); } while (0);
      d_print_comp (dpi, ((mod)->u.s_binary.right));
      return;
    case DEMANGLE_COMPONENT_POINTER:
      if ((dpi->options & (1 << 2)) == 0)
 do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = ('*'); else d_print_append_char ((dpi), ('*')); } while (0);
      return;
    case DEMANGLE_COMPONENT_REFERENCE:
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = ('&'); else d_print_append_char ((dpi), ('&')); } while (0);
      return;
    case DEMANGLE_COMPONENT_COMPLEX:
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof ("complex ") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (("complex ")), (sizeof ("complex ") - 1)); (dpi)->len += sizeof ("complex ") - 1; } else d_print_append_buffer ((dpi), (("complex ")), (sizeof ("complex ") - 1)); } while (0);
      return;
    case DEMANGLE_COMPONENT_IMAGINARY:
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof ("imaginary ") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (("imaginary ")), (sizeof ("imaginary ") - 1)); (dpi)->len += sizeof ("imaginary ") - 1; } else d_print_append_buffer ((dpi), (("imaginary ")), (sizeof ("imaginary ") - 1)); } while (0);
      return;
    case DEMANGLE_COMPONENT_PTRMEM_TYPE:
      if (((dpi)->buf == ((void *)0) || (dpi)->len == 0 ? '\0' : (dpi)->buf[(dpi)->len - 1]) != '(')
 do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = (' '); else d_print_append_char ((dpi), (' ')); } while (0);
      d_print_comp (dpi, ((mod)->u.s_binary.left));
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof ("::*") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (("::*")), (sizeof ("::*") - 1)); (dpi)->len += sizeof ("::*") - 1; } else d_print_append_buffer ((dpi), (("::*")), (sizeof ("::*") - 1)); } while (0);
      return;
    case DEMANGLE_COMPONENT_TYPED_NAME:
      d_print_comp (dpi, ((mod)->u.s_binary.left));
      return;
    default:
      d_print_comp (dpi, mod);
      return;
    }
}
static void
d_print_function_type (dpi, dc, mods)
     struct d_print_info *dpi;
     const struct demangle_component *dc;
     struct d_print_mod *mods;
{
  int need_paren;
  int saw_mod;
  int need_space;
  struct d_print_mod *p;
  struct d_print_mod *hold_modifiers;
  need_paren = 0;
  saw_mod = 0;
  need_space = 0;
  for (p = mods; p != ((void *)0); p = p->next)
    {
      if (p->printed)
 break;
      saw_mod = 1;
      switch (p->mod->type)
 {
 case DEMANGLE_COMPONENT_POINTER:
 case DEMANGLE_COMPONENT_REFERENCE:
   need_paren = 1;
   break;
 case DEMANGLE_COMPONENT_RESTRICT:
 case DEMANGLE_COMPONENT_VOLATILE:
 case DEMANGLE_COMPONENT_CONST:
 case DEMANGLE_COMPONENT_VENDOR_TYPE_QUAL:
 case DEMANGLE_COMPONENT_COMPLEX:
 case DEMANGLE_COMPONENT_IMAGINARY:
 case DEMANGLE_COMPONENT_PTRMEM_TYPE:
   need_space = 1;
   need_paren = 1;
   break;
 case DEMANGLE_COMPONENT_RESTRICT_THIS:
 case DEMANGLE_COMPONENT_VOLATILE_THIS:
 case DEMANGLE_COMPONENT_CONST_THIS:
   break;
 default:
   break;
 }
      if (need_paren)
 break;
    }
  if (((dc)->u.s_binary.left) != ((void *)0) && ! saw_mod)
    need_paren = 1;
  if (need_paren)
    {
      if (! need_space)
 {
   if (((dpi)->buf == ((void *)0) || (dpi)->len == 0 ? '\0' : (dpi)->buf[(dpi)->len - 1]) != '('
       && ((dpi)->buf == ((void *)0) || (dpi)->len == 0 ? '\0' : (dpi)->buf[(dpi)->len - 1]) != '*')
     need_space = 1;
 }
      if (need_space && ((dpi)->buf == ((void *)0) || (dpi)->len == 0 ? '\0' : (dpi)->buf[(dpi)->len - 1]) != ' ')
 do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = (' '); else d_print_append_char ((dpi), (' ')); } while (0);
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = ('('); else d_print_append_char ((dpi), ('(')); } while (0);
    }
  hold_modifiers = dpi->modifiers;
  dpi->modifiers = ((void *)0);
  d_print_mod_list (dpi, mods, 0);
  if (need_paren)
    do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = (')'); else d_print_append_char ((dpi), (')')); } while (0);
  do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = ('('); else d_print_append_char ((dpi), ('(')); } while (0);
  if (((dc)->u.s_binary.right) != ((void *)0))
    d_print_comp (dpi, ((dc)->u.s_binary.right));
  do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = (')'); else d_print_append_char ((dpi), (')')); } while (0);
  d_print_mod_list (dpi, mods, 1);
  dpi->modifiers = hold_modifiers;
}
static void
d_print_array_type (dpi, dc, mods)
     struct d_print_info *dpi;
     const struct demangle_component *dc;
     struct d_print_mod *mods;
{
  int need_space;
  need_space = 1;
  if (mods != ((void *)0))
    {
      int need_paren;
      struct d_print_mod *p;
      need_paren = 0;
      for (p = mods; p != ((void *)0); p = p->next)
 {
   if (! p->printed)
     {
       if (p->mod->type == DEMANGLE_COMPONENT_ARRAY_TYPE)
  {
    need_space = 0;
    break;
  }
       else
  {
    need_paren = 1;
    need_space = 1;
    break;
  }
     }
 }
      if (need_paren)
 do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (sizeof (" (") - 1) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, ((" (")), (sizeof (" (") - 1)); (dpi)->len += sizeof (" (") - 1; } else d_print_append_buffer ((dpi), ((" (")), (sizeof (" (") - 1)); } while (0);
      d_print_mod_list (dpi, mods, 0);
      if (need_paren)
 do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = (')'); else d_print_append_char ((dpi), (')')); } while (0);
    }
  if (need_space)
    do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = (' '); else d_print_append_char ((dpi), (' ')); } while (0);
  do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = ('['); else d_print_append_char ((dpi), ('[')); } while (0);
  if (((dc)->u.s_binary.left) != ((void *)0))
    d_print_comp (dpi, ((dc)->u.s_binary.left));
  do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = (']'); else d_print_append_char ((dpi), (']')); } while (0);
}
static void
d_print_expr_op (dpi, dc)
     struct d_print_info *dpi;
     const struct demangle_component *dc;
{
  if (dc->type == DEMANGLE_COMPONENT_OPERATOR)
    do { if ((dpi)->buf != ((void *)0) && (dpi)->len + (dc->u.s_operator.op->len) <= (dpi)->alc) { memcpy ((dpi)->buf + (dpi)->len, (dc->u.s_operator.op->name), (dc->u.s_operator.op->len)); (dpi)->len += dc->u.s_operator.op->len; } else d_print_append_buffer ((dpi), (dc->u.s_operator.op->name), (dc->u.s_operator.op->len)); } while (0)
                                ;
  else
    d_print_comp (dpi, dc);
}
static void
d_print_cast (dpi, dc)
     struct d_print_info *dpi;
     const struct demangle_component *dc;
{
  if (((dc)->u.s_binary.left)->type != DEMANGLE_COMPONENT_TEMPLATE)
    d_print_comp (dpi, ((dc)->u.s_binary.left));
  else
    {
      struct d_print_mod *hold_dpm;
      struct d_print_template dpt;
      hold_dpm = dpi->modifiers;
      dpi->modifiers = ((void *)0);
      dpt.next = dpi->templates;
      dpi->templates = &dpt;
      dpt.template = ((dc)->u.s_binary.left);
      d_print_comp (dpi, ((((dc)->u.s_binary.left))->u.s_binary.left));
      dpi->templates = dpt.next;
      if (((dpi)->buf == ((void *)0) || (dpi)->len == 0 ? '\0' : (dpi)->buf[(dpi)->len - 1]) == '<')
 do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = (' '); else d_print_append_char ((dpi), (' ')); } while (0);
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = ('<'); else d_print_append_char ((dpi), ('<')); } while (0);
      d_print_comp (dpi, ((((dc)->u.s_binary.left))->u.s_binary.right));
      if (((dpi)->buf == ((void *)0) || (dpi)->len == 0 ? '\0' : (dpi)->buf[(dpi)->len - 1]) == '>')
 do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = (' '); else d_print_append_char ((dpi), (' ')); } while (0);
      do { if ((dpi)->buf != ((void *)0) && (dpi)->len < (dpi)->alc) (dpi)->buf[(dpi)->len++] = ('>'); else d_print_append_char ((dpi), ('>')); } while (0);
      dpi->modifiers = hold_dpm;
    }
}
void
cplus_demangle_init_info (mangled, options, len, di)
     const char *mangled;
     int options;
     size_t len;
     struct d_info *di;
{
  di->s = mangled;
  di->send = mangled + len;
  di->options = options;
  di->n = mangled;
  di->num_comps = 2 * len;
  di->next_comp = 0;
  di->num_subs = len;
  di->next_sub = 0;
  di->did_subs = 0;
  di->last_name = ((void *)0);
  di->expansion = 0;
}
static char *
d_demangle (mangled, options, palc)
     const char* mangled;
     int options;
     size_t *palc;
{
  size_t len;
  int type;
  struct d_info di;
  struct demangle_component *dc;
  int estimate;
  char *ret;
  *palc = 0;
  len = strlen (mangled);
  if (mangled[0] == '_' && mangled[1] == 'Z')
    type = 0;
  else if (strncmp (mangled, "_GLOBAL_", 8) == 0
    && (mangled[8] == '.' || mangled[8] == '_' || mangled[8] == '$')
    && (mangled[9] == 'D' || mangled[9] == 'I')
    && mangled[10] == '_')
    {
      char *r;
      r = malloc (40 + len - 11);
      if (r == ((void *)0))
 *palc = 1;
      else
 {
   if (mangled[9] == 'I')
     strcpy (r, "global constructors keyed to ");
   else
     strcpy (r, "global destructors keyed to ");
   strcat (r, mangled + 11);
 }
      return r;
    }
  else
    {
      if ((options & (1 << 4)) == 0)
 return ((void *)0);
      type = 1;
    }
  cplus_demangle_init_info (mangled, options, len, &di);
  {
    di.comps = ((struct demangle_component *)
  malloc (di.num_comps * sizeof (struct demangle_component)));
    di.subs = ((struct demangle_component **)
        malloc (di.num_subs * sizeof (struct demangle_component *)));
    if (di.comps == ((void *)0) || di.subs == ((void *)0))
      {
 if (di.comps != ((void *)0))
   free (di.comps);
 if (di.subs != ((void *)0))
   free (di.subs);
 *palc = 1;
 return ((void *)0);
      }
    if (! type)
      dc = cplus_demangle_mangled_name (&di, 1);
    else
      dc = cplus_demangle_type (&di);
    if (((options & (1 << 0)) != 0) && (*((&di)->n)) != '\0')
      dc = ((void *)0);
    estimate = len + di.expansion + 10 * di.did_subs;
    estimate += estimate / 8;
    ret = ((void *)0);
    if (dc != ((void *)0))
      ret = cplus_demangle_print (options, dc, estimate, palc);
    free (di.comps);
    free (di.subs);
  }
  return ret;
}
char *
cplus_demangle_v3 (mangled, options)
     const char* mangled;
     int options;
{
  size_t alc;
  return d_demangle (mangled, options, &alc);
}
char *
java_demangle_v3 (mangled)
     const char* mangled;
{
  size_t alc;
  char *demangled;
  int nesting;
  char *from;
  char *to;
  demangled = d_demangle (mangled, (1 << 2) | (1 << 0), &alc);
  if (demangled == ((void *)0))
    return ((void *)0);
  nesting = 0;
  from = demangled;
  to = from;
  while (*from != '\0')
    {
      if (strncmp (from, "JArray<", 7) == 0)
 {
   from += 7;
   ++nesting;
 }
      else if (nesting > 0 && *from == '>')
 {
   while (to > demangled && to[-1] == ' ')
     --to;
   *to++ = '[';
   *to++ = ']';
   --nesting;
   ++from;
 }
      else
 *to++ = *from++;
    }
  *to = '\0';
  return demangled;
}
static int
is_ctor_or_dtor (mangled, ctor_kind, dtor_kind)
     const char *mangled;
     enum gnu_v3_ctor_kinds *ctor_kind;
     enum gnu_v3_dtor_kinds *dtor_kind;
{
  struct d_info di;
  struct demangle_component *dc;
  int ret;
  *ctor_kind = (enum gnu_v3_ctor_kinds) 0;
  *dtor_kind = (enum gnu_v3_dtor_kinds) 0;
  cplus_demangle_init_info (mangled, (1 << 14), strlen (mangled), &di);
  {
    di.comps = ((struct demangle_component *)
  malloc (di.num_comps * sizeof (struct demangle_component)));
    di.subs = ((struct demangle_component **)
        malloc (di.num_subs * sizeof (struct demangle_component *)));
    if (di.comps == ((void *)0) || di.subs == ((void *)0))
      {
 if (di.comps != ((void *)0))
   free (di.comps);
 if (di.subs != ((void *)0))
   free (di.subs);
 return 0;
      }
    dc = cplus_demangle_mangled_name (&di, 1);
    ret = 0;
    while (dc != ((void *)0))
      {
 switch (dc->type)
   {
   default:
     dc = ((void *)0);
     break;
   case DEMANGLE_COMPONENT_TYPED_NAME:
   case DEMANGLE_COMPONENT_TEMPLATE:
   case DEMANGLE_COMPONENT_RESTRICT_THIS:
   case DEMANGLE_COMPONENT_VOLATILE_THIS:
   case DEMANGLE_COMPONENT_CONST_THIS:
     dc = ((dc)->u.s_binary.left);
     break;
   case DEMANGLE_COMPONENT_QUAL_NAME:
   case DEMANGLE_COMPONENT_LOCAL_NAME:
     dc = ((dc)->u.s_binary.right);
     break;
   case DEMANGLE_COMPONENT_CTOR:
     *ctor_kind = dc->u.s_ctor.kind;
     ret = 1;
     dc = ((void *)0);
     break;
   case DEMANGLE_COMPONENT_DTOR:
     *dtor_kind = dc->u.s_dtor.kind;
     ret = 1;
     dc = ((void *)0);
     break;
   }
      }
    free (di.subs);
    free (di.comps);
  }
  return ret;
}
enum gnu_v3_ctor_kinds
is_gnu_v3_mangled_ctor (name)
     const char *name;
{
  enum gnu_v3_ctor_kinds ctor_kind;
  enum gnu_v3_dtor_kinds dtor_kind;
  if (! is_ctor_or_dtor (name, &ctor_kind, &dtor_kind))
    return (enum gnu_v3_ctor_kinds) 0;
  return ctor_kind;
}
enum gnu_v3_dtor_kinds
is_gnu_v3_mangled_dtor (name)
     const char *name;
{
  enum gnu_v3_ctor_kinds ctor_kind;
  enum gnu_v3_dtor_kinds dtor_kind;
  if (! is_ctor_or_dtor (name, &ctor_kind, &dtor_kind))
    return (enum gnu_v3_dtor_kinds) 0;
  return dtor_kind;
}
extern char *optarg;
extern int optind;
extern int opterr;
extern int optopt;
struct option
{
  const char *name;
  int has_arg;
  int *flag;
  int val;
};
extern int getopt (int argc, char *const *argv, const char *shortopts);
extern int getopt_long (int argc, char *const *argv, const char *shortopts,
          const struct option *longopts, int *longind);
extern int getopt_long_only (int argc, char *const *argv,
        const char *shortopts,
               const struct option *longopts, int *longind);
extern int _getopt_internal (int argc, char *const *argv,
        const char *shortopts,
               const struct option *longopts, int *longind,
        int long_only);
typedef struct dyn_string
{
  int allocated;
  int length;
  char *s;
}* dyn_string_t;
extern int dyn_string_init (struct dyn_string *, int);
extern dyn_string_t dyn_string_new (int);
extern void dyn_string_delete (dyn_string_t);
extern char *dyn_string_release (dyn_string_t);
extern dyn_string_t dyn_string_resize (dyn_string_t, int);
extern void dyn_string_clear (dyn_string_t);
extern int dyn_string_copy (dyn_string_t, dyn_string_t);
extern int dyn_string_copy_cstr (dyn_string_t, const char *);
extern int dyn_string_prepend (dyn_string_t, dyn_string_t);
extern int dyn_string_prepend_cstr (dyn_string_t, const char *);
extern int dyn_string_insert (dyn_string_t, int, dyn_string_t)
                     ;
extern int dyn_string_insert_cstr (dyn_string_t, int, const char *)
                     ;
extern int dyn_string_insert_char (dyn_string_t, int, int);
extern int dyn_string_append (dyn_string_t, dyn_string_t);
extern int dyn_string_append_cstr (dyn_string_t, const char *);
extern int dyn_string_append_char (dyn_string_t, int);
extern int dyn_string_substring (dyn_string_t, dyn_string_t, int, int)
                               ;
extern int dyn_string_eq (dyn_string_t, dyn_string_t);
   typedef unsigned int md5_uint32;
struct md5_ctx
{
  md5_uint32 A;
  md5_uint32 B;
  md5_uint32 C;
  md5_uint32 D;
  md5_uint32 total[2];
  md5_uint32 buflen;
  char buffer[128];
};
extern void md5_init_ctx (struct md5_ctx *ctx);
extern void md5_process_block (const void *buffer, size_t len, struct md5_ctx *ctx)
                             ;
extern void md5_process_bytes (const void *buffer, size_t len, struct md5_ctx *ctx)
                             ;
extern void *md5_finish_ctx (struct md5_ctx *ctx, void *resbuf);
extern void *md5_read_ctx (const struct md5_ctx *ctx, void *resbuf);
extern int md5_stream (FILE *stream, void *resblock);
extern void *md5_buffer (const char *buffer, size_t len, void *resblock);
static const unsigned char fillbuf[64] = { 0x80, 0 };
void
md5_init_ctx (ctx)
     struct md5_ctx *ctx;
{
  ctx->A = (md5_uint32) 0x67452301;
  ctx->B = (md5_uint32) 0xefcdab89;
  ctx->C = (md5_uint32) 0x98badcfe;
  ctx->D = (md5_uint32) 0x10325476;
  ctx->total[0] = ctx->total[1] = 0;
  ctx->buflen = 0;
}
void *
md5_read_ctx (ctx, resbuf)
     const struct md5_ctx *ctx;
     void *resbuf;
{
  ((md5_uint32 *) resbuf)[0] = (ctx->A);
  ((md5_uint32 *) resbuf)[1] = (ctx->B);
  ((md5_uint32 *) resbuf)[2] = (ctx->C);
  ((md5_uint32 *) resbuf)[3] = (ctx->D);
  return resbuf;
}
void *
md5_finish_ctx (ctx, resbuf)
     struct md5_ctx *ctx;
     void *resbuf;
{
  md5_uint32 bytes = ctx->buflen;
  size_t pad;
  ctx->total[0] += bytes;
  if (ctx->total[0] < bytes)
    ++ctx->total[1];
  pad = bytes >= 56 ? 64 + 56 - bytes : 56 - bytes;
  memcpy (&ctx->buffer[bytes], fillbuf, pad);
  *(md5_uint32 *) &ctx->buffer[bytes + pad] = (ctx->total[0] << 3);
  *(md5_uint32 *) &ctx->buffer[bytes + pad + 4] = ((ctx->total[1] << 3) | (ctx->total[0] >> 29))
                             ;
  md5_process_block (ctx->buffer, bytes + pad + 8, ctx);
  return md5_read_ctx (ctx, resbuf);
}
int
md5_stream (stream, resblock)
     FILE *stream;
     void *resblock;
{
  struct md5_ctx ctx;
  char buffer[4096 + 72];
  size_t sum;
  md5_init_ctx (&ctx);
  while (1)
    {
      size_t n;
      sum = 0;
      do
 {
   n = fread (buffer + sum, 1, 4096 - sum, stream);
   sum += n;
 }
      while (sum < 4096 && n != 0);
      if (n == 0 && ferror (stream))
        return 1;
      if (n == 0)
 break;
      md5_process_block (buffer, 4096, &ctx);
    }
  if (sum > 0)
    md5_process_bytes (buffer, sum, &ctx);
  md5_finish_ctx (&ctx, resblock);
  return 0;
}
void *
md5_buffer (buffer, len, resblock)
     const char *buffer;
     size_t len;
     void *resblock;
{
  struct md5_ctx ctx;
  md5_init_ctx (&ctx);
  md5_process_bytes (buffer, len, &ctx);
  return md5_finish_ctx (&ctx, resblock);
}
void
md5_process_bytes (buffer, len, ctx)
     const void *buffer;
     size_t len;
     struct md5_ctx *ctx;
{
  if (ctx->buflen != 0)
    {
      size_t left_over = ctx->buflen;
      size_t add = 128 - left_over > len ? len : 128 - left_over;
      memcpy (&ctx->buffer[left_over], buffer, add);
      ctx->buflen += add;
      if (left_over + add > 64)
 {
   md5_process_block (ctx->buffer, (left_over + add) & ~63, ctx);
   memcpy (ctx->buffer, &ctx->buffer[(left_over + add) & ~63],
    (left_over + add) & 63);
   ctx->buflen = (left_over + add) & 63;
 }
      buffer = (const void *) ((const char *) buffer + add);
      len -= add;
    }
  if (len > 64)
    {
      md5_process_block (buffer, len & ~63, ctx);
      buffer = (const void *) ((const char *) buffer + (len & ~63));
      len &= 63;
    }
  if (len > 0)
    {
      memcpy (ctx->buffer, buffer, len);
      ctx->buflen = len;
    }
}
void
md5_process_block (buffer, len, ctx)
     const void *buffer;
     size_t len;
     struct md5_ctx *ctx;
{
  md5_uint32 correct_words[16];
  const md5_uint32 *words = (const md5_uint32 *) buffer;
  size_t nwords = len / sizeof (md5_uint32);
  const md5_uint32 *endp = words + nwords;
  md5_uint32 A = ctx->A;
  md5_uint32 B = ctx->B;
  md5_uint32 C = ctx->C;
  md5_uint32 D = ctx->D;
  ctx->total[0] += len;
  if (ctx->total[0] < len)
    ++ctx->total[1];
  while (words < endp)
    {
      md5_uint32 *cwp = correct_words;
      md5_uint32 A_save = A;
      md5_uint32 B_save = B;
      md5_uint32 C_save = C;
      md5_uint32 D_save = D;
      do { A += (D ^ (B & (C ^ D))) + (*cwp++ = (*words)) + (md5_uint32) 0xd76aa478; ++words; (A = (A << 7) | (A >> (32 - 7))); A += B; } while (0);
      do { D += (C ^ (A & (B ^ C))) + (*cwp++ = (*words)) + (md5_uint32) 0xe8c7b756; ++words; (D = (D << 12) | (D >> (32 - 12))); D += A; } while (0);
      do { C += (B ^ (D & (A ^ B))) + (*cwp++ = (*words)) + (md5_uint32) 0x242070db; ++words; (C = (C << 17) | (C >> (32 - 17))); C += D; } while (0);
      do { B += (A ^ (C & (D ^ A))) + (*cwp++ = (*words)) + (md5_uint32) 0xc1bdceee; ++words; (B = (B << 22) | (B >> (32 - 22))); B += C; } while (0);
      do { A += (D ^ (B & (C ^ D))) + (*cwp++ = (*words)) + (md5_uint32) 0xf57c0faf; ++words; (A = (A << 7) | (A >> (32 - 7))); A += B; } while (0);
      do { D += (C ^ (A & (B ^ C))) + (*cwp++ = (*words)) + (md5_uint32) 0x4787c62a; ++words; (D = (D << 12) | (D >> (32 - 12))); D += A; } while (0);
      do { C += (B ^ (D & (A ^ B))) + (*cwp++ = (*words)) + (md5_uint32) 0xa8304613; ++words; (C = (C << 17) | (C >> (32 - 17))); C += D; } while (0);
      do { B += (A ^ (C & (D ^ A))) + (*cwp++ = (*words)) + (md5_uint32) 0xfd469501; ++words; (B = (B << 22) | (B >> (32 - 22))); B += C; } while (0);
      do { A += (D ^ (B & (C ^ D))) + (*cwp++ = (*words)) + (md5_uint32) 0x698098d8; ++words; (A = (A << 7) | (A >> (32 - 7))); A += B; } while (0);
      do { D += (C ^ (A & (B ^ C))) + (*cwp++ = (*words)) + (md5_uint32) 0x8b44f7af; ++words; (D = (D << 12) | (D >> (32 - 12))); D += A; } while (0);
      do { C += (B ^ (D & (A ^ B))) + (*cwp++ = (*words)) + (md5_uint32) 0xffff5bb1; ++words; (C = (C << 17) | (C >> (32 - 17))); C += D; } while (0);
      do { B += (A ^ (C & (D ^ A))) + (*cwp++ = (*words)) + (md5_uint32) 0x895cd7be; ++words; (B = (B << 22) | (B >> (32 - 22))); B += C; } while (0);
      do { A += (D ^ (B & (C ^ D))) + (*cwp++ = (*words)) + (md5_uint32) 0x6b901122; ++words; (A = (A << 7) | (A >> (32 - 7))); A += B; } while (0);
      do { D += (C ^ (A & (B ^ C))) + (*cwp++ = (*words)) + (md5_uint32) 0xfd987193; ++words; (D = (D << 12) | (D >> (32 - 12))); D += A; } while (0);
      do { C += (B ^ (D & (A ^ B))) + (*cwp++ = (*words)) + (md5_uint32) 0xa679438e; ++words; (C = (C << 17) | (C >> (32 - 17))); C += D; } while (0);
      do { B += (A ^ (C & (D ^ A))) + (*cwp++ = (*words)) + (md5_uint32) 0x49b40821; ++words; (B = (B << 22) | (B >> (32 - 22))); B += C; } while (0);
      do { A += (C ^ (D & (B ^ C))) + correct_words[1] + (md5_uint32) 0xf61e2562; (A = (A << 5) | (A >> (32 - 5))); A += B; } while (0);
      do { D += (B ^ (C & (A ^ B))) + correct_words[6] + (md5_uint32) 0xc040b340; (D = (D << 9) | (D >> (32 - 9))); D += A; } while (0);
      do { C += (A ^ (B & (D ^ A))) + correct_words[11] + (md5_uint32) 0x265e5a51; (C = (C << 14) | (C >> (32 - 14))); C += D; } while (0);
      do { B += (D ^ (A & (C ^ D))) + correct_words[0] + (md5_uint32) 0xe9b6c7aa; (B = (B << 20) | (B >> (32 - 20))); B += C; } while (0);
      do { A += (C ^ (D & (B ^ C))) + correct_words[5] + (md5_uint32) 0xd62f105d; (A = (A << 5) | (A >> (32 - 5))); A += B; } while (0);
      do { D += (B ^ (C & (A ^ B))) + correct_words[10] + (md5_uint32) 0x02441453; (D = (D << 9) | (D >> (32 - 9))); D += A; } while (0);
      do { C += (A ^ (B & (D ^ A))) + correct_words[15] + (md5_uint32) 0xd8a1e681; (C = (C << 14) | (C >> (32 - 14))); C += D; } while (0);
      do { B += (D ^ (A & (C ^ D))) + correct_words[4] + (md5_uint32) 0xe7d3fbc8; (B = (B << 20) | (B >> (32 - 20))); B += C; } while (0);
      do { A += (C ^ (D & (B ^ C))) + correct_words[9] + (md5_uint32) 0x21e1cde6; (A = (A << 5) | (A >> (32 - 5))); A += B; } while (0);
      do { D += (B ^ (C & (A ^ B))) + correct_words[14] + (md5_uint32) 0xc33707d6; (D = (D << 9) | (D >> (32 - 9))); D += A; } while (0);
      do { C += (A ^ (B & (D ^ A))) + correct_words[3] + (md5_uint32) 0xf4d50d87; (C = (C << 14) | (C >> (32 - 14))); C += D; } while (0);
      do { B += (D ^ (A & (C ^ D))) + correct_words[8] + (md5_uint32) 0x455a14ed; (B = (B << 20) | (B >> (32 - 20))); B += C; } while (0);
      do { A += (C ^ (D & (B ^ C))) + correct_words[13] + (md5_uint32) 0xa9e3e905; (A = (A << 5) | (A >> (32 - 5))); A += B; } while (0);
      do { D += (B ^ (C & (A ^ B))) + correct_words[2] + (md5_uint32) 0xfcefa3f8; (D = (D << 9) | (D >> (32 - 9))); D += A; } while (0);
      do { C += (A ^ (B & (D ^ A))) + correct_words[7] + (md5_uint32) 0x676f02d9; (C = (C << 14) | (C >> (32 - 14))); C += D; } while (0);
      do { B += (D ^ (A & (C ^ D))) + correct_words[12] + (md5_uint32) 0x8d2a4c8a; (B = (B << 20) | (B >> (32 - 20))); B += C; } while (0);
      do { A += (B ^ C ^ D) + correct_words[5] + (md5_uint32) 0xfffa3942; (A = (A << 4) | (A >> (32 - 4))); A += B; } while (0);
      do { D += (A ^ B ^ C) + correct_words[8] + (md5_uint32) 0x8771f681; (D = (D << 11) | (D >> (32 - 11))); D += A; } while (0);
      do { C += (D ^ A ^ B) + correct_words[11] + (md5_uint32) 0x6d9d6122; (C = (C << 16) | (C >> (32 - 16))); C += D; } while (0);
      do { B += (C ^ D ^ A) + correct_words[14] + (md5_uint32) 0xfde5380c; (B = (B << 23) | (B >> (32 - 23))); B += C; } while (0);
      do { A += (B ^ C ^ D) + correct_words[1] + (md5_uint32) 0xa4beea44; (A = (A << 4) | (A >> (32 - 4))); A += B; } while (0);
      do { D += (A ^ B ^ C) + correct_words[4] + (md5_uint32) 0x4bdecfa9; (D = (D << 11) | (D >> (32 - 11))); D += A; } while (0);
      do { C += (D ^ A ^ B) + correct_words[7] + (md5_uint32) 0xf6bb4b60; (C = (C << 16) | (C >> (32 - 16))); C += D; } while (0);
      do { B += (C ^ D ^ A) + correct_words[10] + (md5_uint32) 0xbebfbc70; (B = (B << 23) | (B >> (32 - 23))); B += C; } while (0);
      do { A += (B ^ C ^ D) + correct_words[13] + (md5_uint32) 0x289b7ec6; (A = (A << 4) | (A >> (32 - 4))); A += B; } while (0);
      do { D += (A ^ B ^ C) + correct_words[0] + (md5_uint32) 0xeaa127fa; (D = (D << 11) | (D >> (32 - 11))); D += A; } while (0);
      do { C += (D ^ A ^ B) + correct_words[3] + (md5_uint32) 0xd4ef3085; (C = (C << 16) | (C >> (32 - 16))); C += D; } while (0);
      do { B += (C ^ D ^ A) + correct_words[6] + (md5_uint32) 0x04881d05; (B = (B << 23) | (B >> (32 - 23))); B += C; } while (0);
      do { A += (B ^ C ^ D) + correct_words[9] + (md5_uint32) 0xd9d4d039; (A = (A << 4) | (A >> (32 - 4))); A += B; } while (0);
      do { D += (A ^ B ^ C) + correct_words[12] + (md5_uint32) 0xe6db99e5; (D = (D << 11) | (D >> (32 - 11))); D += A; } while (0);
      do { C += (D ^ A ^ B) + correct_words[15] + (md5_uint32) 0x1fa27cf8; (C = (C << 16) | (C >> (32 - 16))); C += D; } while (0);
      do { B += (C ^ D ^ A) + correct_words[2] + (md5_uint32) 0xc4ac5665; (B = (B << 23) | (B >> (32 - 23))); B += C; } while (0);
      do { A += (C ^ (B | ~D)) + correct_words[0] + (md5_uint32) 0xf4292244; (A = (A << 6) | (A >> (32 - 6))); A += B; } while (0);
      do { D += (B ^ (A | ~C)) + correct_words[7] + (md5_uint32) 0x432aff97; (D = (D << 10) | (D >> (32 - 10))); D += A; } while (0);
      do { C += (A ^ (D | ~B)) + correct_words[14] + (md5_uint32) 0xab9423a7; (C = (C << 15) | (C >> (32 - 15))); C += D; } while (0);
      do { B += (D ^ (C | ~A)) + correct_words[5] + (md5_uint32) 0xfc93a039; (B = (B << 21) | (B >> (32 - 21))); B += C; } while (0);
      do { A += (C ^ (B | ~D)) + correct_words[12] + (md5_uint32) 0x655b59c3; (A = (A << 6) | (A >> (32 - 6))); A += B; } while (0);
      do { D += (B ^ (A | ~C)) + correct_words[3] + (md5_uint32) 0x8f0ccc92; (D = (D << 10) | (D >> (32 - 10))); D += A; } while (0);
      do { C += (A ^ (D | ~B)) + correct_words[10] + (md5_uint32) 0xffeff47d; (C = (C << 15) | (C >> (32 - 15))); C += D; } while (0);
      do { B += (D ^ (C | ~A)) + correct_words[1] + (md5_uint32) 0x85845dd1; (B = (B << 21) | (B >> (32 - 21))); B += C; } while (0);
      do { A += (C ^ (B | ~D)) + correct_words[8] + (md5_uint32) 0x6fa87e4f; (A = (A << 6) | (A >> (32 - 6))); A += B; } while (0);
      do { D += (B ^ (A | ~C)) + correct_words[15] + (md5_uint32) 0xfe2ce6e0; (D = (D << 10) | (D >> (32 - 10))); D += A; } while (0);
      do { C += (A ^ (D | ~B)) + correct_words[6] + (md5_uint32) 0xa3014314; (C = (C << 15) | (C >> (32 - 15))); C += D; } while (0);
      do { B += (D ^ (C | ~A)) + correct_words[13] + (md5_uint32) 0x4e0811a1; (B = (B << 21) | (B >> (32 - 21))); B += C; } while (0);
      do { A += (C ^ (B | ~D)) + correct_words[4] + (md5_uint32) 0xf7537e82; (A = (A << 6) | (A >> (32 - 6))); A += B; } while (0);
      do { D += (B ^ (A | ~C)) + correct_words[11] + (md5_uint32) 0xbd3af235; (D = (D << 10) | (D >> (32 - 10))); D += A; } while (0);
      do { C += (A ^ (D | ~B)) + correct_words[2] + (md5_uint32) 0x2ad7d2bb; (C = (C << 15) | (C >> (32 - 15))); C += D; } while (0);
      do { B += (D ^ (C | ~A)) + correct_words[9] + (md5_uint32) 0xeb86d391; (B = (B << 21) | (B >> (32 - 21))); B += C; } while (0);
      A += A_save;
      B += B_save;
      C += C_save;
      D += D_save;
    }
  ctx->A = A;
  ctx->B = B;
  ctx->C = C;
  ctx->D = D;
}
const char *libiberty_optr;
char *libiberty_nptr;
unsigned long libiberty_len;
typedef union hdr
{
  char align[sizeof(double)];
  struct
    {
      union hdr *next;
      char *deep;
    } h;
} header;
static header *last_alloca_header = ((void *)0);
void *
C_alloca (size)
     size_t size;
{
  auto char probe;
  register char *depth = &(probe);
  {
    register header *hp;
    for (hp = last_alloca_header; hp != ((void *)0);)
      if ((-1 > 0 && hp->h.deep > depth)
   || (-1 < 0 && hp->h.deep < depth))
 {
   register header *np = hp->h.next;
   free ((void *) hp);
   hp = np;
 }
      else
 break;
    last_alloca_header = hp;
  }
  if (size == 0)
    return ((void *)0);
  {
    register void * new = xmalloc (sizeof (header) + size);
    if (new == 0)
      abort();
    ((header *) new)->h.next = last_alloca_header;
    ((header *) new)->h.deep = depth;
    last_alloca_header = (header *) new;
    return (void *) ((char *) new + sizeof (header));
  }
}
char **
dupargv (argv)
     char **argv;
{
  int argc;
  char **copy;
  if (argv == ((void *)0))
    return ((void *)0);
  for (argc = 0; argv[argc] != ((void *)0); argc++);
  copy = (char **) malloc ((argc + 1) * sizeof (char *));
  if (copy == ((void *)0))
    return ((void *)0);
  for (argc = 0; argv[argc] != ((void *)0); argc++)
    {
      int len = strlen (argv[argc]);
      copy[argc] = malloc (sizeof (char *) * (len + 1));
      if (copy[argc] == ((void *)0))
 {
   freeargv (copy);
   return ((void *)0);
 }
      strcpy (copy[argc], argv[argc]);
    }
  copy[argc] = ((void *)0);
  return copy;
}
void freeargv (vector)
char **vector;
{
  register char **scan;
  if (vector != ((void *)0))
    {
      for (scan = vector; *scan != ((void *)0); scan++)
 {
   free (*scan);
 }
      free (vector);
    }
}
char **buildargv (input)
     const char *input;
{
  char *arg;
  char *copybuf;
  int squote = 0;
  int dquote = 0;
  int bsquote = 0;
  int argc = 0;
  int maxargc = 0;
  char **argv = ((void *)0);
  char **nargv;
  if (input != ((void *)0))
    {
      copybuf = (char *) C_alloca(strlen (input) + 1);
      do
 {
   while (((*input) == ' ' || (*input) == '\t'))
     {
       input++;
     }
   if ((maxargc == 0) || (argc >= (maxargc - 1)))
     {
       if (argv == ((void *)0))
  {
    maxargc = 8;
    nargv = (char **) malloc (maxargc * sizeof (char *));
  }
       else
  {
    maxargc *= 2;
    nargv = (char **) realloc (argv, maxargc * sizeof (char *));
  }
       if (nargv == ((void *)0))
  {
    if (argv != ((void *)0))
      {
        freeargv (argv);
        argv = ((void *)0);
      }
    break;
  }
       argv = nargv;
       argv[argc] = ((void *)0);
     }
   arg = copybuf;
   while (*input != '\0')
     {
       if (((*input) == ' ' || (*input) == '\t') && !squote && !dquote && !bsquote)
  {
    break;
  }
       else
  {
    if (bsquote)
      {
        bsquote = 0;
        *arg++ = *input;
      }
    else if (*input == '\\')
      {
        bsquote = 1;
      }
    else if (squote)
      {
        if (*input == '\'')
   {
     squote = 0;
   }
        else
   {
     *arg++ = *input;
   }
      }
    else if (dquote)
      {
        if (*input == '"')
   {
     dquote = 0;
   }
        else
   {
     *arg++ = *input;
   }
      }
    else
      {
        if (*input == '\'')
   {
     squote = 1;
   }
        else if (*input == '"')
   {
     dquote = 1;
   }
        else
   {
     *arg++ = *input;
   }
      }
    input++;
  }
     }
   *arg = '\0';
   argv[argc] = strdup (copybuf);
   if (argv[argc] == ((void *)0))
     {
       freeargv (argv);
       argv = ((void *)0);
       break;
     }
   argc++;
   argv[argc] = ((void *)0);
   while (((*input) == ' ' || (*input) == '\t'))
     {
       input++;
     }
 }
      while (*input != '\0');
    }
  return (argv);
}
extern char *choose_tmpdir (void);
char *
choose_temp_base ()
{
  const char *base = choose_tmpdir ();
  char *temp_filename;
  int len;
  len = strlen (base);
  temp_filename = xmalloc (len + (sizeof("ccXXXXXX") - 1) + 1);
  strcpy (temp_filename, base);
  strcpy (temp_filename + len, "ccXXXXXX");
  mktemp (temp_filename);
  if (strlen (temp_filename) == 0)
    abort ();
  return temp_filename;
}
static unsigned long vconcat_length (const char *, va_list);
static unsigned long
vconcat_length (first, args)
     const char *first;
     va_list args;
{
  unsigned long length = 0;
  const char *arg;
  for (arg = first; arg ; arg = __builtin_va_arg(args,c))
    length += strlen (arg);
  return length;
}
static char *vconcat_copy (char *, const char *, va_list);
static char *
vconcat_copy (dst, first, args)
     char *dst;
     const char *first;
     va_list args;
{
  char *end = dst;
  const char *arg;
  for (arg = first; arg ; arg = __builtin_va_arg(args,c))
    {
      unsigned long length = strlen (arg);
      memcpy (end, arg, length);
      end += length;
    }
  *end = '\000';
  return dst;
}
unsigned long
concat_length (const char *first, ...)
{
  unsigned long length;
  { va_list args; __builtin_va_start(args,first); { struct Qdmy;
  struct Qdmy;
  length = vconcat_length (first, args);
  } __builtin_va_end(args); };
  return length;
}
char *
concat_copy (char *dst, const char *first, ...)
{
  char *save_dst;
  { va_list args; __builtin_va_start(args,first); { struct Qdmy;
  struct Qdmy;
  struct Qdmy;
  vconcat_copy (dst, first, args);
  save_dst = dst;
  } __builtin_va_end(args); };
  return save_dst;
}
char *libiberty_concat_ptr;
char *
concat_copy2 (const char *first, ...)
{
  { va_list args; __builtin_va_start(args,first); { struct Qdmy;
  struct Qdmy;
  vconcat_copy (libiberty_concat_ptr, first, args);
  } __builtin_va_end(args); };
  return libiberty_concat_ptr;
}
char *
concat (const char *first, ...)
{
  char *newstr;
  { va_list args; __builtin_va_start(args,first); { struct Qdmy;
  struct Qdmy;
  newstr = (char *) xmalloc (vconcat_length (first, args) + 1);
  } __builtin_va_end(args); };
  { va_list args; __builtin_va_start(args,first); { struct Qdmy;
  struct Qdmy;
  vconcat_copy (newstr, first, args);
  } __builtin_va_end(args); };
  return newstr;
}
char *
reconcat (char *optr, const char *first, ...)
{
  char *newstr;
  { va_list args; __builtin_va_start(args,first); { struct Qdmy;
  struct Qdmy;
  struct Qdmy;
  newstr = (char *) xmalloc (vconcat_length (first, args) + 1);
  } __builtin_va_end(args); };
  { va_list args; __builtin_va_start(args,first); { struct Qdmy;
  struct Qdmy;
  struct Qdmy;
  vconcat_copy (newstr, first, args);
  if (optr)
    free (optr);
  } __builtin_va_end(args); };
  return newstr;
}
int
cplus_demangle_fill_component (p, type, left, right)
     struct demangle_component *p;
     enum demangle_component_type type;
     struct demangle_component *left;
     struct demangle_component *right;
{
  if (p == ((void *)0))
    return 0;
  switch (type)
    {
    case DEMANGLE_COMPONENT_QUAL_NAME:
    case DEMANGLE_COMPONENT_LOCAL_NAME:
    case DEMANGLE_COMPONENT_TYPED_NAME:
    case DEMANGLE_COMPONENT_TEMPLATE:
    case DEMANGLE_COMPONENT_CONSTRUCTION_VTABLE:
    case DEMANGLE_COMPONENT_VENDOR_TYPE_QUAL:
    case DEMANGLE_COMPONENT_FUNCTION_TYPE:
    case DEMANGLE_COMPONENT_ARRAY_TYPE:
    case DEMANGLE_COMPONENT_PTRMEM_TYPE:
    case DEMANGLE_COMPONENT_ARGLIST:
    case DEMANGLE_COMPONENT_TEMPLATE_ARGLIST:
    case DEMANGLE_COMPONENT_UNARY:
    case DEMANGLE_COMPONENT_BINARY:
    case DEMANGLE_COMPONENT_BINARY_ARGS:
    case DEMANGLE_COMPONENT_TRINARY:
    case DEMANGLE_COMPONENT_TRINARY_ARG1:
    case DEMANGLE_COMPONENT_TRINARY_ARG2:
    case DEMANGLE_COMPONENT_LITERAL:
    case DEMANGLE_COMPONENT_LITERAL_NEG:
      break;
    case DEMANGLE_COMPONENT_VTABLE:
    case DEMANGLE_COMPONENT_VTT:
    case DEMANGLE_COMPONENT_TYPEINFO:
    case DEMANGLE_COMPONENT_TYPEINFO_NAME:
    case DEMANGLE_COMPONENT_TYPEINFO_FN:
    case DEMANGLE_COMPONENT_THUNK:
    case DEMANGLE_COMPONENT_VIRTUAL_THUNK:
    case DEMANGLE_COMPONENT_COVARIANT_THUNK:
    case DEMANGLE_COMPONENT_JAVA_CLASS:
    case DEMANGLE_COMPONENT_GUARD:
    case DEMANGLE_COMPONENT_REFTEMP:
    case DEMANGLE_COMPONENT_RESTRICT:
    case DEMANGLE_COMPONENT_VOLATILE:
    case DEMANGLE_COMPONENT_CONST:
    case DEMANGLE_COMPONENT_RESTRICT_THIS:
    case DEMANGLE_COMPONENT_VOLATILE_THIS:
    case DEMANGLE_COMPONENT_CONST_THIS:
    case DEMANGLE_COMPONENT_POINTER:
    case DEMANGLE_COMPONENT_REFERENCE:
    case DEMANGLE_COMPONENT_COMPLEX:
    case DEMANGLE_COMPONENT_IMAGINARY:
    case DEMANGLE_COMPONENT_VENDOR_TYPE:
    case DEMANGLE_COMPONENT_CAST:
      if (right != ((void *)0))
 return 0;
      break;
    default:
      return 0;
    }
  p->type = type;
  p->u.s_binary.left = left;
  p->u.s_binary.right = right;
  return 1;
}
int
cplus_demangle_fill_builtin_type (p, typename)
     struct demangle_component *p;
     const char *typename;
{
  int len;
  unsigned int i;
  if (p == ((void *)0) || typename == ((void *)0))
    return 0;
  len = strlen (typename);
  for (i = 0; i < (26); ++i)
    {
      if (len == cplus_demangle_builtin_types[i].len
   && strcmp (typename, cplus_demangle_builtin_types[i].name) == 0)
 {
   p->type = DEMANGLE_COMPONENT_BUILTIN_TYPE;
   p->u.s_builtin.type = &cplus_demangle_builtin_types[i];
   return 1;
 }
    }
  return 0;
}
int
cplus_demangle_fill_operator (p, opname, args)
     struct demangle_component *p;
     const char *opname;
     int args;
{
  int len;
  unsigned int i;
  if (p == ((void *)0) || opname == ((void *)0))
    return 0;
  len = strlen (opname);
  for (i = 0; cplus_demangle_operators[i].name != ((void *)0); ++i)
    {
      if (len == cplus_demangle_operators[i].len
   && args == cplus_demangle_operators[i].args
   && strcmp (opname, cplus_demangle_operators[i].name) == 0)
 {
   p->type = DEMANGLE_COMPONENT_OPERATOR;
   p->u.s_operator.op = &cplus_demangle_operators[i];
   return 1;
 }
    }
  return 0;
}
struct demangle_component *
cplus_demangle_v3_components (mangled, options, mem)
     const char *mangled;
     int options;
     void **mem;
{
  size_t len;
  int type;
  struct d_info di;
  struct demangle_component *dc;
  len = strlen (mangled);
  if (mangled[0] == '_' && mangled[1] == 'Z')
    type = 0;
  else
    {
      if ((options & (1 << 4)) == 0)
 return ((void *)0);
      type = 1;
    }
  cplus_demangle_init_info (mangled, options, len, &di);
  di.comps = ((struct demangle_component *)
       malloc (di.num_comps * sizeof (struct demangle_component)));
  di.subs = ((struct demangle_component **)
      malloc (di.num_subs * sizeof (struct demangle_component *)));
  if (di.comps == ((void *)0) || di.subs == ((void *)0))
    {
      if (di.comps != ((void *)0))
 free (di.comps);
      if (di.subs != ((void *)0))
 free (di.subs);
      return ((void *)0);
    }
  if (! type)
    dc = cplus_demangle_mangled_name (&di, 1);
  else
    dc = cplus_demangle_type (&di);
  if ((options & (1 << 0)) != 0 && (*((&di)->n)) != '\0')
    dc = ((void *)0);
  free (di.subs);
  if (dc != ((void *)0))
    *mem = di.comps;
  else
    free (di.comps);
  return dc;
}
int
dyn_string_init (ds_struct_ptr, space)
     struct dyn_string *ds_struct_ptr;
     int space;
{
  if (space == 0)
    space = 1;
  ds_struct_ptr->s = (char *) xmalloc (space);
  ds_struct_ptr->allocated = space;
  ds_struct_ptr->length = 0;
  ds_struct_ptr->s[0] = '\0';
  return 1;
}
dyn_string_t
dyn_string_new (space)
     int space;
{
  dyn_string_t result;
  result = (dyn_string_t) xmalloc (sizeof (struct dyn_string));
  dyn_string_init (result, space);
  return result;
}
void
dyn_string_delete (ds)
     dyn_string_t ds;
{
  free (ds->s);
  free (ds);
}
char*
dyn_string_release (ds)
     dyn_string_t ds;
{
  char* result = ds->s;
  ds->s = ((void *)0);
  free (ds);
  return result;
}
dyn_string_t
dyn_string_resize (ds, space)
     dyn_string_t ds;
     int space;
{
  int new_allocated = ds->allocated;
  ++space;
  while (space > new_allocated)
    new_allocated *= 2;
  if (new_allocated != ds->allocated)
    {
      ds->allocated = new_allocated;
      ds->s = (char *) xrealloc (ds->s, ds->allocated);
    }
  return ds;
}
void
dyn_string_clear (ds)
     dyn_string_t ds;
{
  ds->s[0] = '\0';
  ds->length = 0;
}
int
dyn_string_copy (dest, src)
     dyn_string_t dest;
     dyn_string_t src;
{
  if (dest == src)
    abort ();
  if (dyn_string_resize (dest, src->length) == ((void *)0))
    return 0;
  strcpy (dest->s, src->s);
  dest->length = src->length;
  return 1;
}
int
dyn_string_copy_cstr (dest, src)
     dyn_string_t dest;
     const char *src;
{
  int length = strlen (src);
  if (dyn_string_resize (dest, length) == ((void *)0))
    return 0;
  strcpy (dest->s, src);
  dest->length = length;
  return 1;
}
int
dyn_string_prepend (dest, src)
     dyn_string_t dest;
     dyn_string_t src;
{
  return dyn_string_insert (dest, 0, src);
}
int
dyn_string_prepend_cstr (dest, src)
     dyn_string_t dest;
     const char *src;
{
  return dyn_string_insert_cstr (dest, 0, src);
}
int
dyn_string_insert (dest, pos, src)
     dyn_string_t dest;
     int pos;
     dyn_string_t src;
{
  int i;
  if (src == dest)
    abort ();
  if (dyn_string_resize (dest, dest->length + src->length) == ((void *)0))
    return 0;
  for (i = dest->length; i >= pos; --i)
    dest->s[i + src->length] = dest->s[i];
  strncpy (dest->s + pos, src->s, src->length);
  dest->length += src->length;
  return 1;
}
int
dyn_string_insert_cstr (dest, pos, src)
     dyn_string_t dest;
     int pos;
     const char *src;
{
  int i;
  int length = strlen (src);
  if (dyn_string_resize (dest, dest->length + length) == ((void *)0))
    return 0;
  for (i = dest->length; i >= pos; --i)
    dest->s[i + length] = dest->s[i];
  strncpy (dest->s + pos, src, length);
  dest->length += length;
  return 1;
}
int
dyn_string_insert_char (dest, pos, c)
     dyn_string_t dest;
     int pos;
     int c;
{
  int i;
  if (dyn_string_resize (dest, dest->length + 1) == ((void *)0))
    return 0;
  for (i = dest->length; i >= pos; --i)
    dest->s[i + 1] = dest->s[i];
  dest->s[pos] = c;
  ++dest->length;
  return 1;
}
int
dyn_string_append (dest, s)
     dyn_string_t dest;
     dyn_string_t s;
{
  if (dyn_string_resize (dest, dest->length + s->length) == 0)
    return 0;
  strcpy (dest->s + dest->length, s->s);
  dest->length += s->length;
  return 1;
}
int
dyn_string_append_cstr (dest, s)
     dyn_string_t dest;
     const char *s;
{
  int len = strlen (s);
  if (dyn_string_resize (dest, dest->length + len) == ((void *)0))
    return 0;
  strcpy (dest->s + dest->length, s);
  dest->length += len;
  return 1;
}
int
dyn_string_append_char (dest, c)
     dyn_string_t dest;
     int c;
{
  if (dyn_string_resize (dest, dest->length + 1) == ((void *)0))
    return 0;
  dest->s[dest->length] = c;
  dest->s[dest->length + 1] = '\0';
  ++(dest->length);
  return 1;
}
int
dyn_string_substring (dest, src, start, end)
     dyn_string_t dest;
     dyn_string_t src;
     int start;
     int end;
{
  int i;
  int length = end - start;
  if (start > end || start > src->length || end > src->length)
    abort ();
  if (dyn_string_resize (dest, length) == ((void *)0))
    return 0;
  for (i = length; --i >= 0; )
    dest->s[i] = src->s[start + i];
  dest->s[length] = '\0';
  dest->length = length;
  return 1;
}
int
dyn_string_eq (ds1, ds2)
     dyn_string_t ds1;
     dyn_string_t ds2;
{
  if (ds1->length != ds2->length)
    return 0;
  else
    return !strcmp (ds1->s, ds2->s);
}
struct stat
  {
    __dev_t st_dev;
    __ino_t st_ino;
    __nlink_t st_nlink;
    __mode_t st_mode;
    __uid_t st_uid;
    __gid_t st_gid;
    int __pad0;
    __dev_t st_rdev;
    __off_t st_size;
    __blksize_t st_blksize;
    __blkcnt_t st_blocks;
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
    __syscall_slong_t __glibc_reserved[3];
  };
struct stat64
  {
    __dev_t st_dev;
    __ino64_t st_ino;
    __nlink_t st_nlink;
    __mode_t st_mode;
    __uid_t st_uid;
    __gid_t st_gid;
    int __pad0;
    __dev_t st_rdev;
    __off_t st_size;
    __blksize_t st_blksize;
    __blkcnt64_t st_blocks;
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
    __syscall_slong_t __glibc_reserved[3];
  };
extern int stat (const char * __file,
   struct stat * __buf) ;
extern int fstat (int __fd, struct stat *__buf) ;
extern int stat64 (const char * __file,
     struct stat64 * __buf) ;
extern int fstat64 (int __fd, struct stat64 *__buf) ;
extern int fstatat (int __fd, const char * __file,
      struct stat * __buf, int __flag)
     ;
extern int fstatat64 (int __fd, const char * __file,
        struct stat64 * __buf, int __flag)
     ;
extern int lstat (const char * __file,
    struct stat * __buf) ;
extern int lstat64 (const char * __file,
      struct stat64 * __buf)
     ;
extern int chmod (const char *__file, __mode_t __mode)
     ;
extern int lchmod (const char *__file, __mode_t __mode)
     ;
extern int fchmod (int __fd, __mode_t __mode) ;
extern int fchmodat (int __fd, const char *__file, __mode_t __mode,
       int __flag)
     ;
extern __mode_t umask (__mode_t __mask) ;
extern __mode_t getumask (void) ;
extern int mkdir (const char *__path, __mode_t __mode)
     ;
extern int mkdirat (int __fd, const char *__path, __mode_t __mode)
     ;
extern int mknod (const char *__path, __mode_t __mode, __dev_t __dev)
     ;
extern int mknodat (int __fd, const char *__path, __mode_t __mode,
      __dev_t __dev) ;
extern int mkfifo (const char *__path, __mode_t __mode)
     ;
extern int mkfifoat (int __fd, const char *__path, __mode_t __mode)
     ;
extern int utimensat (int __fd, const char *__path,
        const struct timespec __times[2],
        int __flags)
     ;
extern int futimens (int __fd, const struct timespec __times[2]) ;
extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)
     ;
extern int __xstat (int __ver, const char *__filename,
      struct stat *__stat_buf) ;
extern int __lxstat (int __ver, const char *__filename,
       struct stat *__stat_buf) ;
extern int __fxstatat (int __ver, int __fildes, const char *__filename,
         struct stat *__stat_buf, int __flag)
     ;
extern int __fxstat64 (int __ver, int __fildes, struct stat64 *__stat_buf)
     ;
extern int __xstat64 (int __ver, const char *__filename,
        struct stat64 *__stat_buf) ;
extern int __lxstat64 (int __ver, const char *__filename,
         struct stat64 *__stat_buf) ;
extern int __fxstatat64 (int __ver, int __fildes, const char *__filename,
    struct stat64 *__stat_buf, int __flag)
     ;
extern int __xmknod (int __ver, const char *__path, __mode_t __mode,
       __dev_t *__dev) ;
extern int __xmknodat (int __ver, int __fd, const char *__path,
         __mode_t __mode, __dev_t *__dev)
     ;
int fdmatch (fd1, fd2)
 int fd1;
 int fd2;
{
  struct stat sbuf1;
  struct stat sbuf2;
  if ((fstat (fd1, &sbuf1) == 0) &&
      (fstat (fd2, &sbuf2) == 0) &&
      (sbuf1.st_dev == sbuf2.st_dev) &&
      (sbuf1.st_ino == sbuf2.st_ino))
    {
      return (1);
    }
  else
    {
      return (0);
    }
}
typedef long fibheapkey_t;
typedef struct fibheap
{
  size_t nodes;
  struct fibnode *min;
  struct fibnode *root;
} *fibheap_t;
typedef struct fibnode
{
  struct fibnode *parent;
  struct fibnode *child;
  struct fibnode *left;
  struct fibnode *right;
  fibheapkey_t key;
  void *data;
  unsigned int degree : 31;
  unsigned int mark : 1;
} *fibnode_t;
extern fibheap_t fibheap_new (void);
extern fibnode_t fibheap_insert (fibheap_t, fibheapkey_t, void *);
extern int fibheap_empty (fibheap_t);
extern fibheapkey_t fibheap_min_key (fibheap_t);
extern fibheapkey_t fibheap_replace_key (fibheap_t, fibnode_t, fibheapkey_t)
                     ;
extern void *fibheap_replace_key_data (fibheap_t, fibnode_t, fibheapkey_t, void *)
                                  ;
extern void *fibheap_extract_min (fibheap_t);
extern void *fibheap_min (fibheap_t);
extern void *fibheap_replace_data (fibheap_t, fibnode_t, void *);
extern void *fibheap_delete_node (fibheap_t, fibnode_t);
extern void fibheap_delete (fibheap_t);
extern fibheap_t fibheap_union (fibheap_t, fibheap_t);
static void fibheap_ins_root (fibheap_t, fibnode_t);
static void fibheap_rem_root (fibheap_t, fibnode_t);
static void fibheap_consolidate (fibheap_t);
static void fibheap_link (fibheap_t, fibnode_t, fibnode_t);
static void fibheap_cut (fibheap_t, fibnode_t, fibnode_t);
static void fibheap_cascading_cut (fibheap_t, fibnode_t);
static fibnode_t fibheap_extr_min_node (fibheap_t);
static int fibheap_compare (fibheap_t, fibnode_t, fibnode_t);
static int fibheap_comp_data (fibheap_t, fibheapkey_t, void *, fibnode_t)
                     ;
static fibnode_t fibnode_new (void);
static void fibnode_insert_after (fibnode_t, fibnode_t);
static fibnode_t fibnode_remove (fibnode_t);
fibheap_t
fibheap_new ()
{
  return (fibheap_t) xcalloc (1, sizeof (struct fibheap));
}
static fibnode_t
fibnode_new ()
{
  fibnode_t node;
  node = (fibnode_t) xcalloc (1, sizeof *node);
  node->left = node;
  node->right = node;
  return node;
}
static int
fibheap_compare (heap, a, b)
     fibheap_t heap ;
     fibnode_t a;
     fibnode_t b;
{
  if (a->key < b->key)
    return -1;
  if (a->key > b->key)
    return 1;
  return 0;
}
static int
fibheap_comp_data (heap, key, data, b)
     fibheap_t heap;
     fibheapkey_t key;
     void *data;
     fibnode_t b;
{
  struct fibnode a;
  a.key = key;
  a.data = data;
  return fibheap_compare (heap, &a, b);
}
fibnode_t
fibheap_insert (heap, key, data)
     fibheap_t heap;
     fibheapkey_t key;
     void *data;
{
  fibnode_t node;
  node = fibnode_new ();
  node->data = data;
  node->key = key;
  fibheap_ins_root (heap, node);
  if (heap->min == ((void *)0) || node->key < heap->min->key)
    heap->min = node;
  heap->nodes++;
  return node;
}
void *
fibheap_min (heap)
     fibheap_t heap;
{
  if (heap->min == ((void *)0))
    return ((void *)0);
  return heap->min->data;
}
fibheapkey_t
fibheap_min_key (heap)
     fibheap_t heap;
{
  if (heap->min == ((void *)0))
    return 0;
  return heap->min->key;
}
fibheap_t
fibheap_union (heapa, heapb)
     fibheap_t heapa;
     fibheap_t heapb;
{
  fibnode_t a_root, b_root, temp;
  if ((a_root = heapa->root) == ((void *)0))
    {
      free (heapa);
      return heapb;
    }
  if ((b_root = heapb->root) == ((void *)0))
    {
      free (heapb);
      return heapa;
    }
  a_root->left->right = b_root;
  b_root->left->right = a_root;
  temp = a_root->left;
  a_root->left = b_root->left;
  b_root->left = temp;
  heapa->nodes += heapb->nodes;
  if (fibheap_compare (heapa, heapb->min, heapa->min) < 0)
    heapa->min = heapb->min;
  free (heapb);
  return heapa;
}
void *
fibheap_extract_min (heap)
     fibheap_t heap;
{
  fibnode_t z;
  void *ret = ((void *)0);
  if (heap->min != ((void *)0))
    {
      z = fibheap_extr_min_node (heap);
      ret = z->data;
      free (z);
    }
  return ret;
}
void *
fibheap_replace_key_data (heap, node, key, data)
     fibheap_t heap;
     fibnode_t node;
     fibheapkey_t key;
     void *data;
{
  void *odata;
  fibheapkey_t okey;
  fibnode_t y;
  if (fibheap_comp_data (heap, key, data, node) > 0)
    return ((void *)0);
  odata = node->data;
  okey = node->key;
  node->data = data;
  node->key = key;
  y = node->parent;
  if (okey == key)
    return odata;
  if (y != ((void *)0) && fibheap_compare (heap, node, y) <= 0)
    {
      fibheap_cut (heap, node, y);
      fibheap_cascading_cut (heap, y);
    }
  if (fibheap_compare (heap, node, heap->min) <= 0)
    heap->min = node;
  return odata;
}
void *
fibheap_replace_data (heap, node, data)
     fibheap_t heap;
     fibnode_t node;
     void *data;
{
  return fibheap_replace_key_data (heap, node, node->key, data);
}
fibheapkey_t
fibheap_replace_key (heap, node, key)
     fibheap_t heap;
     fibnode_t node;
     fibheapkey_t key;
{
  int okey = node->key;
  fibheap_replace_key_data (heap, node, key, node->data);
  return okey;
}
void *
fibheap_delete_node (heap, node)
     fibheap_t heap;
     fibnode_t node;
{
  void *ret = node->data;
  fibheap_replace_key (heap, node, (-9223372036854775807L - 1L));
  fibheap_extract_min (heap);
  return ret;
}
void
fibheap_delete (heap)
     fibheap_t heap;
{
  while (heap->min != ((void *)0))
    free (fibheap_extr_min_node (heap));
  free (heap);
}
int
fibheap_empty (heap)
     fibheap_t heap;
{
  return heap->nodes == 0;
}
static fibnode_t
fibheap_extr_min_node (heap)
     fibheap_t heap;
{
  fibnode_t ret = heap->min;
  fibnode_t x, y, orig;
  for (x = ret->child, orig = ((void *)0); x != orig && x != ((void *)0); x = y)
    {
      if (orig == ((void *)0))
 orig = x;
      y = x->right;
      x->parent = ((void *)0);
      fibheap_ins_root (heap, x);
    }
  fibheap_rem_root (heap, ret);
  heap->nodes--;
  if (heap->nodes == 0)
    heap->min = ((void *)0);
  else
    {
      heap->min = ret->right;
      fibheap_consolidate (heap);
    }
  return ret;
}
static void
fibheap_ins_root (heap, node)
     fibheap_t heap;
     fibnode_t node;
{
  if (heap->root == ((void *)0))
    {
      heap->root = node;
      node->left = node;
      node->right = node;
      return;
    }
  fibnode_insert_after (heap->root, node);
}
static void
fibheap_rem_root (heap, node)
     fibheap_t heap;
     fibnode_t node;
{
  if (node->left == node)
    heap->root = ((void *)0);
  else
    heap->root = fibnode_remove (node);
}
static void
fibheap_consolidate (heap)
     fibheap_t heap;
{
  fibnode_t a[1 + 8 * sizeof (long)];
  fibnode_t w;
  fibnode_t y;
  fibnode_t x;
  int i;
  int d;
  int D;
  D = 1 + 8 * sizeof (long);
  memset (a, 0, sizeof (fibnode_t) * D);
  while ((w = heap->root) != ((void *)0))
    {
      x = w;
      fibheap_rem_root (heap, w);
      d = x->degree;
      while (a[d] != ((void *)0))
 {
   y = a[d];
   if (fibheap_compare (heap, x, y) > 0)
     {
       fibnode_t temp;
       temp = x;
       x = y;
       y = temp;
     }
   fibheap_link (heap, y, x);
   a[d] = ((void *)0);
   d++;
 }
      a[d] = x;
    }
  heap->min = ((void *)0);
  for (i = 0; i < D; i++)
    if (a[i] != ((void *)0))
      {
 fibheap_ins_root (heap, a[i]);
 if (heap->min == ((void *)0) || fibheap_compare (heap, a[i], heap->min) < 0)
   heap->min = a[i];
      }
}
static void
fibheap_link (heap, node, parent)
     fibheap_t heap ;
     fibnode_t node;
     fibnode_t parent;
{
  if (parent->child == ((void *)0))
    parent->child = node;
  else
    fibnode_insert_after (parent->child->left, node);
  node->parent = parent;
  parent->degree++;
  node->mark = 0;
}
static void
fibheap_cut (heap, node, parent)
     fibheap_t heap;
     fibnode_t node;
     fibnode_t parent;
{
  fibnode_remove (node);
  parent->degree--;
  fibheap_ins_root (heap, node);
  node->parent = ((void *)0);
  node->mark = 0;
}
static void
fibheap_cascading_cut (heap, y)
     fibheap_t heap;
     fibnode_t y;
{
  fibnode_t z;
  while ((z = y->parent) != ((void *)0))
    {
      if (y->mark == 0)
 {
   y->mark = 1;
   return;
 }
      else
 {
   fibheap_cut (heap, y, z);
   y = z;
 }
    }
}
static void
fibnode_insert_after (a, b)
     fibnode_t a;
     fibnode_t b;
{
  if (a == a->right)
    {
      a->right = b;
      a->left = b;
      b->right = a;
      b->left = a;
    }
  else
    {
      b->right = a->right;
      a->right->left = b;
      a->right = b;
      b->left = a;
    }
}
static fibnode_t
fibnode_remove (node)
     fibnode_t node;
{
  fibnode_t ret;
  if (node == node->left)
    ret = ((void *)0);
  else
    ret = node->left;
  if (node->parent != ((void *)0) && node->parent->child == node)
    node->parent->child = ret;
  node->right->left = node->left;
  node->left->right = node->right;
  node->parent = ((void *)0);
  node->left = node;
  node->right = node;
  return ret;
}
typedef union { unsigned char __c[8]; double __d; } __huge_val_t;
static __huge_val_t __huge_val = { { 0, 0, 0, 0, 0, 0, 0xf0, 0x7f } };
typedef union { unsigned char __c[4]; float __f; } __huge_valf_t;
static __huge_valf_t __huge_valf = { { 0, 0, 0x80, 0x7f } };
static union { unsigned char __c[12]; long double __ld; } __huge_vall = { { 0, 0, 0, 0, 0, 0, 0, 0x80, 0xff, 0x7f, 0, 0 } };
static union { unsigned char __c[4]; float __d; } __qnan_union
  = { { 0, 0, 0xc0, 0x7f } };
typedef float float_t;
typedef double double_t;
extern double acos (double __x) ; extern double __acos (double __x) ;
extern double asin (double __x) ; extern double __asin (double __x) ;
extern double atan (double __x) ; extern double __atan (double __x) ;
extern double atan2 (double __y, double __x) ; extern double __atan2 (double __y, double __x) ;
extern double cos (double __x) ; extern double __cos (double __x) ;
extern double sin (double __x) ; extern double __sin (double __x) ;
extern double tan (double __x) ; extern double __tan (double __x) ;
extern double cosh (double __x) ; extern double __cosh (double __x) ;
extern double sinh (double __x) ; extern double __sinh (double __x) ;
extern double tanh (double __x) ; extern double __tanh (double __x) ;
extern void sincos (double __x, double *__sinx, double *__cosx) ; extern void __sincos (double __x, double *__sinx, double *__cosx)
                                                           ;
extern double acosh (double __x) ; extern double __acosh (double __x) ;
extern double asinh (double __x) ; extern double __asinh (double __x) ;
extern double atanh (double __x) ; extern double __atanh (double __x) ;
extern double exp (double __x) ; extern double __exp (double __x) ;
extern double frexp (double __x, int *__exponent) ; extern double __frexp (double __x, int *__exponent) ;
extern double ldexp (double __x, int __exponent) ; extern double __ldexp (double __x, int __exponent) ;
extern double log (double __x) ; extern double __log (double __x) ;
extern double log10 (double __x) ; extern double __log10 (double __x) ;
extern double modf (double __x, double *__iptr) ; extern double __modf (double __x, double *__iptr) ;
extern double exp10 (double __x) ; extern double __exp10 (double __x) ;
extern double pow10 (double __x) ; extern double __pow10 (double __x) ;
extern double expm1 (double __x) ; extern double __expm1 (double __x) ;
extern double log1p (double __x) ; extern double __log1p (double __x) ;
extern double logb (double __x) ; extern double __logb (double __x) ;
extern double exp2 (double __x) ; extern double __exp2 (double __x) ;
extern double log2 (double __x) ; extern double __log2 (double __x) ;
extern double pow (double __x, double __y) ; extern double __pow (double __x, double __y) ;
extern double sqrt (double __x) ; extern double __sqrt (double __x) ;
extern double hypot (double __x, double __y) ; extern double __hypot (double __x, double __y) ;
extern double cbrt (double __x) ; extern double __cbrt (double __x) ;
extern double ceil (double __x) ; extern double __ceil (double __x) ;
extern double fabs (double __x) ; extern double __fabs (double __x) ;
extern double floor (double __x) ; extern double __floor (double __x) ;
extern double fmod (double __x, double __y) ; extern double __fmod (double __x, double __y) ;
extern int __isinf (double __value) ;
extern int __finite (double __value) ;
extern int isinf (double __value) ;
extern int finite (double __value) ;
extern double drem (double __x, double __y) ; extern double __drem (double __x, double __y) ;
extern double significand (double __x) ; extern double __significand (double __x) ;
extern double copysign (double __x, double __y) ; extern double __copysign (double __x, double __y) ;
extern double nan (const char *__tagb) ; extern double __nan (const char *__tagb) ;
extern int __isnan (double __value) ;
extern int isnan (double __value) ;
extern double j0 (double) ; extern double __j0 (double) ;
extern double j1 (double) ; extern double __j1 (double) ;
extern double jn (int, double) ; extern double __jn (int, double) ;
extern double y0 (double) ; extern double __y0 (double) ;
extern double y1 (double) ; extern double __y1 (double) ;
extern double yn (int, double) ; extern double __yn (int, double) ;
extern double erf (double) ; extern double __erf (double) ;
extern double erfc (double) ; extern double __erfc (double) ;
extern double lgamma (double) ; extern double __lgamma (double) ;
extern double tgamma (double) ; extern double __tgamma (double) ;
extern double gamma (double) ; extern double __gamma (double) ;
extern double lgamma_r (double, int *__signgamp) ; extern double __lgamma_r (double, int *__signgamp) ;
extern double rint (double __x) ; extern double __rint (double __x) ;
extern double nextafter (double __x, double __y) ; extern double __nextafter (double __x, double __y) ;
extern double nexttoward (double __x, long double __y) ; extern double __nexttoward (double __x, long double __y) ;
extern double remainder (double __x, double __y) ; extern double __remainder (double __x, double __y) ;
extern double scalbn (double __x, int __n) ; extern double __scalbn (double __x, int __n) ;
extern int ilogb (double __x) ; extern int __ilogb (double __x) ;
extern double scalbln (double __x, long int __n) ; extern double __scalbln (double __x, long int __n) ;
extern double nearbyint (double __x) ; extern double __nearbyint (double __x) ;
extern double round (double __x) ; extern double __round (double __x) ;
extern double trunc (double __x) ; extern double __trunc (double __x) ;
extern double remquo (double __x, double __y, int *__quo) ; extern double __remquo (double __x, double __y, int *__quo) ;
extern long int lrint (double __x) ; extern long int __lrint (double __x) ;
extern long long int llrint (double __x) ; extern long long int __llrint (double __x) ;
extern long int lround (double __x) ; extern long int __lround (double __x) ;
extern long long int llround (double __x) ; extern long long int __llround (double __x) ;
extern double fdim (double __x, double __y) ; extern double __fdim (double __x, double __y) ;
extern double fmax (double __x, double __y) ; extern double __fmax (double __x, double __y) ;
extern double fmin (double __x, double __y) ; extern double __fmin (double __x, double __y) ;
extern int __fpclassify (double __value)
     ;
extern int __signbit (double __value)
     ;
extern double fma (double __x, double __y, double __z) ; extern double __fma (double __x, double __y, double __z) ;
extern int __issignaling (double __value)
     ;
extern double scalb (double __x, double __n) ; extern double __scalb (double __x, double __n) ;
extern float acosf (float __x) ; extern float __acosf (float __x) ;
extern float asinf (float __x) ; extern float __asinf (float __x) ;
extern float atanf (float __x) ; extern float __atanf (float __x) ;
extern float atan2f (float __y, float __x) ; extern float __atan2f (float __y, float __x) ;
extern float cosf (float __x) ; extern float __cosf (float __x) ;
extern float sinf (float __x) ; extern float __sinf (float __x) ;
extern float tanf (float __x) ; extern float __tanf (float __x) ;
extern float coshf (float __x) ; extern float __coshf (float __x) ;
extern float sinhf (float __x) ; extern float __sinhf (float __x) ;
extern float tanhf (float __x) ; extern float __tanhf (float __x) ;
extern void sincosf (float __x, float *__sinx, float *__cosx) ; extern void __sincosf (float __x, float *__sinx, float *__cosx)
                                                           ;
extern float acoshf (float __x) ; extern float __acoshf (float __x) ;
extern float asinhf (float __x) ; extern float __asinhf (float __x) ;
extern float atanhf (float __x) ; extern float __atanhf (float __x) ;
extern float expf (float __x) ; extern float __expf (float __x) ;
extern float frexpf (float __x, int *__exponent) ; extern float __frexpf (float __x, int *__exponent) ;
extern float ldexpf (float __x, int __exponent) ; extern float __ldexpf (float __x, int __exponent) ;
extern float logf (float __x) ; extern float __logf (float __x) ;
extern float log10f (float __x) ; extern float __log10f (float __x) ;
extern float modff (float __x, float *__iptr) ; extern float __modff (float __x, float *__iptr) ;
extern float exp10f (float __x) ; extern float __exp10f (float __x) ;
extern float pow10f (float __x) ; extern float __pow10f (float __x) ;
extern float expm1f (float __x) ; extern float __expm1f (float __x) ;
extern float log1pf (float __x) ; extern float __log1pf (float __x) ;
extern float logbf (float __x) ; extern float __logbf (float __x) ;
extern float exp2f (float __x) ; extern float __exp2f (float __x) ;
extern float log2f (float __x) ; extern float __log2f (float __x) ;
extern float powf (float __x, float __y) ; extern float __powf (float __x, float __y) ;
extern float sqrtf (float __x) ; extern float __sqrtf (float __x) ;
extern float hypotf (float __x, float __y) ; extern float __hypotf (float __x, float __y) ;
extern float cbrtf (float __x) ; extern float __cbrtf (float __x) ;
extern float ceilf (float __x) ; extern float __ceilf (float __x) ;
extern float fabsf (float __x) ; extern float __fabsf (float __x) ;
extern float floorf (float __x) ; extern float __floorf (float __x) ;
extern float fmodf (float __x, float __y) ; extern float __fmodf (float __x, float __y) ;
extern int __isinff (float __value) ;
extern int __finitef (float __value) ;
extern int isinff (float __value) ;
extern int finitef (float __value) ;
extern float dremf (float __x, float __y) ; extern float __dremf (float __x, float __y) ;
extern float significandf (float __x) ; extern float __significandf (float __x) ;
extern float copysignf (float __x, float __y) ; extern float __copysignf (float __x, float __y) ;
extern float nanf (const char *__tagb) ; extern float __nanf (const char *__tagb) ;
extern int __isnanf (float __value) ;
extern int isnanf (float __value) ;
extern float j0f (float) ; extern float __j0f (float) ;
extern float j1f (float) ; extern float __j1f (float) ;
extern float jnf (int, float) ; extern float __jnf (int, float) ;
extern float y0f (float) ; extern float __y0f (float) ;
extern float y1f (float) ; extern float __y1f (float) ;
extern float ynf (int, float) ; extern float __ynf (int, float) ;
extern float erff (float) ; extern float __erff (float) ;
extern float erfcf (float) ; extern float __erfcf (float) ;
extern float lgammaf (float) ; extern float __lgammaf (float) ;
extern float tgammaf (float) ; extern float __tgammaf (float) ;
extern float gammaf (float) ; extern float __gammaf (float) ;
extern float lgammaf_r (float, int *__signgamp) ; extern float __lgammaf_r (float, int *__signgamp) ;
extern float rintf (float __x) ; extern float __rintf (float __x) ;
extern float nextafterf (float __x, float __y) ; extern float __nextafterf (float __x, float __y) ;
extern float nexttowardf (float __x, long double __y) ; extern float __nexttowardf (float __x, long double __y) ;
extern float remainderf (float __x, float __y) ; extern float __remainderf (float __x, float __y) ;
extern float scalbnf (float __x, int __n) ; extern float __scalbnf (float __x, int __n) ;
extern int ilogbf (float __x) ; extern int __ilogbf (float __x) ;
extern float scalblnf (float __x, long int __n) ; extern float __scalblnf (float __x, long int __n) ;
extern float nearbyintf (float __x) ; extern float __nearbyintf (float __x) ;
extern float roundf (float __x) ; extern float __roundf (float __x) ;
extern float truncf (float __x) ; extern float __truncf (float __x) ;
extern float remquof (float __x, float __y, int *__quo) ; extern float __remquof (float __x, float __y, int *__quo) ;
extern long int lrintf (float __x) ; extern long int __lrintf (float __x) ;
extern long long int llrintf (float __x) ; extern long long int __llrintf (float __x) ;
extern long int lroundf (float __x) ; extern long int __lroundf (float __x) ;
extern long long int llroundf (float __x) ; extern long long int __llroundf (float __x) ;
extern float fdimf (float __x, float __y) ; extern float __fdimf (float __x, float __y) ;
extern float fmaxf (float __x, float __y) ; extern float __fmaxf (float __x, float __y) ;
extern float fminf (float __x, float __y) ; extern float __fminf (float __x, float __y) ;
extern int __fpclassifyf (float __value)
     ;
extern int __signbitf (float __value)
     ;
extern float fmaf (float __x, float __y, float __z) ; extern float __fmaf (float __x, float __y, float __z) ;
extern int __issignalingf (float __value)
     ;
extern float scalbf (float __x, float __n) ; extern float __scalbf (float __x, float __n) ;
extern long double acosl (long double __x) ; extern long double __acosl (long double __x) ;
extern long double asinl (long double __x) ; extern long double __asinl (long double __x) ;
extern long double atanl (long double __x) ; extern long double __atanl (long double __x) ;
extern long double atan2l (long double __y, long double __x) ; extern long double __atan2l (long double __y, long double __x) ;
extern long double cosl (long double __x) ; extern long double __cosl (long double __x) ;
extern long double sinl (long double __x) ; extern long double __sinl (long double __x) ;
extern long double tanl (long double __x) ; extern long double __tanl (long double __x) ;
extern long double coshl (long double __x) ; extern long double __coshl (long double __x) ;
extern long double sinhl (long double __x) ; extern long double __sinhl (long double __x) ;
extern long double tanhl (long double __x) ; extern long double __tanhl (long double __x) ;
extern void sincosl (long double __x, long double *__sinx, long double *__cosx) ; extern void __sincosl (long double __x, long double *__sinx, long double *__cosx)
                                                           ;
extern long double acoshl (long double __x) ; extern long double __acoshl (long double __x) ;
extern long double asinhl (long double __x) ; extern long double __asinhl (long double __x) ;
extern long double atanhl (long double __x) ; extern long double __atanhl (long double __x) ;
extern long double expl (long double __x) ; extern long double __expl (long double __x) ;
extern long double frexpl (long double __x, int *__exponent) ; extern long double __frexpl (long double __x, int *__exponent) ;
extern long double ldexpl (long double __x, int __exponent) ; extern long double __ldexpl (long double __x, int __exponent) ;
extern long double logl (long double __x) ; extern long double __logl (long double __x) ;
extern long double log10l (long double __x) ; extern long double __log10l (long double __x) ;
extern long double modfl (long double __x, long double *__iptr) ; extern long double __modfl (long double __x, long double *__iptr) ;
extern long double exp10l (long double __x) ; extern long double __exp10l (long double __x) ;
extern long double pow10l (long double __x) ; extern long double __pow10l (long double __x) ;
extern long double expm1l (long double __x) ; extern long double __expm1l (long double __x) ;
extern long double log1pl (long double __x) ; extern long double __log1pl (long double __x) ;
extern long double logbl (long double __x) ; extern long double __logbl (long double __x) ;
extern long double exp2l (long double __x) ; extern long double __exp2l (long double __x) ;
extern long double log2l (long double __x) ; extern long double __log2l (long double __x) ;
extern long double powl (long double __x, long double __y) ; extern long double __powl (long double __x, long double __y) ;
extern long double sqrtl (long double __x) ; extern long double __sqrtl (long double __x) ;
extern long double hypotl (long double __x, long double __y) ; extern long double __hypotl (long double __x, long double __y) ;
extern long double cbrtl (long double __x) ; extern long double __cbrtl (long double __x) ;
extern long double ceill (long double __x) ; extern long double __ceill (long double __x) ;
extern long double fabsl (long double __x) ; extern long double __fabsl (long double __x) ;
extern long double floorl (long double __x) ; extern long double __floorl (long double __x) ;
extern long double fmodl (long double __x, long double __y) ; extern long double __fmodl (long double __x, long double __y) ;
extern int __isinfl (long double __value) ;
extern int __finitel (long double __value) ;
extern int isinfl (long double __value) ;
extern int finitel (long double __value) ;
extern long double dreml (long double __x, long double __y) ; extern long double __dreml (long double __x, long double __y) ;
extern long double significandl (long double __x) ; extern long double __significandl (long double __x) ;
extern long double copysignl (long double __x, long double __y) ; extern long double __copysignl (long double __x, long double __y) ;
extern long double nanl (const char *__tagb) ; extern long double __nanl (const char *__tagb) ;
extern int __isnanl (long double __value) ;
extern int isnanl (long double __value) ;
extern long double j0l (long double) ; extern long double __j0l (long double) ;
extern long double j1l (long double) ; extern long double __j1l (long double) ;
extern long double jnl (int, long double) ; extern long double __jnl (int, long double) ;
extern long double y0l (long double) ; extern long double __y0l (long double) ;
extern long double y1l (long double) ; extern long double __y1l (long double) ;
extern long double ynl (int, long double) ; extern long double __ynl (int, long double) ;
extern long double erfl (long double) ; extern long double __erfl (long double) ;
extern long double erfcl (long double) ; extern long double __erfcl (long double) ;
extern long double lgammal (long double) ; extern long double __lgammal (long double) ;
extern long double tgammal (long double) ; extern long double __tgammal (long double) ;
extern long double gammal (long double) ; extern long double __gammal (long double) ;
extern long double lgammal_r (long double, int *__signgamp) ; extern long double __lgammal_r (long double, int *__signgamp) ;
extern long double rintl (long double __x) ; extern long double __rintl (long double __x) ;
extern long double nextafterl (long double __x, long double __y) ; extern long double __nextafterl (long double __x, long double __y) ;
extern long double nexttowardl (long double __x, long double __y) ; extern long double __nexttowardl (long double __x, long double __y) ;
extern long double remainderl (long double __x, long double __y) ; extern long double __remainderl (long double __x, long double __y) ;
extern long double scalbnl (long double __x, int __n) ; extern long double __scalbnl (long double __x, int __n) ;
extern int ilogbl (long double __x) ; extern int __ilogbl (long double __x) ;
extern long double scalblnl (long double __x, long int __n) ; extern long double __scalblnl (long double __x, long int __n) ;
extern long double nearbyintl (long double __x) ; extern long double __nearbyintl (long double __x) ;
extern long double roundl (long double __x) ; extern long double __roundl (long double __x) ;
extern long double truncl (long double __x) ; extern long double __truncl (long double __x) ;
extern long double remquol (long double __x, long double __y, int *__quo) ; extern long double __remquol (long double __x, long double __y, int *__quo) ;
extern long int lrintl (long double __x) ; extern long int __lrintl (long double __x) ;
extern long long int llrintl (long double __x) ; extern long long int __llrintl (long double __x) ;
extern long int lroundl (long double __x) ; extern long int __lroundl (long double __x) ;
extern long long int llroundl (long double __x) ; extern long long int __llroundl (long double __x) ;
extern long double fdiml (long double __x, long double __y) ; extern long double __fdiml (long double __x, long double __y) ;
extern long double fmaxl (long double __x, long double __y) ; extern long double __fmaxl (long double __x, long double __y) ;
extern long double fminl (long double __x, long double __y) ; extern long double __fminl (long double __x, long double __y) ;
extern int __fpclassifyl (long double __value)
     ;
extern int __signbitl (long double __value)
     ;
extern long double fmal (long double __x, long double __y, long double __z) ; extern long double __fmal (long double __x, long double __y, long double __z) ;
extern int __issignalingl (long double __value)
     ;
extern long double scalbl (long double __x, long double __n) ; extern long double __scalbl (long double __x, long double __n) ;
extern int signgam;
enum
  {
    FP_NAN =
      0,
    FP_INFINITE =
      1,
    FP_ZERO =
      2,
    FP_SUBNORMAL =
      3,
    FP_NORMAL =
      4
  };
typedef enum
{
  _IEEE_ = -1,
  _SVID_,
  _XOPEN_,
  _POSIX_,
  _ISOC_
} _LIB_VERSION_TYPE;
extern _LIB_VERSION_TYPE _LIB_VERSION;
struct exception
  {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
  };
extern int matherr (struct exception *__exc);
enum floatformat_byteorders {
  floatformat_little,
  floatformat_big,
  floatformat_littlebyte_bigword
};
enum floatformat_intbit { floatformat_intbit_yes, floatformat_intbit_no };
struct floatformat
{
  enum floatformat_byteorders byteorder;
  unsigned int totalsize;
  unsigned int sign_start;
  unsigned int exp_start;
  unsigned int exp_len;
  int exp_bias;
  unsigned int exp_nan;
  unsigned int man_start;
  unsigned int man_len;
  enum floatformat_intbit intbit;
  const char *name;
  int (*is_valid) (const struct floatformat *fmt, const char *from);
};
extern const struct floatformat floatformat_ieee_single_big;
extern const struct floatformat floatformat_ieee_single_little;
extern const struct floatformat floatformat_ieee_double_big;
extern const struct floatformat floatformat_ieee_double_little;
extern const struct floatformat floatformat_ieee_double_littlebyte_bigword;
extern const struct floatformat floatformat_i387_ext;
extern const struct floatformat floatformat_m68881_ext;
extern const struct floatformat floatformat_i960_ext;
extern const struct floatformat floatformat_m88110_ext;
extern const struct floatformat floatformat_m88110_harris_ext;
extern const struct floatformat floatformat_arm_ext_big;
extern const struct floatformat floatformat_arm_ext_littlebyte_bigword;
extern const struct floatformat floatformat_ia64_spill_big;
extern const struct floatformat floatformat_ia64_spill_little;
extern const struct floatformat floatformat_ia64_quad_big;
extern const struct floatformat floatformat_ia64_quad_little;
extern void
floatformat_to_double (const struct floatformat *, const char *, double *);
extern void
floatformat_from_double (const struct floatformat *, const double *, char *)
                             ;
extern int
floatformat_is_valid (const struct floatformat *fmt, const char *from);
static unsigned long get_field (const unsigned char *, enum floatformat_byteorders, unsigned int, unsigned int, unsigned int)
                   ;
static int floatformat_always_valid (const struct floatformat *fmt, const char *from)
                            ;
static int
floatformat_always_valid (fmt, from)
     const struct floatformat *fmt ;
     const char *from ;
{
  return 1;
}
const struct floatformat floatformat_ieee_single_big =
{
  floatformat_big, 32, 0, 1, 8, 127, 255, 9, 23,
  floatformat_intbit_no,
  "floatformat_ieee_single_big",
  floatformat_always_valid
};
const struct floatformat floatformat_ieee_single_little =
{
  floatformat_little, 32, 0, 1, 8, 127, 255, 9, 23,
  floatformat_intbit_no,
  "floatformat_ieee_single_little",
  floatformat_always_valid
};
const struct floatformat floatformat_ieee_double_big =
{
  floatformat_big, 64, 0, 1, 11, 1023, 2047, 12, 52,
  floatformat_intbit_no,
  "floatformat_ieee_double_big",
  floatformat_always_valid
};
const struct floatformat floatformat_ieee_double_little =
{
  floatformat_little, 64, 0, 1, 11, 1023, 2047, 12, 52,
  floatformat_intbit_no,
  "floatformat_ieee_double_little",
  floatformat_always_valid
};
const struct floatformat floatformat_ieee_double_littlebyte_bigword =
{
  floatformat_littlebyte_bigword, 64, 0, 1, 11, 1023, 2047, 12, 52,
  floatformat_intbit_no,
  "floatformat_ieee_double_littlebyte_bigword",
  floatformat_always_valid
};
static int floatformat_i387_ext_is_valid (const struct floatformat *fmt, const char *from);
static int
floatformat_i387_ext_is_valid (fmt, from)
     const struct floatformat *fmt;
     const char *from;
{
  unsigned long exponent, int_bit;
  const unsigned char *ufrom = (const unsigned char *) from;
  exponent = get_field (ufrom, fmt->byteorder, fmt->totalsize,
   fmt->exp_start, fmt->exp_len);
  int_bit = get_field (ufrom, fmt->byteorder, fmt->totalsize,
         fmt->man_start, 1);
  if ((exponent == 0) != (int_bit == 0))
    return 0;
  else
    return 1;
}
const struct floatformat floatformat_i387_ext =
{
  floatformat_little, 80, 0, 1, 15, 0x3fff, 0x7fff, 16, 64,
  floatformat_intbit_yes,
  "floatformat_i387_ext",
  floatformat_i387_ext_is_valid
};
const struct floatformat floatformat_m68881_ext =
{
  floatformat_big, 96, 0, 1, 15, 0x3fff, 0x7fff, 32, 64,
  floatformat_intbit_yes,
  "floatformat_m68881_ext",
  floatformat_always_valid
};
const struct floatformat floatformat_i960_ext =
{
  floatformat_little, 96, 16, 17, 15, 0x3fff, 0x7fff, 32, 64,
  floatformat_intbit_yes,
  "floatformat_i960_ext",
  floatformat_always_valid
};
const struct floatformat floatformat_m88110_ext =
{
  floatformat_big, 80, 0, 1, 15, 0x3fff, 0x7fff, 16, 64,
  floatformat_intbit_yes,
  "floatformat_m88110_ext",
  floatformat_always_valid
};
const struct floatformat floatformat_m88110_harris_ext =
{
  floatformat_big,128, 0, 1, 11, 0x3ff, 0x7ff, 12, 52,
  floatformat_intbit_no,
  "floatformat_m88110_ext_harris",
  floatformat_always_valid
};
const struct floatformat floatformat_arm_ext_big =
{
  floatformat_big, 96, 0, 17, 15, 0x3fff, 0x7fff, 32, 64,
  floatformat_intbit_yes,
  "floatformat_arm_ext_big",
  floatformat_always_valid
};
const struct floatformat floatformat_arm_ext_littlebyte_bigword =
{
  floatformat_littlebyte_bigword, 96, 0, 17, 15, 0x3fff, 0x7fff, 32, 64,
  floatformat_intbit_yes,
  "floatformat_arm_ext_littlebyte_bigword",
  floatformat_always_valid
};
const struct floatformat floatformat_ia64_spill_big =
{
  floatformat_big, 128, 0, 1, 17, 65535, 0x1ffff, 18, 64,
  floatformat_intbit_yes,
  "floatformat_ia64_spill_big",
  floatformat_always_valid
};
const struct floatformat floatformat_ia64_spill_little =
{
  floatformat_little, 128, 0, 1, 17, 65535, 0x1ffff, 18, 64,
  floatformat_intbit_yes,
  "floatformat_ia64_spill_little",
  floatformat_always_valid
};
const struct floatformat floatformat_ia64_quad_big =
{
  floatformat_big, 128, 0, 1, 15, 16383, 0x7fff, 16, 112,
  floatformat_intbit_no,
  "floatformat_ia64_quad_big",
  floatformat_always_valid
};
const struct floatformat floatformat_ia64_quad_little =
{
  floatformat_little, 128, 0, 1, 15, 16383, 0x7fff, 16, 112,
  floatformat_intbit_no,
  "floatformat_ia64_quad_little",
  floatformat_always_valid
};
static unsigned long
get_field (data, order, total_len, start, len)
     const unsigned char *data;
     enum floatformat_byteorders order;
     unsigned int total_len;
     unsigned int start;
     unsigned int len;
{
  unsigned long result;
  unsigned int cur_byte;
  int cur_bitshift;
  cur_byte = (start + len) / 8;
  if (order == floatformat_little)
    cur_byte = (total_len / 8) - cur_byte - 1;
  cur_bitshift =
    ((start + len) % 8) - 8;
  result = *(data + cur_byte) >> (-cur_bitshift);
  cur_bitshift += 8;
  if (order == floatformat_little)
    ++cur_byte;
  else
    --cur_byte;
  while ((unsigned int) cur_bitshift < len)
    {
      if (len - cur_bitshift < 8)
 result |=
   (*(data + cur_byte) & ((1 << (len - cur_bitshift)) - 1))
     << cur_bitshift;
      else
 result |= *(data + cur_byte) << cur_bitshift;
      cur_bitshift += 8;
      if (order == floatformat_little)
 ++cur_byte;
      else
 --cur_byte;
    }
  return result;
}
void
floatformat_to_double (fmt, from, to)
     const struct floatformat *fmt;
     const char *from;
     double *to;
{
  const unsigned char *ufrom = (const unsigned char *)from;
  double dto;
  long exponent;
  unsigned long mant;
  unsigned int mant_bits, mant_off;
  int mant_bits_left;
  int special_exponent;
  exponent = get_field (ufrom, fmt->byteorder, fmt->totalsize,
   fmt->exp_start, fmt->exp_len);
  if ((unsigned long) exponent == fmt->exp_nan)
    {
      int nan;
      mant_off = fmt->man_start;
      mant_bits_left = fmt->man_len;
      nan = 0;
      while (mant_bits_left > 0)
 {
   mant_bits = (((mant_bits_left) < (32)) ? (mant_bits_left) : (32));
   if (get_field (ufrom, fmt->byteorder, fmt->totalsize,
    mant_off, mant_bits) != 0)
     {
       nan = 1;
       break;
     }
   mant_off += mant_bits;
   mant_bits_left -= mant_bits;
 }
      if (nan)
 dto = (__qnan_union.__d);
      else
 dto = (__huge_valf.__f);
      if (get_field (ufrom, fmt->byteorder, fmt->totalsize, fmt->sign_start, 1))
 dto = -dto;
      *to = dto;
      return;
    }
  mant_bits_left = fmt->man_len;
  mant_off = fmt->man_start;
  dto = 0.0;
  special_exponent = exponent == 0 || (unsigned long) exponent == fmt->exp_nan;
  if (!special_exponent)
    exponent -= fmt->exp_bias;
  if (!special_exponent)
    {
      if (fmt->intbit == floatformat_intbit_no)
 dto = ldexp (1.0, exponent);
      else
 exponent++;
    }
  while (mant_bits_left > 0)
    {
      mant_bits = (((mant_bits_left) < (32)) ? (mant_bits_left) : (32));
      mant = get_field (ufrom, fmt->byteorder, fmt->totalsize,
    mant_off, mant_bits);
      if (exponent == 0 && mant != 0)
 dto += ldexp ((double)mant,
        (- fmt->exp_bias
         - mant_bits
         - (mant_off - fmt->man_start)
         + 1));
      else
 dto += ldexp ((double)mant, exponent - mant_bits);
      if (exponent != 0)
 exponent -= mant_bits;
      mant_off += mant_bits;
      mant_bits_left -= mant_bits;
    }
  if (get_field (ufrom, fmt->byteorder, fmt->totalsize, fmt->sign_start, 1))
    dto = -dto;
  *to = dto;
}
static void put_field (unsigned char *, enum floatformat_byteorders, unsigned int, unsigned int, unsigned int, unsigned long)
                         ;
static void
put_field (data, order, total_len, start, len, stuff_to_put)
     unsigned char *data;
     enum floatformat_byteorders order;
     unsigned int total_len;
     unsigned int start;
     unsigned int len;
     unsigned long stuff_to_put;
{
  unsigned int cur_byte;
  int cur_bitshift;
  cur_byte = (start + len) / 8;
  if (order == floatformat_little)
    cur_byte = (total_len / 8) - cur_byte - 1;
  cur_bitshift =
    ((start + len) % 8) - 8;
  *(data + cur_byte) &=
    ~(((1 << ((start + len) % 8)) - 1) << (-cur_bitshift));
  *(data + cur_byte) |=
    (stuff_to_put & ((1 << 8) - 1)) << (-cur_bitshift);
  cur_bitshift += 8;
  if (order == floatformat_little)
    ++cur_byte;
  else
    --cur_byte;
  while ((unsigned int) cur_bitshift < len)
    {
      if (len - cur_bitshift < 8)
 {
   *(data + cur_byte) &=
     ~((1 << (len - cur_bitshift)) - 1);
   *(data + cur_byte) |= (stuff_to_put >> cur_bitshift);
 }
      else
 *(data + cur_byte) = ((stuff_to_put >> cur_bitshift)
         & ((1 << 8) - 1));
      cur_bitshift += 8;
      if (order == floatformat_little)
 ++cur_byte;
      else
 --cur_byte;
    }
}
void
floatformat_from_double (fmt, from, to)
     const struct floatformat *fmt;
     const double *from;
     char *to;
{
  double dfrom;
  int exponent;
  double mant;
  unsigned int mant_bits, mant_off;
  int mant_bits_left;
  unsigned char *uto = (unsigned char *)to;
  dfrom = *from;
  memset (uto, 0, fmt->totalsize / 8);
  if (dfrom < 0)
    {
      put_field (uto, fmt->byteorder, fmt->totalsize, fmt->sign_start, 1, 1);
      dfrom = -dfrom;
    }
  if (dfrom == 0)
    {
      return;
    }
  if (dfrom != dfrom)
    {
      put_field (uto, fmt->byteorder, fmt->totalsize, fmt->exp_start,
   fmt->exp_len, fmt->exp_nan);
      put_field (uto, fmt->byteorder, fmt->totalsize, fmt->man_start,
   32, 1);
      return;
    }
  if (dfrom + dfrom == dfrom)
    {
      put_field (uto, fmt->byteorder, fmt->totalsize, fmt->exp_start,
   fmt->exp_len, fmt->exp_nan);
      return;
    }
  mant = frexp (dfrom, &exponent);
  if (exponent + fmt->exp_bias - 1 > 0)
    put_field (uto, fmt->byteorder, fmt->totalsize, fmt->exp_start,
        fmt->exp_len, exponent + fmt->exp_bias - 1);
  else
    {
      put_field (uto, fmt->byteorder, fmt->totalsize, fmt->exp_start,
   fmt->exp_len, 0);
      mant = ldexp (mant, exponent + fmt->exp_bias - 1);
    }
  mant_bits_left = fmt->man_len;
  mant_off = fmt->man_start;
  while (mant_bits_left > 0)
    {
      unsigned long mant_long;
      mant_bits = mant_bits_left < 32 ? mant_bits_left : 32;
      mant *= 4294967296.0;
      mant_long = (unsigned long)mant;
      mant -= mant_long;
      if ((unsigned int) mant_bits_left == fmt->man_len
   && fmt->intbit == floatformat_intbit_no
   && exponent + fmt->exp_bias - 1 > 0)
 {
   mant_long &= 0x7fffffff;
   mant_bits -= 1;
 }
      else if (mant_bits < 32)
 {
   mant_long >>= 32 - mant_bits;
 }
      put_field (uto, fmt->byteorder, fmt->totalsize,
   mant_off, mant_bits, mant_long);
      mant_off += mant_bits;
      mant_bits_left -= mant_bits;
    }
}
int
floatformat_is_valid (fmt, from)
     const struct floatformat *fmt;
     const char *from;
{
  return fmt->is_valid (fmt, from);
}
extern int *__errno_location (void) ;
extern char *program_invocation_name, *program_invocation_short_name;
typedef int error_t;
extern int fnmatch (const char *__pattern, const char *__name, int __flags);
typedef __intptr_t intptr_t;
typedef __socklen_t socklen_t;
extern int access (const char *__name, int __type) ;
extern int euidaccess (const char *__name, int __type)
     ;
extern int eaccess (const char *__name, int __type)
     ;
extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     ;
extern __off_t lseek (int __fd, __off_t __offset, int __whence) ;
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     ;
extern int close (int __fd);
extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;
extern ssize_t write (int __fd, const void *__buf, size_t __n) ;
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;
extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) ;
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) ;
extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset) ;
extern int pipe (int __pipedes[2]) ;
extern int pipe2 (int __pipedes[2], int __flags) ;
extern unsigned int alarm (unsigned int __seconds) ;
extern unsigned int sleep (unsigned int __seconds);
extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     ;
extern int usleep (__useconds_t __useconds);
extern int pause (void);
extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     ;
extern int fchown (int __fd, __uid_t __owner, __gid_t __group) ;
extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     ;
extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     ;
extern int chdir (const char *__path) ;
extern int fchdir (int __fd) ;
extern char *getcwd (char *__buf, size_t __size) ;
extern char *get_current_dir_name (void) ;
extern char *getwd (char *__buf)
     ;
extern int dup (int __fd) ;
extern int dup2 (int __fd, int __fd2) ;
extern int dup3 (int __fd, int __fd2, int __flags) ;
extern char **__environ;
extern char **environ;
extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) ;
extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     ;
extern int execv (const char *__path, char *const __argv[])
     ;
extern int execle (const char *__path, const char *__arg, ...)
     ;
extern int execl (const char *__path, const char *__arg, ...)
     ;
extern int execvp (const char *__file, char *const __argv[])
     ;
extern int execlp (const char *__file, const char *__arg, ...)
     ;
extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     ;
extern int nice (int __inc) ;
extern void _exit (int __status) ;
enum
  {
    _PC_LINK_MAX,
    _PC_MAX_CANON,
    _PC_MAX_INPUT,
    _PC_NAME_MAX,
    _PC_PATH_MAX,
    _PC_PIPE_BUF,
    _PC_CHOWN_RESTRICTED,
    _PC_NO_TRUNC,
    _PC_VDISABLE,
    _PC_SYNC_IO,
    _PC_ASYNC_IO,
    _PC_PRIO_IO,
    _PC_SOCK_MAXBUF,
    _PC_FILESIZEBITS,
    _PC_REC_INCR_XFER_SIZE,
    _PC_REC_MAX_XFER_SIZE,
    _PC_REC_MIN_XFER_SIZE,
    _PC_REC_XFER_ALIGN,
    _PC_ALLOC_SIZE_MIN,
    _PC_SYMLINK_MAX,
    _PC_2_SYMLINKS
  };
enum
  {
    _SC_ARG_MAX,
    _SC_CHILD_MAX,
    _SC_CLK_TCK,
    _SC_NGROUPS_MAX,
    _SC_OPEN_MAX,
    _SC_STREAM_MAX,
    _SC_TZNAME_MAX,
    _SC_JOB_CONTROL,
    _SC_SAVED_IDS,
    _SC_REALTIME_SIGNALS,
    _SC_PRIORITY_SCHEDULING,
    _SC_TIMERS,
    _SC_ASYNCHRONOUS_IO,
    _SC_PRIORITIZED_IO,
    _SC_SYNCHRONIZED_IO,
    _SC_FSYNC,
    _SC_MAPPED_FILES,
    _SC_MEMLOCK,
    _SC_MEMLOCK_RANGE,
    _SC_MEMORY_PROTECTION,
    _SC_MESSAGE_PASSING,
    _SC_SEMAPHORES,
    _SC_SHARED_MEMORY_OBJECTS,
    _SC_AIO_LISTIO_MAX,
    _SC_AIO_MAX,
    _SC_AIO_PRIO_DELTA_MAX,
    _SC_DELAYTIMER_MAX,
    _SC_MQ_OPEN_MAX,
    _SC_MQ_PRIO_MAX,
    _SC_VERSION,
    _SC_PAGESIZE,
    _SC_RTSIG_MAX,
    _SC_SEM_NSEMS_MAX,
    _SC_SEM_VALUE_MAX,
    _SC_SIGQUEUE_MAX,
    _SC_TIMER_MAX,
    _SC_BC_BASE_MAX,
    _SC_BC_DIM_MAX,
    _SC_BC_SCALE_MAX,
    _SC_BC_STRING_MAX,
    _SC_COLL_WEIGHTS_MAX,
    _SC_EQUIV_CLASS_MAX,
    _SC_EXPR_NEST_MAX,
    _SC_LINE_MAX,
    _SC_RE_DUP_MAX,
    _SC_CHARCLASS_NAME_MAX,
    _SC_2_VERSION,
    _SC_2_C_BIND,
    _SC_2_C_DEV,
    _SC_2_FORT_DEV,
    _SC_2_FORT_RUN,
    _SC_2_SW_DEV,
    _SC_2_LOCALEDEF,
    _SC_PII,
    _SC_PII_XTI,
    _SC_PII_SOCKET,
    _SC_PII_INTERNET,
    _SC_PII_OSI,
    _SC_POLL,
    _SC_SELECT,
    _SC_UIO_MAXIOV,
    _SC_IOV_MAX = _SC_UIO_MAXIOV,
    _SC_PII_INTERNET_STREAM,
    _SC_PII_INTERNET_DGRAM,
    _SC_PII_OSI_COTS,
    _SC_PII_OSI_CLTS,
    _SC_PII_OSI_M,
    _SC_T_IOV_MAX,
    _SC_THREADS,
    _SC_THREAD_SAFE_FUNCTIONS,
    _SC_GETGR_R_SIZE_MAX,
    _SC_GETPW_R_SIZE_MAX,
    _SC_LOGIN_NAME_MAX,
    _SC_TTY_NAME_MAX,
    _SC_THREAD_DESTRUCTOR_ITERATIONS,
    _SC_THREAD_KEYS_MAX,
    _SC_THREAD_STACK_MIN,
    _SC_THREAD_THREADS_MAX,
    _SC_THREAD_ATTR_STACKADDR,
    _SC_THREAD_ATTR_STACKSIZE,
    _SC_THREAD_PRIORITY_SCHEDULING,
    _SC_THREAD_PRIO_INHERIT,
    _SC_THREAD_PRIO_PROTECT,
    _SC_THREAD_PROCESS_SHARED,
    _SC_NPROCESSORS_CONF,
    _SC_NPROCESSORS_ONLN,
    _SC_PHYS_PAGES,
    _SC_AVPHYS_PAGES,
    _SC_ATEXIT_MAX,
    _SC_PASS_MAX,
    _SC_XOPEN_VERSION,
    _SC_XOPEN_XCU_VERSION,
    _SC_XOPEN_UNIX,
    _SC_XOPEN_CRYPT,
    _SC_XOPEN_ENH_I18N,
    _SC_XOPEN_SHM,
    _SC_2_CHAR_TERM,
    _SC_2_C_VERSION,
    _SC_2_UPE,
    _SC_XOPEN_XPG2,
    _SC_XOPEN_XPG3,
    _SC_XOPEN_XPG4,
    _SC_CHAR_BIT,
    _SC_CHAR_MAX,
    _SC_CHAR_MIN,
    _SC_INT_MAX,
    _SC_INT_MIN,
    _SC_LONG_BIT,
    _SC_WORD_BIT,
    _SC_MB_LEN_MAX,
    _SC_NZERO,
    _SC_SSIZE_MAX,
    _SC_SCHAR_MAX,
    _SC_SCHAR_MIN,
    _SC_SHRT_MAX,
    _SC_SHRT_MIN,
    _SC_UCHAR_MAX,
    _SC_UINT_MAX,
    _SC_ULONG_MAX,
    _SC_USHRT_MAX,
    _SC_NL_ARGMAX,
    _SC_NL_LANGMAX,
    _SC_NL_MSGMAX,
    _SC_NL_NMAX,
    _SC_NL_SETMAX,
    _SC_NL_TEXTMAX,
    _SC_XBS5_ILP32_OFF32,
    _SC_XBS5_ILP32_OFFBIG,
    _SC_XBS5_LP64_OFF64,
    _SC_XBS5_LPBIG_OFFBIG,
    _SC_XOPEN_LEGACY,
    _SC_XOPEN_REALTIME,
    _SC_XOPEN_REALTIME_THREADS,
    _SC_ADVISORY_INFO,
    _SC_BARRIERS,
    _SC_BASE,
    _SC_C_LANG_SUPPORT,
    _SC_C_LANG_SUPPORT_R,
    _SC_CLOCK_SELECTION,
    _SC_CPUTIME,
    _SC_THREAD_CPUTIME,
    _SC_DEVICE_IO,
    _SC_DEVICE_SPECIFIC,
    _SC_DEVICE_SPECIFIC_R,
    _SC_FD_MGMT,
    _SC_FIFO,
    _SC_PIPE,
    _SC_FILE_ATTRIBUTES,
    _SC_FILE_LOCKING,
    _SC_FILE_SYSTEM,
    _SC_MONOTONIC_CLOCK,
    _SC_MULTI_PROCESS,
    _SC_SINGLE_PROCESS,
    _SC_NETWORKING,
    _SC_READER_WRITER_LOCKS,
    _SC_SPIN_LOCKS,
    _SC_REGEXP,
    _SC_REGEX_VERSION,
    _SC_SHELL,
    _SC_SIGNALS,
    _SC_SPAWN,
    _SC_SPORADIC_SERVER,
    _SC_THREAD_SPORADIC_SERVER,
    _SC_SYSTEM_DATABASE,
    _SC_SYSTEM_DATABASE_R,
    _SC_TIMEOUTS,
    _SC_TYPED_MEMORY_OBJECTS,
    _SC_USER_GROUPS,
    _SC_USER_GROUPS_R,
    _SC_2_PBS,
    _SC_2_PBS_ACCOUNTING,
    _SC_2_PBS_LOCATE,
    _SC_2_PBS_MESSAGE,
    _SC_2_PBS_TRACK,
    _SC_SYMLOOP_MAX,
    _SC_STREAMS,
    _SC_2_PBS_CHECKPOINT,
    _SC_V6_ILP32_OFF32,
    _SC_V6_ILP32_OFFBIG,
    _SC_V6_LP64_OFF64,
    _SC_V6_LPBIG_OFFBIG,
    _SC_HOST_NAME_MAX,
    _SC_TRACE,
    _SC_TRACE_EVENT_FILTER,
    _SC_TRACE_INHERIT,
    _SC_TRACE_LOG,
    _SC_LEVEL1_ICACHE_SIZE,
    _SC_LEVEL1_ICACHE_ASSOC,
    _SC_LEVEL1_ICACHE_LINESIZE,
    _SC_LEVEL1_DCACHE_SIZE,
    _SC_LEVEL1_DCACHE_ASSOC,
    _SC_LEVEL1_DCACHE_LINESIZE,
    _SC_LEVEL2_CACHE_SIZE,
    _SC_LEVEL2_CACHE_ASSOC,
    _SC_LEVEL2_CACHE_LINESIZE,
    _SC_LEVEL3_CACHE_SIZE,
    _SC_LEVEL3_CACHE_ASSOC,
    _SC_LEVEL3_CACHE_LINESIZE,
    _SC_LEVEL4_CACHE_SIZE,
    _SC_LEVEL4_CACHE_ASSOC,
    _SC_LEVEL4_CACHE_LINESIZE,
    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,
    _SC_RAW_SOCKETS,
    _SC_V7_ILP32_OFF32,
    _SC_V7_ILP32_OFFBIG,
    _SC_V7_LP64_OFF64,
    _SC_V7_LPBIG_OFFBIG,
    _SC_SS_REPL_MAX,
    _SC_TRACE_EVENT_NAME_MAX,
    _SC_TRACE_NAME_MAX,
    _SC_TRACE_SYS_MAX,
    _SC_TRACE_USER_EVENT_MAX,
    _SC_XOPEN_STREAMS,
    _SC_THREAD_ROBUST_PRIO_INHERIT,
    _SC_THREAD_ROBUST_PRIO_PROTECT
  };
enum
  {
    _CS_PATH,
    _CS_V6_WIDTH_RESTRICTED_ENVS,
    _CS_GNU_LIBC_VERSION,
    _CS_GNU_LIBPTHREAD_VERSION,
    _CS_V5_WIDTH_RESTRICTED_ENVS,
    _CS_V7_WIDTH_RESTRICTED_ENVS,
    _CS_LFS_CFLAGS = 1000,
    _CS_LFS_LDFLAGS,
    _CS_LFS_LIBS,
    _CS_LFS_LINTFLAGS,
    _CS_LFS64_CFLAGS,
    _CS_LFS64_LDFLAGS,
    _CS_LFS64_LIBS,
    _CS_LFS64_LINTFLAGS,
    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,
    _CS_XBS5_ILP32_OFF32_LDFLAGS,
    _CS_XBS5_ILP32_OFF32_LIBS,
    _CS_XBS5_ILP32_OFF32_LINTFLAGS,
    _CS_XBS5_ILP32_OFFBIG_CFLAGS,
    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,
    _CS_XBS5_ILP32_OFFBIG_LIBS,
    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,
    _CS_XBS5_LP64_OFF64_CFLAGS,
    _CS_XBS5_LP64_OFF64_LDFLAGS,
    _CS_XBS5_LP64_OFF64_LIBS,
    _CS_XBS5_LP64_OFF64_LINTFLAGS,
    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,
    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,
    _CS_XBS5_LPBIG_OFFBIG_LIBS,
    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,
    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,
    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,
    _CS_POSIX_V6_ILP32_OFF32_LIBS,
    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,
    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,
    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,
    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,
    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,
    _CS_POSIX_V6_LP64_OFF64_CFLAGS,
    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,
    _CS_POSIX_V6_LP64_OFF64_LIBS,
    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,
    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,
    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,
    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,
    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,
    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,
    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,
    _CS_POSIX_V7_ILP32_OFF32_LIBS,
    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,
    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,
    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,
    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,
    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,
    _CS_POSIX_V7_LP64_OFF64_CFLAGS,
    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,
    _CS_POSIX_V7_LP64_OFF64_LIBS,
    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,
    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,
    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,
    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,
    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,
    _CS_V6_ENV,
    _CS_V7_ENV
  };
extern long int pathconf (const char *__path, int __name)
     ;
extern long int fpathconf (int __fd, int __name) ;
extern long int sysconf (int __name) ;
extern size_t confstr (int __name, char *__buf, size_t __len) ;
extern __pid_t getpid (void) ;
extern __pid_t getppid (void) ;
extern __pid_t getpgrp (void) ;
extern __pid_t __getpgid (__pid_t __pid) ;
extern __pid_t getpgid (__pid_t __pid) ;
extern int setpgid (__pid_t __pid, __pid_t __pgid) ;
extern int setpgrp (void) ;
extern __pid_t setsid (void) ;
extern __pid_t getsid (__pid_t __pid) ;
extern __uid_t getuid (void) ;
extern __uid_t geteuid (void) ;
extern __gid_t getgid (void) ;
extern __gid_t getegid (void) ;
extern int getgroups (int __size, __gid_t __list[]) ;
extern int group_member (__gid_t __gid) ;
extern int setuid (__uid_t __uid) ;
extern int setreuid (__uid_t __ruid, __uid_t __euid) ;
extern int seteuid (__uid_t __uid) ;
extern int setgid (__gid_t __gid) ;
extern int setregid (__gid_t __rgid, __gid_t __egid) ;
extern int setegid (__gid_t __gid) ;
extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     ;
extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     ;
extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     ;
extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     ;
extern __pid_t fork (void) ;
extern __pid_t vfork (void) ;
extern char *ttyname (int __fd) ;
extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     ;
extern int isatty (int __fd) ;
extern int ttyslot (void) ;
extern int link (const char *__from, const char *__to)
     ;
extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     ;
extern int symlink (const char *__from, const char *__to)
     ;
extern ssize_t readlink (const char * __path,
    char * __buf, size_t __len)
     ;
extern int symlinkat (const char *__from, int __tofd,
        const char *__to) ;
extern ssize_t readlinkat (int __fd, const char * __path,
      char * __buf, size_t __len)
     ;
extern int unlink (const char *__name) ;
extern int unlinkat (int __fd, const char *__name, int __flag)
     ;
extern int rmdir (const char *__path) ;
extern __pid_t tcgetpgrp (int __fd) ;
extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) ;
extern char *getlogin (void);
extern int getlogin_r (char *__name, size_t __name_len) ;
extern int setlogin (const char *__name) ;
extern int gethostname (char *__name, size_t __len) ;
extern int sethostname (const char *__name, size_t __len)
     ;
extern int sethostid (long int __id) ;
extern int getdomainname (char *__name, size_t __len)
     ;
extern int setdomainname (const char *__name, size_t __len)
     ;
extern int vhangup (void) ;
extern int revoke (const char *__file) ;
extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     ;
extern int acct (const char *__name) ;
extern char *getusershell (void) ;
extern void endusershell (void) ;
extern void setusershell (void) ;
extern int daemon (int __nochdir, int __noclose) ;
extern int chroot (const char *__path) ;
extern char *getpass (const char *__prompt) ;
extern int fsync (int __fd);
extern int syncfs (int __fd) ;
extern long int gethostid (void);
extern void sync (void) ;
extern int getpagesize (void) ;
extern int getdtablesize (void) ;
extern int truncate (const char *__file, __off_t __length)
     ;
extern int truncate64 (const char *__file, __off64_t __length)
     ;
extern int ftruncate (int __fd, __off_t __length) ;
extern int ftruncate64 (int __fd, __off64_t __length) ;
extern int brk (void *__addr) ;
extern void *sbrk (intptr_t __delta) ;
extern long int syscall (long int __sysno, ...) ;
extern int lockf (int __fd, int __cmd, __off_t __len) ;
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
extern int fdatasync (int __fildes);
extern char *crypt (const char *__key, const char *__salt)
     ;
extern void encrypt (char *__glibc_block, int __edflag)
     ;
extern void swab (const void * __from, void * __to,
    ssize_t __n) ;
extern int __sigismember (const __sigset_t *, int);
extern int __sigaddset (__sigset_t *, int);
extern int __sigdelset (__sigset_t *, int);
typedef __sig_atomic_t sig_atomic_t;
typedef union sigval
  {
    int sival_int;
    void *sival_ptr;
  } sigval_t;
typedef __clock_t __sigchld_clock_t;
typedef struct
  {
    int si_signo;
    int si_errno;
    int si_code;
    union
      {
 int _pad[((128 / sizeof (int)) - 4)];
 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;
 struct
   {
     int si_tid;
     int si_overrun;
     sigval_t si_sigval;
   } _timer;
 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     sigval_t si_sigval;
   } _rt;
 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __sigchld_clock_t si_utime;
     __sigchld_clock_t si_stime;
   } _sigchld;
 struct
   {
     void *si_addr;
     short int si_addr_lsb;
   } _sigfault;
 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;
 struct
   {
     void *_call_addr;
     int _syscall;
     unsigned int _arch;
   } _sigsys;
      } _sifields;
  } siginfo_t ;
enum
{
  SI_ASYNCNL = -60,
  SI_TKILL = -6,
  SI_SIGIO,
  SI_ASYNCIO,
  SI_MESGQ,
  SI_TIMER,
  SI_QUEUE,
  SI_USER,
  SI_KERNEL = 0x80
};
enum
{
  ILL_ILLOPC = 1,
  ILL_ILLOPN,
  ILL_ILLADR,
  ILL_ILLTRP,
  ILL_PRVOPC,
  ILL_PRVREG,
  ILL_COPROC,
  ILL_BADSTK
};
enum
{
  FPE_INTDIV = 1,
  FPE_INTOVF,
  FPE_FLTDIV,
  FPE_FLTOVF,
  FPE_FLTUND,
  FPE_FLTRES,
  FPE_FLTINV,
  FPE_FLTSUB
};
enum
{
  SEGV_MAPERR = 1,
  SEGV_ACCERR
};
enum
{
  BUS_ADRALN = 1,
  BUS_ADRERR,
  BUS_OBJERR,
  BUS_MCEERR_AR,
  BUS_MCEERR_AO
};
enum
{
  TRAP_BRKPT = 1,
  TRAP_TRACE
};
enum
{
  CLD_EXITED = 1,
  CLD_KILLED,
  CLD_DUMPED,
  CLD_TRAPPED,
  CLD_STOPPED,
  CLD_CONTINUED
};
enum
{
  POLL_IN = 1,
  POLL_OUT,
  POLL_MSG,
  POLL_ERR,
  POLL_PRI,
  POLL_HUP
};
typedef struct sigevent
  {
    sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;
    union
      {
 int _pad[((64 / sizeof (int)) - 4)];
 __pid_t _tid;
 struct
   {
     void (*_function) (sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;
enum
{
  SIGEV_SIGNAL = 0,
  SIGEV_NONE,
  SIGEV_THREAD,
  SIGEV_THREAD_ID = 4
};
typedef void (*__sighandler_t) (int);
extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     ;
extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
     ;
extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     ;
extern __sighandler_t bsd_signal (int __sig, __sighandler_t __handler)
     ;
extern int kill (__pid_t __pid, int __sig) ;
extern int killpg (__pid_t __pgrp, int __sig) ;
extern int raise (int __sig) ;
extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     ;
extern int gsignal (int __sig) ;
extern void psignal (int __sig, const char *__s);
extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
extern int __sigpause (int __sig_or_mask, int __is_sig);
extern int sigblock (int __mask) ;
extern int sigsetmask (int __mask) ;
extern int siggetmask (void) ;
typedef __sighandler_t sighandler_t;
typedef __sighandler_t sig_t;
extern int sigemptyset (sigset_t *__set) ;
extern int sigfillset (sigset_t *__set) ;
extern int sigaddset (sigset_t *__set, int __signo) ;
extern int sigdelset (sigset_t *__set, int __signo) ;
extern int sigismember (const sigset_t *__set, int __signo)
     ;
extern int sigisemptyset (const sigset_t *__set) ;
extern int sigandset (sigset_t *__set, const sigset_t *__left,
        const sigset_t *__right) ;
extern int sigorset (sigset_t *__set, const sigset_t *__left,
       const sigset_t *__right) ;
struct sigaction
  {
    union
      {
 __sighandler_t sa_handler;
 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;
    __sigset_t sa_mask;
    int sa_flags;
    void (*sa_restorer) (void);
  };
extern int sigprocmask (int __how, const sigset_t * __set,
   sigset_t * __oset) ;
extern int sigsuspend (const sigset_t *__set) ;
extern int sigaction (int __sig, const struct sigaction * __act,
        struct sigaction * __oact) ;
extern int sigpending (sigset_t *__set) ;
extern int sigwait (const sigset_t * __set, int * __sig)
     ;
extern int sigwaitinfo (const sigset_t * __set,
   siginfo_t * __info) ;
extern int sigtimedwait (const sigset_t * __set,
    siginfo_t * __info,
    const struct timespec * __timeout)
     ;
extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
     ;
extern const char *const _sys_siglist[65];
extern const char *const sys_siglist[65];
struct sigvec
  {
    __sighandler_t sv_handler;
    int sv_mask;
    int sv_flags;
  };
extern int sigvec (int __sig, const struct sigvec *__vec,
     struct sigvec *__ovec) ;
struct _fpx_sw_bytes
{
  __uint32_t magic1;
  __uint32_t extended_size;
  __uint64_t xstate_bv;
  __uint32_t xstate_size;
  __uint32_t padding[7];
};
struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};
struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short padding[3];
};
struct _xmmreg
{
  __uint32_t element[4];
};
struct _fpstate
{
  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t padding[24];
};
struct sigcontext
{
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rbx;
  __uint64_t rdx;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rsp;
  __uint64_t rip;
  __uint64_t eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  __uint64_t err;
  __uint64_t trapno;
  __uint64_t oldmask;
  __uint64_t cr2;
  union
    {
      struct _fpstate * fpstate;
      __uint64_t __fpstate_word;
    }u;
  __uint64_t __reserved1 [8];
};
struct _xsave_hdr
{
  __uint64_t xstate_bv;
  __uint64_t reserved1[2];
  __uint64_t reserved2[5];
};
struct _ymmh_state
{
  __uint32_t ymmh_space[64];
};
struct _xstate
{
  struct _fpstate fpstate;
  struct _xsave_hdr xstate_hdr;
  struct _ymmh_state ymmh;
};
extern int sigreturn (struct sigcontext *__scp) ;
extern int siginterrupt (int __sig, int __interrupt) ;
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };
enum
{
  SS_ONSTACK = 1,
  SS_DISABLE
};
typedef struct sigaltstack
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
 typedef long long int greg_t;
typedef greg_t gregset_t[23];
enum
{
  REG_R8 = 0,
  REG_R9,
  REG_R10,
  REG_R11,
  REG_R12,
  REG_R13,
  REG_R14,
  REG_R15,
  REG_RDI,
  REG_RSI,
  REG_RBP,
  REG_RBX,
  REG_RDX,
  REG_RAX,
  REG_RCX,
  REG_RSP,
  REG_RIP,
  REG_EFL,
  REG_CSGSFS,
  REG_ERR,
  REG_TRAPNO,
  REG_OLDMASK,
  REG_CR2
};
struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int padding[3];
};
struct _libc_xmmreg
{
  __uint32_t element[4];
};
struct _libc_fpstate
{
  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t padding[24];
};
typedef struct _libc_fpstate *fpregset_t;
typedef struct
  {
    gregset_t gregs;
    fpregset_t fpregs;
    unsigned long long __reserved1 [8];
} mcontext_t;
typedef struct ucontext
  {
    unsigned long int uc_flags;
    struct ucontext *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    __sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
  } ucontext_t;
extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     ;
extern int sigaltstack (const struct sigaltstack * __ss,
   struct sigaltstack * __oss) ;
extern int sighold (int __sig) ;
extern int sigrelse (int __sig) ;
extern int sigignore (int __sig) ;
extern __sighandler_t sigset (int __sig, __sighandler_t __disp) ;
extern int pthread_sigmask (int __how,
       const __sigset_t * __newmask,
       __sigset_t * __oldmask);
extern int pthread_kill (pthread_t __threadid, int __signo) ;
extern int pthread_sigqueue (pthread_t __threadid, int __signo,
        const union sigval __value) ;
extern int __libc_current_sigrtmin (void) ;
extern int __libc_current_sigrtmax (void) ;
extern char *getpwd ();
extern char *getwd ();
char *
getpwd ()
{
  static char *pwd;
  static int failure_errno;
  char *p = pwd;
  size_t s;
  struct stat dotstat, pwdstat;
  if (!p && !((*__errno_location ()) = failure_errno))
    {
      if (! ((p = getenv ("PWD")) != 0
      && *p == '/'
      && stat (p, &pwdstat) == 0
      && stat (".", &dotstat) == 0
      && dotstat.st_ino == pwdstat.st_ino
      && dotstat.st_dev == pwdstat.st_dev))
 for (s = (4096 + 1); ! getcwd (p = xmalloc (s), s); s *= 2)
   {
     int e = (*__errno_location ());
     free (p);
     if (e != 34)
       {
  (*__errno_location ()) = failure_errno = e;
  p = 0;
  break;
       }
   }
      pwd = p;
    }
  return p;
}
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };
typedef struct timezone * __timezone_ptr_t;
extern int gettimeofday (struct timeval * __tv,
    __timezone_ptr_t __tz) ;
extern int settimeofday (const struct timeval *__tv,
    const struct timezone *__tz)
     ;
extern int adjtime (const struct timeval *__delta,
      struct timeval *__olddelta) ;
enum __itimer_which
  {
    ITIMER_REAL = 0,
    ITIMER_VIRTUAL = 1,
    ITIMER_PROF = 2
  };
struct itimerval
  {
    struct timeval it_interval;
    struct timeval it_value;
  };
typedef enum __itimer_which __itimer_which_t;
extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) ;
extern int setitimer (__itimer_which_t __which,
        const struct itimerval * __new,
        struct itimerval * __old) ;
extern int utimes (const char *__file, const struct timeval __tvp[2])
     ;
extern int lutimes (const char *__file, const struct timeval __tvp[2])
     ;
extern int futimes (int __fd, const struct timeval __tvp[2]) ;
extern int futimesat (int __fd, const char *__file,
        const struct timeval __tvp[2]) ;
struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;
  int tai;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) ;
struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
  long int tm_gmtoff;
  const char *tm_zone;
};
struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
struct sigevent;
extern clock_t clock (void) ;
extern time_t time (time_t *__timer) ;
extern double difftime (time_t __time1, time_t __time0)
     ;
extern time_t mktime (struct tm *__tp) ;
extern size_t strftime (char * __s, size_t __maxsize,
   const char * __format,
   const struct tm * __tp) ;
extern char *strptime (const char * __s,
         const char * __fmt, struct tm *__tp)
     ;
extern size_t strftime_l (char * __s, size_t __maxsize,
     const char * __format,
     const struct tm * __tp,
     __locale_t __loc) ;
extern char *strptime_l (const char * __s,
    const char * __fmt, struct tm *__tp,
    __locale_t __loc) ;
extern struct tm *gmtime (const time_t *__timer) ;
extern struct tm *localtime (const time_t *__timer) ;
extern struct tm *gmtime_r (const time_t * __timer,
       struct tm * __tp) ;
extern struct tm *localtime_r (const time_t * __timer,
          struct tm * __tp) ;
extern char *asctime (const struct tm *__tp) ;
extern char *ctime (const time_t *__timer) ;
extern char *asctime_r (const struct tm * __tp,
   char * __buf) ;
extern char *ctime_r (const time_t * __timer,
        char * __buf) ;
extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;
extern char *tzname[2];
extern void tzset (void) ;
extern int daylight;
extern long int timezone;
extern int stime (const time_t *__when) ;
extern time_t timegm (struct tm *__tp) ;
extern time_t timelocal (struct tm *__tp) ;
extern int dysize (int __year) ;
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);
extern int clock_getres (clockid_t __clock_id, struct timespec *__res) ;
extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) ;
extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     ;
extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);
extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) ;
extern int timer_create (clockid_t __clock_id,
    struct sigevent * __evp,
    timer_t * __timerid) ;
extern int timer_delete (timer_t __timerid) ;
extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec * __value,
     struct itimerspec * __ovalue) ;
extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     ;
extern int timer_getoverrun (timer_t __timerid) ;
extern int timespec_get (struct timespec *__ts, int __base)
     ;
extern int getdate_err;
extern struct tm *getdate (const char *__string);
extern int getdate_r (const char * __string,
        struct tm * __resbufp);
enum __rlimit_resource
{
  RLIMIT_CPU = 0,
  RLIMIT_FSIZE = 1,
  RLIMIT_DATA = 2,
  RLIMIT_STACK = 3,
  RLIMIT_CORE = 4,
  __RLIMIT_RSS = 5,
  RLIMIT_NOFILE = 7,
  __RLIMIT_OFILE = RLIMIT_NOFILE,
  RLIMIT_AS = 9,
  __RLIMIT_NPROC = 6,
  __RLIMIT_MEMLOCK = 8,
  __RLIMIT_LOCKS = 10,
  __RLIMIT_SIGPENDING = 11,
  __RLIMIT_MSGQUEUE = 12,
  __RLIMIT_NICE = 13,
  __RLIMIT_RTPRIO = 14,
  __RLIMIT_RTTIME = 15,
  __RLIMIT_NLIMITS = 16,
  __RLIM_NLIMITS = __RLIMIT_NLIMITS
};
typedef __rlim_t rlim_t;
typedef __rlim64_t rlim64_t;
struct rlimit
  {
    rlim_t rlim_cur;
    rlim_t rlim_max;
  };
struct rlimit64
  {
    rlim64_t rlim_cur;
    rlim64_t rlim_max;
 };
enum __rusage_who
{
  RUSAGE_SELF = 0,
  RUSAGE_CHILDREN = -1
  ,
  RUSAGE_THREAD = 1
};
struct rusage
  {
    struct timeval ru_utime;
    struct timeval ru_stime;
    union
      {
 long int ru_maxrss;
 __syscall_slong_t __ru_maxrss_word;
      }u;
    union
      {
 long int ru_ixrss;
 __syscall_slong_t __ru_ixrss_word;
      }u;
    union
      {
 long int ru_idrss;
 __syscall_slong_t __ru_idrss_word;
      }u;
    union
      {
 long int ru_isrss;
  __syscall_slong_t __ru_isrss_word;
      }u;
    union
      {
 long int ru_minflt;
 __syscall_slong_t __ru_minflt_word;
      }u;
    union
      {
 long int ru_majflt;
 __syscall_slong_t __ru_majflt_word;
      }u;
    union
      {
 long int ru_nswap;
 __syscall_slong_t __ru_nswap_word;
      }u;
    union
      {
 long int ru_inblock;
 __syscall_slong_t __ru_inblock_word;
      }u;
    union
      {
 long int ru_oublock;
 __syscall_slong_t __ru_oublock_word;
      }u;
    union
      {
 long int ru_msgsnd;
 __syscall_slong_t __ru_msgsnd_word;
      }u;
    union
      {
 long int ru_msgrcv;
 __syscall_slong_t __ru_msgrcv_word;
      }u;
    union
      {
 long int ru_nsignals;
 __syscall_slong_t __ru_nsignals_word;
      }u;
    union
      {
 long int ru_nvcsw;
 __syscall_slong_t __ru_nvcsw_word;
      }u;
    union
      {
 long int ru_nivcsw;
 __syscall_slong_t __ru_nivcsw_word;
      }u;
  };
enum __priority_which
{
  PRIO_PROCESS = 0,
  PRIO_PGRP = 1,
  PRIO_USER = 2
};
extern int prlimit (__pid_t __pid, enum __rlimit_resource __resource,
      const struct rlimit *__new_limit,
      struct rlimit *__old_limit) ;
extern int prlimit64 (__pid_t __pid, enum __rlimit_resource __resource,
        const struct rlimit64 *__new_limit,
        struct rlimit64 *__old_limit) ;
typedef enum __rlimit_resource __rlimit_resource_t;
typedef enum __rusage_who __rusage_who_t;
typedef enum __priority_which __priority_which_t;
extern int getrlimit (__rlimit_resource_t __resource,
        struct rlimit *__rlimits) ;
extern int getrlimit64 (__rlimit_resource_t __resource,
   struct rlimit64 *__rlimits) ;
extern int setrlimit (__rlimit_resource_t __resource,
        const struct rlimit *__rlimits) ;
extern int setrlimit64 (__rlimit_resource_t __resource,
   const struct rlimit64 *__rlimits) ;
extern int getrusage (__rusage_who_t __who, struct rusage *__usage) ;
extern int getpriority (__priority_which_t __which, id_t __who) ;
extern int setpriority (__priority_which_t __which, id_t __who, int __prio)
     ;
struct tms
  {
    clock_t tms_utime;
    clock_t tms_stime;
    clock_t tms_cutime;
    clock_t tms_cstime;
  };
extern clock_t times (struct tms *__buffer) ;
long
get_run_time ()
{
  struct rusage rusage;
  getrusage (0, &rusage);
  return (rusage.ru_utime.tv_sec * 1000000 + rusage.ru_utime.tv_usec
   + rusage.ru_stime.tv_sec * 1000000 + rusage.ru_stime.tv_usec);
}
extern void *malloc (size_t __size) ;
extern void *calloc (size_t __nmemb, size_t __size)
 ;
extern void *realloc (void *__ptr, size_t __size)
 ;
extern void free (void *__ptr) ;
extern void cfree (void *__ptr) ;
extern void *memalign (size_t __alignment, size_t __size)
 ;
extern void *valloc (size_t __size) ;
extern void *pvalloc (size_t __size) ;
extern void *(*__morecore) (ptrdiff_t __size);
extern void *__default_morecore (ptrdiff_t __size)
 ;
struct mallinfo
{
  int arena;
  int ordblks;
  int smblks;
  int hblks;
  int hblkhd;
  int usmblks;
  int fsmblks;
  int uordblks;
  int fordblks;
  int keepcost;
};
extern struct mallinfo mallinfo (void) ;
extern int mallopt (int __param, int __val) ;
extern int malloc_trim (size_t __pad) ;
extern size_t malloc_usable_size (void *__ptr) ;
extern void malloc_stats (void) ;
extern int malloc_info (int __options, FILE *__fp) ;
extern void *malloc_get_state (void) ;
extern int malloc_set_state (void *__ptr) ;
extern void (*volatile __malloc_initialize_hook) (void)
;
extern void (*volatile __free_hook) (void *__ptr,
                                                   const void *)
;
extern void *(*volatile __malloc_hook)(size_t __size,
                                                     const void *)
;
extern void *(*volatile __realloc_hook)(void *__ptr,
                                                      size_t __size,
                                                      const void *)
;
extern void *(*volatile __memalign_hook)(size_t __alignment,
                                                       size_t __size,
                                                       const void *)
;
extern void (*volatile __after_morecore_hook) (void);
extern void __malloc_check_init (void) ;
typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long int uint64_t;
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;
typedef long int int_least64_t;
typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;
typedef unsigned long int uint_least64_t;
typedef signed char int_fast8_t;
typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
typedef unsigned char uint_fast8_t;
typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
typedef unsigned long int uintptr_t;
typedef long int intmax_t;
typedef unsigned long int uintmax_t;
typedef unsigned int hashval_t;
typedef hashval_t (*htab_hash) (const void *);
typedef int (*htab_eq) (const void *, const void *);
typedef void (*htab_del) (void *);
typedef int (*htab_trav) (void **, void *);
typedef void * (*htab_alloc) (size_t, size_t);
typedef void (*htab_free) (void *);
typedef void * (*htab_alloc_with_arg) (void *, size_t, size_t);
typedef void (*htab_free_with_arg) (void *, void *);
struct htab
{
  htab_hash hash_f;
  htab_eq eq_f;
  htab_del del_f;
  void * * entries;
  size_t size;
  size_t n_elements;
  size_t n_deleted;
  unsigned int searches;
  unsigned int collisions;
  htab_alloc alloc_f;
  htab_free free_f;
  void * alloc_arg;
  htab_alloc_with_arg alloc_with_arg_f;
  htab_free_with_arg free_with_arg_f;
  unsigned int size_prime_index;
};
typedef struct htab *htab_t;
enum insert_option {NO_INSERT, INSERT};
extern htab_t htab_create_alloc (size_t, htab_hash, htab_eq, htab_del, htab_alloc, htab_free)
                              ;
extern htab_t htab_create_alloc_ex (size_t, htab_hash, htab_eq, htab_del, void *, htab_alloc_with_arg, htab_free_with_arg)
                              ;
extern htab_t htab_create (size_t, htab_hash, htab_eq, htab_del);
extern htab_t htab_try_create (size_t, htab_hash, htab_eq, htab_del);
extern void htab_set_functions_ex (htab_t, htab_hash, htab_eq, htab_del, void *, htab_alloc_with_arg, htab_free_with_arg)
                           ;
extern void htab_delete (htab_t);
extern void htab_empty (htab_t);
extern void * htab_find (htab_t, const void *);
extern void * *htab_find_slot (htab_t, const void *, enum insert_option)
                          ;
extern void * htab_find_with_hash (htab_t, const void *, hashval_t)
                    ;
extern void * *htab_find_slot_with_hash (htab_t, const void *, hashval_t, enum insert_option)
                             ;
extern void htab_clear_slot (htab_t, void **);
extern void htab_remove_elt (htab_t, void *);
extern void htab_remove_elt_with_hash (htab_t, void *, hashval_t);
extern void htab_traverse (htab_t, htab_trav, void *);
extern void htab_traverse_noresize (htab_t, htab_trav, void *);
extern size_t htab_size (htab_t);
extern size_t htab_elements (htab_t);
extern double htab_collisions (htab_t);
extern htab_hash htab_hash_pointer;
extern htab_eq htab_eq_pointer;
extern hashval_t htab_hash_string (const void *);
extern hashval_t iterative_hash (const void *, size_t, hashval_t);
static unsigned int higher_prime_index (unsigned long);
static hashval_t htab_mod_1 (hashval_t, hashval_t, hashval_t, int);
static hashval_t htab_mod (hashval_t, htab_t);
static hashval_t htab_mod_m2 (hashval_t, htab_t);
static hashval_t hash_pointer (const void *);
static int eq_pointer (const void *, const void *);
static int htab_expand (htab_t);
static void * *find_empty_slot_for_expand (htab_t, hashval_t);
htab_hash htab_hash_pointer = hash_pointer;
htab_eq htab_eq_pointer = eq_pointer;
struct prime_ent
{
  hashval_t prime;
  hashval_t inv;
  hashval_t inv_m2;
  hashval_t shift;
};
static struct prime_ent const prime_tab[] = {
  { 7, 0x24924925, 0x9999999b, 2 },
  { 13, 0x3b13b13c, 0x745d1747, 3 },
  { 31, 0x08421085, 0x1a7b9612, 4 },
  { 61, 0x0c9714fc, 0x15b1e5f8, 5 },
  { 127, 0x02040811, 0x0624dd30, 6 },
  { 251, 0x05197f7e, 0x073260a5, 7 },
  { 509, 0x01824366, 0x02864fc8, 8 },
  { 1021, 0x00c0906d, 0x014191f7, 9 },
  { 2039, 0x0121456f, 0x0161e69e, 10 },
  { 4093, 0x00300902, 0x00501908, 11 },
  { 8191, 0x00080041, 0x00180241, 12 },
  { 16381, 0x000c0091, 0x00140191, 13 },
  { 32749, 0x002605a5, 0x002a06e6, 14 },
  { 65521, 0x000f00e2, 0x00110122, 15 },
  { 131071, 0x00008001, 0x00018003, 16 },
  { 262139, 0x00014002, 0x0001c004, 17 },
  { 524287, 0x00002001, 0x00006001, 18 },
  { 1048573, 0x00003001, 0x00005001, 19 },
  { 2097143, 0x00004801, 0x00005801, 20 },
  { 4194301, 0x00000c01, 0x00001401, 21 },
  { 8388593, 0x00001e01, 0x00002201, 22 },
  { 16777213, 0x00000301, 0x00000501, 23 },
  { 33554393, 0x00001381, 0x00001481, 24 },
  { 67108859, 0x00000141, 0x000001c1, 25 },
  { 134217689, 0x000004e1, 0x00000521, 26 },
  { 268435399, 0x00000391, 0x000003b1, 27 },
  { 536870909, 0x00000019, 0x00000029, 28 },
  { 1073741789, 0x0000008d, 0x00000095, 29 },
  { 2147483647, 0x00000003, 0x00000007, 30 },
  { 0xfffffffb, 0x00000006, 0x00000008, 31 }
};
static unsigned int
higher_prime_index (n)
     unsigned long n;
{
  unsigned int low = 0;
  unsigned int high = sizeof(prime_tab) / sizeof(prime_tab[0]);
  while (low != high)
    {
      unsigned int mid = low + (high - low) / 2;
      if (n > prime_tab[mid].prime)
 low = mid + 1;
      else
 high = mid;
    }
  if (n > prime_tab[low].prime)
    {
      fprintf (stderr, "Cannot find prime bigger than %lu\n", n);
      abort ();
    }
  return low;
}
static hashval_t
hash_pointer (p)
     const void * p;
{
  return (hashval_t) ((long)p >> 3);
}
static int
eq_pointer (p1, p2)
     const void * p1;
     const void * p2;
{
  return p1 == p2;
}
 size_t
htab_size (htab)
     htab_t htab;
{
  return htab->size;
}
 size_t
htab_elements (htab)
     htab_t htab;
{
  return htab->n_elements - htab->n_deleted;
}
static hashval_t
htab_mod_1 (x, y, inv, shift)
     hashval_t x, y, inv;
     int shift;
{
  if (sizeof (hashval_t) * 8 <= 32)
    {
      hashval_t t1, t2, t3, t4, q, r;
      t1 = ((uint64_t)x * inv) >> 32;
      t2 = x - t1;
      t3 = t2 >> 1;
      t4 = t1 + t3;
      q = t4 >> shift;
      r = x - (q * y);
      return r;
    }
  return x % y;
}
static hashval_t
htab_mod (hash, htab)
     hashval_t hash;
     htab_t htab;
{
  const struct prime_ent *p = &prime_tab[htab->size_prime_index];
  return htab_mod_1 (hash, p->prime, p->inv, p->shift);
}
static hashval_t
htab_mod_m2 (hash, htab)
     hashval_t hash;
     htab_t htab;
{
  const struct prime_ent *p = &prime_tab[htab->size_prime_index];
  return 1 + htab_mod_1 (hash, p->prime - 2, p->inv_m2, p->shift);
}
htab_t
htab_create_alloc (size, hash_f, eq_f, del_f, alloc_f, free_f)
     size_t size;
     htab_hash hash_f;
     htab_eq eq_f;
     htab_del del_f;
     htab_alloc alloc_f;
     htab_free free_f;
{
  htab_t result;
  unsigned int size_prime_index;
  size_prime_index = higher_prime_index (size);
  size = prime_tab[size_prime_index].prime;
  result = (htab_t) (*alloc_f) (1, sizeof (struct htab));
  if (result == ((void *)0))
    return ((void *)0);
  result->entries = (void * *) (*alloc_f) (size, sizeof (void *));
  if (result->entries == ((void *)0))
    {
      if (free_f != ((void *)0))
 (*free_f) (result);
      return ((void *)0);
    }
  result->size = size;
  result->size_prime_index = size_prime_index;
  result->hash_f = hash_f;
  result->eq_f = eq_f;
  result->del_f = del_f;
  result->alloc_f = alloc_f;
  result->free_f = free_f;
  return result;
}
htab_t
htab_create_alloc_ex (size, hash_f, eq_f, del_f, alloc_arg, alloc_f,
        free_f)
     size_t size;
     htab_hash hash_f;
     htab_eq eq_f;
     htab_del del_f;
     void * alloc_arg;
     htab_alloc_with_arg alloc_f;
     htab_free_with_arg free_f;
{
  htab_t result;
  unsigned int size_prime_index;
  size_prime_index = higher_prime_index (size);
  size = prime_tab[size_prime_index].prime;
  result = (htab_t) (*alloc_f) (alloc_arg, 1, sizeof (struct htab));
  if (result == ((void *)0))
    return ((void *)0);
  result->entries = (void * *) (*alloc_f) (alloc_arg, size, sizeof (void *));
  if (result->entries == ((void *)0))
    {
      if (free_f != ((void *)0))
 (*free_f) (alloc_arg, result);
      return ((void *)0);
    }
  result->size = size;
  result->size_prime_index = size_prime_index;
  result->hash_f = hash_f;
  result->eq_f = eq_f;
  result->del_f = del_f;
  result->alloc_arg = alloc_arg;
  result->alloc_with_arg_f = alloc_f;
  result->free_with_arg_f = free_f;
  return result;
}
void
htab_set_functions_ex (htab, hash_f, eq_f, del_f, alloc_arg, alloc_f, free_f)
     htab_t htab;
     htab_hash hash_f;
     htab_eq eq_f;
     htab_del del_f;
     void * alloc_arg;
     htab_alloc_with_arg alloc_f;
     htab_free_with_arg free_f;
{
  htab->hash_f = hash_f;
  htab->eq_f = eq_f;
  htab->del_f = del_f;
  htab->alloc_arg = alloc_arg;
  htab->alloc_with_arg_f = alloc_f;
  htab->free_with_arg_f = free_f;
}
htab_t
htab_create (size, hash_f, eq_f, del_f)
     size_t size;
     htab_hash hash_f;
     htab_eq eq_f;
     htab_del del_f;
{
  return htab_create_alloc (size, hash_f, eq_f, del_f, xcalloc, free);
}
htab_t
htab_try_create (size, hash_f, eq_f, del_f)
     size_t size;
     htab_hash hash_f;
     htab_eq eq_f;
     htab_del del_f;
{
  return htab_create_alloc (size, hash_f, eq_f, del_f, calloc, free);
}
void
htab_delete (htab)
     htab_t htab;
{
  size_t size = htab_size (htab);
  void * *entries = htab->entries;
  int i;
  if (htab->del_f)
    for (i = size - 1; i >= 0; i--)
      if (entries[i] != ((void *) 0) && entries[i] != ((void *) 1))
 (*htab->del_f) (entries[i]);
  if (htab->free_f != ((void *)0))
    {
      (*htab->free_f) (entries);
      (*htab->free_f) (htab);
    }
  else if (htab->free_with_arg_f != ((void *)0))
    {
      (*htab->free_with_arg_f) (htab->alloc_arg, entries);
      (*htab->free_with_arg_f) (htab->alloc_arg, htab);
    }
}
void
htab_empty (htab)
     htab_t htab;
{
  size_t size = htab_size (htab);
  void * *entries = htab->entries;
  int i;
  if (htab->del_f)
    for (i = size - 1; i >= 0; i--)
      if (entries[i] != ((void *) 0) && entries[i] != ((void *) 1))
 (*htab->del_f) (entries[i]);
  memset (entries, 0, size * sizeof (void *));
}
static void * *
find_empty_slot_for_expand (htab, hash)
     htab_t htab;
     hashval_t hash;
{
  hashval_t index = htab_mod (hash, htab);
  size_t size = htab_size (htab);
  void * *slot = htab->entries + index;
  hashval_t hash2;
  if (*slot == ((void *) 0))
    return slot;
  else if (*slot == ((void *) 1))
    abort ();
  hash2 = htab_mod_m2 (hash, htab);
  for (;;)
    {
      index += hash2;
      if (index >= size)
 index -= size;
      slot = htab->entries + index;
      if (*slot == ((void *) 0))
 return slot;
      else if (*slot == ((void *) 1))
 abort ();
    }
}
static int
htab_expand (htab)
     htab_t htab;
{
  void * *oentries;
  void * *olimit;
  void * *p;
  void * *nentries;
  size_t nsize, osize, elts;
  unsigned int oindex, nindex;
  oentries = htab->entries;
  oindex = htab->size_prime_index;
  osize = htab->size;
  olimit = oentries + osize;
  elts = htab_elements (htab);
  if (elts * 2 > osize || (elts * 8 < osize && osize > 32))
    {
      nindex = higher_prime_index (elts * 2);
      nsize = prime_tab[nindex].prime;
    }
  else
    {
      nindex = oindex;
      nsize = osize;
    }
  if (htab->alloc_with_arg_f != ((void *)0))
    nentries = (void * *) (*htab->alloc_with_arg_f) (htab->alloc_arg, nsize,
        sizeof (void * *));
  else
    nentries = (void * *) (*htab->alloc_f) (nsize, sizeof (void * *));
  if (nentries == ((void *)0))
    return 0;
  htab->entries = nentries;
  htab->size = nsize;
  htab->size_prime_index = nindex;
  htab->n_elements -= htab->n_deleted;
  htab->n_deleted = 0;
  p = oentries;
  do
    {
      void * x = *p;
      if (x != ((void *) 0) && x != ((void *) 1))
 {
   void * *q = find_empty_slot_for_expand (htab, (*htab->hash_f) (x));
   *q = x;
 }
      p++;
    }
  while (p < olimit);
  if (htab->free_f != ((void *)0))
    (*htab->free_f) (oentries);
  else if (htab->free_with_arg_f != ((void *)0))
    (*htab->free_with_arg_f) (htab->alloc_arg, oentries);
  return 1;
}
void *
htab_find_with_hash (htab, element, hash)
     htab_t htab;
     const void * element;
     hashval_t hash;
{
  hashval_t index, hash2;
  size_t size;
  void * entry;
  htab->searches++;
  size = htab_size (htab);
  index = htab_mod (hash, htab);
  entry = htab->entries[index];
  if (entry == ((void *) 0)
      || (entry != ((void *) 1) && (*htab->eq_f) (entry, element)))
    return entry;
  hash2 = htab_mod_m2 (hash, htab);
  for (;;)
    {
      htab->collisions++;
      index += hash2;
      if (index >= size)
 index -= size;
      entry = htab->entries[index];
      if (entry == ((void *) 0)
   || (entry != ((void *) 1) && (*htab->eq_f) (entry, element)))
 return entry;
    }
}
void *
htab_find (htab, element)
     htab_t htab;
     const void * element;
{
  return htab_find_with_hash (htab, element, (*htab->hash_f) (element));
}
void * *
htab_find_slot_with_hash (htab, element, hash, insert)
     htab_t htab;
     const void * element;
     hashval_t hash;
     enum insert_option insert;
{
  void * *first_deleted_slot;
  hashval_t index, hash2;
  size_t size;
  void * entry;
  size = htab_size (htab);
  if (insert == INSERT && size * 3 <= htab->n_elements * 4)
    {
      if (htab_expand (htab) == 0)
 return ((void *)0);
      size = htab_size (htab);
    }
  index = htab_mod (hash, htab);
  htab->searches++;
  first_deleted_slot = ((void *)0);
  entry = htab->entries[index];
  if (entry == ((void *) 0))
    goto empty_entry;
  else if (entry == ((void *) 1))
    first_deleted_slot = &htab->entries[index];
  else if ((*htab->eq_f) (entry, element))
    return &htab->entries[index];
  hash2 = htab_mod_m2 (hash, htab);
  for (;;)
    {
      htab->collisions++;
      index += hash2;
      if (index >= size)
 index -= size;
      entry = htab->entries[index];
      if (entry == ((void *) 0))
 goto empty_entry;
      else if (entry == ((void *) 1))
 {
   if (!first_deleted_slot)
     first_deleted_slot = &htab->entries[index];
 }
      else if ((*htab->eq_f) (entry, element))
 return &htab->entries[index];
    }
 empty_entry:
  if (insert == NO_INSERT)
    return ((void *)0);
  if (first_deleted_slot)
    {
      htab->n_deleted--;
      *first_deleted_slot = ((void *) 0);
      return first_deleted_slot;
    }
  htab->n_elements++;
  return &htab->entries[index];
}
void * *
htab_find_slot (htab, element, insert)
     htab_t htab;
     const void * element;
     enum insert_option insert;
{
  return htab_find_slot_with_hash (htab, element, (*htab->hash_f) (element),
       insert);
}
void
htab_remove_elt (htab, element)
     htab_t htab;
     void * element;
{
  htab_remove_elt_with_hash (htab, element, (*htab->hash_f) (element));
}
void
htab_remove_elt_with_hash (htab, element, hash)
     htab_t htab;
     void * element;
     hashval_t hash;
{
  void * *slot;
  slot = htab_find_slot_with_hash (htab, element, hash, NO_INSERT);
  if (*slot == ((void *) 0))
    return;
  if (htab->del_f)
    (*htab->del_f) (*slot);
  *slot = ((void *) 1);
  htab->n_deleted++;
}
void
htab_clear_slot (htab, slot)
     htab_t htab;
     void * *slot;
{
  if (slot < htab->entries || slot >= htab->entries + htab_size (htab)
      || *slot == ((void *) 0) || *slot == ((void *) 1))
    abort ();
  if (htab->del_f)
    (*htab->del_f) (*slot);
  *slot = ((void *) 1);
  htab->n_deleted++;
}
void
htab_traverse_noresize (htab, callback, info)
     htab_t htab;
     htab_trav callback;
     void * info;
{
  void * *slot;
  void * *limit;
  slot = htab->entries;
  limit = slot + htab_size (htab);
  do
    {
      void * x = *slot;
      if (x != ((void *) 0) && x != ((void *) 1))
 if (!(*callback) (slot, info))
   break;
    }
  while (++slot < limit);
}
void
htab_traverse (htab, callback, info)
     htab_t htab;
     htab_trav callback;
     void * info;
{
  if (htab_elements (htab) * 8 < htab_size (htab))
    htab_expand (htab);
  htab_traverse_noresize (htab, callback, info);
}
double
htab_collisions (htab)
     htab_t htab;
{
  if (htab->searches == 0)
    return 0.0;
  return (double) htab->collisions / (double) htab->searches;
}
hashval_t
htab_hash_string (p)
     const void * p;
{
  const unsigned char *str = (const unsigned char *) p;
  hashval_t r = 0;
  unsigned char c;
  while ((c = *str++) != 0)
    r = r * 67 + c - 113;
  return r;
}
hashval_t iterative_hash (k_in, length, initval)
     const void * k_in;
     register size_t length;
     register hashval_t initval;
{
  register const unsigned char *k = (const unsigned char *)k_in;
  register hashval_t a,b,c,len;
  len = length;
  a = b = 0x9e3779b9;
  c = initval;
  if (sizeof (hashval_t) == 4 && (((size_t)k)&3) == 0)
    while (len >= 12)
      {
 a += *(hashval_t *)(k+0);
 b += *(hashval_t *)(k+4);
 c += *(hashval_t *)(k+8);
 { a -= b; a -= c; a ^= (c>>13); b -= c; b -= a; b ^= (a<< 8); c -= a; c -= b; c ^= ((b&0xffffffff)>>13); a -= b; a -= c; a ^= ((c&0xffffffff)>>12); b -= c; b -= a; b = (b ^ (a<<16)) & 0xffffffff; c -= a; c -= b; c = (c ^ (b>> 5)) & 0xffffffff; a -= b; a -= c; a = (a ^ (c>> 3)) & 0xffffffff; b -= c; b -= a; b = (b ^ (a<<10)) & 0xffffffff; c -= a; c -= b; c = (c ^ (b>>15)) & 0xffffffff; };
 k += 12; len -= 12;
      }
  else
    while (len >= 12)
      {
 a += (k[0] +((hashval_t)k[1]<<8) +((hashval_t)k[2]<<16) +((hashval_t)k[3]<<24));
 b += (k[4] +((hashval_t)k[5]<<8) +((hashval_t)k[6]<<16) +((hashval_t)k[7]<<24));
 c += (k[8] +((hashval_t)k[9]<<8) +((hashval_t)k[10]<<16)+((hashval_t)k[11]<<24));
 { a -= b; a -= c; a ^= (c>>13); b -= c; b -= a; b ^= (a<< 8); c -= a; c -= b; c ^= ((b&0xffffffff)>>13); a -= b; a -= c; a ^= ((c&0xffffffff)>>12); b -= c; b -= a; b = (b ^ (a<<16)) & 0xffffffff; c -= a; c -= b; c = (c ^ (b>> 5)) & 0xffffffff; a -= b; a -= c; a = (a ^ (c>> 3)) & 0xffffffff; b -= c; b -= a; b = (b ^ (a<<10)) & 0xffffffff; c -= a; c -= b; c = (c ^ (b>>15)) & 0xffffffff; };
 k += 12; len -= 12;
      }
  c += length;
  switch(len)
    {
    case 11: c+=((hashval_t)k[10]<<24);
    case 10: c+=((hashval_t)k[9]<<16);
    case 9 : c+=((hashval_t)k[8]<<8);
    case 8 : b+=((hashval_t)k[7]<<24);
    case 7 : b+=((hashval_t)k[6]<<16);
    case 6 : b+=((hashval_t)k[5]<<8);
    case 5 : b+=k[4];
    case 4 : a+=((hashval_t)k[3]<<24);
    case 3 : a+=((hashval_t)k[2]<<16);
    case 2 : a+=((hashval_t)k[1]<<8);
    case 1 : a+=k[0];
    }
  { a -= b; a -= c; a ^= (c>>13); b -= c; b -= a; b ^= (a<< 8); c -= a; c -= b; c ^= ((b&0xffffffff)>>13); a -= b; a -= c; a ^= ((c&0xffffffff)>>12); b -= c; b -= a; b = (b ^ (a<<16)) & 0xffffffff; c -= a; c -= b; c = (c ^ (b>> 5)) & 0xffffffff; a -= b; a -= c; a = (a ^ (c>> 3)) & 0xffffffff; b -= c; b -= a; b = (b ^ (a<<10)) & 0xffffffff; c -= a; c -= b; c = (c ^ (b>>15)) & 0xffffffff; };
  return c;
}
const unsigned char _hex_value[256] =
{
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  0, 1, 2, 3,
  4, 5, 6, 7,
  8, 9, 99, 99,
  99, 99, 99, 99,
  99, 10, 11, 12,
  13, 14, 15, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 10, 11, 12,
  13, 14, 15, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
  99, 99, 99, 99,
};
void
hex_init ()
{
}
const char *
lbasename (name)
     const char *name;
{
  const char *base;
  for (base = name; *name; name++)
    if (((*name) == '/'))
      base = name + 1;
  return base;
}
extern char *canonicalize_file_name (const char *);
char *
lrealpath (filename)
     const char *filename;
{
  {
    char buf[4096];
    const char *rp = realpath (filename, buf);
    if (rp == ((void *)0))
      rp = filename;
    return strdup (rp);
  }
  {
    char *rp = canonicalize_file_name (filename);
    if (rp == ((void *)0))
      return strdup (filename);
    else
      return rp;
  }
  {
    long path_max = pathconf ("/", _PC_PATH_MAX);
    if (path_max > 0)
      {
 char *buf, *rp, *ret;
 buf = malloc (path_max);
 if (buf == ((void *)0))
   return ((void *)0);
 rp = realpath (filename, buf);
 ret = strdup (rp ? rp : filename);
 free (buf);
 return ret;
      }
  }
  return strdup (filename);
}
static char *save_string (const char *, int);
static char **split_directories (const char *, int *);
static void free_split_directories (char **);
static char *
save_string (s, len)
     const char *s;
     int len;
{
  char *result = malloc (len + 1);
  memcpy (result, s, len);
  result[len] = 0;
  return result;
}
static char **
split_directories (name, ptr_num_dirs)
     const char *name;
     int *ptr_num_dirs;
{
  int num_dirs = 0;
  char **dirs;
  const char *p, *q;
  int ch;
  p = name;
  while ((ch = *p++) != '\0')
    {
      if (((ch) == '/'))
 {
   num_dirs++;
   while (((*p) == '/'))
     p++;
 }
    }
  dirs = (char **) malloc (sizeof (char *) * (num_dirs + 2));
  if (dirs == ((void *)0))
    return ((void *)0);
  num_dirs = 0;
  p = name;
  q = p;
  while ((ch = *p++) != '\0')
    {
      if (((ch) == '/'))
 {
   while (((*p) == '/'))
     p++;
   dirs[num_dirs++] = save_string (q, p - q);
   if (dirs[num_dirs - 1] == ((void *)0))
     {
       dirs[num_dirs] = ((void *)0);
       free_split_directories (dirs);
       return ((void *)0);
     }
   q = p;
 }
    }
  if (p - 1 - q > 0)
    dirs[num_dirs++] = save_string (q, p - 1 - q);
  dirs[num_dirs] = ((void *)0);
  if (dirs[num_dirs - 1] == ((void *)0))
    {
      free_split_directories (dirs);
      return ((void *)0);
    }
  if (ptr_num_dirs)
    *ptr_num_dirs = num_dirs;
  return dirs;
}
static void
free_split_directories (dirs)
     char **dirs;
{
  int i = 0;
  while (dirs[i] != ((void *)0))
    free (dirs[i++]);
  free ((char *) dirs);
}
char *
make_relative_prefix (progname, bin_prefix, prefix)
     const char *progname;
     const char *bin_prefix;
     const char *prefix;
{
  char **prog_dirs, **bin_dirs, **prefix_dirs;
  int prog_num, bin_num, prefix_num;
  int i, n, common;
  int needed_len;
  char *ret, *ptr, *full_progname = ((void *)0);
  if (progname == ((void *)0) || bin_prefix == ((void *)0) || prefix == ((void *)0))
    return ((void *)0);
  if (lbasename (progname) == progname)
    {
      char *temp;
      temp = getenv ("PATH");
      if (temp)
 {
   char *startp, *endp, *nstore;
   size_t prefixlen = strlen (temp) + 1;
   if (prefixlen < 2)
     prefixlen = 2;
   nstore = (char *) C_alloca(prefixlen + strlen (progname) + 1);
   startp = endp = temp;
   while (1)
     {
       if (*endp == ':' || *endp == 0)
  {
    if (endp == startp)
      {
        nstore[0] = '.';
        nstore[1] = '/';
        nstore[2] = '\0';
      }
    else
      {
        strncpy (nstore, startp, endp - startp);
        if (! ((endp[-1]) == '/'))
   {
     nstore[endp - startp] = '/';
     nstore[endp - startp + 1] = 0;
   }
        else
   nstore[endp - startp] = 0;
      }
    strcat (nstore, progname);
    if (! access (nstore, 1)
        )
      {
        progname = nstore;
        break;
      }
    if (*endp == 0)
      break;
    endp = startp = endp + 1;
  }
       else
  endp++;
     }
 }
    }
  full_progname = lrealpath (progname);
  if (full_progname == ((void *)0))
    return ((void *)0);
  prog_dirs = split_directories (full_progname, &prog_num);
  bin_dirs = split_directories (bin_prefix, &bin_num);
  free (full_progname);
  if (bin_dirs == ((void *)0) || prog_dirs == ((void *)0))
    return ((void *)0);
  prog_num--;
  if (prog_num == bin_num)
    {
      for (i = 0; i < bin_num; i++)
 {
   if (strcmp (prog_dirs[i], bin_dirs[i]) != 0)
     break;
 }
      if (prog_num <= 0 || i == bin_num)
 {
   free_split_directories (prog_dirs);
   free_split_directories (bin_dirs);
   prog_dirs = bin_dirs = (char **) 0;
   return ((void *)0);
 }
    }
  prefix_dirs = split_directories (prefix, &prefix_num);
  if (prefix_dirs == ((void *)0))
    {
      free_split_directories (prog_dirs);
      free_split_directories (bin_dirs);
      return ((void *)0);
    }
  n = (prefix_num < bin_num) ? prefix_num : bin_num;
  for (common = 0; common < n; common++)
    {
      if (strcmp (bin_dirs[common], prefix_dirs[common]) != 0)
 break;
    }
  if (common == 0)
    {
      free_split_directories (prog_dirs);
      free_split_directories (bin_dirs);
      free_split_directories (prefix_dirs);
      return ((void *)0);
    }
  needed_len = 0;
  for (i = 0; i < prog_num; i++)
    needed_len += strlen (prog_dirs[i]);
  needed_len += sizeof ("..") * (bin_num - common);
  for (i = common; i < prefix_num; i++)
    needed_len += strlen (prefix_dirs[i]);
  needed_len += 1;
  ret = (char *) malloc (needed_len);
  if (ret == ((void *)0))
    return ((void *)0);
  *ret = '\0';
  for (i = 0; i < prog_num; i++)
    strcat (ret, prog_dirs[i]);
  ptr = ret + strlen(ret);
  for (i = common; i < bin_num; i++)
    {
      strcpy (ptr, "..");
      ptr += sizeof ("..") - 1;
      *(ptr++) = '/';
    }
  *ptr = '\0';
  for (i = common; i < prefix_num; i++)
    strcat (ret, prefix_dirs[i]);
  free_split_directories (prog_dirs);
  free_split_directories (bin_dirs);
  free_split_directories (prefix_dirs);
  return ret;
}
struct flock
  {
    short int l_type;
    short int l_whence;
    __off_t l_start;
    __off_t l_len;
    __pid_t l_pid;
  };
struct flock64
  {
    short int l_type;
    short int l_whence;
    __off64_t l_start;
    __off64_t l_len;
    __pid_t l_pid;
  };
struct iovec
  {
    void *iov_base;
    size_t iov_len;
  };
enum __pid_type
  {
    F_OWNER_TID = 0,
    F_OWNER_PID,
    F_OWNER_PGRP,
    F_OWNER_GID = F_OWNER_PGRP
  };
struct f_owner_ex
  {
    enum __pid_type type;
    __pid_t pid;
  };
struct file_handle
{
  unsigned int handle_bytes;
  int handle_type;
  unsigned char f_handle[0];
};
extern ssize_t readahead (int __fd, __off64_t __offset, size_t __count)
    ;
extern int sync_file_range (int __fd, __off64_t __offset, __off64_t __count,
       unsigned int __flags);
extern ssize_t vmsplice (int __fdout, const struct iovec *__iov,
    size_t __count, unsigned int __flags);
extern ssize_t splice (int __fdin, __off64_t *__offin, int __fdout,
         __off64_t *__offout, size_t __len,
         unsigned int __flags);
extern ssize_t tee (int __fdin, int __fdout, size_t __len,
      unsigned int __flags);
extern int fallocate (int __fd, int __mode, __off_t __offset, __off_t __len);
extern int fallocate64 (int __fd, int __mode, __off64_t __offset,
   __off64_t __len);
extern int name_to_handle_at (int __dfd, const char *__name,
         struct file_handle *__handle, int *__mnt_id,
         int __flags) ;
extern int open_by_handle_at (int __mountdirfd, struct file_handle *__handle,
         int __flags);
extern int fcntl (int __fd, int __cmd, ...);
extern int open (const char *__file, int __oflag, ...) ;
extern int open64 (const char *__file, int __oflag, ...) ;
extern int openat (int __fd, const char *__file, int __oflag, ...)
     ;
extern int openat64 (int __fd, const char *__file, int __oflag, ...)
     ;
extern int creat (const char *__file, mode_t __mode) ;
extern int creat64 (const char *__file, mode_t __mode) ;
extern int posix_fadvise (int __fd, off_t __offset, off_t __len,
     int __advise) ;
extern int posix_fadvise64 (int __fd, off64_t __offset, off64_t __len,
       int __advise) ;
extern int posix_fallocate (int __fd, off_t __offset, off_t __len);
extern int posix_fallocate64 (int __fd, off64_t __offset, off64_t __len);
extern int flock (int __fd, int __operation) ;
extern int mkstemps (char *, int);
static const char *try (const char *, const char *);
static const char *
try (dir, base)
     const char *dir, *base;
{
  if (base != 0)
    return base;
  if (dir != 0
      && access (dir, 4 | 2 | 1) == 0)
    return dir;
  return 0;
}
static const char tmp[] = { '/', 't', 'm', 'p', 0 };
static const char usrtmp[] =
{ '/', 'u', 's', 'r', '/', 't', 'm', 'p', 0 };
static const char vartmp[] =
{ '/', 'v', 'a', 'r', '/', 't', 'm', 'p', 0 };
static char *memoized_tmpdir;
char *
choose_tmpdir ()
{
  const char *base = 0;
  char *tmpdir;
  unsigned int len;
  if (memoized_tmpdir)
    return memoized_tmpdir;
  base = try (getenv ("TMPDIR"), base);
  base = try (getenv ("TMP"), base);
  base = try (getenv ("TEMP"), base);
  base = try ("/tmp", base);
  base = try (vartmp, base);
  base = try (usrtmp, base);
  base = try (tmp, base);
  if (base == 0)
    base = ".";
  len = strlen (base);
  tmpdir = xmalloc (len + 2);
  strcpy (tmpdir, base);
  tmpdir[len] = '/';
  tmpdir[len+1] = '\0';
  memoized_tmpdir = tmpdir;
  return tmpdir;
}
char *
make_temp_file (suffix)
     const char *suffix;
{
  const char *base = choose_tmpdir ();
  char *temp_filename;
  int base_len, suffix_len;
  int fd;
  if (suffix == 0)
    suffix = "";
  base_len = strlen (base);
  suffix_len = strlen (suffix);
  temp_filename = xmalloc (base_len
      + (sizeof("ccXXXXXX") - 1)
      + suffix_len + 1);
  strcpy (temp_filename, base);
  strcpy (temp_filename + base_len, "ccXXXXXX");
  strcpy (temp_filename + base_len + (sizeof("ccXXXXXX") - 1), suffix);
  fd = mkstemps (temp_filename, suffix_len);
  if (fd == -1)
    abort ();
  if (close (fd))
    abort ();
  return temp_filename;
}
struct objalloc
{
  char *current_ptr;
  unsigned int current_space;
  void * chunks;
};
struct objalloc_align { char x; double d; };
extern struct objalloc *objalloc_create (void);
extern void * _objalloc_alloc (struct objalloc *, unsigned long);
extern void objalloc_free (struct objalloc *);
extern void objalloc_free_block (struct objalloc *, void *);
struct objalloc_chunk
{
  struct objalloc_chunk *next;
  char *current_ptr;
};
struct objalloc *
objalloc_create ()
{
  struct objalloc *ret;
  struct objalloc_chunk *chunk;
  ret = (struct objalloc *) malloc (sizeof *ret);
  if (ret == ((void *)0))
    return ((void *)0);
  ret->chunks = (void *) malloc ((4096 - 32));
  if (ret->chunks == ((void *)0))
    {
      free (ret);
      return ((void *)0);
    }
  chunk = (struct objalloc_chunk *) ret->chunks;
  chunk->next = ((void *)0);
  chunk->current_ptr = ((void *)0);
  ret->current_ptr = (char *) chunk + ((sizeof (struct objalloc_chunk) + __builtin_offsetof (objalloc_align, d) - 1) &~ (__builtin_offsetof (objalloc_align, d) - 1));
  ret->current_space = (4096 - 32) - ((sizeof (struct objalloc_chunk) + __builtin_offsetof (objalloc_align, d) - 1) &~ (__builtin_offsetof (objalloc_align, d) - 1));
  return ret;
}
void *
_objalloc_alloc (o, len)
     struct objalloc *o;
     unsigned long len;
{
  if (len == 0)
    len = 1;
  len = (len + __builtin_offsetof (objalloc_align, d) - 1) &~ (__builtin_offsetof (objalloc_align, d) - 1);
  if (len <= o->current_space)
    {
      o->current_ptr += len;
      o->current_space -= len;
      return (void *) (o->current_ptr - len);
    }
  if (len >= (512))
    {
      char *ret;
      struct objalloc_chunk *chunk;
      ret = (char *) malloc (((sizeof (struct objalloc_chunk) + __builtin_offsetof (objalloc_align, d) - 1) &~ (__builtin_offsetof (objalloc_align, d) - 1)) + len);
      if (ret == ((void *)0))
 return ((void *)0);
      chunk = (struct objalloc_chunk *) ret;
      chunk->next = (struct objalloc_chunk *) o->chunks;
      chunk->current_ptr = o->current_ptr;
      o->chunks = (void *) chunk;
      return (void *) (ret + ((sizeof (struct objalloc_chunk) + __builtin_offsetof (objalloc_align, d) - 1) &~ (__builtin_offsetof (objalloc_align, d) - 1)));
    }
  else
    {
      struct objalloc_chunk *chunk;
      chunk = (struct objalloc_chunk *) malloc ((4096 - 32));
      if (chunk == ((void *)0))
 return ((void *)0);
      chunk->next = (struct objalloc_chunk *) o->chunks;
      chunk->current_ptr = ((void *)0);
      o->current_ptr = (char *) chunk + ((sizeof (struct objalloc_chunk) + __builtin_offsetof (objalloc_align, d) - 1) &~ (__builtin_offsetof (objalloc_align, d) - 1));
      o->current_space = (4096 - 32) - ((sizeof (struct objalloc_chunk) + __builtin_offsetof (objalloc_align, d) - 1) &~ (__builtin_offsetof (objalloc_align, d) - 1));
      o->chunks = (void *) chunk;
      return _objalloc_alloc ((o), (len));
    }
}
void
objalloc_free (o)
     struct objalloc *o;
{
  struct objalloc_chunk *l;
  l = (struct objalloc_chunk *) o->chunks;
  while (l != ((void *)0))
    {
      struct objalloc_chunk *next;
      next = l->next;
      free (l);
      l = next;
    }
  free (o);
}
void
objalloc_free_block (o, block)
     struct objalloc *o;
     void * block;
{
  struct objalloc_chunk *p, *small;
  char *b = (char *) block;
  small = ((void *)0);
  for (p = (struct objalloc_chunk *) o->chunks; p != ((void *)0); p = p->next)
    {
      if (p->current_ptr == ((void *)0))
 {
   if (b > (char *) p && b < (char *) p + (4096 - 32))
     break;
   small = p;
 }
      else
 {
   if (b == (char *) p + ((sizeof (struct objalloc_chunk) + __builtin_offsetof (objalloc_align, d) - 1) &~ (__builtin_offsetof (objalloc_align, d) - 1)))
     break;
 }
    }
  if (p == ((void *)0))
    abort ();
  if (p->current_ptr == ((void *)0))
    {
      struct objalloc_chunk *q;
      struct objalloc_chunk *first;
      first = ((void *)0);
      q = (struct objalloc_chunk *) o->chunks;
      while (q != p)
 {
   struct objalloc_chunk *next;
   next = q->next;
   if (small != ((void *)0))
     {
       if (small == q)
  small = ((void *)0);
       free (q);
     }
   else if (q->current_ptr > b)
     free (q);
   else if (first == ((void *)0))
     first = q;
   q = next;
 }
      if (first == ((void *)0))
 first = p;
      o->chunks = (void *) first;
      o->current_ptr = b;
      o->current_space = ((char *) p + (4096 - 32)) - b;
    }
  else
    {
      struct objalloc_chunk *q;
      char *current_ptr;
      current_ptr = p->current_ptr;
      p = p->next;
      q = (struct objalloc_chunk *) o->chunks;
      while (q != p)
 {
   struct objalloc_chunk *next;
   next = q->next;
   free (q);
   q = next;
 }
      o->chunks = (void *) p;
      while (p->current_ptr != ((void *)0))
 p = p->next;
      o->current_ptr = current_ptr;
      o->current_space = ((char *) p + (4096 - 32)) - current_ptr;
    }
}
struct _obstack_chunk
{
  char *limit;
  struct _obstack_chunk *prev;
  char contents[4];
};
struct obstack
{
  long chunk_size;
  struct _obstack_chunk *chunk;
  char *object_base;
  char *next_free;
  char *chunk_limit;
  long int temp;
  int alignment_mask;
  struct _obstack_chunk *(*chunkfun) (void *, long);
  void (*freefun) (void *, struct _obstack_chunk *);
  void *extra_arg;
  unsigned use_extra_arg:1;
  unsigned maybe_empty_object:1;
  unsigned alloc_failed:1;
};
extern void _obstack_newchunk (struct obstack *, int);
extern void _obstack_free (struct obstack *, void *);
extern int _obstack_begin (struct obstack *, int, int,
       void *(*) (long), void (*) (void *));
extern int _obstack_begin_1 (struct obstack *, int, int,
        void *(*) (void *, long),
        void (*) (void *, void *), void *);
extern int _obstack_memory_used (struct obstack *);
void obstack_init (struct obstack *obstack);
void * obstack_alloc (struct obstack *obstack, int size);
void * obstack_copy (struct obstack *obstack, void *address, int size);
void * obstack_copy0 (struct obstack *obstack, void *address, int size);
void obstack_free (struct obstack *obstack, void *block);
void obstack_blank (struct obstack *obstack, int size);
void obstack_grow (struct obstack *obstack, void *data, int size);
void obstack_grow0 (struct obstack *obstack, void *data, int size);
void obstack_1grow (struct obstack *obstack, int data_char);
void obstack_ptr_grow (struct obstack *obstack, void *data);
void obstack_int_grow (struct obstack *obstack, int data);
void * obstack_finish (struct obstack *obstack);
int obstack_object_size (struct obstack *obstack);
int obstack_room (struct obstack *obstack);
void obstack_make_room (struct obstack *obstack, int size);
void obstack_1grow_fast (struct obstack *obstack, int data_char);
void obstack_ptr_grow_fast (struct obstack *obstack, void *data);
void obstack_int_grow_fast (struct obstack *obstack, int data);
void obstack_blank_fast (struct obstack *obstack, int size);
void * obstack_base (struct obstack *obstack);
void * obstack_next_free (struct obstack *obstack);
int obstack_alignment_mask (struct obstack *obstack);
int obstack_chunk_size (struct obstack *obstack);
int obstack_memory_used (struct obstack *obstack);
extern void (*obstack_alloc_failed_handler) (void);
extern int obstack_exit_failure;
struct partition_elem
{
  int class_element;
  struct partition_elem* next;
  unsigned class_count;
};
typedef struct partition_def
{
  int num_elements;
  struct partition_elem elements[1];
} *partition;
extern partition partition_new (int);
extern void partition_delete (partition);
extern int partition_union (partition, int, int)
           ;
extern void partition_print (partition, FILE*)
             ;
static int elem_compare (const void *, const void *);
partition
partition_new (num_elements)
     int num_elements;
{
  int e;
  partition part = (partition)
    xmalloc (sizeof (struct partition_def) +
      (num_elements - 1) * sizeof (struct partition_elem));
  part->num_elements = num_elements;
  for (e = 0; e < num_elements; ++e)
    {
      part->elements[e].class_element = e;
      part->elements[e].next = &(part->elements[e]);
      part->elements[e].class_count = 1;
    }
  return part;
}
void
partition_delete (part)
      partition part;
{
  free (part);
}
int
partition_union (part, elem1, elem2)
     partition part;
     int elem1;
     int elem2;
{
  struct partition_elem *elements = part->elements;
  struct partition_elem *e1;
  struct partition_elem *e2;
  struct partition_elem *p;
  struct partition_elem *old_next;
  int class_element = elements[elem1].class_element;
  if (class_element == elements[elem2].class_element)
    return class_element;
  if (elements[elem1].class_count < elements[elem2].class_count)
    {
      int temp = elem1;
      elem1 = elem2;
      elem2 = temp;
      class_element = elements[elem1].class_element;
    }
  e1 = &(elements[elem1]);
  e2 = &(elements[elem2]);
  elements[class_element].class_count
    += elements[e2->class_element].class_count;
  e2->class_element = class_element;
  for (p = e2->next; p != e2; p = p->next)
    p->class_element = class_element;
  old_next = e1->next;
  e1->next = e2->next;
  e2->next = old_next;
  return class_element;
}
static int
elem_compare (elem1, elem2)
     const void *elem1;
     const void *elem2;
{
  int e1 = * (const int *) elem1;
  int e2 = * (const int *) elem2;
  if (e1 < e2)
    return -1;
  else if (e1 > e2)
    return 1;
  else
    return 0;
}
void
partition_print (part, fp)
     partition part;
     FILE *fp;
{
  char *done;
  int num_elements = part->num_elements;
  struct partition_elem *elements = part->elements;
  int *class_elements;
  int e;
  done = (char *) xmalloc (num_elements);
  memset (done, 0, num_elements);
  class_elements = (int *) xmalloc (num_elements * sizeof (int));
  fputc ('[', fp);
  for (e = 0; e < num_elements; ++e)
    if (! done[e])
      {
 int c = e;
 int count = elements[elements[e].class_element].class_count;
 int i;
 for (i = 0; i < count; ++i) {
   class_elements[i] = c;
   done[c] = 1;
   c = elements[c].next - elements;
 }
 qsort ((void *) class_elements, count, sizeof (int), elem_compare);
 fputc ('(', fp);
 for (i = 0; i < count; ++i)
   fprintf (fp, i == 0 ? "%d" : " %d", class_elements[i]);
 fputc (')', fp);
      }
  fputc (']', fp);
  free (done);
}
struct completion;
struct __sysctl_args {
 int *name;
 int nlen;
 void *oldval;
 size_t *oldlenp;
 void *newval;
 size_t newlen;
 unsigned long __unused[4];
};
enum
{
 CTL_KERN=1,
 CTL_VM=2,
 CTL_NET=3,
 CTL_PROC=4,
 CTL_FS=5,
 CTL_DEBUG=6,
 CTL_DEV=7,
 CTL_BUS=8,
 CTL_ABI=9,
 CTL_CPU=10,
 CTL_ARLAN=254,
 CTL_S390DBF=5677,
 CTL_SUNRPC=7249,
 CTL_PM=9899,
 CTL_FRV=9898
};
enum
{
 CTL_BUS_ISA=1
};
enum
{
 INOTIFY_MAX_USER_INSTANCES=1,
 INOTIFY_MAX_USER_WATCHES=2,
 INOTIFY_MAX_QUEUED_EVENTS=3
};
enum
{
 KERN_OSTYPE=1,
 KERN_OSRELEASE=2,
 KERN_OSREV=3,
 KERN_VERSION=4,
 KERN_SECUREMASK=5,
 KERN_PROF=6,
 KERN_NODENAME=7,
 KERN_DOMAINNAME=8,
 KERN_PANIC=15,
 KERN_REALROOTDEV=16,
 KERN_SPARC_REBOOT=21,
 KERN_CTLALTDEL=22,
 KERN_PRINTK=23,
 KERN_NAMETRANS=24,
 KERN_PPC_HTABRECLAIM=25,
 KERN_PPC_ZEROPAGED=26,
 KERN_PPC_POWERSAVE_NAP=27,
 KERN_MODPROBE=28,
 KERN_SG_BIG_BUFF=29,
 KERN_ACCT=30,
 KERN_PPC_L2CR=31,
 KERN_RTSIGNR=32,
 KERN_RTSIGMAX=33,
 KERN_SHMMAX=34,
 KERN_MSGMAX=35,
 KERN_MSGMNB=36,
 KERN_MSGPOOL=37,
 KERN_SYSRQ=38,
 KERN_MAX_THREADS=39,
  KERN_RANDOM=40,
  KERN_SHMALL=41,
  KERN_MSGMNI=42,
  KERN_SEM=43,
  KERN_SPARC_STOP_A=44,
  KERN_SHMMNI=45,
 KERN_OVERFLOWUID=46,
 KERN_OVERFLOWGID=47,
 KERN_SHMPATH=48,
 KERN_HOTPLUG=49,
 KERN_IEEE_EMULATION_WARNINGS=50,
 KERN_S390_USER_DEBUG_LOGGING=51,
 KERN_CORE_USES_PID=52,
 KERN_TAINTED=53,
 KERN_CADPID=54,
 KERN_PIDMAX=55,
   KERN_CORE_PATTERN=56,
 KERN_PANIC_ON_OOPS=57,
 KERN_HPPA_PWRSW=58,
 KERN_HPPA_UNALIGNED=59,
 KERN_PRINTK_RATELIMIT=60,
 KERN_PRINTK_RATELIMIT_BURST=61,
 KERN_PTY=62,
 KERN_NGROUPS_MAX=63,
 KERN_SPARC_SCONS_PWROFF=64,
 KERN_HZ_TIMER=65,
 KERN_UNKNOWN_NMI_PANIC=66,
 KERN_BOOTLOADER_TYPE=67,
 KERN_RANDOMIZE=68,
 KERN_SETUID_DUMPABLE=69,
 KERN_SPIN_RETRY=70,
 KERN_ACPI_VIDEO_FLAGS=71,
 KERN_IA64_UNALIGNED=72,
 KERN_COMPAT_LOG=73,
 KERN_MAX_LOCK_DEPTH=74,
 KERN_NMI_WATCHDOG=75,
 KERN_PANIC_ON_NMI=76,
 KERN_PANIC_ON_WARN=77
};
enum
{
 VM_UNUSED1=1,
 VM_UNUSED2=2,
 VM_UNUSED3=3,
 VM_UNUSED4=4,
 VM_OVERCOMMIT_MEMORY=5,
 VM_UNUSED5=6,
 VM_UNUSED7=7,
 VM_UNUSED8=8,
 VM_UNUSED9=9,
 VM_PAGE_CLUSTER=10,
 VM_DIRTY_BACKGROUND=11,
 VM_DIRTY_RATIO=12,
 VM_DIRTY_WB_CS=13,
 VM_DIRTY_EXPIRE_CS=14,
 VM_NR_PDFLUSH_THREADS=15,
 VM_OVERCOMMIT_RATIO=16,
 VM_PAGEBUF=17,
 VM_HUGETLB_PAGES=18,
 VM_SWAPPINESS=19,
 VM_LOWMEM_RESERVE_RATIO=20,
 VM_MIN_FREE_KBYTES=21,
 VM_MAX_MAP_COUNT=22,
 VM_LAPTOP_MODE=23,
 VM_BLOCK_DUMP=24,
 VM_HUGETLB_GROUP=25,
 VM_VFS_CACHE_PRESSURE=26,
 VM_LEGACY_VA_LAYOUT=27,
 VM_SWAP_TOKEN_TIMEOUT=28,
 VM_DROP_PAGECACHE=29,
 VM_PERCPU_PAGELIST_FRACTION=30,
 VM_ZONE_RECLAIM_MODE=31,
 VM_MIN_UNMAPPED=32,
 VM_PANIC_ON_OOM=33,
 VM_VDSO_ENABLED=34,
 VM_MIN_SLAB=35
};
enum
{
 NET_CORE=1,
 NET_ETHER=2,
 NET_802=3,
 NET_UNIX=4,
 NET_IPV4=5,
 NET_IPX=6,
 NET_ATALK=7,
 NET_NETROM=8,
 NET_AX25=9,
 NET_BRIDGE=10,
 NET_ROSE=11,
 NET_IPV6=12,
 NET_X25=13,
 NET_TR=14,
 NET_DECNET=15,
 NET_ECONET=16,
 NET_SCTP=17,
 NET_LLC=18,
 NET_NETFILTER=19,
 NET_DCCP=20,
 NET_IRDA=412
};
enum
{
 RANDOM_POOLSIZE=1,
 RANDOM_ENTROPY_COUNT=2,
 RANDOM_READ_THRESH=3,
 RANDOM_WRITE_THRESH=4,
 RANDOM_BOOT_ID=5,
 RANDOM_UUID=6
};
enum
{
 PTY_MAX=1,
 PTY_NR=2
};
enum
{
 BUS_ISA_MEM_BASE=1,
 BUS_ISA_PORT_BASE=2,
 BUS_ISA_PORT_SHIFT=3
};
enum
{
 NET_CORE_WMEM_MAX=1,
 NET_CORE_RMEM_MAX=2,
 NET_CORE_WMEM_DEFAULT=3,
 NET_CORE_RMEM_DEFAULT=4,
 NET_CORE_MAX_BACKLOG=6,
 NET_CORE_FASTROUTE=7,
 NET_CORE_MSG_COST=8,
 NET_CORE_MSG_BURST=9,
 NET_CORE_OPTMEM_MAX=10,
 NET_CORE_HOT_LIST_LENGTH=11,
 NET_CORE_DIVERT_VERSION=12,
 NET_CORE_NO_CONG_THRESH=13,
 NET_CORE_NO_CONG=14,
 NET_CORE_LO_CONG=15,
 NET_CORE_MOD_CONG=16,
 NET_CORE_DEV_WEIGHT=17,
 NET_CORE_SOMAXCONN=18,
 NET_CORE_BUDGET=19,
 NET_CORE_AEVENT_ETIME=20,
 NET_CORE_AEVENT_RSEQTH=21,
 NET_CORE_WARNINGS=22
};
enum
{
 NET_UNIX_DESTROY_DELAY=1,
 NET_UNIX_DELETE_DELAY=2,
 NET_UNIX_MAX_DGRAM_QLEN=3
};
enum
{
 NET_NF_CONNTRACK_MAX=1,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_NF_CONNTRACK_BUCKETS=14,
 NET_NF_CONNTRACK_LOG_INVALID=15,
 NET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_NF_CONNTRACK_TCP_LOOSE=17,
 NET_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_NF_CONNTRACK_TCP_MAX_RETRANS=19,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_NF_CONNTRACK_COUNT=27,
 NET_NF_CONNTRACK_ICMPV6_TIMEOUT=28,
 NET_NF_CONNTRACK_FRAG6_TIMEOUT=29,
 NET_NF_CONNTRACK_FRAG6_LOW_THRESH=30,
 NET_NF_CONNTRACK_FRAG6_HIGH_THRESH=31,
 NET_NF_CONNTRACK_CHECKSUM=32
};
enum
{
 NET_IPV4_FORWARD=8,
 NET_IPV4_DYNADDR=9,
 NET_IPV4_CONF=16,
 NET_IPV4_NEIGH=17,
 NET_IPV4_ROUTE=18,
 NET_IPV4_FIB_HASH=19,
 NET_IPV4_NETFILTER=20,
 NET_IPV4_TCP_TIMESTAMPS=33,
 NET_IPV4_TCP_WINDOW_SCALING=34,
 NET_IPV4_TCP_SACK=35,
 NET_IPV4_TCP_RETRANS_COLLAPSE=36,
 NET_IPV4_DEFAULT_TTL=37,
 NET_IPV4_AUTOCONFIG=38,
 NET_IPV4_NO_PMTU_DISC=39,
 NET_IPV4_TCP_SYN_RETRIES=40,
 NET_IPV4_IPFRAG_HIGH_THRESH=41,
 NET_IPV4_IPFRAG_LOW_THRESH=42,
 NET_IPV4_IPFRAG_TIME=43,
 NET_IPV4_TCP_MAX_KA_PROBES=44,
 NET_IPV4_TCP_KEEPALIVE_TIME=45,
 NET_IPV4_TCP_KEEPALIVE_PROBES=46,
 NET_IPV4_TCP_RETRIES1=47,
 NET_IPV4_TCP_RETRIES2=48,
 NET_IPV4_TCP_FIN_TIMEOUT=49,
 NET_IPV4_IP_MASQ_DEBUG=50,
 NET_TCP_SYNCOOKIES=51,
 NET_TCP_STDURG=52,
 NET_TCP_RFC1337=53,
 NET_TCP_SYN_TAILDROP=54,
 NET_TCP_MAX_SYN_BACKLOG=55,
 NET_IPV4_LOCAL_PORT_RANGE=56,
 NET_IPV4_ICMP_ECHO_IGNORE_ALL=57,
 NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS=58,
 NET_IPV4_ICMP_SOURCEQUENCH_RATE=59,
 NET_IPV4_ICMP_DESTUNREACH_RATE=60,
 NET_IPV4_ICMP_TIMEEXCEED_RATE=61,
 NET_IPV4_ICMP_PARAMPROB_RATE=62,
 NET_IPV4_ICMP_ECHOREPLY_RATE=63,
 NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES=64,
 NET_IPV4_IGMP_MAX_MEMBERSHIPS=65,
 NET_TCP_TW_RECYCLE=66,
 NET_IPV4_ALWAYS_DEFRAG=67,
 NET_IPV4_TCP_KEEPALIVE_INTVL=68,
 NET_IPV4_INET_PEER_THRESHOLD=69,
 NET_IPV4_INET_PEER_MINTTL=70,
 NET_IPV4_INET_PEER_MAXTTL=71,
 NET_IPV4_INET_PEER_GC_MINTIME=72,
 NET_IPV4_INET_PEER_GC_MAXTIME=73,
 NET_TCP_ORPHAN_RETRIES=74,
 NET_TCP_ABORT_ON_OVERFLOW=75,
 NET_TCP_SYNACK_RETRIES=76,
 NET_TCP_MAX_ORPHANS=77,
 NET_TCP_MAX_TW_BUCKETS=78,
 NET_TCP_FACK=79,
 NET_TCP_REORDERING=80,
 NET_TCP_ECN=81,
 NET_TCP_DSACK=82,
 NET_TCP_MEM=83,
 NET_TCP_WMEM=84,
 NET_TCP_RMEM=85,
 NET_TCP_APP_WIN=86,
 NET_TCP_ADV_WIN_SCALE=87,
 NET_IPV4_NONLOCAL_BIND=88,
 NET_IPV4_ICMP_RATELIMIT=89,
 NET_IPV4_ICMP_RATEMASK=90,
 NET_TCP_TW_REUSE=91,
 NET_TCP_FRTO=92,
 NET_TCP_LOW_LATENCY=93,
 NET_IPV4_IPFRAG_SECRET_INTERVAL=94,
 NET_IPV4_IGMP_MAX_MSF=96,
 NET_TCP_NO_METRICS_SAVE=97,
 NET_TCP_DEFAULT_WIN_SCALE=105,
 NET_TCP_MODERATE_RCVBUF=106,
 NET_TCP_TSO_WIN_DIVISOR=107,
 NET_TCP_BIC_BETA=108,
 NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR=109,
 NET_TCP_CONG_CONTROL=110,
 NET_TCP_ABC=111,
 NET_IPV4_IPFRAG_MAX_DIST=112,
  NET_TCP_MTU_PROBING=113,
 NET_TCP_BASE_MSS=114,
 NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS=115,
 NET_TCP_DMA_COPYBREAK=116,
 NET_TCP_SLOW_START_AFTER_IDLE=117,
 NET_CIPSOV4_CACHE_ENABLE=118,
 NET_CIPSOV4_CACHE_BUCKET_SIZE=119,
 NET_CIPSOV4_RBM_OPTFMT=120,
 NET_CIPSOV4_RBM_STRICTVALID=121,
 NET_TCP_AVAIL_CONG_CONTROL=122,
 NET_TCP_ALLOWED_CONG_CONTROL=123,
 NET_TCP_MAX_SSTHRESH=124,
 NET_TCP_FRTO_RESPONSE=125
};
enum {
 NET_IPV4_ROUTE_FLUSH=1,
 NET_IPV4_ROUTE_MIN_DELAY=2,
 NET_IPV4_ROUTE_MAX_DELAY=3,
 NET_IPV4_ROUTE_GC_THRESH=4,
 NET_IPV4_ROUTE_MAX_SIZE=5,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL=6,
 NET_IPV4_ROUTE_GC_TIMEOUT=7,
 NET_IPV4_ROUTE_GC_INTERVAL=8,
 NET_IPV4_ROUTE_REDIRECT_LOAD=9,
 NET_IPV4_ROUTE_REDIRECT_NUMBER=10,
 NET_IPV4_ROUTE_REDIRECT_SILENCE=11,
 NET_IPV4_ROUTE_ERROR_COST=12,
 NET_IPV4_ROUTE_ERROR_BURST=13,
 NET_IPV4_ROUTE_GC_ELASTICITY=14,
 NET_IPV4_ROUTE_MTU_EXPIRES=15,
 NET_IPV4_ROUTE_MIN_PMTU=16,
 NET_IPV4_ROUTE_MIN_ADVMSS=17,
 NET_IPV4_ROUTE_SECRET_INTERVAL=18,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS=19
};
enum
{
 NET_PROTO_CONF_ALL=-2,
 NET_PROTO_CONF_DEFAULT=-3
};
enum
{
 NET_IPV4_CONF_FORWARDING=1,
 NET_IPV4_CONF_MC_FORWARDING=2,
 NET_IPV4_CONF_PROXY_ARP=3,
 NET_IPV4_CONF_ACCEPT_REDIRECTS=4,
 NET_IPV4_CONF_SECURE_REDIRECTS=5,
 NET_IPV4_CONF_SEND_REDIRECTS=6,
 NET_IPV4_CONF_SHARED_MEDIA=7,
 NET_IPV4_CONF_RP_FILTER=8,
 NET_IPV4_CONF_ACCEPT_SOURCE_ROUTE=9,
 NET_IPV4_CONF_BOOTP_RELAY=10,
 NET_IPV4_CONF_LOG_MARTIANS=11,
 NET_IPV4_CONF_TAG=12,
 NET_IPV4_CONF_ARPFILTER=13,
 NET_IPV4_CONF_MEDIUM_ID=14,
 NET_IPV4_CONF_NOXFRM=15,
 NET_IPV4_CONF_NOPOLICY=16,
 NET_IPV4_CONF_FORCE_IGMP_VERSION=17,
 NET_IPV4_CONF_ARP_ANNOUNCE=18,
 NET_IPV4_CONF_ARP_IGNORE=19,
 NET_IPV4_CONF_PROMOTE_SECONDARIES=20,
 NET_IPV4_CONF_ARP_ACCEPT=21,
 NET_IPV4_CONF_ARP_NOTIFY=22
};
enum
{
 NET_IPV4_NF_CONNTRACK_MAX=1,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_IPV4_NF_CONNTRACK_BUCKETS=14,
 NET_IPV4_NF_CONNTRACK_LOG_INVALID=15,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_IPV4_NF_CONNTRACK_TCP_LOOSE=17,
 NET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS=19,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_IPV4_NF_CONNTRACK_COUNT=27,
 NET_IPV4_NF_CONNTRACK_CHECKSUM=28
};
enum {
 NET_IPV6_CONF=16,
 NET_IPV6_NEIGH=17,
 NET_IPV6_ROUTE=18,
 NET_IPV6_ICMP=19,
 NET_IPV6_BINDV6ONLY=20,
 NET_IPV6_IP6FRAG_HIGH_THRESH=21,
 NET_IPV6_IP6FRAG_LOW_THRESH=22,
 NET_IPV6_IP6FRAG_TIME=23,
 NET_IPV6_IP6FRAG_SECRET_INTERVAL=24,
 NET_IPV6_MLD_MAX_MSF=25
};
enum {
 NET_IPV6_ROUTE_FLUSH=1,
 NET_IPV6_ROUTE_GC_THRESH=2,
 NET_IPV6_ROUTE_MAX_SIZE=3,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL=4,
 NET_IPV6_ROUTE_GC_TIMEOUT=5,
 NET_IPV6_ROUTE_GC_INTERVAL=6,
 NET_IPV6_ROUTE_GC_ELASTICITY=7,
 NET_IPV6_ROUTE_MTU_EXPIRES=8,
 NET_IPV6_ROUTE_MIN_ADVMSS=9,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS=10
};
enum {
 NET_IPV6_FORWARDING=1,
 NET_IPV6_HOP_LIMIT=2,
 NET_IPV6_MTU=3,
 NET_IPV6_ACCEPT_RA=4,
 NET_IPV6_ACCEPT_REDIRECTS=5,
 NET_IPV6_AUTOCONF=6,
 NET_IPV6_DAD_TRANSMITS=7,
 NET_IPV6_RTR_SOLICITS=8,
 NET_IPV6_RTR_SOLICIT_INTERVAL=9,
 NET_IPV6_RTR_SOLICIT_DELAY=10,
 NET_IPV6_USE_TEMPADDR=11,
 NET_IPV6_TEMP_VALID_LFT=12,
 NET_IPV6_TEMP_PREFERED_LFT=13,
 NET_IPV6_REGEN_MAX_RETRY=14,
 NET_IPV6_MAX_DESYNC_FACTOR=15,
 NET_IPV6_MAX_ADDRESSES=16,
 NET_IPV6_FORCE_MLD_VERSION=17,
 NET_IPV6_ACCEPT_RA_DEFRTR=18,
 NET_IPV6_ACCEPT_RA_PINFO=19,
 NET_IPV6_ACCEPT_RA_RTR_PREF=20,
 NET_IPV6_RTR_PROBE_INTERVAL=21,
 NET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN=22,
 NET_IPV6_PROXY_NDP=23,
 NET_IPV6_ACCEPT_SOURCE_ROUTE=25,
 NET_IPV6_ACCEPT_RA_FROM_LOCAL=26,
 __NET_IPV6_MAX
};
enum {
 NET_IPV6_ICMP_RATELIMIT=1
};
enum {
 NET_NEIGH_MCAST_SOLICIT=1,
 NET_NEIGH_UCAST_SOLICIT=2,
 NET_NEIGH_APP_SOLICIT=3,
 NET_NEIGH_RETRANS_TIME=4,
 NET_NEIGH_REACHABLE_TIME=5,
 NET_NEIGH_DELAY_PROBE_TIME=6,
 NET_NEIGH_GC_STALE_TIME=7,
 NET_NEIGH_UNRES_QLEN=8,
 NET_NEIGH_PROXY_QLEN=9,
 NET_NEIGH_ANYCAST_DELAY=10,
 NET_NEIGH_PROXY_DELAY=11,
 NET_NEIGH_LOCKTIME=12,
 NET_NEIGH_GC_INTERVAL=13,
 NET_NEIGH_GC_THRESH1=14,
 NET_NEIGH_GC_THRESH2=15,
 NET_NEIGH_GC_THRESH3=16,
 NET_NEIGH_RETRANS_TIME_MS=17,
 NET_NEIGH_REACHABLE_TIME_MS=18
};
enum {
 NET_DCCP_DEFAULT=1
};
enum {
 NET_IPX_PPROP_BROADCASTING=1,
 NET_IPX_FORWARDING=2
};
enum {
 NET_LLC2=1,
 NET_LLC_STATION=2
};
enum {
 NET_LLC2_TIMEOUT=1
};
enum {
 NET_LLC_STATION_ACK_TIMEOUT=1
};
enum {
 NET_LLC2_ACK_TIMEOUT=1,
 NET_LLC2_P_TIMEOUT=2,
 NET_LLC2_REJ_TIMEOUT=3,
 NET_LLC2_BUSY_TIMEOUT=4
};
enum {
 NET_ATALK_AARP_EXPIRY_TIME=1,
 NET_ATALK_AARP_TICK_TIME=2,
 NET_ATALK_AARP_RETRANSMIT_LIMIT=3,
 NET_ATALK_AARP_RESOLVE_TIME=4
};
enum {
 NET_NETROM_DEFAULT_PATH_QUALITY=1,
 NET_NETROM_OBSOLESCENCE_COUNT_INITIALISER=2,
 NET_NETROM_NETWORK_TTL_INITIALISER=3,
 NET_NETROM_TRANSPORT_TIMEOUT=4,
 NET_NETROM_TRANSPORT_MAXIMUM_TRIES=5,
 NET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY=6,
 NET_NETROM_TRANSPORT_BUSY_DELAY=7,
 NET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE=8,
 NET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT=9,
 NET_NETROM_ROUTING_CONTROL=10,
 NET_NETROM_LINK_FAILS_COUNT=11,
 NET_NETROM_RESET=12
};
enum {
 NET_AX25_IP_DEFAULT_MODE=1,
 NET_AX25_DEFAULT_MODE=2,
 NET_AX25_BACKOFF_TYPE=3,
 NET_AX25_CONNECT_MODE=4,
 NET_AX25_STANDARD_WINDOW=5,
 NET_AX25_EXTENDED_WINDOW=6,
 NET_AX25_T1_TIMEOUT=7,
 NET_AX25_T2_TIMEOUT=8,
 NET_AX25_T3_TIMEOUT=9,
 NET_AX25_IDLE_TIMEOUT=10,
 NET_AX25_N2=11,
 NET_AX25_PACLEN=12,
 NET_AX25_PROTOCOL=13,
 NET_AX25_DAMA_SLAVE_TIMEOUT=14
};
enum {
 NET_ROSE_RESTART_REQUEST_TIMEOUT=1,
 NET_ROSE_CALL_REQUEST_TIMEOUT=2,
 NET_ROSE_RESET_REQUEST_TIMEOUT=3,
 NET_ROSE_CLEAR_REQUEST_TIMEOUT=4,
 NET_ROSE_ACK_HOLD_BACK_TIMEOUT=5,
 NET_ROSE_ROUTING_CONTROL=6,
 NET_ROSE_LINK_FAIL_TIMEOUT=7,
 NET_ROSE_MAX_VCS=8,
 NET_ROSE_WINDOW_SIZE=9,
 NET_ROSE_NO_ACTIVITY_TIMEOUT=10
};
enum {
 NET_X25_RESTART_REQUEST_TIMEOUT=1,
 NET_X25_CALL_REQUEST_TIMEOUT=2,
 NET_X25_RESET_REQUEST_TIMEOUT=3,
 NET_X25_CLEAR_REQUEST_TIMEOUT=4,
 NET_X25_ACK_HOLD_BACK_TIMEOUT=5,
 NET_X25_FORWARD=6
};
enum
{
 NET_TR_RIF_TIMEOUT=1
};
enum {
 NET_DECNET_NODE_TYPE = 1,
 NET_DECNET_NODE_ADDRESS = 2,
 NET_DECNET_NODE_NAME = 3,
 NET_DECNET_DEFAULT_DEVICE = 4,
 NET_DECNET_TIME_WAIT = 5,
 NET_DECNET_DN_COUNT = 6,
 NET_DECNET_DI_COUNT = 7,
 NET_DECNET_DR_COUNT = 8,
 NET_DECNET_DST_GC_INTERVAL = 9,
 NET_DECNET_CONF = 10,
 NET_DECNET_NO_FC_MAX_CWND = 11,
 NET_DECNET_MEM = 12,
 NET_DECNET_RMEM = 13,
 NET_DECNET_WMEM = 14,
 NET_DECNET_DEBUG_LEVEL = 255
};
enum {
 NET_DECNET_CONF_LOOPBACK = -2,
 NET_DECNET_CONF_DDCMP = -3,
 NET_DECNET_CONF_PPP = -4,
 NET_DECNET_CONF_X25 = -5,
 NET_DECNET_CONF_GRE = -6,
 NET_DECNET_CONF_ETHER = -7
};
enum {
 NET_DECNET_CONF_DEV_PRIORITY = 1,
 NET_DECNET_CONF_DEV_T1 = 2,
 NET_DECNET_CONF_DEV_T2 = 3,
 NET_DECNET_CONF_DEV_T3 = 4,
 NET_DECNET_CONF_DEV_FORWARDING = 5,
 NET_DECNET_CONF_DEV_BLKSIZE = 6,
 NET_DECNET_CONF_DEV_STATE = 7
};
enum {
 NET_SCTP_RTO_INITIAL = 1,
 NET_SCTP_RTO_MIN = 2,
 NET_SCTP_RTO_MAX = 3,
 NET_SCTP_RTO_ALPHA = 4,
 NET_SCTP_RTO_BETA = 5,
 NET_SCTP_VALID_COOKIE_LIFE = 6,
 NET_SCTP_ASSOCIATION_MAX_RETRANS = 7,
 NET_SCTP_PATH_MAX_RETRANS = 8,
 NET_SCTP_MAX_INIT_RETRANSMITS = 9,
 NET_SCTP_HB_INTERVAL = 10,
 NET_SCTP_PRESERVE_ENABLE = 11,
 NET_SCTP_MAX_BURST = 12,
 NET_SCTP_ADDIP_ENABLE = 13,
 NET_SCTP_PRSCTP_ENABLE = 14,
 NET_SCTP_SNDBUF_POLICY = 15,
 NET_SCTP_SACK_TIMEOUT = 16,
 NET_SCTP_RCVBUF_POLICY = 17
};
enum {
 NET_BRIDGE_NF_CALL_ARPTABLES = 1,
 NET_BRIDGE_NF_CALL_IPTABLES = 2,
 NET_BRIDGE_NF_CALL_IP6TABLES = 3,
 NET_BRIDGE_NF_FILTER_VLAN_TAGGED = 4,
 NET_BRIDGE_NF_FILTER_PPPOE_TAGGED = 5
};
enum {
 NET_IRDA_DISCOVERY=1,
 NET_IRDA_DEVNAME=2,
 NET_IRDA_DEBUG=3,
 NET_IRDA_FAST_POLL=4,
 NET_IRDA_DISCOVERY_SLOTS=5,
 NET_IRDA_DISCOVERY_TIMEOUT=6,
 NET_IRDA_SLOT_TIMEOUT=7,
 NET_IRDA_MAX_BAUD_RATE=8,
 NET_IRDA_MIN_TX_TURN_TIME=9,
 NET_IRDA_MAX_TX_DATA_SIZE=10,
 NET_IRDA_MAX_TX_WINDOW=11,
 NET_IRDA_MAX_NOREPLY_TIME=12,
 NET_IRDA_WARN_NOREPLY_TIME=13,
 NET_IRDA_LAP_KEEPALIVE_TIME=14
};
enum
{
 FS_NRINODE=1,
 FS_STATINODE=2,
 FS_MAXINODE=3,
 FS_NRDQUOT=4,
 FS_MAXDQUOT=5,
 FS_NRFILE=6,
 FS_MAXFILE=7,
 FS_DENTRY=8,
 FS_NRSUPER=9,
 FS_MAXSUPER=10,
 FS_OVERFLOWUID=11,
 FS_OVERFLOWGID=12,
 FS_LEASES=13,
 FS_DIR_NOTIFY=14,
 FS_LEASE_TIME=15,
 FS_DQSTATS=16,
 FS_XFS=17,
 FS_AIO_NR=18,
 FS_AIO_MAX_NR=19,
 FS_INOTIFY=20,
 FS_OCFS2=988
};
enum {
 FS_DQ_LOOKUPS = 1,
 FS_DQ_DROPS = 2,
 FS_DQ_READS = 3,
 FS_DQ_WRITES = 4,
 FS_DQ_CACHE_HITS = 5,
 FS_DQ_ALLOCATED = 6,
 FS_DQ_FREE = 7,
 FS_DQ_SYNCS = 8,
 FS_DQ_WARNINGS = 9
};
enum {
 DEV_CDROM=1,
 DEV_HWMON=2,
 DEV_PARPORT=3,
 DEV_RAID=4,
 DEV_MAC_HID=5,
 DEV_SCSI=6,
 DEV_IPMI=7
};
enum {
 DEV_CDROM_INFO=1,
 DEV_CDROM_AUTOCLOSE=2,
 DEV_CDROM_AUTOEJECT=3,
 DEV_CDROM_DEBUG=4,
 DEV_CDROM_LOCK=5,
 DEV_CDROM_CHECK_MEDIA=6
};
enum {
 DEV_PARPORT_DEFAULT=-3
};
enum {
 DEV_RAID_SPEED_LIMIT_MIN=1,
 DEV_RAID_SPEED_LIMIT_MAX=2
};
enum {
 DEV_PARPORT_DEFAULT_TIMESLICE=1,
 DEV_PARPORT_DEFAULT_SPINTIME=2
};
enum {
 DEV_PARPORT_SPINTIME=1,
 DEV_PARPORT_BASE_ADDR=2,
 DEV_PARPORT_IRQ=3,
 DEV_PARPORT_DMA=4,
 DEV_PARPORT_MODES=5,
 DEV_PARPORT_DEVICES=6,
 DEV_PARPORT_AUTOPROBE=16
};
enum {
 DEV_PARPORT_DEVICES_ACTIVE=-3
};
enum {
 DEV_PARPORT_DEVICE_TIMESLICE=1
};
enum {
 DEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES=1,
 DEV_MAC_HID_KEYBOARD_LOCK_KEYCODES=2,
 DEV_MAC_HID_MOUSE_BUTTON_EMULATION=3,
 DEV_MAC_HID_MOUSE_BUTTON2_KEYCODE=4,
 DEV_MAC_HID_MOUSE_BUTTON3_KEYCODE=5,
 DEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES=6
};
enum {
 DEV_SCSI_LOGGING_LEVEL=1
};
enum {
 DEV_IPMI_POWEROFF_POWERCYCLE=1
};
enum
{
 ABI_DEFHANDLER_COFF=1,
 ABI_DEFHANDLER_ELF=2,
 ABI_DEFHANDLER_LCALL7=3,
 ABI_DEFHANDLER_LIBCSO=4,
 ABI_TRACE=5,
 ABI_FAKE_UTSNAME=6
};
extern int sysctl (int *__name, int __nlen, void *__oldval,
     size_t *__oldlenp, void *__newval, size_t __newlen) ;
double
physmem_total ()
{
  {
    double pages = sysconf (_SC_PHYS_PAGES);
    double pagesize = sysconf (_SC_PAGESIZE);
    if (0 <= pages && 0 <= pagesize)
      return pages * pagesize;
  }
  return 0;
}
double
physmem_available ()
{
  {
    double pages = sysconf (_SC_AVPHYS_PAGES);
    double pagesize = sysconf (_SC_PAGESIZE);
    if (0 <= pages && 0 <= pagesize)
      return pages * pagesize;
  }
  return physmem_total () / 4;
}
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
extern __pid_t wait (void * __stat_loc);
extern __pid_t waitpid (__pid_t __pid, int *__stat_loc, int __options);
extern int waitid (idtype_t __idtype, __id_t __id, siginfo_t *__infop,
     int __options);
struct rusage;
extern __pid_t wait3 (void * __stat_loc, int __options,
        struct rusage * __usage) ;
extern __pid_t wait4 (__pid_t __pid, void * __stat_loc, int __options,
        struct rusage *__usage) ;
int
pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg,
   flagsarg)
     const char *program;
     char * const *argv;
     const char *this_pname;
     const char *temp_base ;
     char **errmsg_fmt, **errmsg_arg;
     int flagsarg;
{
  int pid;
  int pdes[2];
  int out;
  int input_desc, output_desc;
  int flags;
  volatile int retries, sleep_interval;
  static int last_pipe_input;
  flags = flagsarg;
  if (flags & 1)
    last_pipe_input = 0;
  input_desc = last_pipe_input;
  if (! (flags & 2))
    {
      if (pipe (pdes) < 0)
 {
   *errmsg_fmt = "pipe";
   *errmsg_arg = ((void *)0);
   return -1;
 }
      out = pdes[1];
      last_pipe_input = pdes[0];
    }
  else
    {
      out = 1;
      last_pipe_input = 0;
    }
  output_desc = out;
  sleep_interval = 1;
  pid = -1;
  for (retries = 0; retries < 4; retries++)
    {
      pid = vfork ();
      if (pid >= 0)
 break;
      sleep (sleep_interval);
      sleep_interval *= 2;
    }
  switch (pid)
    {
    case -1:
      *errmsg_fmt = "fork";
      *errmsg_arg = ((void *)0);
      return -1;
    case 0:
      if (input_desc != 0)
 {
   close (0);
   dup (input_desc);
   close (input_desc);
 }
      if (output_desc != 1)
 {
   close (1);
   dup (output_desc);
   close (output_desc);
 }
      if (last_pipe_input != 0)
 close (last_pipe_input);
      if (flags & 4)
 execvp (program, argv);
      else
 execv (program, argv);
      write (2, this_pname, strlen (this_pname));
      write (2, ": ", strlen (": "));
      write (2, "installation problem, cannot exec '", strlen ("installation problem, cannot exec '"));
      write (2, program, strlen (program));
      write (2, "': ", strlen ("': "));
      write (2, xstrerror ((*__errno_location ())), strlen (xstrerror ((*__errno_location ()))));
      write (2, "\n", strlen ("\n"));
      _exit (-1);
      return 0;
    default:
      if (input_desc != 0)
 close (input_desc);
      if (output_desc != 1)
 close (output_desc);
      return pid;
    }
}
int
pwait (pid, status, flags)
     int pid;
     int *status;
     int flags ;
{
  pid = waitpid (pid, status, 0);
  return pid;
}
const unsigned short _sch_istable[256] =
{
  (const unsigned short) (_sch_isnvsp |_sch_iscntrl), (const unsigned short) ( _sch_iscntrl), (const unsigned short) ( _sch_iscntrl), (const unsigned short) ( _sch_iscntrl), (const unsigned short) ( _sch_iscntrl), (const unsigned short) ( _sch_iscntrl), (const unsigned short) ( _sch_iscntrl), (const unsigned short) ( _sch_iscntrl),
  (const unsigned short) ( _sch_iscntrl), (const unsigned short) (_sch_isnvsp|_sch_isspace|_sch_isblank|_sch_iscntrl), (const unsigned short) (_sch_isvsp|_sch_isspace |_sch_iscntrl), (const unsigned short) (_sch_isnvsp|_sch_isspace |_sch_iscntrl), (const unsigned short) (_sch_isnvsp|_sch_isspace |_sch_iscntrl), (const unsigned short) (_sch_isvsp|_sch_isspace |_sch_iscntrl), (const unsigned short) ( _sch_iscntrl), (const unsigned short) ( _sch_iscntrl),
  (const unsigned short) ( _sch_iscntrl), (const unsigned short) ( _sch_iscntrl), (const unsigned short) ( _sch_iscntrl), (const unsigned short) ( _sch_iscntrl), (const unsigned short) ( _sch_iscntrl), (const unsigned short) ( _sch_iscntrl), (const unsigned short) ( _sch_iscntrl), (const unsigned short) ( _sch_iscntrl),
  (const unsigned short) ( _sch_iscntrl), (const unsigned short) ( _sch_iscntrl), (const unsigned short) ( _sch_iscntrl), (const unsigned short) ( _sch_iscntrl), (const unsigned short) ( _sch_iscntrl), (const unsigned short) ( _sch_iscntrl), (const unsigned short) ( _sch_iscntrl), (const unsigned short) ( _sch_iscntrl),
  (const unsigned short) (_sch_isnvsp|_sch_isspace|_sch_isblank|_sch_isprint), (const unsigned short) (_sch_ispunct |_sch_isprint), (const unsigned short) (_sch_ispunct |_sch_isprint), (const unsigned short) (_sch_ispunct |_sch_isprint), (const unsigned short) (_sch_ispunct |_sch_isprint), (const unsigned short) (_sch_ispunct |_sch_isprint), (const unsigned short) (_sch_ispunct |_sch_isprint), (const unsigned short) (_sch_ispunct |_sch_isprint),
  (const unsigned short) (_sch_ispunct |_sch_isprint), (const unsigned short) (_sch_ispunct |_sch_isprint), (const unsigned short) (_sch_ispunct |_sch_isprint), (const unsigned short) (_sch_ispunct |_sch_isprint), (const unsigned short) (_sch_ispunct |_sch_isprint), (const unsigned short) (_sch_ispunct |_sch_isprint), (const unsigned short) (_sch_ispunct |_sch_isprint), (const unsigned short) (_sch_ispunct |_sch_isprint),
  (const unsigned short) (_sch_isdigit |_sch_isxdigit|_sch_isprint), (const unsigned short) (_sch_isdigit |_sch_isxdigit|_sch_isprint), (const unsigned short) (_sch_isdigit |_sch_isxdigit|_sch_isprint), (const unsigned short) (_sch_isdigit |_sch_isxdigit|_sch_isprint), (const unsigned short) (_sch_isdigit |_sch_isxdigit|_sch_isprint), (const unsigned short) (_sch_isdigit |_sch_isxdigit|_sch_isprint), (const unsigned short) (_sch_isdigit |_sch_isxdigit|_sch_isprint), (const unsigned short) (_sch_isdigit |_sch_isxdigit|_sch_isprint),
  (const unsigned short) (_sch_isdigit |_sch_isxdigit|_sch_isprint), (const unsigned short) (_sch_isdigit |_sch_isxdigit|_sch_isprint), (const unsigned short) (_sch_ispunct |_sch_isprint), (const unsigned short) (_sch_ispunct |_sch_isprint), (const unsigned short) (_sch_ispunct |_sch_isprint), (const unsigned short) (_sch_ispunct |_sch_isprint), (const unsigned short) (_sch_ispunct |_sch_isprint), (const unsigned short) (_sch_ispunct |_sch_isprint),
  (const unsigned short) (_sch_ispunct |_sch_isprint), (const unsigned short) (_sch_isupper|_sch_isidst|_sch_isxdigit|_sch_isprint), (const unsigned short) (_sch_isupper|_sch_isidst|_sch_isxdigit|_sch_isprint), (const unsigned short) (_sch_isupper|_sch_isidst|_sch_isxdigit|_sch_isprint), (const unsigned short) (_sch_isupper|_sch_isidst|_sch_isxdigit|_sch_isprint), (const unsigned short) (_sch_isupper|_sch_isidst|_sch_isxdigit|_sch_isprint), (const unsigned short) (_sch_isupper|_sch_isidst|_sch_isxdigit|_sch_isprint), (const unsigned short) (_sch_isupper|_sch_isidst |_sch_isprint),
  (const unsigned short) (_sch_isupper|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_isupper|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_isupper|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_isupper|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_isupper|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_isupper|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_isupper|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_isupper|_sch_isidst |_sch_isprint),
  (const unsigned short) (_sch_isupper|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_isupper|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_isupper|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_isupper|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_isupper|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_isupper|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_isupper|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_isupper|_sch_isidst |_sch_isprint),
  (const unsigned short) (_sch_isupper|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_isupper|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_isupper|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_ispunct |_sch_isprint), (const unsigned short) (_sch_ispunct |_sch_isprint), (const unsigned short) (_sch_ispunct |_sch_isprint), (const unsigned short) (_sch_ispunct |_sch_isprint), (const unsigned short) (_sch_ispunct|_sch_isidst |_sch_isprint),
  (const unsigned short) (_sch_ispunct |_sch_isprint), (const unsigned short) (_sch_islower|_sch_isidst|_sch_isxdigit|_sch_isprint), (const unsigned short) (_sch_islower|_sch_isidst|_sch_isxdigit|_sch_isprint), (const unsigned short) (_sch_islower|_sch_isidst|_sch_isxdigit|_sch_isprint), (const unsigned short) (_sch_islower|_sch_isidst|_sch_isxdigit|_sch_isprint), (const unsigned short) (_sch_islower|_sch_isidst|_sch_isxdigit|_sch_isprint), (const unsigned short) (_sch_islower|_sch_isidst|_sch_isxdigit|_sch_isprint), (const unsigned short) (_sch_islower|_sch_isidst |_sch_isprint),
  (const unsigned short) (_sch_islower|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_islower|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_islower|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_islower|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_islower|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_islower|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_islower|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_islower|_sch_isidst |_sch_isprint),
  (const unsigned short) (_sch_islower|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_islower|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_islower|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_islower|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_islower|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_islower|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_islower|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_islower|_sch_isidst |_sch_isprint),
  (const unsigned short) (_sch_islower|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_islower|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_islower|_sch_isidst |_sch_isprint), (const unsigned short) (_sch_ispunct |_sch_isprint), (const unsigned short) (_sch_ispunct |_sch_isprint), (const unsigned short) (_sch_ispunct |_sch_isprint), (const unsigned short) (_sch_ispunct |_sch_isprint), (const unsigned short) ( _sch_iscntrl),
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
const unsigned char _sch_tolower[256] =
{
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
  64,
  'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
  'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
  91, 92, 93, 94, 95, 96,
  'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
  'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
 123,124,125,126,127,
 128,129,130,131, 132,133,134,135, 136,137,138,139, 140,141,142,143,
 144,145,146,147, 148,149,150,151, 152,153,154,155, 156,157,158,159,
 160,161,162,163, 164,165,166,167, 168,169,170,171, 172,173,174,175,
 176,177,178,179, 180,181,182,183, 184,185,186,187, 188,189,190,191,
 192,193,194,195, 196,197,198,199, 200,201,202,203, 204,205,206,207,
 208,209,210,211, 212,213,214,215, 216,217,218,219, 220,221,222,223,
 224,225,226,227, 228,229,230,231, 232,233,234,235, 236,237,238,239,
 240,241,242,243, 244,245,246,247, 248,249,250,251, 252,253,254,255
};
const unsigned char _sch_toupper[256] =
{
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
  64,
  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
  'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
  91, 92, 93, 94, 95, 96,
  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
  'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
 123,124,125,126,127,
 128,129,130,131, 132,133,134,135, 136,137,138,139, 140,141,142,143,
 144,145,146,147, 148,149,150,151, 152,153,154,155, 156,157,158,159,
 160,161,162,163, 164,165,166,167, 168,169,170,171, 172,173,174,175,
 176,177,178,179, 180,181,182,183, 184,185,186,187, 188,189,190,191,
 192,193,194,195, 196,197,198,199, 200,201,202,203, 204,205,206,207,
 208,209,210,211, 212,213,214,215, 216,217,218,219, 220,221,222,223,
 224,225,226,227, 228,229,230,231, 232,233,234,235, 236,237,238,239,
 240,241,242,243, 244,245,246,247, 248,249,250,251, 252,253,254,255
};
extern void sort_pointers (size_t, void **, void **);
void sort_pointers (n, pointers, work)
     size_t n;
     void **pointers;
     void **work;
{
  unsigned int count[((127 * 2 + 1) + 1)];
  int big_endian_p;
  size_t i;
  size_t j;
  if ((sizeof (void *) / sizeof (char)) % 2 != 0)
    abort ();
  for (i = 0, j = 0; i < sizeof (size_t); ++i)
    {
      j *= ((127 * 2 + 1) + 1);
      j += i;
    }
  big_endian_p = (((char *)&j)[0] == 0);
  for (i = 0; i < sizeof (void *) / sizeof (char); ++i)
    {
      char *digit;
      char *bias;
      char *top;
      unsigned int *countp;
      void **pointerp;
      if (big_endian_p)
 j = sizeof (void *) / sizeof (char) - i;
      else
 j = i;
      memset (count, 0, ((127 * 2 + 1) + 1) * sizeof (unsigned int));
      bias = ((char *) pointers) + j;
      top = ((char *) (pointers + n)) + j;
      for (digit = bias;
    digit < top;
    digit += sizeof (void *) / sizeof (char))
 ++count[*digit];
      for (countp = count + 1; countp < count + ((127 * 2 + 1) + 1); ++countp)
 *countp += countp[-1];
      for (pointerp = pointers + n - 1; pointerp >= pointers; --pointerp)
 work[--count[((char *) pointerp)[j]]] = *pointerp;
      pointerp = pointers;
      pointers = work;
      work = pointerp;
    }
}
extern void * malloc (size_t);
extern void free (void *);
const char *
spaces (count)
  int count;
{
  register char *t;
  static char *buf;
  static int maxsize;
  if (count > maxsize)
    {
      if (buf)
 {
   free (buf);
 }
      buf = malloc (count + 1);
      if (buf == (char *) 0)
 return 0;
      for (t = buf + count ; t != buf ; )
 {
   *--t = ' ';
 }
      maxsize = count;
      buf[count] = '\0';
    }
  return (const char *) (buf + maxsize - count);
}
typedef unsigned long int splay_tree_key;
typedef unsigned long int splay_tree_value;
typedef struct splay_tree_node_s *splay_tree_node;
typedef int (*splay_tree_compare_fn) (splay_tree_key, splay_tree_key);
typedef void (*splay_tree_delete_key_fn) (splay_tree_key);
typedef void (*splay_tree_delete_value_fn) (splay_tree_value);
typedef int (*splay_tree_foreach_fn) (splay_tree_node, void*);
typedef void * (*splay_tree_allocate_fn) (int, void *);
typedef void (*splay_tree_deallocate_fn) (void *, void *);
struct splay_tree_node_s
{
  splay_tree_key key;
  splay_tree_value value;
  splay_tree_node left;
  splay_tree_node right;
};
struct splay_tree_s
{
  splay_tree_node root;
  splay_tree_compare_fn comp;
  splay_tree_delete_key_fn delete_key;
  splay_tree_delete_value_fn delete_value;
  splay_tree_allocate_fn allocate;
  splay_tree_deallocate_fn deallocate;
  void * allocate_data;
};
typedef struct splay_tree_s *splay_tree;
extern splay_tree splay_tree_new (splay_tree_compare_fn, splay_tree_delete_key_fn, splay_tree_delete_value_fn)
                                         ;
extern splay_tree splay_tree_new_with_allocator
                                        (splay_tree_compare_fn, splay_tree_delete_key_fn, splay_tree_delete_value_fn, splay_tree_allocate_fn, splay_tree_deallocate_fn, void *)
                                                        ;
extern void splay_tree_delete (splay_tree);
extern splay_tree_node splay_tree_insert
                          (splay_tree, splay_tree_key, splay_tree_value)
                               ;
extern void splay_tree_remove (splay_tree, splay_tree_key)
                      ;
extern splay_tree_node splay_tree_lookup
                                        (splay_tree, splay_tree_key)
                             ;
extern splay_tree_node splay_tree_predecessor
                                        (splay_tree, splay_tree_key)
                      ;
extern splay_tree_node splay_tree_successor
                                        (splay_tree, splay_tree_key)
                      ;
extern splay_tree_node splay_tree_max
                                        (splay_tree);
extern splay_tree_node splay_tree_min
                                        (splay_tree);
extern int splay_tree_foreach (splay_tree, splay_tree_foreach_fn, void*)
                    ;
extern int splay_tree_compare_ints (splay_tree_key, splay_tree_key)
                      ;
extern int splay_tree_compare_pointers (splay_tree_key, splay_tree_key)
                      ;
static void splay_tree_delete_helper (splay_tree, splay_tree_node)
                       ;
static void splay_tree_splay (splay_tree, splay_tree_key)
                      ;
static splay_tree_node splay_tree_splay_helper
                                        (splay_tree, splay_tree_key, splay_tree_node*, splay_tree_node*, splay_tree_node*)
                        ;
static int splay_tree_foreach_helper (splay_tree, splay_tree_node, splay_tree_foreach_fn, void*)
             ;
static void
splay_tree_delete_helper (sp, node)
     splay_tree sp;
     splay_tree_node node;
{
  if (!node)
    return;
  splay_tree_delete_helper (sp, node->left);
  splay_tree_delete_helper (sp, node->right);
  if (sp->delete_key)
    (*sp->delete_key)(node->key);
  if (sp->delete_value)
    (*sp->delete_value)(node->value);
  (*sp->deallocate) ((char*) node, sp->allocate_data);
}
static splay_tree_node
splay_tree_splay_helper (sp, key, node, parent, grandparent)
     splay_tree sp;
     splay_tree_key key;
     splay_tree_node *node;
     splay_tree_node *parent;
     splay_tree_node *grandparent;
{
  splay_tree_node *next;
  splay_tree_node n;
  int comparison;
  n = *node;
  if (!n)
    return *parent;
  comparison = (*sp->comp) (key, n->key);
  if (comparison == 0)
    next = 0;
  else if (comparison < 0)
    next = &n->left;
  else
    next = &n->right;
  if (next)
    {
      n = splay_tree_splay_helper (sp, key, next, node, parent);
      if (*node != n)
 return n;
    }
  if (!parent)
    return n;
  if (!grandparent)
    {
      if (n == (*parent)->left)
 {
   *node = n->right;
   n->right = *parent;
 }
      else
 {
   *node = n->left;
   n->left = *parent;
 }
      *parent = n;
      return n;
    }
  if (n == (*parent)->left && *parent == (*grandparent)->left)
    {
      splay_tree_node p = *parent;
      (*grandparent)->left = p->right;
      p->right = *grandparent;
      p->left = n->right;
      n->right = p;
      *grandparent = n;
      return n;
    }
  else if (n == (*parent)->right && *parent == (*grandparent)->right)
    {
      splay_tree_node p = *parent;
      (*grandparent)->right = p->left;
      p->left = *grandparent;
      p->right = n->left;
      n->left = p;
      *grandparent = n;
      return n;
    }
  if (n == (*parent)->left)
    {
      (*parent)->left = n->right;
      n->right = *parent;
      (*grandparent)->right = n->left;
      n->left = *grandparent;
      *grandparent = n;
      return n;
    }
  else
    {
      (*parent)->right = n->left;
      n->left = *parent;
      (*grandparent)->left = n->right;
      n->right = *grandparent;
      *grandparent = n;
      return n;
    }
}
static void
splay_tree_splay (sp, key)
     splay_tree sp;
     splay_tree_key key;
{
  if (sp->root == 0)
    return;
  splay_tree_splay_helper (sp, key, &sp->root,
                      0, 0);
}
static int
splay_tree_foreach_helper (sp, node, fn, data)
     splay_tree sp;
     splay_tree_node node;
     splay_tree_foreach_fn fn;
     void* data;
{
  int val;
  if (!node)
    return 0;
  val = splay_tree_foreach_helper (sp, node->left, fn, data);
  if (val)
    return val;
  val = (*fn)(node, data);
  if (val)
    return val;
  return splay_tree_foreach_helper (sp, node->right, fn, data);
}
static void *
splay_tree_xmalloc_allocate (size, data)
     int size;
     void *data ;
{
  return (void *) xmalloc (size);
}
static void
splay_tree_xmalloc_deallocate (object, data)
     void *object;
     void *data ;
{
  free (object);
}
splay_tree
splay_tree_new (compare_fn, delete_key_fn, delete_value_fn)
     splay_tree_compare_fn compare_fn;
     splay_tree_delete_key_fn delete_key_fn;
     splay_tree_delete_value_fn delete_value_fn;
{
  return (splay_tree_new_with_allocator
          (compare_fn, delete_key_fn, delete_value_fn,
           splay_tree_xmalloc_allocate, splay_tree_xmalloc_deallocate, 0));
}
splay_tree
splay_tree_new_with_allocator (compare_fn, delete_key_fn, delete_value_fn,
                               allocate_fn, deallocate_fn, allocate_data)
     splay_tree_compare_fn compare_fn;
     splay_tree_delete_key_fn delete_key_fn;
     splay_tree_delete_value_fn delete_value_fn;
     splay_tree_allocate_fn allocate_fn;
     splay_tree_deallocate_fn deallocate_fn;
     void *allocate_data;
{
  splay_tree sp = (splay_tree) (*allocate_fn) (sizeof (struct splay_tree_s),
                                               allocate_data);
  sp->root = 0;
  sp->comp = compare_fn;
  sp->delete_key = delete_key_fn;
  sp->delete_value = delete_value_fn;
  sp->allocate = allocate_fn;
  sp->deallocate = deallocate_fn;
  sp->allocate_data = allocate_data;
  return sp;
}
void
splay_tree_delete (sp)
     splay_tree sp;
{
  splay_tree_delete_helper (sp, sp->root);
  (*sp->deallocate) ((char*) sp, sp->allocate_data);
}
splay_tree_node
splay_tree_insert (sp, key, value)
     splay_tree sp;
     splay_tree_key key;
     splay_tree_value value;
{
  int comparison = 0;
  splay_tree_splay (sp, key);
  if (sp->root)
    comparison = (*sp->comp)(sp->root->key, key);
  if (sp->root && comparison == 0)
    {
      if (sp->delete_value)
 (*sp->delete_value)(sp->root->value);
      sp->root->value = value;
    }
  else
    {
      splay_tree_node node;
      node = ((splay_tree_node)
              (*sp->allocate) (sizeof (struct splay_tree_node_s),
                               sp->allocate_data));
      node->key = key;
      node->value = value;
      if (!sp->root)
 node->left = node->right = 0;
      else if (comparison < 0)
 {
   node->left = sp->root;
   node->right = node->left->right;
   node->left->right = 0;
 }
      else
 {
   node->right = sp->root;
   node->left = node->right->left;
   node->right->left = 0;
 }
      sp->root = node;
    }
  return sp->root;
}
void
splay_tree_remove (sp, key)
     splay_tree sp;
     splay_tree_key key;
{
  splay_tree_splay (sp, key);
  if (sp->root && (*sp->comp) (sp->root->key, key) == 0)
    {
      splay_tree_node left, right;
      left = sp->root->left;
      right = sp->root->right;
      if (sp->delete_value)
 (*sp->delete_value) (sp->root->value);
      (*sp->deallocate) (sp->root, sp->allocate_data);
      if (left)
 {
   sp->root = left;
   if (right)
     {
       while (left->right)
  left = left->right;
       left->right = right;
     }
 }
      else
 sp->root = right;
    }
}
splay_tree_node
splay_tree_lookup (sp, key)
     splay_tree sp;
     splay_tree_key key;
{
  splay_tree_splay (sp, key);
  if (sp->root && (*sp->comp)(sp->root->key, key) == 0)
    return sp->root;
  else
    return 0;
}
splay_tree_node
splay_tree_max (sp)
     splay_tree sp;
{
  splay_tree_node n = sp->root;
  if (!n)
    return ((void *)0);
  while (n->right)
    n = n->right;
  return n;
}
splay_tree_node
splay_tree_min (sp)
     splay_tree sp;
{
  splay_tree_node n = sp->root;
  if (!n)
    return ((void *)0);
  while (n->left)
    n = n->left;
  return n;
}
splay_tree_node
splay_tree_predecessor (sp, key)
     splay_tree sp;
     splay_tree_key key;
{
  int comparison;
  splay_tree_node node;
  if (!sp->root)
    return ((void *)0);
  splay_tree_splay (sp, key);
  comparison = (*sp->comp)(sp->root->key, key);
  if (comparison < 0)
    return sp->root;
  node = sp->root->left;
  if (node)
    while (node->right)
      node = node->right;
  return node;
}
splay_tree_node
splay_tree_successor (sp, key)
     splay_tree sp;
     splay_tree_key key;
{
  int comparison;
  splay_tree_node node;
  if (!sp->root)
    return ((void *)0);
  splay_tree_splay (sp, key);
  comparison = (*sp->comp)(sp->root->key, key);
  if (comparison > 0)
    return sp->root;
  node = sp->root->right;
  if (node)
    while (node->left)
      node = node->left;
  return node;
}
int
splay_tree_foreach (sp, fn, data)
     splay_tree sp;
     splay_tree_foreach_fn fn;
     void *data;
{
  return splay_tree_foreach_helper (sp, sp->root, fn, data);
}
int
splay_tree_compare_ints (k1, k2)
     splay_tree_key k1;
     splay_tree_key k2;
{
  if ((int) k1 < (int) k2)
    return -1;
  else if ((int) k1 > (int) k2)
    return 1;
  else
    return 0;
}
int
splay_tree_compare_pointers (k1, k2)
     splay_tree_key k1;
     splay_tree_key k2;
{
  if ((char*) k1 < (char*) k2)
    return -1;
  else if ((char*) k1 > (char*) k2)
    return 1;
  else
    return 0;
}
static void init_error_tables (void);
struct error_info
{
  const int value1;
  const char *const name;
};
static const struct error_info error_table[] =
{
  {1, "EPERM"},
  {2, "ENOENT"},
  {3, "ESRCH"},
  {4, "EINTR"},
  {5, "EIO"},
  {6, "ENXIO"},
  {7, "E2BIG"},
  {8, "ENOEXEC"},
  {9, "EBADF"},
  {10, "ECHILD"},
  {11, "EWOULDBLOCK"},
  {11, "EAGAIN"},
  {12, "ENOMEM"},
  {13, "EACCES"},
  {14, "EFAULT"},
  {15, "ENOTBLK"},
  {16, "EBUSY"},
  {17, "EEXIST"},
  {18, "EXDEV"},
  {19, "ENODEV"},
  {20, "ENOTDIR"},
  {21, "EISDIR"},
  {22, "EINVAL"},
  {23, "ENFILE"},
  {24, "EMFILE"},
  {25, "ENOTTY"},
  {26, "ETXTBSY"},
  {27, "EFBIG"},
  {28, "ENOSPC"},
  {29, "ESPIPE"},
  {30, "EROFS"},
  {31, "EMLINK"},
  {32, "EPIPE"},
  {33, "EDOM"},
  {34, "ERANGE"},
  {42, "ENOMSG"},
  {43, "EIDRM"},
  {44, "ECHRNG"},
  {45, "EL2NSYNC"},
  {46, "EL3HLT"},
  {47, "EL3RST"},
  {48, "ELNRNG"},
  {49, "EUNATCH"},
  {50, "ENOCSI"},
  {51, "EL2HLT"},
  {35, "EDEADLK"},
  {37, "ENOLCK"},
  {52, "EBADE"},
  {53, "EBADR"},
  {54, "EXFULL"},
  {55, "ENOANO"},
  {56, "EBADRQC"},
  {57, "EBADSLT"},
  {35, "EDEADLOCK"},
  {59, "EBFONT"},
  {60, "ENOSTR"},
  {61, "ENODATA"},
  {62, "ETIME"},
  {63, "ENOSR"},
  {64, "ENONET"},
  {65, "ENOPKG"},
  {66, "EREMOTE"},
  {67, "ENOLINK"},
  {68, "EADV"},
  {69, "ESRMNT"},
  {70, "ECOMM"},
  {71, "EPROTO"},
  {72, "EMULTIHOP"},
  {73, "EDOTDOT"},
  {74, "EBADMSG"},
  {36, "ENAMETOOLONG"},
  {75, "EOVERFLOW"},
  {76, "ENOTUNIQ"},
  {77, "EBADFD"},
  {78, "EREMCHG"},
  {79, "ELIBACC"},
  {80, "ELIBBAD"},
  {81, "ELIBSCN"},
  {82, "ELIBMAX"},
  {83, "ELIBEXEC"},
  {84, "EILSEQ"},
  {38, "ENOSYS"},
  {40, "ELOOP"},
  {85, "ERESTART"},
  {86, "ESTRPIPE"},
  {39, "ENOTEMPTY"},
  {87, "EUSERS"},
  {88, "ENOTSOCK"},
  {89, "EDESTADDRREQ"},
  {90, "EMSGSIZE"},
  {91, "EPROTOTYPE"},
  {92, "ENOPROTOOPT"},
  {93, "EPROTONOSUPPORT"},
  {94, "ESOCKTNOSUPPORT"},
  {95, "EOPNOTSUPP"},
  {96, "EPFNOSUPPORT"},
  {97, "EAFNOSUPPORT"},
  {98, "EADDRINUSE"},
  {99, "EADDRNOTAVAIL"},
  {100, "ENETDOWN"},
  {101, "ENETUNREACH"},
  {102, "ENETRESET"},
  {103, "ECONNABORTED"},
  {104, "ECONNRESET"},
  {105, "ENOBUFS"},
  {106, "EISCONN"},
  {107, "ENOTCONN"},
  {108, "ESHUTDOWN"},
  {109, "ETOOMANYREFS"},
  {110, "ETIMEDOUT"},
  {111, "ECONNREFUSED"},
  {112, "EHOSTDOWN"},
  {113, "EHOSTUNREACH"},
  {114, "EALREADY"},
  {115, "EINPROGRESS"},
  {116, "ESTALE"},
  {117, "EUCLEAN"},
  {118, "ENOTNAM"},
  {119, "ENAVAIL"},
  {120, "EISNAM"},
  {121, "EREMOTEIO"},
  {0, ((void *)0)}
};
static const char **error_names;
static int num_error_names = 0;
extern int sys_nerr;
extern const char * const sys_errlist[];
static void
init_error_tables ()
{
  const struct error_info *eip;
  int nbytes;
  if (num_error_names == 0)
    {
      for (eip = error_table; eip -> name != ((void *)0); eip++)
 {
   if (eip -> value >= num_error_names)
     {
       num_error_names = eip -> value + 1;
     }
 }
    }
  if (error_names == ((void *)0))
    {
      nbytes = num_error_names * sizeof (char *);
      if ((error_names = (const char **) malloc (nbytes)) != ((void *)0))
 {
   memset (error_names, 0, nbytes);
   for (eip = error_table; eip -> name != ((void *)0); eip++)
     {
       error_names[eip -> value] = eip -> name;
     }
 }
    }
}
int
errno_max ()
{
  int maxsize;
  if (error_names == ((void *)0))
    {
      init_error_tables ();
    }
  maxsize = (((sys_nerr)>(num_error_names))?(sys_nerr):(num_error_names));
  return (maxsize - 1);
}
const char *
strerrno (errnoval)
  int errnoval;
{
  const char *name;
  static char buf[32];
  if (error_names == ((void *)0))
    {
      init_error_tables ();
    }
  if ((errnoval < 0) || (errnoval >= num_error_names))
    {
      name = ((void *)0);
    }
  else if ((error_names == ((void *)0)) || (error_names[errnoval] == ((void *)0)))
    {
      sprintf (buf, "Error %d", errnoval);
      name = (const char *) buf;
    }
  else
    {
      name = error_names[errnoval];
    }
  return (name);
}
int
strtoerrno (name)
     const char *name;
{
  int errnoval = 0;
  if (name != ((void *)0))
    {
      if (error_names == ((void *)0))
 {
   init_error_tables ();
 }
      for (errnoval = 0; errnoval < num_error_names; errnoval++)
 {
   if ((error_names[errnoval] != ((void *)0)) &&
       (strcmp (name, error_names[errnoval]) == 0))
     {
       break;
     }
 }
      if (errnoval == num_error_names)
 {
   errnoval = 0;
 }
    }
  return (errnoval);
}
static void init_signal_tables (void);
struct signal_info
{
  const int value1;
  const char *const name;
};
static const struct signal_info signal_table[] =
{
  {1, "SIGHUP"},
  {2, "SIGINT"},
  {3, "SIGQUIT"},
  {4, "SIGILL"},
  {5, "SIGTRAP"},
  {6, "SIGIOT"},
  {6, "SIGABRT"},
  {8, "SIGFPE"},
  {9, "SIGKILL"},
  {7, "SIGBUS"},
  {11, "SIGSEGV"},
  {31, "SIGSYS"},
  {13, "SIGPIPE"},
  {14, "SIGALRM"},
  {15, "SIGTERM"},
  {10, "SIGUSR1"},
  {12, "SIGUSR2"},
  {17, "SIGCLD"},
  {17, "SIGCHLD"},
  {30, "SIGPWR"},
  {28, "SIGWINCH"},
  {23, "SIGURG"},
  {29, "SIGIO"},
  {29, "SIGPOLL"},
  {19, "SIGSTOP"},
  {20, "SIGTSTP"},
  {18, "SIGCONT"},
  {21, "SIGTTIN"},
  {22, "SIGTTOU"},
  {26, "SIGVTALRM"},
  {27, "SIGPROF"},
  {24, "SIGXCPU"},
  {25, "SIGXFSZ"},
  {0, ((void *)0)}
};
static const char **signal_names;
static int num_signal_names = 0;
static int sys_nsig = 65;
extern const char * const sys_siglist[];
static void
init_signal_tables ()
{
  const struct signal_info *eip;
  int nbytes;
  if (num_signal_names == 0)
    {
      for (eip = signal_table; eip -> name != ((void *)0); eip++)
 {
   if (eip -> value >= num_signal_names)
     {
       num_signal_names = eip -> value + 1;
     }
 }
    }
  if (signal_names == ((void *)0))
    {
      nbytes = num_signal_names * sizeof (char *);
      if ((signal_names = (const char **) malloc (nbytes)) != ((void *)0))
 {
   memset (signal_names, 0, nbytes);
   for (eip = signal_table; eip -> name != ((void *)0); eip++)
     {
       signal_names[eip -> value] = eip -> name;
     }
 }
    }
}
int
signo_max ()
{
  int maxsize;
  if (signal_names == ((void *)0))
    {
      init_signal_tables ();
    }
  maxsize = (((sys_nsig)>(num_signal_names))?(sys_nsig):(num_signal_names));
  return (maxsize - 1);
}
const char *
strsigno (signo)
  int signo;
{
  const char *name;
  static char buf[32];
  if (signal_names == ((void *)0))
    {
      init_signal_tables ();
    }
  if ((signo < 0) || (signo >= num_signal_names))
    {
      name = ((void *)0);
    }
  else if ((signal_names == ((void *)0)) || (signal_names[signo] == ((void *)0)))
    {
      sprintf (buf, "Signal %d", signo);
      name = (const char *) buf;
    }
  else
    {
      name = signal_names[signo];
    }
  return (name);
}
int
strtosigno (name)
     const char *name;
{
  int signo = 0;
  if (name != ((void *)0))
    {
      if (signal_names == ((void *)0))
 {
   init_signal_tables ();
 }
      for (signo = 0; signo < num_signal_names; signo++)
 {
   if ((signal_names[signo] != ((void *)0)) &&
       (strcmp (name, signal_names[signo]) == 0))
     {
       break;
     }
 }
      if (signo == num_signal_names)
 {
   signo = 0;
 }
    }
  return (signo);
}
typedef struct ternary_node_def *ternary_tree;
typedef struct ternary_node_def
{
  char splitchar;
  ternary_tree lokid;
  ternary_tree eqkid;
  ternary_tree hikid;
}
ternary_node;
void * ternary_insert (ternary_tree *p, const char *s, void * data, int replace)
                              ;
void ternary_cleanup (ternary_tree p);
void * ternary_search (const ternary_node *p, const char *s);
void *
ternary_insert (root, s, data, replace)
     ternary_tree *root;
     const char *s;
     void * data;
     int replace;
{
  int diff;
  ternary_tree curr, *pcurr;
  pcurr = root;
  while ((curr = *pcurr))
    {
      diff = *s - curr->splitchar;
      if (diff == 0)
 {
   if (*s++ == 0)
     {
       if (replace)
  curr->eqkid = (ternary_tree) data;
       return (void *) curr->eqkid;
     }
   pcurr = &(curr->eqkid);
 }
      else if (diff < 0)
 {
   pcurr = &(curr->lokid);
 }
      else
 {
   pcurr = &(curr->hikid);
 }
    }
  for (;;)
    {
      *pcurr = (ternary_tree) xmalloc (sizeof (ternary_node));
      curr = *pcurr;
      curr->splitchar = *s;
      curr->lokid = curr->hikid = curr->eqkid = 0;
      if (*s++ == 0)
 {
   curr->eqkid = (ternary_tree) data;
   return data;
 }
      pcurr = &(curr->eqkid);
    }
}
void
ternary_cleanup (p)
     ternary_tree p;
{
  if (p)
    {
      ternary_cleanup (p->lokid);
      if (p->splitchar)
 ternary_cleanup (p->eqkid);
      ternary_cleanup (p->hikid);
      free (p);
    }
}
void *
ternary_search (p, s)
     const ternary_node *p;
     const char *s;
{
  const ternary_node *curr;
  int diff, spchar;
  spchar = *s;
  curr = p;
  while (curr)
    {
      diff = spchar - curr->splitchar;
      if (diff == 0)
 {
   if (spchar == 0)
     return (void *) curr->eqkid;
   spchar = *++s;
   curr = curr->eqkid;
 }
      else if (diff < 0)
 curr = curr->lokid;
      else
 curr = curr->hikid;
    }
  return ((void *)0);
}
static void *
ternary_recursivesearch (p, s)
     const ternary_node *p;
     const char *s;
{
  if (!p)
    return 0;
  if (*s < p->splitchar)
    return ternary_recursivesearch (p->lokid, s);
  else if (*s > p->splitchar)
    return ternary_recursivesearch (p->hikid, s);
  else
    {
      if (*s == 0)
 return (void *) p->eqkid;
      return ternary_recursivesearch (p->eqkid, ++s);
    }
}
void * malloc (size_t);
static void xatexit_cleanup (void);
extern void (*_xexit_cleanup) (void);
struct xatexit {
 struct xatexit *next;
 int ind;
 void (*fns[32]) (void);
};
static struct xatexit xatexit_first;
static struct xatexit *xatexit_head = &xatexit_first;
int
xatexit (fn)
     void (*fn) (void);
{
  register struct xatexit *p;
  if (!_xexit_cleanup)
    _xexit_cleanup = xatexit_cleanup;
  p = xatexit_head;
  if (p->ind >= 32)
    {
      if ((p = (struct xatexit *) malloc (sizeof *p)) == ((void *)0))
 return -1;
      p->ind = 0;
      p->next = xatexit_head;
      xatexit_head = p;
    }
  p->fns[p->ind++] = fn;
  return 0;
}
static void
xatexit_cleanup ()
{
  register struct xatexit *p;
  register int n;
  for (p = xatexit_head; p; p = p->next)
    for (n = p->ind; --n >= 0;)
      (*p->fns[n]) ();
}
void (*_xexit_cleanup) (void);
void
xexit (code)
     int code;
{
  if (_xexit_cleanup != ((void *)0))
    (*_xexit_cleanup) ();
  exit (code);
}
void * malloc (size_t);
void * realloc (void *, size_t);
void * calloc (size_t, size_t);
void * sbrk (ptrdiff_t);
static const char *name = "";
static char *first_break = ((void *)0);
void
xmalloc_set_program_name (s)
     const char *s;
{
  name = s;
  if (first_break == ((void *)0))
    first_break = (char *) sbrk (0);
}
void
xmalloc_failed (size)
     size_t size;
{
  extern char **environ;
  size_t allocated;
  if (first_break != ((void *)0))
    allocated = (char *) sbrk (0) - first_break;
  else
    allocated = (char *) sbrk (0) - (char *) &environ;
  fprintf (stderr,
    "\n%s%sout of memory allocating %lu bytes after a total of %lu bytes\n",
    name, *name ? ": " : "",
    (unsigned long) size, (unsigned long) allocated);
  xexit (1);
}
void *
xmalloc (size)
    size_t size;
{
  void * newmem;
  if (size == 0)
    size = 1;
  newmem = malloc (size);
  if (!newmem)
    xmalloc_failed (size);
  return (newmem);
}
void *
xcalloc (nelem, elsize)
  size_t nelem, elsize;
{
  void * newmem;
  if (nelem == 0 || elsize == 0)
    nelem = elsize = 1;
  newmem = calloc (nelem, elsize);
  if (!newmem)
    xmalloc_failed (nelem * elsize);
  return (newmem);
}
void *
xrealloc (oldmem, size)
    void * oldmem;
    size_t size;
{
  void * newmem;
  if (size == 0)
    size = 1;
  if (!oldmem)
    newmem = malloc (size);
  else
    newmem = realloc (oldmem, size);
  if (!newmem)
    xmalloc_failed (size);
  return (newmem);
}
void *
xmemdup (input, copy_size, alloc_size)
  const void * input;
  size_t copy_size;
  size_t alloc_size;
{
  void * output = xcalloc (1, alloc_size);
  memcpy (output, input, copy_size);
  return output;
}
char *
xstrdup (s)
  const char *s;
{
  register size_t len = strlen (s) + 1;
  register char *ret = xmalloc (len);
  memcpy (ret, s, len);
  return ret;
}
extern char *strerror (int);
static char xstrerror_buf[sizeof "undocumented error #%d" + 20];
char *
xstrerror (errnum)
     int errnum;
{
  char *errstr;
  errstr = strerror (errnum);
  if (!errstr)
    {
      sprintf (xstrerror_buf, "undocumented error #%d", errnum);
      errstr = xstrerror_buf;
    }
  return errstr;
}
typedef unsigned long gcc_uint64_t;
int
mkstemps (template, suffix_len)
     char *template;
     int suffix_len;
{
  static const char letters[]
    = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
  static gcc_uint64_t value;
  struct timeval tv;
  char *XXXXXX;
  size_t len;
  int count;
  len = strlen (template);
  if ((int) len < 6 + suffix_len
      || strncmp (&template[len - 6 - suffix_len], "XXXXXX", 6))
    {
      return -1;
    }
  XXXXXX = &template[len - 6 - suffix_len];
  gettimeofday (&tv, ((void *)0));
  value += ((gcc_uint64_t) tv.tv_usec << 16) ^ tv.tv_sec ^ getpid ();
  for (count = 0; count < 238328; ++count)
    {
      gcc_uint64_t v = value;
      int fd;
      XXXXXX[0] = letters[v % 62];
      v /= 62;
      XXXXXX[1] = letters[v % 62];
      v /= 62;
      XXXXXX[2] = letters[v % 62];
      v /= 62;
      XXXXXX[3] = letters[v % 62];
      v /= 62;
      XXXXXX[4] = letters[v % 62];
      v /= 62;
      XXXXXX[5] = letters[v % 62];
      fd = open (template, 02|0100|0200, 0600);
      if (fd >= 0)
 return fd;
      value += 7777;
    }
  template[0] = '\0';
  return -1;
}
extern int fputs_unlocked (const char *, FILE *);
extern int getopt (int, char * const *, const char *);
typedef struct ht_identifier ht_identifier;
struct ht_identifier
{
  const unsigned char *str;
  unsigned int len;
  unsigned int hash_value;
};
typedef struct ht hash_table;
typedef struct ht_identifier *hashnode;
enum ht_lookup_option {HT_NO_INSERT = 0, HT_ALLOC, HT_ALLOCED};
struct ht
{
  struct obstack stack;
  hashnode *entries;
  hashnode (*alloc_node) (hash_table *);
  void * (*alloc_subobject) (size_t);
  unsigned int nslots;
  unsigned int nelements;
  struct cpp_reader *pfile;
  unsigned int searches;
  unsigned int collisions;
  unsigned char entries_owned;
};
extern hash_table *ht_create (unsigned int order);
extern void ht_destroy (hash_table *);
extern hashnode ht_lookup (hash_table *, const unsigned char *,
      size_t, enum ht_lookup_option);
extern hashnode ht_lookup_with_hash (hash_table *, const unsigned char *,
                                     size_t, unsigned int,
                                     enum ht_lookup_option);
typedef int (*ht_cb) (struct cpp_reader *, hashnode, const void *);
extern void ht_forall (hash_table *, ht_cb, const void *);
extern void ht_load (hash_table *ht, hashnode *entries,
       unsigned int nslots, unsigned int nelements, unsigned char own);
extern void ht_dump_statistics (hash_table *);
enum lc_reason {LC_ENTER = 0, LC_LEAVE, LC_RENAME};
typedef unsigned int source_location;
struct line_map
{
  const char *to_file;
  unsigned int to_line;
  source_location start_location;
  int included_from;
  unsigned int reason : 8;
  unsigned char sysp;
  unsigned int column_bits : 8;
};
struct line_maps
{
  struct line_map *maps;
  unsigned int allocated;
  unsigned int used;
  unsigned int cache;
  int last_listed;
  unsigned int depth;
  unsigned char trace_includes;
  source_location highest_location;
  source_location highest_line;
  unsigned int max_column_hint;
};
extern void linemap_init (struct line_maps *);
extern void linemap_free (struct line_maps *);
extern void linemap_check_files_exited (struct line_maps *);
extern source_location linemap_line_start
(struct line_maps *, unsigned int, unsigned int);
extern const struct line_map *linemap_add
  (struct line_maps *, enum lc_reason, unsigned int sysp,
   const char *to_file, unsigned int to_line);
extern const struct line_map *linemap_lookup
  (struct line_maps *, source_location);
extern void linemap_print_containing_files (struct line_maps *,
         const struct line_map *);
extern source_location
linemap_position_for_column (struct line_maps *set, unsigned int to_column);
typedef struct cpp_reader cpp_reader;
typedef struct cpp_buffer cpp_buffer;
typedef struct cpp_options cpp_options;
typedef struct cpp_token cpp_token;
typedef struct cpp_string cpp_string;
typedef struct cpp_hashnode cpp_hashnode;
typedef struct cpp_macro cpp_macro;
typedef struct cpp_callbacks cpp_callbacks;
typedef struct cpp_dir cpp_dir;
struct answer;
struct _cpp_file;
enum cpp_ttype
{
  CPP_EQ = 0, CPP_NOT, CPP_GREATER, CPP_LESS, CPP_PLUS, CPP_MINUS, CPP_MULT, CPP_DIV, CPP_MOD, CPP_AND, CPP_OR, CPP_XOR, CPP_RSHIFT, CPP_LSHIFT, CPP_MIN, CPP_MAX, CPP_COMPL, CPP_AND_AND, CPP_OR_OR, CPP_QUERY, CPP_COLON, CPP_COMMA, CPP_OPEN_PAREN, CPP_CLOSE_PAREN, CPP_EOF, CPP_EQ_EQ, CPP_NOT_EQ, CPP_GREATER_EQ, CPP_LESS_EQ, CPP_PLUS_EQ, CPP_MINUS_EQ, CPP_MULT_EQ, CPP_DIV_EQ, CPP_MOD_EQ, CPP_AND_EQ, CPP_OR_EQ, CPP_XOR_EQ, CPP_RSHIFT_EQ, CPP_LSHIFT_EQ, CPP_MIN_EQ, CPP_MAX_EQ, CPP_HASH, CPP_PASTE, CPP_OPEN_SQUARE, CPP_CLOSE_SQUARE, CPP_OPEN_BRACE, CPP_CLOSE_BRACE, CPP_SEMICOLON, CPP_ELLIPSIS, CPP_PLUS_PLUS, CPP_MINUS_MINUS, CPP_DEREF, CPP_DOT, CPP_SCOPE, CPP_DEREF_STAR, CPP_DOT_STAR, CPP_ATSIGN, CPP_NAME, CPP_AT_NAME, CPP_NUMBER, CPP_CHAR, CPP_WCHAR, CPP_OTHER, CPP_STRING, CPP_WSTRING, CPP_OBJC_STRING, CPP_HEADER_NAME, CPP_COMMENT, CPP_MACRO_ARG, CPP_PADDING,
  N_TTYPES
};
enum c_lang {CLK_GNUC89 = 0, CLK_GNUC99, CLK_STDC89, CLK_STDC94, CLK_STDC99,
      CLK_GNUCXX, CLK_CXX98, CLK_ASM};
struct cpp_string
{
  unsigned int len;
  const unsigned char *text;
};
enum cpp_token_fld_kind {
  CPP_TOKEN_FLD_NODE,
  CPP_TOKEN_FLD_SOURCE,
  CPP_TOKEN_FLD_STR,
  CPP_TOKEN_FLD_ARG_NO,
  CPP_TOKEN_FLD_NONE
};
struct cpp_token
{
  source_location src_loc;
  unsigned int type : 8;
  unsigned char flags;
  union cpp_token_u
  {
    cpp_hashnode *
     
  node;
    cpp_token * source;
    struct cpp_string str;
    unsigned int arg_no;
  } val;
};
extern enum cpp_token_fld_kind cpp_token_val_index (cpp_token *tok);
typedef unsigned int cppchar_t;
typedef int cppchar_signed_t;
struct cpp_options
{
  unsigned int tabstop;
  enum c_lang lang;
  unsigned char cplusplus;
  unsigned char cplusplus_comments;
  unsigned char objc;
  unsigned char discard_comments;
  unsigned char discard_comments_in_macro_exp;
  unsigned char trigraphs;
  unsigned char digraphs;
  unsigned char extended_numbers;
  unsigned char print_include_names;
  unsigned char pedantic_errors;
  unsigned char inhibit_warnings;
  unsigned char warn_deprecated;
  unsigned char warn_system_headers;
  unsigned char inhibit_errors;
  unsigned char warn_comments;
  unsigned char warn_missing_include_dirs;
  unsigned char warn_trigraphs;
  unsigned char warn_multichar;
  unsigned char warn_traditional;
  unsigned char warn_long_long;
  unsigned char warn_endif_labels;
  unsigned char warn_num_sign_change;
  unsigned char warn_variadic_macros;
  unsigned char warnings_are_errors;
  unsigned char remap;
  unsigned char dollars_in_ident;
  unsigned char warn_dollars;
  unsigned char warn_undef;
  unsigned char warn_unused_macros;
  unsigned char c99;
  unsigned char std;
  unsigned char pedantic;
  unsigned char preprocessed;
  unsigned char show_column;
  unsigned char operator_names;
  unsigned char traditional;
  const char *narrow_charset;
  const char *wide_charset;
  const char *input_charset;
  unsigned char warn_invalid_pch;
  unsigned char restore_pch_deps;
  struct
  {
    enum {DEPS_NONE = 0, DEPS_USER, DEPS_SYSTEM } style;
    unsigned char missing_files;
    unsigned char phony_targets;
    unsigned char ignore_main_file;
  } deps;
  size_t precision, char_precision, int_precision, wchar_precision;
  unsigned char unsigned_char, unsigned_wchar;
  unsigned char bytes_big_endian;
  unsigned char stdc_0_in_system_headers;
};
typedef const char *(*missing_header_cb)(cpp_reader *, const char *header, cpp_dir **);
struct cpp_callbacks
{
  void (*line_change) (cpp_reader *, const cpp_token *, int);
  void (*file_change) (cpp_reader *, const struct line_map *);
  void (*dir_change) (cpp_reader *, const char *);
  void (*include) (cpp_reader *, unsigned int, const unsigned char *,
     const char *, int);
  void (*define) (cpp_reader *, unsigned int, cpp_hashnode *);
  void (*undef) (cpp_reader *, unsigned int, cpp_hashnode *);
  void (*ident) (cpp_reader *, unsigned int, const cpp_string *);
  void (*def_pragma) (cpp_reader *, unsigned int);
  int (*valid_pch) (cpp_reader *, const char *, int);
  void (*read_pch) (cpp_reader *, const char *, int, const char *);
  missing_header_cb missing_header;
};
struct cpp_dir
{
  struct cpp_dir *next;
  char *name;
  unsigned int len;
  unsigned char sysp;
  const char **name_map;
  char *(*construct) (const char *header, cpp_dir *dir);
  ino_t ino;
  dev_t dev;
  unsigned char user_supplied_p;
};
extern const char *progname;
enum ident_node_type
{
  NT_VOID = 0,
  NT_MACRO,
  NT_ASSERTION
};
enum builtin_type
{
  BT_SPECLINE = 0,
  BT_DATE,
  BT_FILE,
  BT_BASE_FILE,
  BT_INCLUDE_LEVEL,
  BT_TIME,
  BT_STDC,
  BT_PRAGMA
};
enum {
  NTV_MACRO,
  NTV_ANSWER,
  NTV_BUILTIN,
  NTV_ARGUMENT,
  NTV_NONE
};
struct cpp_hashnode
{
  struct ht_identifier ident;
  unsigned int is_directive : 1;
  unsigned int directive_index : 7;
  unsigned char rid_code;
  unsigned int type : 8;
  unsigned char flags;
  union _cpp_hashnode_value
  {
    cpp_macro * macro;
    struct answer * answers;
    enum builtin_type builtin;
    unsigned short arg_index;
  } value;
};
extern cpp_reader *cpp_create_reader (enum c_lang, struct ht *,
          struct line_maps *);
extern void cpp_set_lang (cpp_reader *, enum c_lang);
extern void cpp_set_include_chains (cpp_reader *, cpp_dir *, cpp_dir *, int);
extern cpp_options *cpp_get_options (cpp_reader *);
extern cpp_callbacks *cpp_get_callbacks (cpp_reader *);
extern void cpp_set_callbacks (cpp_reader *, cpp_callbacks *);
extern struct depends *cpp_get_deps (cpp_reader *);
extern const char *cpp_read_main_file (cpp_reader *, const char *);
extern void cpp_init_builtins (cpp_reader *, int);
extern void cpp_post_options (cpp_reader *);
extern void cpp_init_iconv (cpp_reader *);
extern int cpp_finish (cpp_reader *, FILE *deps_stream);
extern void cpp_destroy (cpp_reader *);
extern unsigned int cpp_errors (cpp_reader *);
extern unsigned int cpp_token_len (const cpp_token *);
extern unsigned char *cpp_token_as_text (cpp_reader *, const cpp_token *);
extern unsigned char *cpp_spell_token (cpp_reader *, const cpp_token *,
           unsigned char *);
extern void cpp_register_pragma (cpp_reader *, const char *, const char *,
     void (*) (cpp_reader *));
extern int cpp_avoid_paste (cpp_reader *, const cpp_token *,
       const cpp_token *);
extern const cpp_token *cpp_get_token (cpp_reader *);
extern const unsigned char *cpp_macro_definition (cpp_reader *,
        const cpp_hashnode *);
extern void _cpp_backup_tokens (cpp_reader *, unsigned int);
extern cppchar_t cpp_interpret_charconst (cpp_reader *, const cpp_token *,
       unsigned int *, int *);
extern unsigned char cpp_interpret_string (cpp_reader *,
      const cpp_string *, size_t,
      cpp_string *, unsigned char);
extern unsigned char cpp_interpret_string_notranslate (cpp_reader *,
           const cpp_string *, size_t,
           cpp_string *, unsigned char);
extern void cpp_define (cpp_reader *, const char *);
extern void cpp_assert (cpp_reader *, const char *);
extern void cpp_undef (cpp_reader *, const char *);
extern void cpp_unassert (cpp_reader *, const char *);
extern void cpp_undef_all (cpp_reader *);
extern cpp_buffer *cpp_push_buffer (cpp_reader *, const unsigned char *,
        size_t, int);
extern int cpp_defined (cpp_reader *, const unsigned char *, int);
typedef unsigned long cpp_num_part;
typedef struct cpp_num cpp_num;
struct cpp_num
{
  cpp_num_part high;
  cpp_num_part low;
  unsigned char unsignedp;
  unsigned char overflow;
};
extern unsigned cpp_classify_number (cpp_reader *, const cpp_token *);
extern cpp_num cpp_interpret_integer (cpp_reader *, const cpp_token *,
          unsigned int type);
cpp_num cpp_num_sign_extend (cpp_num, size_t);
extern void cpp_error (cpp_reader *, int, const char *msgid, ...)
  ;
extern void cpp_errno (cpp_reader *, int, const char *msgid);
extern void cpp_error_with_line (cpp_reader *, int, source_location, unsigned,
     const char *msgid, ...) ;
extern int cpp_ideq (const cpp_token *, const char *);
extern void cpp_output_line (cpp_reader *, FILE *);
extern void cpp_output_token (const cpp_token *, FILE *);
extern const char *cpp_type2name (enum cpp_ttype);
extern cppchar_t cpp_parse_escape (cpp_reader *, const unsigned char ** pstr,
       const unsigned char *limit, int wide);
extern cpp_hashnode *cpp_lookup (cpp_reader *, const unsigned char *,
     unsigned int);
typedef int (*cpp_cb) (cpp_reader *, cpp_hashnode *, void *);
extern void cpp_forall_identifiers (cpp_reader *, cpp_cb, void *);
extern void cpp_scan_nooutput (cpp_reader *);
extern int cpp_sys_macro_p (cpp_reader *);
extern unsigned char *cpp_quote_string (unsigned char *, const unsigned char *,
     unsigned int);
extern unsigned char cpp_included (cpp_reader *, const char *);
extern void cpp_make_system_header (cpp_reader *, int, int);
extern unsigned char cpp_push_include (cpp_reader *, const char *);
extern void cpp_change_file (cpp_reader *, enum lc_reason, const char *);
extern const char *cpp_get_path (struct _cpp_file *);
extern cpp_dir *cpp_get_dir (struct _cpp_file *);
extern cpp_buffer *cpp_get_buffer (cpp_reader *);
extern struct _cpp_file *cpp_get_file (cpp_buffer *);
extern cpp_buffer *cpp_get_prev (cpp_buffer *);
struct save_macro_data;
extern int cpp_save_state (cpp_reader *, FILE *);
extern int cpp_write_pch_deps (cpp_reader *, FILE *);
extern int cpp_write_pch_state (cpp_reader *, FILE *);
extern int cpp_valid_state (cpp_reader *, const char *, int);
extern void cpp_prepare_state (cpp_reader *, struct save_macro_data **);
extern int cpp_read_state (cpp_reader *, const char *, FILE *,
      struct save_macro_data *);
typedef unsigned char uchar;
struct answer
{
  struct answer *next;
  unsigned int count;
  cpp_token first[1];
};
struct cpp_macro
{
  cpp_hashnode **
    params;
  union cpp_macro_u
  {
    cpp_token * tokens;
    const uchar * text;
  } exp;
  source_location line;
  unsigned int count;
  unsigned short paramc;
  unsigned int fun_like : 1;
  unsigned int variadic : 1;
  unsigned int syshdr : 1;
  unsigned int used : 1;
  unsigned int traditional : 1;
};
typedef void *iconv_t;
extern iconv_t iconv_open (const char *__tocode, const char *__fromcode);
extern size_t iconv (iconv_t __cd, char ** __inbuf,
       size_t * __inbytesleft,
       char ** __outbuf,
       size_t * __outbytesleft);
extern int iconv_close (iconv_t __cd);
struct directive;
struct pending_option;
struct op;
struct _cpp_strbuf;
typedef unsigned char (*convert_f) (iconv_t, const unsigned char *, size_t,
      struct _cpp_strbuf *);
struct cset_converter
{
  convert_f func;
  iconv_t cd;
};
struct dummy
{
  char c;
  union
  {
    double d;
    int *p;
  } u;
};
typedef struct _cpp_buff _cpp_buff;
struct _cpp_buff
{
  struct _cpp_buff *next;
  unsigned char *base, *cur, *limit;
};
extern _cpp_buff *_cpp_get_buff (cpp_reader *, size_t);
extern void _cpp_release_buff (cpp_reader *, _cpp_buff *);
extern void _cpp_extend_buff (cpp_reader *, _cpp_buff **, size_t);
extern _cpp_buff *_cpp_append_extend_buff (cpp_reader *, _cpp_buff *, size_t);
extern void _cpp_free_buff (_cpp_buff *);
extern unsigned char *_cpp_aligned_alloc (cpp_reader *, size_t);
extern unsigned char *_cpp_unaligned_alloc (cpp_reader *, size_t);
enum include_type {IT_INCLUDE, IT_INCLUDE_NEXT, IT_IMPORT, IT_CMDLINE};
union utoken
{
  const cpp_token *token;
  const cpp_token **ptoken;
};
typedef struct tokenrun tokenrun;
struct tokenrun
{
  tokenrun *next, *prev;
  cpp_token *base, *limit;
};
typedef struct cpp_context cpp_context;
struct cpp_context
{
  cpp_context *next, *prev;
  union
  {
    struct
    {
      union utoken first;
      union utoken last;
    } iso;
    struct
    {
      const uchar *cur;
      const uchar *rlimit;
    } trad;
  } u;
  _cpp_buff *buff;
  cpp_hashnode *macro;
  unsigned char direct_p;
};
struct lexer_state
{
  unsigned char in_directive;
  unsigned char directive_wants_padding;
  unsigned char skipping;
  unsigned char angled_headers;
  unsigned char in_expression;
  unsigned char save_comments;
  unsigned char va_args_ok;
  unsigned char poisoned_ok;
  unsigned char prevent_expansion;
  unsigned char parsing_args;
  unsigned char discarding_output;
  unsigned int skip_eval;
};
struct spec_nodes
{
  cpp_hashnode *n_defined;
  cpp_hashnode *n_true;
  cpp_hashnode *n_false;
  cpp_hashnode *n__VA_ARGS__;
};
typedef struct _cpp_line_note _cpp_line_note;
struct _cpp_line_note
{
  const uchar *pos;
  unsigned int type;
};
struct cpp_buffer
{
  const uchar *cur;
  const uchar *line_base;
  const uchar *next_line;
  const uchar *buf;
  const uchar *rlimit;
  _cpp_line_note *notes;
  unsigned int cur_note;
  unsigned int notes_used;
  unsigned int notes_cap;
  struct cpp_buffer *prev;
  struct _cpp_file *file;
  struct if_stack *if_stack;
  unsigned char need_line;
  unsigned int warned_cplusplus_comments : 1;
  unsigned int from_stage3 : 1;
  unsigned int return_at_eof : 1;
  unsigned char sysp;
  struct cpp_dir dir;
  struct cset_converter input_cset_desc;
};
struct cpp_reader
{
  cpp_buffer *buffer;
  cpp_buffer *overlaid_buffer;
  struct lexer_state state;
  struct line_maps *line_table;
  source_location directive_line;
  _cpp_buff *a_buff;
  _cpp_buff *u_buff;
  _cpp_buff *free_buffs;
  struct cpp_context base_context;
  struct cpp_context *context;
  const struct directive *directive;
  struct cpp_dir *quote_include;
  struct cpp_dir *bracket_include;
  struct cpp_dir no_search_path;
  struct _cpp_file *all_files;
  struct _cpp_file *main_file;
  struct htab *file_hash;
  struct file_hash_entry *file_hash_entries;
  unsigned int file_hash_entries_allocated, file_hash_entries_used;
  unsigned char quote_ignores_source_dir;
  unsigned char seen_once_only;
  const cpp_hashnode *mi_cmacro;
  const cpp_hashnode *mi_ind_cmacro;
  unsigned char mi_valid;
  cpp_token *cur_token;
  tokenrun base_run, *cur_run;
  unsigned int lookaheads;
  unsigned int keep_tokens;
  unsigned int errors;
  unsigned char *macro_buffer;
  unsigned int macro_buffer_len;
  struct cset_converter narrow_cset_desc;
  struct cset_converter wide_cset_desc;
  const uchar *date;
  const uchar *time;
  cpp_token avoid_paste;
  cpp_token eof;
  struct depends *deps;
  struct obstack hash_ob;
  struct obstack buffer_ob;
  struct pragma_entry *pragmas;
  struct cpp_callbacks cb;
  struct ht *hash_table1;
  struct op *op_stack, *op_limit;
  struct cpp_options opts;
  struct spec_nodes spec_nodes;
  unsigned char our_hashtable;
  struct
  {
    uchar *base;
    uchar *limit;
    uchar *cur;
    source_location first_line;
  } out;
  const uchar *saved_cur, *saved_rlimit, *saved_line_base;
  struct cpp_savedstate *savedstate;
};
extern unsigned char _cpp_trigraph_map[(127 * 2 + 1) + 1];
static int cpp_in_system_header (cpp_reader *);
static int
cpp_in_system_header (cpp_reader *pfile)
{
  return pfile->buffer ? pfile->buffer->sysp : 0;
}
extern int _cpp_begin_message (cpp_reader *, int,
          source_location, unsigned int);
extern void _cpp_free_definition (cpp_hashnode *);
extern unsigned char _cpp_create_definition (cpp_reader *, cpp_hashnode *);
extern void _cpp_pop_context (cpp_reader *);
extern void _cpp_push_text_context (cpp_reader *, cpp_hashnode *,
        const uchar *, size_t);
extern unsigned char _cpp_save_parameter (cpp_reader *, cpp_macro *, cpp_hashnode *);
extern unsigned char _cpp_arguments_ok (cpp_reader *, cpp_macro *, const cpp_hashnode *,
          unsigned int);
extern const uchar *_cpp_builtin_macro_text (cpp_reader *, cpp_hashnode *);
int _cpp_warn_if_unused_macro (cpp_reader *, cpp_hashnode *, void *);
extern void _cpp_init_hashtable (cpp_reader *, hash_table *);
extern void _cpp_destroy_hashtable (cpp_reader *);
typedef struct _cpp_file _cpp_file;
extern _cpp_file *_cpp_find_file (cpp_reader *, const char *fname,
      cpp_dir *start_dir, unsigned char fake);
extern unsigned char _cpp_find_failed (_cpp_file *);
extern void _cpp_mark_file_once_only (cpp_reader *, struct _cpp_file *);
extern void _cpp_fake_include (cpp_reader *, const char *);
extern unsigned char _cpp_stack_file (cpp_reader *, _cpp_file*, unsigned char);
extern unsigned char _cpp_stack_include (cpp_reader *, const char *, int,
    enum include_type);
extern int _cpp_compare_file_date (cpp_reader *, const char *, int);
extern void _cpp_report_missing_guards (cpp_reader *);
extern void _cpp_init_files (cpp_reader *);
extern void _cpp_cleanup_files (cpp_reader *);
extern void _cpp_pop_file_buffer (cpp_reader *, struct _cpp_file *);
extern unsigned char _cpp_save_file_entries (cpp_reader *pfile, FILE *f);
extern unsigned char _cpp_read_file_entries (cpp_reader *, FILE *);
extern unsigned char _cpp_parse_expr (cpp_reader *);
extern struct op *_cpp_expand_op_stack (cpp_reader *);
extern void _cpp_process_line_notes (cpp_reader *, int);
extern void _cpp_clean_line (cpp_reader *);
extern unsigned char _cpp_get_fresh_line (cpp_reader *);
extern unsigned char _cpp_skip_block_comment (cpp_reader *);
extern cpp_token *_cpp_temp_token (cpp_reader *);
extern const cpp_token *_cpp_lex_token (cpp_reader *);
extern cpp_token *_cpp_lex_direct (cpp_reader *);
extern int _cpp_equiv_tokens (const cpp_token *, const cpp_token *);
extern void _cpp_init_tokenrun (tokenrun *, unsigned int);
extern void _cpp_maybe_push_include_file (cpp_reader *);
extern int _cpp_test_assertion (cpp_reader *, unsigned int *);
extern int _cpp_handle_directive (cpp_reader *, int);
extern void _cpp_define_builtin (cpp_reader *, const char *);
extern char ** _cpp_save_pragma_names (cpp_reader *);
extern void _cpp_restore_pragma_names (cpp_reader *, char **);
extern void _cpp_do__Pragma (cpp_reader *);
extern void _cpp_init_directives (cpp_reader *);
extern void _cpp_init_internal_pragmas (cpp_reader *);
extern void _cpp_do_file_change (cpp_reader *, enum lc_reason, const char *,
     unsigned int, unsigned int);
extern void _cpp_pop_buffer (cpp_reader *);
extern unsigned char _cpp_scan_out_logical_line (cpp_reader *, cpp_macro *);
extern unsigned char _cpp_read_logical_line_trad (cpp_reader *);
extern void _cpp_overlay_buffer (cpp_reader *pfile, const uchar *, size_t);
extern void _cpp_remove_overlay (cpp_reader *);
extern unsigned char _cpp_create_trad_definition (cpp_reader *, cpp_macro *);
extern unsigned char _cpp_expansions_different_trad (const cpp_macro *,
         const cpp_macro *);
extern uchar *_cpp_copy_replacement_text (const cpp_macro *, uchar *);
extern size_t _cpp_replacement_text_len (const cpp_macro *);
extern cppchar_t _cpp_valid_ucn (cpp_reader *, const uchar **,
     const uchar *, int);
extern void _cpp_destroy_iconv (cpp_reader *);
extern uchar *_cpp_convert_input (cpp_reader *, const char *, uchar *,
      size_t, size_t, off_t *);
extern const char *_cpp_default_encoding (void);
static int ustrcmp (const uchar *, const uchar *);
static int ustrncmp (const uchar *, const uchar *, size_t);
static size_t ustrlen (const uchar *);
static uchar *uxstrdup (const uchar *);
static uchar *ustrchr (const uchar *, int);
static int ufputs (const uchar *, FILE *);
static int
ustrcmp (const uchar *s1, const uchar *s2)
{
  return strcmp ((const char *)s1, (const char *)s2);
}
static int
ustrncmp (const uchar *s1, const uchar *s2, size_t n)
{
  return strncmp ((const char *)s1, (const char *)s2, n);
}
static size_t
ustrlen (const uchar *s1)
{
  return strlen ((const char *)s1);
}
static uchar *
uxstrdup (const uchar *s1)
{
  return (uchar *) xstrdup ((const char *)s1);
}
static uchar *
ustrchr (const uchar *s1, int c)
{
  return (uchar *) strchr ((const char *)s1, c);
}
static int
ufputs (const uchar *s, FILE *f)
{
  return fputs_unlocked ((const char *)s, f);
}
struct ucnrange
{
  unsigned short lo, hi;
  unsigned short flags;
};
static const struct ucnrange ucnranges[] = {
  { 0x00aa, 0x00aa, 1 },
  { 0x00b5, 0x00b5, 1 },
  { 0x00b7, 0x00b7, 1 },
  { 0x00ba, 0x00ba, 1 },
  { 0x00c0, 0x00d6, 2|1 },
  { 0x00d8, 0x00f6, 2|1 },
  { 0x00f8, 0x01f5, 2|1 },
  { 0x01fa, 0x0217, 2|1 },
  { 0x0250, 0x02a8, 2|1 },
  { 0x02b0, 0x02b8, 1 },
  { 0x02bb, 0x02bb, 1 },
  { 0x02bd, 0x02c1, 1 },
  { 0x02d0, 0x02d1, 1 },
  { 0x02e0, 0x02e4, 1 },
  { 0x037a, 0x037a, 1 },
  { 0x0384, 0x0384, 2 },
  { 0x0386, 0x0386, 1 },
  { 0x0388, 0x038a, 2|1 },
  { 0x038c, 0x038c, 2|1 },
  { 0x038e, 0x03a1, 2|1 },
  { 0x03a3, 0x03ce, 2|1 },
  { 0x03d0, 0x03d6, 2|1 },
  { 0x03da, 0x03da, 2|1 },
  { 0x03dc, 0x03dc, 2|1 },
  { 0x03de, 0x03de, 2|1 },
  { 0x03e0, 0x03e0, 2|1 },
  { 0x03e2, 0x03f3, 2|1 },
  { 0x0401, 0x040c, 2|1 },
  { 0x040d, 0x040d, 2 },
  { 0x040e, 0x040e, 1 },
  { 0x040f, 0x044f, 2|1 },
  { 0x0451, 0x045c, 2|1 },
  { 0x045e, 0x0481, 2|1 },
  { 0x0490, 0x04c4, 2|1 },
  { 0x04c7, 0x04c8, 2|1 },
  { 0x04cb, 0x04cc, 2|1 },
  { 0x04d0, 0x04eb, 2|1 },
  { 0x04ee, 0x04f5, 2|1 },
  { 0x04f8, 0x04f9, 2|1 },
  { 0x0531, 0x0556, 2|1 },
  { 0x0559, 0x0559, 1 },
  { 0x0561, 0x0587, 2|1 },
  { 0x05b0, 0x05b9, 1 },
  { 0x05bb, 0x05bd, 1 },
  { 0x05bf, 0x05bf, 1 },
  { 0x05c1, 0x05c2, 1 },
  { 0x05d0, 0x05ea, 2|1 },
  { 0x05f0, 0x05f2, 2|1 },
  { 0x05f3, 0x05f4, 2 },
  { 0x0621, 0x063a, 2|1 },
  { 0x0640, 0x0652, 2|1 },
  { 0x0660, 0x0669, 1|4 },
  { 0x0670, 0x06b7, 2|1 },
  { 0x06ba, 0x06be, 2|1 },
  { 0x06c0, 0x06ce, 2|1 },
  { 0x06d0, 0x06dc, 1 },
  { 0x06e5, 0x06e7, 2|1 },
  { 0x06e8, 0x06e8, 1 },
  { 0x06ea, 0x06ed, 1 },
  { 0x06f0, 0x06f9, 1|4 },
  { 0x0901, 0x0903, 1 },
  { 0x0905, 0x0939, 2|1 },
  { 0x093d, 0x093d, 1 },
  { 0x093e, 0x094d, 1 },
  { 0x0950, 0x0952, 1 },
  { 0x0958, 0x0962, 2|1 },
  { 0x0963, 0x0963, 1 },
  { 0x0966, 0x096f, 1|4 },
  { 0x0981, 0x0983, 1 },
  { 0x0985, 0x098c, 2|1 },
  { 0x098f, 0x0990, 2|1 },
  { 0x0993, 0x09a8, 2|1 },
  { 0x09aa, 0x09b0, 2|1 },
  { 0x09b2, 0x09b2, 2|1 },
  { 0x09b6, 0x09b9, 2|1 },
  { 0x09be, 0x09c4, 1 },
  { 0x09c7, 0x09c8, 1 },
  { 0x09cb, 0x09cd, 1 },
  { 0x09dc, 0x09dd, 2|1 },
  { 0x09df, 0x09e1, 2|1 },
  { 0x09e2, 0x09e3, 1 },
  { 0x09e6, 0x09ef, 1|4 },
  { 0x09f0, 0x09f1, 2|1 },
  { 0x0a02, 0x0a02, 1 },
  { 0x0a05, 0x0a0a, 2|1 },
  { 0x0a0f, 0x0a10, 2|1 },
  { 0x0a13, 0x0a28, 2|1 },
  { 0x0a2a, 0x0a30, 2|1 },
  { 0x0a32, 0x0a33, 2|1 },
  { 0x0a35, 0x0a36, 2|1 },
  { 0x0a38, 0x0a39, 2|1 },
  { 0x0a3e, 0x0a42, 1 },
  { 0x0a47, 0x0a48, 1 },
  { 0x0a4b, 0x0a4d, 1 },
  { 0x0a59, 0x0a5c, 2|1 },
  { 0x0a5e, 0x0a5e, 2|1 },
  { 0x0a66, 0x0a6f, 1|4 },
  { 0x0a74, 0x0a74, 1 },
  { 0x0a81, 0x0a83, 1 },
  { 0x0a85, 0x0a8b, 2|1 },
  { 0x0a8d, 0x0a8d, 2|1 },
  { 0x0a8f, 0x0a91, 2|1 },
  { 0x0a93, 0x0aa8, 2|1 },
  { 0x0aaa, 0x0ab0, 2|1 },
  { 0x0ab2, 0x0ab3, 2|1 },
  { 0x0ab5, 0x0ab9, 2|1 },
  { 0x0abd, 0x0ac5, 1 },
  { 0x0ac7, 0x0ac9, 1 },
  { 0x0acb, 0x0acd, 1 },
  { 0x0ad0, 0x0ad0, 1 },
  { 0x0ae0, 0x0ae0, 2|1 },
  { 0x0ae6, 0x0aef, 1|4 },
  { 0x0b01, 0x0b03, 1 },
  { 0x0b05, 0x0b0c, 2|1 },
  { 0x0b0f, 0x0b10, 2|1 },
  { 0x0b13, 0x0b28, 2|1 },
  { 0x0b2a, 0x0b30, 2|1 },
  { 0x0b32, 0x0b33, 2|1 },
  { 0x0b36, 0x0b39, 2|1 },
  { 0x0b3d, 0x0b3d, 1 },
  { 0x0b3e, 0x0b43, 1 },
  { 0x0b47, 0x0b48, 1 },
  { 0x0b4b, 0x0b4d, 1 },
  { 0x0b5c, 0x0b5d, 2|1 },
  { 0x0b5f, 0x0b61, 2|1 },
  { 0x0b66, 0x0b6f, 1|4 },
  { 0x0b82, 0x0b83, 1 },
  { 0x0b85, 0x0b8a, 2|1 },
  { 0x0b8e, 0x0b90, 2|1 },
  { 0x0b92, 0x0b95, 2|1 },
  { 0x0b99, 0x0b9a, 2|1 },
  { 0x0b9c, 0x0b9c, 2|1 },
  { 0x0b9e, 0x0b9f, 2|1 },
  { 0x0ba3, 0x0ba4, 2|1 },
  { 0x0ba8, 0x0baa, 2|1 },
  { 0x0bae, 0x0bb5, 2|1 },
  { 0x0bb7, 0x0bb9, 2|1 },
  { 0x0bbe, 0x0bc2, 1 },
  { 0x0bc6, 0x0bc8, 1 },
  { 0x0bca, 0x0bcd, 1 },
  { 0x0be7, 0x0bef, 1|4 },
  { 0x0c01, 0x0c03, 1 },
  { 0x0c05, 0x0c0c, 2|1 },
  { 0x0c0e, 0x0c10, 2|1 },
  { 0x0c12, 0x0c28, 2|1 },
  { 0x0c2a, 0x0c33, 2|1 },
  { 0x0c35, 0x0c39, 2|1 },
  { 0x0c3e, 0x0c44, 1 },
  { 0x0c46, 0x0c48, 1 },
  { 0x0c4a, 0x0c4d, 1 },
  { 0x0c60, 0x0c61, 2|1 },
  { 0x0c66, 0x0c6f, 1|4 },
  { 0x0c82, 0x0c83, 1 },
  { 0x0c85, 0x0c8c, 2|1 },
  { 0x0c8e, 0x0c90, 2|1 },
  { 0x0c92, 0x0ca8, 2|1 },
  { 0x0caa, 0x0cb3, 2|1 },
  { 0x0cb5, 0x0cb9, 2|1 },
  { 0x0cbe, 0x0cc4, 1 },
  { 0x0cc6, 0x0cc8, 1 },
  { 0x0cca, 0x0ccd, 1 },
  { 0x0cde, 0x0cde, 1 },
  { 0x0ce0, 0x0ce1, 2|1 },
  { 0x0ce6, 0x0cef, 1|4 },
  { 0x0d02, 0x0d03, 1 },
  { 0x0d05, 0x0d0c, 2|1 },
  { 0x0d0e, 0x0d10, 2|1 },
  { 0x0d12, 0x0d28, 2|1 },
  { 0x0d2a, 0x0d39, 2|1 },
  { 0x0d3e, 0x0d43, 1 },
  { 0x0d46, 0x0d48, 1 },
  { 0x0d4a, 0x0d4d, 1 },
  { 0x0d60, 0x0d61, 2|1 },
  { 0x0d66, 0x0d6f, 1|4 },
  { 0x0e01, 0x0e30, 2|1 },
  { 0x0e31, 0x0e31, 1 },
  { 0x0e32, 0x0e33, 2|1 },
  { 0x0e34, 0x0e3a, 1 },
  { 0x0e40, 0x0e46, 2|1 },
  { 0x0e47, 0x0e49, 1 },
  { 0x0e50, 0x0e59, 2|1|4 },
  { 0x0e5a, 0x0e5b, 2|1 },
  { 0x0e81, 0x0e82, 2|1 },
  { 0x0e84, 0x0e84, 2|1 },
  { 0x0e87, 0x0e88, 2|1 },
  { 0x0e8a, 0x0e8a, 2|1 },
  { 0x0e8d, 0x0e8d, 2|1 },
  { 0x0e94, 0x0e97, 2|1 },
  { 0x0e99, 0x0e9f, 2|1 },
  { 0x0ea1, 0x0ea3, 2|1 },
  { 0x0ea5, 0x0ea5, 2|1 },
  { 0x0ea7, 0x0ea7, 2|1 },
  { 0x0eaa, 0x0eab, 2|1 },
  { 0x0ead, 0x0eae, 2|1 },
  { 0x0eaf, 0x0eaf, 2 },
  { 0x0eb0, 0x0eb0, 2|1 },
  { 0x0eb1, 0x0eb1, 1 },
  { 0x0eb2, 0x0eb3, 2|1 },
  { 0x0eb4, 0x0eb9, 1 },
  { 0x0ebb, 0x0ebc, 1 },
  { 0x0ebd, 0x0ebd, 2|1 },
  { 0x0ec0, 0x0ec4, 2|1 },
  { 0x0ec6, 0x0ec6, 2|1 },
  { 0x0ec8, 0x0ecd, 1 },
  { 0x0ed0, 0x0ed9, 1|4 },
  { 0x0edc, 0x0edd, 1 },
  { 0x0f00, 0x0f00, 1 },
  { 0x0f18, 0x0f19, 1 },
  { 0x0f20, 0x0f33, 1|4 },
  { 0x0f35, 0x0f35, 1 },
  { 0x0f37, 0x0f37, 1 },
  { 0x0f39, 0x0f39, 1 },
  { 0x0f3e, 0x0f47, 1 },
  { 0x0f49, 0x0f69, 1 },
  { 0x0f71, 0x0f84, 1 },
  { 0x0f86, 0x0f8b, 1 },
  { 0x0f90, 0x0f95, 1 },
  { 0x0f97, 0x0f97, 1 },
  { 0x0f99, 0x0fad, 1 },
  { 0x0fb1, 0x0fb7, 1 },
  { 0x0fb9, 0x0fb9, 1 },
  { 0x10a0, 0x10c5, 2|1 },
  { 0x10d0, 0x10f6, 2|1 },
  { 0x1100, 0x1159, 2 },
  { 0x1161, 0x11a2, 2 },
  { 0x11a8, 0x11f9, 2 },
  { 0x1e00, 0x1e9a, 2|1 },
  { 0x1e9b, 0x1e9b, 1 },
  { 0x1ea0, 0x1ef9, 2|1 },
  { 0x1f00, 0x1f15, 2|1 },
  { 0x1f18, 0x1f1d, 2|1 },
  { 0x1f20, 0x1f45, 2|1 },
  { 0x1f48, 0x1f4d, 2|1 },
  { 0x1f50, 0x1f57, 2|1 },
  { 0x1f59, 0x1f59, 2|1 },
  { 0x1f5b, 0x1f5b, 2|1 },
  { 0x1f5d, 0x1f5d, 2|1 },
  { 0x1f5f, 0x1f7d, 2|1 },
  { 0x1f80, 0x1fb4, 2|1 },
  { 0x1fb6, 0x1fbc, 2|1 },
  { 0x1fbe, 0x1fbe, 1 },
  { 0x1fc2, 0x1fc4, 2|1 },
  { 0x1fc6, 0x1fcc, 2|1 },
  { 0x1fd0, 0x1fd3, 2|1 },
  { 0x1fd6, 0x1fdb, 2|1 },
  { 0x1fe0, 0x1fec, 2|1 },
  { 0x1ff2, 0x1ff4, 2|1 },
  { 0x1ff6, 0x1ffc, 2|1 },
  { 0x203f, 0x2040, 1 },
  { 0x207f, 0x207f, 1 },
  { 0x2102, 0x2102, 1 },
  { 0x2107, 0x2107, 1 },
  { 0x210a, 0x2113, 1 },
  { 0x2115, 0x2115, 1 },
  { 0x2118, 0x211d, 1 },
  { 0x2124, 0x2124, 1 },
  { 0x2126, 0x2126, 1 },
  { 0x2128, 0x2128, 1 },
  { 0x212a, 0x2131, 1 },
  { 0x2133, 0x2138, 1 },
  { 0x2160, 0x2182, 1 },
  { 0x3005, 0x3007, 1 },
  { 0x3021, 0x3029, 1 },
  { 0x3041, 0x3093, 2|1 },
  { 0x3094, 0x3094, 2 },
  { 0x309b, 0x309c, 2|1 },
  { 0x309d, 0x309e, 2 },
  { 0x30a1, 0x30f6, 2|1 },
  { 0x30f7, 0x30fa, 2 },
  { 0x30fb, 0x30fc, 2|1 },
  { 0x30fd, 0x30fe, 2 },
  { 0x3105, 0x312c, 2|1 },
  { 0x4e00, 0x9fa5, 2|1 },
  { 0xac00, 0xd7a3, 1 },
  { 0xf900, 0xfa2d, 2 },
  { 0xfb1f, 0xfb36, 2 },
  { 0xfb38, 0xfb3c, 2 },
  { 0xfb3e, 0xfb3e, 2 },
  { 0xfb40, 0xfb44, 2 },
  { 0xfb46, 0xfbb1, 2 },
  { 0xfbd3, 0xfd3f, 2 },
  { 0xfd50, 0xfd8f, 2 },
  { 0xfd92, 0xfdc7, 2 },
  { 0xfdf0, 0xfdfb, 2 },
  { 0xfe70, 0xfe72, 2 },
  { 0xfe74, 0xfe74, 2 },
  { 0xfe76, 0xfefc, 2 },
  { 0xff21, 0xff3a, 2 },
  { 0xff41, 0xff5a, 2 },
  { 0xff66, 0xffbe, 2 },
  { 0xffc2, 0xffc7, 2 },
  { 0xffca, 0xffcf, 2 },
  { 0xffd2, 0xffd7, 2 },
  { 0xffda, 0xffdc, 2 }
};
struct _cpp_strbuf
{
  uchar *text;
  size_t asize;
  size_t len;
};
static int
one_utf8_to_cppchar (const uchar **inbufp, size_t *inbytesleftp,
       cppchar_t *cp)
{
  static const uchar masks[6] = { 0x7F, 0x1F, 0x0F, 0x07, 0x02, 0x01 };
  static const uchar patns[6] = { 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };
  cppchar_t c;
  const uchar *inbuf = *inbufp;
  size_t nbytes, i;
  if (*inbytesleftp < 1)
    return 22;
  c = *inbuf;
  if (c < 0x80)
    {
      *cp = c;
      *inbytesleftp -= 1;
      *inbufp += 1;
      return 0;
    }
  for (nbytes = 2; nbytes < 7; nbytes++)
    if ((c & ~masks[nbytes-1]) == patns[nbytes-1])
      goto found;
  return 84;
 found:
  if (*inbytesleftp < nbytes)
    return 22;
  c = (c & masks[nbytes-1]);
  inbuf++;
  for (i = 1; i < nbytes; i++)
    {
      cppchar_t n = *inbuf++;
      if ((n & 0xC0) != 0x80)
 return 84;
      c = ((c << 6) + (n & 0x3F));
    }
  if (c <= 0x7F && nbytes > 1) return 84;
  if (c <= 0x7FF && nbytes > 2) return 84;
  if (c <= 0xFFFF && nbytes > 3) return 84;
  if (c <= 0x1FFFFF && nbytes > 4) return 84;
  if (c <= 0x3FFFFFF && nbytes > 5) return 84;
  if (c > 0x7FFFFFFF || (c >= 0xD800 && c <= 0xDFFF)) return 84;
  *cp = c;
  *inbufp = inbuf;
  *inbytesleftp -= nbytes;
  return 0;
}
static int
one_cppchar_to_utf8 (cppchar_t c, uchar **outbufp, size_t *outbytesleftp)
{
  static const uchar masks[6] = { 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };
  static const uchar limits[6] = { 0x80, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
  size_t nbytes;
  uchar buf[6], *p = &buf[6];
  uchar *outbuf = *outbufp;
  nbytes = 1;
  if (c < 0x80)
    *--p = c;
  else
    {
      do
 {
   *--p = ((c & 0x3F) | 0x80);
   c >>= 6;
   nbytes++;
 }
      while (c >= 0x3F || (c & limits[nbytes-1]));
      *--p = (c | masks[nbytes-1]);
    }
  if (*outbytesleftp < nbytes)
    return 7;
  while (p < &buf[6])
    *outbuf++ = *p++;
  *outbytesleftp -= nbytes;
  *outbufp = outbuf;
  return 0;
}
static int
one_utf8_to_utf32 (iconv_t bigend, const uchar **inbufp, size_t *inbytesleftp,
     uchar **outbufp, size_t *outbytesleftp)
{
  uchar *outbuf;
  cppchar_t s = 0;
  int rval;
  if (*outbytesleftp < 4)
    return 7;
  rval = one_utf8_to_cppchar (inbufp, inbytesleftp, &s);
  if (rval)
    return rval;
  outbuf = *outbufp;
  outbuf[bigend ? 3 : 0] = (s & 0x000000FF);
  outbuf[bigend ? 2 : 1] = (s & 0x0000FF00) >> 8;
  outbuf[bigend ? 1 : 2] = (s & 0x00FF0000) >> 16;
  outbuf[bigend ? 0 : 3] = (s & 0xFF000000) >> 24;
  *outbufp += 4;
  *outbytesleftp -= 4;
  return 0;
}
static int
one_utf32_to_utf8 (iconv_t bigend, const uchar **inbufp, size_t *inbytesleftp,
     uchar **outbufp, size_t *outbytesleftp)
{
  cppchar_t s;
  int rval;
  const uchar *inbuf;
  if (*inbytesleftp < 4)
    return 22;
  inbuf = *inbufp;
  s = inbuf[bigend ? 0 : 3] << 24;
  s += inbuf[bigend ? 1 : 2] << 16;
  s += inbuf[bigend ? 2 : 1] << 8;
  s += inbuf[bigend ? 3 : 0];
  if (s >= 0x7FFFFFFF || (s >= 0xD800 && s <= 0xDFFF))
    return 84;
  rval = one_cppchar_to_utf8 (s, outbufp, outbytesleftp);
  if (rval)
    return rval;
  *inbufp += 4;
  *inbytesleftp -= 4;
  return 0;
}
static int
one_utf8_to_utf16 (iconv_t bigend, const uchar **inbufp, size_t *inbytesleftp,
     uchar **outbufp, size_t *outbytesleftp)
{
  int rval;
  cppchar_t s = 0;
  const uchar *save_inbuf = *inbufp;
  size_t save_inbytesleft = *inbytesleftp;
  uchar *outbuf = *outbufp;
  rval = one_utf8_to_cppchar (inbufp, inbytesleftp, &s);
  if (rval)
    return rval;
  if (s > 0x0010FFFF)
    {
      *inbufp = save_inbuf;
      *inbytesleftp = save_inbytesleft;
      return 84;
    }
  if (s < 0xFFFF)
    {
      if (*outbytesleftp < 2)
 {
   *inbufp = save_inbuf;
   *inbytesleftp = save_inbytesleft;
   return 7;
 }
      outbuf[bigend ? 1 : 0] = (s & 0x00FF);
      outbuf[bigend ? 0 : 1] = (s & 0xFF00) >> 8;
      *outbufp += 2;
      *outbytesleftp -= 2;
      return 0;
    }
  else
    {
      cppchar_t hi, lo;
      if (*outbytesleftp < 4)
 {
   *inbufp = save_inbuf;
   *inbytesleftp = save_inbytesleft;
   return 7;
 }
      hi = (s - 0x10000) / 0x400 + 0xD800;
      lo = (s - 0x10000) % 0x400 + 0xDC00;
      outbuf[bigend ? 1 : 0] = (hi & 0x00FF);
      outbuf[bigend ? 0 : 1] = (hi & 0xFF00) >> 8;
      outbuf[bigend ? 3 : 2] = (lo & 0x00FF);
      outbuf[bigend ? 2 : 3] = (lo & 0xFF00) >> 8;
      *outbufp += 4;
      *outbytesleftp -= 4;
      return 0;
    }
}
static int
one_utf16_to_utf8 (iconv_t bigend, const uchar **inbufp, size_t *inbytesleftp,
     uchar **outbufp, size_t *outbytesleftp)
{
  cppchar_t s;
  const uchar *inbuf = *inbufp;
  int rval;
  if (*inbytesleftp < 2)
    return 22;
  s = inbuf[bigend ? 0 : 1] << 8;
  s += inbuf[bigend ? 1 : 0];
  if (s >= 0xDC00 && s <= 0xDFFF)
    return 84;
  else if (s >= 0xD800 && s <= 0xDBFF)
    {
      cppchar_t hi = s, lo;
      if (*inbytesleftp < 4)
 return 22;
      lo = inbuf[bigend ? 2 : 3] << 8;
      lo += inbuf[bigend ? 3 : 2];
      if (lo < 0xDC00 || lo > 0xDFFF)
 return 84;
      s = (hi - 0xD800) * 0x400 + (lo - 0xDC00) + 0x10000;
    }
  rval = one_cppchar_to_utf8 (s, outbufp, outbytesleftp);
  if (rval)
    return rval;
  if (s <= 0xFFFF)
    {
      *inbufp += 2;
      *inbytesleftp -= 2;
    }
  else
    {
      *inbufp += 4;
      *inbytesleftp -= 4;
    }
  return 0;
}
static unsigned char
conversion_loop (int (*const one_conversion)(iconv_t, const uchar **, size_t *,
          uchar **, size_t *),
   iconv_t cd, const uchar *from, size_t flen, struct _cpp_strbuf *to)
{
  const uchar *inbuf;
  uchar *outbuf;
  size_t inbytesleft, outbytesleft;
  int rval;
  inbuf = from;
  inbytesleft = flen;
  outbuf = to->text + to->len;
  outbytesleft = to->asize - to->len;
  for (;;)
    {
      do
 rval = one_conversion (cd, &inbuf, &inbytesleft,
          &outbuf, &outbytesleft);
      while (inbytesleft && !rval);
      if ((inbytesleft == 0))
 {
   to->len = to->asize - outbytesleft;
   return 1;
 }
      if (rval != 7)
 {
   (*__errno_location ()) = rval;
   return 0;
 }
      outbytesleft += 256;
      to->asize += 256;
      to->text = xrealloc (to->text, to->asize);
      outbuf = to->text + to->asize - outbytesleft;
    }
}
static unsigned char
convert_utf8_utf16 (iconv_t cd, const uchar *from, size_t flen,
      struct _cpp_strbuf *to)
{
  return conversion_loop (one_utf8_to_utf16, cd, from, flen, to);
}
static unsigned char
convert_utf8_utf32 (iconv_t cd, const uchar *from, size_t flen,
      struct _cpp_strbuf *to)
{
  return conversion_loop (one_utf8_to_utf32, cd, from, flen, to);
}
static unsigned char
convert_utf16_utf8 (iconv_t cd, const uchar *from, size_t flen,
      struct _cpp_strbuf *to)
{
  return conversion_loop (one_utf16_to_utf8, cd, from, flen, to);
}
static unsigned char
convert_utf32_utf8 (iconv_t cd, const uchar *from, size_t flen,
      struct _cpp_strbuf *to)
{
  return conversion_loop (one_utf32_to_utf8, cd, from, flen, to);
}
static unsigned char
convert_no_conversion (iconv_t cd ,
         const uchar *from, size_t flen, struct _cpp_strbuf *to)
{
  if (to->len + flen > to->asize)
    {
      to->asize = to->len + flen;
      to->text = xrealloc (to->text, to->asize);
    }
  memcpy (to->text + to->len, from, flen);
  to->len += flen;
  return 1;
}
static unsigned char
convert_using_iconv (iconv_t cd, const uchar *from, size_t flen,
       struct _cpp_strbuf *to)
{
  char *inbuf;
  char *outbuf;
  size_t inbytesleft, outbytesleft;
  if (iconv (cd, 0, 0, 0, 0) == (size_t)-1)
    return 0;
  inbuf = ( char *)from;
  inbytesleft = flen;
  outbuf = (char *)to->text + to->len;
  outbytesleft = to->asize - to->len;
  for (;;)
    {
      iconv (cd, &inbuf, &inbytesleft, &outbuf, &outbytesleft);
      if ((inbytesleft == 0))
 {
   to->len = to->asize - outbytesleft;
   return 1;
 }
      if ((*__errno_location ()) != 7)
 return 0;
      outbytesleft += 256;
      to->asize += 256;
      to->text = xrealloc (to->text, to->asize);
      outbuf = (char *)to->text + to->asize - outbytesleft;
    }
}
struct conversion
{
  const char *pair;
  convert_f func;
  iconv_t fake_cd;
};
static const struct conversion conversion_tab[] = {
  { "UTF-8/UTF-32LE", convert_utf8_utf32, (iconv_t)0 },
  { "UTF-8/UTF-32BE", convert_utf8_utf32, (iconv_t)1 },
  { "UTF-8/UTF-16LE", convert_utf8_utf16, (iconv_t)0 },
  { "UTF-8/UTF-16BE", convert_utf8_utf16, (iconv_t)1 },
  { "UTF-32LE/UTF-8", convert_utf32_utf8, (iconv_t)0 },
  { "UTF-32BE/UTF-8", convert_utf32_utf8, (iconv_t)1 },
  { "UTF-16LE/UTF-8", convert_utf16_utf8, (iconv_t)0 },
  { "UTF-16BE/UTF-8", convert_utf16_utf8, (iconv_t)1 }
};
static struct cset_converter
init_iconv_desc (cpp_reader *pfile, const char *to, const char *from)
{
  struct cset_converter ret;
  char *pair;
  size_t i;
  if (!strcasecmp (to, from))
    {
      ret.func = convert_no_conversion;
      ret.cd = (iconv_t) -1;
      return ret;
    }
  pair = C_alloca(strlen(to) + strlen(from) + 2);
  strcpy(pair, from);
  strcat(pair, "/");
  strcat(pair, to);
  for (i = 0; i < (sizeof (conversion_tab) / sizeof ((conversion_tab)[0])); i++)
    if (!strcasecmp (pair, conversion_tab[i].pair))
      {
 ret.func = conversion_tab[i].func;
 ret.cd = conversion_tab[i].fake_cd;
 return ret;
      }
  if (1)
    {
      ret.func = convert_using_iconv;
      ret.cd = iconv_open (to, from);
      if (ret.cd == (iconv_t) -1)
 {
   if ((*__errno_location ()) == 22)
     cpp_error (pfile, 0x03,
         "conversion from %s to %s not supported by iconv",
         from, to);
   else
     cpp_errno (pfile, 0x03, "iconv_open");
   ret.func = convert_no_conversion;
 }
    }
  else
    {
      cpp_error (pfile, 0x03,
   "no iconv implementation, cannot convert from %s to %s",
   from, to);
      ret.func = convert_no_conversion;
      ret.cd = (iconv_t) -1;
    }
  return ret;
}
void
cpp_init_iconv (cpp_reader *pfile)
{
  const char *ncset = ((pfile)->opts.narrow_charset);
  const char *wcset = ((pfile)->opts.wide_charset);
  const char *default_wcset;
  unsigned char be = ((pfile)->opts.bytes_big_endian);
  if (((pfile)->opts.wchar_precision) >= 32)
    default_wcset = be ? "UTF-32BE" : "UTF-32LE";
  else if (((pfile)->opts.wchar_precision) >= 16)
    default_wcset = be ? "UTF-16BE" : "UTF-16LE";
  else
   default_wcset = "UTF-8";
  if (!ncset)
    ncset = "UTF-8";
  if (!wcset)
    wcset = default_wcset;
  pfile->narrow_cset_desc = init_iconv_desc (pfile, ncset, "UTF-8");
  pfile->wide_cset_desc = init_iconv_desc (pfile, wcset, "UTF-8");
}
void
_cpp_destroy_iconv (cpp_reader *pfile)
{
  if (1)
    {
      if (pfile->narrow_cset_desc.func == convert_using_iconv)
 iconv_close (pfile->narrow_cset_desc.cd);
      if (pfile->wide_cset_desc.func == convert_using_iconv)
 iconv_close (pfile->wide_cset_desc.cd);
    }
}
static size_t
width_to_mask (size_t width)
{
  width = ((width) < ((8 * sizeof (cppchar_t))) ? (width) : ((8 * sizeof (cppchar_t))));
  if (width >= 8 * sizeof (size_t))
    return ~(size_t) 0;
  else
    return ((size_t) 1 << width) - 1;
}
static int
ucn_valid_in_identifier (cpp_reader *pfile, cppchar_t c)
{
  int mn, mx, md;
  mn = -1;
  mx = (sizeof (ucnranges) / sizeof ((ucnranges)[0]));
  while (mx - mn > 1)
    {
      md = (mn + mx) / 2;
      if (c < ucnranges[md].lo)
 mx = md;
      else if (c > ucnranges[md].hi)
 mn = md;
      else
 goto found;
    }
  return 0;
 found:
  if (((pfile)->opts.pedantic)
      && ((((pfile)->opts.c99) && !(ucnranges[md].flags & 1))
   || (((pfile)->opts.cplusplus)
       && !(ucnranges[md].flags & 2))))
    return 0;
  if (((pfile)->opts.c99) && (ucnranges[md].flags & 4))
    return 2;
  return 1;
}
cppchar_t
_cpp_valid_ucn (cpp_reader *pfile, const uchar **pstr,
  const uchar *limit, int identifier_pos)
{
  cppchar_t result, c;
  unsigned int length;
  const uchar *str = *pstr;
  const uchar *base = str - 2;
  if (!((pfile)->opts.cplusplus) && !((pfile)->opts.c99))
    cpp_error (pfile, 0x00,
        "universal character names are only valid in C++ and C99");
  else if (((pfile)->opts.warn_traditional) && identifier_pos == 0)
    cpp_error (pfile, 0x00,
        "the meaning of '\\%c' is different in traditional C",
        (int) str[-1]);
  if (str[-1] == 'u')
    length = 4;
  else if (str[-1] == 'U')
    length = 8;
  else
    abort();
  result = 0;
  do
    {
      c = *str;
      if (!(_sch_istable[(c) & 0xff] & (unsigned short)(_sch_isxdigit)))
 break;
      str++;
      result = (result << 4) + ((unsigned int) _hex_value[(unsigned char) (c)]);
    }
  while (--length && str < limit);
  *pstr = str;
  if (length)
    {
      cpp_error (pfile, 0x03,
   "incomplete universal character name %.*s",
   (int) (str - base), base);
      result = 1;
    }
  else if ((result < 0xa0
     && (result != 0x24 && result != 0x40 && result != 0x60))
    || (result & 0x80000000)
    || (result >= 0xD800 && result <= 0xDFFF))
    {
      cpp_error (pfile, 0x03,
   "%.*s is not a valid universal character",
   (int) (str - base), base);
      result = 1;
    }
  else if (identifier_pos)
    {
      int validity = ucn_valid_in_identifier (pfile, result);
      if (validity == 0)
 cpp_error (pfile, 0x03,
     "universal character %.*s is not valid in an identifier",
     (int) (str - base), base);
      else if (validity == 2 && identifier_pos == 1)
 cpp_error (pfile, 0x03,
   "universal character %.*s is not valid at the start of an identifier",
     (int) (str - base), base);
    }
  if (result == 0)
    result = 1;
  return result;
}
static const uchar *
convert_ucn (cpp_reader *pfile, const uchar *from, const uchar *limit,
      struct _cpp_strbuf *tbuf, unsigned char wide)
{
  cppchar_t ucn;
  uchar buf[6];
  uchar *bufp = buf;
  size_t bytesleft = 6;
  int rval;
  struct cset_converter cvt
    = wide ? pfile->wide_cset_desc : pfile->narrow_cset_desc;
  from++;
  ucn = _cpp_valid_ucn (pfile, &from, limit, 0);
  rval = one_cppchar_to_utf8 (ucn, &bufp, &bytesleft);
  if (rval)
    {
      (*__errno_location ()) = rval;
      cpp_errno (pfile, 0x03,
   "converting UCN to source character set");
    }
  else if (!cvt.func (cvt.cd, buf, 6 - bytesleft, tbuf))
    cpp_errno (pfile, 0x03,
        "converting UCN to execution character set");
  return from;
}
static void
emit_numeric_escape (cpp_reader *pfile, cppchar_t n,
       struct _cpp_strbuf *tbuf, unsigned char wide)
{
  if (wide)
    {
      unsigned char bigend = ((pfile)->opts.bytes_big_endian);
      size_t width = ((pfile)->opts.wchar_precision);
      size_t cwidth = ((pfile)->opts.char_precision);
      size_t cmask = width_to_mask (cwidth);
      size_t nbwc = width / cwidth;
      size_t i;
      size_t off = tbuf->len;
      cppchar_t c;
      if (tbuf->len + nbwc > tbuf->asize)
 {
   tbuf->asize += 256;
   tbuf->text = xrealloc (tbuf->text, tbuf->asize);
 }
      for (i = 0; i < nbwc; i++)
 {
   c = n & cmask;
   n >>= cwidth;
   tbuf->text[off + (bigend ? nbwc - i - 1 : i)] = c;
 }
      tbuf->len += nbwc;
    }
  else
    {
      if (tbuf->len + 1 > tbuf->asize)
 {
   tbuf->asize += 256;
   tbuf->text = xrealloc (tbuf->text, tbuf->asize);
 }
      tbuf->text[tbuf->len++] = n;
    }
}
static const uchar *
convert_hex (cpp_reader *pfile, const uchar *from, const uchar *limit,
      struct _cpp_strbuf *tbuf, unsigned char wide)
{
  cppchar_t c, n = 0, overflow = 0;
  int digits_found = 0;
  size_t width = (wide ? ((pfile)->opts.wchar_precision)
    : ((pfile)->opts.char_precision));
  size_t mask = width_to_mask (width);
  if (((pfile)->opts.warn_traditional))
    cpp_error (pfile, 0x00,
        "the meaning of '\\x' is different in traditional C");
  from++;
  while (from < limit)
    {
      c = *from;
      if (! (((unsigned int) _hex_value[(unsigned char) (c)]) != 99))
 break;
      from++;
      overflow |= n ^ (n << 4 >> 4);
      n = (n << 4) + ((unsigned int) _hex_value[(unsigned char) (c)]);
      digits_found = 1;
    }
  if (!digits_found)
    {
      cpp_error (pfile, 0x03,
   "\\x used with no following hex digits");
      return from;
    }
  if (overflow | (n != (n & mask)))
    {
      cpp_error (pfile, 0x02,
   "hex escape sequence out of range");
      n &= mask;
    }
  emit_numeric_escape (pfile, n, tbuf, wide);
  return from;
}
static const uchar *
convert_oct (cpp_reader *pfile, const uchar *from, const uchar *limit,
      struct _cpp_strbuf *tbuf, unsigned char wide)
{
  size_t count = 0;
  cppchar_t c, n = 0;
  size_t width = (wide ? ((pfile)->opts.wchar_precision)
    : ((pfile)->opts.char_precision));
  size_t mask = width_to_mask (width);
  unsigned char overflow = 0;
  while (from < limit && count++ < 3)
    {
      c = *from;
      if (c < '0' || c > '7')
 break;
      from++;
      overflow |= n ^ (n << 3 >> 3);
      n = (n << 3) + c - '0';
    }
  if (n != (n & mask))
    {
      cpp_error (pfile, 0x02,
   "octal escape sequence out of range");
      n &= mask;
    }
  emit_numeric_escape (pfile, n, tbuf, wide);
  return from;
}
static const uchar *
convert_escape (cpp_reader *pfile, const uchar *from, const uchar *limit,
  struct _cpp_strbuf *tbuf, unsigned char wide)
{
  static const uchar charconsts[] = { 7, 8, 27, 12, 10, 13, 9, 11 };
  uchar c;
  struct cset_converter cvt
    = wide ? pfile->wide_cset_desc : pfile->narrow_cset_desc;
  c = *from;
  switch (c)
    {
    case 'u': case 'U':
      return convert_ucn (pfile, from, limit, tbuf, wide);
    case 'x':
      return convert_hex (pfile, from, limit, tbuf, wide);
      break;
    case '0': case '1': case '2': case '3':
    case '4': case '5': case '6': case '7':
      return convert_oct (pfile, from, limit, tbuf, wide);
    case '\\': case '\'': case '"': case '?': break;
    case '(': case '{': case '[': case '%':
      if (((pfile)->opts.pedantic))
 goto unknown;
      break;
    case 'b': c = charconsts[1]; break;
    case 'f': c = charconsts[3]; break;
    case 'n': c = charconsts[4]; break;
    case 'r': c = charconsts[5]; break;
    case 't': c = charconsts[6]; break;
    case 'v': c = charconsts[7]; break;
    case 'a':
      if (((pfile)->opts.warn_traditional))
 cpp_error (pfile, 0x00,
     "the meaning of '\\a' is different in traditional C");
      c = charconsts[0];
      break;
    case 'e': case 'E':
      if (((pfile)->opts.pedantic))
 cpp_error (pfile, 0x02,
     "non-ISO-standard escape sequence, '\\%c'", (int) c);
      c = charconsts[2];
      break;
    default:
    unknown:
      if ((_sch_istable[(c) & 0xff] & (unsigned short)(_sch_isgraph)))
 cpp_error (pfile, 0x02,
     "unknown escape sequence '\\%c'", (int) c);
      else
 cpp_error (pfile, 0x02,
     "unknown escape sequence: '\\%03o'", (int) c);
    }
  if (!cvt.func (cvt.cd, &c, 1, tbuf))
    cpp_errno (pfile, 0x03,
        "converting escape sequence to execution character set");
  return from + 1;
}
unsigned char
cpp_interpret_string (cpp_reader *pfile, const cpp_string *from, size_t count,
        cpp_string *to, unsigned char wide)
{
  struct _cpp_strbuf tbuf;
  const uchar *p, *base, *limit;
  size_t i;
  struct cset_converter cvt
    = wide ? pfile->wide_cset_desc : pfile->narrow_cset_desc;
  tbuf.asize = ((256) > (from->len) ? (256) : (from->len));
  tbuf.text = xmalloc (tbuf.asize);
  tbuf.len = 0;
  for (i = 0; i < count; i++)
    {
      p = from[i].text;
      if (*p == 'L') p++;
      p++;
      limit = from[i].text + from[i].len - 1;
      for (;;)
 {
   base = p;
   while (p < limit && *p != '\\')
     p++;
   if (p > base)
     {
       if (!cvt.func (cvt.cd, base, p - base, &tbuf))
  goto fail;
     }
   if (p == limit)
     break;
   p = convert_escape (pfile, p + 1, limit, &tbuf, wide);
 }
    }
  emit_numeric_escape (pfile, 0, &tbuf, wide);
  tbuf.text = xrealloc (tbuf.text, tbuf.len);
  to->text = tbuf.text;
  to->len = tbuf.len;
  return 1;
 fail:
  cpp_errno (pfile, 0x03, "converting to execution character set");
  free (tbuf.text);
  return 0;
}
unsigned char
cpp_interpret_string_notranslate (cpp_reader *pfile, const cpp_string *from,
      size_t count, cpp_string *to, unsigned char wide)
{
  struct cset_converter save_narrow_cset_desc = pfile->narrow_cset_desc;
  unsigned char retval;
  pfile->narrow_cset_desc.func = convert_no_conversion;
  pfile->narrow_cset_desc.cd = (iconv_t) -1;
  retval = cpp_interpret_string (pfile, from, count, to, wide);
  pfile->narrow_cset_desc = save_narrow_cset_desc;
  return retval;
}
static cppchar_t
narrow_str_to_charconst (cpp_reader *pfile, cpp_string str,
    unsigned int *pchars_seen, int *unsignedp)
{
  size_t width = ((pfile)->opts.char_precision);
  size_t max_chars = ((pfile)->opts.int_precision) / width;
  size_t mask = width_to_mask (width);
  size_t i;
  cppchar_t result, c;
  unsigned char unsigned_p;
  result = 0;
  for (i = 0; i < str.len - 1; i++)
    {
      c = str.text[i] & mask;
      if (width < (8 * sizeof (cppchar_t)))
 result = (result << width) | c;
      else
 result = c;
    }
  if (i > max_chars)
    {
      i = max_chars;
      cpp_error (pfile, 0x00,
   "character constant too long for its type");
    }
  else if (i > 1 && ((pfile)->opts.warn_multichar))
    cpp_error (pfile, 0x00, "multi-character character constant");
  if (i > 1)
    unsigned_p = 0;
  else
    unsigned_p = ((pfile)->opts.unsigned_char);
  if (i > 1)
    width = ((pfile)->opts.int_precision);
  if (width < (8 * sizeof (cppchar_t)))
    {
      mask = ((cppchar_t) 1 << width) - 1;
      if (unsigned_p || !(result & (1 << (width - 1))))
 result &= mask;
      else
 result |= ~mask;
    }
  *pchars_seen = i;
  *unsignedp = unsigned_p;
  return result;
}
static cppchar_t
wide_str_to_charconst (cpp_reader *pfile, cpp_string str,
         unsigned int *pchars_seen, int *unsignedp)
{
  unsigned char bigend = ((pfile)->opts.bytes_big_endian);
  size_t width = ((pfile)->opts.wchar_precision);
  size_t cwidth = ((pfile)->opts.char_precision);
  size_t mask = width_to_mask (width);
  size_t cmask = width_to_mask (cwidth);
  size_t nbwc = width / cwidth;
  size_t off, i;
  cppchar_t result = 0, c;
  off = str.len - (nbwc * 2);
  result = 0;
  for (i = 0; i < nbwc; i++)
    {
      c = bigend ? str.text[off + i] : str.text[off + nbwc - i - 1];
      result = (result << cwidth) | (c & cmask);
    }
  if (off > 0)
    cpp_error (pfile, 0x00,
        "character constant too long for its type");
  if (width < (8 * sizeof (cppchar_t)))
    {
      if (((pfile)->opts.unsigned_wchar) || !(result & (1 << (width - 1))))
 result &= mask;
      else
 result |= ~mask;
    }
  *unsignedp = ((pfile)->opts.unsigned_wchar);
  *pchars_seen = 1;
  return result;
}
cppchar_t
cpp_interpret_charconst (cpp_reader *pfile, const cpp_token *token,
    unsigned int *pchars_seen, int *unsignedp)
{
  cpp_string str = { 0, 0 };
  unsigned char wide = (token->type == CPP_WCHAR);
  cppchar_t result;
  if (token->val.str.len == (size_t) (2 + wide))
    {
      cpp_error (pfile, 0x03, "empty character constant");
      return 0;
    }
  else if (!cpp_interpret_string (pfile, &token->val.str, 1, &str, wide))
    return 0;
  if (wide)
    result = wide_str_to_charconst (pfile, str, pchars_seen, unsignedp);
  else
    result = narrow_str_to_charconst (pfile, str, pchars_seen, unsignedp);
  if (str.text != token->val.str.text)
    free ((void *)str.text);
  return result;
}
uchar *
_cpp_convert_input (cpp_reader *pfile, const char *input_charset,
      uchar *input, size_t size, size_t len, off_t *st_size)
{
  struct cset_converter input_cset;
  struct _cpp_strbuf to;
  input_cset = init_iconv_desc (pfile, "UTF-8", input_charset);
  if (input_cset.func == convert_no_conversion)
    {
      to.text = input;
      to.asize = size;
      to.len = len;
    }
  else
    {
      to.asize = ((65536) > (len) ? (65536) : (len));
      to.text = xmalloc (to.asize);
      to.len = 0;
      if (!input_cset.func (input_cset.cd, input, len, &to))
 cpp_error (pfile, 0x03,
     "failure to convert %s to %s",
     ((pfile)->opts.input_charset), "UTF-8");
      free (input);
    }
  if (input_cset.func == convert_using_iconv)
    iconv_close (input_cset.cd);
  if (to.len + 4096 < to.asize || to.len >= to.asize)
    to.text = xrealloc (to.text, to.len + 1);
  to.text[to.len] = '\n';
  *st_size = to.len;
  return to.text;
}
const char *
_cpp_default_encoding (void)
{
  const char *current_encoding = ((void *)0);
  if (current_encoding == ((void *)0) || *current_encoding == '\0')
    current_encoding = "UTF-8";
  return current_encoding;
}
struct depends;
extern struct depends *deps_init (void);
extern void deps_free (struct depends *);
extern void deps_add_vpath (struct depends *, const char *);
extern void deps_add_target (struct depends *, const char *, int);
extern void deps_add_default_target (struct depends *, const char *);
extern void deps_add_dep (struct depends *, const char *);
extern void deps_write (const struct depends *, FILE *, unsigned int);
extern int deps_save (struct depends *, FILE *);
extern int deps_restore (struct depends *, FILE *, const char *);
extern void deps_phony_targets (const struct depends *, FILE *);
struct if_stack
{
  struct if_stack *next;
  unsigned int line;
  const cpp_hashnode *mi_cmacro;
  unsigned char skip_elses;
  unsigned char was_skipping;
  int type;
};
typedef void (*pragma_cb) (cpp_reader *);
struct pragma_entry
{
  struct pragma_entry *next;
  const cpp_hashnode *pragma;
  int is_nspace;
  union {
    pragma_cb handler;
    struct pragma_entry *space;
  } u;
};
typedef void (*directive_handler) (cpp_reader *);
typedef struct directive directive;
struct directive
{
  directive_handler handler;
  const uchar *name;
  unsigned short length;
  unsigned char origin;
  unsigned char flags;
};
static void skip_rest_of_line (cpp_reader *);
static void check_eol (cpp_reader *);
static void start_directive (cpp_reader *);
static void prepare_directive_trad (cpp_reader *);
static void end_directive (cpp_reader *, int);
static void directive_diagnostics (cpp_reader *, const directive *, int);
static void run_directive (cpp_reader *, int, const char *, size_t);
static char *glue_header_name (cpp_reader *);
static const char *parse_include (cpp_reader *, int *);
static void push_conditional (cpp_reader *, int, int, const cpp_hashnode *);
static unsigned int read_flag (cpp_reader *, unsigned int);
static int strtoul_for_line (const uchar *, unsigned int, unsigned long *);
static void do_diagnostic (cpp_reader *, int, int);
static cpp_hashnode *lex_macro_node (cpp_reader *);
static int undefine_macros (cpp_reader *, cpp_hashnode *, void *);
static void do_include_common (cpp_reader *, enum include_type);
static struct pragma_entry *lookup_pragma_entry (struct pragma_entry *,
                                                 const cpp_hashnode *);
static struct pragma_entry *insert_pragma_entry (cpp_reader *,
                                                 struct pragma_entry **,
                                                 const cpp_hashnode *,
                                                 pragma_cb);
static int count_registered_pragmas (struct pragma_entry *);
static char ** save_registered_pragmas (struct pragma_entry *, char **);
static char ** restore_registered_pragmas (cpp_reader *, struct pragma_entry *,
                                           char **);
static void do_pragma_once (cpp_reader *);
static void do_pragma_poison (cpp_reader *);
static void do_pragma_system_header (cpp_reader *);
static void do_pragma_dependency (cpp_reader *);
static void do_linemarker (cpp_reader *);
static const cpp_token *get_token_no_padding (cpp_reader *);
static const cpp_token *get__Pragma_string (cpp_reader *);
static void destringize_and_run (cpp_reader *, const cpp_string *);
static int parse_answer (cpp_reader *, struct answer **, int);
static cpp_hashnode *parse_assertion (cpp_reader *, struct answer **, int);
static struct answer ** find_answer (cpp_hashnode *, const struct answer *);
static void handle_assertion (cpp_reader *, const char *, int);
static void do_define (cpp_reader *); static void do_include (cpp_reader *); static void do_endif (cpp_reader *); static void do_ifdef (cpp_reader *); static void do_if (cpp_reader *); static void do_else (cpp_reader *); static void do_ifndef (cpp_reader *); static void do_undef (cpp_reader *); static void do_line (cpp_reader *); static void do_elif (cpp_reader *); static void do_error (cpp_reader *); static void do_pragma (cpp_reader *); static void do_warning (cpp_reader *); static void do_include_next (cpp_reader *); static void do_ident (cpp_reader *); static void do_import (cpp_reader *); static void do_assert (cpp_reader *); static void do_unassert (cpp_reader *); static void do_sccs (cpp_reader *);
enum
{
  T_DEFINE = 0, T_INCLUDE, T_ENDIF, T_IFDEF, T_IF, T_ELSE, T_IFNDEF, T_UNDEF, T_LINE, T_ELIF, T_ERROR, T_PRAGMA, T_WARNING, T_INCLUDE_NEXT, T_IDENT, T_IMPORT, T_ASSERT, T_UNASSERT, T_SCCS,
  N_DIRECTIVES
};
static const directive dtable[] =
{
{ do_define, (const uchar *) "define", sizeof "define" - 1, 0, (1 << 3) }, { do_include, (const uchar *) "include", sizeof "include" - 1, 0, (1 << 2) | (1 << 4) }, { do_endif, (const uchar *) "endif", sizeof "endif" - 1, 0, (1 << 0) }, { do_ifdef, (const uchar *) "ifdef", sizeof "ifdef" - 1, 0, (1 << 0) | (1 << 1) }, { do_if, (const uchar *) "if", sizeof "if" - 1, 0, (1 << 0) | (1 << 1) | (1 << 4) }, { do_else, (const uchar *) "else", sizeof "else" - 1, 0, (1 << 0) }, { do_ifndef, (const uchar *) "ifndef", sizeof "ifndef" - 1, 0, (1 << 0) | (1 << 1) }, { do_undef, (const uchar *) "undef", sizeof "undef" - 1, 0, (1 << 3) }, { do_line, (const uchar *) "line", sizeof "line" - 1, 0, (1 << 4) }, { do_elif, (const uchar *) "elif", sizeof "elif" - 1, 1, (1 << 0) | (1 << 4) }, { do_error, (const uchar *) "error", sizeof "error" - 1, 1, 0 }, { do_pragma, (const uchar *) "pragma", sizeof "pragma" - 1, 1, (1 << 3) }, { do_warning, (const uchar *) "warning", sizeof "warning" - 1, 2, 0 }, { do_include_next, (const uchar *) "include_next", sizeof "include_next" - 1, 2, (1 << 2) | (1 << 4) }, { do_ident, (const uchar *) "ident", sizeof "ident" - 1, 2, (1 << 3) }, { do_import, (const uchar *) "import", sizeof "import" - 1, 2, (1 << 2) | (1 << 4) }, { do_assert, (const uchar *) "assert", sizeof "assert" - 1, 2, 0 }, { do_unassert, (const uchar *) "unassert", sizeof "unassert" - 1, 2, 0 }, { do_sccs, (const uchar *) "sccs", sizeof "sccs" - 1, 2, 0 }
};
static const directive linemarker_dir =
{
  do_linemarker, (const uchar *)"#", 1, 0, (1 << 3)
};
static void
skip_rest_of_line (cpp_reader *pfile)
{
  while (pfile->context->prev)
    _cpp_pop_context (pfile);
  if (! (pfile->cur_token[-1].type == CPP_EOF))
    while (_cpp_lex_token (pfile)->type != CPP_EOF)
      ;
}
static void
check_eol (cpp_reader *pfile)
{
  if (! (pfile->cur_token[-1].type == CPP_EOF) && _cpp_lex_token (pfile)->type != CPP_EOF)
    cpp_error (pfile, 0x02, "extra tokens at end of #%s directive",
        pfile->directive1->name);
}
static void
start_directive (cpp_reader *pfile)
{
  pfile->state.in_directive = 1;
  pfile->state.save_comments = 0;
  pfile->directive_line = pfile->line_table->highest_line;
}
static void
end_directive (cpp_reader *pfile, int skip_line)
{
  if (((pfile)->opts.traditional))
    {
      pfile->state.prevent_expansion--;
      if (pfile->directive1 != &dtable[T_DEFINE])
 _cpp_remove_overlay (pfile);
    }
  else if (skip_line)
    {
      skip_rest_of_line (pfile);
      if (!pfile->keep_tokens)
 {
   pfile->cur_run = &pfile->base_run;
   pfile->cur_token = pfile->base_run.base;
 }
    }
  pfile->state.save_comments = ! ((pfile)->opts.discard_comments);
  pfile->state.in_directive = 0;
  pfile->state.in_expression = 0;
  pfile->state.angled_headers = 0;
  pfile->directive1 = 0;
}
static void
prepare_directive_trad (cpp_reader *pfile)
{
  if (pfile->directive1 != &dtable[T_DEFINE])
    {
      unsigned char no_expand = (pfile->directive1
   && ! (pfile->directive1->flags & (1 << 4)));
      unsigned char was_skipping = pfile->state.skipping;
      pfile->state.in_expression = (pfile->directive1 == &dtable[T_IF]
        || pfile->directive1 == &dtable[T_ELIF]);
      if (pfile->state.in_expression)
 pfile->state.skipping = 0;
      if (no_expand)
 pfile->state.prevent_expansion++;
      _cpp_scan_out_logical_line (pfile, ((void *)0));
      if (no_expand)
 pfile->state.prevent_expansion--;
      pfile->state.skipping = was_skipping;
      _cpp_overlay_buffer (pfile, pfile->out.base,
      pfile->out.cur - pfile->out.base);
    }
  pfile->state.prevent_expansion++;
}
static void
directive_diagnostics (cpp_reader *pfile, const directive *dir, int indented)
{
  if (((pfile)->opts.pedantic)
      && ! pfile->state.skipping
      && dir->origin == 2)
    cpp_error (pfile, 0x02, "#%s is a GCC extension", dir->name);
  if (((pfile)->opts.warn_traditional))
    {
      if (dir == &dtable[T_ELIF])
 cpp_error (pfile, 0x00,
     "suggest not using #elif in traditional C");
      else if (indented && dir->origin == 0)
 cpp_error (pfile, 0x00,
     "traditional C ignores #%s with the # indented",
     dir->name);
      else if (!indented && dir->origin != 0)
 cpp_error (pfile, 0x00,
     "suggest hiding #%s from traditional C with an indented #",
     dir->name);
    }
}
int
_cpp_handle_directive (cpp_reader *pfile, int indented)
{
  const directive *dir = 0;
  const cpp_token *dname;
  unsigned char was_parsing_args = pfile->state.parsing_args;
  unsigned char was_discarding_output = pfile->state.discarding_output;
  int skip = 1;
  if (was_discarding_output)
    pfile->state.prevent_expansion = 0;
  if (was_parsing_args)
    {
      if (((pfile)->opts.pedantic))
 cpp_error (pfile, 0x02,
      "embedding a directive within macro arguments is not portable");
      pfile->state.parsing_args = 0;
      pfile->state.prevent_expansion = 0;
    }
  start_directive (pfile);
  dname = _cpp_lex_token (pfile);
  if (dname->type == CPP_NAME)
    {
      if (dname->val.node->is_directive)
 dir = &dtable[dname->val.node->directive_index];
    }
  else if (dname->type == CPP_NUMBER && ((pfile)->opts.lang) != CLK_ASM)
    {
      dir = &linemarker_dir;
      if (((pfile)->opts.pedantic) && ! ((pfile)->opts.preprocessed)
   && ! pfile->state.skipping)
 cpp_error (pfile, 0x02,
     "style of line directive is a GCC extension");
    }
  if (dir)
    {
      if (! (dir->flags & (1 << 1)))
 pfile->mi_valid = 0;
      if (((pfile)->opts.preprocessed)
   && (indented || !(dir->flags & (1 << 3))))
 {
   skip = 0;
   dir = 0;
 }
      else
 {
   pfile->state.angled_headers = dir->flags & (1 << 2);
   pfile->state.directive_wants_padding = dir->flags & (1 << 2);
   if (! ((pfile)->opts.preprocessed))
     directive_diagnostics (pfile, dir, indented);
   if (pfile->state.skipping && !(dir->flags & (1 << 0)))
     dir = 0;
 }
    }
  else if (dname->type == CPP_EOF)
    ;
  else
    {
      if (((pfile)->opts.lang) == CLK_ASM)
 skip = 0;
      else if (!pfile->state.skipping)
 cpp_error (pfile, 0x03, "invalid preprocessing directive #%s",
     cpp_token_as_text (pfile, dname));
    }
  pfile->directive1 = dir;
  if (((pfile)->opts.traditional))
    prepare_directive_trad (pfile);
  if (dir)
    pfile->directive1->handler (pfile);
  else if (skip == 0)
    _cpp_backup_tokens (pfile, 1);
  end_directive (pfile, skip);
  if (was_parsing_args)
    {
      pfile->state.parsing_args = 2;
      pfile->state.prevent_expansion = 1;
    }
  if (was_discarding_output)
    pfile->state.prevent_expansion = 1;
  return skip;
}
static void
run_directive (cpp_reader *pfile, int dir_no, const char *buf, size_t count)
{
  cpp_push_buffer (pfile, (const uchar *) buf, count,
                       1);
  if (dir_no == T_PRAGMA)
    pfile->buffer->file = pfile->buffer->prev->file;
  start_directive (pfile);
  _cpp_clean_line (pfile);
  pfile->directive1 = &dtable[dir_no];
  if (((pfile)->opts.traditional))
    prepare_directive_trad (pfile);
  pfile->directive1->handler (pfile);
  end_directive (pfile, 1);
  if (dir_no == T_PRAGMA)
    pfile->buffer->file = ((void *)0);
  _cpp_pop_buffer (pfile);
}
static cpp_hashnode *
lex_macro_node (cpp_reader *pfile)
{
  const cpp_token *token = _cpp_lex_token (pfile);
  if (token->type == CPP_NAME)
    {
      cpp_hashnode *node = token->val.node;
      if (node == pfile->spec_nodes.n_defined)
 cpp_error (pfile, 0x03,
     "\"defined\" cannot be used as a macro name");
      else if (! (node->flags & (1 << 1)))
 return node;
    }
  else if (token->flags & (1 << 4))
    cpp_error (pfile, 0x03,
       "\"%s\" cannot be used as a macro name as it is an operator in C++",
        ((&(token->val.node)->ident)->str));
  else if (token->type == CPP_EOF)
    cpp_error (pfile, 0x03, "no macro name given in #%s directive",
        pfile->directive1->name);
  else
    cpp_error (pfile, 0x03, "macro names must be identifiers");
  return ((void *)0);
}
static void
do_define (cpp_reader *pfile)
{
  cpp_hashnode *node = lex_macro_node (pfile);
  if (node)
    {
      pfile->state.save_comments =
 ! ((pfile)->opts.discard_comments_in_macro_exp);
      if (_cpp_create_definition (pfile, node))
 if (pfile->cb.define)
   pfile->cb.define (pfile, pfile->directive_line, node);
    }
}
static void
do_undef (cpp_reader *pfile)
{
  cpp_hashnode *node = lex_macro_node (pfile);
  if (node)
    {
      if (pfile->cb.undef)
 pfile->cb.undef (pfile, pfile->directive_line, node);
      if (node->type == NT_MACRO)
 {
   if (node->flags & (1 << 4))
     cpp_error (pfile, 0x00,
         "undefining \"%s\"", ((&(node)->ident)->str));
   if (((pfile)->opts.warn_unused_macros))
     _cpp_warn_if_unused_macro (pfile, node, ((void *)0));
   _cpp_free_definition (node);
 }
    }
  check_eol (pfile);
}
static int
undefine_macros (cpp_reader *pfile , cpp_hashnode *h,
   void *data_p )
{
  h->type = NT_VOID;
  h->flags &= ~((1 << 1)|(1 << 2)|(1 << 5));
  return 1;
}
void
cpp_undef_all (cpp_reader *pfile)
{
  cpp_forall_identifiers (pfile, undefine_macros, ((void *)0));
}
static char *
glue_header_name (cpp_reader *pfile)
{
  const cpp_token *token;
  char *buffer;
  size_t len, total_len = 0, capacity = 1024;
  buffer = xmalloc (capacity);
  for (;;)
    {
      token = get_token_no_padding (pfile);
      if (token->type == CPP_GREATER)
 break;
      if (token->type == CPP_EOF)
 {
   cpp_error (pfile, 0x03, "missing terminating > character");
   break;
 }
      len = cpp_token_len (token) + 2;
      if (total_len + len > capacity)
 {
   capacity = (capacity + len) * 2;
   buffer = xrealloc (buffer, capacity);
 }
      if (token->flags & (1 << 0))
 buffer[total_len++] = ' ';
      total_len = (cpp_spell_token (pfile, token, (uchar *) &buffer[total_len])
     - (uchar *) buffer);
    }
  buffer[total_len] = '\0';
  return buffer;
}
static const char *
parse_include (cpp_reader *pfile, int *pangle_brackets)
{
  char *fname;
  const cpp_token *header1;
  header1 = get_token_no_padding (pfile);
  if (header1->type == CPP_STRING || header1->type == CPP_HEADER_NAME)
    {
      fname = xmalloc (header1->val.str.len - 1);
      memcpy (fname, header1->val.str.text + 1, header1->val.str.len - 2);
      fname[header1->val.str.len - 2] = '\0';
      *pangle_brackets = header1->type == CPP_HEADER_NAME;
    }
  else if (header1->type == CPP_LESS)
    {
      fname = glue_header_name (pfile);
      *pangle_brackets = 1;
    }
  else
    {
      const unsigned char *dir;
      if (pfile->directive1 == &dtable[T_PRAGMA])
 dir = (const uchar *)"pragma dependency";
      else
 dir = pfile->directive1->name;
      cpp_error (pfile, 0x03, "#%s expects \"FILENAME\" or <FILENAME>",
   dir);
      return ((void *)0);
    }
  check_eol (pfile);
  return fname;
}
static void
do_include_common (cpp_reader *pfile, enum include_type type)
{
  const char *fname;
  int angle_brackets;
  fname = parse_include (pfile, &angle_brackets);
  if (!fname)
    return;
  if (pfile->line_table->depth >= 200)
    cpp_error (pfile, 0x03, "#include nested too deeply");
  else
    {
      skip_rest_of_line (pfile);
      if (pfile->cb.include)
 pfile->cb.include (pfile, pfile->directive_line,
      pfile->directive1->name, fname, angle_brackets);
      _cpp_stack_include (pfile, fname, angle_brackets, type);
    }
  free ((void *) fname);
}
static void
do_include (cpp_reader *pfile)
{
  do_include_common (pfile, IT_INCLUDE);
}
static void
do_import (cpp_reader *pfile)
{
  do_include_common (pfile, IT_IMPORT);
}
static void
do_include_next (cpp_reader *pfile)
{
  enum include_type type = IT_INCLUDE_NEXT;
  if (! pfile->buffer->prev)
    {
      cpp_error (pfile, 0x00,
   "#include_next in primary source file");
      type = IT_INCLUDE;
    }
  do_include_common (pfile, type);
}
static unsigned int
read_flag (cpp_reader *pfile, unsigned int last)
{
  const cpp_token *token = _cpp_lex_token (pfile);
  if (token->type == CPP_NUMBER && token->val.str.len == 1)
    {
      unsigned int flag = token->val.str.text[0] - '0';
      if (flag > last && flag <= 4
   && (flag != 4 || last == 3)
   && (flag != 2 || last == 0))
 return flag;
    }
  if (token->type != CPP_EOF)
    cpp_error (pfile, 0x03, "invalid flag \"%s\" in line directive",
        cpp_token_as_text (pfile, token));
  return 0;
}
static int
strtoul_for_line (const uchar *str, unsigned int len, long unsigned int *nump)
{
  unsigned long reg = 0;
  uchar c;
  while (len--)
    {
      c = *str++;
      if (!(_sch_istable[(c) & 0xff] & (unsigned short)(_sch_isdigit)))
 return 1;
      reg *= 10;
      reg += c - '0';
    }
  *nump = reg;
  return 0;
}
static void
do_line (cpp_reader *pfile)
{
  const struct line_maps *line_table = pfile->line_table;
  const struct line_map *map = &line_table->maps[line_table->used - 1];
  const cpp_token *token;
  const char *new_file = map->to_file;
  unsigned long new_lineno;
  unsigned int cap = ((pfile)->opts.c99) ? 2147483647 : 32767;
  token = cpp_get_token (pfile);
  if (token->type != CPP_NUMBER
      || strtoul_for_line (token->val.str.text, token->val.str.len,
      &new_lineno))
    {
      cpp_error (pfile, 0x03,
   "\"%s\" after #line is not a positive integer",
   cpp_token_as_text (pfile, token));
      return;
    }
  if (((pfile)->opts.pedantic) && (new_lineno == 0 || new_lineno > cap))
    cpp_error (pfile, 0x02, "line number out of range");
  token = cpp_get_token (pfile);
  if (token->type == CPP_STRING)
    {
      cpp_string s = { 0, 0 };
      if (cpp_interpret_string_notranslate (pfile, &token->val.str, 1,
         &s, 0))
 new_file = (const char *)s.text;
      check_eol (pfile);
    }
  else if (token->type != CPP_EOF)
    {
      cpp_error (pfile, 0x03, "\"%s\" is not a valid filename",
   cpp_token_as_text (pfile, token));
      return;
    }
  skip_rest_of_line (pfile);
  _cpp_do_file_change (pfile, LC_RENAME, new_file, new_lineno,
         map->sysp);
}
static void
do_linemarker (cpp_reader *pfile)
{
  const struct line_maps *line_table = pfile->line_table;
  const struct line_map *map = &line_table->maps[line_table->used - 1];
  const cpp_token *token;
  const char *new_file = map->to_file;
  unsigned long new_lineno;
  unsigned int new_sysp = map->sysp;
  enum lc_reason reason = LC_RENAME;
  int flag;
  _cpp_backup_tokens (pfile, 1);
  token = cpp_get_token (pfile);
  if (token->type != CPP_NUMBER
      || strtoul_for_line (token->val.str.text, token->val.str.len,
      &new_lineno))
    {
      cpp_error (pfile, 0x03,
   "\"%s\" after # is not a positive integer",
   cpp_token_as_text (pfile, token));
      return;
    }
  token = cpp_get_token (pfile);
  if (token->type == CPP_STRING)
    {
      cpp_string s = { 0, 0 };
      if (cpp_interpret_string_notranslate (pfile, &token->val.str,
         1, &s, 0))
 new_file = (const char *)s.text;
      new_sysp = 0;
      flag = read_flag (pfile, 0);
      if (flag == 1)
 {
   reason = LC_ENTER;
   _cpp_fake_include (pfile, new_file);
   flag = read_flag (pfile, flag);
 }
      else if (flag == 2)
 {
   reason = LC_LEAVE;
   flag = read_flag (pfile, flag);
 }
      if (flag == 3)
 {
   new_sysp = 1;
   flag = read_flag (pfile, flag);
   if (flag == 4)
     new_sysp = 2;
   pfile->buffer->sysp = new_sysp;
 }
      check_eol (pfile);
    }
  else if (token->type != CPP_EOF)
    {
      cpp_error (pfile, 0x03, "\"%s\" is not a valid filename",
   cpp_token_as_text (pfile, token));
      return;
    }
  skip_rest_of_line (pfile);
  _cpp_do_file_change (pfile, reason, new_file, new_lineno, new_sysp);
}
void
_cpp_do_file_change (cpp_reader *pfile, enum lc_reason reason,
       const char *to_file, unsigned int file_line,
       unsigned int sysp)
{
  const struct line_map *map = linemap_add (pfile->line_table, reason, sysp,
         to_file, file_line);
  if (map != ((void *)0))
    linemap_line_start (pfile->line_table, map->to_line, 127);
  if (pfile->cb.file_change)
    pfile->cb.file_change (pfile, map);
}
static void
do_diagnostic (cpp_reader *pfile, int code, int print_dir)
{
  if (_cpp_begin_message (pfile, code, pfile->cur_token[-1].src_loc, 0))
    {
      if (print_dir)
 fprintf (stderr, "#%s ", pfile->directive1->name);
      pfile->state.prevent_expansion++;
      cpp_output_line (pfile, stderr);
      pfile->state.prevent_expansion--;
    }
}
static void
do_error (cpp_reader *pfile)
{
  do_diagnostic (pfile, 0x03, 1);
}
static void
do_warning (cpp_reader *pfile)
{
  do_diagnostic (pfile, 0x01, 1);
}
static void
do_ident (cpp_reader *pfile)
{
  const cpp_token *str = cpp_get_token (pfile);
  if (str->type != CPP_STRING)
    cpp_error (pfile, 0x03, "invalid #ident directive");
  else if (pfile->cb.ident)
    pfile->cb.ident (pfile, pfile->directive_line, &str->val.str);
  check_eol (pfile);
}
static struct pragma_entry *
lookup_pragma_entry (struct pragma_entry *chain, const cpp_hashnode *pragma)
{
  while (chain && chain->pragma != pragma)
    chain = chain->next;
  return chain;
}
static struct pragma_entry *
insert_pragma_entry (cpp_reader *pfile, struct pragma_entry **chain,
       const cpp_hashnode *pragma, pragma_cb handler)
{
  struct pragma_entry *new;
  new = (struct pragma_entry *)
    _cpp_aligned_alloc (pfile, sizeof (struct pragma_entry));
  new->pragma = pragma;
  if (handler)
    {
      new->is_nspace = 0;
      new->u.handler = handler;
    }
  else
    {
      new->is_nspace = 1;
      new->u.space = ((void *)0);
    }
  new->next = *chain;
  *chain = new;
  return new;
}
void
cpp_register_pragma (cpp_reader *pfile, const char *space, const char *name,
       pragma_cb handler)
{
  struct pragma_entry **chain = &pfile->pragmas;
  struct pragma_entry *entry;
  const cpp_hashnode *node;
  if (!handler)
    abort ();
  if (space)
    {
      node = cpp_lookup (pfile, (const uchar *) space, strlen (space));
      entry = lookup_pragma_entry (*chain, node);
      if (!entry)
 entry = insert_pragma_entry (pfile, chain, node, ((void *)0));
      else if (!entry->is_nspace)
 goto clash;
      chain = &entry->u.space;
    }
  node = cpp_lookup (pfile, (const uchar *) name, strlen (name));
  entry = lookup_pragma_entry (*chain, node);
  if (entry)
    {
      if (entry->is_nspace)
 clash:
 cpp_error (pfile, 0x04,
   "registering \"%s\" as both a pragma and a pragma namespace",
   ((&(node)->ident)->str));
      else if (space)
 cpp_error (pfile, 0x04, "#pragma %s %s is already registered",
     space, name);
      else
 cpp_error (pfile, 0x04, "#pragma %s is already registered", name);
    }
  else
    insert_pragma_entry (pfile, chain, node, handler);
}
void
_cpp_init_internal_pragmas (cpp_reader *pfile)
{
  cpp_register_pragma (pfile, 0, "once", do_pragma_once);
  cpp_register_pragma (pfile, "GCC", "poison", do_pragma_poison);
  cpp_register_pragma (pfile, "GCC", "system_header", do_pragma_system_header);
  cpp_register_pragma (pfile, "GCC", "dependency", do_pragma_dependency);
}
static int
count_registered_pragmas (struct pragma_entry *pe)
{
  int ct = 0;
  for (; pe != ((void *)0); pe = pe->next)
    {
      if (pe->is_nspace)
 ct += count_registered_pragmas (pe->u.space);
      ct++;
    }
  return ct;
}
static char **
save_registered_pragmas (struct pragma_entry *pe, char **sd)
{
  for (; pe != ((void *)0); pe = pe->next)
    {
      if (pe->is_nspace)
 sd = save_registered_pragmas (pe->u.space, sd);
      *sd++ = xmemdup (((&pe->pragma->ident)->str),
         ((&pe->pragma->ident)->len),
         ((&pe->pragma->ident)->len) + 1);
    }
  return sd;
}
char **
_cpp_save_pragma_names (cpp_reader *pfile)
{
  int ct = count_registered_pragmas (pfile->pragmas);
  char **result = (char * *) xmalloc (sizeof(char *) * (ct));
  (void) save_registered_pragmas (pfile->pragmas, result);
  return result;
}
static char **
restore_registered_pragmas (cpp_reader *pfile, struct pragma_entry *pe,
       char **sd)
{
  for (; pe != ((void *)0); pe = pe->next)
    {
      if (pe->is_nspace)
 sd = restore_registered_pragmas (pfile, pe->u.space, sd);
      pe->pragma = cpp_lookup (pfile, (const uchar *) *sd, strlen (*sd));
      free (*sd);
      sd++;
    }
  return sd;
}
void
_cpp_restore_pragma_names (cpp_reader *pfile, char **saved)
{
  (void) restore_registered_pragmas (pfile, pfile->pragmas, saved);
  free (saved);
}
static void
do_pragma (cpp_reader *pfile)
{
  const struct pragma_entry *p = ((void *)0);
  const cpp_token *token, *pragma_token = pfile->cur_token;
  unsigned int count = 1;
  pfile->state.prevent_expansion++;
  token = cpp_get_token (pfile);
  if (token->type == CPP_NAME)
    {
      p = lookup_pragma_entry (pfile->pragmas, token->val.node);
      if (p && p->is_nspace)
 {
   count = 2;
   token = cpp_get_token (pfile);
   if (token->type == CPP_NAME)
     p = lookup_pragma_entry (p->u.space, token->val.node);
   else
     p = ((void *)0);
 }
    }
  if (p)
    {
      if (pfile->cb.line_change)
 (*pfile->cb.line_change) (pfile, pragma_token, 0);
      (*p->u.handler) (pfile);
    }
  else if (pfile->cb.def_pragma)
    {
      _cpp_backup_tokens (pfile, count);
      pfile->cb.def_pragma (pfile, pfile->directive_line);
    }
  pfile->state.prevent_expansion--;
}
static void
do_pragma_once (cpp_reader *pfile)
{
  if (pfile->buffer->prev == ((void *)0))
    cpp_error (pfile, 0x00, "#pragma once in main file");
  check_eol (pfile);
  _cpp_mark_file_once_only (pfile, pfile->buffer->file);
}
static void
do_pragma_poison (cpp_reader *pfile)
{
  const cpp_token *tok;
  cpp_hashnode *hp;
  pfile->state.poisoned_ok = 1;
  for (;;)
    {
      tok = _cpp_lex_token (pfile);
      if (tok->type == CPP_EOF)
 break;
      if (tok->type != CPP_NAME)
 {
   cpp_error (pfile, 0x03,
       "invalid #pragma GCC poison directive");
   break;
 }
      hp = tok->val.node;
      if (hp->flags & (1 << 1))
 continue;
      if (hp->type == NT_MACRO)
 cpp_error (pfile, 0x00, "poisoning existing macro \"%s\"",
     ((&(hp)->ident)->str));
      _cpp_free_definition (hp);
      hp->flags |= (1 << 1) | (1 << 3);
    }
  pfile->state.poisoned_ok = 0;
}
static void
do_pragma_system_header (cpp_reader *pfile)
{
  cpp_buffer *buffer = pfile->buffer;
  if (buffer->prev == 0)
    cpp_error (pfile, 0x00,
        "#pragma system_header ignored outside include file");
  else
    {
      check_eol (pfile);
      skip_rest_of_line (pfile);
      cpp_make_system_header (pfile, 1, 0);
    }
}
static void
do_pragma_dependency (cpp_reader *pfile)
{
  const char *fname;
  int angle_brackets, ordering;
  fname = parse_include (pfile, &angle_brackets);
  if (!fname)
    return;
  ordering = _cpp_compare_file_date (pfile, fname, angle_brackets);
  if (ordering < 0)
    cpp_error (pfile, 0x00, "cannot find source file %s", fname);
  else if (ordering > 0)
    {
      cpp_error (pfile, 0x00,
   "current file is older than %s", fname);
      if (cpp_get_token (pfile)->type != CPP_EOF)
 {
   _cpp_backup_tokens (pfile, 1);
   do_diagnostic (pfile, 0x00, 0);
 }
    }
  free ((void *) fname);
}
static const cpp_token *
get_token_no_padding (cpp_reader *pfile)
{
  for (;;)
    {
      const cpp_token *result = cpp_get_token (pfile);
      if (result->type != CPP_PADDING)
 return result;
    }
}
static const cpp_token *
get__Pragma_string (cpp_reader *pfile)
{
  const cpp_token *string1;
  if (get_token_no_padding (pfile)->type != CPP_OPEN_PAREN)
    return ((void *)0);
  string1 = get_token_no_padding (pfile);
  if (string1->type != CPP_STRING && string1->type != CPP_WSTRING)
    return ((void *)0);
  if (get_token_no_padding (pfile)->type != CPP_CLOSE_PAREN)
    return ((void *)0);
  return string1;
}
static void
destringize_and_run (cpp_reader *pfile, const cpp_string *in)
{
  const unsigned char *src, *limit;
  char *dest, *result;
  dest = result = C_alloca(in->len - 1);
  src = in->text + 1 + (in->text[0] == 'L');
  limit = in->text + in->len - 1;
  while (src < limit)
    {
      if (*src == '\\' && (src[1] == '\\' || src[1] == '"'))
 src++;
      *dest++ = *src++;
    }
  *dest = '\n';
  {
    cpp_context *saved_context = pfile->context;
    cpp_token *saved_cur_token = pfile->cur_token;
    tokenrun *saved_cur_run = pfile->cur_run;
    pfile->context = (cpp_context *) xmalloc (sizeof(cpp_context));
    pfile->context->macro = 0;
    pfile->context->prev = 0;
    run_directive (pfile, T_PRAGMA, result, dest - result);
    free (pfile->context);
    pfile->context = saved_context;
    pfile->cur_token = saved_cur_token;
    pfile->cur_run = saved_cur_run;
  }
  if (pfile->cb.line_change)
    pfile->cb.line_change (pfile, pfile->cur_token, 0);
}
void
_cpp_do__Pragma (cpp_reader *pfile)
{
  const cpp_token *string1 = get__Pragma_string (pfile);
  if (string1)
    destringize_and_run (pfile, &string1->val.str);
  else
    cpp_error (pfile, 0x03,
        "_Pragma takes a parenthesized string literal");
}
static void
do_sccs (cpp_reader *pfile )
{
}
static void
do_ifdef (cpp_reader *pfile)
{
  int skip = 1;
  if (! pfile->state.skipping)
    {
      const cpp_hashnode *node = lex_macro_node (pfile);
      if (node)
 {
   skip = node->type != NT_MACRO;
   do { if ((node)->type == NT_MACRO && !((node)->flags & (1 << 2))) (node)->value.macro->used = 1; } while (0);
   check_eol (pfile);
 }
    }
  push_conditional (pfile, skip, T_IFDEF, 0);
}
static void
do_ifndef (cpp_reader *pfile)
{
  int skip = 1;
  const cpp_hashnode *node = 0;
  if (! pfile->state.skipping)
    {
      node = lex_macro_node (pfile);
      if (node)
 {
   skip = node->type == NT_MACRO;
   do { if ((node)->type == NT_MACRO && !((node)->flags & (1 << 2))) (node)->value.macro->used = 1; } while (0);
   check_eol (pfile);
 }
    }
  push_conditional (pfile, skip, T_IFNDEF, node);
}
static void
do_if (cpp_reader *pfile)
{
  int skip = 1;
  if (! pfile->state.skipping)
    skip = _cpp_parse_expr (pfile) == 0;
  push_conditional (pfile, skip, T_IF, pfile->mi_ind_cmacro);
}
static void
do_else (cpp_reader *pfile)
{
  cpp_buffer *buffer = pfile->buffer;
  struct if_stack *ifs = buffer->if_stack;
  if (ifs == ((void *)0))
    cpp_error (pfile, 0x03, "#else without #if");
  else
    {
      if (ifs->type == T_ELSE)
 {
   cpp_error (pfile, 0x03, "#else after #else");
   cpp_error_with_line (pfile, 0x03, ifs->line, 0,
          "the conditional began here");
 }
      ifs->type = T_ELSE;
      pfile->state.skipping = ifs->skip_elses;
      ifs->skip_elses = 1;
      ifs->mi_cmacro = 0;
      if (!ifs->was_skipping && ((pfile)->opts.warn_endif_labels))
 check_eol (pfile);
    }
}
static void
do_elif (cpp_reader *pfile)
{
  cpp_buffer *buffer = pfile->buffer;
  struct if_stack *ifs = buffer->if_stack;
  if (ifs == ((void *)0))
    cpp_error (pfile, 0x03, "#elif without #if");
  else
    {
      if (ifs->type == T_ELSE)
 {
   cpp_error (pfile, 0x03, "#elif after #else");
   cpp_error_with_line (pfile, 0x03, ifs->line, 0,
          "the conditional began here");
 }
      ifs->type = T_ELIF;
      if (ifs->skip_elses)
 pfile->state.skipping = 1;
      else
 {
   pfile->state.skipping = 0;
   pfile->state.skipping = ! _cpp_parse_expr (pfile);
   ifs->skip_elses = ! pfile->state.skipping;
 }
      ifs->mi_cmacro = 0;
    }
}
static void
do_endif (cpp_reader *pfile)
{
  cpp_buffer *buffer = pfile->buffer;
  struct if_stack *ifs = buffer->if_stack;
  if (ifs == ((void *)0))
    cpp_error (pfile, 0x03, "#endif without #if");
  else
    {
      if (!ifs->was_skipping && ((pfile)->opts.warn_endif_labels))
 check_eol (pfile);
      if (ifs->next == 0 && ifs->mi_cmacro)
 {
   pfile->mi_valid = 1;
   pfile->mi_cmacro = ifs->mi_cmacro;
 }
      buffer->if_stack = ifs->next;
      pfile->state.skipping = ifs->was_skipping;
      ( (&pfile->buffer_ob)->temp = (char *) (ifs) - (char *) (&pfile->buffer_ob)->chunk, (((&pfile->buffer_ob)->temp > 0 && (&pfile->buffer_ob)->temp < (&pfile->buffer_ob)->chunk_limit - (char *) (&pfile->buffer_ob)->chunk) ? (int) ((&pfile->buffer_ob)->next_free = (&pfile->buffer_ob)->object_base = (&pfile->buffer_ob)->temp + (char *) (&pfile->buffer_ob)->chunk) : (((obstack_free) ((&pfile->buffer_ob), (&pfile->buffer_ob)->temp + (char *) (&pfile->buffer_ob)->chunk), 0), 0)));
    }
}
static void
push_conditional (cpp_reader *pfile, int skip, int type,
    const cpp_hashnode *cmacro)
{
  struct if_stack *ifs;
  cpp_buffer *buffer = pfile->buffer;
  ifs = (struct if_stack *) (( ((&pfile->buffer_ob))->temp = ((sizeof(struct if_stack))), ((((&pfile->buffer_ob))->chunk_limit - ((&pfile->buffer_ob))->next_free < ((&pfile->buffer_ob))->temp) ? (_obstack_newchunk (((&pfile->buffer_ob)), ((&pfile->buffer_ob))->temp), 0) : 0), (((&pfile->buffer_ob))->next_free += (((&pfile->buffer_ob))->temp))), ( (((&pfile->buffer_ob))->next_free == ((&pfile->buffer_ob))->object_base ? ((((&pfile->buffer_ob))->maybe_empty_object = 1), 0) : 0), ((&pfile->buffer_ob))->temp = ((((&pfile->buffer_ob))->object_base) - (char *) 0), ((&pfile->buffer_ob))->next_free = (((((((&pfile->buffer_ob))->next_free) - (char *) 0)+((&pfile->buffer_ob))->alignment_mask) & ~ (((&pfile->buffer_ob))->alignment_mask)) + (char *) 0), ((((&pfile->buffer_ob))->next_free - (char *) ((&pfile->buffer_ob))->chunk > ((&pfile->buffer_ob))->chunk_limit - (char *) ((&pfile->buffer_ob))->chunk) ? (((&pfile->buffer_ob))->next_free = ((&pfile->buffer_ob))->chunk_limit) : 0), ((&pfile->buffer_ob))->object_base = ((&pfile->buffer_ob))->next_free, ((((&pfile->buffer_ob))->temp) + (char *) 0)));
  ifs->line = pfile->directive_line;
  ifs->next = buffer->if_stack;
  ifs->skip_elses = pfile->state.skipping || !skip;
  ifs->was_skipping = pfile->state.skipping;
  ifs->type = type;
  if (pfile->mi_valid && pfile->mi_cmacro == 0)
    ifs->mi_cmacro = cmacro;
  else
    ifs->mi_cmacro = 0;
  pfile->state.skipping = skip;
  buffer->if_stack = ifs;
}
static int
parse_answer (cpp_reader *pfile, struct answer **answerp, int type)
{
  const cpp_token *paren;
  struct answer *answer;
  unsigned int acount;
  paren = cpp_get_token (pfile);
  if (paren->type != CPP_OPEN_PAREN)
    {
      if (type == T_IF)
 {
   _cpp_backup_tokens (pfile, 1);
   return 0;
 }
      if (type == T_UNASSERT && paren->type == CPP_EOF)
 return 0;
      cpp_error (pfile, 0x03, "missing '(' after predicate");
      return 1;
    }
  for (acount = 0;; acount++)
    {
      size_t room_needed;
      const cpp_token *token = cpp_get_token (pfile);
      cpp_token *dest;
      if (token->type == CPP_CLOSE_PAREN)
 break;
      if (token->type == CPP_EOF)
 {
   cpp_error (pfile, 0x03, "missing ')' to complete answer");
   return 1;
 }
      room_needed = (sizeof (struct answer) + acount * sizeof (cpp_token));
      if ((size_t) ((pfile->a_buff)->limit - (pfile->a_buff)->cur) < room_needed)
 _cpp_extend_buff (pfile, &pfile->a_buff, sizeof (struct answer));
      dest = &((struct answer *) ((pfile->a_buff)->cur))->first[acount];
      *dest = *token;
      if (acount == 0)
 dest->flags &= ~(1 << 0);
    }
  if (acount == 0)
    {
      cpp_error (pfile, 0x03, "predicate's answer is empty");
      return 1;
    }
  answer = (struct answer *) ((pfile->a_buff)->cur);
  answer->count = acount;
  answer->next = ((void *)0);
  *answerp = answer;
  return 0;
}
static cpp_hashnode *
parse_assertion (cpp_reader *pfile, struct answer **answerp, int type)
{
  cpp_hashnode *result = 0;
  const cpp_token *predicate;
  pfile->state.prevent_expansion++;
  *answerp = 0;
  predicate = cpp_get_token (pfile);
  if (predicate->type == CPP_EOF)
    cpp_error (pfile, 0x03, "assertion without predicate");
  else if (predicate->type != CPP_NAME)
    cpp_error (pfile, 0x03, "predicate must be an identifier");
  else if (parse_answer (pfile, answerp, type) == 0)
    {
      unsigned int len = ((&(predicate->val.node)->ident)->len);
      unsigned char *sym = C_alloca(len + 1);
      sym[0] = '#';
      memcpy (sym + 1, ((&(predicate->val.node)->ident)->str), len);
      result = cpp_lookup (pfile, sym, len + 1);
    }
  pfile->state.prevent_expansion--;
  return result;
}
static struct answer **
find_answer (cpp_hashnode *node, const struct answer *candidate)
{
  unsigned int i;
  struct answer **result;
  for (result = &node->value.answers; *result; result = &(*result)->next)
    {
      struct answer *answer = *result;
      if (answer->count == candidate->count)
 {
   for (i = 0; i < answer->count; i++)
     if (! _cpp_equiv_tokens (&answer->first[i], &candidate->first[i]))
       break;
   if (i == answer->count)
     break;
 }
    }
  return result;
}
int
_cpp_test_assertion (cpp_reader *pfile, unsigned int *value)
{
  struct answer *answer;
  cpp_hashnode *node;
  node = parse_assertion (pfile, &answer, T_IF);
  *value = 0;
  if (node)
    *value = (node->type == NT_ASSERTION &&
       (answer == 0 || *find_answer (node, answer) != 0));
  else if (pfile->cur_token[-1].type == CPP_EOF)
    _cpp_backup_tokens (pfile, 1);
  return node == 0;
}
static void
do_assert (cpp_reader *pfile)
{
  struct answer *new_answer;
  cpp_hashnode *node;
  node = parse_assertion (pfile, &new_answer, T_ASSERT);
  if (node)
    {
      size_t answer_size;
      new_answer->next = 0;
      if (node->type == NT_ASSERTION)
 {
   if (*find_answer (node, new_answer))
     {
       cpp_error (pfile, 0x00, "\"%s\" re-asserted",
    ((&(node)->ident)->str) + 1);
       return;
     }
   new_answer->next = node->value.answers;
 }
      answer_size = sizeof (struct answer) + ((new_answer->count - 1)
           * sizeof (cpp_token));
      if (pfile->hash_table1->alloc_subobject)
 {
   struct answer *temp_answer = new_answer;
   new_answer = pfile->hash_table1->alloc_subobject (answer_size);
   memcpy (new_answer, temp_answer, answer_size);
 }
      else
 ((pfile->a_buff)->cur) += answer_size;
      node->type = NT_ASSERTION;
      node->value.answers = new_answer;
      check_eol (pfile);
    }
}
static void
do_unassert (cpp_reader *pfile)
{
  cpp_hashnode *node;
  struct answer *answer;
  node = parse_assertion (pfile, &answer, T_UNASSERT);
  if (node && node->type == NT_ASSERTION)
    {
      if (answer)
 {
   struct answer **p = find_answer (node, answer), *temp;
   temp = *p;
   if (temp)
     *p = temp->next;
   if (node->value.answers == 0)
     node->type = NT_VOID;
   check_eol (pfile);
 }
      else
 _cpp_free_definition (node);
    }
}
void
cpp_define (cpp_reader *pfile, const char *str)
{
  char *buf, *p;
  size_t count;
  count = strlen (str);
  buf = C_alloca(count + 3);
  memcpy (buf, str, count);
  p = strchr (str, '=');
  if (p)
    buf[p - str] = ' ';
  else
    {
      buf[count++] = ' ';
      buf[count++] = '1';
    }
  buf[count] = '\n';
  run_directive (pfile, T_DEFINE, buf, count);
}
void
_cpp_define_builtin (cpp_reader *pfile, const char *str)
{
  size_t len = strlen (str);
  char *buf = C_alloca(len + 1);
  memcpy (buf, str, len);
  buf[len] = '\n';
  run_directive (pfile, T_DEFINE, buf, len);
}
void
cpp_undef (cpp_reader *pfile, const char *macro)
{
  size_t len = strlen (macro);
  char *buf = C_alloca(len + 1);
  memcpy (buf, macro, len);
  buf[len] = '\n';
  run_directive (pfile, T_UNDEF, buf, len);
}
void
cpp_assert (cpp_reader *pfile, const char *str)
{
  handle_assertion (pfile, str, T_ASSERT);
}
void
cpp_unassert (cpp_reader *pfile, const char *str)
{
  handle_assertion (pfile, str, T_UNASSERT);
}
static void
handle_assertion (cpp_reader *pfile, const char *str, int type)
{
  size_t count = strlen (str);
  const char *p = strchr (str, '=');
  char *buf = C_alloca(count + 2);
  memcpy (buf, str, count);
  if (p)
    {
      buf[p - str] = '(';
      buf[count++] = ')';
    }
  buf[count] = '\n';
  str = buf;
  run_directive (pfile, type, str, count);
}
unsigned int
cpp_errors (cpp_reader *pfile)
{
  return pfile->errors;
}
cpp_options *
cpp_get_options (cpp_reader *pfile)
{
  return &pfile->opts;
}
cpp_callbacks *
cpp_get_callbacks (cpp_reader *pfile)
{
  return &pfile->cb;
}
void
cpp_set_callbacks (cpp_reader *pfile, cpp_callbacks *cb)
{
  pfile->cb = *cb;
}
struct depends *
cpp_get_deps (cpp_reader *pfile)
{
  if (!pfile->deps)
    pfile->deps = deps_init ();
  return pfile->deps;
}
cpp_buffer *
cpp_push_buffer (cpp_reader *pfile, const uchar *buffer, size_t len,
   int from_stage3)
{
  cpp_buffer *new = (cpp_buffer *) (( ((&pfile->buffer_ob))->temp = ((sizeof(cpp_buffer))), ((((&pfile->buffer_ob))->chunk_limit - ((&pfile->buffer_ob))->next_free < ((&pfile->buffer_ob))->temp) ? (_obstack_newchunk (((&pfile->buffer_ob)), ((&pfile->buffer_ob))->temp), 0) : 0), (((&pfile->buffer_ob))->next_free += (((&pfile->buffer_ob))->temp))), ( (((&pfile->buffer_ob))->next_free == ((&pfile->buffer_ob))->object_base ? ((((&pfile->buffer_ob))->maybe_empty_object = 1), 0) : 0), ((&pfile->buffer_ob))->temp = ((((&pfile->buffer_ob))->object_base) - (char *) 0), ((&pfile->buffer_ob))->next_free = (((((((&pfile->buffer_ob))->next_free) - (char *) 0)+((&pfile->buffer_ob))->alignment_mask) & ~ (((&pfile->buffer_ob))->alignment_mask)) + (char *) 0), ((((&pfile->buffer_ob))->next_free - (char *) ((&pfile->buffer_ob))->chunk > ((&pfile->buffer_ob))->chunk_limit - (char *) ((&pfile->buffer_ob))->chunk) ? (((&pfile->buffer_ob))->next_free = ((&pfile->buffer_ob))->chunk_limit) : 0), ((&pfile->buffer_ob))->object_base = ((&pfile->buffer_ob))->next_free, ((((&pfile->buffer_ob))->temp) + (char *) 0)));
  memset (new, 0, sizeof (cpp_buffer));
  new->next_line = new->buf = buffer;
  new->rlimit = buffer + len;
  new->from_stage3 = from_stage3;
  new->prev = pfile->buffer;
  new->need_line = 1;
  pfile->buffer = new;
  return new;
}
void
_cpp_pop_buffer (cpp_reader *pfile)
{
  cpp_buffer *buffer = pfile->buffer;
  struct _cpp_file *inc = buffer->file;
  struct if_stack *ifs;
  for (ifs = buffer->if_stack; ifs; ifs = ifs->next)
    cpp_error_with_line (pfile, 0x03, ifs->line, 0,
    "unterminated #%s", dtable[ifs->type].name);
  pfile->state.skipping = 0;
  pfile->buffer = buffer->prev;
  free (buffer->notes);
  ( (&pfile->buffer_ob)->temp = (char *) (buffer) - (char *) (&pfile->buffer_ob)->chunk, (((&pfile->buffer_ob)->temp > 0 && (&pfile->buffer_ob)->temp < (&pfile->buffer_ob)->chunk_limit - (char *) (&pfile->buffer_ob)->chunk) ? (int) ((&pfile->buffer_ob)->next_free = (&pfile->buffer_ob)->object_base = (&pfile->buffer_ob)->temp + (char *) (&pfile->buffer_ob)->chunk) : (((obstack_free) ((&pfile->buffer_ob), (&pfile->buffer_ob)->temp + (char *) (&pfile->buffer_ob)->chunk), 0), 0)));
  if (inc)
    {
      _cpp_pop_file_buffer (pfile, inc);
      _cpp_do_file_change (pfile, LC_LEAVE, 0, 0, 0);
    }
}
void
_cpp_init_directives (cpp_reader *pfile)
{
  unsigned int i;
  cpp_hashnode *node;
  for (i = 0; i < (unsigned int) N_DIRECTIVES; i++)
    {
      node = cpp_lookup (pfile, dtable[i].name, dtable[i].length);
      node->is_directive = 1;
      node->directive_index = i;
    }
}
static void print_location (cpp_reader *, source_location, unsigned int);
static void
print_location (cpp_reader *pfile, source_location line, unsigned int col)
{
  if (line == 0)
    fprintf (stderr, "%s: ", progname);
  else
    {
      const struct line_map *map;
      unsigned int lin;
      map = linemap_lookup (pfile->line_table, line);
      linemap_print_containing_files (pfile->line_table, map);
      lin = ((((line) - (map)->start_location) >> (map)->column_bits) + (map)->to_line);
      if (col == 0)
 {
   col = (((line) - (map)->start_location) & ((1 << (map)->column_bits) - 1));
   if (col == 0)
     col = 1;
 }
      if (lin == 0)
 fprintf (stderr, "%s:", map->to_file);
      else if (((pfile)->opts.show_column) == 0)
 fprintf (stderr, "%s:%u:", map->to_file, lin);
      else
 fprintf (stderr, "%s:%u:%u:", map->to_file, lin, col);
      fputc_unlocked (' ', stderr);
    }
}
int
_cpp_begin_message (cpp_reader *pfile, int code,
      source_location src_loc, unsigned int column)
{
  int level = (code & 0xf);
  switch (level)
    {
    case 0x00:
    case 0x02:
      if (cpp_in_system_header (pfile)
   && ! ((pfile)->opts.warn_system_headers))
 return 0;
    case 0x01:
      if (((pfile)->opts.warnings_are_errors)
   || (level == 0x02 && ((pfile)->opts.pedantic_errors)))
 {
   if (((pfile)->opts.inhibit_errors))
     return 0;
   level = 0x03;
   pfile->errors++;
 }
      else if (((pfile)->opts.inhibit_warnings))
 return 0;
      break;
    case 0x03:
      if (((pfile)->opts.inhibit_errors))
 return 0;
    case 0x04:
      pfile->errors++;
      break;
    }
  print_location (pfile, src_loc, column);
  if (((level & 0xf) >= 0x00 && (level & 0xf) <= 0x02))
    fputs_unlocked ("warning: ", stderr);
  else if (level == 0x04)
    fputs_unlocked ("internal error: ", stderr);
  return 1;
}
void
cpp_error (cpp_reader * pfile, int level, const char *msgid, ...)
{
  source_location src_loc;
  va_list ap;
  __builtin_va_start(ap,msgid);
  if (((pfile)->opts.traditional))
    {
      if (pfile->state.in_directive)
 src_loc = pfile->directive_line;
      else
 src_loc = pfile->line_table->highest_line;
    }
  else
    {
      src_loc = pfile->cur_token[-1].src_loc;
    }
  if (_cpp_begin_message (pfile, level, src_loc, 0))
    do { vfprintf (stderr, msgid, ap); putc_unlocked ('\n', stderr); } while (0);
  __builtin_va_end(ap);
}
void
cpp_error_with_line (cpp_reader *pfile, int level,
       source_location src_loc, unsigned int column,
       const char *msgid, ...)
{
  va_list ap;
  __builtin_va_start(ap,msgid);
  if (_cpp_begin_message (pfile, level, src_loc, column))
    do { vfprintf (stderr, msgid, ap); putc_unlocked ('\n', stderr); } while (0);
  __builtin_va_end(ap);
}
void
cpp_errno (cpp_reader *pfile, int level, const char *msgid)
{
  if (msgid[0] == '\0')
    msgid = "stdout";
  cpp_error (pfile, level, "%s: %s", msgid, xstrerror ((*__errno_location ())));
}
struct op
{
  const cpp_token *token;
  cpp_num value;
  enum cpp_ttype op;
};
static unsigned char num_positive (cpp_num, size_t);
static unsigned char num_greater_eq (cpp_num, cpp_num, size_t);
static cpp_num num_trim (cpp_num, size_t);
static cpp_num num_part_mul (cpp_num_part, cpp_num_part);
static cpp_num num_unary_op (cpp_reader *, cpp_num, enum cpp_ttype);
static cpp_num num_binary_op (cpp_reader *, cpp_num, cpp_num, enum cpp_ttype);
static cpp_num num_negate (cpp_num, size_t);
static cpp_num num_bitwise_op (cpp_reader *, cpp_num, cpp_num, enum cpp_ttype);
static cpp_num num_inequality_op (cpp_reader *, cpp_num, cpp_num,
      enum cpp_ttype);
static cpp_num num_equality_op (cpp_reader *, cpp_num, cpp_num,
    enum cpp_ttype);
static cpp_num num_mul (cpp_reader *, cpp_num, cpp_num);
static cpp_num num_div_op (cpp_reader *, cpp_num, cpp_num, enum cpp_ttype);
static cpp_num num_lshift (cpp_num, size_t, size_t);
static cpp_num num_rshift (cpp_num, size_t, size_t);
static cpp_num append_digit (cpp_num, int, int, size_t);
static cpp_num parse_defined (cpp_reader *);
static cpp_num eval_token (cpp_reader *, const cpp_token *);
static struct op *reduce (cpp_reader *, struct op *, enum cpp_ttype);
static unsigned int interpret_float_suffix (const uchar *, size_t);
static unsigned int interpret_int_suffix (const uchar *, size_t);
static void check_promotion (cpp_reader *, const struct op *);
static unsigned int
interpret_float_suffix (const uchar *s, size_t len)
{
  size_t f = 0, l = 0, i = 0;
  while (len--)
    switch (s[len])
      {
      case 'f': case 'F': f++; break;
      case 'l': case 'L': l++; break;
      case 'i': case 'I':
      case 'j': case 'J': i++; break;
      default:
 return 0;
      }
  if (f + l > 1 || i > 1)
    return 0;
  return ((i ? 0x2000 : 0)
   | (f ? 0x0010 :
      l ? 0x0040 : 0x0020));
}
static unsigned int
interpret_int_suffix (const uchar *s, size_t len)
{
  size_t u, l, i;
  u = l = i = 0;
  while (len--)
    switch (s[len])
      {
      case 'u': case 'U': u++; break;
      case 'i': case 'I':
      case 'j': case 'J': i++; break;
      case 'l': case 'L': l++;
 if (l == 2 && s[len] != s[len + 1])
   return 0;
 break;
      default:
 return 0;
      }
  if (l > 2 || u > 1 || i > 1)
    return 0;
  return ((i ? 0x2000 : 0)
   | (u ? 0x1000 : 0)
   | ((l == 0) ? 0x0010
      : (l == 1) ? 0x0020 : 0x0040));
}
unsigned int
cpp_classify_number (cpp_reader *pfile, const cpp_token *token)
{
  const uchar *str = token->val.str.text;
  const uchar *limit;
  unsigned int max_digit, result, radix;
  enum {NOT_FLOAT = 0, AFTER_POINT, AFTER_EXPON} float_flag;
  if (token->val.str.len == 1)
    return 0x0001 | 0x0010 | 0x0100;
  limit = str + token->val.str.len;
  float_flag = NOT_FLOAT;
  max_digit = 0;
  radix = 10;
  if (*str == '0')
    {
      radix = 8;
      str++;
      if ((*str == 'x' || *str == 'X')
   && (str[1] == '.' || (_sch_istable[(str[1]) & 0xff] & (unsigned short)(_sch_isxdigit))))
 {
   radix = 16;
   str++;
 }
    }
  for (;;)
    {
      unsigned int c = *str++;
      if ((_sch_istable[(c) & 0xff] & (unsigned short)(_sch_isdigit)) || ((_sch_istable[(c) & 0xff] & (unsigned short)(_sch_isxdigit)) && radix == 16))
 {
   c = ((unsigned int) _hex_value[(unsigned char) (c)]);
   if (c > max_digit)
     max_digit = c;
 }
      else if (c == '.')
 {
   if (float_flag == NOT_FLOAT)
     float_flag = AFTER_POINT;
   else
     do { cpp_error (pfile, 0x03, "too many decimal points in number"); goto syntax_error; } while(0);
 }
      else if ((radix <= 10 && (c == 'e' || c == 'E'))
        || (radix == 16 && (c == 'p' || c == 'P')))
 {
   float_flag = AFTER_EXPON;
   break;
 }
      else
 {
   str--;
   break;
 }
    }
  if (float_flag != NOT_FLOAT && radix == 8)
    radix = 10;
  if (max_digit >= radix)
    do { cpp_error (pfile, 0x03, "invalid digit \"%c\" in octal constant", '0' + max_digit); goto syntax_error; } while(0);
  if (float_flag != NOT_FLOAT)
    {
      if (radix == 16 && ((pfile)->opts.pedantic) && !((pfile)->opts.c99))
 cpp_error (pfile, 0x02,
     "use of C99 hexadecimal floating constant");
      if (float_flag == AFTER_EXPON)
 {
   if (*str == '+' || *str == '-')
     str++;
   if (!(_sch_istable[(*str) & 0xff] & (unsigned short)(_sch_isdigit)))
     do { cpp_error (pfile, 0x03, "exponent has no digits"); goto syntax_error; } while(0);
   do
     str++;
   while ((_sch_istable[(*str) & 0xff] & (unsigned short)(_sch_isdigit)));
 }
      else if (radix == 16)
 do { cpp_error (pfile, 0x03, "hexadecimal floating constants require an exponent"); goto syntax_error; } while(0);
      result = interpret_float_suffix (str, limit - str);
      if (result == 0)
 {
   cpp_error (pfile, 0x03,
       "invalid suffix \"%.*s\" on floating constant",
       (int) (limit - str), str);
   return 0x0000;
 }
      if (limit != str
   && ((pfile)->opts.warn_traditional)
   && ! cpp_sys_macro_p (pfile))
 cpp_error (pfile, 0x00,
     "traditional C rejects the \"%.*s\" suffix",
     (int) (limit - str), str);
      result |= 0x0002;
    }
  else
    {
      result = interpret_int_suffix (str, limit - str);
      if (result == 0)
 {
   cpp_error (pfile, 0x03,
       "invalid suffix \"%.*s\" on integer constant",
       (int) (limit - str), str);
   return 0x0000;
 }
      if (((pfile)->opts.warn_traditional) && ! cpp_sys_macro_p (pfile))
 {
   int u_or_i = (result & (0x1000|0x2000));
   int large = (result & 0x00F0) == 0x0040;
   if (u_or_i || (large && ((pfile)->opts.warn_long_long)))
     cpp_error (pfile, 0x00,
         "traditional C rejects the \"%.*s\" suffix",
         (int) (limit - str), str);
 }
      if ((result & 0x00F0) == 0x0040
   && ! ((pfile)->opts.c99)
   && ((pfile)->opts.warn_long_long))
 cpp_error (pfile, 0x02,
     "use of C99 long long integer constant");
      result |= 0x0001;
    }
  if ((result & 0x2000) && ((pfile)->opts.pedantic))
    cpp_error (pfile, 0x02,
        "imaginary constants are a GCC extension");
  if (radix == 10)
    result |= 0x0100;
  else if (radix == 16)
    result |= 0x0200;
  else
    result |= 0x0400;
  return result;
 syntax_error:
  return 0x0000;
}
cpp_num
cpp_interpret_integer (cpp_reader *pfile, const cpp_token *token,
         unsigned int type)
{
  const uchar *p, *end;
  cpp_num result;
  result.low = 0;
  result.high = 0;
  result.unsignedp = !!(type & 0x1000);
  result.overflow = 0;
  p = token->val.str.text;
  end = p + token->val.str.len;
  if (token->val.str.len == 1)
    result.low = p[0] - '0';
  else
    {
      cpp_num_part max;
      size_t precision = ((pfile)->opts.precision);
      unsigned int base = 10, c = 0;
      unsigned char overflow = 0;
      if ((type & 0x0F00) == 0x0400)
 {
   base = 8;
   p++;
 }
      else if ((type & 0x0F00) == 0x0200)
 {
   base = 16;
   p += 2;
 }
      max = ~(cpp_num_part) 0;
      if (precision < (sizeof (cpp_num_part) * 8))
 max >>= (sizeof (cpp_num_part) * 8) - precision;
      max = (max - base + 1) / base + 1;
      for (; p < end; p++)
 {
   c = *p;
   if ((_sch_istable[(c) & 0xff] & (unsigned short)(_sch_isdigit)) || (base == 16 && (_sch_istable[(c) & 0xff] & (unsigned short)(_sch_isxdigit))))
     c = ((unsigned int) _hex_value[(unsigned char) (c)]);
   else
     break;
   if (result.low < max)
     result.low = result.low * base + c;
   else
     {
       result = append_digit (result, c, base, precision);
       overflow |= result.overflow;
       max = 0;
     }
 }
      if (overflow)
 cpp_error (pfile, 0x02,
     "integer constant is too large for its type");
      else if (!result.unsignedp
        && !(((pfile)->opts.traditional)
      && pfile->state.in_directive)
        && !num_positive (result, precision))
 {
   if (base == 10)
     cpp_error (pfile, 0x00,
         "integer constant is so large that it is unsigned");
   result.unsignedp = 1;
 }
    }
  return result;
}
static cpp_num
append_digit (cpp_num num, int digit, int base, size_t precision)
{
  cpp_num result;
  unsigned int shift = 3 + (base == 16);
  unsigned char overflow;
  cpp_num_part add_high, add_low;
  overflow = !!(num.high >> ((sizeof (cpp_num_part) * 8) - shift));
  result.high = num.high << shift;
  result.low = num.low << shift;
  result.high |= num.low >> ((sizeof (cpp_num_part) * 8) - shift);
  result.unsignedp = num.unsignedp;
  if (base == 10)
    {
      add_low = num.low << 1;
      add_high = (num.high << 1) + (num.low >> ((sizeof (cpp_num_part) * 8) - 1));
    }
  else
    add_high = add_low = 0;
  if (add_low + digit < add_low)
    add_high++;
  add_low += digit;
  if (result.low + add_low < result.low)
    add_high++;
  if (result.high + add_high < result.high)
    overflow = 1;
  result.low += add_low;
  result.high += add_high;
  result.overflow = overflow;
  num.low = result.low;
  num.high = result.high;
  result = num_trim (result, precision);
  if (!(result.low == num.low && result.high == num.high))
    result.overflow = 1;
  return result;
}
static cpp_num
parse_defined (cpp_reader *pfile)
{
  cpp_num result;
  int paren = 0;
  cpp_hashnode *node = 0;
  const cpp_token *token;
  cpp_context *initial_context = pfile->context;
  pfile->state.prevent_expansion++;
  token = cpp_get_token (pfile);
  if (token->type == CPP_OPEN_PAREN)
    {
      paren = 1;
      token = cpp_get_token (pfile);
    }
  if (token->type == CPP_NAME)
    {
      node = token->val.node;
      if (paren && cpp_get_token (pfile)->type != CPP_CLOSE_PAREN)
 {
   cpp_error (pfile, 0x03, "missing ')' after \"defined\"");
   node = 0;
 }
    }
  else
    {
      cpp_error (pfile, 0x03,
   "operator \"defined\" requires an identifier");
      if (token->flags & (1 << 4))
 {
   cpp_token op;
   op.flags = 0;
   op.type = token->type;
   cpp_error (pfile, 0x03,
       "(\"%s\" is an alternative token for \"%s\" in C++)",
       cpp_token_as_text (pfile, token),
       cpp_token_as_text (pfile, &op));
 }
    }
  if (node)
    {
      if (pfile->context != initial_context && ((pfile)->opts.pedantic))
 cpp_error (pfile, 0x00,
     "this use of \"defined\" may not be portable");
      do { if ((node)->type == NT_MACRO && !((node)->flags & (1 << 2))) (node)->value.macro->used = 1; } while (0);
      pfile->mi_ind_cmacro = node;
    }
  pfile->state.prevent_expansion--;
  result.unsignedp = 0;
  result.high = 0;
  result.overflow = 0;
  result.low = node && node->type == NT_MACRO;
  return result;
}
static cpp_num
eval_token (cpp_reader *pfile, const cpp_token *token)
{
  cpp_num result;
  unsigned int temp;
  int unsignedp = 0;
  result.unsignedp = 0;
  result.overflow = 0;
  switch (token->type)
    {
    case CPP_NUMBER:
      temp = cpp_classify_number (pfile, token);
      switch (temp & 0x000F)
 {
 case 0x0002:
   cpp_error (pfile, 0x03,
       "floating constant in preprocessor expression");
   break;
 case 0x0001:
   if (!(temp & 0x2000))
     return cpp_interpret_integer (pfile, token, temp);
   cpp_error (pfile, 0x03,
       "imaginary number in preprocessor expression");
   break;
 case 0x0000:
   break;
 }
      result.high = result.low = 0;
      break;
    case CPP_WCHAR:
    case CPP_CHAR:
      {
 cppchar_t cc = cpp_interpret_charconst (pfile, token,
      &temp, &unsignedp);
 result.high = 0;
 result.low = cc;
 if (!unsignedp && (cppchar_signed_t) cc < 0)
   {
     if ((sizeof (cpp_num_part) * 8) > (8 * sizeof (cppchar_t)))
       result.low |= ~(~(cpp_num_part) 0
         >> ((sizeof (cpp_num_part) * 8) - (8 * sizeof (cppchar_t))));
     result.high = ~(cpp_num_part) 0;
     result = num_trim (result, ((pfile)->opts.precision));
   }
      }
      break;
    case CPP_NAME:
      if (token->val.node == pfile->spec_nodes.n_defined)
 return parse_defined (pfile);
      else if (((pfile)->opts.cplusplus)
        && (token->val.node == pfile->spec_nodes.n_true
     || token->val.node == pfile->spec_nodes.n_false))
 {
   result.high = 0;
   result.low = (token->val.node == pfile->spec_nodes.n_true);
 }
      else
 {
   result.high = 0;
   result.low = 0;
   if (((pfile)->opts.warn_undef) && !pfile->state.skip_eval)
     cpp_error (pfile, 0x00, "\"%s\" is not defined",
         ((&(token->val.node)->ident)->str));
 }
      break;
    default:
      _cpp_test_assertion (pfile, &temp);
      result.high = 0;
      result.low = temp;
    }
  result.unsignedp = !!unsignedp;
  return result;
}
static const struct operator
{
  uchar prio;
  uchar flags;
} op_table[] =
{
            {0, 0},
             {16, (1 << 0)},
                 {12, (1 << 1) | (1 << 2)},
              {12, (1 << 1) | (1 << 2)},
              {14, (1 << 1) | (1 << 2)},
               {14, (1 << 1) | (1 << 2)},
              {15, (1 << 1) | (1 << 2)},
             {15, (1 << 1) | (1 << 2)},
             {15, (1 << 1) | (1 << 2)},
             {9, (1 << 1) | (1 << 2)},
            {7, (1 << 1) | (1 << 2)},
             {8, (1 << 1) | (1 << 2)},
                {13, (1 << 1)},
                {13, (1 << 1)},
             {10, (1 << 1) | (1 << 2)},
             {10, (1 << 1) | (1 << 2)},
               {16, (1 << 0)},
                 {6, (1 << 1)},
               {5, (1 << 1)},
               {3, 0},
               {4, (1 << 1) | (1 << 2)},
               {2, (1 << 1)},
                   {1, (1 << 0)},
                    {0, 0},
             {0, 0},
               {11, (1 << 1)},
                {11, (1 << 1)},
                   {12, (1 << 1) | (1 << 2)},
                 {12, (1 << 1) | (1 << 2)},
               {16, (1 << 0)},
                {16, (1 << 0)}
};
unsigned char
_cpp_parse_expr (cpp_reader *pfile)
{
  struct op *top = pfile->op_stack;
  unsigned int lex_count;
  unsigned char saw_leading_not, want_value = 1;
  pfile->state.skip_eval = 0;
  pfile->mi_ind_cmacro = 0;
  saw_leading_not = 0;
  lex_count = 0;
  top->op = CPP_EOF;
  for (;;)
    {
      struct op op;
      lex_count++;
      op.token = cpp_get_token (pfile);
      op.op = op.token->type;
      switch (op.op)
 {
 case CPP_NUMBER:
 case CPP_CHAR:
 case CPP_WCHAR:
 case CPP_NAME:
 case CPP_HASH:
   if (!want_value)
     do { cpp_error (pfile, 0x03, "missing binary operator before token \"%s\"", cpp_token_as_text (pfile, op.token)); goto syntax_error; } while(0)
                                          ;
   want_value = 0;
   top->value = eval_token (pfile, op.token);
   continue;
 case CPP_NOT:
   saw_leading_not = lex_count == 1;
   break;
 case CPP_PLUS:
   if (want_value)
     op.op = (CPP_LESS_EQ + 1);
   break;
 case CPP_MINUS:
   if (want_value)
     op.op = (CPP_LESS_EQ + 2);
   break;
 default:
   if ((int) op.op <= (int) CPP_EQ || (int) op.op >= (int) CPP_PLUS_EQ)
     do { cpp_error (pfile, 0x03, "token \"%s\" is not valid in preprocessor expressions", cpp_token_as_text (pfile, op.token)); goto syntax_error; } while(0)
                                          ;
   break;
 }
      if (op_table[op.op].flags & (1 << 0))
 {
   if (!want_value)
     do { cpp_error (pfile, 0x03, "missing binary operator before token \"%s\"", cpp_token_as_text (pfile, op.token)); goto syntax_error; } while(0)
                                          ;
 }
      else if (want_value)
 {
   if (op.op == CPP_CLOSE_PAREN && top->op == CPP_OPEN_PAREN)
     do { cpp_error (pfile, 0x03, "missing expression between '(' and ')'"); goto syntax_error; } while(0);
   if (op.op == CPP_EOF && top->op == CPP_EOF)
      do { cpp_error (pfile, 0x03, "#if with no expression"); goto syntax_error; } while(0);
    if (top->op != CPP_EOF && top->op != CPP_OPEN_PAREN)
      do { cpp_error (pfile, 0x03, "operator '%s' has no right operand", cpp_token_as_text (pfile, top->token)); goto syntax_error; } while(0)
                                             ;
   else if (op.op == CPP_CLOSE_PAREN || op.op == CPP_EOF)
                                                          ;
   else
     do { cpp_error (pfile, 0x03, "operator '%s' has no left operand", cpp_token_as_text (pfile, op.token)); goto syntax_error; } while(0)
                                          ;
 }
      top = reduce (pfile, top, op.op);
      if (!top)
 goto syntax_error;
      if (op.op == CPP_EOF)
 break;
      switch (op.op)
 {
 case CPP_CLOSE_PAREN:
   continue;
 case CPP_OR_OR:
   if (!((top->value.low | top->value.high) == 0))
     pfile->state.skip_eval++;
   break;
 case CPP_AND_AND:
 case CPP_QUERY:
   if (((top->value.low | top->value.high) == 0))
     pfile->state.skip_eval++;
   break;
 case CPP_COLON:
   if (top->op != CPP_QUERY)
     do { cpp_error (pfile, 0x03, " ':' without preceding '?'"); goto syntax_error; } while(0);
   if (!((top[-1].value.low | top[-1].value.high) == 0))
     pfile->state.skip_eval++;
   else
     pfile->state.skip_eval--;
 default:
   break;
 }
      want_value = 1;
      if (++top == pfile->op_limit)
 top = _cpp_expand_op_stack (pfile);
      top->op = op.op;
      top->token = op.token;
    }
  if (pfile->mi_ind_cmacro && !(saw_leading_not && lex_count == 3))
    pfile->mi_ind_cmacro = 0;
  if (top != pfile->op_stack)
    {
      cpp_error (pfile, 0x04, "unbalanced stack in #if");
    syntax_error:
      return 0;
    }
  return !((top->value.low | top->value.high) == 0);
}
static struct op *
reduce (cpp_reader *pfile, struct op *top, enum cpp_ttype op)
{
  unsigned int prio;
  if (top->op <= CPP_EQ || top->op > CPP_LESS_EQ + 2)
    {
    bad_op:
      cpp_error (pfile, 0x04, "impossible operator '%u'", top->op);
      return 0;
    }
  if (op == CPP_OPEN_PAREN)
    return top;
  prio = op_table[op].prio - ((op_table[op].flags & (1 << 1)) != 0);
  while (prio < op_table[top->op].prio)
    {
      if (((pfile)->opts.warn_num_sign_change)
   && op_table[top->op].flags & (1 << 2))
 check_promotion (pfile, top);
      switch (top->op)
 {
 case (CPP_LESS_EQ + 1):
 case (CPP_LESS_EQ + 2):
 case CPP_NOT:
 case CPP_COMPL:
   top[-1].value = num_unary_op (pfile, top->value, top->op);
   break;
 case CPP_PLUS:
 case CPP_MINUS:
 case CPP_RSHIFT:
 case CPP_LSHIFT:
 case CPP_MIN:
 case CPP_MAX:
 case CPP_COMMA:
   top[-1].value = num_binary_op (pfile, top[-1].value,
      top->value, top->op);
   break;
 case CPP_GREATER:
 case CPP_LESS:
 case CPP_GREATER_EQ:
 case CPP_LESS_EQ:
   top[-1].value
     = num_inequality_op (pfile, top[-1].value, top->value, top->op);
   break;
 case CPP_EQ_EQ:
 case CPP_NOT_EQ:
   top[-1].value
     = num_equality_op (pfile, top[-1].value, top->value, top->op);
   break;
 case CPP_AND:
 case CPP_OR:
 case CPP_XOR:
   top[-1].value
     = num_bitwise_op (pfile, top[-1].value, top->value, top->op);
   break;
 case CPP_MULT:
   top[-1].value = num_mul (pfile, top[-1].value, top->value);
   break;
 case CPP_DIV:
 case CPP_MOD:
   top[-1].value = num_div_op (pfile, top[-1].value,
          top->value, top->op);
   break;
 case CPP_OR_OR:
   top--;
   if (!((top->value.low | top->value.high) == 0))
     pfile->state.skip_eval--;
   top->value.low = (!((top->value.low | top->value.high) == 0)
       || !((top[1].value.low | top[1].value.high) == 0));
   top->value.high = 0;
   top->value.unsignedp = 0;
   top->value.overflow = 0;
   continue;
 case CPP_AND_AND:
   top--;
   if (((top->value.low | top->value.high) == 0))
     pfile->state.skip_eval--;
   top->value.low = (!((top->value.low | top->value.high) == 0)
       && !((top[1].value.low | top[1].value.high) == 0));
   top->value.high = 0;
   top->value.unsignedp = 0;
   top->value.overflow = 0;
   continue;
 case CPP_OPEN_PAREN:
   if (op != CPP_CLOSE_PAREN)
     {
       cpp_error (pfile, 0x03, "missing ')' in expression");
       return 0;
     }
   top--;
   top->value = top[1].value;
   return top;
 case CPP_COLON:
   top -= 2;
   if (!((top->value.low | top->value.high) == 0))
     {
       pfile->state.skip_eval--;
       top->value = top[1].value;
     }
   else
     top->value = top[2].value;
   top->value.unsignedp = (top[1].value.unsignedp
      || top[2].value.unsignedp);
   continue;
 case CPP_QUERY:
   cpp_error (pfile, 0x03, "'?' without following ':'");
   return 0;
 default:
   goto bad_op;
 }
      top--;
      if (top->value.overflow && !pfile->state.skip_eval)
 cpp_error (pfile, 0x02,
     "integer overflow in preprocessor expression");
    }
  if (op == CPP_CLOSE_PAREN)
    {
      cpp_error (pfile, 0x03, "missing '(' in expression");
      return 0;
    }
  return top;
}
struct op *
_cpp_expand_op_stack (cpp_reader *pfile)
{
  size_t old_size = (size_t) (pfile->op_limit - pfile->op_stack);
  size_t new_size = old_size * 2 + 20;
  pfile->op_stack = xrealloc (pfile->op_stack, new_size * sizeof (struct op));
  pfile->op_limit = pfile->op_stack + new_size;
  return pfile->op_stack + old_size;
}
static void
check_promotion (cpp_reader *pfile, const struct op *op)
{
  if (op->value.unsignedp == op[-1].value.unsignedp)
    return;
  if (op->value.unsignedp)
    {
      if (!num_positive (op[-1].value, ((pfile)->opts.precision)))
 cpp_error (pfile, 0x00,
     "the left operand of \"%s\" changes sign when promoted",
     cpp_token_as_text (pfile, op->token));
    }
  else if (!num_positive (op->value, ((pfile)->opts.precision)))
    cpp_error (pfile, 0x00,
        "the right operand of \"%s\" changes sign when promoted",
        cpp_token_as_text (pfile, op->token));
}
static cpp_num
num_trim (cpp_num num, size_t precision)
{
  if (precision > (sizeof (cpp_num_part) * 8))
    {
      precision -= (sizeof (cpp_num_part) * 8);
      if (precision < (sizeof (cpp_num_part) * 8))
 num.high &= ((cpp_num_part) 1 << precision) - 1;
    }
  else
    {
      if (precision < (sizeof (cpp_num_part) * 8))
 num.low &= ((cpp_num_part) 1 << precision) - 1;
      num.high = 0;
    }
  return num;
}
static unsigned char
num_positive (cpp_num num, size_t precision)
{
  if (precision > (sizeof (cpp_num_part) * 8))
    {
      precision -= (sizeof (cpp_num_part) * 8);
      return (num.high & (cpp_num_part) 1 << (precision - 1)) == 0;
    }
  return (num.low & (cpp_num_part) 1 << (precision - 1)) == 0;
}
cpp_num
cpp_num_sign_extend (cpp_num num, size_t precision)
{
  if (!num.unsignedp)
    {
      if (precision > (sizeof (cpp_num_part) * 8))
 {
   precision -= (sizeof (cpp_num_part) * 8);
   if (precision < (sizeof (cpp_num_part) * 8)
       && (num.high & (cpp_num_part) 1 << (precision - 1)))
     num.high |= ~(~(cpp_num_part) 0 >> ((sizeof (cpp_num_part) * 8) - precision));
 }
      else if (num.low & (cpp_num_part) 1 << (precision - 1))
 {
   if (precision < (sizeof (cpp_num_part) * 8))
     num.low |= ~(~(cpp_num_part) 0 >> ((sizeof (cpp_num_part) * 8) - precision));
   num.high = ~(cpp_num_part) 0;
 }
    }
  return num;
}
static cpp_num
num_negate (cpp_num num, size_t precision)
{
  cpp_num copy;
  copy = num;
  num.high = ~num.high;
  num.low = ~num.low;
  if (++num.low == 0)
    num.high++;
  num = num_trim (num, precision);
  num.overflow = (!num.unsignedp && (num.low == copy.low && num.high == copy.high) && !((num.low | num.high) == 0));
  return num;
}
static unsigned char
num_greater_eq (cpp_num pa, cpp_num pb, size_t precision)
{
  unsigned char unsignedp;
  unsignedp = pa.unsignedp || pb.unsignedp;
  if (!unsignedp)
    {
      unsignedp = num_positive (pa, precision);
      if (unsignedp != num_positive (pb, precision))
 return unsignedp;
    }
  return (pa.high > pb.high) || (pa.high == pb.high && pa.low >= pb.low);
}
static cpp_num
num_bitwise_op (cpp_reader *pfile ,
  cpp_num lhs, cpp_num rhs, enum cpp_ttype op)
{
  lhs.overflow = 0;
  lhs.unsignedp = lhs.unsignedp || rhs.unsignedp;
  if (op == CPP_AND)
    {
      lhs.low &= rhs.low;
      lhs.high &= rhs.high;
    }
  else if (op == CPP_OR)
    {
      lhs.low |= rhs.low;
      lhs.high |= rhs.high;
    }
  else
    {
      lhs.low ^= rhs.low;
      lhs.high ^= rhs.high;
    }
  return lhs;
}
static cpp_num
num_inequality_op (cpp_reader *pfile, cpp_num lhs, cpp_num rhs,
     enum cpp_ttype op)
{
  unsigned char gte = num_greater_eq (lhs, rhs, ((pfile)->opts.precision));
  if (op == CPP_GREATER_EQ)
    lhs.low = gte;
  else if (op == CPP_LESS)
    lhs.low = !gte;
  else if (op == CPP_GREATER)
    lhs.low = gte && !(lhs.low == rhs.low && lhs.high == rhs.high);
  else
    lhs.low = !gte || (lhs.low == rhs.low && lhs.high == rhs.high);
  lhs.high = 0;
  lhs.overflow = 0;
  lhs.unsignedp = 0;
  return lhs;
}
static cpp_num
num_equality_op (cpp_reader *pfile ,
   cpp_num lhs, cpp_num rhs, enum cpp_ttype op)
{
  unsigned char eq = (lhs.low == rhs.low && lhs.high == rhs.high);
  if (op == CPP_NOT_EQ)
    eq = !eq;
  lhs.low = eq;
  lhs.high = 0;
  lhs.overflow = 0;
  lhs.unsignedp = 0;
  return lhs;
}
static cpp_num
num_rshift (cpp_num num, size_t precision, size_t n)
{
  cpp_num_part sign_mask;
  unsigned char x = num_positive (num, precision);
  if (num.unsignedp || x)
    sign_mask = 0;
  else
    sign_mask = ~(cpp_num_part) 0;
  if (n >= precision)
    num.high = num.low = sign_mask;
  else
    {
      if (precision < (sizeof (cpp_num_part) * 8))
 num.high = sign_mask, num.low |= sign_mask << precision;
      else if (precision < 2 * (sizeof (cpp_num_part) * 8))
 num.high |= sign_mask << (precision - (sizeof (cpp_num_part) * 8));
      if (n >= (sizeof (cpp_num_part) * 8))
 {
   n -= (sizeof (cpp_num_part) * 8);
   num.low = num.high;
   num.high = sign_mask;
 }
      if (n)
 {
   num.low = (num.low >> n) | (num.high << ((sizeof (cpp_num_part) * 8) - n));
   num.high = (num.high >> n) | (sign_mask << ((sizeof (cpp_num_part) * 8) - n));
 }
    }
  num = num_trim (num, precision);
  num.overflow = 0;
  return num;
}
static cpp_num
num_lshift (cpp_num num, size_t precision, size_t n)
{
  if (n >= precision)
    {
      num.overflow = !num.unsignedp && !((num.low | num.high) == 0);
      num.high = num.low = 0;
    }
  else
    {
      cpp_num orig, maybe_orig;
      size_t m = n;
      orig = num;
      if (m >= (sizeof (cpp_num_part) * 8))
 {
   m -= (sizeof (cpp_num_part) * 8);
   num.high = num.low;
   num.low = 0;
 }
      if (m)
 {
   num.high = (num.high << m) | (num.low >> ((sizeof (cpp_num_part) * 8) - m));
   num.low <<= m;
 }
      num = num_trim (num, precision);
      if (num.unsignedp)
 num.overflow = 0;
      else
 {
   maybe_orig = num_rshift (num, precision, n);
   num.overflow = !(orig.low == maybe_orig.low && orig.high == maybe_orig.high);
 }
    }
  return num;
}
static cpp_num
num_unary_op (cpp_reader *pfile, cpp_num num, enum cpp_ttype op)
{
  switch (op)
    {
    case (CPP_LESS_EQ + 1):
      if (((pfile)->opts.warn_traditional) && !pfile->state.skip_eval)
 cpp_error (pfile, 0x00,
     "traditional C rejects the unary plus operator");
      num.overflow = 0;
      break;
    case (CPP_LESS_EQ + 2):
      num = num_negate (num, ((pfile)->opts.precision));
      break;
    case CPP_COMPL:
      num.high = ~num.high;
      num.low = ~num.low;
      num = num_trim (num, ((pfile)->opts.precision));
      num.overflow = 0;
      break;
    default:
      num.low = ((num.low | num.high) == 0);
      num.high = 0;
      num.overflow = 0;
      num.unsignedp = 0;
      break;
    }
  return num;
}
static cpp_num
num_binary_op (cpp_reader *pfile, cpp_num lhs, cpp_num rhs, enum cpp_ttype op)
{
  cpp_num result;
  size_t precision = ((pfile)->opts.precision);
  unsigned char gte;
  size_t n;
  switch (op)
    {
    case CPP_LSHIFT:
    case CPP_RSHIFT:
      if (!rhs.unsignedp && !num_positive (rhs, precision))
 {
   if (op == CPP_LSHIFT)
     op = CPP_RSHIFT;
   else
     op = CPP_LSHIFT;
   rhs = num_negate (rhs, precision);
 }
      if (rhs.high)
 n = ~0;
      else
 n = rhs.low;
      if (op == CPP_LSHIFT)
 lhs = num_lshift (lhs, precision, n);
      else
 lhs = num_rshift (lhs, precision, n);
      break;
    case CPP_MIN:
    case CPP_MAX:
      {
 unsigned char unsignedp = lhs.unsignedp || rhs.unsignedp;
 gte = num_greater_eq (lhs, rhs, precision);
 if (op == CPP_MIN)
   gte = !gte;
 if (!gte)
   lhs = rhs;
 lhs.unsignedp = unsignedp;
      }
      break;
    case CPP_MINUS:
      rhs = num_negate (rhs, precision);
    case CPP_PLUS:
      result.low = lhs.low + rhs.low;
      result.high = lhs.high + rhs.high;
      if (result.low < lhs.low)
 result.high++;
      result.unsignedp = lhs.unsignedp || rhs.unsignedp;
      result.overflow = 0;
      result = num_trim (result, precision);
      if (!result.unsignedp)
 {
   unsigned char lhsp = num_positive (lhs, precision);
   result.overflow = (lhsp == num_positive (rhs, precision)
        && lhsp != num_positive (result, precision));
 }
      return result;
    default:
      if (((pfile)->opts.pedantic) && (!((pfile)->opts.c99)
       || !pfile->state.skip_eval))
 cpp_error (pfile, 0x02,
     "comma operator in operand of #if");
      lhs = rhs;
      break;
    }
  return lhs;
}
static cpp_num
num_part_mul (cpp_num_part lhs, cpp_num_part rhs)
{
  cpp_num result;
  cpp_num_part middle[2], temp;
  result.low = (lhs & (~(cpp_num_part) 0 >> ((sizeof (cpp_num_part) * 8) / 2))) * (rhs & (~(cpp_num_part) 0 >> ((sizeof (cpp_num_part) * 8) / 2)));
  result.high = (lhs >> ((sizeof (cpp_num_part) * 8) / 2)) * (rhs >> ((sizeof (cpp_num_part) * 8) / 2));
  middle[0] = (lhs & (~(cpp_num_part) 0 >> ((sizeof (cpp_num_part) * 8) / 2))) * (rhs >> ((sizeof (cpp_num_part) * 8) / 2));
  middle[1] = (lhs >> ((sizeof (cpp_num_part) * 8) / 2)) * (rhs & (~(cpp_num_part) 0 >> ((sizeof (cpp_num_part) * 8) / 2)));
  temp = result.low;
  result.low += (middle[0] & (~(cpp_num_part) 0 >> ((sizeof (cpp_num_part) * 8) / 2))) << ((sizeof (cpp_num_part) * 8) / 2);
  if (result.low < temp)
    result.high++;
  temp = result.low;
  result.low += (middle[1] & (~(cpp_num_part) 0 >> ((sizeof (cpp_num_part) * 8) / 2))) << ((sizeof (cpp_num_part) * 8) / 2);
  if (result.low < temp)
    result.high++;
  result.high += (middle[0] >> ((sizeof (cpp_num_part) * 8) / 2));
  result.high += (middle[1] >> ((sizeof (cpp_num_part) * 8) / 2));
  result.unsignedp = 1;
  result.overflow = 0;
  return result;
}
static cpp_num
num_mul (cpp_reader *pfile, cpp_num lhs, cpp_num rhs)
{
  cpp_num result, temp;
  unsigned char unsignedp = lhs.unsignedp || rhs.unsignedp;
  unsigned char overflow, negate = 0;
  size_t precision = ((pfile)->opts.precision);
  if (!unsignedp)
    {
      if (!num_positive (lhs, precision))
 negate = !negate, lhs = num_negate (lhs, precision);
      if (!num_positive (rhs, precision))
 negate = !negate, rhs = num_negate (rhs, precision);
    }
  overflow = lhs.high && rhs.high;
  result = num_part_mul (lhs.low, rhs.low);
  temp = num_part_mul (lhs.high, rhs.low);
  result.high += temp.low;
  if (temp.high)
    overflow = 1;
  temp = num_part_mul (lhs.low, rhs.high);
  result.high += temp.low;
  if (temp.high)
    overflow = 1;
  temp.low = result.low, temp.high = result.high;
  result = num_trim (result, precision);
  if (!(result.low == temp.low && result.high == temp.high))
    overflow = 1;
  if (negate)
    result = num_negate (result, precision);
  if (unsignedp)
    result.overflow = 0;
  else
    result.overflow = overflow || (num_positive (result, precision) ^ !negate
       && !((result.low | result.high) == 0));
  result.unsignedp = unsignedp;
  return result;
}
static cpp_num
num_div_op (cpp_reader *pfile, cpp_num lhs, cpp_num rhs, enum cpp_ttype op)
{
  cpp_num result, sub;
  cpp_num_part mask;
  unsigned char unsignedp = lhs.unsignedp || rhs.unsignedp;
  unsigned char negate = 0, lhs_neg = 0;
  size_t i, precision = ((pfile)->opts.precision);
  if (!unsignedp)
    {
      if (!num_positive (lhs, precision))
 negate = !negate, lhs_neg = 1, lhs = num_negate (lhs, precision);
      if (!num_positive (rhs, precision))
 negate = !negate, rhs = num_negate (rhs, precision);
    }
  if (rhs.high)
    {
      i = precision - 1;
      mask = (cpp_num_part) 1 << (i - (sizeof (cpp_num_part) * 8));
      for (; ; i--, mask >>= 1)
 if (rhs.high & mask)
   break;
    }
  else if (rhs.low)
    {
      if (precision > (sizeof (cpp_num_part) * 8))
 i = precision - (sizeof (cpp_num_part) * 8) - 1;
      else
 i = precision - 1;
      mask = (cpp_num_part) 1 << i;
      for (; ; i--, mask >>= 1)
 if (rhs.low & mask)
   break;
    }
  else
    {
      if (!pfile->state.skip_eval)
 cpp_error (pfile, 0x03, "division by zero in #if");
      return lhs;
    }
  rhs.unsignedp = 1;
  lhs.unsignedp = 1;
  i = precision - i - 1;
  sub = num_lshift (rhs, precision, i);
  result.high = result.low = 0;
  for (;;)
    {
      if (num_greater_eq (lhs, sub, precision))
 {
   lhs = num_binary_op (pfile, lhs, sub, CPP_MINUS);
   if (i >= (sizeof (cpp_num_part) * 8))
     result.high |= (cpp_num_part) 1 << (i - (sizeof (cpp_num_part) * 8));
   else
     result.low |= (cpp_num_part) 1 << i;
 }
      if (i-- == 0)
 break;
      sub.low = (sub.low >> 1) | (sub.high << ((sizeof (cpp_num_part) * 8) - 1));
      sub.high >>= 1;
    }
  if (op == CPP_DIV)
    {
      result.unsignedp = unsignedp;
      result.overflow = 0;
      if (!unsignedp)
 {
   if (negate)
     result = num_negate (result, precision);
   result.overflow = num_positive (result, precision) ^ !negate;
 }
      return result;
    }
  lhs.unsignedp = unsignedp;
  lhs.overflow = 0;
  if (lhs_neg)
    lhs = num_negate (lhs, precision);
  return lhs;
}
struct dirent
  {
    __ino_t d_ino;
    __off_t d_off;
    unsigned short int d_reclen;
    unsigned char d_type;
    char d_name[256];
  };
struct dirent64
  {
    __ino64_t d_ino;
    __off64_t d_off;
    unsigned short int d_reclen;
    unsigned char d_type;
    char d_name[256];
  };
enum
  {
    DT_UNKNOWN = 0,
    DT_FIFO = 1,
    DT_CHR = 2,
    DT_DIR = 4,
    DT_BLK = 6,
    DT_REG = 8,
    DT_LNK = 10,
    DT_SOCK = 12,
    DT_WHT = 14
  };
typedef struct __dirstream DIR;
extern DIR *opendir (const char *__name) ;
extern DIR *fdopendir (int __fd);
extern int closedir (DIR *__dirp) ;
extern struct dirent *readdir (DIR *__dirp) ;
extern struct dirent64 *readdir64 (DIR *__dirp) ;
extern int readdir_r (DIR * __dirp,
        struct dirent * __entry,
        struct dirent ** __result)
     ;
extern int readdir64_r (DIR * __dirp,
   struct dirent64 * __entry,
   struct dirent64 ** __result)
     ;
extern void rewinddir (DIR *__dirp) ;
extern void seekdir (DIR *__dirp, long int __pos) ;
extern long int telldir (DIR *__dirp) ;
extern int dirfd (DIR *__dirp) ;
extern int scandir (const char * __dir,
      struct dirent *** __namelist,
      int (*__selector) (const struct dirent *),
      int (*__cmp) (const struct dirent **,
      const struct dirent **))
     ;
extern int scandir64 (const char * __dir,
        struct dirent64 *** __namelist,
        int (*__selector) (const struct dirent64 *),
        int (*__cmp) (const struct dirent64 **,
        const struct dirent64 **))
     ;
extern int scandirat (int __dfd, const char * __dir,
        struct dirent *** __namelist,
        int (*__selector) (const struct dirent *),
        int (*__cmp) (const struct dirent **,
        const struct dirent **))
     ;
extern int scandirat64 (int __dfd, const char * __dir,
   struct dirent64 *** __namelist,
   int (*__selector) (const struct dirent64 *),
   int (*__cmp) (const struct dirent64 **,
          const struct dirent64 **))
     ;
extern int alphasort (const struct dirent **__e1,
        const struct dirent **__e2)
     ;
extern int alphasort64 (const struct dirent64 **__e1,
   const struct dirent64 **__e2)
     ;
extern __ssize_t getdirentries (int __fd, char * __buf,
    size_t __nbytes,
    __off_t * __basep)
     ;
extern __ssize_t getdirentries64 (int __fd, char * __buf,
      size_t __nbytes,
      __off64_t * __basep)
     ;
extern int versionsort (const struct dirent **__e1,
   const struct dirent **__e2)
     ;
extern int versionsort64 (const struct dirent64 **__e1,
     const struct dirent64 **__e2)
     ;
struct _cpp_file
{
  const char *name;
  const char *path;
  const char *pchname;
  const char *dir_name;
  struct _cpp_file *next_file;
  const uchar *buffer;
  const cpp_hashnode *cmacro;
  cpp_dir *dir;
  struct stat st;
  int fd;
  int err_no;
  unsigned short stack_count;
  unsigned char once_only;
  unsigned char dont_read;
  unsigned char main_file;
  unsigned char buffer_valid;
  unsigned char pch;
};
struct file_hash_entry
{
  struct file_hash_entry *next;
  cpp_dir *start_dir;
  union
  {
    _cpp_file *file;
    cpp_dir *dir;
  } u;
};
static unsigned char open_file (_cpp_file *file);
static unsigned char pch_open_file (cpp_reader *pfile, _cpp_file *file,
      unsigned char *invalid_pch);
static unsigned char find_file_in_dir (cpp_reader *pfile, _cpp_file *file,
         unsigned char *invalid_pch);
static unsigned char read_file_guts (cpp_reader *pfile, _cpp_file *file);
static unsigned char read_file (cpp_reader *pfile, _cpp_file *file);
static unsigned char should_stack_file (cpp_reader *, _cpp_file *file, unsigned char import);
static struct cpp_dir *search_path_head (cpp_reader *, const char *fname,
     int angle_brackets, enum include_type);
static const char *dir_name_of_file (_cpp_file *file);
static void open_file_failed (cpp_reader *pfile, _cpp_file *file);
static struct file_hash_entry *search_cache (struct file_hash_entry *head,
          const cpp_dir *start_dir);
static _cpp_file *make_cpp_file (cpp_reader *, cpp_dir *, const char *fname);
static cpp_dir *make_cpp_dir (cpp_reader *, const char *dir_name, int sysp);
static void allocate_file_hash_entries (cpp_reader *pfile);
static struct file_hash_entry *new_file_hash_entry (cpp_reader *pfile);
static int report_missing_guard (void **slot, void *b);
static hashval_t file_hash_hash (const void *p);
static int file_hash_eq (const void *p, const void *q);
static char *read_filename_string (int ch, FILE *f);
static void read_name_map (cpp_dir *dir);
static char *remap_filename (cpp_reader *pfile, _cpp_file *file);
static char *append_file_to_dir (const char *fname, cpp_dir *dir);
static unsigned char validate_pch (cpp_reader *, _cpp_file *file, const char *pchname);
static int pchf_adder (void **slot, void *data);
static int pchf_save_compare (const void *e1, const void *e2);
static int pchf_compare (const void *d_p, const void *e_p);
static unsigned char check_file_against_entries (cpp_reader *, _cpp_file *, unsigned char);
static unsigned char
open_file (_cpp_file *file)
{
  if (file->path[0] == '\0')
    {
      file->fd = 0;
      ;
    }
  else
    file->fd = open (file->path, 00 | 0400 | 0, 0666);
  if (file->fd != -1)
    {
      if (fstat (file->fd, &file->st) == 0)
 {
   if (!((((file->st.st_mode)) & 0170000) == (0040000)))
     {
       file->err_no = 0;
       return 1;
     }
   (*__errno_location ()) = 2;
 }
      close (file->fd);
      file->fd = -1;
    }
  else if ((*__errno_location ()) == 20)
    (*__errno_location ()) = 2;
  file->err_no = (*__errno_location ());
  return 0;
}
static unsigned char
pch_open_file (cpp_reader *pfile, _cpp_file *file, unsigned char *invalid_pch)
{
  static const char extension[] = ".gch";
  const char *path = file->path;
  size_t len, flen;
  char *pchname;
  struct stat st;
  unsigned char valid = 0;
  if (file->name[0] == '\0' || !pfile->cb.valid_pch)
    return 0;
  flen = strlen (path);
  len = flen + sizeof (extension);
  pchname = xmalloc (len);
  memcpy (pchname, path, flen);
  memcpy (pchname + flen, extension, sizeof (extension));
  if (stat (pchname, &st) == 0)
    {
      DIR *pchdir;
      struct dirent *d;
      size_t dlen, plen = len;
      if (!((((st.st_mode)) & 0170000) == (0040000)))
 valid = validate_pch (pfile, file, pchname);
      else if ((pchdir = opendir (pchname)) != ((void *)0))
 {
   pchname[plen - 1] = '/';
   while ((d = readdir (pchdir)) != ((void *)0))
     {
       dlen = strlen (d->d_name) + 1;
       if ((strcmp (d->d_name, ".") == 0)
    || (strcmp (d->d_name, "..") == 0))
  continue;
       if (dlen + plen > len)
  {
    len += dlen + 64;
    pchname = xrealloc (pchname, len);
  }
       memcpy (pchname + plen, d->d_name, dlen);
       valid = validate_pch (pfile, file, pchname);
       if (valid)
  break;
     }
   closedir (pchdir);
 }
      if (valid)
 file->pch = 1;
      else
 *invalid_pch = 1;
    }
  if (valid)
    file->pchname = pchname;
  else
    free (pchname);
  return valid;
}
static unsigned char
find_file_in_dir (cpp_reader *pfile, _cpp_file *file, unsigned char *invalid_pch)
{
  char *path;
  if (((pfile)->opts.remap) && (path = remap_filename (pfile, file)))
    ;
  else
    if (file->dir->construct)
      path = file->dir->construct (file->name, file->dir);
    else
      path = append_file_to_dir (file->name, file->dir);
  if (path)
    {
      file->path = path;
      if (pch_open_file (pfile, file, invalid_pch))
 return 1;
      if (open_file (file))
 return 1;
      if (file->err_no != 2)
 {
   open_file_failed (pfile, file);
   return 1;
 }
      free (path);
      file->path = file->name;
    }
  else
    {
      file->err_no = 2;
      file->path = ((void *)0);
    }
  return 0;
}
static unsigned char
search_path_exhausted (cpp_reader *pfile, const char *header1, _cpp_file *file)
{
  missing_header_cb func = pfile->cb.missing_header;
  if (func
      && file->dir == ((void *)0))
    {
      if ((file->path = func (pfile, header1, &file->dir)) != ((void *)0))
 {
   if (open_file (file))
     return 1;
   free ((void *)file->path);
 }
      file->path = file->name;
    }
  return 0;
}
unsigned char
_cpp_find_failed (_cpp_file *file)
{
  return file->err_no != 0;
}
_cpp_file *
_cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, unsigned char fake)
{
  struct file_hash_entry *entry, **hash_slot;
  _cpp_file *file;
  unsigned char invalid_pch = 0;
  if (start_dir == ((void *)0))
    cpp_error (pfile, 0x04, "NULL directory in find_file");
  hash_slot = (struct file_hash_entry **)
    htab_find_slot_with_hash (pfile->file_hash, fname,
         htab_hash_string (fname),
         INSERT);
  entry = search_cache (*hash_slot, start_dir);
  if (entry)
    return entry->u.file;
  file = make_cpp_file (pfile, start_dir, fname);
  for (; !fake ;)
    {
      if (file->dir == pfile->quote_include
   || file->dir == pfile->bracket_include)
 {
   entry = search_cache (*hash_slot, file->dir);
   if (entry)
     {
       free ((char *) file->name);
       free (file);
       file = entry->u.file;
       goto found;
     }
 }
      if (find_file_in_dir (pfile, file, &invalid_pch))
 break;
      file->dir = file->dir->next;
      if (file->dir == ((void *)0))
 {
   if (search_path_exhausted (pfile, fname, file))
     return file;
   open_file_failed (pfile, file);
   if (invalid_pch)
     {
       cpp_error (pfile, 0x03,
        "one or more PCH files were found, but they were invalid");
       if (!cpp_get_options (pfile)->warn_invalid_pch)
  cpp_error (pfile, 0x03,
      "use -Winvalid-pch for more information");
     }
   break;
 }
    }
  file->next_file = pfile->all_files;
  pfile->all_files = file;
  if (file->dir && start_dir->next == pfile->quote_include)
    {
      cpp_dir *d;
      cpp_dir *proper_start_dir = pfile->quote_include;
      for (d = proper_start_dir;; d = d->next)
 {
   if (d == pfile->bracket_include)
     proper_start_dir = d;
   if (d == 0)
     {
       proper_start_dir = 0;
       break;
     }
   if (!strncmp (d->name, file->dir->name, file->dir->len - 1))
     break;
 }
      if (proper_start_dir)
 start_dir = proper_start_dir;
    }
 found:
  entry = new_file_hash_entry (pfile);
  entry->next = *hash_slot;
  entry->start_dir = start_dir;
  entry->u.file = file;
  *hash_slot = entry;
  return file;
}
static unsigned char
read_file_guts (cpp_reader *pfile, _cpp_file *file)
{
  ssize_t size, total, count;
  uchar *buf;
  unsigned char regular;
  if (((((file->st.st_mode)) & 0170000) == (0060000)))
    {
      cpp_error (pfile, 0x03, "%s is a block device", file->path);
      return 0;
    }
  regular = ((((file->st.st_mode)) & 0170000) == (0100000));
  if (regular)
    {
      if (file->st.st_size > ((ssize_t) (~ (ssize_t) 0 - ((ssize_t) ((! ((ssize_t) 0 < (ssize_t) -1)) ? ~ (ssize_t) 0 << (sizeof(ssize_t) * 8 - 1) : (ssize_t) 0)))))
 {
   cpp_error (pfile, 0x03, "%s is too large", file->path);
   return 0;
 }
      size = file->st.st_size;
    }
  else
    size = 8 * 1024;
  buf = xmalloc (size + 1);
  total = 0;
  while ((count = read (file->fd, buf + total, size - total)) > 0)
    {
      total += count;
      if (total == size)
 {
   if (regular)
     break;
   size *= 2;
   buf = xrealloc (buf, size + 1);
 }
    }
  if (count < 0)
    {
      cpp_errno (pfile, 0x03, file->path);
      return 0;
    }
  if (regular && total != size && 1)
    cpp_error (pfile, 0x00,
        "%s is shorter than expected", file->path);
  file->buffer = _cpp_convert_input (pfile, ((pfile)->opts.input_charset),
         buf, size, total, &file->st.st_size);
  file->buffer_valid = 1;
  return 1;
}
static unsigned char
read_file (cpp_reader *pfile, _cpp_file *file)
{
  if (file->buffer_valid)
    return 1;
  if (file->dont_read || file->err_no)
    return 0;
  if (file->fd == -1 && !open_file (file))
    {
      open_file_failed (pfile, file);
      return 0;
    }
  file->dont_read = !read_file_guts (pfile, file);
  close (file->fd);
  file->fd = -1;
  return !file->dont_read;
}
static unsigned char
should_stack_file (cpp_reader *pfile, _cpp_file *file, unsigned char import)
{
  _cpp_file *f;
  if (file->once_only)
    return 0;
  if (import)
    {
      _cpp_mark_file_once_only (pfile, file);
      if (file->stack_count)
 return 0;
    }
  if (file->cmacro && file->cmacro->type == NT_MACRO)
    return 0;
  if (file->pch)
    {
      pfile->cb.read_pch (pfile, file->pchname, file->fd, file->path);
      close (file->fd);
      file->fd = -1;
      return 0;
    }
  if (!read_file (pfile, file))
    return 0;
  if (check_file_against_entries (pfile, file, import))
    {
      if (! import)
 _cpp_mark_file_once_only (pfile, file);
      return 0;
    }
  if (!pfile->seen_once_only)
    return 1;
  for (f = pfile->all_files; f; f = f->next_file)
    {
      if (f == file)
 continue;
      if ((import || f->once_only)
   && f->err_no == 0
   && f->st.st_mtim.tv_sec == file->st.st_mtim.tv_sec
   && f->st.st_size == file->st.st_size
   && read_file (pfile, f)
   && f->st.st_size == file->st.st_size
   && !memcmp (f->buffer, file->buffer, f->st.st_size))
 break;
    }
  return f == ((void *)0);
}
unsigned char
_cpp_stack_file (cpp_reader *pfile, _cpp_file *file, unsigned char import)
{
  cpp_buffer *buffer;
  int sysp;
  if (!should_stack_file (pfile, file, import))
      return 0;
  if (pfile->buffer == ((void *)0) || file->dir == ((void *)0))
    sysp = 0;
  else
    sysp = ((pfile->buffer->sysp) > (file->dir->sysp) ? (pfile->buffer->sysp) : (file->dir->sysp));
  if (((pfile)->opts.deps.style) > !!sysp && !file->stack_count)
    {
      if (!file->main_file || !((pfile)->opts.deps.ignore_main_file))
 deps_add_dep (pfile->deps, file->path);
    }
  file->buffer_valid = 0;
  file->stack_count++;
  buffer = cpp_push_buffer (pfile, file->buffer, file->st.st_size,
       ((pfile)->opts.preprocessed));
  buffer->file = file;
  buffer->sysp = sysp;
  pfile->mi_valid = 1;
  pfile->mi_cmacro = 0;
  _cpp_do_file_change (pfile, LC_ENTER, file->path, 1, sysp);
  return 1;
}
void
_cpp_mark_file_once_only (cpp_reader *pfile, _cpp_file *file)
{
  pfile->seen_once_only = 1;
  file->once_only = 1;
}
static struct cpp_dir *
search_path_head (cpp_reader *pfile, const char *fname, int angle_brackets,
    enum include_type type)
{
  cpp_dir *dir;
  _cpp_file *file;
  if (((((fname)[0]) == '/')))
    return &pfile->no_search_path;
  file = pfile->buffer == ((void *)0) ? pfile->main_file : pfile->buffer->file;
  if (type == IT_INCLUDE_NEXT && file->dir)
    dir = file->dir->next;
  else if (angle_brackets)
    dir = pfile->bracket_include;
  else if (type == IT_CMDLINE)
    return make_cpp_dir (pfile, "./", 0);
  else if (pfile->quote_ignores_source_dir)
    dir = pfile->quote_include;
  else
    return make_cpp_dir (pfile, dir_name_of_file (file),
    pfile->buffer ? pfile->buffer->sysp : 0);
  if (dir == ((void *)0))
    cpp_error (pfile, 0x03,
        "no include path in which to search for %s", fname);
  return dir;
}
static const char *
dir_name_of_file (_cpp_file *file)
{
  if (!file->dir_name)
    {
      size_t len = lbasename (file->path) - file->path;
      char *dir_name = xmalloc (len + 1);
      memcpy (dir_name, file->path, len);
      dir_name[len] = '\0';
      file->dir_name = dir_name;
    }
  return file->dir_name;
}
unsigned char
_cpp_stack_include (cpp_reader *pfile, const char *fname, int angle_brackets,
      enum include_type type)
{
  struct cpp_dir *dir;
  _cpp_file *file;
  dir = search_path_head (pfile, fname, angle_brackets, type);
  if (!dir)
    return 0;
  file = _cpp_find_file (pfile, fname, dir, 0);
  if (! file->pch && file->err_no == 0 && type != IT_CMDLINE)
    pfile->line_table->highest_location--;
  return _cpp_stack_file (pfile, file, type == IT_IMPORT);
}
static void
open_file_failed (cpp_reader *pfile, _cpp_file *file)
{
  int sysp = pfile->line_table->highest_line > 1 && pfile->buffer ? pfile->buffer->sysp : 0;
  unsigned char print_dep = ((pfile)->opts.deps.style) > !!sysp;
  (*__errno_location ()) = file->err_no;
  if (print_dep && ((pfile)->opts.deps.missing_files) && (*__errno_location ()) == 2)
    deps_add_dep (pfile->deps, file->name);
  else
    {
      if (((pfile)->opts.deps.style) && ! print_dep)
 cpp_errno (pfile, 0x00, file->path);
      else
 cpp_errno (pfile, 0x03, file->path);
    }
}
static struct file_hash_entry *
search_cache (struct file_hash_entry *head, const cpp_dir *start_dir)
{
  struct file_hash_entry *p;
  for (p = head; p; p = p->next)
    if (p->start_dir == start_dir)
      return p;
  return 0;
}
static _cpp_file *
make_cpp_file (cpp_reader *pfile, cpp_dir *dir, const char *fname)
{
  _cpp_file *file;
  file = xcalloc (1, sizeof (_cpp_file));
  file->main_file = !pfile->buffer;
  file->fd = -1;
  file->dir = dir;
  file->name = xstrdup (fname);
  return file;
}
static cpp_dir *
make_cpp_dir (cpp_reader *pfile, const char *dir_name, int sysp)
{
  struct file_hash_entry *entry, **hash_slot;
  cpp_dir *dir;
  hash_slot = (struct file_hash_entry **)
    htab_find_slot_with_hash (pfile->file_hash, dir_name,
         htab_hash_string (dir_name),
         INSERT);
  for (entry = *hash_slot; entry; entry = entry->next)
    if (entry->start_dir == ((void *)0))
      return entry->u.dir;
  dir = xcalloc (1, sizeof (cpp_dir));
  dir->next = pfile->quote_include;
  dir->name = (char *) dir_name;
  dir->len = strlen (dir_name);
  dir->sysp = sysp;
  dir->construct = 0;
  entry = new_file_hash_entry (pfile);
  entry->next = *hash_slot;
  entry->start_dir = ((void *)0);
  entry->u.dir = dir;
  *hash_slot = entry;
  return dir;
}
static void
allocate_file_hash_entries (cpp_reader *pfile)
{
  pfile->file_hash_entries_used = 0;
  pfile->file_hash_entries_allocated = 127;
  pfile->file_hash_entries = xmalloc
    (pfile->file_hash_entries_allocated * sizeof (struct file_hash_entry));
}
static struct file_hash_entry *
new_file_hash_entry (cpp_reader *pfile)
{
  if (pfile->file_hash_entries_used == pfile->file_hash_entries_allocated)
    allocate_file_hash_entries (pfile);
  return &pfile->file_hash_entries[pfile->file_hash_entries_used++];
}
unsigned char
cpp_included (cpp_reader *pfile, const char *fname)
{
  struct file_hash_entry *entry;
  entry = htab_find_with_hash (pfile->file_hash, fname,
          htab_hash_string (fname));
  while (entry && (entry->start_dir == ((void *)0) || entry->u.file->err_no))
    entry = entry->next;
  return entry != ((void *)0);
}
static hashval_t
file_hash_hash (const void *p)
{
  struct file_hash_entry *entry = (struct file_hash_entry *) p;
  const char *hname;
  if (entry->start_dir)
    hname = entry->u.file->name;
  else
    hname = entry->u.dir->name;
  return htab_hash_string (hname);
}
static int
file_hash_eq (const void *p, const void *q)
{
  struct file_hash_entry *entry = (struct file_hash_entry *) p;
  const char *fname = (const char *) q;
  const char *hname;
  if (entry->start_dir)
    hname = entry->u.file->name;
  else
    hname = entry->u.dir->name;
  return strcmp (hname, fname) == 0;
}
void
_cpp_init_files (cpp_reader *pfile)
{
  pfile->file_hash = htab_create_alloc (127, file_hash_hash, file_hash_eq,
     ((void *)0), xcalloc, free);
  allocate_file_hash_entries (pfile);
}
void
_cpp_cleanup_files (cpp_reader *pfile)
{
  htab_delete (pfile->file_hash);
}
void
_cpp_fake_include (cpp_reader *pfile, const char *fname)
{
  _cpp_find_file (pfile, fname, pfile->buffer->file->dir, 1);
}
void
cpp_make_system_header (cpp_reader *pfile, int syshdr, int externc)
{
  int flags = 0;
  const struct line_maps *line_table = pfile->line_table;
  const struct line_map *map = &line_table->maps[line_table->used-1];
  if (syshdr)
    flags = 1 + (externc != 0);
  pfile->buffer->sysp = flags;
  _cpp_do_file_change (pfile, LC_RENAME, map->to_file,
         ((((pfile->line_table->highest_line) - (map)->start_location) >> (map)->column_bits) + (map)->to_line), flags);
}
void
cpp_change_file (cpp_reader *pfile, enum lc_reason reason,
   const char *new_name)
{
  _cpp_do_file_change (pfile, reason, new_name, 1, 0);
}
static int
report_missing_guard (void **slot, void *b)
{
  struct file_hash_entry *entry = (struct file_hash_entry *) *slot;
  int *bannerp = (int *) b;
  if (entry->start_dir != ((void *)0))
    {
      _cpp_file *file = entry->u.file;
      if (file->cmacro == ((void *)0) && file->stack_count == 1 && !file->main_file)
 {
   if (*bannerp == 0)
     {
       fputs_unlocked ("Multiple include guards may be useful for:\n", stderr)
              ;
       *bannerp = 1;
     }
   fputs_unlocked (entry->u.file->path, stderr);
   putc_unlocked ('\n', stderr);
 }
    }
  return 0;
}
void
_cpp_report_missing_guards (cpp_reader *pfile)
{
  int banner = 0;
  htab_traverse (pfile->file_hash, report_missing_guard, &banner);
}
int
_cpp_compare_file_date (cpp_reader *pfile, const char *fname,
   int angle_brackets)
{
  _cpp_file *file;
  struct cpp_dir *dir;
  dir = search_path_head (pfile, fname, angle_brackets, IT_INCLUDE);
  if (!dir)
    return -1;
  file = _cpp_find_file (pfile, fname, dir, 0);
  if (file->err_no)
    return -1;
  if (file->fd != -1)
    {
      close (file->fd);
      file->fd = -1;
    }
  return file->st.st_mtim.tv_sec > pfile->buffer->file->st.st_mtim.tv_sec;
}
unsigned char
cpp_push_include (cpp_reader *pfile, const char *fname)
{
  return _cpp_stack_include (pfile, fname, 0, IT_CMDLINE);
}
void
_cpp_pop_file_buffer (cpp_reader *pfile, _cpp_file *file)
{
  if (pfile->mi_valid && file->cmacro == ((void *)0))
    file->cmacro = pfile->mi_cmacro;
  pfile->mi_valid = 0;
  if (file->buffer)
    {
      free ((void *) file->buffer);
      file->buffer = ((void *)0);
    }
}
void
cpp_set_include_chains (cpp_reader *pfile, cpp_dir *quote, cpp_dir *bracket,
   int quote_ignores_source_dir)
{
  pfile->quote_include = quote;
  pfile->bracket_include = quote;
  pfile->quote_ignores_source_dir = quote_ignores_source_dir;
  for (; quote; quote = quote->next)
    {
      quote->name_map = ((void *)0);
      quote->len = strlen (quote->name);
      if (quote == bracket)
 pfile->bracket_include = bracket;
    }
}
static char *
append_file_to_dir (const char *fname, cpp_dir *dir)
{
  size_t dlen, flen;
  char *path;
  dlen = dir->len;
  flen = strlen (fname);
  path = xmalloc (dlen + 1 + flen + 1);
  memcpy (path, dir->name, dlen);
  if (dlen && path[dlen - 1] != '/')
    path[dlen++] = '/';
  memcpy (&path[dlen], fname, flen + 1);
  return path;
}
static char *
read_filename_string (int ch, FILE *f)
{
  char *alloc, *set;
  int len;
  len = 20;
  set = alloc = xmalloc (len + 1);
  if (! (_sch_istable[(ch) & 0xff] & (unsigned short)(_sch_iscppsp)))
    {
      *set++ = ch;
      while ((ch = _IO_getc (f)) != (-1) && ! (_sch_istable[(ch) & 0xff] & (unsigned short)(_sch_iscppsp)))
 {
   if (set - alloc == len)
     {
       len *= 2;
       alloc = xrealloc (alloc, len + 1);
       set = alloc + len / 2;
     }
   *set++ = ch;
 }
    }
  *set = '\0';
  ungetc (ch, f);
  return alloc;
}
static void
read_name_map (cpp_dir *dir)
{
  static const char FILE_NAME_MAP_FILE[] = "header.gcc";
  char *name;
  FILE *f;
  size_t len, count = 0, room = 9;
  len = dir->len;
  name = C_alloca(len + sizeof (FILE_NAME_MAP_FILE) + 1);
  memcpy (name, dir->name, len);
  if (len && name[len - 1] != '/')
    name[len++] = '/';
  strcpy (name + len, FILE_NAME_MAP_FILE);
  f = fopen (name, "r");
  dir->name_map = xmalloc (room * sizeof (char *));
  if (f)
    {
      int ch;
      while ((ch = _IO_getc (f)) != (-1))
 {
   char *to;
   if ((_sch_istable[(ch) & 0xff] & (unsigned short)(_sch_iscppsp)))
     continue;
   if (count + 2 > room)
     {
       room += 8;
       dir->name_map = xrealloc (dir->name_map, room * sizeof (char *));
     }
   dir->name_map[count] = read_filename_string (ch, f);
   while ((ch = _IO_getc (f)) != (-1) && (_sch_istable[(ch) & 0xff] & (unsigned short)(_sch_isblank)))
     ;
   to = read_filename_string (ch, f);
   if (((((to)[0]) == '/')))
     dir->name_map[count + 1] = to;
   else
     {
       dir->name_map[count + 1] = append_file_to_dir (to, dir);
       free (to);
     }
   count += 2;
   while ((ch = _IO_getc (f)) != '\n')
     if (ch == (-1))
       break;
 }
      fclose (f);
    }
  dir->name_map[count] = ((void *)0);
}
static char *
remap_filename (cpp_reader *pfile, _cpp_file *file)
{
  const char *fname, *p;
  char *new_dir;
  cpp_dir *dir;
  size_t index, len;
  dir = file->dir;
  fname = file->name;
  for (;;)
    {
      if (!dir->name_map)
 read_name_map (dir);
      for (index = 0; dir->name_map[index]; index += 2)
 if (!strcmp (dir->name_map[index], fname))
     return xstrdup (dir->name_map[index + 1]);
      p = strchr (fname, '/');
      if (!p || p == fname)
 return ((void *)0);
      len = dir->len + (p - fname + 1);
      new_dir = xmalloc (len + 1);
      memcpy (new_dir, dir->name, dir->len);
      memcpy (new_dir + dir->len, fname, p - fname + 1);
      new_dir[len] = '\0';
      dir = make_cpp_dir (pfile, new_dir, dir->sysp);
      fname = p + 1;
    }
}
static unsigned char
validate_pch (cpp_reader *pfile, _cpp_file *file, const char *pchname)
{
  const char *saved_path = file->path;
  unsigned char valid = 0;
  file->path = pchname;
  if (open_file (file))
    {
      valid = 1 & pfile->cb.valid_pch (pfile, pchname, file->fd);
      if (!valid)
 {
   close (file->fd);
   file->fd = -1;
 }
      if (((pfile)->opts.print_include_names))
 {
   unsigned int i;
   for (i = 1; i < pfile->line_table->depth; i++)
     putc_unlocked ('.', stderr);
   fprintf (stderr, "%c %s\n",
     valid ? '!' : 'x', pchname);
 }
    }
  file->path = saved_path;
  return valid;
}
const char *
cpp_get_path (struct _cpp_file *f)
{
  return f->path;
}
cpp_dir *
cpp_get_dir (struct _cpp_file *f)
{
  return f->dir;
}
cpp_buffer *
cpp_get_buffer (cpp_reader *pfile)
{
  return pfile->buffer;
}
_cpp_file *
cpp_get_file (cpp_buffer *b)
{
  return b->file;
}
cpp_buffer *
cpp_get_prev (cpp_buffer *b)
{
  return b->prev;
}
struct pchf_data {
  size_t count;
  unsigned char have_once_only;
  struct pchf_entry {
    off_t size;
    unsigned char sum[16];
    unsigned char once_only;
  } entries[1];
};
static struct pchf_data *pchf;
struct pchf_adder_info
{
  cpp_reader *pfile;
  struct pchf_data *d;
};
static int
pchf_adder (void **slot, void *data)
{
  struct file_hash_entry *h = (struct file_hash_entry *) *slot;
  struct pchf_adder_info *i = (struct pchf_adder_info *) data;
  if (h->start_dir != ((void *)0) && h->u.file->stack_count != 0)
    {
      struct pchf_data *d = i->d;
      _cpp_file *f = h->u.file;
      size_t count = d->count++;
      if (f->dont_read || f->err_no)
 return 1;
      d->entries[count].once_only = f->once_only;
      d->have_once_only = d->have_once_only | f->once_only;
      if (f->buffer_valid)
   md5_buffer ((const char *)f->buffer,
        f->st.st_size, d->entries[count].sum);
      else
 {
   FILE *ff;
   int oldfd = f->fd;
   if (!open_file (f))
     {
       open_file_failed (i->pfile, f);
       return 0;
     }
   ff = fdopen (f->fd, "rb");
   md5_stream (ff, d->entries[count].sum);
   fclose (ff);
   f->fd = oldfd;
 }
      d->entries[count].size = f->st.st_size;
    }
  return 1;
}
static int
pchf_save_compare (const void *e1, const void *e2)
{
  return memcmp (e1, e2, sizeof (struct pchf_entry));
}
unsigned char
_cpp_save_file_entries (cpp_reader *pfile, FILE *f)
{
  size_t count = 0;
  struct pchf_data *result;
  size_t result_size;
  struct pchf_adder_info pai;
  count = htab_elements (pfile->file_hash);
  result_size = (sizeof (struct pchf_data)
   + sizeof (struct pchf_entry) * (count - 1));
  result = xcalloc (result_size, 1);
  result->count = 0;
  result->have_once_only = 0;
  pai.pfile = pfile;
  pai.d = result;
  htab_traverse (pfile->file_hash, pchf_adder, &pai);
  result_size = (sizeof (struct pchf_data)
                 + sizeof (struct pchf_entry) * (result->count - 1));
  qsort (result->entries, result->count, sizeof (struct pchf_entry),
  pchf_save_compare);
  return fwrite_unlocked (result, result_size, 1, f) == 1;
}
unsigned char
_cpp_read_file_entries (cpp_reader *pfile , FILE *f)
{
  struct pchf_data d;
  if (fread (&d, sizeof (struct pchf_data) - sizeof (struct pchf_entry), 1, f)
       != 1)
    return 0;
  pchf = xmalloc (sizeof (struct pchf_data)
    + sizeof (struct pchf_entry) * (d.count - 1));
  memcpy (pchf, &d, sizeof (struct pchf_data) - sizeof (struct pchf_entry));
  if (fread (pchf->entries, sizeof (struct pchf_entry), d.count, f)
      != d.count)
    return 0;
  return 1;
}
struct pchf_compare_data
{
  off_t size;
  unsigned char sum[16];
  unsigned char sum_computed;
  unsigned char check_included;
  _cpp_file *f;
};
static int
pchf_compare (const void *d_p, const void *e_p)
{
  const struct pchf_entry *e = (const struct pchf_entry *)e_p;
  struct pchf_compare_data *d = (struct pchf_compare_data *)d_p;
  int result;
  result = memcmp (&d->size, &e->size, sizeof (off_t));
  if (result != 0)
    return result;
  if (! d->sum_computed)
    {
      _cpp_file *const f = d->f;
      md5_buffer ((const char *)f->buffer, f->st.st_size, d->sum);
      d->sum_computed = 1;
    }
  result = memcmp (d->sum, e->sum, 16);
  if (result != 0)
    return result;
  if (d->check_included || e->once_only)
    return 0;
  else
    return 1;
}
static unsigned char
check_file_against_entries (cpp_reader *pfile ,
       _cpp_file *f,
       unsigned char check_included)
{
  struct pchf_compare_data d;
  if (pchf == ((void *)0)
      || (! check_included && ! pchf->have_once_only))
    return 0;
  d.size = f->st.st_size;
  d.sum_computed = 0;
  d.f = f;
  d.check_included = check_included;
  return bsearch (&d, pchf->entries, pchf->count, sizeof (struct pchf_entry),
    pchf_compare) != ((void *)0);
}
static cpp_hashnode *alloc_ident_node (hash_table *);
static cpp_hashnode *
alloc_ident_node (hash_table *table)
{
  cpp_hashnode *node;
  node = (( ((&table->pfile->hash_ob))->temp = ((sizeof (cpp_hashnode))), ((((&table->pfile->hash_ob))->chunk_limit - ((&table->pfile->hash_ob))->next_free < ((&table->pfile->hash_ob))->temp) ? (_obstack_newchunk (((&table->pfile->hash_ob)), ((&table->pfile->hash_ob))->temp), 0) : 0), (((&table->pfile->hash_ob))->next_free += (((&table->pfile->hash_ob))->temp))), ( (((&table->pfile->hash_ob))->next_free == ((&table->pfile->hash_ob))->object_base ? ((((&table->pfile->hash_ob))->maybe_empty_object = 1), 0) : 0), ((&table->pfile->hash_ob))->temp = ((((&table->pfile->hash_ob))->object_base) - (char *) 0), ((&table->pfile->hash_ob))->next_free = (((((((&table->pfile->hash_ob))->next_free) - (char *) 0)+((&table->pfile->hash_ob))->alignment_mask) & ~ (((&table->pfile->hash_ob))->alignment_mask)) + (char *) 0), ((((&table->pfile->hash_ob))->next_free - (char *) ((&table->pfile->hash_ob))->chunk > ((&table->pfile->hash_ob))->chunk_limit - (char *) ((&table->pfile->hash_ob))->chunk) ? (((&table->pfile->hash_ob))->next_free = ((&table->pfile->hash_ob))->chunk_limit) : 0), ((&table->pfile->hash_ob))->object_base = ((&table->pfile->hash_ob))->next_free, ((((&table->pfile->hash_ob))->temp) + (char *) 0)));
  memset (node, 0, sizeof (cpp_hashnode));
  return node;
}
void
_cpp_init_hashtable (cpp_reader *pfile, hash_table *table)
{
  struct spec_nodes *s;
  if (table == ((void *)0))
    {
      pfile->our_hashtable = 1;
      table = ht_create (13);
      table->alloc_node = (hashnode (*) (hash_table *)) alloc_ident_node;
      _obstack_begin (&pfile->hash_ob, 0, 0,
        (void *(*) (long)) xmalloc,
        (void (*) (void *)) free);
    }
  table->pfile = pfile;
  pfile->hash_table1 = table;
  _cpp_init_directives (pfile);
  _cpp_init_internal_pragmas (pfile);
  s = &pfile->spec_nodes;
  s->n_defined = cpp_lookup (pfile, (const uchar *)"defined", sizeof "defined" - 1);
  s->n_true = cpp_lookup (pfile, (const uchar *)"true", sizeof "true" - 1);
  s->n_false = cpp_lookup (pfile, (const uchar *)"false", sizeof "false" - 1);
  s->n__VA_ARGS__ = cpp_lookup (pfile, (const uchar *)"__VA_ARGS__", sizeof "__VA_ARGS__" - 1);
  s->n__VA_ARGS__->flags |= (1 << 3);
}
void
_cpp_destroy_hashtable (cpp_reader *pfile)
{
  if (pfile->our_hashtable)
    {
      ht_destroy (pfile->hash_table1);
      ( (&pfile->hash_ob)->temp = (char *) (0) - (char *) (&pfile->hash_ob)->chunk, (((&pfile->hash_ob)->temp > 0 && (&pfile->hash_ob)->temp < (&pfile->hash_ob)->chunk_limit - (char *) (&pfile->hash_ob)->chunk) ? (int) ((&pfile->hash_ob)->next_free = (&pfile->hash_ob)->object_base = (&pfile->hash_ob)->temp + (char *) (&pfile->hash_ob)->chunk) : (((obstack_free) ((&pfile->hash_ob), (&pfile->hash_ob)->temp + (char *) (&pfile->hash_ob)->chunk), 0), 0)));
    }
}
cpp_hashnode *
cpp_lookup (cpp_reader *pfile, const unsigned char *str, unsigned int len)
{
  return ((cpp_hashnode *) (ht_lookup (pfile->hash_table1, str, len, HT_ALLOC)));
}
int
cpp_defined (cpp_reader *pfile, const unsigned char *str, int len)
{
  cpp_hashnode *node;
  node = ((cpp_hashnode *) (ht_lookup (pfile->hash_table1, str, len, HT_NO_INSERT)));
  return node && node->type == NT_MACRO;
}
void
cpp_forall_identifiers (cpp_reader *pfile, cpp_cb cb, void *v)
{
  ht_forall (pfile->hash_table1, (ht_cb) cb, v);
}
static void init_library (void);
static void mark_named_operators (cpp_reader *);
static void read_original_filename (cpp_reader *);
static void read_original_directory (cpp_reader *);
static void post_options (cpp_reader *);
uchar _cpp_trigraph_map[(127 * 2 + 1) + 1] = { 0 }; static void init_trigraph_map (void) { unsigned char *x = _cpp_trigraph_map;
  x['='] = '#'; x[')'] = ']'; x['!'] = '|';
  x['('] = '['; x['\''] = '^'; x['>'] = '}';
  x['/'] = '\\'; x['<'] = '{'; x['-'] = '~';
}
struct lang_flags
{
  char c99;
  char cplusplus;
  char extended_numbers;
  char std;
  char cplusplus_comments;
  char digraphs;
};
static const struct lang_flags lang_defaults[] =
{
                { 0, 0, 1, 0, 1, 1 },
                { 1, 0, 1, 0, 1, 1 },
                { 0, 0, 0, 1, 0, 0 },
                { 0, 0, 0, 1, 0, 1 },
                { 1, 0, 1, 1, 1, 1 },
                { 0, 1, 1, 0, 1, 1 },
                { 0, 1, 1, 1, 1, 1 },
                { 0, 0, 1, 0, 1, 0 }
};
void
cpp_set_lang (cpp_reader *pfile, enum c_lang lang)
{
  const struct lang_flags *l = &lang_defaults[(int) lang];
  ((pfile)->opts.lang) = lang;
  ((pfile)->opts.c99) = l->c99;
  ((pfile)->opts.cplusplus) = l->cplusplus;
  ((pfile)->opts.extended_numbers) = l->extended_numbers;
  ((pfile)->opts.std) = l->std;
  ((pfile)->opts.trigraphs) = l->std;
  ((pfile)->opts.cplusplus_comments) = l->cplusplus_comments;
  ((pfile)->opts.digraphs) = l->digraphs;
}
static void
init_library (void)
{
  static int initialized = 0;
  if (! initialized)
    {
      initialized = 1;
      init_trigraph_map ();
       (void) bindtextdomain ("gcc", "/scratch2/smcc-extras/build/gcc-cvs/install/share/locale");
    }
}
cpp_reader *
cpp_create_reader (enum c_lang lang, hash_table *table,
     struct line_maps *line_table)
{
  cpp_reader *pfile;
  init_library ();
  pfile = xcalloc (1, sizeof (cpp_reader));
  cpp_set_lang (pfile, lang);
  ((pfile)->opts.warn_multichar) = 1;
  ((pfile)->opts.discard_comments) = 1;
  ((pfile)->opts.discard_comments_in_macro_exp) = 1;
  ((pfile)->opts.show_column) = 1;
  ((pfile)->opts.tabstop) = 8;
  ((pfile)->opts.operator_names) = 1;
  ((pfile)->opts.warn_trigraphs) = 2;
  ((pfile)->opts.warn_endif_labels) = 1;
  ((pfile)->opts.warn_deprecated) = 1;
  ((pfile)->opts.warn_long_long) = !((pfile)->opts.c99);
  ((pfile)->opts.dollars_in_ident) = 1;
  ((pfile)->opts.warn_dollars) = 1;
  ((pfile)->opts.warn_variadic_macros) = 1;
  ((pfile)->opts.precision) = 8 * sizeof (long);
  ((pfile)->opts.char_precision) = 8;
  ((pfile)->opts.wchar_precision) = 8 * sizeof (int);
  ((pfile)->opts.int_precision) = 8 * sizeof (int);
  ((pfile)->opts.unsigned_char) = 0;
  ((pfile)->opts.unsigned_wchar) = 1;
  ((pfile)->opts.bytes_big_endian) = 1;
  ((pfile)->opts.narrow_charset) = _cpp_default_encoding ();
  ((pfile)->opts.wide_charset) = 0;
  ((pfile)->opts.input_charset) = _cpp_default_encoding ();
  pfile->no_search_path.name = (char *) "";
  pfile->line_table = line_table;
  pfile->state.save_comments = ! ((pfile)->opts.discard_comments);
  pfile->avoid_paste.type = CPP_PADDING;
  pfile->avoid_paste.val.source = ((void *)0);
  pfile->eof.type = CPP_EOF;
  pfile->eof.flags = 0;
  _cpp_init_tokenrun (&pfile->base_run, 250);
  pfile->cur_run = &pfile->base_run;
  pfile->cur_token = pfile->base_run.base;
  pfile->context = &pfile->base_context;
  pfile->base_context.macro = 0;
  pfile->base_context.prev = pfile->base_context.next = 0;
  pfile->a_buff = _cpp_get_buff (pfile, 0);
  pfile->u_buff = _cpp_get_buff (pfile, 0);
  _cpp_expand_op_stack (pfile);
  _obstack_begin (&pfile->buffer_ob, 0, 0,
    (void *(*) (long)) xmalloc,
    (void (*) (void *)) free);
  _cpp_init_files (pfile);
  _cpp_init_hashtable (pfile, table);
  return pfile;
}
void
cpp_destroy (cpp_reader *pfile)
{
  cpp_context *context, *contextn;
  tokenrun *run, *runn;
  free (pfile->op_stack);
  while (((pfile)->buffer) != ((void *)0))
    _cpp_pop_buffer (pfile);
  if (pfile->out.base)
    free (pfile->out.base);
  if (pfile->macro_buffer)
    {
      free (pfile->macro_buffer);
      pfile->macro_buffer = ((void *)0);
      pfile->macro_buffer_len = 0;
    }
  if (pfile->deps)
    deps_free (pfile->deps);
  ( (&pfile->buffer_ob)->temp = (char *) (0) - (char *) (&pfile->buffer_ob)->chunk, (((&pfile->buffer_ob)->temp > 0 && (&pfile->buffer_ob)->temp < (&pfile->buffer_ob)->chunk_limit - (char *) (&pfile->buffer_ob)->chunk) ? (int) ((&pfile->buffer_ob)->next_free = (&pfile->buffer_ob)->object_base = (&pfile->buffer_ob)->temp + (char *) (&pfile->buffer_ob)->chunk) : (((obstack_free) ((&pfile->buffer_ob), (&pfile->buffer_ob)->temp + (char *) (&pfile->buffer_ob)->chunk), 0), 0)));
  _cpp_destroy_hashtable (pfile);
  _cpp_cleanup_files (pfile);
  _cpp_destroy_iconv (pfile);
  _cpp_free_buff (pfile->a_buff);
  _cpp_free_buff (pfile->u_buff);
  _cpp_free_buff (pfile->free_buffs);
  for (run = &pfile->base_run; run; run = runn)
    {
      runn = run->next;
      free (run->base);
      if (run != &pfile->base_run)
 free (run);
    }
  for (context = pfile->base_context.next; context; context = contextn)
    {
      contextn = context->next;
      free (context);
    }
  free (pfile);
}
struct builtin
{
  const uchar *name;
  unsigned short len;
  unsigned short value;
};
static const struct builtin builtin_array[] =
{
  { (const uchar *)"__TIME__", sizeof "__TIME__" - 1, BT_TIME },
  { (const uchar *)"__DATE__", sizeof "__DATE__" - 1, BT_DATE },
  { (const uchar *)"__FILE__", sizeof "__FILE__" - 1, BT_FILE },
  { (const uchar *)"__BASE_FILE__", sizeof "__BASE_FILE__" - 1, BT_BASE_FILE },
  { (const uchar *)"__LINE__", sizeof "__LINE__" - 1, BT_SPECLINE },
  { (const uchar *)"__INCLUDE_LEVEL__", sizeof "__INCLUDE_LEVEL__" - 1, BT_INCLUDE_LEVEL },
  { (const uchar *)"_Pragma", sizeof "_Pragma" - 1, BT_PRAGMA },
  { (const uchar *)"__STDC__", sizeof "__STDC__" - 1, BT_STDC }
};
static const struct builtin operator_array[] =
{
  { (const uchar *)"and", sizeof "and" - 1, CPP_AND_AND },
  { (const uchar *)"and_eq", sizeof "and_eq" - 1, CPP_AND_EQ },
  { (const uchar *)"bitand", sizeof "bitand" - 1, CPP_AND },
  { (const uchar *)"bitor", sizeof "bitor" - 1, CPP_OR },
  { (const uchar *)"compl", sizeof "compl" - 1, CPP_COMPL },
  { (const uchar *)"not", sizeof "not" - 1, CPP_NOT },
  { (const uchar *)"not_eq", sizeof "not_eq" - 1, CPP_NOT_EQ },
  { (const uchar *)"or", sizeof "or" - 1, CPP_OR_OR },
  { (const uchar *)"or_eq", sizeof "or_eq" - 1, CPP_OR_EQ },
  { (const uchar *)"xor", sizeof "xor" - 1, CPP_XOR },
  { (const uchar *)"xor_eq", sizeof "xor_eq" - 1, CPP_XOR_EQ }
};
static void
mark_named_operators (cpp_reader *pfile)
{
  const struct builtin *b;
  for (b = operator_array;
       b < (operator_array + (sizeof (operator_array) / sizeof ((operator_array)[0])));
       b++)
    {
      cpp_hashnode *hp = cpp_lookup (pfile, b->name, b->len);
      hp->flags |= (1 << 0);
      hp->is_directive = 0;
      hp->directive_index = b->value;
    }
}
void
cpp_init_builtins (cpp_reader *pfile, int hosted)
{
  const struct builtin *b;
  size_t n = (sizeof (builtin_array) / sizeof ((builtin_array)[0]));
  if (((pfile)->opts.traditional))
    n -= 2;
  for(b = builtin_array; b < builtin_array + n; b++)
    {
      cpp_hashnode *hp = cpp_lookup (pfile, b->name, b->len);
      hp->type = NT_MACRO;
      hp->flags |= (1 << 2) | (1 << 4);
      hp->value.builtin = b->value;
    }
  if (((pfile)->opts.cplusplus))
    _cpp_define_builtin (pfile, "__cplusplus 1");
  else if (((pfile)->opts.lang) == CLK_ASM)
    _cpp_define_builtin (pfile, "__ASSEMBLER__ 1");
  else if (((pfile)->opts.lang) == CLK_STDC94)
    _cpp_define_builtin (pfile, "__STDC_VERSION__ 199409L");
  else if (((pfile)->opts.c99))
    _cpp_define_builtin (pfile, "__STDC_VERSION__ 199901L");
  if (hosted)
    _cpp_define_builtin (pfile, "__STDC_HOSTED__ 1");
  else
    _cpp_define_builtin (pfile, "__STDC_HOSTED__ 0");
  if (((pfile)->opts.objc))
    _cpp_define_builtin (pfile, "__OBJC__ 1");
}
void
cpp_post_options (cpp_reader *pfile)
{
  ;
  post_options (pfile);
  if (((pfile)->opts.cplusplus) && ((pfile)->opts.operator_names))
    mark_named_operators (pfile);
}
const char *
cpp_read_main_file (cpp_reader *pfile, const char *fname)
{
  if (((pfile)->opts.deps.style) != DEPS_NONE)
    {
      if (!pfile->deps)
 pfile->deps = deps_init ();
      deps_add_default_target (pfile->deps, fname);
    }
  pfile->main_file
    = _cpp_find_file (pfile, fname, &pfile->no_search_path, 0);
  if (_cpp_find_failed (pfile->main_file))
    return ((void *)0);
  _cpp_stack_file (pfile, pfile->main_file, 0);
  if (((pfile)->opts.preprocessed))
    {
      read_original_filename (pfile);
      fname = pfile->line_table->maps[pfile->line_table->used-1].to_file;
    }
  return fname;
}
static void
read_original_filename (cpp_reader *pfile)
{
  const cpp_token *token, *token1;
  token = _cpp_lex_direct (pfile);
  if (token->type == CPP_HASH)
    {
      token1 = _cpp_lex_direct (pfile);
      _cpp_backup_tokens (pfile, 1);
      if (token1->type == CPP_NUMBER)
 {
   _cpp_handle_directive (pfile, token->flags & (1 << 0));
   read_original_directory (pfile);
   return;
 }
    }
  _cpp_backup_tokens (pfile, 1);
}
static void
read_original_directory (cpp_reader *pfile)
{
  const cpp_token *hash, *token;
  hash = _cpp_lex_direct (pfile);
  if (hash->type != CPP_HASH)
    {
      _cpp_backup_tokens (pfile, 1);
      return;
    }
  token = _cpp_lex_direct (pfile);
  if (token->type != CPP_NUMBER)
    {
      _cpp_backup_tokens (pfile, 2);
      return;
    }
  token = _cpp_lex_direct (pfile);
  if (token->type != CPP_STRING
      || ! (token->val.str.len >= 5
     && token->val.str.text[token->val.str.len-2] == '/'
     && token->val.str.text[token->val.str.len-3] == '/'))
    {
      _cpp_backup_tokens (pfile, 3);
      return;
    }
  if (pfile->cb.dir_change)
    {
      char *debugdir = C_alloca(token->val.str.len - 3);
      memcpy (debugdir, (const char *) token->val.str.text + 1,
       token->val.str.len - 4);
      debugdir[token->val.str.len - 4] = '\0';
      pfile->cb.dir_change (pfile, debugdir);
    }
}
int
cpp_finish (cpp_reader *pfile, FILE *deps_stream)
{
  if (((pfile)->opts.warn_unused_macros))
    cpp_forall_identifiers (pfile, _cpp_warn_if_unused_macro, ((void *)0));
  while (pfile->buffer)
    _cpp_pop_buffer (pfile);
  if (((pfile)->opts.deps.style) != DEPS_NONE
      && deps_stream && pfile->errors == 0)
    {
      deps_write (pfile->deps, deps_stream, 72);
      if (((pfile)->opts.deps.phony_targets))
 deps_phony_targets (pfile->deps, deps_stream);
    }
  if (((pfile)->opts.print_include_names))
    _cpp_report_missing_guards (pfile);
  return pfile->errors;
}
static void
post_options (cpp_reader *pfile)
{
  if (((pfile)->opts.cplusplus))
    ((pfile)->opts.warn_traditional) = 0;
  if (((pfile)->opts.preprocessed))
    {
      pfile->state.prevent_expansion = 1;
      ((pfile)->opts.traditional) = 0;
    }
  if (((pfile)->opts.warn_trigraphs) == 2)
    ((pfile)->opts.warn_trigraphs) = !((pfile)->opts.trigraphs);
  if (((pfile)->opts.traditional))
    {
      ((pfile)->opts.cplusplus_comments) = 0;
      ((pfile)->opts.show_column) = 0;
      ((pfile)->opts.trigraphs) = 0;
      ((pfile)->opts.warn_trigraphs) = 0;
    }
}
enum spell_type
{
  SPELL_OPERATOR = 0,
  SPELL_IDENT,
  SPELL_LITERAL,
  SPELL_NONE
};
struct token_spelling
{
  enum spell_type category;
  const unsigned char *name;
};
static const unsigned char *const digraph_spellings[] =
{ (const uchar *)"%:", (const uchar *)"%:%:", (const uchar *)"<:", (const uchar *)":>", (const uchar *)"<%", (const uchar *)"%>" };
static const struct token_spelling token_spellings[N_TTYPES] = { { SPELL_OPERATOR, (const uchar *) "=" }, { SPELL_OPERATOR, (const uchar *) "!" }, { SPELL_OPERATOR, (const uchar *) ">" }, { SPELL_OPERATOR, (const uchar *) "<" }, { SPELL_OPERATOR, (const uchar *) "+" }, { SPELL_OPERATOR, (const uchar *) "-" }, { SPELL_OPERATOR, (const uchar *) "*" }, { SPELL_OPERATOR, (const uchar *) "/" }, { SPELL_OPERATOR, (const uchar *) "%" }, { SPELL_OPERATOR, (const uchar *) "&" }, { SPELL_OPERATOR, (const uchar *) "|" }, { SPELL_OPERATOR, (const uchar *) "^" }, { SPELL_OPERATOR, (const uchar *) ">>" }, { SPELL_OPERATOR, (const uchar *) "<<" }, { SPELL_OPERATOR, (const uchar *) "<?" }, { SPELL_OPERATOR, (const uchar *) ">?" }, { SPELL_OPERATOR, (const uchar *) "~" }, { SPELL_OPERATOR, (const uchar *) "&&" }, { SPELL_OPERATOR, (const uchar *) "||" }, { SPELL_OPERATOR, (const uchar *) "?" }, { SPELL_OPERATOR, (const uchar *) ":" }, { SPELL_OPERATOR, (const uchar *) "," }, { SPELL_OPERATOR, (const uchar *) "(" }, { SPELL_OPERATOR, (const uchar *) ")" }, { SPELL_NONE, (const uchar *) "CPP_EOF" }, { SPELL_OPERATOR, (const uchar *) "==" }, { SPELL_OPERATOR, (const uchar *) "!=" }, { SPELL_OPERATOR, (const uchar *) ">=" }, { SPELL_OPERATOR, (const uchar *) "<=" }, { SPELL_OPERATOR, (const uchar *) "+=" }, { SPELL_OPERATOR, (const uchar *) "-=" }, { SPELL_OPERATOR, (const uchar *) "*=" }, { SPELL_OPERATOR, (const uchar *) "/=" }, { SPELL_OPERATOR, (const uchar *) "%=" }, { SPELL_OPERATOR, (const uchar *) "&=" }, { SPELL_OPERATOR, (const uchar *) "|=" }, { SPELL_OPERATOR, (const uchar *) "^=" }, { SPELL_OPERATOR, (const uchar *) ">>=" }, { SPELL_OPERATOR, (const uchar *) "<<=" }, { SPELL_OPERATOR, (const uchar *) "<?=" }, { SPELL_OPERATOR, (const uchar *) ">?=" }, { SPELL_OPERATOR, (const uchar *) "#" }, { SPELL_OPERATOR, (const uchar *) "##" }, { SPELL_OPERATOR, (const uchar *) "[" }, { SPELL_OPERATOR, (const uchar *) "]" }, { SPELL_OPERATOR, (const uchar *) "{" }, { SPELL_OPERATOR, (const uchar *) "}" }, { SPELL_OPERATOR, (const uchar *) ";" }, { SPELL_OPERATOR, (const uchar *) "..." }, { SPELL_OPERATOR, (const uchar *) "++" }, { SPELL_OPERATOR, (const uchar *) "--" }, { SPELL_OPERATOR, (const uchar *) "->" }, { SPELL_OPERATOR, (const uchar *) "." }, { SPELL_OPERATOR, (const uchar *) "::" }, { SPELL_OPERATOR, (const uchar *) "->*" }, { SPELL_OPERATOR, (const uchar *) ".*" }, { SPELL_OPERATOR, (const uchar *) "@" }, { SPELL_IDENT, (const uchar *) "CPP_NAME" }, { SPELL_IDENT, (const uchar *) "CPP_AT_NAME" }, { SPELL_LITERAL, (const uchar *) "CPP_NUMBER" }, { SPELL_LITERAL, (const uchar *) "CPP_CHAR" }, { SPELL_LITERAL, (const uchar *) "CPP_WCHAR" }, { SPELL_LITERAL, (const uchar *) "CPP_OTHER" }, { SPELL_LITERAL, (const uchar *) "CPP_STRING" }, { SPELL_LITERAL, (const uchar *) "CPP_WSTRING" }, { SPELL_LITERAL, (const uchar *) "CPP_OBJC_STRING" }, { SPELL_LITERAL, (const uchar *) "CPP_HEADER_NAME" }, { SPELL_LITERAL, (const uchar *) "CPP_COMMENT" }, { SPELL_NONE, (const uchar *) "CPP_MACRO_ARG" }, { SPELL_NONE, (const uchar *) "CPP_PADDING" }, };
static void add_line_note (cpp_buffer *, const uchar *, unsigned int);
static int skip_line_comment (cpp_reader *);
static void skip_whitespace (cpp_reader *, cppchar_t);
static cpp_hashnode *lex_identifier (cpp_reader *, const uchar *);
static void lex_number (cpp_reader *, cpp_string *);
static unsigned char forms_identifier_p (cpp_reader *, int);
static void lex_preproc_string (cpp_reader *, cpp_token *, const uchar *);
static void save_comment (cpp_reader *, cpp_token *, const uchar *, cppchar_t);
static void create_literal (cpp_reader *, cpp_token *, const uchar *,
       unsigned int, enum cpp_ttype);
static unsigned char warn_in_comment (cpp_reader *, _cpp_line_note *);
static int name_p (cpp_reader *, const cpp_string *);
static tokenrun *next_tokenrun (tokenrun *);
static _cpp_buff *new_buff (size_t);
int
cpp_ideq (const cpp_token *token, const char *string1)
{
  if (token->type != CPP_NAME)
    return 0;
  return !ustrcmp (((&(token->val.node)->ident)->str), (const uchar *) string1);
}
static void
add_line_note (cpp_buffer *buffer, const uchar *pos, unsigned int type)
{
  if (buffer->notes_used == buffer->notes_cap)
    {
      buffer->notes_cap = buffer->notes_cap * 2 + 200;
      buffer->notes = xrealloc (buffer->notes,
    buffer->notes_cap * sizeof (_cpp_line_note));
    }
  buffer->notes[buffer->notes_used].pos = pos;
  buffer->notes[buffer->notes_used].type = type;
  buffer->notes_used++;
}
void
_cpp_clean_line (cpp_reader *pfile)
{
  cpp_buffer *buffer;
  const uchar *s;
  uchar c, *d, *p;
  buffer = pfile->buffer;
  buffer->cur_note = buffer->notes_used = 0;
  buffer->cur = buffer->line_base = buffer->next_line;
  buffer->need_line = 0;
  s = buffer->next_line - 1;
  if (!buffer->from_stage3)
    {
      for (;;)
 {
   c = *++s;
   if (c == '\n' || c == '\r')
     {
       d = (uchar *) s;
       if (s == buffer->rlimit)
  goto done;
       if (c == '\r' && s[1] == '\n')
  s++;
       if (s == buffer->rlimit)
  goto done;
       p = d;
       while (p != buffer->next_line && (_sch_istable[(p[-1]) & 0xff] & (unsigned short)(_sch_isnvsp)))
  p--;
       if (p == buffer->next_line || p[-1] != '\\')
  goto done;
       add_line_note (buffer, p - 1, p != d ? ' ' : '\\');
       d = p - 2;
       buffer->next_line = p - 1;
       break;
     }
   if (c == '?' && s[1] == '?' && _cpp_trigraph_map[s[2]])
     {
       add_line_note (buffer, s, s[2]);
       if (((pfile)->opts.trigraphs))
  {
    d = (uchar *) s;
    *d = _cpp_trigraph_map[s[2]];
    s += 2;
    break;
  }
     }
 }
      for (;;)
 {
   c = *++s;
   *++d = c;
   if (c == '\n' || c == '\r')
     {
       if (c == '\r' && s != buffer->rlimit && s[1] == '\n')
  s++;
       if (s == buffer->rlimit)
  break;
       p = d;
       while (p != buffer->next_line && (_sch_istable[(p[-1]) & 0xff] & (unsigned short)(_sch_isnvsp)))
  p--;
       if (p == buffer->next_line || p[-1] != '\\')
  break;
       add_line_note (buffer, p - 1, p != d ? ' ': '\\');
       d = p - 2;
       buffer->next_line = p - 1;
     }
   else if (c == '?' && s[1] == '?' && _cpp_trigraph_map[s[2]])
     {
       add_line_note (buffer, d, s[2]);
       if (((pfile)->opts.trigraphs))
  {
    *d = _cpp_trigraph_map[s[2]];
    s += 2;
  }
     }
 }
    }
  else
    {
      do
 s++;
      while (*s != '\n' && *s != '\r');
      d = (uchar *) s;
      if (*s == '\r' && s != buffer->rlimit && s[1] == '\n')
 s++;
    }
 done:
  *d = '\n';
  add_line_note (buffer, d + 1, '\n');
  buffer->next_line = s + 1;
}
static unsigned char
warn_in_comment (cpp_reader *pfile, _cpp_line_note *note)
{
  const uchar *p;
  if (note->type != '/')
    return 0;
  if (((pfile)->opts.trigraphs))
    return note[1].pos == note->pos;
  p = note->pos + 3;
  while ((_sch_istable[(*p) & 0xff] & (unsigned short)(_sch_isnvsp)))
    p++;
  return (*p == '\n' && p < note[1].pos);
}
void
_cpp_process_line_notes (cpp_reader *pfile, int in_comment)
{
  cpp_buffer *buffer = pfile->buffer;
  for (;;)
    {
      _cpp_line_note *note = &buffer->notes[buffer->cur_note];
      unsigned int col;
      if (note->pos > buffer->cur)
 break;
      buffer->cur_note++;
      col = ((note->pos + 1) - (buffer)->line_base);
      if (note->type == '\\' || note->type == ' ')
 {
   if (note->type == ' ' && !in_comment)
     cpp_error_with_line (pfile, 0x00, pfile->line_table->highest_line, col,
     "backslash and newline separated by space");
   if (buffer->next_line > buffer->rlimit)
     {
       cpp_error_with_line (pfile, 0x02, pfile->line_table->highest_line, col,
       "backslash-newline at end of file");
       buffer->next_line = buffer->rlimit;
     }
   buffer->line_base = note->pos;
   do { const struct line_maps *line_table = pfile->line_table; const struct line_map *map = &line_table->maps[line_table->used-1]; unsigned int line = ((((line_table->highest_line) - (map)->start_location) >> (map)->column_bits) + (map)->to_line); linemap_line_start (pfile->line_table, line + 1, 0); } while (0);
 }
      else if (_cpp_trigraph_map[note->type])
 {
   if (((pfile)->opts.warn_trigraphs)
       && (!in_comment || warn_in_comment (pfile, note)))
     {
       if (((pfile)->opts.trigraphs))
  cpp_error_with_line (pfile, 0x00, pfile->line_table->highest_line, col,
         "trigraph ??%c converted to %c",
         note->type,
         (int) _cpp_trigraph_map[note->type]);
       else
  {
    cpp_error_with_line
      (pfile, 0x00, pfile->line_table->highest_line, col,
       "trigraph ??%c ignored, use -trigraphs to enable",
       note->type);
  }
     }
 }
      else
 abort ();
    }
}
unsigned char
_cpp_skip_block_comment (cpp_reader *pfile)
{
  cpp_buffer *buffer = pfile->buffer;
  const uchar *cur = buffer->cur;
  uchar c;
  cur++;
  if (*cur == '/')
    cur++;
  for (;;)
    {
      c = *cur++;
      if (c == '/')
 {
   if (cur[-2] == '*')
     break;
   if (((pfile)->opts.warn_comments)
       && cur[0] == '*' && cur[1] != '/')
     {
       buffer->cur = cur;
       cpp_error_with_line (pfile, 0x00,
       pfile->line_table->highest_line, (((buffer)->cur) - (buffer)->line_base),
       "\"/*\" within comment");
     }
 }
      else if (c == '\n')
 {
   unsigned int cols;
   buffer->cur = cur - 1;
   _cpp_process_line_notes (pfile, 1);
   if (buffer->next_line >= buffer->rlimit)
     return 1;
   _cpp_clean_line (pfile);
   cols = buffer->next_line - buffer->line_base;
   do { const struct line_maps *line_table = pfile->line_table; const struct line_map *map = &line_table->maps[line_table->used-1]; unsigned int line = ((((line_table->highest_line) - (map)->start_location) >> (map)->column_bits) + (map)->to_line); linemap_line_start (pfile->line_table, line + 1, cols); } while (0);
   cur = buffer->cur;
 }
    }
  buffer->cur = cur;
  _cpp_process_line_notes (pfile, 1);
  return 0;
}
static int
skip_line_comment (cpp_reader *pfile)
{
  cpp_buffer *buffer = pfile->buffer;
  unsigned int orig_line = pfile->line_table->highest_line;
  while (*buffer->cur != '\n')
    buffer->cur++;
  _cpp_process_line_notes (pfile, 1);
  return orig_line != pfile->line_table->highest_line;
}
static void
skip_whitespace (cpp_reader *pfile, cppchar_t c)
{
  cpp_buffer *buffer = pfile->buffer;
  unsigned char saw_NUL = 0;
  do
    {
      if (c == ' ' || c == '\t')
 ;
      else if (c == '\0')
 saw_NUL = 1;
      else if (pfile->state.in_directive && ((pfile)->opts.pedantic))
 cpp_error_with_line (pfile, 0x02, pfile->line_table->highest_line,
        (((buffer)->cur) - (buffer)->line_base),
        "%s in preprocessing directive",
        c == '\f' ? "form feed" : "vertical tab");
      c = *buffer->cur++;
    }
  while ((_sch_istable[(c) & 0xff] & (unsigned short)(_sch_isnvsp)));
  if (saw_NUL)
    cpp_error (pfile, 0x00, "null character(s) ignored");
  buffer->cur--;
}
static int
name_p (cpp_reader *pfile, const cpp_string *string1)
{
  unsigned int i;
  for (i = 0; i < string1->len; i++)
    if (!((_sch_istable[(string1->text[i]) & 0xff] & (unsigned short)(_sch_isidnum)) || ((string1->text[i]) == '$' && ((pfile)->opts.dollars_in_ident))))
      return 0;
  return 1;
}
static unsigned char
forms_identifier_p (cpp_reader *pfile, int first)
{
  cpp_buffer *buffer = pfile->buffer;
  if (*buffer->cur == '$')
    {
      if (!((pfile)->opts.dollars_in_ident))
 return 0;
      buffer->cur++;
      if (((pfile)->opts.warn_dollars) && !pfile->state.skipping)
 {
   ((pfile)->opts.warn_dollars) = 0;
   cpp_error (pfile, 0x02, "'$' in identifier or number");
 }
      return 1;
    }
  if (0 && *buffer->cur == '\\'
      && (buffer->cur[1] == 'u' || buffer->cur[1] == 'U'))
    {
      buffer->cur += 2;
      if (_cpp_valid_ucn (pfile, &buffer->cur, buffer->rlimit, 1 + !first))
 return 1;
      buffer->cur -= 2;
    }
  return 0;
}
static cpp_hashnode *
lex_identifier (cpp_reader *pfile, const uchar *base)
{
  cpp_hashnode *result;
  const uchar *cur, *limit;
  unsigned int len;
  unsigned int hash = ((0) * 67 + ((*base) - 113));;
  cur = pfile->buffer->cur;
  for (;;)
    {
      while ((_sch_istable[(*cur) & 0xff] & (unsigned short)(_sch_isidnum)))
 {
   hash = ((hash) * 67 + ((*cur) - 113));;
   cur++;
 }
      pfile->buffer->cur = cur;
      if (!forms_identifier_p (pfile, 0))
 break;
      limit = pfile->buffer->cur;
      while (cur < limit)
 {
   hash = ((hash) * 67 + ((*cur) - 113));;
   cur++;
 }
    }
  len = cur - base;
  hash = ((hash) + (len));
  result = (cpp_hashnode *)
    ht_lookup_with_hash (pfile->hash_table1, base, len, hash, HT_ALLOC);
  if (((result->flags & (1 << 3)) && !pfile->state.skipping)
                                )
    {
      if ((result->flags & (1 << 1)) && !pfile->state.poisoned_ok)
 cpp_error (pfile, 0x03, "attempt to use poisoned \"%s\"",
     ((&(result)->ident)->str));
      if (result == pfile->spec_nodes.n__VA_ARGS__
   && !pfile->state.va_args_ok)
 cpp_error (pfile, 0x02,
     "__VA_ARGS__ can only appear in the expansion of a C99 variadic macro");
    }
  return result;
}
static void
lex_number (cpp_reader *pfile, cpp_string *number)
{
  const uchar *cur;
  const uchar *base;
  uchar *dest;
  base = pfile->buffer->cur - 1;
  do
    {
      cur = pfile->buffer->cur;
      while ((_sch_istable[(*cur) & 0xff] & (unsigned short)(_sch_isidnum)) || *cur == '.' || (((*cur) == '+' || (*cur) == '-') && ((cur[-1]) == 'e' || (cur[-1]) == 'E' || (((cur[-1]) == 'p' || (cur[-1]) == 'P') && ((pfile)->opts.extended_numbers)))))
 cur++;
      pfile->buffer->cur = cur;
    }
  while (forms_identifier_p (pfile, 0));
  number->len = cur - base;
  dest = _cpp_unaligned_alloc (pfile, number->len + 1);
  memcpy (dest, base, number->len);
  dest[number->len] = '\0';
  number->text = dest;
}
static void
create_literal (cpp_reader *pfile, cpp_token *token, const uchar *base,
  unsigned int len, enum cpp_ttype type)
{
  uchar *dest = _cpp_unaligned_alloc (pfile, len + 1);
  memcpy (dest, base, len);
  dest[len] = '\0';
  token->type = type;
  token->val.str.len = len;
  token->val.str.text = dest;
}
static void
lex_preproc_string (cpp_reader *pfile, cpp_token *token, const uchar *base)
{
  unsigned char saw_NUL = 0;
  const uchar *cur;
  cppchar_t terminator;
  enum cpp_ttype type;
  cur = base;
  terminator = *cur++;
  if (terminator == 'L')
    terminator = *cur++;
  if (terminator == '\"')
    type = *base == 'L' ? CPP_WSTRING: CPP_STRING;
  else if (terminator == '\'')
    type = *base == 'L' ? CPP_WCHAR: CPP_CHAR;
  else
    terminator = '>', type = CPP_HEADER_NAME;
  for (;;)
    {
      cppchar_t c = *cur++;
      if (c == '\\' && !pfile->state.angled_headers && *cur != '\n')
 cur++;
      else if (c == terminator)
 break;
      else if (c == '\n')
 {
   cur--;
   type = CPP_OTHER;
   break;
 }
      else if (c == '\0')
 saw_NUL = 1;
    }
  if (saw_NUL && !pfile->state.skipping)
    cpp_error (pfile, 0x00,
        "null character(s) preserved in literal");
  pfile->buffer->cur = cur;
  create_literal (pfile, token, base, cur - base, type);
}
static void
save_comment (cpp_reader *pfile, cpp_token *token, const unsigned char *from,
       cppchar_t type)
{
  unsigned char *buffer;
  unsigned int len, clen;
  len = pfile->buffer->cur - from + 1;
  if ((_sch_istable[(pfile->buffer->cur[-1]) & 0xff] & (unsigned short)(_sch_isvsp)))
    len--;
  clen = (pfile->state.in_directive && type == '/') ? len + 2 : len;
  buffer = _cpp_unaligned_alloc (pfile, clen);
  token->type = CPP_COMMENT;
  token->val.str.len = clen;
  token->val.str.text = buffer;
  buffer[0] = '/';
  memcpy (buffer + 1, from, len - 1);
  if (pfile->state.in_directive && type == '/')
    {
      buffer[1] = '*';
      buffer[clen - 2] = '*';
      buffer[clen - 1] = '/';
    }
}
void
_cpp_init_tokenrun (tokenrun *run, unsigned int count)
{
  run->base = (cpp_token *) xmalloc (sizeof(cpp_token) * (count));
  run->limit = run->base + count;
  run->next = ((void *)0);
}
static tokenrun *
next_tokenrun (tokenrun *run)
{
  if (run->next == ((void *)0))
    {
      run->next = (tokenrun *) xmalloc (sizeof(tokenrun));
      run->next->prev = run;
      _cpp_init_tokenrun (run->next, 250);
    }
  return run->next;
}
cpp_token *
_cpp_temp_token (cpp_reader *pfile)
{
  cpp_token *old, *result;
  old = pfile->cur_token - 1;
  if (pfile->cur_token == pfile->cur_run->limit)
    {
      pfile->cur_run = next_tokenrun (pfile->cur_run);
      pfile->cur_token = pfile->cur_run->base;
    }
  result = pfile->cur_token++;
  result->src_loc = old->src_loc;
  return result;
}
const cpp_token *
_cpp_lex_token (cpp_reader *pfile)
{
  cpp_token *result;
  for (;;)
    {
      if (pfile->cur_token == pfile->cur_run->limit)
 {
   pfile->cur_run = next_tokenrun (pfile->cur_run);
   pfile->cur_token = pfile->cur_run->base;
 }
      if (pfile->lookaheads)
 {
   pfile->lookaheads--;
   result = pfile->cur_token++;
 }
      else
 result = _cpp_lex_direct (pfile);
      if (result->flags & (1 << 6))
 {
   if (result->type == CPP_HASH
       && pfile->state.parsing_args != 1
       && _cpp_handle_directive (pfile, result->flags & (1 << 0)))
     continue;
   if (pfile->cb.line_change && !pfile->state.skipping)
     pfile->cb.line_change (pfile, result, pfile->state.parsing_args);
 }
      if (pfile->state.in_directive)
 break;
      pfile->mi_valid = 0;
      if (!pfile->state.skipping || result->type == CPP_EOF)
 break;
    }
  return result;
}
unsigned char
_cpp_get_fresh_line (cpp_reader *pfile)
{
  int return_at_eof;
  if (pfile->state.in_directive)
    return 0;
  for (;;)
    {
      cpp_buffer *buffer = pfile->buffer;
      if (!buffer->need_line)
 return 1;
      if (buffer->next_line < buffer->rlimit)
 {
   _cpp_clean_line (pfile);
   return 1;
 }
      if (pfile->state.parsing_args)
 return 0;
      if (buffer->buf != buffer->rlimit
   && buffer->next_line > buffer->rlimit
   && !buffer->from_stage3)
 {
   buffer->next_line = buffer->rlimit;
   cpp_error_with_line (pfile, 0x02, pfile->line_table->highest_line,
          ((buffer->cur) - (buffer)->line_base),
          "no newline at end of file");
 }
      return_at_eof = buffer->return_at_eof;
      _cpp_pop_buffer (pfile);
      if (pfile->buffer == ((void *)0) || return_at_eof)
 return 0;
    }
}
cpp_token *
_cpp_lex_direct (cpp_reader *pfile)
{
  cppchar_t c;
  cpp_buffer *buffer;
  const unsigned char *comment_start;
  cpp_token *result = pfile->cur_token++;
 fresh_line:
  result->flags = 0;
  buffer = pfile->buffer;
  if (buffer->need_line)
    {
      if (!_cpp_get_fresh_line (pfile))
 {
   result->type = CPP_EOF;
   if (!pfile->state.in_directive)
     {
       result->src_loc = pfile->line_table->highest_line;
       result->flags = (1 << 6);
     }
   return result;
 }
      if (!pfile->keep_tokens)
 {
   pfile->cur_run = &pfile->base_run;
   result = pfile->base_run.base;
   pfile->cur_token = result + 1;
 }
      result->flags = (1 << 6);
      if (pfile->state.parsing_args == 2)
 result->flags |= (1 << 0);
    }
  buffer = pfile->buffer;
 update_tokens_line:
  result->src_loc = pfile->line_table->highest_line;
 skipped_white:
  if (buffer->cur >= buffer->notes[buffer->cur_note].pos
      && !pfile->overlaid_buffer)
    {
      _cpp_process_line_notes (pfile, 0);
      result->src_loc = pfile->line_table->highest_line;
    }
  c = *buffer->cur++;
  { unsigned int to_column = (((buffer->cur) - (buffer)->line_base)); struct line_maps *set = (pfile->line_table); if ((to_column >= set->max_column_hint)) (result->src_loc) = linemap_position_for_column (set, to_column); else { source_location r = set->highest_line; r = r + to_column; if (r >= set->highest_location) set->highest_location = r; (result->src_loc) = r; }}
                                               ;
  switch (c)
    {
    case ' ': case '\t': case '\f': case '\v': case '\0':
      result->flags |= (1 << 0);
      skip_whitespace (pfile, c);
      goto skipped_white;
    case '\n':
      if (buffer->cur < buffer->rlimit)
 do { const struct line_maps *line_table = pfile->line_table; const struct line_map *map = &line_table->maps[line_table->used-1]; unsigned int line = ((((line_table->highest_line) - (map)->start_location) >> (map)->column_bits) + (map)->to_line); linemap_line_start (pfile->line_table, line + 1, 0); } while (0);
      buffer->need_line = 1;
      goto fresh_line;
    case '0': case '1': case '2': case '3': case '4':
    case '5': case '6': case '7': case '8': case '9':
      result->type = CPP_NUMBER;
      lex_number (pfile, &result->val.str);
      break;
    case 'L':
      if (*buffer->cur == '\'' || *buffer->cur == '"')
 {
   lex_preproc_string (pfile, result, buffer->cur - 1);
   break;
 }
    case '_':
    case 'a': case 'b': case 'c': case 'd': case 'e': case 'f':
    case 'g': case 'h': case 'i': case 'j': case 'k': case 'l':
    case 'm': case 'n': case 'o': case 'p': case 'q': case 'r':
    case 's': case 't': case 'u': case 'v': case 'w': case 'x':
    case 'y': case 'z':
    case 'A': case 'B': case 'C': case 'D': case 'E': case 'F':
    case 'G': case 'H': case 'I': case 'J': case 'K':
    case 'M': case 'N': case 'O': case 'P': case 'Q': case 'R':
    case 'S': case 'T': case 'U': case 'V': case 'W': case 'X':
    case 'Y': case 'Z':
      result->type = CPP_NAME;
      result->val.node = lex_identifier (pfile, buffer->cur - 1);
      if (result->val.node->flags & (1 << 0))
 {
   result->flags |= (1 << 4);
   result->type = result->val.node->directive_index;
 }
      break;
    case '\'':
    case '"':
      lex_preproc_string (pfile, result, buffer->cur - 1);
      break;
    case '/':
      comment_start = buffer->cur;
      c = *buffer->cur;
      if (c == '*')
 {
   if (_cpp_skip_block_comment (pfile))
     cpp_error (pfile, 0x03, "unterminated comment");
 }
      else if (c == '/' && (((pfile)->opts.cplusplus_comments)
       || cpp_in_system_header (pfile)))
 {
   if (((pfile)->opts.lang) == CLK_GNUC89 && ((pfile)->opts.pedantic)
       && ! buffer->warned_cplusplus_comments)
     {
       cpp_error (pfile, 0x02,
    "C++ style comments are not allowed in ISO C90");
       cpp_error (pfile, 0x02,
    "(this will be reported only once per input file)");
       buffer->warned_cplusplus_comments = 1;
     }
   if (skip_line_comment (pfile) && ((pfile)->opts.warn_comments))
     cpp_error (pfile, 0x00, "multi-line comment");
 }
      else if (c == '=')
 {
   buffer->cur++;
   result->type = CPP_DIV_EQ;
   break;
 }
      else
 {
   result->type = CPP_DIV;
   break;
 }
      if (!pfile->state.save_comments)
 {
   result->flags |= (1 << 0);
   goto update_tokens_line;
 }
      save_comment (pfile, result, comment_start, c);
      break;
    case '<':
      if (pfile->state.angled_headers)
 {
   lex_preproc_string (pfile, result, buffer->cur - 1);
   break;
 }
      result->type = CPP_LESS;
      if (*buffer->cur == '=')
 buffer->cur++, result->type = CPP_LESS_EQ;
      else if (*buffer->cur == '<')
 {
   buffer->cur++;
   do { result->type = CPP_LSHIFT; if (*buffer->cur == '=') buffer->cur++, result->type = CPP_LSHIFT_EQ; } while (0);
 }
      else if (*buffer->cur == '?' && ((pfile)->opts.cplusplus))
 {
   buffer->cur++;
   do { result->type = CPP_MIN; if (*buffer->cur == '=') buffer->cur++, result->type = CPP_MIN_EQ; } while (0);
 }
      else if (((pfile)->opts.digraphs))
 {
   if (*buffer->cur == ':')
     {
       buffer->cur++;
       result->flags |= (1 << 1);
       result->type = CPP_OPEN_SQUARE;
     }
   else if (*buffer->cur == '%')
     {
       buffer->cur++;
       result->flags |= (1 << 1);
       result->type = CPP_OPEN_BRACE;
     }
 }
      break;
    case '>':
      result->type = CPP_GREATER;
      if (*buffer->cur == '=')
 buffer->cur++, result->type = CPP_GREATER_EQ;
      else if (*buffer->cur == '>')
 {
   buffer->cur++;
   do { result->type = CPP_RSHIFT; if (*buffer->cur == '=') buffer->cur++, result->type = CPP_RSHIFT_EQ; } while (0);
 }
      else if (*buffer->cur == '?' && ((pfile)->opts.cplusplus))
 {
   buffer->cur++;
   do { result->type = CPP_MAX; if (*buffer->cur == '=') buffer->cur++, result->type = CPP_MAX_EQ; } while (0);
 }
      break;
    case '%':
      result->type = CPP_MOD;
      if (*buffer->cur == '=')
 buffer->cur++, result->type = CPP_MOD_EQ;
      else if (((pfile)->opts.digraphs))
 {
   if (*buffer->cur == ':')
     {
       buffer->cur++;
       result->flags |= (1 << 1);
       result->type = CPP_HASH;
       if (*buffer->cur == '%' && buffer->cur[1] == ':')
  buffer->cur += 2, result->type = CPP_PASTE;
     }
   else if (*buffer->cur == '>')
     {
       buffer->cur++;
       result->flags |= (1 << 1);
       result->type = CPP_CLOSE_BRACE;
     }
 }
      break;
    case '.':
      result->type = CPP_DOT;
      if ((_sch_istable[(*buffer->cur) & 0xff] & (unsigned short)(_sch_isdigit)))
 {
   result->type = CPP_NUMBER;
   lex_number (pfile, &result->val.str);
 }
      else if (*buffer->cur == '.' && buffer->cur[1] == '.')
 buffer->cur += 2, result->type = CPP_ELLIPSIS;
      else if (*buffer->cur == '*' && ((pfile)->opts.cplusplus))
 buffer->cur++, result->type = CPP_DOT_STAR;
      break;
    case '+':
      result->type = CPP_PLUS;
      if (*buffer->cur == '+')
 buffer->cur++, result->type = CPP_PLUS_PLUS;
      else if (*buffer->cur == '=')
 buffer->cur++, result->type = CPP_PLUS_EQ;
      break;
    case '-':
      result->type = CPP_MINUS;
      if (*buffer->cur == '>')
 {
   buffer->cur++;
   result->type = CPP_DEREF;
   if (*buffer->cur == '*' && ((pfile)->opts.cplusplus))
     buffer->cur++, result->type = CPP_DEREF_STAR;
 }
      else if (*buffer->cur == '-')
 buffer->cur++, result->type = CPP_MINUS_MINUS;
      else if (*buffer->cur == '=')
 buffer->cur++, result->type = CPP_MINUS_EQ;
      break;
    case '&':
      result->type = CPP_AND;
      if (*buffer->cur == '&')
 buffer->cur++, result->type = CPP_AND_AND;
      else if (*buffer->cur == '=')
 buffer->cur++, result->type = CPP_AND_EQ;
      break;
    case '|':
      result->type = CPP_OR;
      if (*buffer->cur == '|')
 buffer->cur++, result->type = CPP_OR_OR;
      else if (*buffer->cur == '=')
 buffer->cur++, result->type = CPP_OR_EQ;
      break;
    case ':':
      result->type = CPP_COLON;
      if (*buffer->cur == ':' && ((pfile)->opts.cplusplus))
 buffer->cur++, result->type = CPP_SCOPE;
      else if (*buffer->cur == '>' && ((pfile)->opts.digraphs))
 {
   buffer->cur++;
   result->flags |= (1 << 1);
   result->type = CPP_CLOSE_SQUARE;
 }
      break;
    case '*': do { result->type = CPP_MULT; if (*buffer->cur == '=') buffer->cur++, result->type = CPP_MULT_EQ; } while (0); break;
    case '=': do { result->type = CPP_EQ; if (*buffer->cur == '=') buffer->cur++, result->type = CPP_EQ_EQ; } while (0); break;
    case '!': do { result->type = CPP_NOT; if (*buffer->cur == '=') buffer->cur++, result->type = CPP_NOT_EQ; } while (0); break;
    case '^': do { result->type = CPP_XOR; if (*buffer->cur == '=') buffer->cur++, result->type = CPP_XOR_EQ; } while (0); break;
    case '#': do { result->type = CPP_HASH; if (*buffer->cur == '#') buffer->cur++, result->type = CPP_PASTE; } while (0); break;
    case '?': result->type = CPP_QUERY; break;
    case '~': result->type = CPP_COMPL; break;
    case ',': result->type = CPP_COMMA; break;
    case '(': result->type = CPP_OPEN_PAREN; break;
    case ')': result->type = CPP_CLOSE_PAREN; break;
    case '[': result->type = CPP_OPEN_SQUARE; break;
    case ']': result->type = CPP_CLOSE_SQUARE; break;
    case '{': result->type = CPP_OPEN_BRACE; break;
    case '}': result->type = CPP_CLOSE_BRACE; break;
    case ';': result->type = CPP_SEMICOLON; break;
    case '@': result->type = CPP_ATSIGN; break;
    case '$':
    case '\\':
      {
 const uchar *base = --buffer->cur;
 if (forms_identifier_p (pfile, 1))
   {
     result->type = CPP_NAME;
     result->val.node = lex_identifier (pfile, base);
     break;
   }
 buffer->cur++;
      }
    default:
      create_literal (pfile, result, buffer->cur - 1, 1, CPP_OTHER);
      break;
    }
  return result;
}
unsigned int
cpp_token_len (const cpp_token *token)
{
  unsigned int len;
  switch ((token_spellings[(token)->type].category))
    {
    default: len = 4; break;
    case SPELL_LITERAL: len = token->val.str.len; break;
    case SPELL_IDENT: len = ((&(token->val.node)->ident)->len); break;
    }
  return len;
}
unsigned char *
cpp_spell_token (cpp_reader *pfile, const cpp_token *token,
   unsigned char *buffer)
{
  switch ((token_spellings[(token)->type].category))
    {
    case SPELL_OPERATOR:
      {
 const unsigned char *spelling;
 unsigned char c;
 if (token->flags & (1 << 1))
   spelling
     = digraph_spellings[(int) token->type - (int) CPP_HASH];
 else if (token->flags & (1 << 4))
   goto spell_ident;
 else
   spelling = (token_spellings[(token)->type].name);
 while ((c = *spelling++) != '\0')
   *buffer++ = c;
      }
      break;
    spell_ident:
    case SPELL_IDENT:
      memcpy (buffer, ((&(token->val.node)->ident)->str), ((&(token->val.node)->ident)->len));
      buffer += ((&(token->val.node)->ident)->len);
      break;
    case SPELL_LITERAL:
      memcpy (buffer, token->val.str.text, token->val.str.len);
      buffer += token->val.str.len;
      break;
    case SPELL_NONE:
      cpp_error (pfile, 0x04,
   "unspellable token %s", (token_spellings[(token)->type].name));
      break;
    }
  return buffer;
}
unsigned char *
cpp_token_as_text (cpp_reader *pfile, const cpp_token *token)
{
  unsigned int len = cpp_token_len (token) + 1;
  unsigned char *start = _cpp_unaligned_alloc (pfile, len), *end;
  end = cpp_spell_token (pfile, token, start);
  end[0] = '\0';
  return start;
}
const char *
cpp_type2name (enum cpp_ttype type)
{
  return (const char *) token_spellings[type].name;
}
void
cpp_output_token (const cpp_token *token, FILE *fp)
{
  switch ((token_spellings[(token)->type].category))
    {
    case SPELL_OPERATOR:
      {
 const unsigned char *spelling;
 int c;
 if (token->flags & (1 << 1))
   spelling
     = digraph_spellings[(int) token->type - (int) CPP_HASH];
 else if (token->flags & (1 << 4))
   goto spell_ident;
 else
   spelling = (token_spellings[(token)->type].name);
 c = *spelling;
 do
   putc_unlocked (c, fp);
 while ((c = *++spelling) != '\0');
      }
      break;
    spell_ident:
    case SPELL_IDENT:
      fwrite_unlocked (((&(token->val.node)->ident)->str), 1, ((&(token->val.node)->ident)->len), fp);
    break;
    case SPELL_LITERAL:
      fwrite_unlocked (token->val.str.text, 1, token->val.str.len, fp);
      break;
    case SPELL_NONE:
      break;
    }
}
int
_cpp_equiv_tokens (const cpp_token *a, const cpp_token *b)
{
  if (a->type == b->type && a->flags == b->flags)
    switch ((token_spellings[(a)->type].category))
      {
      default:
      case SPELL_OPERATOR:
 return 1;
      case SPELL_NONE:
 return (a->type != CPP_MACRO_ARG || a->val.arg_no == b->val.arg_no);
      case SPELL_IDENT:
 return a->val.node == b->val.node;
      case SPELL_LITERAL:
 return (a->val.str.len == b->val.str.len
  && !memcmp (a->val.str.text, b->val.str.text,
       a->val.str.len));
      }
  return 0;
}
int
cpp_avoid_paste (cpp_reader *pfile, const cpp_token *token1,
   const cpp_token *token2)
{
  enum cpp_ttype a = token1->type, b = token2->type;
  cppchar_t c;
  if (token1->flags & (1 << 4))
    a = CPP_NAME;
  if (token2->flags & (1 << 4))
    b = CPP_NAME;
  c = (-1);
  if (token2->flags & (1 << 1))
    c = digraph_spellings[(int) b - (int) CPP_HASH][0];
  else if (token_spellings[b].category == SPELL_OPERATOR)
    c = token_spellings[b].name[0];
  if ((int) a <= (int) CPP_MAX && c == '=')
    return 1;
  switch (a)
    {
    case CPP_GREATER: return c == '>' || c == '?';
    case CPP_LESS: return c == '<' || c == '?' || c == '%' || c == ':';
    case CPP_PLUS: return c == '+';
    case CPP_MINUS: return c == '-' || c == '>';
    case CPP_DIV: return c == '/' || c == '*';
    case CPP_MOD: return c == ':' || c == '>';
    case CPP_AND: return c == '&';
    case CPP_OR: return c == '|';
    case CPP_COLON: return c == ':' || c == '>';
    case CPP_DEREF: return c == '*';
    case CPP_DOT: return c == '.' || c == '%' || b == CPP_NUMBER;
    case CPP_HASH: return c == '#' || c == '%';
    case CPP_NAME: return ((b == CPP_NUMBER
     && name_p (pfile, &token2->val.str))
    || b == CPP_NAME
    || b == CPP_CHAR || b == CPP_STRING);
    case CPP_NUMBER: return (b == CPP_NUMBER || b == CPP_NAME
    || c == '.' || c == '+' || c == '-');
    case CPP_OTHER: return ((token1->val.str.text[0] == '\\'
     && b == CPP_NAME)
    || (((pfile)->opts.objc)
        && token1->val.str.text[0] == '@'
        && (b == CPP_NAME || b == CPP_STRING)));
    default: break;
    }
  return 0;
}
void
cpp_output_line (cpp_reader *pfile, FILE *fp)
{
  const cpp_token *token;
  token = cpp_get_token (pfile);
  while (token->type != CPP_EOF)
    {
      cpp_output_token (token, fp);
      token = cpp_get_token (pfile);
      if (token->flags & (1 << 0))
 putc_unlocked (' ', fp);
    }
  putc_unlocked ('\n', fp);
}
static _cpp_buff *
new_buff (size_t len)
{
  _cpp_buff *result;
  unsigned char *base;
  if (len < 8000)
    len = 8000;
  len = (((len) + ((__builtin_offsetof (dummy, u)) - 1)) & ~((__builtin_offsetof (dummy, u)) - 1));
  base = xmalloc (len + sizeof (_cpp_buff));
  result = (_cpp_buff *) (base + len);
  result->base = base;
  result->cur = base;
  result->limit = base + len;
  result->next = ((void *)0);
  return result;
}
void
_cpp_release_buff (cpp_reader *pfile, _cpp_buff *buff)
{
  _cpp_buff *end = buff;
  while (end->next)
    end = end->next;
  end->next = pfile->free_buffs;
  pfile->free_buffs = buff;
}
_cpp_buff *
_cpp_get_buff (cpp_reader *pfile, size_t min_size)
{
  _cpp_buff *result, **p;
  for (p = &pfile->free_buffs;; p = &(*p)->next)
    {
      size_t size;
      if (*p == ((void *)0))
 return new_buff (min_size);
      result = *p;
      size = result->limit - result->base;
      if (size >= min_size && size <= (8000 + (min_size) * 3 / 2))
 break;
    }
  *p = result->next;
  result->next = ((void *)0);
  result->cur = result->base;
  return result;
}
_cpp_buff *
_cpp_append_extend_buff (cpp_reader *pfile, _cpp_buff *buff, size_t min_extra)
{
  size_t size = (min_extra + ((buff)->limit - (buff)->cur) * 2);
  _cpp_buff *new_buff = _cpp_get_buff (pfile, size);
  buff->next = new_buff;
  memcpy (new_buff->base, buff->cur, (size_t) ((buff)->limit - (buff)->cur));
  return new_buff;
}
void
_cpp_extend_buff (cpp_reader *pfile, _cpp_buff **pbuff, size_t min_extra)
{
  _cpp_buff *new_buff, *old_buff = *pbuff;
  size_t size = (min_extra + ((old_buff)->limit - (old_buff)->cur) * 2);
  new_buff = _cpp_get_buff (pfile, size);
  memcpy (new_buff->base, old_buff->cur, (size_t) ((old_buff)->limit - (old_buff)->cur));
  new_buff->next = old_buff;
  *pbuff = new_buff;
}
void
_cpp_free_buff (_cpp_buff *buff)
{
  _cpp_buff *next;
  for (; buff; buff = next)
    {
      next = buff->next;
      free (buff->base);
    }
}
unsigned char *
_cpp_unaligned_alloc (cpp_reader *pfile, size_t len)
{
  _cpp_buff *buff = pfile->u_buff;
  unsigned char *result = buff->cur;
  if (len > (size_t) (buff->limit - result))
    {
      buff = _cpp_get_buff (pfile, len);
      buff->next = pfile->u_buff;
      pfile->u_buff = buff;
      result = buff->cur;
    }
  buff->cur = result + len;
  return result;
}
unsigned char *
_cpp_aligned_alloc (cpp_reader *pfile, size_t len)
{
  _cpp_buff *buff = pfile->a_buff;
  unsigned char *result = buff->cur;
  if (len > (size_t) (buff->limit - result))
    {
      buff = _cpp_get_buff (pfile, len);
      buff->next = pfile->a_buff;
      pfile->a_buff = buff;
      result = buff->cur;
    }
  buff->cur = result + len;
  return result;
}
enum cpp_token_fld_kind
cpp_token_val_index (cpp_token *tok)
{
  switch ((token_spellings[(tok)->type].category))
    {
    case SPELL_IDENT:
      return CPP_TOKEN_FLD_NODE;
    case SPELL_LITERAL:
      return CPP_TOKEN_FLD_STR;
    case SPELL_NONE:
      if (tok->type == CPP_MACRO_ARG)
 return CPP_TOKEN_FLD_ARG_NO;
      else if (tok->type == CPP_PADDING)
 return CPP_TOKEN_FLD_SOURCE;
    default:
      return CPP_TOKEN_FLD_NONE;
    }
}
static void trace_include (const struct line_maps *, const struct line_map *);
void
linemap_init (struct line_maps *set)
{
  set->maps = ((void *)0);
  set->allocated = 0;
  set->used = 0;
  set->last_listed = -1;
  set->trace_includes = 0;
  set->depth = 0;
  set->cache = 0;
  set->highest_location = 0;
  set->highest_line = 0;
  set->max_column_hint = 0;
}
void
linemap_check_files_exited (struct line_maps *set)
{
  struct line_map *map;
  for (map = &set->maps[set->used - 1]; ! ((map)->included_from < 0);
       map = (&(set)->maps[(map)->included_from]))
    fprintf (stderr, "line-map.c: file \"%s\" entered but not left\n",
      map->to_file);
}
void
linemap_free (struct line_maps *set)
{
  if (set->maps)
    {
      linemap_check_files_exited (set);
      free (set->maps);
    }
}
const struct line_map *
linemap_add (struct line_maps *set, enum lc_reason reason,
      unsigned int sysp, const char *to_file, unsigned int to_line)
{
  struct line_map *map;
  source_location start_location = set->highest_location + 1;
  if (set->used && start_location < set->maps[set->used - 1].start_location)
    abort ();
  if (set->used == set->allocated)
    {
      set->allocated = 2 * set->allocated + 256;
      set->maps = xrealloc (set->maps, set->allocated * sizeof (struct line_map));
    }
  map = &set->maps[set->used];
  if (to_file && *to_file == '\0')
    to_file = "<stdin>";
  if (set->depth == 0)
    reason = LC_ENTER;
  else if (reason == LC_LEAVE)
    {
      struct line_map *from;
      unsigned char error;
      if (((map - 1)->included_from < 0))
 {
   if (to_file == ((void *)0))
     {
       set->depth--;
       return ((void *)0);
     }
   error = 1;
          reason = LC_RENAME;
          from = map - 1;
 }
      else
 {
   from = (&(set)->maps[(map - 1)->included_from]);
   error = to_file && strcmp (from->to_file, to_file);
 }
      if (error)
 fprintf (stderr, "line-map.c: file \"%s\" left but not entered\n",
   to_file);
      if (error || to_file == ((void *)0))
 {
   to_file = from->to_file;
   to_line = ((((from[1].start_location) - (from)->start_location) >> (from)->column_bits) + (from)->to_line);
   sysp = from->sysp;
 }
    }
  map->reason = reason;
  map->sysp = sysp;
  map->start_location = start_location;
  map->to_file = to_file;
  map->to_line = to_line;
  set->cache = set->used++;
  map->column_bits = 0;
  set->highest_location = start_location;
  set->highest_line = start_location;
  set->max_column_hint = 0;
  if (reason == LC_ENTER)
    {
      map->included_from = set->depth == 0 ? -1 : (int) (set->used - 2);
      set->depth++;
      if (set->trace_includes)
 trace_include (set, map);
    }
  else if (reason == LC_RENAME)
    map->included_from = map[-1].included_from;
  else if (reason == LC_LEAVE)
    {
      set->depth--;
      map->included_from = (&(set)->maps[(map - 1)->included_from])->included_from;
    }
  return map;
}
source_location
linemap_line_start (struct line_maps *set, unsigned int to_line,
      unsigned int max_column_hint)
{
  struct line_map *map = &set->maps[set->used - 1];
  source_location highest = set->highest_location;
  source_location r;
  unsigned int last_line = ((((set->highest_line) - (map)->start_location) >> (map)->column_bits) + (map)->to_line);
  int line_delta = to_line - last_line;
  unsigned char add_map = 0;
  if (line_delta < 0
      || (line_delta > 10 && line_delta * map->column_bits > 1000)
      || (max_column_hint >= (1U << map->column_bits))
      || (max_column_hint <= 80 && map->column_bits >= 10))
    {
      add_map = 1;
    }
  else
    max_column_hint = set->max_column_hint;
  if (add_map)
    {
      int column_bits;
      if (max_column_hint > 100000 || highest > 0xC0000000)
 {
   max_column_hint = 0;
   if (highest >0xF0000000)
     return 0;
   column_bits = 0;
 }
      else
 {
   column_bits = 7;
   while (max_column_hint >= (1U << column_bits))
     column_bits++;
   max_column_hint = 1U << column_bits;
 }
      if (line_delta < 0
   || last_line != map->to_line
   || (((highest) - (map)->start_location) & ((1 << (map)->column_bits) - 1)) >= (1U << column_bits))
 map = (struct line_map*) linemap_add (set, LC_RENAME, map->sysp,
          map->to_file, to_line);
      map->column_bits = column_bits;
      r = map->start_location;
    }
  else
    r = highest - (((highest) - (map)->start_location) & ((1 << (map)->column_bits) - 1))
      + (line_delta << map->column_bits);
  set->highest_line = r;
  if (r > set->highest_location)
    set->highest_location = r;
  set->max_column_hint = max_column_hint;
  return r;
}
source_location
linemap_position_for_column (struct line_maps *set, unsigned int to_column)
{
  source_location r = set->highest_line;
  if (to_column >= set->max_column_hint)
    {
      if (r >= 0xC000000 || to_column > 100000)
 {
   return r;
 }
      else
 {
   struct line_map *map = &set->maps[set->used - 1];
   r = linemap_line_start (set, ((((r) - (map)->start_location) >> (map)->column_bits) + (map)->to_line), to_column + 50);
 }
    }
  r = r + to_column;
  if (r >= set->highest_location)
    set->highest_location = r;
  return r;
}
const struct line_map *
linemap_lookup (struct line_maps *set, source_location line)
{
  unsigned int md, mn, mx;
  const struct line_map *cached;
  mn = set->cache;
  mx = set->used;
  cached = &set->maps[mn];
  if (line >= cached->start_location)
    {
      if (mn + 1 == mx || line < cached[1].start_location)
 return cached;
    }
  else
    {
      mx = mn;
      mn = 0;
    }
  while (mx - mn > 1)
    {
      md = (mn + mx) / 2;
      if (set->maps[md].start_location > line)
 mx = md;
      else
 mn = md;
    }
  set->cache = mn;
  return &set->maps[mn];
}
void
linemap_print_containing_files (struct line_maps *set,
    const struct line_map *map)
{
  if (((map)->included_from < 0) || set->last_listed == map->included_from)
    return;
  set->last_listed = map->included_from;
  map = (&(set)->maps[(map)->included_from]);
  fprintf (stderr, "In file included from %s:%u",
    map->to_file, ((((((((map)[1].start_location - 1 - (map)->start_location) & ~((1 << (map)->column_bits) - 1)) + (map)->start_location)) - (map)->start_location) >> (map)->column_bits) + (map)->to_line));
  while (! ((map)->included_from < 0))
    {
      map = (&(set)->maps[(map)->included_from]);
      fprintf (stderr, ",\n                 from %s:%u",
        map->to_file, ((((((((map)[1].start_location - 1 - (map)->start_location) & ~((1 << (map)->column_bits) - 1)) + (map)->start_location)) - (map)->start_location) >> (map)->column_bits) + (map)->to_line));
    }
  fputs_unlocked (":\n", stderr);
}
static void
trace_include (const struct line_maps *set, const struct line_map *map)
{
  unsigned int i = set->depth;
  while (--i)
    putc_unlocked ('.', stderr);
  fprintf (stderr, " %s\n", map->to_file);
}
typedef struct macro_arg macro_arg;
struct macro_arg
{
  const cpp_token **first;
  const cpp_token **expanded;
  const cpp_token *stringified;
  unsigned int count;
  unsigned int expanded_count;
};
static int enter_macro_context (cpp_reader *, cpp_hashnode *);
static int builtin_macro (cpp_reader *, cpp_hashnode *);
static void push_token_context (cpp_reader *, cpp_hashnode *,
    const cpp_token *, unsigned int);
static void push_ptoken_context (cpp_reader *, cpp_hashnode *, _cpp_buff *,
     const cpp_token **, unsigned int);
static _cpp_buff *collect_args (cpp_reader *, const cpp_hashnode *);
static cpp_context *next_context (cpp_reader *);
static const cpp_token *padding_token (cpp_reader *, const cpp_token *);
static void expand_arg (cpp_reader *, macro_arg *);
static const cpp_token *new_string_token (cpp_reader *, uchar *, unsigned int);
static const cpp_token *stringify_arg (cpp_reader *, macro_arg *);
static void paste_all_tokens (cpp_reader *, const cpp_token *);
static unsigned char paste_tokens (cpp_reader *, const cpp_token **, const cpp_token *);
static void replace_macro_args (cpp_reader *, cpp_hashnode *, cpp_macro *,
    macro_arg *);
static _cpp_buff *funlike_invocation_p (cpp_reader *, cpp_hashnode *);
static unsigned char create_iso_definition (cpp_reader *, cpp_macro *);
static cpp_token *alloc_expansion_token (cpp_reader *, cpp_macro *);
static cpp_token *lex_expansion_token (cpp_reader *, cpp_macro *);
static unsigned char warn_of_redefinition (cpp_reader *, const cpp_hashnode *,
      const cpp_macro *);
static unsigned char parse_params (cpp_reader *, cpp_macro *);
static void check_trad_stringification (cpp_reader *, const cpp_macro *,
     const cpp_string *);
int
_cpp_warn_if_unused_macro (cpp_reader *pfile, cpp_hashnode *node,
      void *v )
{
  if (node->type == NT_MACRO && !(node->flags & (1 << 2)))
    {
      cpp_macro *macro = node->value.macro;
      if (!macro->used
   && ((linemap_lookup (pfile->line_table, macro->line))->included_from < 0))
 cpp_error_with_line (pfile, 0x00, macro->line, 0,
        "macro \"%s\" is not used", ((&(node)->ident)->str));
    }
  return 1;
}
static const cpp_token *
new_string_token (cpp_reader *pfile, unsigned char *text, unsigned int len)
{
  cpp_token *token = _cpp_temp_token (pfile);
  text[len] = '\0';
  token->type = CPP_STRING;
  token->val.str.len = len;
  token->val.str.text = text;
  token->flags = 0;
  return token;
}
static const char * const monthnames[] =
{
  "Jan", "Feb", "Mar", "Apr", "May", "Jun",
  "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
};
const uchar *
_cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node)
{
  const struct line_map *map;
  const uchar *result = ((void *)0);
  unsigned int number = 1;
  switch (node->value.builtin)
    {
    default:
      cpp_error (pfile, 0x04, "invalid built-in macro \"%s\"",
   ((&(node)->ident)->str));
      break;
    case BT_FILE:
    case BT_BASE_FILE:
      {
 unsigned int len;
 const char *name;
 uchar *buf;
 map = linemap_lookup (pfile->line_table, pfile->line_table->highest_line);
 if (node->value.builtin == BT_BASE_FILE)
   while (! ((map)->included_from < 0))
     map = (&(pfile->line_table)->maps[(map)->included_from]);
 name = map->to_file;
 len = strlen (name);
 buf = _cpp_unaligned_alloc (pfile, len * 4 + 3);
 result = buf;
 *buf = '"';
 buf = cpp_quote_string (buf + 1, (const unsigned char *) name, len);
 *buf++ = '"';
 *buf = '\0';
      }
      break;
    case BT_INCLUDE_LEVEL:
      number = pfile->line_table->depth - 1;
      break;
    case BT_SPECLINE:
      map = &pfile->line_table->maps[pfile->line_table->used-1];
      if (((pfile)->opts.traditional))
 number = pfile->line_table->highest_line;
      else
 number = pfile->cur_token[-1].src_loc;
      number = ((((number) - (map)->start_location) >> (map)->column_bits) + (map)->to_line);
      break;
    case BT_STDC:
      {
 if (cpp_in_system_header (pfile)
     && ((pfile)->opts.stdc_0_in_system_headers)
     && !((pfile)->opts.std))
   number = 0;
 else
   number = 1;
      }
      break;
    case BT_DATE:
    case BT_TIME:
      if (pfile->date == ((void *)0))
 {
   time_t tt;
   struct tm *tb = ((void *)0);
   (*__errno_location ()) = 0;
   tt = time(((void *)0));
   if (tt != (time_t)-1 || (*__errno_location ()) == 0)
     tb = localtime (&tt);
   if (tb)
     {
       pfile->date = _cpp_unaligned_alloc (pfile,
        sizeof ("\"Oct 11 1347\""));
       sprintf ((char *) pfile->date, "\"%s %2d %4d\"",
         monthnames[tb->tm_mon], tb->tm_mday,
         tb->tm_year + 1900);
       pfile->time = _cpp_unaligned_alloc (pfile,
        sizeof ("\"12:34:56\""));
       sprintf ((char *) pfile->time, "\"%02d:%02d:%02d\"",
         tb->tm_hour, tb->tm_min, tb->tm_sec);
     }
   else
     {
       cpp_errno (pfile, 0x00,
    "could not determine date and time");
       pfile->date = (const uchar *)"\"??? ?? ????\"";
       pfile->time = (const uchar *)"\"??:??:??\"";
     }
 }
      if (node->value.builtin == BT_DATE)
 result = pfile->date;
      else
 result = pfile->time;
      break;
    }
  if (result == ((void *)0))
    {
      result = _cpp_unaligned_alloc (pfile, 21);
      sprintf ((char *) result, "%u", number);
    }
  return result;
}
static int
builtin_macro (cpp_reader *pfile, cpp_hashnode *node)
{
  const uchar *buf;
  size_t len;
  char *nbuf;
  if (node->value.builtin == BT_PRAGMA)
    {
      if (pfile->state.in_directive)
 return 0;
      _cpp_do__Pragma (pfile);
      return 1;
    }
  buf = _cpp_builtin_macro_text (pfile, node);
  len = ustrlen (buf);
  nbuf = C_alloca(len + 1);
  memcpy (nbuf, buf, len);
  nbuf[len]='\n';
  cpp_push_buffer (pfile, (uchar *) nbuf, len, 1);
  _cpp_clean_line (pfile);
  pfile->cur_token = _cpp_temp_token (pfile);
  push_token_context (pfile, ((void *)0), _cpp_lex_direct (pfile), 1);
  if (pfile->buffer->cur != pfile->buffer->rlimit)
    cpp_error (pfile, 0x04, "invalid built-in macro \"%s\"",
        ((&(node)->ident)->str));
  _cpp_pop_buffer (pfile);
  return 1;
}
uchar *
cpp_quote_string (uchar *dest, const uchar *src, unsigned int len)
{
  while (len--)
    {
      uchar c = *src++;
      if (c == '\\' || c == '"')
 {
   *dest++ = '\\';
   *dest++ = c;
 }
      else
 {
   if ((_sch_istable[(c) & 0xff] & (unsigned short)(_sch_isprint)))
     *dest++ = c;
   else
     {
       sprintf ((char *) dest, "\\%03o", c);
       dest += 4;
     }
 }
    }
  return dest;
}
static const cpp_token *
stringify_arg (cpp_reader *pfile, macro_arg *arg)
{
  unsigned char *dest;
  unsigned int i, escape_it, backslash_count = 0;
  const cpp_token *source = ((void *)0);
  size_t len;
  if ((size_t) ((pfile->u_buff)->limit - (pfile->u_buff)->cur) < 3)
    _cpp_extend_buff (pfile, &pfile->u_buff, 3);
  dest = ((pfile->u_buff)->cur);
  *dest++ = '"';
  for (i = 0; i < arg->count; i++)
    {
      const cpp_token *token = arg->first[i];
      if (token->type == CPP_PADDING)
 {
   if (source == ((void *)0))
     source = token->val.source;
   continue;
 }
      escape_it = (token->type == CPP_STRING || token->type == CPP_WSTRING
     || token->type == CPP_CHAR || token->type == CPP_WCHAR);
      len = cpp_token_len (token);
      if (escape_it)
 len *= 4;
      len += 3;
      if ((size_t) (((pfile->u_buff)->limit) - dest) < len)
 {
   size_t len_so_far = dest - ((pfile->u_buff)->cur);
   _cpp_extend_buff (pfile, &pfile->u_buff, len);
   dest = ((pfile->u_buff)->cur) + len_so_far;
 }
      if (dest - 1 != ((pfile->u_buff)->cur))
 {
   if (source == ((void *)0))
     source = token;
   if (source->flags & (1 << 0))
     *dest++ = ' ';
 }
      source = ((void *)0);
      if (escape_it)
 {
   _cpp_buff *buff = _cpp_get_buff (pfile, len);
   unsigned char *buf = ((buff)->cur);
   len = cpp_spell_token (pfile, token, buf) - buf;
   dest = cpp_quote_string (dest, buf, len);
   _cpp_release_buff (pfile, buff);
 }
      else
 dest = cpp_spell_token (pfile, token, dest);
      if (token->type == CPP_OTHER && token->val.str.text[0] == '\\')
 backslash_count++;
      else
 backslash_count = 0;
    }
  if (backslash_count & 1)
    {
      cpp_error (pfile, 0x00,
   "invalid string literal, ignoring final '\\'");
      dest--;
    }
  *dest++ = '"';
  len = dest - ((pfile->u_buff)->cur);
  ((pfile->u_buff)->cur) = dest + 1;
  return new_string_token (pfile, dest - len, len);
}
static unsigned char
paste_tokens (cpp_reader *pfile, const cpp_token **plhs, const cpp_token *rhs)
{
  unsigned char *buf, *end;
  const cpp_token *lhs;
  unsigned int len;
  unsigned char valid;
  lhs = *plhs;
  len = cpp_token_len (lhs) + cpp_token_len (rhs) + 1;
  buf = C_alloca(len);
  end = cpp_spell_token (pfile, lhs, buf);
  if (lhs->type == CPP_DIV && rhs->type != CPP_EQ)
    *end++ = ' ';
  end = cpp_spell_token (pfile, rhs, end);
  *end = '\n';
  cpp_push_buffer (pfile, buf, end - buf, 1);
  _cpp_clean_line (pfile);
  pfile->cur_token = _cpp_temp_token (pfile);
  *plhs = _cpp_lex_direct (pfile);
  valid = pfile->buffer->cur == pfile->buffer->rlimit;
  _cpp_pop_buffer (pfile);
  return valid;
}
static void
paste_all_tokens (cpp_reader *pfile, const cpp_token *lhs)
{
  const cpp_token *rhs;
  cpp_context *context = pfile->context;
  do
    {
      if (context->direct_p)
 rhs = ((context)->u.iso.first).token++;
      else
 rhs = *((context)->u.iso.first).ptoken++;
      if (rhs->type == CPP_PADDING)
 abort ();
      if (!paste_tokens (pfile, &lhs, rhs))
 {
   _cpp_backup_tokens (pfile, 1);
   if (((pfile)->opts.lang) != CLK_ASM)
     cpp_error (pfile, 0x03,
  "pasting \"%s\" and \"%s\" does not give a valid preprocessing token",
         cpp_token_as_text (pfile, lhs),
         cpp_token_as_text (pfile, rhs));
   break;
 }
    }
  while (rhs->flags & (1 << 3));
  push_token_context (pfile, ((void *)0), lhs, 1);
}
unsigned char
_cpp_arguments_ok (cpp_reader *pfile, cpp_macro *macro, const cpp_hashnode *node, unsigned int argc)
{
  if (argc == macro->paramc)
    return 1;
  if (argc < macro->paramc)
    {
      if (argc + 1 == macro->paramc && macro->variadic)
 {
   if (((pfile)->opts.pedantic) && ! macro->syshdr)
     cpp_error (pfile, 0x02,
         "ISO C99 requires rest arguments to be used");
   return 1;
 }
      cpp_error (pfile, 0x03,
   "macro \"%s\" requires %u arguments, but only %u given",
   ((&(node)->ident)->str), macro->paramc, argc);
    }
  else
    cpp_error (pfile, 0x03,
        "macro \"%s\" passed %u arguments, but takes just %u",
        ((&(node)->ident)->str), argc, macro->paramc);
  return 0;
}
static _cpp_buff *
collect_args (cpp_reader *pfile, const cpp_hashnode *node)
{
  _cpp_buff *buff, *base_buff;
  cpp_macro *macro;
  macro_arg *args, *arg;
  const cpp_token *token;
  unsigned int argc;
  macro = node->value.macro;
  if (macro->paramc)
    argc = macro->paramc;
  else
    argc = 1;
  buff = _cpp_get_buff (pfile, argc * (50 * sizeof (cpp_token *)
           + sizeof (macro_arg)));
  base_buff = buff;
  args = (macro_arg *) buff->base;
  memset (args, 0, argc * sizeof (macro_arg));
  buff->cur = (unsigned char *) &args[argc];
  arg = args, argc = 0;
  do
    {
      unsigned int paren_depth = 0;
      unsigned int ntokens = 0;
      argc++;
      arg->first = (const cpp_token **) buff->cur;
      for (;;)
 {
   if ((unsigned char *) &arg->first[ntokens + 2] > buff->limit)
     {
       buff = _cpp_append_extend_buff (pfile, buff,
           1000 * sizeof (cpp_token *));
       arg->first = (const cpp_token **) buff->cur;
     }
   token = cpp_get_token (pfile);
   if (token->type == CPP_PADDING)
     {
       if (ntokens == 0)
  continue;
     }
   else if (token->type == CPP_OPEN_PAREN)
     paren_depth++;
   else if (token->type == CPP_CLOSE_PAREN)
     {
       if (paren_depth-- == 0)
  break;
     }
   else if (token->type == CPP_COMMA)
     {
       if (paren_depth == 0
    && ! (macro->variadic && argc == macro->paramc))
  break;
     }
   else if (token->type == CPP_EOF
     || (token->type == CPP_HASH && token->flags & (1 << 6)))
     break;
   arg->first[ntokens++] = token;
 }
      while (ntokens > 0 && arg->first[ntokens - 1]->type == CPP_PADDING)
 ntokens--;
      arg->count = ntokens;
      arg->first[ntokens] = &pfile->eof;
      if (argc <= macro->paramc)
 {
   buff->cur = (unsigned char *) &arg->first[ntokens + 1];
   if (argc != macro->paramc)
     arg++;
 }
    }
  while (token->type != CPP_CLOSE_PAREN && token->type != CPP_EOF);
  if (token->type == CPP_EOF)
    {
      if (pfile->context->prev || pfile->state.in_directive)
 _cpp_backup_tokens (pfile, 1);
      cpp_error (pfile, 0x03,
   "unterminated argument list invoking macro \"%s\"",
   ((&(node)->ident)->str));
    }
  else
    {
      if (argc == 1 && macro->paramc == 0 && args[0].count == 0)
 argc = 0;
      if (_cpp_arguments_ok (pfile, macro, node, argc))
 {
   if (macro->variadic && (argc < macro->paramc
      || (argc == 1 && args[0].count == 0
          && !((pfile)->opts.std))))
     args[macro->paramc - 1].first = ((void *)0);
   return base_buff;
 }
    }
  _cpp_release_buff (pfile, base_buff);
  return ((void *)0);
}
static _cpp_buff *
funlike_invocation_p (cpp_reader *pfile, cpp_hashnode *node)
{
  const cpp_token *token, *padding = ((void *)0);
  for (;;)
    {
      token = cpp_get_token (pfile);
      if (token->type != CPP_PADDING)
 break;
      if (padding == ((void *)0)
   || (!(padding->flags & (1 << 0)) && token->val.source == ((void *)0)))
 padding = token;
    }
  if (token->type == CPP_OPEN_PAREN)
    {
      pfile->state.parsing_args = 2;
      return collect_args (pfile, node);
    }
  if (token->type != CPP_EOF || token == &pfile->eof)
    {
      _cpp_backup_tokens (pfile, 1);
      if (padding)
 push_token_context (pfile, ((void *)0), padding, 1);
    }
  return ((void *)0);
}
static int
enter_macro_context (cpp_reader *pfile, cpp_hashnode *node)
{
  pfile->mi_valid = 0;
  pfile->state.angled_headers = 0;
  if (! (node->flags & (1 << 2)))
    {
      cpp_macro *macro = node->value.macro;
      if (macro->fun_like)
 {
   _cpp_buff *buff;
   pfile->state.prevent_expansion++;
   pfile->keep_tokens++;
   pfile->state.parsing_args = 1;
   buff = funlike_invocation_p (pfile, node);
   pfile->state.parsing_args = 0;
   pfile->keep_tokens--;
   pfile->state.prevent_expansion--;
   if (buff == ((void *)0))
     {
       if (((pfile)->opts.warn_traditional) && ! node->value.macro->syshdr)
  cpp_error (pfile, 0x00,
 "function-like macro \"%s\" must be used with arguments in traditional C",
      ((&(node)->ident)->str));
       return 0;
     }
   if (macro->paramc > 0)
     replace_macro_args (pfile, node, macro, (macro_arg *) buff->base);
   _cpp_release_buff (pfile, buff);
 }
      node->flags |= (1 << 5);
      macro->used = 1;
      if (macro->paramc == 0)
 push_token_context (pfile, node, macro->exp.tokens, macro->count);
      return 1;
    }
  return builtin_macro (pfile, node);
}
static void
replace_macro_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro, macro_arg *args)
{
  unsigned int i, total;
  const cpp_token *src, *limit;
  const cpp_token **dest, **first;
  macro_arg *arg;
  _cpp_buff *buff;
  total = macro->count;
  limit = macro->exp.tokens + macro->count;
  for (src = macro->exp.tokens; src < limit; src++)
    if (src->type == CPP_MACRO_ARG)
      {
 total += 2;
 arg = &args[src->val.arg_no - 1];
 if (src->flags & (1 << 2))
   {
     if (!arg->stringified)
       arg->stringified = stringify_arg (pfile, arg);
   }
 else if ((src->flags & (1 << 3))
   || (src > macro->exp.tokens && (src[-1].flags & (1 << 3))))
   total += arg->count - 1;
 else
   {
     if (!arg->expanded)
       expand_arg (pfile, arg);
     total += arg->expanded_count - 1;
   }
      }
  buff = _cpp_get_buff (pfile, total * sizeof (cpp_token *));
  first = (const cpp_token **) buff->base;
  dest = first;
  for (src = macro->exp.tokens; src < limit; src++)
    {
      unsigned int count;
      const cpp_token **from, **paste_flag;
      if (src->type != CPP_MACRO_ARG)
 {
   *dest++ = src;
   continue;
 }
      paste_flag = 0;
      arg = &args[src->val.arg_no - 1];
      if (src->flags & (1 << 2))
 count = 1, from = &arg->stringified;
      else if (src->flags & (1 << 3))
 count = arg->count, from = arg->first;
      else if (src != macro->exp.tokens && (src[-1].flags & (1 << 3)))
 {
   count = arg->count, from = arg->first;
   if (dest != first)
     {
       if (dest[-1]->type == CPP_COMMA
    && macro->variadic
    && src->val.arg_no == macro->paramc)
  {
    if (from == ((void *)0))
      dest--;
    else
      paste_flag = dest - 1;
  }
       else if (count == 0)
  paste_flag = dest - 1;
     }
 }
      else
 count = arg->expanded_count, from = arg->expanded;
      if ((!pfile->state.in_directive || pfile->state.directive_wants_padding)
   && src != macro->exp.tokens && !(src[-1].flags & (1 << 3)))
 *dest++ = padding_token (pfile, src);
      if (count)
 {
   memcpy (dest, from, count * sizeof (cpp_token *));
   dest += count;
   if (src->flags & (1 << 3))
     paste_flag = dest - 1;
 }
      if (!pfile->state.in_directive && !(src->flags & (1 << 3)))
 *dest++ = &pfile->avoid_paste;
      if (paste_flag)
 {
   cpp_token *token = _cpp_temp_token (pfile);
   token->type = (*paste_flag)->type;
   token->val.str = (*paste_flag)->val.str;
   if (src->flags & (1 << 3))
     token->flags = (*paste_flag)->flags | (1 << 3);
   else
     token->flags = (*paste_flag)->flags & ~(1 << 3);
   *paste_flag = token;
 }
    }
  for (i = 0; i < macro->paramc; i++)
    if (args[i].expanded)
      free (args[i].expanded);
  push_ptoken_context (pfile, node, buff, first, dest - first);
}
static const cpp_token *
padding_token (cpp_reader *pfile, const cpp_token *source)
{
  cpp_token *result = _cpp_temp_token (pfile);
  result->type = CPP_PADDING;
  result->val.source = (cpp_token *) source;
  result->flags = 0;
  return result;
}
static cpp_context *
next_context (cpp_reader *pfile)
{
  cpp_context *result = pfile->context->next;
  if (result == 0)
    {
      result = (cpp_context *) xmalloc (sizeof(cpp_context));
      result->prev = pfile->context;
      result->next = 0;
      pfile->context->next = result;
    }
  pfile->context = result;
  return result;
}
static void
push_ptoken_context (cpp_reader *pfile, cpp_hashnode *macro, _cpp_buff *buff,
       const cpp_token **first, unsigned int count)
{
  cpp_context *context = next_context (pfile);
  context->direct_p = 0;
  context->macro = macro;
  context->buff = buff;
  ((context)->u.iso.first).ptoken = first;
  ((context)->u.iso.last).ptoken = first + count;
}
static void
push_token_context (cpp_reader *pfile, cpp_hashnode *macro,
      const cpp_token *first, unsigned int count)
{
  cpp_context *context = next_context (pfile);
  context->direct_p = 1;
  context->macro = macro;
  context->buff = ((void *)0);
  ((context)->u.iso.first).token = first;
  ((context)->u.iso.last).token = first + count;
}
void
_cpp_push_text_context (cpp_reader *pfile, cpp_hashnode *macro,
   const uchar *start, size_t len)
{
  cpp_context *context = next_context (pfile);
  context->direct_p = 1;
  context->macro = macro;
  context->buff = ((void *)0);
  ((context)->u.trad.cur) = start;
  ((context)->u.trad.rlimit) = start + len;
  macro->flags |= (1 << 5);
}
static void
expand_arg (cpp_reader *pfile, macro_arg *arg)
{
  unsigned int capacity;
  unsigned char saved_warn_trad;
  if (arg->count == 0)
    return;
  saved_warn_trad = ((pfile)->opts.warn_traditional);
  ((pfile)->opts.warn_traditional) = 0;
  capacity = 256;
  arg->expanded = xmalloc (capacity * sizeof (cpp_token *));
  push_ptoken_context (pfile, ((void *)0), ((void *)0), arg->first, arg->count + 1);
  for (;;)
    {
      const cpp_token *token;
      if (arg->expanded_count + 1 >= capacity)
 {
   capacity *= 2;
   arg->expanded = xrealloc (arg->expanded,
        capacity * sizeof (cpp_token *));
 }
      token = cpp_get_token (pfile);
      if (token->type == CPP_EOF)
 break;
      arg->expanded[arg->expanded_count++] = token;
    }
  _cpp_pop_context (pfile);
  ((pfile)->opts.warn_traditional) = saved_warn_trad;
}
void
_cpp_pop_context (cpp_reader *pfile)
{
  cpp_context *context = pfile->context;
  if (context->macro)
    context->macro->flags &= ~(1 << 5);
  if (context->buff)
    _cpp_release_buff (pfile, context->buff);
  pfile->context = context->prev;
}
const cpp_token *
cpp_get_token (cpp_reader *pfile)
{
  const cpp_token *result;
  for (;;)
    {
      cpp_hashnode *node;
      cpp_context *context = pfile->context;
      if (!context->prev)
 result = _cpp_lex_token (pfile);
      else if (((context)->u.iso.first).token != ((context)->u.iso.last).token)
 {
   if (context->direct_p)
     result = ((context)->u.iso.first).token++;
   else
     result = *((context)->u.iso.first).ptoken++;
   if (result->flags & (1 << 3))
     {
       paste_all_tokens (pfile, result);
       if (pfile->state.in_directive)
  continue;
       return padding_token (pfile, result);
     }
 }
      else
 {
   _cpp_pop_context (pfile);
   if (pfile->state.in_directive)
     continue;
   return &pfile->avoid_paste;
 }
      if (pfile->state.in_directive && result->type == CPP_COMMENT)
 continue;
      if (result->type != CPP_NAME)
 break;
      node = result->val.node;
      if (node->type != NT_MACRO || (result->flags & (1 << 5)))
 break;
      if (!(node->flags & (1 << 5)))
 {
   if (!pfile->state.prevent_expansion
       && enter_macro_context (pfile, node))
     {
       if (pfile->state.in_directive)
  continue;
       return padding_token (pfile, result);
     }
 }
      else
 {
   cpp_token *t = _cpp_temp_token (pfile);
   t->type = result->type;
   t->flags = result->flags | (1 << 5);
   t->val.str = result->val.str;
   result = t;
 }
      break;
    }
  return result;
}
int
cpp_sys_macro_p (cpp_reader *pfile)
{
  cpp_hashnode *node = pfile->context->macro;
  return node && node->value.macro && node->value.macro->syshdr;
}
void
cpp_scan_nooutput (cpp_reader *pfile)
{
  pfile->buffer->return_at_eof = 1;
  pfile->state.discarding_output++;
  pfile->state.prevent_expansion++;
  if (((pfile)->opts.traditional))
    while (_cpp_read_logical_line_trad (pfile))
      ;
  else
    while (cpp_get_token (pfile)->type != CPP_EOF)
      ;
  pfile->state.discarding_output--;
  pfile->state.prevent_expansion--;
}
void
_cpp_backup_tokens (cpp_reader *pfile, unsigned int count)
{
  if (pfile->context->prev == ((void *)0))
    {
      pfile->lookaheads += count;
      while (count--)
 {
   pfile->cur_token--;
   if (pfile->cur_token == pfile->cur_run->base
       && pfile->cur_run->prev != ((void *)0))
     {
       pfile->cur_run = pfile->cur_run->prev;
       pfile->cur_token = pfile->cur_run->limit;
     }
 }
    }
  else
    {
      if (count != 1)
 abort ();
      if (pfile->context->direct_p)
 ((pfile->context)->u.iso.first).token--;
      else
 ((pfile->context)->u.iso.first).ptoken--;
    }
}
static unsigned char
warn_of_redefinition (cpp_reader *pfile, const cpp_hashnode *node,
        const cpp_macro *macro2)
{
  const cpp_macro *macro1;
  unsigned int i;
  if (node->flags & (1 << 4))
    return 1;
  macro1 = node->value.macro;
  if (macro1->paramc != macro2->paramc
      || macro1->fun_like != macro2->fun_like
      || macro1->variadic != macro2->variadic)
    return 1;
  for (i = 0; i < macro1->paramc; i++)
    if (macro1->params[i] != macro2->params[i])
      return 1;
  if (((pfile)->opts.traditional))
    return _cpp_expansions_different_trad (macro1, macro2);
  if (macro1->count != macro2->count)
    return 1;
  for (i = 0; i < macro1->count; i++)
    if (!_cpp_equiv_tokens (&macro1->exp.tokens[i], &macro2->exp.tokens[i]))
      return 1;
  return 0;
}
void
_cpp_free_definition (cpp_hashnode *h)
{
  h->type = NT_VOID;
  h->flags &= ~((1 << 2) | (1 << 5));
}
unsigned char
_cpp_save_parameter (cpp_reader *pfile, cpp_macro *macro, cpp_hashnode *node)
{
  unsigned int len;
  if (node->flags & (1 << 6))
    {
      cpp_error (pfile, 0x03, "duplicate macro parameter \"%s\"",
   ((&(node)->ident)->str));
      return 1;
    }
  if ((size_t) ((pfile->a_buff)->limit - (pfile->a_buff)->cur)
      < (macro->paramc + 1) * sizeof (cpp_hashnode *))
    _cpp_extend_buff (pfile, &pfile->a_buff, sizeof (cpp_hashnode *));
  ((cpp_hashnode **) ((pfile->a_buff)->cur))[macro->paramc++] = node;
  node->flags |= (1 << 6);
  len = macro->paramc * sizeof (union _cpp_hashnode_value);
  if (len > pfile->macro_buffer_len)
    {
      pfile->macro_buffer = xrealloc (pfile->macro_buffer, len);
      pfile->macro_buffer_len = len;
    }
  ((union _cpp_hashnode_value *) pfile->macro_buffer)[macro->paramc - 1]
    = node->value;
  node->value.arg_index = macro->paramc;
  return 0;
}
static unsigned char
parse_params (cpp_reader *pfile, cpp_macro *macro)
{
  unsigned int prev_ident = 0;
  for (;;)
    {
      const cpp_token *token = _cpp_lex_token (pfile);
      switch (token->type)
 {
 default:
   if (token->type == CPP_COMMENT
       && ! ((pfile)->opts.discard_comments_in_macro_exp))
     continue;
   cpp_error (pfile, 0x03,
       "\"%s\" may not appear in macro parameter list",
       cpp_token_as_text (pfile, token));
   return 0;
 case CPP_NAME:
   if (prev_ident)
     {
       cpp_error (pfile, 0x03,
    "macro parameters must be comma-separated");
       return 0;
     }
   prev_ident = 1;
   if (_cpp_save_parameter (pfile, macro, token->val.node))
     return 0;
   continue;
 case CPP_CLOSE_PAREN:
   if (prev_ident || macro->paramc == 0)
     return 1;
 case CPP_COMMA:
   if (!prev_ident)
     {
       cpp_error (pfile, 0x03, "parameter name missing");
       return 0;
     }
   prev_ident = 0;
   continue;
 case CPP_ELLIPSIS:
   macro->variadic = 1;
   if (!prev_ident)
     {
       _cpp_save_parameter (pfile, macro,
       pfile->spec_nodes.n__VA_ARGS__);
       pfile->state.va_args_ok = 1;
       if (! ((pfile)->opts.c99)
    && ((pfile)->opts.pedantic)
    && ((pfile)->opts.warn_variadic_macros))
  cpp_error (pfile, 0x02,
      "anonymous variadic macros were introduced in C99");
     }
   else if (((pfile)->opts.pedantic)
     && ((pfile)->opts.warn_variadic_macros))
     cpp_error (pfile, 0x02,
         "ISO C does not permit named variadic macros");
   token = _cpp_lex_token (pfile);
   if (token->type == CPP_CLOSE_PAREN)
     return 1;
 case CPP_EOF:
   cpp_error (pfile, 0x03, "missing ')' in macro parameter list");
   return 0;
 }
    }
}
static cpp_token *
alloc_expansion_token (cpp_reader *pfile, cpp_macro *macro)
{
  if ((size_t) ((pfile->a_buff)->limit - (pfile->a_buff)->cur) < (macro->count + 1) * sizeof (cpp_token))
    _cpp_extend_buff (pfile, &pfile->a_buff, sizeof (cpp_token));
  return &((cpp_token *) ((pfile->a_buff)->cur))[macro->count++];
}
static cpp_token *
lex_expansion_token (cpp_reader *pfile, cpp_macro *macro)
{
  cpp_token *token;
  pfile->cur_token = alloc_expansion_token (pfile, macro);
  token = _cpp_lex_direct (pfile);
  if (token->type == CPP_NAME
      && (token->val.node->flags & (1 << 6)) != 0)
    {
      token->type = CPP_MACRO_ARG;
      token->val.arg_no = token->val.node->value.arg_index;
    }
  else if (((pfile)->opts.warn_traditional) && macro->paramc > 0
    && (token->type == CPP_STRING || token->type == CPP_CHAR))
    check_trad_stringification (pfile, macro, &token->val.str);
  return token;
}
static unsigned char
create_iso_definition (cpp_reader *pfile, cpp_macro *macro)
{
  cpp_token *token;
  const cpp_token *ctoken;
  ctoken = _cpp_lex_token (pfile);
  if (ctoken->type == CPP_OPEN_PAREN && !(ctoken->flags & (1 << 0)))
    {
      unsigned char ok = parse_params (pfile, macro);
      macro->params = (cpp_hashnode **) ((pfile->a_buff)->cur);
      if (!ok)
 return 0;
      if (pfile->hash_table1->alloc_subobject)
 {
   cpp_token *tokns = pfile->hash_table1->alloc_subobject
     (sizeof (cpp_token) * macro->paramc);
   memcpy (tokns, macro->params, sizeof (cpp_token) * macro->paramc);
   macro->params = (void *) tokns;
 }
      else
 ((pfile->a_buff)->cur) = (uchar *) &macro->params[macro->paramc];
      macro->fun_like = 1;
    }
  else if (ctoken->type != CPP_EOF && !(ctoken->flags & (1 << 0)))
    cpp_error (pfile, 0x02,
        "ISO C requires whitespace after the macro name");
  if (macro->fun_like)
    token = lex_expansion_token (pfile, macro);
  else
    {
      token = alloc_expansion_token (pfile, macro);
      *token = *ctoken;
    }
  for (;;)
    {
      if (macro->count > 1 && token[-1].type == CPP_HASH && macro->fun_like)
 {
   if (token->type == CPP_MACRO_ARG)
     {
       token->flags &= ~(1 << 0);
       token->flags |= (1 << 2);
       token->flags |= token[-1].flags & (1 << 0);
       token[-1] = token[0];
       macro->count--;
     }
   else if (((pfile)->opts.lang) != CLK_ASM)
     {
       cpp_error (pfile, 0x03,
    "'#' is not followed by a macro parameter");
       return 0;
     }
 }
      if (token->type == CPP_EOF)
 break;
      if (token->type == CPP_PASTE)
 {
   if (--macro->count > 0)
     token = lex_expansion_token (pfile, macro);
   if (macro->count == 0 || token->type == CPP_EOF)
     {
       cpp_error (pfile, 0x03,
   "'##' cannot appear at either end of a macro expansion");
       return 0;
     }
   token[-1].flags |= (1 << 3);
 }
      token = lex_expansion_token (pfile, macro);
    }
  macro->exp.tokens = (cpp_token *) ((pfile->a_buff)->cur);
  macro->traditional = 0;
  macro->count--;
  if (macro->count)
    macro->exp.tokens[0].flags &= ~(1 << 0);
  if (pfile->hash_table1->alloc_subobject)
    {
      cpp_token *tokns = pfile->hash_table1->alloc_subobject (sizeof (cpp_token)
            * macro->count);
      memcpy (tokns, macro->exp.tokens, sizeof (cpp_token) * macro->count);
      macro->exp.tokens = tokns;
    }
  else
    ((pfile->a_buff)->cur) = (uchar *) &macro->exp.tokens[macro->count];
  return 1;
}
unsigned char
_cpp_create_definition (cpp_reader *pfile, cpp_hashnode *node)
{
  cpp_macro *macro;
  unsigned int i;
  unsigned char ok;
  if (pfile->hash_table1->alloc_subobject)
    macro = pfile->hash_table1->alloc_subobject (sizeof (cpp_macro));
  else
    macro = (cpp_macro *) _cpp_aligned_alloc (pfile, sizeof (cpp_macro));
  macro->line = pfile->directive_line;
  macro->params = 0;
  macro->paramc = 0;
  macro->variadic = 0;
  macro->used = !((pfile)->opts.warn_unused_macros);
  macro->count = 0;
  macro->fun_like = 0;
  macro->syshdr = pfile->buffer && pfile->buffer->sysp != 0;
  if (((pfile)->opts.traditional))
    ok = _cpp_create_trad_definition (pfile, macro);
  else
    {
      cpp_token *saved_cur_token = pfile->cur_token;
      ok = create_iso_definition (pfile, macro);
      saved_cur_token[-1].type = pfile->cur_token[-1].type;
      pfile->cur_token = saved_cur_token;
      pfile->state.va_args_ok = 0;
    }
  for (i = macro->paramc; i-- > 0; )
    {
      struct cpp_hashnode *node = macro->params[i];
      node->flags &= ~ (1 << 6);
      node->value = ((union _cpp_hashnode_value *) pfile->macro_buffer)[i];
    }
  if (!ok)
    return ok;
  if (node->type == NT_MACRO)
    {
      if (((pfile)->opts.warn_unused_macros))
 _cpp_warn_if_unused_macro (pfile, node, ((void *)0));
      if (warn_of_redefinition (pfile, node, macro))
 {
   cpp_error_with_line (pfile, 0x02, pfile->directive_line, 0,
          "\"%s\" redefined", ((&(node)->ident)->str));
   if (node->type == NT_MACRO && !(node->flags & (1 << 2)))
     cpp_error_with_line (pfile, 0x02,
     node->value.macro->line, 0,
    "this is the location of the previous definition");
 }
    }
  if (node->type != NT_VOID)
    _cpp_free_definition (node);
  node->type = NT_MACRO;
  node->value.macro = macro;
  if (! ustrncmp (((&(node)->ident)->str), (const uchar *)"__STDC_", sizeof "__STDC_" - 1))
    node->flags |= (1 << 4);
  return ok;
}
static void
check_trad_stringification (cpp_reader *pfile, const cpp_macro *macro,
       const cpp_string *string1)
{
  unsigned int i, len;
  const uchar *p, *q, *limit;
  limit = string1->text + string1->len - 1;
  for (p = string1->text + 1; p < limit; p = q)
    {
      while (p < limit && !((_sch_istable[(*p) & 0xff] & (unsigned short)(_sch_isidst)) || ((*p) == '$' && ((pfile)->opts.dollars_in_ident))))
 p++;
      q = p;
      while (q < limit && ((_sch_istable[(*q) & 0xff] & (unsigned short)(_sch_isidnum)) || ((*q) == '$' && ((pfile)->opts.dollars_in_ident))))
 q++;
      len = q - p;
      for (i = 0; i < macro->paramc; i++)
 {
   const cpp_hashnode *node = macro->params[i];
   if (((&(node)->ident)->len) == len
       && !memcmp (p, ((&(node)->ident)->str), len))
     {
       cpp_error (pfile, 0x00,
    "macro argument \"%s\" would be stringified in traditional C",
    ((&(node)->ident)->str));
       break;
     }
 }
    }
}
const unsigned char *
cpp_macro_definition (cpp_reader *pfile, const cpp_hashnode *node)
{
  unsigned int i, len;
  const cpp_macro *macro = node->value.macro;
  unsigned char *buffer;
  if (node->type != NT_MACRO || (node->flags & (1 << 2)))
    {
      cpp_error (pfile, 0x04,
   "invalid hash type %d in cpp_macro_definition", node->type);
      return 0;
    }
  len = ((&(node)->ident)->len) + 2;
  if (macro->fun_like)
    {
      len += 4;
      for (i = 0; i < macro->paramc; i++)
 len += ((&(macro->params[i])->ident)->len) + 1;
    }
  if (((pfile)->opts.traditional))
    len += _cpp_replacement_text_len (macro);
  else
    {
      for (i = 0; i < macro->count; i++)
 {
   cpp_token *token = &macro->exp.tokens[i];
   if (token->type == CPP_MACRO_ARG)
     len += ((&(macro->params[token->val.arg_no - 1])->ident)->len);
   else
     len += cpp_token_len (token) + 1;
   if (token->flags & (1 << 2))
     len++;
   if (token->flags & (1 << 3))
     len += 3;
 }
    }
  if (len > pfile->macro_buffer_len)
    {
      pfile->macro_buffer = xrealloc (pfile->macro_buffer, len);
      pfile->macro_buffer_len = len;
    }
  buffer = pfile->macro_buffer;
  memcpy (buffer, ((&(node)->ident)->str), ((&(node)->ident)->len));
  buffer += ((&(node)->ident)->len);
  if (macro->fun_like)
    {
      *buffer++ = '(';
      for (i = 0; i < macro->paramc; i++)
 {
   cpp_hashnode *param = macro->params[i];
   if (param != pfile->spec_nodes.n__VA_ARGS__)
     {
       memcpy (buffer, ((&(param)->ident)->str), ((&(param)->ident)->len));
       buffer += ((&(param)->ident)->len);
     }
   if (i + 1 < macro->paramc)
     *buffer++ = ',';
   else if (macro->variadic)
     *buffer++ = '.', *buffer++ = '.', *buffer++ = '.';
 }
      *buffer++ = ')';
    }
  *buffer++ = ' ';
  if (((pfile)->opts.traditional))
    buffer = _cpp_copy_replacement_text (macro, buffer);
  else if (macro->count)
    {
      for (i = 0; i < macro->count; i++)
 {
   cpp_token *token = &macro->exp.tokens[i];
   if (token->flags & (1 << 0))
     *buffer++ = ' ';
   if (token->flags & (1 << 2))
     *buffer++ = '#';
   if (token->type == CPP_MACRO_ARG)
     {
       len = ((&(macro->params[token->val.arg_no - 1])->ident)->len);
       memcpy (buffer,
        ((&(macro->params[token->val.arg_no - 1])->ident)->str), len);
       buffer += len;
     }
   else
     buffer = cpp_spell_token (pfile, token, buffer);
   if (token->flags & (1 << 3))
     {
       *buffer++ = ' ';
       *buffer++ = '#';
       *buffer++ = '#';
     }
 }
    }
  *buffer = '\0';
  return pfile->macro_buffer;
}
struct depends
{
  const char **targetv;
  unsigned int ntargets;
  unsigned int targets_size;
  const char **depv;
  unsigned int ndeps;
  unsigned int deps_size;
  const char **vpathv;
  size_t *vpathlv;
  unsigned int nvpaths;
  unsigned int vpaths_size;
};
static const char *munge (const char *);
static const char *
munge (const char *filename)
{
  int len;
  const char *p, *q;
  char *dst, *buffer;
  for (p = filename, len = 0; *p; p++, len++)
    {
      switch (*p)
 {
 case ' ':
 case '\t':
   for (q = p - 1; filename <= q && *q == '\\'; q--)
     len++;
   len++;
   break;
 case '$':
   len++;
   break;
 }
    }
  buffer = xmalloc (len + 1);
  for (p = filename, dst = buffer; *p; p++, dst++)
    {
      switch (*p)
 {
 case ' ':
 case '\t':
   for (q = p - 1; filename <= q && *q == '\\'; q--)
     *dst++ = '\\';
   *dst++ = '\\';
   break;
 case '$':
   *dst++ = '$';
   break;
 default:
                ;
 }
      *dst = *p;
    }
  *dst = '\0';
  return buffer;
}
static const char *
apply_vpath (struct depends *d, const char *t)
{
  if (d->vpathv)
    {
      unsigned int i;
      for (i = 0; i < d->nvpaths; i++)
 {
   if (!strncmp (d->vpathv[i], t, d->vpathlv[i]))
     {
       const char *p = t + d->vpathlv[i];
       if (!((*p) == '/'))
  goto not_this_one;
       if (p[1] == '.' && p[2] == '.' && ((p[3]) == '/'))
  goto not_this_one;
       t = t + d->vpathlv[i] + 1;
       break;
     }
 not_this_one:;
 }
    }
  while (t[0] == '.' && ((t[1]) == '/'))
    t += 2;
  return t;
}
struct depends *
deps_init (void)
{
  return xcalloc (sizeof (struct depends), 1);
}
void
deps_free (struct depends *d)
{
  unsigned int i;
  if (d->targetv)
    {
      for (i = 0; i < d->ntargets; i++)
 free ((void *) d->targetv[i]);
      free (d->targetv);
    }
  if (d->depv)
    {
      for (i = 0; i < d->ndeps; i++)
 free ((void *) d->depv[i]);
      free (d->depv);
    }
  if (d->vpathv)
    {
      for (i = 0; i < d->nvpaths; i++)
 free ((void *) d->vpathv[i]);
      free (d->vpathv);
      free (d->vpathlv);
    }
  free (d);
}
void
deps_add_target (struct depends *d, const char *t, int quote)
{
  if (d->ntargets == d->targets_size)
    {
      d->targets_size = d->targets_size * 2 + 4;
      d->targetv = xrealloc (d->targetv,
        d->targets_size * sizeof (const char *));
    }
  t = apply_vpath (d, t);
  if (quote)
    t = munge (t);
  else
    t = xstrdup (t);
  d->targetv[d->ntargets++] = t;
}
void
deps_add_default_target (struct depends *d, const char *tgt)
{
  if (d->ntargets)
    return;
  if (tgt[0] == '\0')
    deps_add_target (d, "-", 1);
  else
    {
      const char *start = lbasename (tgt);
      char *o = C_alloca(strlen (start) + strlen (".o") + 1);
      char *suffix;
      strcpy (o, start);
      suffix = strrchr (o, '.');
      if (!suffix)
        suffix = o + strlen (o);
      strcpy (suffix, ".o");
      deps_add_target (d, o, 1);
    }
}
void
deps_add_dep (struct depends *d, const char *t)
{
  t = munge (apply_vpath (d, t));
  if (d->ndeps == d->deps_size)
    {
      d->deps_size = d->deps_size * 2 + 8;
      d->depv = xrealloc (d->depv, d->deps_size * sizeof (const char *));
    }
  d->depv[d->ndeps++] = t;
}
void
deps_add_vpath (struct depends *d, const char *vpath)
{
  const char *elem, *p;
  char *copy;
  size_t len;
  for (elem = vpath; *elem; elem = p)
    {
      for (p = elem; *p && *p != ':'; p++);
      len = p - elem;
      copy = xmalloc (len + 1);
      memcpy (copy, elem, len);
      copy[len] = '\0';
      if (*p == ':')
 p++;
      if (d->nvpaths == d->vpaths_size)
 {
   d->vpaths_size = d->vpaths_size * 2 + 8;
   d->vpathv = xrealloc (d->vpathv,
    d->vpaths_size * sizeof (const char *));
   d->vpathlv = xrealloc (d->vpathlv, d->vpaths_size * sizeof (size_t));
 }
      d->vpathv[d->nvpaths] = copy;
      d->vpathlv[d->nvpaths] = len;
      d->nvpaths++;
    }
}
void
deps_write (const struct depends *d, FILE *fp, unsigned int colmax)
{
  unsigned int size, i, column;
  column = 0;
  if (colmax && colmax < 34)
    colmax = 34;
  for (i = 0; i < d->ntargets; i++)
    {
      size = strlen (d->targetv[i]);
      column += size;
      if (colmax && column > colmax)
 {
   fputs_unlocked (" \\\n ", fp);
   column = 1 + size;
 }
      if (i)
 {
   putc_unlocked (' ', fp);
   column++;
 }
      fputs_unlocked (d->targetv[i], fp);
    }
  putc_unlocked (':', fp);
  putc_unlocked (' ', fp);
  column += 2;
  for (i = 0; i < d->ndeps; i++)
    {
      size = strlen (d->depv[i]);
      column += size;
      if (colmax && column > colmax)
 {
   fputs_unlocked (" \\\n ", fp);
   column = 1 + size;
 }
      if (i)
 {
   putc_unlocked (' ', fp);
   column++;
 }
      fputs_unlocked (d->depv[i], fp);
    }
  putc_unlocked ('\n', fp);
}
void
deps_phony_targets (const struct depends *d, FILE *fp)
{
  unsigned int i;
  for (i = 1; i < d->ndeps; i++)
    {
      putc_unlocked ('\n', fp);
      fputs_unlocked (d->depv[i], fp);
      putc_unlocked (':', fp);
      putc_unlocked ('\n', fp);
    }
}
int
deps_save (struct depends *deps, FILE *f)
{
  unsigned int i;
  if (fwrite_unlocked (&deps->ndeps, sizeof (deps->ndeps), 1, f) != 1)
      return -1;
  for (i = 0; i < deps->ndeps; i++)
    {
      size_t num_to_write = strlen (deps->depv[i]);
      if (fwrite_unlocked (&num_to_write, sizeof (size_t), 1, f) != 1)
          return -1;
      if (fwrite_unlocked (deps->depv[i], num_to_write, 1, f) != 1)
          return -1;
    }
  return 0;
}
int
deps_restore (struct depends *deps, FILE *fd, const char *self)
{
  unsigned int i, count;
  size_t num_to_read;
  size_t buf_size = 512;
  char *buf = xmalloc (buf_size);
  if (fread (&count, 1, sizeof (count), fd) != sizeof (count))
    return -1;
  for (i = 0; i < count; i++)
    {
      if (fread (&num_to_read, 1, sizeof (size_t), fd) != sizeof (size_t))
 return -1;
      if (buf_size < num_to_read + 1)
 {
   buf_size = num_to_read + 1 + 127;
   buf = xrealloc (buf, buf_size);
 }
      if (fread (buf, 1, num_to_read, fd) != num_to_read)
 return -1;
      buf[num_to_read] = '\0';
      if (self != ((void *)0) && strcmp (buf, self) != 0)
        deps_add_dep (deps, buf);
    }
  free (buf);
  return 0;
}
static int write_macdef (cpp_reader *, cpp_hashnode *, void *);
static int save_idents (cpp_reader *, cpp_hashnode *, void *);
static hashval_t hashmem (const void *, size_t);
static hashval_t cpp_string_hash (const void *);
static int cpp_string_eq (const void *, const void *);
static int count_defs (cpp_reader *, cpp_hashnode *, void *);
static int comp_hashnodes (const void *, const void *);
static int collect_ht_nodes (cpp_reader *, cpp_hashnode *, void *);
static int write_defs (cpp_reader *, cpp_hashnode *, void *);
static int save_macros (cpp_reader *, cpp_hashnode *, void *);
struct macrodef_struct
{
  unsigned int definition_length;
  unsigned short name_length;
  unsigned short flags;
};
static int
write_macdef (cpp_reader *pfile, cpp_hashnode *hn, void *file_p)
{
  FILE *f = (FILE *) file_p;
  switch (hn->type)
    {
    case NT_VOID:
      if (! (hn->flags & (1 << 1)))
 return 1;
    case NT_MACRO:
      if ((hn->flags & (1 << 2)))
 return 1;
      {
 struct macrodef_struct s;
 const unsigned char *defn;
 s.name_length = ((&(hn)->ident)->len);
 s.flags = hn->flags & (1 << 1);
 if (hn->type == NT_MACRO)
   {
     defn = cpp_macro_definition (pfile, hn);
     s.definition_length = ustrlen (defn);
   }
 else
   {
     defn = ((&(hn)->ident)->str);
     s.definition_length = s.name_length;
   }
 if (fwrite_unlocked (&s, sizeof (s), 1, f) != 1
     || fwrite_unlocked (defn, 1, s.definition_length, f) != s.definition_length)
   {
     cpp_errno (pfile, 0x03,
         "while writing precompiled header");
     return 0;
   }
      }
      return 1;
    case NT_ASSERTION:
      return 1;
    default:
      abort ();
    }
}
struct cpp_savedstate
{
  htab_t definedhash;
  size_t hashsize;
  size_t n_defs;
  cpp_hashnode **defs;
  unsigned char *definedstrs;
};
static int
save_idents (cpp_reader *pfile , cpp_hashnode *hn, void *ss_p)
{
  struct cpp_savedstate *const ss = (struct cpp_savedstate *)ss_p;
  if (hn->type != NT_VOID)
    {
      struct cpp_string news;
      void **slot;
      news.len = ((&(hn)->ident)->len);
      news.text= ((&(hn)->ident)->str);
      slot = htab_find_slot (ss->definedhash, &news, INSERT);
      if (*slot == ((void *)0))
 {
   struct cpp_string *sp;
   unsigned char *text;
   sp = xmalloc (sizeof (struct cpp_string));
   *slot = sp;
   sp->len = ((&(hn)->ident)->len);
   sp->text = text = xmalloc (((&(hn)->ident)->len));
   memcpy (text, ((&(hn)->ident)->str), ((&(hn)->ident)->len));
 }
    }
  return 1;
}
static hashval_t
hashmem (const void *p_p, size_t sz)
{
  const unsigned char *p = (const unsigned char *)p_p;
  size_t i;
  hashval_t h;
  h = 0;
  for (i = 0; i < sz; i++)
    h = h * 67 - (*p++ - 113);
  return h;
}
static hashval_t
cpp_string_hash (const void *a_p)
{
  const struct cpp_string *a = (const struct cpp_string *) a_p;
  return hashmem (a->text, a->len);
}
static int
cpp_string_eq (const void *a_p, const void *b_p)
{
  const struct cpp_string *a = (const struct cpp_string *) a_p;
  const struct cpp_string *b = (const struct cpp_string *) b_p;
  return (a->len == b->len
   && memcmp (a->text, b->text, a->len) == 0);
}
int
cpp_save_state (cpp_reader *r, FILE *f)
{
  r->savedstate = xmalloc (sizeof (struct cpp_savedstate));
  r->savedstate->definedhash = htab_create (100, cpp_string_hash,
         cpp_string_eq, ((void *)0));
  cpp_forall_identifiers (r, save_idents, r->savedstate);
  cpp_forall_identifiers (r, write_macdef, f);
  return 0;
}
static int
count_defs (cpp_reader *pfile , cpp_hashnode *hn, void *ss_p)
{
  struct cpp_savedstate *const ss = (struct cpp_savedstate *)ss_p;
  switch (hn->type)
    {
    case NT_MACRO:
      if (hn->flags & (1 << 2))
 return 1;
    case NT_VOID:
      {
 struct cpp_string news;
 void **slot;
 news.len = ((&(hn)->ident)->len);
 news.text = ((&(hn)->ident)->str);
 slot = htab_find (ss->definedhash, &news);
 if (slot == ((void *)0))
   {
     ss->hashsize += ((&(hn)->ident)->len) + 1;
     ss->n_defs += 1;
   }
      }
      return 1;
    case NT_ASSERTION:
      return 1;
    default:
      abort ();
    }
}
static int
write_defs (cpp_reader *pfile , cpp_hashnode *hn, void *ss_p)
{
  struct cpp_savedstate *const ss = (struct cpp_savedstate *)ss_p;
  switch (hn->type)
    {
    case NT_MACRO:
      if (hn->flags & (1 << 2))
 return 1;
    case NT_VOID:
      {
 struct cpp_string news;
 void **slot;
 news.len = ((&(hn)->ident)->len);
 news.text = ((&(hn)->ident)->str);
 slot = htab_find (ss->definedhash, &news);
 if (slot == ((void *)0))
   {
     ss->defs[ss->n_defs] = hn;
     ss->n_defs += 1;
   }
      }
      return 1;
    case NT_ASSERTION:
      return 1;
    default:
      abort ();
    }
}
static int
comp_hashnodes (const void *px, const void *py)
{
  cpp_hashnode *x = *(cpp_hashnode **) px;
  cpp_hashnode *y = *(cpp_hashnode **) py;
  return ustrcmp (((&(x)->ident)->str), ((&(y)->ident)->str));
}
int
cpp_write_pch_deps (cpp_reader *r, FILE *f)
{
  struct macrodef_struct z;
  struct cpp_savedstate *const ss = r->savedstate;
  unsigned char *definedstrs;
  size_t i;
  ss->hashsize = 0;
  ss->n_defs = 0;
  cpp_forall_identifiers (r, count_defs, ss);
  ss->defs = xmalloc (ss->n_defs * sizeof (cpp_hashnode *));
  ss->n_defs = 0;
  cpp_forall_identifiers (r, write_defs, ss);
  qsort (ss->defs, ss->n_defs, sizeof (cpp_hashnode *), &comp_hashnodes);
  definedstrs = ss->definedstrs = xmalloc (ss->hashsize);
  for (i = 0; i < ss->n_defs; ++i)
    {
      size_t len = ((&(ss->defs[i])->ident)->len);
      memcpy (definedstrs, ((&(ss->defs[i])->ident)->str), len + 1);
      definedstrs += len + 1;
    }
  memset (&z, 0, sizeof (z));
  z.definition_length = ss->hashsize;
  if (fwrite_unlocked (&z, sizeof (z), 1, f) != 1
      || fwrite_unlocked (ss->definedstrs, ss->hashsize, 1, f) != 1)
    {
      cpp_errno (r, 0x03, "while writing precompiled header");
      return -1;
    }
  free (ss->definedstrs);
  free (ss);
  r->savedstate = ((void *)0);
  return 0;
}
int
cpp_write_pch_state (cpp_reader *r, FILE *f)
{
  if (!r->deps)
    r->deps = deps_init ();
  if (deps_save (r->deps, f) != 0)
    {
      cpp_errno (r, 0x03, "while writing precompiled header");
      return -1;
    }
  if (! _cpp_save_file_entries (r, f))
    {
      cpp_errno (r, 0x03, "while writing precompiled header");
      return -1;
    }
  return 0;
}
struct ht_node_list
{
  cpp_hashnode **defs;
  size_t n_defs;
  size_t asize;
};
static int
collect_ht_nodes (cpp_reader *pfile , cpp_hashnode *hn,
    void *nl_p)
{
  struct ht_node_list *const nl = (struct ht_node_list *)nl_p;
  if (hn->type != NT_VOID || hn->flags & (1 << 1))
    {
      if (nl->n_defs == nl->asize)
        {
          nl->asize *= 2;
          nl->defs = xrealloc (nl->defs, nl->asize * sizeof (cpp_hashnode *));
        }
      nl->defs[nl->n_defs] = hn;
      ++nl->n_defs;
    }
  return 1;
}
int
cpp_valid_state (cpp_reader *r, const char *name, int fd)
{
  struct macrodef_struct m;
  size_t namebufsz = 256;
  unsigned char *namebuf = xmalloc (namebufsz);
  unsigned char *undeftab = ((void *)0);
  struct ht_node_list nl = { 0, 0, 0 };
  unsigned char *first, *last;
  unsigned int i;
  for (;;)
    {
      cpp_hashnode *h;
      const unsigned char *newdefn;
      if (read (fd, &m, sizeof (m)) != sizeof (m))
 goto error;
      if (m.name_length == 0)
 break;
      if (((r)->opts.preprocessed))
 {
   if (lseek (fd, m.definition_length, 1) == -1)
     goto error;
   continue;
 }
      if (m.definition_length > namebufsz)
 {
   free (namebuf);
   namebufsz = m.definition_length + 256;
   namebuf = xmalloc (namebufsz);
 }
      if ((size_t)read (fd, namebuf, m.definition_length)
   != m.definition_length)
 goto error;
      h = cpp_lookup (r, namebuf, m.name_length);
      if (m.flags & (1 << 1)
   || h->type != NT_MACRO
   || h->flags & (1 << 1))
 {
   if (((r)->opts.warn_invalid_pch))
     cpp_error (r, 0x01,
         "%s: not used because `%.*s' not defined",
         name, m.name_length, namebuf);
   goto fail;
 }
      newdefn = cpp_macro_definition (r, h);
      if (m.definition_length != ustrlen (newdefn)
   || memcmp (namebuf, newdefn, m.definition_length) != 0)
 {
   if (((r)->opts.warn_invalid_pch))
     cpp_error (r, 0x01,
        "%s: not used because `%.*s' defined as `%s' not `%.*s'",
         name, m.name_length, namebuf, newdefn + m.name_length,
         m.definition_length - m.name_length,
         namebuf + m.name_length);
   goto fail;
 }
    }
  free (namebuf);
  namebuf = ((void *)0);
  undeftab = xmalloc (m.definition_length);
  if ((size_t) read (fd, undeftab, m.definition_length) != m.definition_length)
    goto error;
  nl.n_defs = 0;
  nl.asize = 10;
  nl.defs = xmalloc (nl.asize * sizeof (cpp_hashnode *));
  cpp_forall_identifiers (r, &collect_ht_nodes, &nl);
  qsort (nl.defs, nl.n_defs, sizeof (cpp_hashnode *), &comp_hashnodes);
  first = undeftab;
  last = undeftab + m.definition_length;
  i = 0;
  while (first < last && i < nl.n_defs)
    {
      int cmp = ustrcmp (first, ((&(nl.defs[i])->ident)->str));
      if (cmp < 0)
  first += ustrlen (first) + 1;
      else if (cmp > 0)
  ++i;
      else
 {
   if (((r)->opts.warn_invalid_pch))
     cpp_error (r, 0x01,
         "%s: not used because `%s' is defined",
         name, first);
   goto fail;
 }
    }
  free(nl.defs);
  free (undeftab);
  return 0;
 error:
  cpp_errno (r, 0x03, "while reading precompiled header");
  return -1;
 fail:
  if (namebuf != ((void *)0))
    free (namebuf);
  if (undeftab != ((void *)0))
    free (undeftab);
  if (nl.defs != ((void *)0))
    free (nl.defs);
  return 1;
}
struct save_macro_data
{
  uchar **defns;
  size_t count;
  size_t array_size;
  char **saved_pragmas;
};
static int
save_macros (cpp_reader *r, cpp_hashnode *h, void *data_p)
{
  struct save_macro_data *data = (struct save_macro_data *)data_p;
  if (h->type != NT_VOID
      && (h->flags & (1 << 2)) == 0)
    {
      if (data->count == data->array_size)
 {
   data->array_size *= 2;
   data->defns = xrealloc (data->defns, (data->array_size
      * sizeof (uchar *)));
 }
      switch (h->type)
 {
 case NT_ASSERTION:
   return 1;
 case NT_MACRO:
   {
     const uchar * defn = cpp_macro_definition (r, h);
     size_t defnlen = ustrlen (defn);
     data->defns[data->count] = xmemdup (defn, defnlen, defnlen + 2);
     data->defns[data->count][defnlen] = '\n';
   }
   break;
 default:
   abort ();
 }
      data->count++;
    }
  return 1;
}
void
cpp_prepare_state (cpp_reader *r, struct save_macro_data **data)
{
  struct save_macro_data *d = xmalloc (sizeof (struct save_macro_data));
  d->array_size = 512;
  d->defns = xmalloc (d->array_size * sizeof (d->defns[0]));
  d->count = 0;
  cpp_forall_identifiers (r, save_macros, d);
  d->saved_pragmas = _cpp_save_pragma_names (r);
  *data = d;
}
int
cpp_read_state (cpp_reader *r, const char *name, FILE *f,
  struct save_macro_data *data)
{
  size_t i;
  struct lexer_state old_state;
  {
    struct spec_nodes *s = &r->spec_nodes;
    s->n_defined = cpp_lookup (r, (const uchar *)"defined", sizeof "defined" - 1);
    s->n_true = cpp_lookup (r, (const uchar *)"true", sizeof "true" - 1);
    s->n_false = cpp_lookup (r, (const uchar *)"false", sizeof "false" - 1);
    s->n__VA_ARGS__ = cpp_lookup (r, (const uchar *)"__VA_ARGS__", sizeof "__VA_ARGS__" - 1);
  }
  old_state = r->state;
  r->state.in_directive = 1;
  r->state.prevent_expansion = 1;
  r->state.angled_headers = 0;
  for (i = 0; i < data->count; i++)
    {
      cpp_hashnode *h;
      size_t namelen;
      uchar *defn;
      namelen = strcspn (data->defns[i], "( \n");
      h = cpp_lookup (r, data->defns[i], namelen);
      defn = data->defns[i] + namelen;
      if (h->type == NT_VOID)
 {
   if (cpp_push_buffer (r, defn, ustrchr (defn, '\n') - defn, 1)
       != ((void *)0))
     {
       _cpp_clean_line (r);
       if (!_cpp_create_definition (r, h))
  abort ();
       _cpp_pop_buffer (r);
     }
   else
     abort ();
 }
      free (data->defns[i]);
    }
  r->state = old_state;
  _cpp_restore_pragma_names (r, data->saved_pragmas);
  free (data);
  if (deps_restore (r->deps, f, ((r)->opts.restore_pch_deps) ? name : ((void *)0))
      != 0)
    goto error;
  if (! _cpp_read_file_entries (r, f))
    goto error;
  return 0;
 error:
  cpp_errno (r, 0x03, "while reading precompiled header");
  return -1;
}
static unsigned int calc_hash (const unsigned char *, size_t);
static void ht_expand (hash_table *);
static double approx_sqrt (double);
static unsigned int
calc_hash (const unsigned char *str, size_t len)
{
  size_t n = len;
  unsigned int r = 0;
  while (n--)
    r = ((r) * 67 + ((*str++) - 113));;
  return ((r) + (len));
}
hash_table *
ht_create (unsigned int order)
{
  unsigned int nslots = 1 << order;
  hash_table *table;
  table = xcalloc (1, sizeof (hash_table));
  _obstack_begin (&table->stack, 0, 0,
    (void *(*) (long)) xmalloc,
    (void (*) (void *)) free);
  ((&table->stack)->alignment_mask) = 0;
  table->entries = xcalloc (nslots, sizeof (hashnode));
  table->entries_owned = 1;
  table->nslots = nslots;
  return table;
}
void
ht_destroy (hash_table *table)
{
  ( (&table->stack)->temp = (char *) (((void *)0)) - (char *) (&table->stack)->chunk, (((&table->stack)->temp > 0 && (&table->stack)->temp < (&table->stack)->chunk_limit - (char *) (&table->stack)->chunk) ? (int) ((&table->stack)->next_free = (&table->stack)->object_base = (&table->stack)->temp + (char *) (&table->stack)->chunk) : (((obstack_free) ((&table->stack), (&table->stack)->temp + (char *) (&table->stack)->chunk), 0), 0)));
  if (table->entries_owned)
    free (table->entries);
  free (table);
}
hashnode
ht_lookup (hash_table *table, const unsigned char *str, size_t len,
    enum ht_lookup_option insert)
{
  return ht_lookup_with_hash (table, str, len, calc_hash (str, len),
         insert);
}
hashnode
ht_lookup_with_hash (hash_table *table, const unsigned char *str,
       size_t len, unsigned int hash,
       enum ht_lookup_option insert)
{
  unsigned int hash2;
  unsigned int index;
  size_t sizemask;
  hashnode node;
  sizemask = table->nslots - 1;
  index = hash & sizemask;
  table->searches++;
  node = table->entries[index];
  if (node != ((void *)0))
    {
      if (node->hash_value == hash
   && ((node)->len) == (unsigned int) len
   && !memcmp (((node)->str), str, len))
 {
   if (insert == HT_ALLOCED)
     ( (&table->stack)->temp = (char *) ((void *) str) - (char *) (&table->stack)->chunk, (((&table->stack)->temp > 0 && (&table->stack)->temp < (&table->stack)->chunk_limit - (char *) (&table->stack)->chunk) ? (int) ((&table->stack)->next_free = (&table->stack)->object_base = (&table->stack)->temp + (char *) (&table->stack)->chunk) : (((obstack_free) ((&table->stack), (&table->stack)->temp + (char *) (&table->stack)->chunk), 0), 0)));
   return node;
 }
      hash2 = ((hash * 17) & sizemask) | 1;
      for (;;)
 {
   table->collisions++;
   index = (index + hash2) & sizemask;
   node = table->entries[index];
   if (node == ((void *)0))
     break;
   if (node->hash_value == hash
       && ((node)->len) == (unsigned int) len
       && !memcmp (((node)->str), str, len))
     {
       if (insert == HT_ALLOCED)
  ( (&table->stack)->temp = (char *) ((void *) str) - (char *) (&table->stack)->chunk, (((&table->stack)->temp > 0 && (&table->stack)->temp < (&table->stack)->chunk_limit - (char *) (&table->stack)->chunk) ? (int) ((&table->stack)->next_free = (&table->stack)->object_base = (&table->stack)->temp + (char *) (&table->stack)->chunk) : (((obstack_free) ((&table->stack), (&table->stack)->temp + (char *) (&table->stack)->chunk), 0), 0)));
       return node;
     }
 }
    }
  if (insert == HT_NO_INSERT)
    return ((void *)0);
  node = (*table->alloc_node) (table);
  table->entries[index] = node;
  ((node)->len) = (unsigned int) len;
  node->hash_value = hash;
  if (insert == HT_ALLOC)
    ((node)->str) = (( ((&table->stack))->temp = ((len)), ((((&table->stack))->next_free + ((&table->stack))->temp + 1 > ((&table->stack))->chunk_limit) ? (_obstack_newchunk (((&table->stack)), ((&table->stack))->temp + 1), 0) : 0), memcpy ((((&table->stack))->next_free), (((str))), (((&table->stack))->temp)), ((&table->stack))->next_free += ((&table->stack))->temp, *(((&table->stack))->next_free)++ = 0), ( (((&table->stack))->next_free == ((&table->stack))->object_base ? ((((&table->stack))->maybe_empty_object = 1), 0) : 0), ((&table->stack))->temp = ((((&table->stack))->object_base) - (char *) 0), ((&table->stack))->next_free = (((((((&table->stack))->next_free) - (char *) 0)+((&table->stack))->alignment_mask) & ~ (((&table->stack))->alignment_mask)) + (char *) 0), ((((&table->stack))->next_free - (char *) ((&table->stack))->chunk > ((&table->stack))->chunk_limit - (char *) ((&table->stack))->chunk) ? (((&table->stack))->next_free = ((&table->stack))->chunk_limit) : 0), ((&table->stack))->object_base = ((&table->stack))->next_free, ((((&table->stack))->temp) + (char *) 0)));
  else
    ((node)->str) = str;
  if (++table->nelements * 4 >= table->nslots * 3)
    ht_expand (table);
  return node;
}
static void
ht_expand (hash_table *table)
{
  hashnode *nentries, *p, *limit;
  unsigned int size, sizemask;
  size = table->nslots * 2;
  nentries = xcalloc (size, sizeof (hashnode));
  sizemask = size - 1;
  p = table->entries;
  limit = p + table->nslots;
  do
    if (*p)
      {
 unsigned int index, hash, hash2;
 hash = (*p)->hash_value;
 index = hash & sizemask;
 if (nentries[index])
   {
     hash2 = ((hash * 17) & sizemask) | 1;
     do
       {
  index = (index + hash2) & sizemask;
       }
     while (nentries[index]);
   }
 nentries[index] = *p;
      }
  while (++p < limit);
  if (table->entries_owned)
    free (table->entries);
  table->entries_owned = 1;
  table->entries = nentries;
  table->nslots = size;
}
void
ht_forall (hash_table *table, ht_cb cb, const void *v)
{
  hashnode *p, *limit;
  p = table->entries;
  limit = p + table->nslots;
  do
    if (*p)
      {
 if ((*cb) (table->pfile, *p, v) == 0)
   break;
      }
  while (++p < limit);
}
void
ht_load (hash_table *ht, hashnode *entries,
  unsigned int nslots, unsigned int nelements,
  unsigned char own)
{
  if (ht->entries_owned)
    free (ht->entries);
  ht->entries = entries;
  ht->nslots = nslots;
  ht->nelements = nelements;
  ht->entries_owned = own;
}
void
ht_dump_statistics (hash_table *table)
{
  size_t nelts, nids, overhead, headers;
  size_t total_bytes, longest, sum_of_squares;
  double exp_len, exp_len2, exp2_len;
  hashnode *p, *limit;
  total_bytes = longest = sum_of_squares = nids = 0;
  p = table->entries;
  limit = p + table->nslots;
  do
    if (*p)
      {
 size_t n = ((*p)->len);
 total_bytes += n;
 sum_of_squares += n * n;
 if (n > longest)
   longest = n;
 nids++;
      }
  while (++p < limit);
  nelts = table->nelements;
  overhead = _obstack_memory_used (&table->stack) - total_bytes;
  headers = table->nslots * sizeof (hashnode);
  fprintf (stderr, "\nString pool\nentries\t\t%lu\n",
    (unsigned long) nelts);
  fprintf (stderr, "identifiers\t%lu (%.2f%%)\n",
    (unsigned long) nids, nids * 100.0 / nelts);
  fprintf (stderr, "slots\t\t%lu\n",
    (unsigned long) table->nslots);
  fprintf (stderr, "bytes\t\t%lu%c (%lu%c overhead)\n",
    ((unsigned long) ((total_bytes) < 1024*10 ? (total_bytes) : ((total_bytes) < 1024*1024*10 ? (total_bytes) / 1024 : (total_bytes) / (1024*1024)))), ((total_bytes) < 1024*10 ? ' ' : ((total_bytes) < 1024*1024*10 ? 'k' : 'M')),
    ((unsigned long) ((overhead) < 1024*10 ? (overhead) : ((overhead) < 1024*1024*10 ? (overhead) / 1024 : (overhead) / (1024*1024)))), ((overhead) < 1024*10 ? ' ' : ((overhead) < 1024*1024*10 ? 'k' : 'M')));
  fprintf (stderr, "table size\t%lu%c\n",
    ((unsigned long) ((headers) < 1024*10 ? (headers) : ((headers) < 1024*1024*10 ? (headers) / 1024 : (headers) / (1024*1024)))), ((headers) < 1024*10 ? ' ' : ((headers) < 1024*1024*10 ? 'k' : 'M')));
  exp_len = (double)total_bytes / (double)nelts;
  exp2_len = exp_len * exp_len;
  exp_len2 = (double) sum_of_squares / (double) nelts;
  fprintf (stderr, "coll/search\t%.4f\n",
    (double) table->collisions / (double) table->searches);
  fprintf (stderr, "ins/search\t%.4f\n",
    (double) nelts / (double) table->searches);
  fprintf (stderr, "avg. entry\t%.2f bytes (+/- %.2f)\n",
    exp_len, approx_sqrt (exp_len2 - exp2_len));
  fprintf (stderr, "longest entry\t%lu\n",
    (unsigned long) longest);
}
static double
approx_sqrt (double x)
{
  double s, d;
  if (x < 0)
    abort ();
  if (x == 0)
    return 0;
  s = x;
  do
    {
      d = (s * s - x) / (2 * s);
      s -= d;
    }
  while (d > .0001);
  return s;
}
struct block
{
  unsigned int text_len;
  unsigned short arg_index;
  uchar text[1];
};
struct fun_macro
{
  _cpp_buff *buff;
  size_t *args;
  cpp_hashnode *node;
  size_t offset;
  unsigned int line;
  unsigned int argc;
};
enum ls {ls_none = 0,
  ls_fun_open,
  ls_fun_close,
  ls_defined,
  ls_defined_close,
  ls_hash,
  ls_predicate,
  ls_answer};
static const uchar *skip_whitespace_trad (cpp_reader *, const uchar *, int);
static cpp_hashnode *lex_identifier_trad (cpp_reader *, const uchar *);
static const uchar *copy_comment (cpp_reader *, const uchar *, int);
static void check_output_buffer (cpp_reader *, size_t);
static void push_replacement_text (cpp_reader *, cpp_hashnode *);
static unsigned char scan_parameters (cpp_reader *, cpp_macro *);
static unsigned char recursive_macro (cpp_reader *, cpp_hashnode *);
static void save_replacement_text (cpp_reader *, cpp_macro *, unsigned int);
static void maybe_start_funlike (cpp_reader *, cpp_hashnode *, const uchar *,
     struct fun_macro *);
static void save_argument (struct fun_macro *, size_t);
static void replace_args_and_push (cpp_reader *, struct fun_macro *);
static size_t canonicalize_text (uchar *, const uchar *, size_t, uchar *);
static void
check_output_buffer (cpp_reader *pfile, size_t n)
{
  n += 2 + 1;
  if (n > (size_t) (pfile->out.limit - pfile->out.cur))
    {
      size_t size = pfile->out.cur - pfile->out.base;
      size_t new_size = (size + n) * 3 / 2;
      pfile->out.base = xrealloc (pfile->out.base, new_size);
      pfile->out.limit = pfile->out.base + new_size;
      pfile->out.cur = pfile->out.base + size;
    }
}
static void
skip_macro_block_comment (cpp_reader *pfile)
{
  const uchar *cur = pfile->buffer->cur;
  cur++;
  if (*cur == '/')
    cur++;
  while(! (*cur++ == '/' && cur[-2] == '*') )
    ;
  pfile->buffer->cur = cur;
}
static const uchar *
copy_comment (cpp_reader *pfile, const uchar *cur, int in_define)
{
  unsigned char unterminated, copy = 0;
  source_location src_loc = pfile->line_table->highest_line;
  cpp_buffer *buffer = pfile->buffer;
  buffer->cur = cur;
  if (pfile->context->prev)
    unterminated = 0, skip_macro_block_comment (pfile);
  else
    unterminated = _cpp_skip_block_comment (pfile);
  if (unterminated)
    cpp_error_with_line (pfile, 0x03, src_loc, 0,
    "unterminated comment");
  if (pfile->state.in_directive)
    {
      if (in_define)
 {
   if (((pfile)->opts.discard_comments_in_macro_exp))
     pfile->out.cur--;
   else
     copy = 1;
 }
      else
 pfile->out.cur[-1] = ' ';
    }
  else if (((pfile)->opts.discard_comments))
    pfile->out.cur--;
  else
    copy = 1;
  if (copy)
    {
      size_t len = (size_t) (buffer->cur - cur);
      memcpy (pfile->out.cur, cur, len);
      pfile->out.cur += len;
      if (unterminated)
 {
   *pfile->out.cur++ = '*';
   *pfile->out.cur++ = '/';
 }
    }
  return buffer->cur;
}
static const uchar *
skip_whitespace_trad (cpp_reader *pfile, const uchar *cur, int skip_comments)
{
  uchar *out = pfile->out.cur;
  for (;;)
    {
      unsigned int c = *cur++;
      *out++ = c;
      if ((_sch_istable[(c) & 0xff] & (unsigned short)(_sch_isnvsp)))
 continue;
      if (c == '/' && *cur == '*' && skip_comments)
 {
   pfile->out.cur = out;
   cur = copy_comment (pfile, cur, 0 );
   out = pfile->out.cur;
   continue;
 }
      out--;
      break;
    }
  pfile->out.cur = out;
  return cur - 1;
}
static cpp_hashnode *
lex_identifier_trad (cpp_reader *pfile, const uchar *cur)
{
  size_t len;
  uchar *out = pfile->out.cur;
  cpp_hashnode *result;
  do
    *out++ = *cur++;
  while ((_sch_istable[(*cur) & 0xff] & (unsigned short)(_sch_isidnum)));
  ((pfile->context)->u.trad.cur) = cur;
  len = out - pfile->out.cur;
  result = (cpp_hashnode *) ht_lookup (pfile->hash_table1, pfile->out.cur,
           len, HT_ALLOC);
  pfile->out.cur = out;
  return result;
}
void
_cpp_overlay_buffer (cpp_reader *pfile, const uchar *start, size_t len)
{
  cpp_buffer *buffer = pfile->buffer;
  pfile->overlaid_buffer = buffer;
  pfile->saved_cur = buffer->cur;
  pfile->saved_rlimit = buffer->rlimit;
  pfile->saved_line_base = buffer->next_line;
  buffer->need_line = 0;
  buffer->cur = start;
  buffer->line_base = start;
  buffer->rlimit = start + len;
}
void
_cpp_remove_overlay (cpp_reader *pfile)
{
  cpp_buffer *buffer = pfile->overlaid_buffer;
  buffer->cur = pfile->saved_cur;
  buffer->rlimit = pfile->saved_rlimit;
  buffer->line_base = pfile->saved_line_base;
  buffer->need_line = 1;
  pfile->overlaid_buffer = ((void *)0);
}
unsigned char
_cpp_read_logical_line_trad (cpp_reader *pfile)
{
  do
    {
      if (pfile->buffer->need_line && !_cpp_get_fresh_line (pfile))
 return 0;
    }
  while (!_cpp_scan_out_logical_line (pfile, ((void *)0)) || pfile->state.skipping);
  return pfile->buffer != ((void *)0);
}
static void
maybe_start_funlike (cpp_reader *pfile, cpp_hashnode *node, const uchar *start, struct fun_macro *macro)
{
  unsigned int n = node->value.macro->paramc + 1;
  if (macro->buff)
    _cpp_release_buff (pfile, macro->buff);
  macro->buff = _cpp_get_buff (pfile, n * sizeof (size_t));
  macro->args = (size_t *) ((macro->buff)->cur);
  macro->node = node;
  macro->offset = start - pfile->out.base;
  macro->argc = 0;
}
static void
save_argument (struct fun_macro *macro, size_t offset)
{
  macro->argc++;
  if (macro->argc <= macro->node->value.macro->paramc)
    macro->args[macro->argc] = offset;
}
unsigned char
_cpp_scan_out_logical_line (cpp_reader *pfile, cpp_macro *macro)
{
  unsigned char result = 1;
  cpp_context *context;
  const uchar *cur;
  uchar *out;
  struct fun_macro fmacro;
  unsigned int c, paren_depth = 0, quote;
  enum ls lex_state = ls_none;
  unsigned char header_ok;
  const uchar *start_of_input_line;
  fmacro.buff = ((void *)0);
  quote = 0;
  header_ok = pfile->state.angled_headers;
  ((pfile->context)->u.trad.cur) = pfile->buffer->cur;
  ((pfile->context)->u.trad.rlimit) = pfile->buffer->rlimit;
  pfile->out.cur = pfile->out.base;
  pfile->out.first_line = pfile->line_table->highest_line;
  start_of_input_line = pfile->buffer->cur;
 new_context:
  context = pfile->context;
  cur = ((context)->u.trad.cur);
  check_output_buffer (pfile, ((context)->u.trad.rlimit) - cur);
  out = pfile->out.cur;
  for (;;)
    {
      if (!context->prev
   && cur >= pfile->buffer->notes[pfile->buffer->cur_note].pos)
 {
   pfile->buffer->cur = cur;
   _cpp_process_line_notes (pfile, 0);
 }
      c = *cur++;
      *out++ = c;
      switch (c)
 {
 case ' ':
 case '\t':
 case '\f':
 case '\v':
 case '\0':
   continue;
 case '\n':
   if (context->prev)
     {
       pfile->out.cur = out - 1;
       _cpp_pop_context (pfile);
       goto new_context;
     }
   pfile->out.cur = out - 1;
   pfile->buffer->cur = cur;
   pfile->buffer->need_line = 1;
   do { const struct line_maps *line_table = pfile->line_table; const struct line_map *map = &line_table->maps[line_table->used-1]; unsigned int line = ((((line_table->highest_line) - (map)->start_location) >> (map)->column_bits) + (map)->to_line); linemap_line_start (pfile->line_table, line + 1, 0); } while (0);
   if ((lex_state == ls_fun_open || lex_state == ls_fun_close)
       && !pfile->state.in_directive
       && _cpp_get_fresh_line (pfile))
     {
       if (lex_state == ls_fun_close)
  out[-1] = ' ';
       cur = pfile->buffer->cur;
       continue;
     }
   goto done;
 case '<':
   if (header_ok)
     quote = '>';
   break;
 case '>':
   if (c == quote)
     quote = 0;
   break;
 case '"':
 case '\'':
   if (c == quote)
     quote = 0;
   else if (!quote)
     quote = c;
   break;
 case '\\':
   if (*cur == '\\' || *cur == '"' || *cur == '\'')
     *out++ = *cur++;
   break;
 case '/':
   if (!quote && *cur == '*')
     {
       pfile->out.cur = out;
       cur = copy_comment (pfile, cur, macro != 0);
       out = pfile->out.cur;
       continue;
     }
   break;
 case '_':
 case 'a': case 'b': case 'c': case 'd': case 'e': case 'f':
 case 'g': case 'h': case 'i': case 'j': case 'k': case 'l':
 case 'm': case 'n': case 'o': case 'p': case 'q': case 'r':
 case 's': case 't': case 'u': case 'v': case 'w': case 'x':
 case 'y': case 'z':
 case 'A': case 'B': case 'C': case 'D': case 'E': case 'F':
 case 'G': case 'H': case 'I': case 'J': case 'K': case 'L':
 case 'M': case 'N': case 'O': case 'P': case 'Q': case 'R':
 case 'S': case 'T': case 'U': case 'V': case 'W': case 'X':
 case 'Y': case 'Z':
   if (!pfile->state.skipping && (quote == 0 || macro))
     {
       cpp_hashnode *node;
       uchar *out_start = out - 1;
       pfile->out.cur = out_start;
       node = lex_identifier_trad (pfile, cur - 1);
       out = pfile->out.cur;
       cur = ((context)->u.trad.cur);
       if (node->type == NT_MACRO
    && (lex_state == ls_none || lex_state == ls_fun_open)
    && !pfile->state.prevent_expansion)
  {
    pfile->mi_valid = 0;
    if (! (node->flags & (1 << 2))
        && node->value.macro->fun_like)
      {
        maybe_start_funlike (pfile, node, out_start, &fmacro);
        lex_state = ls_fun_open;
        fmacro.line = pfile->line_table->highest_line;
        continue;
      }
    else if (!recursive_macro (pfile, node))
      {
        pfile->out.cur = out_start;
        push_replacement_text (pfile, node);
        lex_state = ls_none;
        goto new_context;
      }
  }
       else if (macro && (node->flags & (1 << 6)) != 0)
  {
    pfile->out.cur = out_start;
    save_replacement_text (pfile, macro, node->value.arg_index);
    out = pfile->out.base;
  }
       else if (lex_state == ls_hash)
  {
    lex_state = ls_predicate;
    continue;
  }
       else if (pfile->state.in_expression
         && node == pfile->spec_nodes.n_defined)
  {
    lex_state = ls_defined;
    continue;
  }
     }
   break;
 case '(':
   if (quote == 0)
     {
       paren_depth++;
       if (lex_state == ls_fun_open)
  {
    if (recursive_macro (pfile, fmacro.node))
      lex_state = ls_none;
    else
      {
        lex_state = ls_fun_close;
        paren_depth = 1;
        out = pfile->out.base + fmacro.offset;
        fmacro.args[0] = fmacro.offset;
      }
  }
       else if (lex_state == ls_predicate)
  lex_state = ls_answer;
       else if (lex_state == ls_defined)
  lex_state = ls_defined_close;
     }
   break;
 case ',':
   if (quote == 0 && lex_state == ls_fun_close && paren_depth == 1)
     save_argument (&fmacro, out - pfile->out.base);
   break;
 case ')':
   if (quote == 0)
     {
       paren_depth--;
       if (lex_state == ls_fun_close && paren_depth == 0)
  {
    cpp_macro *m = fmacro.node->value.macro;
    m->used = 1;
    lex_state = ls_none;
    save_argument (&fmacro, out - pfile->out.base);
    if (fmacro.argc == 1
        && m->paramc == 0
        && out == pfile->out.base + fmacro.offset + 1)
      fmacro.argc = 0;
    if (_cpp_arguments_ok (pfile, m, fmacro.node, fmacro.argc))
      {
        pfile->out.cur = (pfile->out.base
          + fmacro.offset);
        ((context)->u.trad.cur) = cur;
        replace_args_and_push (pfile, &fmacro);
        goto new_context;
      }
  }
       else if (lex_state == ls_answer || lex_state == ls_defined_close)
  lex_state = ls_none;
     }
   break;
 case '#':
   if (cur - 1 == start_of_input_line
       && !pfile->context->prev
       && !pfile->state.in_directive)
     {
       pfile->out.cur = out;
       cur = skip_whitespace_trad (pfile, cur, 1 );
       out = pfile->out.cur;
       if (*cur == '\n')
  {
    pfile->buffer->need_line = 1;
    do { const struct line_maps *line_table = pfile->line_table; const struct line_map *map = &line_table->maps[line_table->used-1]; unsigned int line = ((((line_table->highest_line) - (map)->start_location) >> (map)->column_bits) + (map)->to_line); linemap_line_start (pfile->line_table, line + 1, 0); } while (0);
    result = 0;
    goto done;
  }
       else
  {
    unsigned char do_it = 0;
    if ((_sch_istable[(*cur) & 0xff] & (unsigned short)(_sch_isdigit))
        && ((pfile)->opts.lang) != CLK_ASM)
      do_it = 1;
    else if (((_sch_istable[(*cur) & 0xff] & (unsigned short)(_sch_isidst)) || ((*cur) == '$' && ((pfile)->opts.dollars_in_ident))))
      do_it = lex_identifier_trad (pfile, cur)->is_directive;
    if (do_it || ((pfile)->opts.lang) != CLK_ASM)
      {
        pfile->buffer->cur = cur;
        _cpp_handle_directive (pfile, 0 );
        result = 0;
        goto done;
      }
  }
     }
   if (pfile->state.in_expression)
     {
       lex_state = ls_hash;
       continue;
     }
   break;
 default:
   break;
 }
      header_ok = 0;
      if (!pfile->state.in_directive)
 pfile->mi_valid = 0;
      if (lex_state == ls_none)
 continue;
      if (lex_state == ls_fun_open)
 lex_state = ls_none;
      else if (lex_state == ls_hash
        || lex_state == ls_predicate
        || lex_state == ls_defined)
 lex_state = ls_none;
    }
 done:
  if (fmacro.buff)
    _cpp_release_buff (pfile, fmacro.buff);
  if (lex_state == ls_fun_close)
    cpp_error_with_line (pfile, 0x03, fmacro.line, 0,
    "unterminated argument list invoking macro \"%s\"",
    ((&(fmacro.node)->ident)->str));
  return result;
}
static void
push_replacement_text (cpp_reader *pfile, cpp_hashnode *node)
{
  size_t len;
  const uchar *text;
  uchar *buf;
  if (node->flags & (1 << 2))
    {
      text = _cpp_builtin_macro_text (pfile, node);
      len = ustrlen (text);
      buf = _cpp_unaligned_alloc (pfile, len + 1);
      memcpy (buf, text, len);
      buf[len]='\n';
      text = buf;
    }
  else
    {
      cpp_macro *macro = node->value.macro;
      macro->used = 1;
      text = macro->exp.text;
      macro->traditional = 1;
      len = macro->count;
    }
  _cpp_push_text_context (pfile, node, text, len);
}
static unsigned char
recursive_macro (cpp_reader *pfile, cpp_hashnode *node)
{
  unsigned char recursing = !!(node->flags & (1 << 5));
  if (recursing && node->value.macro->fun_like)
    {
      size_t depth = 0;
      cpp_context *context = pfile->context;
      do
 {
   depth++;
   if (context->macro == node && depth > 20)
     break;
   context = context->prev;
 }
      while (context);
      recursing = context != ((void *)0);
    }
  if (recursing)
    cpp_error (pfile, 0x03,
        "detected recursion whilst expanding macro \"%s\"",
        ((&(node)->ident)->str));
  return recursing;
}
size_t
_cpp_replacement_text_len (const cpp_macro *macro)
{
  size_t len;
  if (macro->fun_like && (macro->paramc != 0))
    {
      const uchar *exp;
      len = 0;
      for (exp = macro->exp.text;;)
 {
   struct block *b = (struct block *) exp;
   len += b->text_len;
   if (b->arg_index == 0)
     break;
   len += ((&(macro->params[b->arg_index - 1])->ident)->len);
   exp += (((__builtin_offsetof (block, text) + (b->text_len)) + ((__builtin_offsetof (dummy, u)) - 1)) & ~((__builtin_offsetof (dummy, u)) - 1));
 }
    }
  else
    len = macro->count;
  return len;
}
uchar *
_cpp_copy_replacement_text (const cpp_macro *macro, uchar *dest)
{
  if (macro->fun_like && (macro->paramc != 0))
    {
      const uchar *exp;
      for (exp = macro->exp.text;;)
 {
   struct block *b = (struct block *) exp;
   cpp_hashnode *param;
   memcpy (dest, b->text, b->text_len);
   dest += b->text_len;
   if (b->arg_index == 0)
     break;
   param = macro->params[b->arg_index - 1];
   memcpy (dest, ((&(param)->ident)->str), ((&(param)->ident)->len));
   dest += ((&(param)->ident)->len);
   exp += (((__builtin_offsetof (block, text) + (b->text_len)) + ((__builtin_offsetof (dummy, u)) - 1)) & ~((__builtin_offsetof (dummy, u)) - 1));
 }
    }
  else
    {
      memcpy (dest, macro->exp.text, macro->count);
      dest += macro->count;
    }
  return dest;
}
static void
replace_args_and_push (cpp_reader *pfile, struct fun_macro *fmacro)
{
  cpp_macro *macro = fmacro->node->value.macro;
  if (macro->paramc == 0)
    push_replacement_text (pfile, fmacro->node);
  else
    {
      const uchar *exp;
      uchar *p;
      _cpp_buff *buff;
      size_t len = 0;
      for (exp = macro->exp.text;;)
 {
   struct block *b = (struct block *) exp;
   len += b->text_len;
   if (b->arg_index == 0)
     break;
   len += (fmacro->args[b->arg_index]
    - fmacro->args[b->arg_index - 1] - 1);
   exp += (((__builtin_offsetof (block, text) + (b->text_len)) + ((__builtin_offsetof (dummy, u)) - 1)) & ~((__builtin_offsetof (dummy, u)) - 1));
 }
      buff = _cpp_get_buff (pfile, len + 1);
      p = ((buff)->cur);
      for (exp = macro->exp.text;;)
 {
   struct block *b = (struct block *) exp;
   size_t arglen;
   memcpy (p, b->text, b->text_len);
   p += b->text_len;
   if (b->arg_index == 0)
     break;
   arglen = (fmacro->args[b->arg_index]
      - fmacro->args[b->arg_index - 1] - 1);
   memcpy (p, pfile->out.base + fmacro->args[b->arg_index - 1],
    arglen);
   p += arglen;
   exp += (((__builtin_offsetof (block, text) + (b->text_len)) + ((__builtin_offsetof (dummy, u)) - 1)) & ~((__builtin_offsetof (dummy, u)) - 1));
 }
      *p = '\n';
      _cpp_push_text_context (pfile, fmacro->node, ((buff)->cur), len);
      pfile->context->buff = buff;
    }
}
static unsigned char
scan_parameters (cpp_reader *pfile, cpp_macro *macro)
{
  const uchar *cur = ((pfile->context)->u.trad.cur) + 1;
  unsigned char ok;
  for (;;)
    {
      cur = skip_whitespace_trad (pfile, cur, 1 );
      if (((_sch_istable[(*cur) & 0xff] & (unsigned short)(_sch_isidst)) || ((*cur) == '$' && ((pfile)->opts.dollars_in_ident))))
 {
   ok = 0;
   if (_cpp_save_parameter (pfile, macro, lex_identifier_trad (pfile, cur)))
     break;
   cur = skip_whitespace_trad (pfile, ((pfile->context)->u.trad.cur),
     1 );
   if (*cur == ',')
     {
       cur++;
       continue;
     }
   ok = (*cur == ')');
   break;
 }
      ok = (*cur == ')' && macro->paramc == 0);
      break;
    }
  if (!ok)
    cpp_error (pfile, 0x03, "syntax error in macro parameter list");
  ((pfile->context)->u.trad.cur) = cur + (*cur == ')');
  return ok;
}
static void
save_replacement_text (cpp_reader *pfile, cpp_macro *macro,
         unsigned int arg_index)
{
  size_t len = pfile->out.cur - pfile->out.base;
  uchar *exp;
  if (macro->paramc == 0)
    {
      exp = _cpp_unaligned_alloc (pfile, len + 1);
      memcpy (exp, pfile->out.base, len);
      exp[len] = '\n';
      macro->exp.text = exp;
      macro->traditional = 1;
      macro->count = len;
    }
  else
    {
      size_t blen = (((__builtin_offsetof (block, text) + (len)) + ((__builtin_offsetof (dummy, u)) - 1)) & ~((__builtin_offsetof (dummy, u)) - 1));
      struct block *block;
      if (macro->count + blen > (size_t) ((pfile->a_buff)->limit - (pfile->a_buff)->cur))
 _cpp_extend_buff (pfile, &pfile->a_buff, macro->count + blen);
      exp = ((pfile->a_buff)->cur);
      block = (struct block *) (exp + macro->count);
      macro->exp.text = exp;
      macro->traditional = 1;
      block->text_len = len;
      block->arg_index = arg_index;
      memcpy (block->text, pfile->out.base, len);
      pfile->out.cur = pfile->out.base;
      macro->count += blen;
      if (arg_index == 0)
 ((pfile->a_buff)->cur) += macro->count;
    }
}
unsigned char
_cpp_create_trad_definition (cpp_reader *pfile, cpp_macro *macro)
{
  const uchar *cur;
  uchar *limit;
  cpp_context *context = pfile->context;
  pfile->out.cur = pfile->out.base;
  ((context)->u.trad.cur) = pfile->buffer->cur;
  ((context)->u.trad.rlimit) = pfile->buffer->rlimit;
  check_output_buffer (pfile, ((context)->u.trad.rlimit) - ((context)->u.trad.cur));
  if (* ((context)->u.trad.cur) == '(')
    {
      unsigned char ok = scan_parameters (pfile, macro);
      macro->params = (cpp_hashnode **) ((pfile->a_buff)->cur);
      if (!ok)
 macro = ((void *)0);
      else
 {
   ((pfile->a_buff)->cur) = (uchar *) &macro->params[macro->paramc];
   macro->fun_like = 1;
 }
    }
  pfile->buffer->cur
    = skip_whitespace_trad (pfile, ((context)->u.trad.cur),
         ((pfile)->opts.discard_comments_in_macro_exp));
  pfile->state.prevent_expansion++;
  _cpp_scan_out_logical_line (pfile, macro);
  pfile->state.prevent_expansion--;
  if (!macro)
    return 0;
  cur = pfile->out.base;
  limit = pfile->out.cur;
  while (limit > cur && (_sch_istable[(limit[-1]) & 0xff] & (unsigned short)(_sch_iscppsp)))
    limit--;
  pfile->out.cur = limit;
  save_replacement_text (pfile, macro, 0);
  return 1;
}
static size_t
canonicalize_text (uchar *dest, const uchar *src, size_t len, uchar *pquote)
{
  uchar *orig_dest = dest;
  uchar quote = *pquote;
  while (len)
    {
      if ((_sch_istable[(*src) & 0xff] & (unsigned short)(_sch_iscppsp)) && !quote)
 {
   do
     src++, len--;
   while (len && (_sch_istable[(*src) & 0xff] & (unsigned short)(_sch_iscppsp)));
   *dest++ = ' ';
 }
      else
 {
   if (*src == '\'' || *src == '"')
     {
       if (!quote)
  quote = *src;
       else if (quote == *src)
  quote = 0;
     }
   *dest++ = *src++, len--;
 }
    }
  *pquote = quote;
  return dest - orig_dest;
}
unsigned char
_cpp_expansions_different_trad (const cpp_macro *macro1,
    const cpp_macro *macro2)
{
  uchar *p1 = xmalloc (macro1->count + macro2->count);
  uchar *p2 = p1 + macro1->count;
  uchar quote1 = 0, quote2 = 0;
  unsigned char mismatch;
  size_t len1, len2;
  if (macro1->paramc > 0)
    {
      const uchar *exp1 = macro1->exp.text, *exp2 = macro2->exp.text;
      mismatch = 1;
      for (;;)
 {
   struct block *b1 = (struct block *) exp1;
   struct block *b2 = (struct block *) exp2;
   if (b1->arg_index != b2->arg_index)
     break;
   len1 = canonicalize_text (p1, b1->text, b1->text_len, &quote1);
   len2 = canonicalize_text (p2, b2->text, b2->text_len, &quote2);
   if (len1 != len2 || memcmp (p1, p2, len1))
     break;
   if (b1->arg_index == 0)
     {
       mismatch = 0;
       break;
     }
   exp1 += (((__builtin_offsetof (block, text) + (b1->text_len)) + ((__builtin_offsetof (dummy, u)) - 1)) & ~((__builtin_offsetof (dummy, u)) - 1));
   exp2 += (((__builtin_offsetof (block, text) + (b2->text_len)) + ((__builtin_offsetof (dummy, u)) - 1)) & ~((__builtin_offsetof (dummy, u)) - 1));
 }
    }
  else
    {
      len1 = canonicalize_text (p1, macro1->exp.text, macro1->count, &quote1);
      len2 = canonicalize_text (p2, macro2->exp.text, macro2->count, &quote2);
      mismatch = (len1 != len2 || memcmp (p1, p2, len1));
    }
  free (p1);
  return mismatch;
}
extern void warning (const char *, ...);
extern void error (const char *, ...);
extern void fatal (const char *, ...) ;
extern void internal_error (const char *, ...) ;
extern const char *trim_filename (const char *);
extern void fancy_abort (const char *, int, const char *)
    ;
extern int have_error;
extern const char *progname;
struct rtx_def;
typedef struct rtx_def *rtx;
struct rtvec_def;
typedef struct rtvec_def *rtvec;
union tree_node;
typedef union tree_node *tree;
struct cpp_reader;
struct processor_costs {
  const int add;
  const int lea;
  const int shift_var;
  const int shift_const;
  const int mult_init[5];
  const int mult_bit;
  const int divide[5];
  int movsx;
  int movzx;
  const int large_insn;
  const int move_ratio;
  const int movzbl_load;
  const int int_load[3];
  const int int_store[3];
  const int fp_move;
  const int fp_load[3];
  const int fp_store[3];
  const int mmx_move;
  const int mmx_load[2];
  const int mmx_store[2];
  const int sse_move;
  const int sse_load[3];
  const int sse_store[3];
  const int mmxsse_to_integer;
  const int prefetch_block;
  const int simultaneous_prefetches;
  const int branch_cost;
  const int fadd;
  const int fmul;
  const int fdiv;
  const int fabs;
  const int fchs;
  const int fsqrt;
};
extern const struct processor_costs *ix86_cost;
extern int target_flags;
extern const int x86_use_leave, x86_push_memory, x86_zero_extend_with_and;
extern const int x86_use_bit_test, x86_cmove, x86_deep_branch;
extern const int x86_branch_hints, x86_unroll_strlen;
extern const int x86_double_with_add, x86_partial_reg_stall, x86_movx;
extern const int x86_use_loop, x86_use_fiop, x86_use_mov0;
extern const int x86_use_cltd, x86_read_modify_write;
extern const int x86_read_modify, x86_split_long_moves;
extern const int x86_promote_QImode, x86_single_stringop, x86_fast_prefix;
extern const int x86_himode_math, x86_qimode_math, x86_promote_qi_regs;
extern const int x86_promote_hi_regs, x86_integer_DFmode_moves;
extern const int x86_add_esp_4, x86_add_esp_8, x86_sub_esp_4, x86_sub_esp_8;
extern const int x86_partial_reg_dependency, x86_memory_mismatch_stall;
extern const int x86_accumulate_outgoing_args, x86_prologue_using_move;
extern const int x86_epilogue_using_move, x86_decompose_lea;
extern const int x86_arch_always_fancy_math_387, x86_shift1;
extern const int x86_sse_partial_reg_dependency, x86_sse_partial_regs;
extern const int x86_sse_typeless_stores, x86_sse_load0_by_pxor;
extern const int x86_use_ffreep, x86_sse_partial_regs_for_cvtsd2ss;
extern const int x86_inter_unit_moves;
extern int x86_prefetch_sse;
enum reg_class
{
  NO_REGS,
  AREG, DREG, CREG, BREG, SIREG, DIREG,
  AD_REGS,
  Q_REGS,
  NON_Q_REGS,
  INDEX_REGS,
  LEGACY_REGS,
  GENERAL_REGS,
  FP_TOP_REG, FP_SECOND_REG,
  FLOAT_REGS,
  SSE_REGS,
  MMX_REGS,
  FP_TOP_SSE_REGS,
  FP_SECOND_SSE_REGS,
  FLOAT_SSE_REGS,
  FLOAT_INT_REGS,
  INT_SSE_REGS,
  FLOAT_INT_SSE_REGS,
  ALL_REGS, LIM_REG_CLASSES
};
typedef struct ix86_args {
  int words;
  int nregs;
  int regno;
  int fastcall;
  int sse_words;
  int sse_nregs;
  int warn_sse;
  int warn_mmx;
  int sse_regno;
  int mmx_words;
  int mmx_nregs;
  int mmx_regno;
  int maybe_vaarg;
} CUMULATIVE_ARGS;
enum ix86_builtins
{
  IX86_BUILTIN_ADDPS,
  IX86_BUILTIN_ADDSS,
  IX86_BUILTIN_DIVPS,
  IX86_BUILTIN_DIVSS,
  IX86_BUILTIN_MULPS,
  IX86_BUILTIN_MULSS,
  IX86_BUILTIN_SUBPS,
  IX86_BUILTIN_SUBSS,
  IX86_BUILTIN_CMPEQPS,
  IX86_BUILTIN_CMPLTPS,
  IX86_BUILTIN_CMPLEPS,
  IX86_BUILTIN_CMPGTPS,
  IX86_BUILTIN_CMPGEPS,
  IX86_BUILTIN_CMPNEQPS,
  IX86_BUILTIN_CMPNLTPS,
  IX86_BUILTIN_CMPNLEPS,
  IX86_BUILTIN_CMPNGTPS,
  IX86_BUILTIN_CMPNGEPS,
  IX86_BUILTIN_CMPORDPS,
  IX86_BUILTIN_CMPUNORDPS,
  IX86_BUILTIN_CMPNEPS,
  IX86_BUILTIN_CMPEQSS,
  IX86_BUILTIN_CMPLTSS,
  IX86_BUILTIN_CMPLESS,
  IX86_BUILTIN_CMPNEQSS,
  IX86_BUILTIN_CMPNLTSS,
  IX86_BUILTIN_CMPNLESS,
  IX86_BUILTIN_CMPORDSS,
  IX86_BUILTIN_CMPUNORDSS,
  IX86_BUILTIN_CMPNESS,
  IX86_BUILTIN_COMIEQSS,
  IX86_BUILTIN_COMILTSS,
  IX86_BUILTIN_COMILESS,
  IX86_BUILTIN_COMIGTSS,
  IX86_BUILTIN_COMIGESS,
  IX86_BUILTIN_COMINEQSS,
  IX86_BUILTIN_UCOMIEQSS,
  IX86_BUILTIN_UCOMILTSS,
  IX86_BUILTIN_UCOMILESS,
  IX86_BUILTIN_UCOMIGTSS,
  IX86_BUILTIN_UCOMIGESS,
  IX86_BUILTIN_UCOMINEQSS,
  IX86_BUILTIN_CVTPI2PS,
  IX86_BUILTIN_CVTPS2PI,
  IX86_BUILTIN_CVTSI2SS,
  IX86_BUILTIN_CVTSI642SS,
  IX86_BUILTIN_CVTSS2SI,
  IX86_BUILTIN_CVTSS2SI64,
  IX86_BUILTIN_CVTTPS2PI,
  IX86_BUILTIN_CVTTSS2SI,
  IX86_BUILTIN_CVTTSS2SI64,
  IX86_BUILTIN_MAXPS,
  IX86_BUILTIN_MAXSS,
  IX86_BUILTIN_MINPS,
  IX86_BUILTIN_MINSS,
  IX86_BUILTIN_LOADAPS,
  IX86_BUILTIN_LOADUPS,
  IX86_BUILTIN_STOREAPS,
  IX86_BUILTIN_STOREUPS,
  IX86_BUILTIN_LOADSS,
  IX86_BUILTIN_STORESS,
  IX86_BUILTIN_MOVSS,
  IX86_BUILTIN_MOVHLPS,
  IX86_BUILTIN_MOVLHPS,
  IX86_BUILTIN_LOADHPS,
  IX86_BUILTIN_LOADLPS,
  IX86_BUILTIN_STOREHPS,
  IX86_BUILTIN_STORELPS,
  IX86_BUILTIN_MASKMOVQ,
  IX86_BUILTIN_MOVMSKPS,
  IX86_BUILTIN_PMOVMSKB,
  IX86_BUILTIN_MOVNTPS,
  IX86_BUILTIN_MOVNTQ,
  IX86_BUILTIN_LOADDQA,
  IX86_BUILTIN_LOADDQU,
  IX86_BUILTIN_STOREDQA,
  IX86_BUILTIN_STOREDQU,
  IX86_BUILTIN_MOVQ,
  IX86_BUILTIN_LOADD,
  IX86_BUILTIN_STORED,
  IX86_BUILTIN_CLRTI,
  IX86_BUILTIN_PACKSSWB,
  IX86_BUILTIN_PACKSSDW,
  IX86_BUILTIN_PACKUSWB,
  IX86_BUILTIN_PADDB,
  IX86_BUILTIN_PADDW,
  IX86_BUILTIN_PADDD,
  IX86_BUILTIN_PADDQ,
  IX86_BUILTIN_PADDSB,
  IX86_BUILTIN_PADDSW,
  IX86_BUILTIN_PADDUSB,
  IX86_BUILTIN_PADDUSW,
  IX86_BUILTIN_PSUBB,
  IX86_BUILTIN_PSUBW,
  IX86_BUILTIN_PSUBD,
  IX86_BUILTIN_PSUBQ,
  IX86_BUILTIN_PSUBSB,
  IX86_BUILTIN_PSUBSW,
  IX86_BUILTIN_PSUBUSB,
  IX86_BUILTIN_PSUBUSW,
  IX86_BUILTIN_PAND,
  IX86_BUILTIN_PANDN,
  IX86_BUILTIN_POR,
  IX86_BUILTIN_PXOR,
  IX86_BUILTIN_PAVGB,
  IX86_BUILTIN_PAVGW,
  IX86_BUILTIN_PCMPEQB,
  IX86_BUILTIN_PCMPEQW,
  IX86_BUILTIN_PCMPEQD,
  IX86_BUILTIN_PCMPGTB,
  IX86_BUILTIN_PCMPGTW,
  IX86_BUILTIN_PCMPGTD,
  IX86_BUILTIN_PEXTRW,
  IX86_BUILTIN_PINSRW,
  IX86_BUILTIN_PMADDWD,
  IX86_BUILTIN_PMAXSW,
  IX86_BUILTIN_PMAXUB,
  IX86_BUILTIN_PMINSW,
  IX86_BUILTIN_PMINUB,
  IX86_BUILTIN_PMULHUW,
  IX86_BUILTIN_PMULHW,
  IX86_BUILTIN_PMULLW,
  IX86_BUILTIN_PSADBW,
  IX86_BUILTIN_PSHUFW,
  IX86_BUILTIN_PSLLW,
  IX86_BUILTIN_PSLLD,
  IX86_BUILTIN_PSLLQ,
  IX86_BUILTIN_PSRAW,
  IX86_BUILTIN_PSRAD,
  IX86_BUILTIN_PSRLW,
  IX86_BUILTIN_PSRLD,
  IX86_BUILTIN_PSRLQ,
  IX86_BUILTIN_PSLLWI,
  IX86_BUILTIN_PSLLDI,
  IX86_BUILTIN_PSLLQI,
  IX86_BUILTIN_PSRAWI,
  IX86_BUILTIN_PSRADI,
  IX86_BUILTIN_PSRLWI,
  IX86_BUILTIN_PSRLDI,
  IX86_BUILTIN_PSRLQI,
  IX86_BUILTIN_PUNPCKHBW,
  IX86_BUILTIN_PUNPCKHWD,
  IX86_BUILTIN_PUNPCKHDQ,
  IX86_BUILTIN_PUNPCKLBW,
  IX86_BUILTIN_PUNPCKLWD,
  IX86_BUILTIN_PUNPCKLDQ,
  IX86_BUILTIN_SHUFPS,
  IX86_BUILTIN_RCPPS,
  IX86_BUILTIN_RCPSS,
  IX86_BUILTIN_RSQRTPS,
  IX86_BUILTIN_RSQRTSS,
  IX86_BUILTIN_SQRTPS,
  IX86_BUILTIN_SQRTSS,
  IX86_BUILTIN_UNPCKHPS,
  IX86_BUILTIN_UNPCKLPS,
  IX86_BUILTIN_ANDPS,
  IX86_BUILTIN_ANDNPS,
  IX86_BUILTIN_ORPS,
  IX86_BUILTIN_XORPS,
  IX86_BUILTIN_EMMS,
  IX86_BUILTIN_LDMXCSR,
  IX86_BUILTIN_STMXCSR,
  IX86_BUILTIN_SFENCE,
  IX86_BUILTIN_FEMMS,
  IX86_BUILTIN_PAVGUSB,
  IX86_BUILTIN_PF2ID,
  IX86_BUILTIN_PFACC,
  IX86_BUILTIN_PFADD,
  IX86_BUILTIN_PFCMPEQ,
  IX86_BUILTIN_PFCMPGE,
  IX86_BUILTIN_PFCMPGT,
  IX86_BUILTIN_PFMAX,
  IX86_BUILTIN_PFMIN,
  IX86_BUILTIN_PFMUL,
  IX86_BUILTIN_PFRCP,
  IX86_BUILTIN_PFRCPIT1,
  IX86_BUILTIN_PFRCPIT2,
  IX86_BUILTIN_PFRSQIT1,
  IX86_BUILTIN_PFRSQRT,
  IX86_BUILTIN_PFSUB,
  IX86_BUILTIN_PFSUBR,
  IX86_BUILTIN_PI2FD,
  IX86_BUILTIN_PMULHRW,
  IX86_BUILTIN_PF2IW,
  IX86_BUILTIN_PFNACC,
  IX86_BUILTIN_PFPNACC,
  IX86_BUILTIN_PI2FW,
  IX86_BUILTIN_PSWAPDSI,
  IX86_BUILTIN_PSWAPDSF,
  IX86_BUILTIN_SSE_ZERO,
  IX86_BUILTIN_MMX_ZERO,
  IX86_BUILTIN_ADDPD,
  IX86_BUILTIN_ADDSD,
  IX86_BUILTIN_DIVPD,
  IX86_BUILTIN_DIVSD,
  IX86_BUILTIN_MULPD,
  IX86_BUILTIN_MULSD,
  IX86_BUILTIN_SUBPD,
  IX86_BUILTIN_SUBSD,
  IX86_BUILTIN_CMPEQPD,
  IX86_BUILTIN_CMPLTPD,
  IX86_BUILTIN_CMPLEPD,
  IX86_BUILTIN_CMPGTPD,
  IX86_BUILTIN_CMPGEPD,
  IX86_BUILTIN_CMPNEQPD,
  IX86_BUILTIN_CMPNLTPD,
  IX86_BUILTIN_CMPNLEPD,
  IX86_BUILTIN_CMPNGTPD,
  IX86_BUILTIN_CMPNGEPD,
  IX86_BUILTIN_CMPORDPD,
  IX86_BUILTIN_CMPUNORDPD,
  IX86_BUILTIN_CMPNEPD,
  IX86_BUILTIN_CMPEQSD,
  IX86_BUILTIN_CMPLTSD,
  IX86_BUILTIN_CMPLESD,
  IX86_BUILTIN_CMPNEQSD,
  IX86_BUILTIN_CMPNLTSD,
  IX86_BUILTIN_CMPNLESD,
  IX86_BUILTIN_CMPORDSD,
  IX86_BUILTIN_CMPUNORDSD,
  IX86_BUILTIN_CMPNESD,
  IX86_BUILTIN_COMIEQSD,
  IX86_BUILTIN_COMILTSD,
  IX86_BUILTIN_COMILESD,
  IX86_BUILTIN_COMIGTSD,
  IX86_BUILTIN_COMIGESD,
  IX86_BUILTIN_COMINEQSD,
  IX86_BUILTIN_UCOMIEQSD,
  IX86_BUILTIN_UCOMILTSD,
  IX86_BUILTIN_UCOMILESD,
  IX86_BUILTIN_UCOMIGTSD,
  IX86_BUILTIN_UCOMIGESD,
  IX86_BUILTIN_UCOMINEQSD,
  IX86_BUILTIN_MAXPD,
  IX86_BUILTIN_MAXSD,
  IX86_BUILTIN_MINPD,
  IX86_BUILTIN_MINSD,
  IX86_BUILTIN_ANDPD,
  IX86_BUILTIN_ANDNPD,
  IX86_BUILTIN_ORPD,
  IX86_BUILTIN_XORPD,
  IX86_BUILTIN_SQRTPD,
  IX86_BUILTIN_SQRTSD,
  IX86_BUILTIN_UNPCKHPD,
  IX86_BUILTIN_UNPCKLPD,
  IX86_BUILTIN_SHUFPD,
  IX86_BUILTIN_LOADAPD,
  IX86_BUILTIN_LOADUPD,
  IX86_BUILTIN_STOREAPD,
  IX86_BUILTIN_STOREUPD,
  IX86_BUILTIN_LOADSD,
  IX86_BUILTIN_STORESD,
  IX86_BUILTIN_MOVSD,
  IX86_BUILTIN_LOADHPD,
  IX86_BUILTIN_LOADLPD,
  IX86_BUILTIN_STOREHPD,
  IX86_BUILTIN_STORELPD,
  IX86_BUILTIN_CVTDQ2PD,
  IX86_BUILTIN_CVTDQ2PS,
  IX86_BUILTIN_CVTPD2DQ,
  IX86_BUILTIN_CVTPD2PI,
  IX86_BUILTIN_CVTPD2PS,
  IX86_BUILTIN_CVTTPD2DQ,
  IX86_BUILTIN_CVTTPD2PI,
  IX86_BUILTIN_CVTPI2PD,
  IX86_BUILTIN_CVTSI2SD,
  IX86_BUILTIN_CVTSI642SD,
  IX86_BUILTIN_CVTSD2SI,
  IX86_BUILTIN_CVTSD2SI64,
  IX86_BUILTIN_CVTSD2SS,
  IX86_BUILTIN_CVTSS2SD,
  IX86_BUILTIN_CVTTSD2SI,
  IX86_BUILTIN_CVTTSD2SI64,
  IX86_BUILTIN_CVTPS2DQ,
  IX86_BUILTIN_CVTPS2PD,
  IX86_BUILTIN_CVTTPS2DQ,
  IX86_BUILTIN_MOVNTI,
  IX86_BUILTIN_MOVNTPD,
  IX86_BUILTIN_MOVNTDQ,
  IX86_BUILTIN_SETPD1,
  IX86_BUILTIN_SETPD,
  IX86_BUILTIN_CLRPD,
  IX86_BUILTIN_SETRPD,
  IX86_BUILTIN_LOADPD1,
  IX86_BUILTIN_LOADRPD,
  IX86_BUILTIN_STOREPD1,
  IX86_BUILTIN_STORERPD,
  IX86_BUILTIN_MASKMOVDQU,
  IX86_BUILTIN_MOVMSKPD,
  IX86_BUILTIN_PMOVMSKB128,
  IX86_BUILTIN_MOVQ2DQ,
  IX86_BUILTIN_MOVDQ2Q,
  IX86_BUILTIN_PACKSSWB128,
  IX86_BUILTIN_PACKSSDW128,
  IX86_BUILTIN_PACKUSWB128,
  IX86_BUILTIN_PADDB128,
  IX86_BUILTIN_PADDW128,
  IX86_BUILTIN_PADDD128,
  IX86_BUILTIN_PADDQ128,
  IX86_BUILTIN_PADDSB128,
  IX86_BUILTIN_PADDSW128,
  IX86_BUILTIN_PADDUSB128,
  IX86_BUILTIN_PADDUSW128,
  IX86_BUILTIN_PSUBB128,
  IX86_BUILTIN_PSUBW128,
  IX86_BUILTIN_PSUBD128,
  IX86_BUILTIN_PSUBQ128,
  IX86_BUILTIN_PSUBSB128,
  IX86_BUILTIN_PSUBSW128,
  IX86_BUILTIN_PSUBUSB128,
  IX86_BUILTIN_PSUBUSW128,
  IX86_BUILTIN_PAND128,
  IX86_BUILTIN_PANDN128,
  IX86_BUILTIN_POR128,
  IX86_BUILTIN_PXOR128,
  IX86_BUILTIN_PAVGB128,
  IX86_BUILTIN_PAVGW128,
  IX86_BUILTIN_PCMPEQB128,
  IX86_BUILTIN_PCMPEQW128,
  IX86_BUILTIN_PCMPEQD128,
  IX86_BUILTIN_PCMPGTB128,
  IX86_BUILTIN_PCMPGTW128,
  IX86_BUILTIN_PCMPGTD128,
  IX86_BUILTIN_PEXTRW128,
  IX86_BUILTIN_PINSRW128,
  IX86_BUILTIN_PMADDWD128,
  IX86_BUILTIN_PMAXSW128,
  IX86_BUILTIN_PMAXUB128,
  IX86_BUILTIN_PMINSW128,
  IX86_BUILTIN_PMINUB128,
  IX86_BUILTIN_PMULUDQ,
  IX86_BUILTIN_PMULUDQ128,
  IX86_BUILTIN_PMULHUW128,
  IX86_BUILTIN_PMULHW128,
  IX86_BUILTIN_PMULLW128,
  IX86_BUILTIN_PSADBW128,
  IX86_BUILTIN_PSHUFHW,
  IX86_BUILTIN_PSHUFLW,
  IX86_BUILTIN_PSHUFD,
  IX86_BUILTIN_PSLLW128,
  IX86_BUILTIN_PSLLD128,
  IX86_BUILTIN_PSLLQ128,
  IX86_BUILTIN_PSRAW128,
  IX86_BUILTIN_PSRAD128,
  IX86_BUILTIN_PSRLW128,
  IX86_BUILTIN_PSRLD128,
  IX86_BUILTIN_PSRLQ128,
  IX86_BUILTIN_PSLLDQI128,
  IX86_BUILTIN_PSLLWI128,
  IX86_BUILTIN_PSLLDI128,
  IX86_BUILTIN_PSLLQI128,
  IX86_BUILTIN_PSRAWI128,
  IX86_BUILTIN_PSRADI128,
  IX86_BUILTIN_PSRLDQI128,
  IX86_BUILTIN_PSRLWI128,
  IX86_BUILTIN_PSRLDI128,
  IX86_BUILTIN_PSRLQI128,
  IX86_BUILTIN_PUNPCKHBW128,
  IX86_BUILTIN_PUNPCKHWD128,
  IX86_BUILTIN_PUNPCKHDQ128,
  IX86_BUILTIN_PUNPCKHQDQ128,
  IX86_BUILTIN_PUNPCKLBW128,
  IX86_BUILTIN_PUNPCKLWD128,
  IX86_BUILTIN_PUNPCKLDQ128,
  IX86_BUILTIN_PUNPCKLQDQ128,
  IX86_BUILTIN_CLFLUSH,
  IX86_BUILTIN_MFENCE,
  IX86_BUILTIN_LFENCE,
  IX86_BUILTIN_ADDSUBPS,
  IX86_BUILTIN_HADDPS,
  IX86_BUILTIN_HSUBPS,
  IX86_BUILTIN_MOVSHDUP,
  IX86_BUILTIN_MOVSLDUP,
  IX86_BUILTIN_ADDSUBPD,
  IX86_BUILTIN_HADDPD,
  IX86_BUILTIN_HSUBPD,
  IX86_BUILTIN_LOADDDUP,
  IX86_BUILTIN_MOVDDUP,
  IX86_BUILTIN_LDDQU,
  IX86_BUILTIN_MONITOR,
  IX86_BUILTIN_MWAIT,
  IX86_BUILTIN_MAX
};
extern int const dbx_register_map[53];
extern int const dbx64_register_map[53];
extern int const svr4_dbx_register_map[53];
enum processor_type
{
  PROCESSOR_I386,
  PROCESSOR_I486,
  PROCESSOR_PENTIUM,
  PROCESSOR_PENTIUMPRO,
  PROCESSOR_K6,
  PROCESSOR_ATHLON,
  PROCESSOR_PENTIUM4,
  PROCESSOR_K8,
  PROCESSOR_NOCONA,
  PROCESSOR_max
};
extern enum processor_type ix86_tune;
extern const char *ix86_tune_string;
extern enum processor_type ix86_arch;
extern const char *ix86_arch_string;
enum fpmath_unit
{
  FPMATH_387 = 1,
  FPMATH_SSE = 2
};
extern enum fpmath_unit ix86_fpmath;
extern const char *ix86_fpmath_string;
enum tls_dialect
{
  TLS_DIALECT_GNU,
  TLS_DIALECT_SUN
};
extern enum tls_dialect ix86_tls_dialect;
extern const char *ix86_tls_dialect_string;
enum cmodel {
  CM_32,
  CM_SMALL,
  CM_KERNEL,
  CM_MEDIUM,
  CM_LARGE,
  CM_SMALL_PIC
};
extern enum cmodel ix86_cmodel;
extern const char *ix86_cmodel_string;
enum asm_dialect {
  ASM_ATT,
  ASM_INTEL
};
extern const char *ix86_asm_string;
extern enum asm_dialect ix86_asm_dialect;
extern int ix86_regparm;
extern const char *ix86_regparm_string;
extern int ix86_preferred_stack_boundary;
extern const char *ix86_preferred_stack_boundary_string;
extern int ix86_branch_cost;
extern const char *ix86_branch_cost_string;
extern const char *ix86_debug_arg_string;
extern const char *ix86_debug_addr_string;
extern const char *ix86_align_loops_string;
extern const char *ix86_align_jumps_string;
extern const char *ix86_align_funcs_string;
extern enum reg_class const regclass_map[53];
extern rtx ix86_compare_op0;
extern rtx ix86_compare_op1;
enum fp_cw_mode {FP_CW_STORED, FP_CW_UNINITIALIZED, FP_CW_ANY};
struct machine_function
{
  struct stack_local_entry *stack_locals;
  const char *some_ld_name;
  int save_varrargs_registers;
  int accesses_prev_frame;
  int optimize_mode_switching;
  int use_fast_prologue_epilogue;
  int use_fast_prologue_epilogue_nregs;
};
extern rtx gen_cmpdi_ccno_1_rex64 (rtx, rtx);
extern rtx gen_cmpdi_1_insn_rex64 (rtx, rtx);
extern rtx gen_cmpqi_ext_3_insn (rtx, rtx);
extern rtx gen_cmpqi_ext_3_insn_rex64 (rtx, rtx);
extern rtx gen_x86_fnstsw_1 (rtx);
extern rtx gen_x86_sahf_1 (rtx);
extern rtx gen_popsi1 (rtx);
extern rtx gen_movsi_insv_1 (rtx, rtx);
extern rtx gen_movdi_insv_1_rex64 (rtx, rtx);
extern rtx gen_pushdi2_rex64 (rtx, rtx);
extern rtx gen_popdi1 (rtx);
extern rtx gen_swapxf (rtx, rtx);
extern rtx gen_zero_extendhisi2_and (rtx, rtx);
extern rtx gen_zero_extendsidi2_32 (rtx, rtx);
extern rtx gen_zero_extendsidi2_rex64 (rtx, rtx);
extern rtx gen_zero_extendhidi2 (rtx, rtx);
extern rtx gen_zero_extendqidi2 (rtx, rtx);
extern rtx gen_extendsidi2_rex64 (rtx, rtx);
extern rtx gen_extendhidi2 (rtx, rtx);
extern rtx gen_extendqidi2 (rtx, rtx);
extern rtx gen_extendhisi2 (rtx, rtx);
extern rtx gen_extendqihi2 (rtx, rtx);
extern rtx gen_extendqisi2 (rtx, rtx);
extern rtx gen_truncdfsf2_noop (rtx, rtx);
extern rtx gen_truncdfsf2_sse_only (rtx, rtx);
extern rtx gen_truncxfsf2_noop (rtx, rtx);
extern rtx gen_truncxfdf2_noop (rtx, rtx);
extern rtx gen_fix_truncdi_nomemory (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncdi_memory (rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncsfdi_sse (rtx, rtx);
extern rtx gen_fix_truncdfdi_sse (rtx, rtx);
extern rtx gen_fix_truncsi_nomemory (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncsi_memory (rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncsfsi_sse (rtx, rtx);
extern rtx gen_fix_truncdfsi_sse (rtx, rtx);
extern rtx gen_fix_trunchi_nomemory (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fix_trunchi_memory (rtx, rtx, rtx, rtx);
extern rtx gen_x86_fnstcw_1 (rtx);
extern rtx gen_x86_fldcw_1 (rtx);
extern rtx gen_floathixf2 (rtx, rtx);
extern rtx gen_floatsixf2 (rtx, rtx);
extern rtx gen_floatdixf2 (rtx, rtx);
extern rtx gen_adddi3_carry_rex64 (rtx, rtx, rtx, rtx);
extern rtx gen_addqi3_carry (rtx, rtx, rtx, rtx);
extern rtx gen_addhi3_carry (rtx, rtx, rtx, rtx);
extern rtx gen_addsi3_carry (rtx, rtx, rtx, rtx);
extern rtx gen_addqi3_cc (rtx, rtx, rtx);
extern rtx gen_addsi_1_zext (rtx, rtx, rtx);
extern rtx gen_addqi_ext_1 (rtx, rtx, rtx);
extern rtx gen_subdi3_carry_rex64 (rtx, rtx, rtx, rtx);
extern rtx gen_subqi3_carry (rtx, rtx, rtx, rtx);
extern rtx gen_subhi3_carry (rtx, rtx, rtx, rtx);
extern rtx gen_subsi3_carry (rtx, rtx, rtx, rtx);
extern rtx gen_subsi3_carry_zext (rtx, rtx, rtx, rtx);
extern rtx gen_divqi3 (rtx, rtx, rtx);
extern rtx gen_udivqi3 (rtx, rtx, rtx);
extern rtx gen_divmodhi4 (rtx, rtx, rtx, rtx);
extern rtx gen_udivmoddi4 (rtx, rtx, rtx, rtx);
extern rtx gen_udivmodsi4 (rtx, rtx, rtx, rtx);
extern rtx gen_testsi_1 (rtx, rtx);
extern rtx gen_andqi_ext_0 (rtx, rtx, rtx);
extern rtx gen_iorqi_ext_0 (rtx, rtx, rtx);
extern rtx gen_xorqi_ext_0 (rtx, rtx, rtx);
extern rtx gen_negsf2_memory (rtx, rtx);
extern rtx gen_negsf2_ifs (rtx, rtx, rtx);
extern rtx gen_negdf2_memory (rtx, rtx);
extern rtx gen_negdf2_ifs (rtx, rtx, rtx);
extern rtx gen_abssf2_memory (rtx, rtx);
extern rtx gen_abssf2_ifs (rtx, rtx, rtx);
extern rtx gen_absdf2_memory (rtx, rtx);
extern rtx gen_absdf2_ifs (rtx, rtx, rtx);
extern rtx gen_ashldi3_1 (rtx, rtx, rtx);
extern rtx gen_x86_shld_1 (rtx, rtx, rtx);
extern rtx gen_ashrdi3_63_rex64 (rtx, rtx, rtx);
extern rtx gen_ashrdi3_1 (rtx, rtx, rtx);
extern rtx gen_x86_shrd_1 (rtx, rtx, rtx);
extern rtx gen_ashrsi3_31 (rtx, rtx, rtx);
extern rtx gen_lshrdi3_1 (rtx, rtx, rtx);
extern rtx gen_setcc_2 (rtx, rtx);
extern rtx gen_jump (rtx);
extern rtx gen_doloop_end_internal (rtx, rtx, rtx);
extern rtx gen_blockage (rtx);
extern rtx gen_return_internal (void);
extern rtx gen_return_internal_long (void);
extern rtx gen_return_pop_internal (rtx);
extern rtx gen_return_indirect_internal (rtx);
extern rtx gen_nop (void);
extern rtx gen_align (rtx);
extern rtx gen_set_got (rtx);
extern rtx gen_eh_return_si (rtx);
extern rtx gen_eh_return_di (rtx);
extern rtx gen_leave (void);
extern rtx gen_leave_rex64 (void);
extern rtx gen_ctzsi2 (rtx, rtx);
extern rtx gen_ctzdi2 (rtx, rtx);
extern rtx gen_sqrtsf2_1 (rtx, rtx);
extern rtx gen_sqrtsf2_1_sse_only (rtx, rtx);
extern rtx gen_sqrtsf2_i387 (rtx, rtx);
extern rtx gen_sqrtdf2_1 (rtx, rtx);
extern rtx gen_sqrtdf2_1_sse_only (rtx, rtx);
extern rtx gen_sqrtdf2_i387 (rtx, rtx);
extern rtx gen_sqrtxf2 (rtx, rtx);
extern rtx gen_fpremxf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fprem1xf4 (rtx, rtx, rtx, rtx);
extern rtx gen_sincosdf3 (rtx, rtx, rtx);
extern rtx gen_sincossf3 (rtx, rtx, rtx);
extern rtx gen_sincosxf3 (rtx, rtx, rtx);
extern rtx gen_atan2df3_1 (rtx, rtx, rtx);
extern rtx gen_atan2sf3_1 (rtx, rtx, rtx);
extern rtx gen_atan2xf3_1 (rtx, rtx, rtx);
extern rtx gen_fyl2x_xf3 (rtx, rtx, rtx);
extern rtx gen_fyl2xp1_xf3 (rtx, rtx, rtx);
extern rtx gen_cld (void);
extern rtx gen_x86_movdicc_0_m1_rex64 (rtx, rtx);
extern rtx gen_movdicc_c_rex64 (rtx, rtx, rtx, rtx);
extern rtx gen_x86_movsicc_0_m1 (rtx, rtx);
extern rtx gen_pro_epilogue_adjust_stack_1 (rtx, rtx, rtx);
extern rtx gen_pro_epilogue_adjust_stack_rex64 (rtx, rtx, rtx);
extern rtx gen_pro_epilogue_adjust_stack_rex64_2 (rtx, rtx, rtx, rtx);
extern rtx gen_sse_movsfcc (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_movsfcc_eq (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_movdfcc (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_movdfcc_eq (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_allocate_stack_worker_1 (rtx);
extern rtx gen_allocate_stack_worker_rex64 (rtx);
extern rtx gen_trap (void);
extern rtx gen_movv4sf_internal (rtx, rtx);
extern rtx gen_movv4si_internal (rtx, rtx);
extern rtx gen_movv2di_internal (rtx, rtx);
extern rtx gen_movv8qi_internal (rtx, rtx);
extern rtx gen_movv4hi_internal (rtx, rtx);
extern rtx gen_movv2si_internal (rtx, rtx);
extern rtx gen_movv2sf_internal (rtx, rtx);
extern rtx gen_movv2df_internal (rtx, rtx);
extern rtx gen_movv8hi_internal (rtx, rtx);
extern rtx gen_movv16qi_internal (rtx, rtx);
extern rtx gen_movti_internal (rtx, rtx);
extern rtx gen_sse_movmskps (rtx, rtx);
extern rtx gen_mmx_pmovmskb (rtx, rtx);
extern rtx gen_mmx_maskmovq (rtx, rtx, rtx);
extern rtx gen_mmx_maskmovq_rex (rtx, rtx, rtx);
extern rtx gen_sse_movntv4sf (rtx, rtx);
extern rtx gen_sse_movntdi (rtx, rtx);
extern rtx gen_sse_movhlps (rtx, rtx, rtx);
extern rtx gen_sse_movlhps (rtx, rtx, rtx);
extern rtx gen_sse_movhps (rtx, rtx, rtx);
extern rtx gen_sse_movlps (rtx, rtx, rtx);
extern rtx gen_sse_loadss_1 (rtx, rtx, rtx);
extern rtx gen_sse_movss (rtx, rtx, rtx);
extern rtx gen_sse_storess (rtx, rtx);
extern rtx gen_sse_shufps (rtx, rtx, rtx, rtx);
extern rtx gen_addv4sf3 (rtx, rtx, rtx);
extern rtx gen_vmaddv4sf3 (rtx, rtx, rtx);
extern rtx gen_subv4sf3 (rtx, rtx, rtx);
extern rtx gen_vmsubv4sf3 (rtx, rtx, rtx);
extern rtx gen_mulv4sf3 (rtx, rtx, rtx);
extern rtx gen_vmmulv4sf3 (rtx, rtx, rtx);
extern rtx gen_divv4sf3 (rtx, rtx, rtx);
extern rtx gen_vmdivv4sf3 (rtx, rtx, rtx);
extern rtx gen_rcpv4sf2 (rtx, rtx);
extern rtx gen_vmrcpv4sf2 (rtx, rtx, rtx);
extern rtx gen_rsqrtv4sf2 (rtx, rtx);
extern rtx gen_vmrsqrtv4sf2 (rtx, rtx, rtx);
extern rtx gen_sqrtv4sf2 (rtx, rtx);
extern rtx gen_vmsqrtv4sf2 (rtx, rtx, rtx);
extern rtx gen_sse2_andv2di3 (rtx, rtx, rtx);
extern rtx gen_sse2_nandv2di3 (rtx, rtx, rtx);
extern rtx gen_sse2_iorv2di3 (rtx, rtx, rtx);
extern rtx gen_sse2_xorv2di3 (rtx, rtx, rtx);
extern rtx gen_sse_clrv4sf (rtx, rtx);
extern rtx gen_sse_clrv2df (rtx);
extern rtx gen_maskcmpv4sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_maskncmpv4sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_vmmaskcmpv4sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_vmmaskncmpv4sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_sse_comi (rtx, rtx);
extern rtx gen_sse_ucomi (rtx, rtx);
extern rtx gen_sse_unpckhps (rtx, rtx, rtx);
extern rtx gen_sse_unpcklps (rtx, rtx, rtx);
extern rtx gen_smaxv4sf3 (rtx, rtx, rtx);
extern rtx gen_vmsmaxv4sf3 (rtx, rtx, rtx);
extern rtx gen_sminv4sf3 (rtx, rtx, rtx);
extern rtx gen_vmsminv4sf3 (rtx, rtx, rtx);
extern rtx gen_cvtpi2ps (rtx, rtx, rtx);
extern rtx gen_cvtps2pi (rtx, rtx);
extern rtx gen_cvttps2pi (rtx, rtx);
extern rtx gen_cvtsi2ss (rtx, rtx, rtx);
extern rtx gen_cvtsi2ssq (rtx, rtx, rtx);
extern rtx gen_cvtss2si (rtx, rtx);
extern rtx gen_cvtss2siq (rtx, rtx);
extern rtx gen_cvttss2si (rtx, rtx);
extern rtx gen_cvttss2siq (rtx, rtx);
extern rtx gen_addv8qi3 (rtx, rtx, rtx);
extern rtx gen_addv4hi3 (rtx, rtx, rtx);
extern rtx gen_addv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_adddi3 (rtx, rtx, rtx);
extern rtx gen_ssaddv8qi3 (rtx, rtx, rtx);
extern rtx gen_ssaddv4hi3 (rtx, rtx, rtx);
extern rtx gen_usaddv8qi3 (rtx, rtx, rtx);
extern rtx gen_usaddv4hi3 (rtx, rtx, rtx);
extern rtx gen_subv8qi3 (rtx, rtx, rtx);
extern rtx gen_subv4hi3 (rtx, rtx, rtx);
extern rtx gen_subv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_subdi3 (rtx, rtx, rtx);
extern rtx gen_sssubv8qi3 (rtx, rtx, rtx);
extern rtx gen_sssubv4hi3 (rtx, rtx, rtx);
extern rtx gen_ussubv8qi3 (rtx, rtx, rtx);
extern rtx gen_ussubv4hi3 (rtx, rtx, rtx);
extern rtx gen_mulv4hi3 (rtx, rtx, rtx);
extern rtx gen_smulv4hi3_highpart (rtx, rtx, rtx);
extern rtx gen_umulv4hi3_highpart (rtx, rtx, rtx);
extern rtx gen_mmx_pmaddwd (rtx, rtx, rtx);
extern rtx gen_mmx_iordi3 (rtx, rtx, rtx);
extern rtx gen_mmx_xordi3 (rtx, rtx, rtx);
extern rtx gen_mmx_clrdi (rtx);
extern rtx gen_mmx_anddi3 (rtx, rtx, rtx);
extern rtx gen_mmx_nanddi3 (rtx, rtx, rtx);
extern rtx gen_mmx_uavgv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_uavgv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_psadbw (rtx, rtx, rtx);
extern rtx gen_mmx_pinsrw (rtx, rtx, rtx, rtx);
extern rtx gen_mmx_pextrw (rtx, rtx, rtx);
extern rtx gen_mmx_pshufw (rtx, rtx, rtx);
extern rtx gen_eqv8qi3 (rtx, rtx, rtx);
extern rtx gen_eqv4hi3 (rtx, rtx, rtx);
extern rtx gen_eqv2si3 (rtx, rtx, rtx);
extern rtx gen_gtv8qi3 (rtx, rtx, rtx);
extern rtx gen_gtv4hi3 (rtx, rtx, rtx);
extern rtx gen_gtv2si3 (rtx, rtx, rtx);
extern rtx gen_umaxv8qi3 (rtx, rtx, rtx);
extern rtx gen_smaxv4hi3 (rtx, rtx, rtx);
extern rtx gen_uminv8qi3 (rtx, rtx, rtx);
extern rtx gen_sminv4hi3 (rtx, rtx, rtx);
extern rtx gen_ashrv4hi3 (rtx, rtx, rtx);
extern rtx gen_ashrv2si3 (rtx, rtx, rtx);
extern rtx gen_lshrv4hi3 (rtx, rtx, rtx);
extern rtx gen_lshrv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_lshrdi3 (rtx, rtx, rtx);
extern rtx gen_ashlv4hi3 (rtx, rtx, rtx);
extern rtx gen_ashlv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_ashldi3 (rtx, rtx, rtx);
extern rtx gen_mmx_packsswb (rtx, rtx, rtx);
extern rtx gen_mmx_packssdw (rtx, rtx, rtx);
extern rtx gen_mmx_packuswb (rtx, rtx, rtx);
extern rtx gen_mmx_punpckhbw (rtx, rtx, rtx);
extern rtx gen_mmx_punpckhwd (rtx, rtx, rtx);
extern rtx gen_mmx_punpckhdq (rtx, rtx, rtx);
extern rtx gen_mmx_punpcklbw (rtx, rtx, rtx);
extern rtx gen_mmx_punpcklwd (rtx, rtx, rtx);
extern rtx gen_mmx_punpckldq (rtx, rtx, rtx);
extern rtx gen_emms (void);
extern rtx gen_ldmxcsr (rtx);
extern rtx gen_stmxcsr (rtx);
extern rtx gen_addv2sf3 (rtx, rtx, rtx);
extern rtx gen_subv2sf3 (rtx, rtx, rtx);
extern rtx gen_subrv2sf3 (rtx, rtx, rtx);
extern rtx gen_gtv2sf3 (rtx, rtx, rtx);
extern rtx gen_gev2sf3 (rtx, rtx, rtx);
extern rtx gen_eqv2sf3 (rtx, rtx, rtx);
extern rtx gen_pfmaxv2sf3 (rtx, rtx, rtx);
extern rtx gen_pfminv2sf3 (rtx, rtx, rtx);
extern rtx gen_mulv2sf3 (rtx, rtx, rtx);
extern rtx gen_femms (void);
extern rtx gen_pf2id (rtx, rtx);
extern rtx gen_pf2iw (rtx, rtx);
extern rtx gen_pfacc (rtx, rtx, rtx);
extern rtx gen_pfnacc (rtx, rtx, rtx);
extern rtx gen_pfpnacc (rtx, rtx, rtx);
extern rtx gen_pi2fw (rtx, rtx);
extern rtx gen_floatv2si2 (rtx, rtx);
extern rtx gen_pavgusb (rtx, rtx, rtx);
extern rtx gen_pfrcpv2sf2 (rtx, rtx);
extern rtx gen_pfrcpit1v2sf3 (rtx, rtx, rtx);
extern rtx gen_pfrcpit2v2sf3 (rtx, rtx, rtx);
extern rtx gen_pfrsqrtv2sf2 (rtx, rtx);
extern rtx gen_pfrsqit1v2sf3 (rtx, rtx, rtx);
extern rtx gen_pmulhrwv4hi3 (rtx, rtx, rtx);
extern rtx gen_pswapdv2si2 (rtx, rtx);
extern rtx gen_pswapdv2sf2 (rtx, rtx);
extern rtx gen_addv2df3 (rtx, rtx, rtx);
extern rtx gen_vmaddv2df3 (rtx, rtx, rtx);
extern rtx gen_subv2df3 (rtx, rtx, rtx);
extern rtx gen_vmsubv2df3 (rtx, rtx, rtx);
extern rtx gen_mulv2df3 (rtx, rtx, rtx);
extern rtx gen_vmmulv2df3 (rtx, rtx, rtx);
extern rtx gen_divv2df3 (rtx, rtx, rtx);
extern rtx gen_vmdivv2df3 (rtx, rtx, rtx);
extern rtx gen_smaxv2df3 (rtx, rtx, rtx);
extern rtx gen_vmsmaxv2df3 (rtx, rtx, rtx);
extern rtx gen_sminv2df3 (rtx, rtx, rtx);
extern rtx gen_vmsminv2df3 (rtx, rtx, rtx);
extern rtx gen_sqrtv2df2 (rtx, rtx);
extern rtx gen_vmsqrtv2df2 (rtx, rtx, rtx);
extern rtx gen_maskcmpv2df3 (rtx, rtx, rtx, rtx);
extern rtx gen_maskncmpv2df3 (rtx, rtx, rtx, rtx);
extern rtx gen_vmmaskcmpv2df3 (rtx, rtx, rtx, rtx);
extern rtx gen_vmmaskncmpv2df3 (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_comi (rtx, rtx);
extern rtx gen_sse2_ucomi (rtx, rtx);
extern rtx gen_sse2_movmskpd (rtx, rtx);
extern rtx gen_sse2_pmovmskb (rtx, rtx);
extern rtx gen_sse2_maskmovdqu (rtx, rtx, rtx);
extern rtx gen_sse2_maskmovdqu_rex64 (rtx, rtx, rtx);
extern rtx gen_sse2_movntv2df (rtx, rtx);
extern rtx gen_sse2_movntv2di (rtx, rtx);
extern rtx gen_sse2_movntsi (rtx, rtx);
extern rtx gen_cvtdq2ps (rtx, rtx);
extern rtx gen_cvtps2dq (rtx, rtx);
extern rtx gen_cvttps2dq (rtx, rtx);
extern rtx gen_cvtdq2pd (rtx, rtx);
extern rtx gen_cvtpd2dq (rtx, rtx);
extern rtx gen_cvttpd2dq (rtx, rtx);
extern rtx gen_cvtpd2pi (rtx, rtx);
extern rtx gen_cvttpd2pi (rtx, rtx);
extern rtx gen_cvtpi2pd (rtx, rtx);
extern rtx gen_cvtsd2si (rtx, rtx);
extern rtx gen_cvtsd2siq (rtx, rtx);
extern rtx gen_cvttsd2si (rtx, rtx);
extern rtx gen_cvttsd2siq (rtx, rtx);
extern rtx gen_cvtsi2sd (rtx, rtx, rtx);
extern rtx gen_cvtsi2sdq (rtx, rtx, rtx);
extern rtx gen_cvtsd2ss (rtx, rtx, rtx);
extern rtx gen_cvtss2sd (rtx, rtx, rtx);
extern rtx gen_cvtpd2ps (rtx, rtx);
extern rtx gen_cvtps2pd (rtx, rtx);
extern rtx gen_addv16qi3 (rtx, rtx, rtx);
extern rtx gen_addv8hi3 (rtx, rtx, rtx);
extern rtx gen_addv4si3 (rtx, rtx, rtx);
extern rtx gen_addv2di3 (rtx, rtx, rtx);
extern rtx gen_ssaddv16qi3 (rtx, rtx, rtx);
extern rtx gen_ssaddv8hi3 (rtx, rtx, rtx);
extern rtx gen_usaddv16qi3 (rtx, rtx, rtx);
extern rtx gen_usaddv8hi3 (rtx, rtx, rtx);
extern rtx gen_subv16qi3 (rtx, rtx, rtx);
extern rtx gen_subv8hi3 (rtx, rtx, rtx);
extern rtx gen_subv4si3 (rtx, rtx, rtx);
extern rtx gen_subv2di3 (rtx, rtx, rtx);
extern rtx gen_sssubv16qi3 (rtx, rtx, rtx);
extern rtx gen_sssubv8hi3 (rtx, rtx, rtx);
extern rtx gen_ussubv16qi3 (rtx, rtx, rtx);
extern rtx gen_ussubv8hi3 (rtx, rtx, rtx);
extern rtx gen_mulv8hi3 (rtx, rtx, rtx);
extern rtx gen_smulv8hi3_highpart (rtx, rtx, rtx);
extern rtx gen_umulv8hi3_highpart (rtx, rtx, rtx);
extern rtx gen_sse2_umulsidi3 (rtx, rtx, rtx);
extern rtx gen_sse2_umulv2siv2di3 (rtx, rtx, rtx);
extern rtx gen_sse2_pmaddwd (rtx, rtx, rtx);
extern rtx gen_sse2_clrti (rtx);
extern rtx gen_sse2_uavgv16qi3 (rtx, rtx, rtx);
extern rtx gen_sse2_uavgv8hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_psadbw (rtx, rtx, rtx);
extern rtx gen_sse2_pinsrw (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_pextrw (rtx, rtx, rtx);
extern rtx gen_sse2_pshufd (rtx, rtx, rtx);
extern rtx gen_sse2_pshuflw (rtx, rtx, rtx);
extern rtx gen_sse2_pshufhw (rtx, rtx, rtx);
extern rtx gen_eqv16qi3 (rtx, rtx, rtx);
extern rtx gen_eqv8hi3 (rtx, rtx, rtx);
extern rtx gen_eqv4si3 (rtx, rtx, rtx);
extern rtx gen_gtv16qi3 (rtx, rtx, rtx);
extern rtx gen_gtv8hi3 (rtx, rtx, rtx);
extern rtx gen_gtv4si3 (rtx, rtx, rtx);
extern rtx gen_umaxv16qi3 (rtx, rtx, rtx);
extern rtx gen_smaxv8hi3 (rtx, rtx, rtx);
extern rtx gen_uminv16qi3 (rtx, rtx, rtx);
extern rtx gen_sminv8hi3 (rtx, rtx, rtx);
extern rtx gen_ashrv8hi3 (rtx, rtx, rtx);
extern rtx gen_ashrv4si3 (rtx, rtx, rtx);
extern rtx gen_lshrv8hi3 (rtx, rtx, rtx);
extern rtx gen_lshrv4si3 (rtx, rtx, rtx);
extern rtx gen_lshrv2di3 (rtx, rtx, rtx);
extern rtx gen_ashlv8hi3 (rtx, rtx, rtx);
extern rtx gen_ashlv4si3 (rtx, rtx, rtx);
extern rtx gen_ashlv2di3 (rtx, rtx, rtx);
extern rtx gen_ashrv8hi3_ti (rtx, rtx, rtx);
extern rtx gen_ashrv4si3_ti (rtx, rtx, rtx);
extern rtx gen_lshrv8hi3_ti (rtx, rtx, rtx);
extern rtx gen_lshrv4si3_ti (rtx, rtx, rtx);
extern rtx gen_lshrv2di3_ti (rtx, rtx, rtx);
extern rtx gen_ashlv8hi3_ti (rtx, rtx, rtx);
extern rtx gen_ashlv4si3_ti (rtx, rtx, rtx);
extern rtx gen_ashlv2di3_ti (rtx, rtx, rtx);
extern rtx gen_sse2_ashlti3 (rtx, rtx, rtx);
extern rtx gen_sse2_lshrti3 (rtx, rtx, rtx);
extern rtx gen_sse2_unpckhpd (rtx, rtx, rtx);
extern rtx gen_sse2_unpcklpd (rtx, rtx, rtx);
extern rtx gen_sse2_packsswb (rtx, rtx, rtx);
extern rtx gen_sse2_packssdw (rtx, rtx, rtx);
extern rtx gen_sse2_packuswb (rtx, rtx, rtx);
extern rtx gen_sse2_punpckhbw (rtx, rtx, rtx);
extern rtx gen_sse2_punpckhwd (rtx, rtx, rtx);
extern rtx gen_sse2_punpckhdq (rtx, rtx, rtx);
extern rtx gen_sse2_punpcklbw (rtx, rtx, rtx);
extern rtx gen_sse2_punpcklwd (rtx, rtx, rtx);
extern rtx gen_sse2_punpckldq (rtx, rtx, rtx);
extern rtx gen_sse2_punpcklqdq (rtx, rtx, rtx);
extern rtx gen_sse2_punpckhqdq (rtx, rtx, rtx);
extern rtx gen_sse2_movapd (rtx, rtx);
extern rtx gen_sse2_movupd (rtx, rtx);
extern rtx gen_sse2_movdqa (rtx, rtx);
extern rtx gen_sse2_movdqu (rtx, rtx);
extern rtx gen_sse2_movdq2q (rtx, rtx);
extern rtx gen_sse2_movdq2q_rex64 (rtx, rtx);
extern rtx gen_sse2_movq2dq (rtx, rtx);
extern rtx gen_sse2_movq2dq_rex64 (rtx, rtx);
extern rtx gen_sse2_movq (rtx, rtx);
extern rtx gen_sse2_loadd (rtx, rtx);
extern rtx gen_sse2_stored (rtx, rtx);
extern rtx gen_sse2_movhpd (rtx, rtx, rtx);
extern rtx gen_sse2_loadsd_1 (rtx, rtx, rtx);
extern rtx gen_sse2_movsd (rtx, rtx, rtx);
extern rtx gen_sse2_storesd (rtx, rtx);
extern rtx gen_sse2_shufpd (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_clflush (rtx);
extern rtx gen_mwait (rtx, rtx);
extern rtx gen_monitor (rtx, rtx, rtx);
extern rtx gen_addsubv4sf3 (rtx, rtx, rtx);
extern rtx gen_addsubv2df3 (rtx, rtx, rtx);
extern rtx gen_haddv4sf3 (rtx, rtx, rtx);
extern rtx gen_haddv2df3 (rtx, rtx, rtx);
extern rtx gen_hsubv4sf3 (rtx, rtx, rtx);
extern rtx gen_hsubv2df3 (rtx, rtx, rtx);
extern rtx gen_movshdup (rtx, rtx);
extern rtx gen_movsldup (rtx, rtx);
extern rtx gen_lddqu (rtx, rtx);
extern rtx gen_loadddup (rtx, rtx);
extern rtx gen_movddup (rtx, rtx);
extern rtx gen_cmpdi (rtx, rtx);
extern rtx gen_cmpsi (rtx, rtx);
extern rtx gen_cmphi (rtx, rtx);
extern rtx gen_cmpqi (rtx, rtx);
extern rtx gen_cmpdi_1_rex64 (rtx, rtx);
extern rtx gen_cmpsi_1 (rtx, rtx);
extern rtx gen_cmpqi_ext_3 (rtx, rtx);
extern rtx gen_cmpxf (rtx, rtx);
extern rtx gen_cmpdf (rtx, rtx);
extern rtx gen_cmpsf (rtx, rtx);
extern rtx gen_movsi (rtx, rtx);
extern rtx gen_movhi (rtx, rtx);
extern rtx gen_movstricthi (rtx, rtx);
extern rtx gen_movqi (rtx, rtx);
extern rtx gen_reload_outqi (rtx, rtx, rtx);
extern rtx gen_movstrictqi (rtx, rtx);
extern rtx gen_movdi (rtx, rtx);
extern rtx gen_movsf (rtx, rtx);
extern rtx gen_movdf (rtx, rtx);
extern rtx gen_movxf (rtx, rtx);
extern rtx gen_zero_extendhisi2 (rtx, rtx);
extern rtx gen_zero_extendqihi2 (rtx, rtx);
extern rtx gen_zero_extendqisi2 (rtx, rtx);
extern rtx gen_zero_extendsidi2 (rtx, rtx);
extern rtx gen_extendsidi2 (rtx, rtx);
extern rtx gen_extendsfdf2 (rtx, rtx);
extern rtx gen_extendsfxf2 (rtx, rtx);
extern rtx gen_extenddfxf2 (rtx, rtx);
extern rtx gen_truncdfsf2 (rtx, rtx);
extern rtx gen_truncxfsf2 (rtx, rtx);
extern rtx gen_truncxfdf2 (rtx, rtx);
extern rtx gen_fix_truncxfdi2 (rtx, rtx);
extern rtx gen_fix_truncdfdi2 (rtx, rtx);
extern rtx gen_fix_truncsfdi2 (rtx, rtx);
extern rtx gen_fix_truncxfsi2 (rtx, rtx);
extern rtx gen_fix_truncdfsi2 (rtx, rtx);
extern rtx gen_fix_truncsfsi2 (rtx, rtx);
extern rtx gen_fix_truncxfhi2 (rtx, rtx);
extern rtx gen_fix_truncdfhi2 (rtx, rtx);
extern rtx gen_fix_truncsfhi2 (rtx, rtx);
extern rtx gen_floathisf2 (rtx, rtx);
extern rtx gen_floatsisf2 (rtx, rtx);
extern rtx gen_floatdisf2 (rtx, rtx);
extern rtx gen_floathidf2 (rtx, rtx);
extern rtx gen_floatsidf2 (rtx, rtx);
extern rtx gen_floatdidf2 (rtx, rtx);
extern rtx gen_floatunssisf2 (rtx, rtx);
extern rtx gen_floatunsdisf2 (rtx, rtx);
extern rtx gen_floatunsdidf2 (rtx, rtx);
extern rtx gen_vec_setv2df (rtx, rtx, rtx);
extern rtx gen_vec_extractv2df (rtx, rtx, rtx);
extern rtx gen_vec_initv2df (rtx, rtx);
extern rtx gen_vec_setv4sf (rtx, rtx, rtx);
extern rtx gen_vec_extractv4sf (rtx, rtx, rtx);
extern rtx gen_vec_initv4sf (rtx, rtx);
extern rtx gen_adddi3 (rtx, rtx, rtx);
extern rtx gen_addsi3 (rtx, rtx, rtx);
extern rtx gen_addhi3 (rtx, rtx, rtx);
extern rtx gen_addqi3 (rtx, rtx, rtx);
extern rtx gen_addxf3 (rtx, rtx, rtx);
extern rtx gen_adddf3 (rtx, rtx, rtx);
extern rtx gen_addsf3 (rtx, rtx, rtx);
extern rtx gen_subdi3 (rtx, rtx, rtx);
extern rtx gen_subsi3 (rtx, rtx, rtx);
extern rtx gen_subhi3 (rtx, rtx, rtx);
extern rtx gen_subqi3 (rtx, rtx, rtx);
extern rtx gen_subxf3 (rtx, rtx, rtx);
extern rtx gen_subdf3 (rtx, rtx, rtx);
extern rtx gen_subsf3 (rtx, rtx, rtx);
extern rtx gen_muldi3 (rtx, rtx, rtx);
extern rtx gen_mulsi3 (rtx, rtx, rtx);
extern rtx gen_mulhi3 (rtx, rtx, rtx);
extern rtx gen_mulqi3 (rtx, rtx, rtx);
extern rtx gen_umulqihi3 (rtx, rtx, rtx);
extern rtx gen_mulqihi3 (rtx, rtx, rtx);
extern rtx gen_umulditi3 (rtx, rtx, rtx);
extern rtx gen_umulsidi3 (rtx, rtx, rtx);
extern rtx gen_mulditi3 (rtx, rtx, rtx);
extern rtx gen_mulsidi3 (rtx, rtx, rtx);
extern rtx gen_umuldi3_highpart (rtx, rtx, rtx);
extern rtx gen_umulsi3_highpart (rtx, rtx, rtx);
extern rtx gen_smuldi3_highpart (rtx, rtx, rtx);
extern rtx gen_smulsi3_highpart (rtx, rtx, rtx);
extern rtx gen_mulxf3 (rtx, rtx, rtx);
extern rtx gen_muldf3 (rtx, rtx, rtx);
extern rtx gen_mulsf3 (rtx, rtx, rtx);
extern rtx gen_divxf3 (rtx, rtx, rtx);
extern rtx gen_divdf3 (rtx, rtx, rtx);
extern rtx gen_divsf3 (rtx, rtx, rtx);
extern rtx gen_divmoddi4 (rtx, rtx, rtx, rtx);
extern rtx gen_divmodsi4 (rtx, rtx, rtx, rtx);
extern rtx gen_udivmodhi4 (rtx, rtx, rtx, rtx);
extern rtx gen_testsi_ccno_1 (rtx, rtx);
extern rtx gen_testqi_ccz_1 (rtx, rtx);
extern rtx gen_testqi_ext_ccno_0 (rtx, rtx);
extern rtx gen_anddi3 (rtx, rtx, rtx);
extern rtx gen_andsi3 (rtx, rtx, rtx);
extern rtx gen_andhi3 (rtx, rtx, rtx);
extern rtx gen_andqi3 (rtx, rtx, rtx);
extern rtx gen_iordi3 (rtx, rtx, rtx);
extern rtx gen_iorsi3 (rtx, rtx, rtx);
extern rtx gen_iorhi3 (rtx, rtx, rtx);
extern rtx gen_iorqi3 (rtx, rtx, rtx);
extern rtx gen_xordi3 (rtx, rtx, rtx);
extern rtx gen_xorsi3 (rtx, rtx, rtx);
extern rtx gen_xorhi3 (rtx, rtx, rtx);
extern rtx gen_xorqi3 (rtx, rtx, rtx);
extern rtx gen_xorqi_cc_ext_1 (rtx, rtx, rtx);
extern rtx gen_negdi2 (rtx, rtx);
extern rtx gen_negsi2 (rtx, rtx);
extern rtx gen_neghi2 (rtx, rtx);
extern rtx gen_negqi2 (rtx, rtx);
extern rtx gen_negsf2 (rtx, rtx);
extern rtx gen_negdf2 (rtx, rtx);
extern rtx gen_negxf2 (rtx, rtx);
extern rtx gen_abssf2 (rtx, rtx);
extern rtx gen_absdf2 (rtx, rtx);
extern rtx gen_absxf2 (rtx, rtx);
extern rtx gen_one_cmpldi2 (rtx, rtx);
extern rtx gen_one_cmplsi2 (rtx, rtx);
extern rtx gen_one_cmplhi2 (rtx, rtx);
extern rtx gen_one_cmplqi2 (rtx, rtx);
extern rtx gen_ashldi3 (rtx, rtx, rtx);
extern rtx gen_x86_shift_adj_1 (rtx, rtx, rtx, rtx);
extern rtx gen_x86_shift_adj_2 (rtx, rtx, rtx);
extern rtx gen_ashlsi3 (rtx, rtx, rtx);
extern rtx gen_ashlhi3 (rtx, rtx, rtx);
extern rtx gen_ashlqi3 (rtx, rtx, rtx);
extern rtx gen_ashrdi3 (rtx, rtx, rtx);
extern rtx gen_x86_shift_adj_3 (rtx, rtx, rtx);
extern rtx gen_ashrsi3 (rtx, rtx, rtx);
extern rtx gen_ashrhi3 (rtx, rtx, rtx);
extern rtx gen_ashrqi3 (rtx, rtx, rtx);
extern rtx gen_lshrdi3 (rtx, rtx, rtx);
extern rtx gen_lshrsi3 (rtx, rtx, rtx);
extern rtx gen_lshrhi3 (rtx, rtx, rtx);
extern rtx gen_lshrqi3 (rtx, rtx, rtx);
extern rtx gen_rotldi3 (rtx, rtx, rtx);
extern rtx gen_rotlsi3 (rtx, rtx, rtx);
extern rtx gen_rotlhi3 (rtx, rtx, rtx);
extern rtx gen_rotlqi3 (rtx, rtx, rtx);
extern rtx gen_rotrdi3 (rtx, rtx, rtx);
extern rtx gen_rotrsi3 (rtx, rtx, rtx);
extern rtx gen_rotrhi3 (rtx, rtx, rtx);
extern rtx gen_rotrqi3 (rtx, rtx, rtx);
extern rtx gen_extv (rtx, rtx, rtx, rtx);
extern rtx gen_extzv (rtx, rtx, rtx, rtx);
extern rtx gen_insv (rtx, rtx, rtx, rtx);
extern rtx gen_seq (rtx);
extern rtx gen_sne (rtx);
extern rtx gen_sgt (rtx);
extern rtx gen_sgtu (rtx);
extern rtx gen_slt (rtx);
extern rtx gen_sltu (rtx);
extern rtx gen_sge (rtx);
extern rtx gen_sgeu (rtx);
extern rtx gen_sle (rtx);
extern rtx gen_sleu (rtx);
extern rtx gen_sunordered (rtx);
extern rtx gen_sordered (rtx);
extern rtx gen_suneq (rtx);
extern rtx gen_sunge (rtx);
extern rtx gen_sungt (rtx);
extern rtx gen_sunle (rtx);
extern rtx gen_sunlt (rtx);
extern rtx gen_sltgt (rtx);
extern rtx gen_beq (rtx);
extern rtx gen_bne (rtx);
extern rtx gen_bgt (rtx);
extern rtx gen_bgtu (rtx);
extern rtx gen_blt (rtx);
extern rtx gen_bltu (rtx);
extern rtx gen_bge (rtx);
extern rtx gen_bgeu (rtx);
extern rtx gen_ble (rtx);
extern rtx gen_bleu (rtx);
extern rtx gen_bunordered (rtx);
extern rtx gen_bordered (rtx);
extern rtx gen_buneq (rtx);
extern rtx gen_bunge (rtx);
extern rtx gen_bungt (rtx);
extern rtx gen_bunle (rtx);
extern rtx gen_bunlt (rtx);
extern rtx gen_bltgt (rtx);
extern rtx gen_indirect_jump (rtx);
extern rtx gen_tablejump (rtx, rtx);
extern rtx gen_doloop_end (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_call_pop (rtx, rtx, rtx, rtx);
extern rtx gen_call (rtx, rtx, rtx);
extern rtx gen_sibcall (rtx, rtx, rtx);
extern rtx gen_call_value_pop (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_call_value (rtx, rtx, rtx, rtx);
extern rtx gen_sibcall_value (rtx, rtx, rtx, rtx);
extern rtx gen_untyped_call (rtx, rtx, rtx);
extern rtx gen_return (void);
extern rtx gen_prologue (void);
extern rtx gen_epilogue (void);
extern rtx gen_sibcall_epilogue (void);
extern rtx gen_eh_return (rtx);
extern rtx gen_ffssi2 (rtx, rtx);
extern rtx gen_ffsdi2 (rtx, rtx);
extern rtx gen_clzsi2 (rtx, rtx);
extern rtx gen_clzdi2 (rtx, rtx);
extern rtx gen_tls_global_dynamic_32 (rtx, rtx);
extern rtx gen_tls_global_dynamic_64 (rtx, rtx);
extern rtx gen_tls_local_dynamic_base_32 (rtx);
extern rtx gen_tls_local_dynamic_base_64 (rtx);
extern rtx gen_sqrtsf2 (rtx, rtx);
extern rtx gen_sqrtdf2 (rtx, rtx);
extern rtx gen_fmodsf3 (rtx, rtx, rtx);
extern rtx gen_fmoddf3 (rtx, rtx, rtx);
extern rtx gen_fmodxf3 (rtx, rtx, rtx);
extern rtx gen_dremsf3 (rtx, rtx, rtx);
extern rtx gen_dremdf3 (rtx, rtx, rtx);
extern rtx gen_dremxf3 (rtx, rtx, rtx);
extern rtx gen_tandf2 (rtx, rtx);
extern rtx gen_tansf2 (rtx, rtx);
extern rtx gen_tanxf2 (rtx, rtx);
extern rtx gen_atan2df3 (rtx, rtx, rtx);
extern rtx gen_atandf2 (rtx, rtx);
extern rtx gen_atan2sf3 (rtx, rtx, rtx);
extern rtx gen_atansf2 (rtx, rtx);
extern rtx gen_atan2xf3 (rtx, rtx, rtx);
extern rtx gen_atanxf2 (rtx, rtx);
extern rtx gen_asindf2 (rtx, rtx);
extern rtx gen_asinsf2 (rtx, rtx);
extern rtx gen_asinxf2 (rtx, rtx);
extern rtx gen_acosdf2 (rtx, rtx);
extern rtx gen_acossf2 (rtx, rtx);
extern rtx gen_acosxf2 (rtx, rtx);
extern rtx gen_logsf2 (rtx, rtx);
extern rtx gen_logdf2 (rtx, rtx);
extern rtx gen_logxf2 (rtx, rtx);
extern rtx gen_log10sf2 (rtx, rtx);
extern rtx gen_log10df2 (rtx, rtx);
extern rtx gen_log10xf2 (rtx, rtx);
extern rtx gen_log2sf2 (rtx, rtx);
extern rtx gen_log2df2 (rtx, rtx);
extern rtx gen_log2xf2 (rtx, rtx);
extern rtx gen_log1psf2 (rtx, rtx);
extern rtx gen_log1pdf2 (rtx, rtx);
extern rtx gen_log1pxf2 (rtx, rtx);
extern rtx gen_logbsf2 (rtx, rtx);
extern rtx gen_logbdf2 (rtx, rtx);
extern rtx gen_logbxf2 (rtx, rtx);
extern rtx gen_ilogbsi2 (rtx, rtx, rtx, rtx);
extern rtx gen_expsf2 (rtx, rtx);
extern rtx gen_expdf2 (rtx, rtx);
extern rtx gen_expxf2 (rtx, rtx);
extern rtx gen_exp10sf2 (rtx, rtx);
extern rtx gen_exp10df2 (rtx, rtx);
extern rtx gen_exp10xf2 (rtx, rtx);
extern rtx gen_exp2sf2 (rtx, rtx);
extern rtx gen_exp2df2 (rtx, rtx);
extern rtx gen_exp2xf2 (rtx, rtx);
extern rtx gen_expm1df2 (rtx, rtx);
extern rtx gen_expm1sf2 (rtx, rtx);
extern rtx gen_expm1xf2 (rtx, rtx);
extern rtx gen_movstrsi (rtx, rtx, rtx, rtx);
extern rtx gen_movstrdi (rtx, rtx, rtx, rtx);
extern rtx gen_strmov (rtx, rtx, rtx, rtx);
extern rtx gen_strmov_singleop (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_rep_mov (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_clrstrsi (rtx, rtx, rtx);
extern rtx gen_clrstrdi (rtx, rtx, rtx);
extern rtx gen_strset (rtx, rtx, rtx);
extern rtx gen_strset_singleop (rtx, rtx, rtx, rtx);
extern rtx gen_rep_stos (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_cmpstrsi (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_cmpintqi (rtx);
extern rtx gen_cmpstrqi_nz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_cmpstrqi_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_strlensi (rtx, rtx, rtx, rtx);
extern rtx gen_strlendi (rtx, rtx, rtx, rtx);
extern rtx gen_strlenqi_1 (rtx, rtx, rtx);
extern rtx gen_movdicc (rtx, rtx, rtx, rtx);
extern rtx gen_movsicc (rtx, rtx, rtx, rtx);
extern rtx gen_movhicc (rtx, rtx, rtx, rtx);
extern rtx gen_movqicc (rtx, rtx, rtx, rtx);
extern rtx gen_movsfcc (rtx, rtx, rtx, rtx);
extern rtx gen_movdfcc (rtx, rtx, rtx, rtx);
extern rtx gen_movxfcc (rtx, rtx, rtx, rtx);
extern rtx gen_minsf3 (rtx, rtx, rtx);
extern rtx gen_addqicc (rtx, rtx, rtx, rtx);
extern rtx gen_addhicc (rtx, rtx, rtx, rtx);
extern rtx gen_addsicc (rtx, rtx, rtx, rtx);
extern rtx gen_adddicc (rtx, rtx, rtx, rtx);
extern rtx gen_mindf3 (rtx, rtx, rtx);
extern rtx gen_maxsf3 (rtx, rtx, rtx);
extern rtx gen_maxdf3 (rtx, rtx, rtx);
extern rtx gen_allocate_stack_worker (rtx);
extern rtx gen_allocate_stack_worker_postreload (rtx);
extern rtx gen_allocate_stack_worker_rex64_postreload (rtx);
extern rtx gen_allocate_stack (rtx, rtx);
extern rtx gen_builtin_setjmp_receiver (rtx);
extern rtx gen_conditional_trap (rtx, rtx);
extern rtx gen_movti (rtx, rtx);
extern rtx gen_movtf (rtx, rtx);
extern rtx gen_movv2df (rtx, rtx);
extern rtx gen_movv8hi (rtx, rtx);
extern rtx gen_movv16qi (rtx, rtx);
extern rtx gen_movv4sf (rtx, rtx);
extern rtx gen_movv4si (rtx, rtx);
extern rtx gen_movv2di (rtx, rtx);
extern rtx gen_movv2si (rtx, rtx);
extern rtx gen_movv4hi (rtx, rtx);
extern rtx gen_movv8qi (rtx, rtx);
extern rtx gen_movv2sf (rtx, rtx);
extern rtx gen_sse_movaps (rtx, rtx);
extern rtx gen_sse_movups (rtx, rtx);
extern rtx gen_sse_loadss (rtx, rtx);
extern rtx gen_negv4sf2 (rtx, rtx);
extern rtx gen_sse_andv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse_nandv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse_iorv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse_xorv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse2_andv2df3 (rtx, rtx, rtx);
extern rtx gen_sse2_nandv2df3 (rtx, rtx, rtx);
extern rtx gen_sse2_iorv2df3 (rtx, rtx, rtx);
extern rtx gen_sse2_xorv2df3 (rtx, rtx, rtx);
extern rtx gen_sfence (void);
extern rtx gen_sse_prologue_save (rtx, rtx, rtx, rtx);
extern rtx gen_prefetch (rtx, rtx, rtx);
extern rtx gen_sse2_loadsd (rtx, rtx);
extern rtx gen_sse2_mfence (void);
extern rtx gen_sse2_lfence (void);
typedef unsigned long HARD_REG_ELT_TYPE;
typedef HARD_REG_ELT_TYPE HARD_REG_SET[((53 + (8 * 4) - 1) / (8 * 4))];
extern char fixed_regs[53];
extern HARD_REG_SET fixed_reg_set;
extern char call_used_regs[53];
extern HARD_REG_SET call_used_reg_set;
extern HARD_REG_SET losing_caller_save_reg_set;
extern char call_fixed_regs[53];
extern HARD_REG_SET call_fixed_reg_set;
extern char global_regs[53];
extern HARD_REG_SET regs_invalidated_by_call;
extern int reg_alloc_order[53];
extern int inv_reg_alloc_order[53];
extern HARD_REG_SET reg_class_contents[((int) LIM_REG_CLASSES)];
extern unsigned int reg_class_size[((int) LIM_REG_CLASSES)];
extern enum reg_class reg_class_superclasses[((int) LIM_REG_CLASSES)][((int) LIM_REG_CLASSES)];
extern enum reg_class reg_class_subclasses[((int) LIM_REG_CLASSES)][((int) LIM_REG_CLASSES)];
extern enum reg_class reg_class_subunion[((int) LIM_REG_CLASSES)][((int) LIM_REG_CLASSES)];
extern enum reg_class reg_class_superunion[((int) LIM_REG_CLASSES)][((int) LIM_REG_CLASSES)];
extern int n_non_fixed_regs;
extern const char * reg_names[53];
struct function;
enum machine_mode
{
  VOIDmode,
  BLKmode,
  CCmode,
  CCGCmode,
  CCGOCmode,
  CCNOmode,
  CCZmode,
  CCFPmode,
  CCFPUmode,
  BImode,
  QImode,
  HImode,
  SImode,
  DImode,
  TImode,
  SFmode,
  DFmode,
  XFmode,
  TFmode,
  CQImode,
  CHImode,
  CSImode,
  CDImode,
  CTImode,
  SCmode,
  DCmode,
  XCmode,
  TCmode,
  V2QImode,
  V4QImode,
  V2HImode,
  V8QImode,
  V4HImode,
  V2SImode,
  V1DImode,
  V16QImode,
  V8HImode,
  V4SImode,
  V2DImode,
  V8SImode,
  V4DImode,
  V8DImode,
  V2SFmode,
  V4SFmode,
  V2DFmode,
  V8SFmode,
  V4DFmode,
  V16SFmode,
  V8DFmode,
  MAX_MACHINE_MODE,
  MIN_MODE_RANDOM = VOIDmode,
  MAX_MODE_RANDOM = BLKmode,
  MIN_MODE_CC = CCmode,
  MAX_MODE_CC = CCFPUmode,
  MIN_MODE_INT = QImode,
  MAX_MODE_INT = TImode,
  MIN_MODE_PARTIAL_INT = VOIDmode,
  MAX_MODE_PARTIAL_INT = VOIDmode,
  MIN_MODE_FLOAT = SFmode,
  MAX_MODE_FLOAT = TFmode,
  MIN_MODE_COMPLEX_INT = CQImode,
  MAX_MODE_COMPLEX_INT = CTImode,
  MIN_MODE_COMPLEX_FLOAT = SCmode,
  MAX_MODE_COMPLEX_FLOAT = TCmode,
  MIN_MODE_VECTOR_INT = V2QImode,
  MAX_MODE_VECTOR_INT = V8DImode,
  MIN_MODE_VECTOR_FLOAT = V2SFmode,
  MAX_MODE_VECTOR_FLOAT = V8DFmode,
  NUM_MACHINE_MODES = MAX_MACHINE_MODE
};
extern const char * const mode_name[NUM_MACHINE_MODES];
enum mode_class { MODE_RANDOM, MODE_CC, MODE_INT, MODE_PARTIAL_INT, MODE_FLOAT, MODE_COMPLEX_INT, MODE_COMPLEX_FLOAT, MODE_VECTOR_INT, MODE_VECTOR_FLOAT, MAX_MODE_CLASS };
extern const unsigned char mode_class[NUM_MACHINE_MODES];
extern unsigned char mode_size[NUM_MACHINE_MODES];
extern const unsigned short mode_precision[NUM_MACHINE_MODES];
extern const unsigned long mode_mask_array[NUM_MACHINE_MODES];
extern const unsigned char mode_inner[NUM_MACHINE_MODES];
extern const unsigned char mode_nunits[NUM_MACHINE_MODES];
extern const unsigned char mode_wider[NUM_MACHINE_MODES];
extern enum machine_mode mode_for_size (unsigned int, enum mode_class, int);
extern enum machine_mode smallest_mode_for_size (unsigned int,
       enum mode_class);
extern enum machine_mode int_mode_for_mode (enum machine_mode);
extern enum machine_mode get_best_mode (int, int, unsigned int,
     enum machine_mode, int);
extern unsigned char mode_base_align[NUM_MACHINE_MODES];
extern unsigned get_mode_alignment (enum machine_mode);
extern const unsigned char class_narrowest_mode[MAX_MODE_CLASS];
extern enum machine_mode byte_mode;
extern enum machine_mode word_mode;
extern enum machine_mode ptr_mode;
extern void init_adjust_machine_modes (void);
extern struct line_maps line_table;
typedef struct location_s
{
  const char *file;
  int line;
} expanded_location;
typedef struct location_s location_t;
typedef location_t *source_locus;
extern location_t unknown_location;
struct file_stack
{
  struct file_stack *next;
  location_t location;
};
extern const char *main_input_filename;
extern location_t input_location;
extern void push_srcloc (const char *name, int line);
extern void pop_srcloc (void);
extern struct file_stack *input_file_stack;
extern int input_file_stack_tick;
enum rtx_code {
UNKNOWN ,
NIL ,
INCLUDE ,
EXPR_LIST ,
INSN_LIST ,
MATCH_OPERAND ,
MATCH_SCRATCH ,
MATCH_DUP ,
MATCH_OPERATOR ,
MATCH_PARALLEL ,
MATCH_OP_DUP ,
MATCH_PAR_DUP ,
DEFINE_INSN ,
DEFINE_PEEPHOLE ,
DEFINE_SPLIT ,
DEFINE_INSN_AND_SPLIT ,
DEFINE_PEEPHOLE2 ,
DEFINE_EXPAND ,
DEFINE_DELAY ,
DEFINE_FUNCTION_UNIT ,
DEFINE_ASM_ATTRIBUTES ,
DEFINE_COND_EXEC ,
SEQUENCE ,
ADDRESS ,
DEFINE_CPU_UNIT ,
DEFINE_QUERY_CPU_UNIT ,
EXCLUSION_SET ,
PRESENCE_SET ,
FINAL_PRESENCE_SET ,
ABSENCE_SET ,
FINAL_ABSENCE_SET ,
DEFINE_BYPASS ,
DEFINE_AUTOMATON ,
AUTOMATA_OPTION ,
DEFINE_RESERVATION ,
DEFINE_INSN_RESERVATION ,
DEFINE_ATTR ,
ATTR ,
SET_ATTR ,
SET_ATTR_ALTERNATIVE ,
EQ_ATTR ,
EQ_ATTR_ALT ,
ATTR_FLAG ,
INSN ,
JUMP_INSN ,
CALL_INSN ,
BARRIER ,
CODE_LABEL ,
NOTE ,
COND_EXEC ,
PARALLEL ,
ASM_INPUT ,
ASM_OPERANDS ,
UNSPEC ,
UNSPEC_VOLATILE ,
ADDR_VEC ,
ADDR_DIFF_VEC ,
PREFETCH ,
SET ,
USE ,
CLOBBER ,
CALL ,
RETURN ,
TRAP_IF ,
RESX ,
CONST_INT ,
CONST_DOUBLE ,
CONST_VECTOR ,
CONST_STRING ,
CONST ,
PC ,
VALUE ,
REG ,
SCRATCH ,
SUBREG ,
STRICT_LOW_PART ,
CONCAT ,
MEM ,
LABEL_REF ,
SYMBOL_REF ,
CC0 ,
QUEUED ,
IF_THEN_ELSE ,
COND ,
COMPARE ,
PLUS ,
MINUS ,
NEG ,
MULT ,
DIV ,
MOD ,
UDIV ,
UMOD ,
AND ,
IOR ,
XOR ,
NOT ,
ASHIFT ,
ROTATE ,
ASHIFTRT ,
LSHIFTRT ,
ROTATERT ,
SMIN ,
SMAX ,
UMIN ,
UMAX ,
PRE_DEC ,
PRE_INC ,
POST_DEC ,
POST_INC ,
PRE_MODIFY ,
POST_MODIFY ,
NE ,
EQ ,
GE ,
GT ,
LE ,
LT ,
GEU ,
GTU ,
LEU ,
LTU ,
UNORDERED ,
ORDERED ,
UNEQ ,
UNGE ,
UNGT ,
UNLE ,
UNLT ,
LTGT ,
SIGN_EXTEND ,
ZERO_EXTEND ,
TRUNCATE ,
FLOAT_EXTEND ,
FLOAT_TRUNCATE ,
FLOAT ,
FIX ,
UNSIGNED_FLOAT ,
UNSIGNED_FIX ,
ABS ,
SQRT ,
FFS ,
CLZ ,
CTZ ,
POPCOUNT ,
PARITY ,
SIGN_EXTRACT ,
ZERO_EXTRACT ,
HIGH ,
LO_SUM ,
RANGE_INFO ,
RANGE_REG ,
RANGE_VAR ,
RANGE_LIVE ,
VEC_MERGE ,
VEC_SELECT ,
VEC_CONCAT ,
VEC_DUPLICATE ,
SS_PLUS ,
US_PLUS ,
SS_MINUS ,
US_MINUS ,
SS_TRUNCATE ,
US_TRUNCATE ,
VAR_LOCATION ,
  LAST_AND_UNUSED_RTX_CODE};
enum rtx_class {
  RTX_COMPARE,
  RTX_COMM_COMPARE,
  RTX_BIN_ARITH,
  RTX_COMM_ARITH,
  RTX_UNARY,
  RTX_EXTRA,
  RTX_MATCH,
  RTX_INSN,
  RTX_OBJ,
  RTX_CONST_OBJ,
  RTX_TERNARY,
  RTX_BITFIELD_OPS,
  RTX_AUTOINC
};
extern const unsigned char rtx_length[((int) LAST_AND_UNUSED_RTX_CODE)];
extern const char * const rtx_name[((int) LAST_AND_UNUSED_RTX_CODE)];
extern const char * const rtx_format[((int) LAST_AND_UNUSED_RTX_CODE)];
extern const enum rtx_class rtx_class[((int) LAST_AND_UNUSED_RTX_CODE)];
extern const unsigned char rtx_size[((int) LAST_AND_UNUSED_RTX_CODE)];
extern const unsigned char rtx_next[((int) LAST_AND_UNUSED_RTX_CODE)];
typedef struct
{
  unsigned min_align: 8;
  unsigned base_after_vec: 1;
  unsigned min_after_vec: 1;
  unsigned max_after_vec: 1;
  unsigned min_after_base: 1;
  unsigned max_after_base: 1;
  unsigned offset_unsigned: 1;
  unsigned : 2;
  unsigned scale : 8;
} addr_diff_vec_flags;
typedef struct mem_attrs
{
  long alias;
  tree expr;
  rtx offset;
  rtx size;
  unsigned int align;
} mem_attrs;
typedef struct reg_attrs
{
  tree decl;
  long offset;
} reg_attrs;
union rtunion_def
{
  int rtint;
  unsigned int rtuint;
  const char *rtstr;
  rtx rtx1;
  rtvec rtvec1;
  enum machine_mode rttype;
  addr_diff_vec_flags rt_addr_diff_vec_flags;
  struct cselib_val_struct *rt_cselib;
  struct bitmap_head_def *rtbit;
  tree rttree;
  struct basic_block_def *bb;
  mem_attrs *rtmem;
  reg_attrs *rtreg;
};
typedef union rtunion_def rtunion;
struct rtx_def
{
  unsigned int code: 16;
  unsigned int mode : 8;
  unsigned int jump : 1;
  unsigned int call : 1;
  unsigned int unchanging : 1;
  unsigned int volatil : 1;
  unsigned int in_struct : 1;
  unsigned int used : 1;
  unsigned frame_related : 1;
  unsigned return_val : 1;
  union u {
    rtunion fld[1];
    long hwint[1];
  } u;
};
struct rtvec_def {
  int num_elem;
  rtx elem[1];
};
enum reg_note
{
  REG_DEAD = 1,
  REG_INC,
  REG_EQUIV,
  REG_EQUAL,
  REG_RETVAL,
  REG_LIBCALL,
  REG_NONNEG,
  REG_NO_CONFLICT,
  REG_UNUSED,
  REG_CC_SETTER, REG_CC_USER,
  REG_LABEL,
  REG_DEP_ANTI, REG_DEP_OUTPUT,
  REG_BR_PROB,
  REG_VALUE_PROFILE,
  REG_NOALIAS,
  REG_SAVE_AREA,
  REG_BR_PRED,
  REG_FRAME_RELATED_EXPR,
  REG_EH_CONTEXT,
  REG_EH_REGION,
  REG_SAVE_NOTE,
  REG_MAYBE_DEAD,
  REG_NORETURN,
  REG_NON_LOCAL_GOTO,
  REG_CROSSING_JUMP,
  REG_SETJMP,
  REG_ALWAYS_RETURN,
  REG_VTABLE_REF
};
extern const char * const reg_note_name[];
enum insn_note
{
  NOTE_INSN_BIAS = -100,
  NOTE_INSN_DELETED,
  NOTE_INSN_BLOCK_BEG,
  NOTE_INSN_BLOCK_END,
  NOTE_INSN_LOOP_BEG,
  NOTE_INSN_LOOP_END,
  NOTE_INSN_LOOP_CONT,
  NOTE_INSN_LOOP_VTOP,
  NOTE_INSN_LOOP_END_TOP_COND,
  NOTE_INSN_FUNCTION_END,
  NOTE_INSN_PROLOGUE_END,
  NOTE_INSN_EPILOGUE_BEG,
  NOTE_INSN_DELETED_LABEL,
  NOTE_INSN_FUNCTION_BEG,
  NOTE_INSN_EH_REGION_BEG,
  NOTE_INSN_EH_REGION_END,
  NOTE_INSN_REPEATED_LINE_NUMBER,
  NOTE_INSN_BASIC_BLOCK,
  NOTE_INSN_EXPECTED_VALUE,
  NOTE_INSN_PREDICTION,
  NOTE_INSN_UNLIKELY_EXECUTED_CODE,
  NOTE_INSN_VAR_LOCATION,
  NOTE_INSN_MAX
};
extern const char * const note_insn_name[NOTE_INSN_MAX - NOTE_INSN_BIAS];
enum label_kind
{
  LABEL_NORMAL = 0,
  LABEL_STATIC_ENTRY,
  LABEL_GLOBAL_ENTRY,
  LABEL_WEAK_ENTRY
};
extern int rtx_cost (rtx, enum rtx_code);
extern int address_cost (rtx, enum machine_mode);
extern unsigned int subreg_lsb (rtx);
extern unsigned int subreg_lsb_1 (enum machine_mode, enum machine_mode,
      unsigned int);
extern unsigned int subreg_regno_offset (unsigned int, enum machine_mode,
      unsigned int, enum machine_mode);
extern unsigned char subreg_offset_representable_p (unsigned int, enum machine_mode,
        unsigned int, enum machine_mode);
extern unsigned int subreg_regno (rtx);
extern unsigned long nonzero_bits (rtx, enum machine_mode);
extern unsigned int num_sign_bit_copies (rtx, enum machine_mode);
extern int rtx_equal_function_value_matters;
extern int generating_concat_p;
extern int ceil_log2 (unsigned long);
extern rtx expand_builtin_expect_jump (tree, rtx, rtx);
extern void purge_builtin_constant_p (void);
extern void set_stack_check_libfunc (rtx);
extern long trunc_int_for_mode (long, enum machine_mode);
extern rtx plus_constant_wide (rtx, long);
extern rtx plus_constant_for_output_wide (rtx, long);
extern void optimize_save_area_alloca (rtx);
extern rtvec gen_rtvec (int, ...);
extern rtx copy_insn_1 (rtx);
extern rtx copy_insn (rtx);
extern rtx gen_int_mode (long, enum machine_mode);
extern rtx emit_copy_of_insn_after (rtx, rtx);
extern void set_reg_attrs_from_mem (rtx, rtx);
extern void set_mem_attrs_from_reg (rtx, rtx);
extern void set_reg_attrs_for_parm (rtx, rtx);
extern void set_reg_pointer_align (rtx, unsigned int);
extern int mem_expr_equal_p (tree, tree);
extern rtx rtx_alloc_stat (enum rtx_code );
extern rtvec rtvec_alloc (int);
extern rtx copy_rtx (rtx);
extern void dump_rtx_statistics (void);
extern rtx copy_rtx_if_shared (rtx);
extern rtx copy_most_rtx (rtx, rtx);
extern rtx shallow_copy_rtx_stat (rtx );
extern int rtx_equal_p (rtx, rtx);
extern rtvec gen_rtvec_v (int, rtx *);
extern rtx gen_reg_rtx (enum machine_mode);
extern rtx gen_rtx_REG_offset (rtx, enum machine_mode, unsigned int, int);
extern rtx gen_label_rtx (void);
extern int subreg_hard_regno (rtx, int);
extern rtx gen_lowpart_common (enum machine_mode, rtx);
extern rtx gen_lowpart_if_possible (enum machine_mode, rtx);
extern rtx gen_highpart (enum machine_mode, rtx);
extern rtx gen_highpart_mode (enum machine_mode, enum machine_mode, rtx);
extern rtx gen_realpart (enum machine_mode, rtx);
extern rtx gen_imagpart (enum machine_mode, rtx);
extern rtx operand_subword (rtx, unsigned int, int, enum machine_mode);
extern rtx operand_subword_force (rtx, unsigned int, enum machine_mode);
extern int subreg_lowpart_p (rtx);
extern unsigned int subreg_lowpart_offset (enum machine_mode,
        enum machine_mode);
extern unsigned int subreg_highpart_offset (enum machine_mode,
         enum machine_mode);
extern rtx make_safe_from (rtx, rtx);
extern rtx convert_memory_address (enum machine_mode, rtx);
extern rtx get_insns (void);
extern const char *get_insn_name (int);
extern rtx get_last_insn (void);
extern rtx get_last_insn_anywhere (void);
extern rtx get_first_nonnote_insn (void);
extern rtx get_last_nonnote_insn (void);
extern void start_sequence (void);
extern void push_to_sequence (rtx);
extern void end_sequence (void);
extern void push_to_full_sequence (rtx, rtx);
extern rtx immed_double_const (long, long,
          enum machine_mode);
extern rtx force_const_mem (enum machine_mode, rtx);
extern rtx get_pool_constant (rtx);
extern rtx get_pool_constant_mark (rtx, unsigned char *);
extern enum machine_mode get_pool_mode (rtx);
extern rtx get_pool_constant_for_function (struct function *, rtx);
extern enum machine_mode get_pool_mode_for_function (struct function *, rtx);
extern int get_pool_offset (rtx);
extern rtx simplify_subtraction (rtx);
extern rtx assign_stack_local (enum machine_mode, long, int);
extern rtx assign_stack_temp (enum machine_mode, long, int);
extern rtx assign_stack_temp_for_type (enum machine_mode,
           long, int, tree);
extern rtx assign_temp (tree, int, int, int);
extern rtx emit_insn_before (rtx, rtx);
extern rtx emit_insn_before_setloc (rtx, rtx, int);
extern rtx emit_jump_insn_before (rtx, rtx);
extern rtx emit_jump_insn_before_setloc (rtx, rtx, int);
extern rtx emit_call_insn_before (rtx, rtx);
extern rtx emit_call_insn_before_setloc (rtx, rtx, int);
extern rtx emit_barrier_before (rtx);
extern rtx emit_label_before (rtx, rtx);
extern rtx emit_note_before (int, rtx);
extern rtx emit_insn_after (rtx, rtx);
extern rtx emit_insn_after_setloc (rtx, rtx, int);
extern rtx emit_jump_insn_after (rtx, rtx);
extern rtx emit_jump_insn_after_setloc (rtx, rtx, int);
extern rtx emit_call_insn_after (rtx, rtx);
extern rtx emit_call_insn_after_setloc (rtx, rtx, int);
extern rtx emit_barrier_after (rtx);
extern rtx emit_label_after (rtx, rtx);
extern rtx emit_note_after (int, rtx);
extern rtx emit_note_copy_after (rtx, rtx);
extern rtx emit_insn (rtx);
extern rtx emit_jump_insn (rtx);
extern rtx emit_call_insn (rtx);
extern rtx emit_label (rtx);
extern rtx emit_barrier (void);
extern rtx emit_note (int);
extern rtx emit_note_copy (rtx);
extern rtx emit_line_note (location_t);
extern rtx make_insn_raw (rtx);
extern void add_function_usage_to (rtx, rtx);
extern rtx last_call_insn (void);
extern rtx previous_insn (rtx);
extern rtx next_insn (rtx);
extern rtx prev_nonnote_insn (rtx);
extern rtx next_nonnote_insn (rtx);
extern rtx prev_real_insn (rtx);
extern rtx next_real_insn (rtx);
extern rtx prev_active_insn (rtx);
extern rtx next_active_insn (rtx);
extern int active_insn_p (rtx);
extern rtx prev_label (rtx);
extern rtx next_label (rtx);
extern rtx skip_consecutive_labels (rtx);
extern rtx next_cc0_user (rtx);
extern rtx prev_cc0_setter (rtx);
extern tree choose_inner_scope (tree, tree);
extern int insn_line (rtx);
extern const char * insn_file (rtx);
extern int locator_line (int);
extern const char * locator_file (int);
extern int prologue_locator, epilogue_locator;
extern enum rtx_code reverse_condition (enum rtx_code);
extern enum rtx_code reverse_condition_maybe_unordered (enum rtx_code);
extern enum rtx_code swap_condition (enum rtx_code);
extern enum rtx_code unsigned_condition (enum rtx_code);
extern enum rtx_code signed_condition (enum rtx_code);
extern void mark_jump_label (rtx, rtx, int);
extern void cleanup_barriers (void);
extern unsigned char squeeze_notes (rtx *, rtx *);
extern rtx delete_related_insns (rtx);
extern void delete_jump (rtx);
extern void delete_barrier (rtx);
extern rtx get_label_before (rtx);
extern rtx get_label_after (rtx);
extern rtx follow_jumps (rtx);
extern rtx *find_constant_term_loc (rtx *);
extern rtx try_split (rtx, rtx, int);
extern int split_branch_probability;
extern rtx split_insns (rtx, rtx);
extern rtx simplify_unary_operation (enum rtx_code, enum machine_mode, rtx,
         enum machine_mode);
extern rtx simplify_binary_operation (enum rtx_code, enum machine_mode, rtx,
          rtx);
extern rtx simplify_ternary_operation (enum rtx_code, enum machine_mode,
           enum machine_mode, rtx, rtx, rtx);
extern rtx simplify_const_relational_operation (enum rtx_code,
      enum machine_mode, rtx, rtx);
extern rtx simplify_relational_operation (enum rtx_code, enum machine_mode,
       enum machine_mode, rtx, rtx);
extern rtx simplify_gen_binary (enum rtx_code, enum machine_mode, rtx, rtx);
extern rtx simplify_gen_unary (enum rtx_code, enum machine_mode, rtx,
          enum machine_mode);
extern rtx simplify_gen_ternary (enum rtx_code, enum machine_mode,
     enum machine_mode, rtx, rtx, rtx);
extern rtx simplify_gen_relational (enum rtx_code, enum machine_mode,
        enum machine_mode, rtx, rtx);
extern rtx simplify_subreg (enum machine_mode, rtx, enum machine_mode,
       unsigned int);
extern rtx simplify_gen_subreg (enum machine_mode, rtx, enum machine_mode,
    unsigned int);
extern rtx simplify_replace_rtx (rtx, rtx, rtx);
extern rtx simplify_rtx (rtx);
extern rtx avoid_constant_pool_reference (rtx);
extern enum machine_mode choose_hard_reg_mode (unsigned int, unsigned int,
            unsigned char);
extern rtx set_unique_reg_note (rtx, enum reg_note, rtx);
typedef struct replace_label_data
{
  rtx r1;
  rtx r2;
  unsigned char update_label_nuses;
} replace_label_data;
extern int rtx_addr_can_trap_p (rtx);
extern unsigned char nonzero_address_p (rtx);
extern int rtx_unstable_p (rtx);
extern int rtx_varies_p (rtx, int);
extern int rtx_addr_varies_p (rtx, int);
extern long get_integer_term (rtx);
extern rtx get_related_value (rtx);
extern rtx get_jump_table_offset (rtx, rtx *);
extern int global_reg_mentioned_p (rtx);
extern int reg_mentioned_p (rtx, rtx);
extern int count_occurrences (rtx, rtx, int);
extern int reg_referenced_p (rtx, rtx);
extern int reg_used_between_p (rtx, rtx, rtx);
extern int reg_referenced_between_p (rtx, rtx, rtx);
extern int reg_set_between_p (rtx, rtx, rtx);
extern int regs_set_between_p (rtx, rtx, rtx);
extern int commutative_operand_precedence (rtx);
extern int swap_commutative_operands_p (rtx, rtx);
extern int modified_between_p (rtx, rtx, rtx);
extern int no_labels_between_p (rtx, rtx);
extern int no_jumps_between_p (rtx, rtx);
extern int modified_in_p (rtx, rtx);
extern int insn_dependent_p (rtx, rtx);
extern int reg_set_p (rtx, rtx);
extern rtx single_set_2 (rtx, rtx);
extern int multiple_sets (rtx);
extern int set_noop_p (rtx);
extern int noop_move_p (rtx);
extern rtx find_last_value (rtx, rtx *, rtx, int);
extern int refers_to_regno_p (unsigned int, unsigned int, rtx, rtx *);
extern int reg_overlap_mentioned_p (rtx, rtx);
extern rtx set_of (rtx, rtx);
extern void note_stores (rtx, void (*) (rtx, rtx, void *), void *);
extern void note_uses (rtx *, void (*) (rtx *, void *), void *);
extern int dead_or_set_p (rtx, rtx);
extern int dead_or_set_regno_p (rtx, unsigned int);
extern rtx find_reg_note (rtx, enum reg_note, rtx);
extern rtx find_regno_note (rtx, enum reg_note, unsigned int);
extern rtx find_reg_equal_equiv_note (rtx);
extern int find_reg_fusage (rtx, enum rtx_code, rtx);
extern int find_regno_fusage (rtx, enum rtx_code, unsigned int);
extern int pure_call_p (rtx);
extern void remove_note (rtx, rtx);
extern int side_effects_p (rtx);
extern int volatile_refs_p (rtx);
extern int volatile_insn_p (rtx);
extern int may_trap_p (rtx);
extern int inequality_comparisons_p (rtx);
extern rtx replace_rtx (rtx, rtx, rtx);
extern rtx replace_regs (rtx, rtx *, unsigned int, int);
extern int replace_label (rtx *, void *);
extern int rtx_referenced_p (rtx, rtx);
extern unsigned char tablejump_p (rtx, rtx *, rtx *);
extern int computed_jump_p (rtx);
typedef int (*rtx_function) (rtx *, void *);
extern int for_each_rtx (rtx *, rtx_function, void *);
extern rtx regno_use_in (unsigned int, rtx);
extern int auto_inc_p (rtx);
extern int in_expr_list_p (rtx, rtx);
extern void remove_node_from_expr_list (rtx, rtx *);
extern int insns_safe_to_move_p (rtx, rtx, rtx *);
extern int loc_mentioned_in_p (rtx *, rtx);
extern rtx find_first_parameter_load (rtx, rtx);
extern unsigned char keep_with_call_p (rtx);
extern unsigned char label_is_jump_target_p (rtx, rtx);
extern rtx find_use_as_address (rtx, rtx, long);
void free_EXPR_LIST_list (rtx *);
void free_INSN_LIST_list (rtx *);
void free_EXPR_LIST_node (rtx);
void free_INSN_LIST_node (rtx);
rtx alloc_INSN_LIST (rtx, rtx);
rtx alloc_EXPR_LIST (int, rtx, rtx);
extern int max_parallel;
extern void free_reg_info (void);
extern int asm_noperands (rtx);
extern const char *decode_asm_operands (rtx, rtx *, rtx **, const char **,
     enum machine_mode *);
extern enum reg_class reg_preferred_class (int);
extern enum reg_class reg_alternate_class (int);
extern void split_all_insns (int);
extern void split_all_insns_noflow (void);
extern rtx const_int_rtx[64 * 2 + 1];
extern rtx const_true_rtx;
extern rtx const_tiny_rtx[3][(int) MAX_MACHINE_MODE];
enum global_rtl_index
{
  GR_PC,
  GR_CC0,
  GR_STACK_POINTER,
  GR_FRAME_POINTER,
  GR_HARD_FRAME_POINTER,
  GR_ARG_POINTER,
  GR_VIRTUAL_INCOMING_ARGS,
  GR_VIRTUAL_STACK_ARGS,
  GR_VIRTUAL_STACK_DYNAMIC,
  GR_VIRTUAL_OUTGOING_ARGS,
  GR_VIRTUAL_CFA,
  GR_MAX
};
extern rtx global_rtl[GR_MAX];
extern rtx pic_offset_table_rtx;
extern rtx static_chain_rtx;
extern rtx static_chain_incoming_rtx;
extern rtx return_address_pointer_rtx;
extern rtx gen_rtx_fmt_s (enum rtx_code, enum machine_mode mode,
           const char *arg0);
extern rtx gen_rtx_fmt_ee (enum rtx_code, enum machine_mode mode,
           rtx arg0, rtx arg1);
extern rtx gen_rtx_fmt_ue (enum rtx_code, enum machine_mode mode,
           rtx arg0, rtx arg1);
extern rtx gen_rtx_fmt_iss (enum rtx_code, enum machine_mode mode,
           int arg0, const char *arg1,
           const char *arg2);
extern rtx gen_rtx_fmt_is (enum rtx_code, enum machine_mode mode,
           int arg0, const char *arg1);
extern rtx gen_rtx_fmt_i (enum rtx_code, enum machine_mode mode,
           int arg0);
extern rtx gen_rtx_fmt_isE (enum rtx_code, enum machine_mode mode,
           int arg0, const char *arg1,
           rtvec arg2);
extern rtx gen_rtx_fmt_iE (enum rtx_code, enum machine_mode mode,
           int arg0, rtvec arg1);
extern rtx gen_rtx_fmt_sEss (enum rtx_code, enum machine_mode mode,
           const char *arg0, rtvec arg1,
           const char *arg2, const char *arg3);
extern rtx gen_rtx_fmt_eE (enum rtx_code, enum machine_mode mode,
           rtx arg0, rtvec arg1);
extern rtx gen_rtx_fmt_Ess (enum rtx_code, enum machine_mode mode,
           rtvec arg0, const char *arg1,
           const char *arg2);
extern rtx gen_rtx_fmt_E (enum rtx_code, enum machine_mode mode,
           rtvec arg0);
extern rtx gen_rtx_fmt_e (enum rtx_code, enum machine_mode mode,
           rtx arg0);
extern rtx gen_rtx_fmt_ss (enum rtx_code, enum machine_mode mode,
           const char *arg0, const char *arg1);
extern rtx gen_rtx_fmt_sies (enum rtx_code, enum machine_mode mode,
           const char *arg0, int arg1,
           rtx arg2, const char *arg3);
extern rtx gen_rtx_fmt_sse (enum rtx_code, enum machine_mode mode,
           const char *arg0, const char *arg1,
           rtx arg2);
extern rtx gen_rtx_fmt_sE (enum rtx_code, enum machine_mode mode,
           const char *arg0, rtvec arg1);
extern rtx gen_rtx_fmt_ii (enum rtx_code, enum machine_mode mode,
           int arg0, int arg1);
extern rtx gen_rtx_fmt_iuuBieiee (enum rtx_code, enum machine_mode mode,
           int arg0, rtx arg1, rtx arg2,
           struct basic_block_def *arg3,
           int arg4, rtx arg5, int arg6,
           rtx arg7, rtx arg8);
extern rtx gen_rtx_fmt_iuuBieiee0 (enum rtx_code, enum machine_mode mode,
           int arg0, rtx arg1, rtx arg2,
           struct basic_block_def *arg3,
           int arg4, rtx arg5, int arg6,
           rtx arg7, rtx arg8);
extern rtx gen_rtx_fmt_iuuBieieee (enum rtx_code, enum machine_mode mode,
           int arg0, rtx arg1, rtx arg2,
           struct basic_block_def *arg3,
           int arg4, rtx arg5, int arg6,
           rtx arg7, rtx arg8, rtx arg9);
extern rtx gen_rtx_fmt_iuu000000 (enum rtx_code, enum machine_mode mode,
           int arg0, rtx arg1, rtx arg2);
extern rtx gen_rtx_fmt_iuuB00is (enum rtx_code, enum machine_mode mode,
           int arg0, rtx arg1, rtx arg2,
           struct basic_block_def *arg3,
           int arg4, const char *arg5);
extern rtx gen_rtx_fmt_ssiEEsi (enum rtx_code, enum machine_mode mode,
           const char *arg0, const char *arg1,
           int arg2, rtvec arg3, rtvec arg4,
           const char *arg5, int arg6);
extern rtx gen_rtx_fmt_Ei (enum rtx_code, enum machine_mode mode,
           rtvec arg0, int arg1);
extern rtx gen_rtx_fmt_eEee0 (enum rtx_code, enum machine_mode mode,
           rtx arg0, rtvec arg1, rtx arg2,
           rtx arg3);
extern rtx gen_rtx_fmt_eee (enum rtx_code, enum machine_mode mode,
           rtx arg0, rtx arg1, rtx arg2);
extern rtx gen_rtx_fmt_ (enum rtx_code, enum machine_mode mode);
extern rtx gen_rtx_fmt_w (enum rtx_code, enum machine_mode mode,
           long arg0);
extern rtx gen_rtx_fmt_0 (enum rtx_code, enum machine_mode mode);
extern rtx gen_rtx_fmt_i00 (enum rtx_code, enum machine_mode mode,
           int arg0);
extern rtx gen_rtx_fmt_ei (enum rtx_code, enum machine_mode mode,
           rtx arg0, int arg1);
extern rtx gen_rtx_fmt_e0 (enum rtx_code, enum machine_mode mode,
           rtx arg0);
extern rtx gen_rtx_fmt_u00 (enum rtx_code, enum machine_mode mode,
           rtx arg0);
extern rtx gen_rtx_fmt_s00 (enum rtx_code, enum machine_mode mode,
           const char *arg0);
extern rtx gen_rtx_fmt_eeeee (enum rtx_code, enum machine_mode mode,
           rtx arg0, rtx arg1, rtx arg2,
           rtx arg3, rtx arg4);
extern rtx gen_rtx_fmt_Ee (enum rtx_code, enum machine_mode mode,
           rtvec arg0, rtx arg1);
extern rtx gen_rtx_fmt_uuEiiiiiibbii (enum rtx_code, enum machine_mode mode,
           rtx arg0, rtx arg1, rtvec arg2,
           int arg3, int arg4, int arg5,
           int arg6, int arg7, int arg8,
           struct bitmap_head_def *arg9,
           struct bitmap_head_def *arg10,
           int arg11, int arg12);
extern rtx gen_rtx_fmt_iiiiiiiitt (enum rtx_code, enum machine_mode mode,
           int arg0, int arg1, int arg2,
           int arg3, int arg4, int arg5,
           int arg6, int arg7,
           union tree_node *arg8,
           union tree_node *arg9);
extern rtx gen_rtx_fmt_eti (enum rtx_code, enum machine_mode mode,
           rtx arg0, union tree_node *arg1,
           int arg2);
extern rtx gen_rtx_fmt_bi (enum rtx_code, enum machine_mode mode,
           struct bitmap_head_def *arg0,
           int arg1);
extern rtx gen_rtx_fmt_te (enum rtx_code, enum machine_mode mode,
           union tree_node *arg0, rtx arg1);
extern rtx gen_rtx_CONST_INT (enum machine_mode, long);
extern rtx gen_rtx_CONST_VECTOR (enum machine_mode, rtvec);
extern rtx gen_raw_REG (enum machine_mode, int);
extern rtx gen_rtx_REG (enum machine_mode, unsigned);
extern rtx gen_rtx_SUBREG (enum machine_mode, rtx, int);
extern rtx gen_rtx_MEM (enum machine_mode, rtx);
extern rtx output_constant_def (tree, int);
extern rtx lookup_constant_def (tree);
extern int flow2_completed;
extern int reload_completed;
extern int epilogue_completed;
extern int reload_in_progress;
extern int cse_not_expected;
extern int no_new_pseudos;
extern int rtx_to_tree_code (enum rtx_code);
extern int delete_trivially_dead_insns (rtx, int);
extern int cse_main (rtx, int, int, FILE *);
extern void cse_condition_code_reg (void);
extern int comparison_dominates_p (enum rtx_code, enum rtx_code);
extern int condjump_p (rtx);
extern int any_condjump_p (rtx);
extern int any_uncondjump_p (rtx);
extern int safe_to_remove_jump_p (rtx);
extern rtx pc_set (rtx);
extern rtx condjump_label (rtx);
extern int simplejump_p (rtx);
extern int returnjump_p (rtx);
extern int onlyjump_p (rtx);
extern int only_sets_cc0_p (rtx);
extern int sets_cc0_p (rtx);
extern int invert_jump_1 (rtx, rtx);
extern int invert_jump (rtx, rtx, int);
extern int rtx_renumbered_equal_p (rtx, rtx);
extern int true_regnum (rtx);
extern unsigned int reg_or_subregno (rtx);
extern int redirect_jump_1 (rtx, rtx);
extern int redirect_jump (rtx, rtx, int);
extern void rebuild_jump_labels (rtx);
extern enum rtx_code reversed_comparison_code (rtx, rtx);
extern enum rtx_code reversed_comparison_code_parts (enum rtx_code,
           rtx, rtx, rtx);
extern void delete_for_peephole (rtx, rtx);
extern int condjump_in_parallel_p (rtx);
extern void purge_line_number_notes (rtx);
extern int max_reg_num (void);
extern int max_label_num (void);
extern int get_first_label_num (void);
extern void maybe_set_first_label_num (rtx);
extern void delete_insns_since (rtx);
extern void mark_reg_pointer (rtx, int);
extern void mark_user_reg (rtx);
extern void reset_used_flags (rtx);
extern void set_used_flags (rtx);
extern void reorder_insns (rtx, rtx, rtx);
extern void reorder_insns_nobb (rtx, rtx, rtx);
extern int get_max_uid (void);
extern int in_sequence_p (void);
extern void force_next_line_note (void);
extern void init_emit (void);
extern void init_emit_once (int);
extern void push_topmost_sequence (void);
extern void pop_topmost_sequence (void);
extern void reverse_comparison (rtx);
extern void set_new_first_and_last_insn (rtx, rtx);
extern void set_new_last_label_num (int);
extern void unshare_all_rtl (void);
extern void unshare_all_rtl_again (rtx);
extern void unshare_all_rtl_in_chain (rtx);
extern void verify_rtl_sharing (void);
extern void set_first_insn (rtx);
extern void set_last_insn (rtx);
extern void link_cc0_insns (rtx);
extern void add_insn (rtx);
extern void add_insn_before (rtx, rtx);
extern void add_insn_after (rtx, rtx);
extern void remove_insn (rtx);
extern void emit_insn_after_with_line_notes (rtx, rtx, rtx);
extern enum rtx_code classify_insn (rtx);
extern rtx emit (rtx);
int force_line_numbers (void);
void restore_line_number_status (int old_value);
extern void renumber_insns (FILE *);
extern void remove_unnecessary_notes (void);
extern rtx delete_insn (rtx);
extern rtx entry_of_function (void);
extern void delete_insn_chain (rtx, rtx);
extern rtx unlink_insn_chain (rtx, rtx);
extern rtx delete_insn_and_edges (rtx);
extern void delete_insn_chain_and_edges (rtx, rtx);
extern rtx gen_lowpart_SUBREG (enum machine_mode, rtx);
extern int combine_instructions (rtx, unsigned int);
extern unsigned int extended_count (rtx, enum machine_mode, int);
extern rtx remove_death (unsigned int, rtx);
extern void dump_combine_stats (FILE *);
extern void dump_combine_total_stats (FILE *);
extern void web_main (void);
extern void schedule_insns (FILE *);
extern void schedule_ebbs (FILE *);
extern void fix_sched_param (const char *, const char *);
extern const char *print_rtx_head;
extern void debug_rtx (rtx);
extern void debug_rtx_list (rtx, int);
extern void debug_rtx_range (rtx, rtx);
extern rtx debug_rtx_find (rtx, int);
extern void print_mem_expr (FILE *, tree);
extern void print_rtl (FILE *, rtx);
extern void print_simple_rtl (FILE *, rtx);
extern int print_rtl_single (FILE *, rtx);
extern void print_inline_rtx (FILE *, rtx, int);
extern void init_loop (void);
extern void loop_optimize (rtx, FILE *, int);
extern void branch_target_load_optimize (unsigned char);
extern void reposition_prologue_and_epilogue_notes (rtx);
extern void thread_prologue_and_epilogue_insns (rtx);
extern int prologue_epilogue_contains (rtx);
extern int sibcall_epilogue_contains (rtx);
extern void mark_temp_addr_taken (rtx);
extern void update_temp_slot_address (rtx, rtx);
extern void purge_hard_subreg_sets (rtx);
extern void set_file_and_line_for_stmt (location_t);
extern void expand_null_return (void);
extern void expand_naked_return (void);
extern void emit_jump (rtx);
extern int preserve_subexpressions_p (void);
extern rtx move_by_pieces (rtx, rtx, unsigned long,
      unsigned int, int);
extern void recompute_reg_usage (rtx, int);
extern int initialize_uninitialized_subregs (void);
extern void delete_dead_jumptables (void);
extern void print_rtl_with_bb (FILE *, rtx);
extern void dump_flow_info (FILE *);
extern void init_expmed (void);
extern void expand_inc (rtx, rtx);
extern void expand_dec (rtx, rtx);
extern rtx expand_mult_highpart (enum machine_mode, rtx,
     unsigned long, rtx, int, int);
extern unsigned char can_copy_p (enum machine_mode);
extern rtx fis_get_condition (rtx);
extern int gcse_main (rtx, FILE *);
extern int bypass_jumps (FILE *);
extern void gcse_after_reload_main (rtx, FILE *);
extern void mark_elimination (int, int);
extern int global_alloc (FILE *);
extern void dump_global_regs (FILE *);
extern void retry_global_alloc (int, HARD_REG_SET);
extern void build_insn_chain (rtx);
extern int reg_classes_intersect_p (enum reg_class, enum reg_class);
extern int reg_class_subset_p (enum reg_class, enum reg_class);
extern void globalize_reg (int);
extern void init_reg_modes_once (void);
extern void init_regs (void);
extern void init_fake_stack_mems (void);
extern void init_reg_sets (void);
extern void regset_release_memory (void);
extern void regclass_init (void);
extern void regclass (rtx, int, FILE *);
extern void reg_scan (rtx, unsigned int, int);
extern void reg_scan_update (rtx, rtx, unsigned int);
extern void fix_register (const char *, int, int);
extern void cannot_change_mode_set_regs (HARD_REG_SET *,
      enum machine_mode, unsigned int);
extern unsigned char invalid_mode_change_p (unsigned int, enum reg_class,
       enum machine_mode);
extern void regmove_optimize (rtx, int, FILE *);
extern void combine_stack_adjustments (void);
extern void dbr_schedule (rtx, FILE *);
extern void dump_local_alloc (FILE *);
extern int local_alloc (void);
extern unsigned char reg_to_stack (FILE *);
enum libcall_type
{
  LCT_NORMAL = 0,
  LCT_CONST = 1,
  LCT_PURE = 2,
  LCT_CONST_MAKE_BLOCK = 3,
  LCT_PURE_MAKE_BLOCK = 4,
  LCT_NORETURN = 5,
  LCT_THROW = 6,
  LCT_ALWAYS_RETURN = 7,
  LCT_RETURNS_TWICE = 8
};
extern void emit_library_call (rtx, enum libcall_type, enum machine_mode, int,
          ...);
extern rtx emit_library_call_value (rtx, rtx, enum libcall_type,
        enum machine_mode, int, ...);
extern int set_dominates_use (int, int, int, rtx, rtx);
extern int in_data_section (void);
extern void init_varasm_once (void);
extern void init_rtl (void);
extern void traverse_md_constants (int (*) (void **, void *), void *);
struct md_constant { char *name, *value; };
extern int read_skip_spaces (FILE *);
extern rtx read_rtx (FILE *);
extern const char *read_rtx_filename;
extern int read_rtx_lineno;
extern void fancy_abort (const char *, int, const char *)
    ;
extern void clear_reg_alias_info (rtx);
extern rtx canon_rtx (rtx);
extern int true_dependence (rtx, enum machine_mode, rtx, int (*)(rtx, int));
extern rtx get_addr (rtx);
extern int canon_true_dependence (rtx, enum machine_mode, rtx, rtx,
      int (*)(rtx, int));
extern int read_dependence (rtx, rtx);
extern int anti_dependence (rtx, rtx);
extern int output_dependence (rtx, rtx);
extern int unchanging_anti_dependence (rtx, rtx);
extern void mark_constant_function (void);
extern void init_alias_once (void);
extern void init_alias_analysis (void);
extern void end_alias_analysis (void);
extern rtx addr_side_effect_eval (rtx, int, int);
extern unsigned char memory_modified_in_insn_p (rtx, rtx);
extern rtx find_base_term (rtx);
extern rtx gen_hard_reg_clobber (enum machine_mode, unsigned int);
extern rtx get_reg_known_value (unsigned int);
extern unsigned char get_reg_known_equiv_p (unsigned int);
extern int stack_regs_mentioned (rtx insn);
extern rtx stack_limit_rtx;
extern void regrename_optimize (void);
extern void copyprop_hardreg_forward (void);
extern void if_convert (int);
extern void invert_br_probabilities (rtx);
extern unsigned char expensive_function_p (int);
extern void tracer (void);
extern void variable_tracking_main (void);
extern void get_mode_bounds (enum machine_mode, int, enum machine_mode,
        rtx *, rtx *);
extern rtx reversed_condition (rtx);
extern rtx compare_and_jump_seq (rtx, rtx, enum rtx_code, rtx, int, rtx);
extern rtx canon_condition (rtx);
extern void simplify_using_condition (rtx, rtx *, struct bitmap_head_def *);
extern void reg_alloc (void);
extern void sms_schedule (FILE *);
struct rtl_hooks
{
  rtx (*gen_lowpart) (enum machine_mode, rtx);
  rtx (*reg_nonzero_bits) (rtx, enum machine_mode, rtx, enum machine_mode,
      unsigned long, unsigned long *);
  rtx (*reg_num_sign_bit_copies) (rtx, enum machine_mode, rtx, enum machine_mode,
      unsigned int, unsigned int *);
};
extern struct rtl_hooks rtl_hooks;
extern const struct rtl_hooks general_rtl_hooks;
enum tree_code {
ERROR_MARK,
IDENTIFIER_NODE,
TREE_LIST,
TREE_VEC,
BLOCK,
VOID_TYPE,
INTEGER_TYPE,
REAL_TYPE,
COMPLEX_TYPE,
VECTOR_TYPE,
ENUMERAL_TYPE,
BOOLEAN_TYPE,
CHAR_TYPE,
POINTER_TYPE,
OFFSET_TYPE,
REFERENCE_TYPE,
METHOD_TYPE,
FILE_TYPE,
ARRAY_TYPE,
SET_TYPE,
RECORD_TYPE,
UNION_TYPE,
QUAL_UNION_TYPE,
FUNCTION_TYPE,
LANG_TYPE,
INTEGER_CST,
REAL_CST,
COMPLEX_CST,
VECTOR_CST,
STRING_CST,
FUNCTION_DECL,
LABEL_DECL,
CONST_DECL,
TYPE_DECL,
VAR_DECL,
PARM_DECL,
RESULT_DECL,
FIELD_DECL,
NAMESPACE_DECL,
TRANSLATION_UNIT_DECL,
COMPONENT_REF,
BIT_FIELD_REF,
INDIRECT_REF,
BUFFER_REF,
ARRAY_REF,
ARRAY_RANGE_REF,
OBJ_TYPE_REF,
EXC_PTR_EXPR,
FILTER_EXPR,
CONSTRUCTOR,
COMPOUND_EXPR,
MODIFY_EXPR,
INIT_EXPR,
TARGET_EXPR,
COND_EXPR,
BIND_EXPR,
LABELED_BLOCK_EXPR,
CALL_EXPR,
WITH_CLEANUP_EXPR,
CLEANUP_POINT_EXPR,
PLACEHOLDER_EXPR,
PLUS_EXPR,
MINUS_EXPR,
MULT_EXPR,
TRUNC_DIV_EXPR,
CEIL_DIV_EXPR,
FLOOR_DIV_EXPR,
ROUND_DIV_EXPR,
TRUNC_MOD_EXPR,
CEIL_MOD_EXPR,
FLOOR_MOD_EXPR,
ROUND_MOD_EXPR,
RDIV_EXPR,
EXACT_DIV_EXPR,
FIX_TRUNC_EXPR,
FIX_CEIL_EXPR,
FIX_FLOOR_EXPR,
FIX_ROUND_EXPR,
FLOAT_EXPR,
NEGATE_EXPR,
MIN_EXPR,
MAX_EXPR,
ABS_EXPR,
LSHIFT_EXPR,
RSHIFT_EXPR,
LROTATE_EXPR,
RROTATE_EXPR,
BIT_IOR_EXPR,
BIT_XOR_EXPR,
BIT_AND_EXPR,
BIT_NOT_EXPR,
TRUTH_ANDIF_EXPR,
TRUTH_ORIF_EXPR,
TRUTH_AND_EXPR,
TRUTH_OR_EXPR,
TRUTH_XOR_EXPR,
TRUTH_NOT_EXPR,
LT_EXPR,
LE_EXPR,
GT_EXPR,
GE_EXPR,
EQ_EXPR,
NE_EXPR,
UNORDERED_EXPR,
ORDERED_EXPR,
UNLT_EXPR,
UNLE_EXPR,
UNGT_EXPR,
UNGE_EXPR,
UNEQ_EXPR,
LTGT_EXPR,
IN_EXPR,
SET_LE_EXPR,
CARD_EXPR,
RANGE_EXPR,
CONVERT_EXPR,
NOP_EXPR,
NON_LVALUE_EXPR,
VIEW_CONVERT_EXPR,
SAVE_EXPR,
UNSAVE_EXPR,
ADDR_EXPR,
REFERENCE_EXPR,
ENTRY_VALUE_EXPR,
FDESC_EXPR,
COMPLEX_EXPR,
CONJ_EXPR,
REALPART_EXPR,
IMAGPART_EXPR,
PREDECREMENT_EXPR,
PREINCREMENT_EXPR,
POSTDECREMENT_EXPR,
POSTINCREMENT_EXPR,
VA_ARG_EXPR,
TRY_CATCH_EXPR,
TRY_FINALLY_EXPR,
DECL_EXPR,
LABEL_EXPR,
GOTO_EXPR,
GOTO_SUBROUTINE_EXPR,
RETURN_EXPR,
EXIT_EXPR,
LOOP_EXPR,
EXIT_BLOCK_EXPR,
SWITCH_EXPR,
CASE_LABEL_EXPR,
RESX_EXPR,
ASM_EXPR,
SSA_NAME,
PHI_NODE,
CATCH_EXPR,
EH_FILTER_EXPR,
SCEV_KNOWN,
SCEV_NOT_KNOWN,
POLYNOMIAL_CHREC,
STATEMENT_LIST,
VALUE_HANDLE,
TREE_BINFO,
  LAST_AND_UNUSED_TREE_CODE
};
extern const char tree_code_type[];
extern const unsigned char tree_code_length[];
extern const char *const tree_code_name[];
enum built_in_class
{
  NOT_BUILT_IN = 0,
  BUILT_IN_FRONTEND,
  BUILT_IN_MD,
  BUILT_IN_NORMAL
};
extern const char *const built_in_class_names[4];
enum built_in_function
{
BUILT_IN_ACOS,
BUILT_IN_ACOSF,
BUILT_IN_ACOSH,
BUILT_IN_ACOSHF,
BUILT_IN_ACOSHL,
BUILT_IN_ACOSL,
BUILT_IN_ASIN,
BUILT_IN_ASINF,
BUILT_IN_ASINH,
BUILT_IN_ASINHF,
BUILT_IN_ASINHL,
BUILT_IN_ASINL,
BUILT_IN_ATAN,
BUILT_IN_ATAN2,
BUILT_IN_ATAN2F,
BUILT_IN_ATAN2L,
BUILT_IN_ATANF,
BUILT_IN_ATANH,
BUILT_IN_ATANHF,
BUILT_IN_ATANHL,
BUILT_IN_ATANL,
BUILT_IN_CBRT,
BUILT_IN_CBRTF,
BUILT_IN_CBRTL,
BUILT_IN_CEIL,
BUILT_IN_CEILF,
BUILT_IN_CEILL,
BUILT_IN_COPYSIGN,
BUILT_IN_COPYSIGNF,
BUILT_IN_COPYSIGNL,
BUILT_IN_COS,
BUILT_IN_COSF,
BUILT_IN_COSH,
BUILT_IN_COSHF,
BUILT_IN_COSHL,
BUILT_IN_COSL,
BUILT_IN_DREM,
BUILT_IN_DREMF,
BUILT_IN_DREML,
BUILT_IN_ERF,
BUILT_IN_ERFC,
BUILT_IN_ERFCF,
BUILT_IN_ERFCL,
BUILT_IN_ERFF,
BUILT_IN_ERFL,
BUILT_IN_EXP,
BUILT_IN_EXP10,
BUILT_IN_EXP10F,
BUILT_IN_EXP10L,
BUILT_IN_EXP2,
BUILT_IN_EXP2F,
BUILT_IN_EXP2L,
BUILT_IN_EXPF,
BUILT_IN_EXPL,
BUILT_IN_EXPM1,
BUILT_IN_EXPM1F,
BUILT_IN_EXPM1L,
BUILT_IN_FABS,
BUILT_IN_FABSF,
BUILT_IN_FABSL,
BUILT_IN_FDIM,
BUILT_IN_FDIMF,
BUILT_IN_FDIML,
BUILT_IN_FLOOR,
BUILT_IN_FLOORF,
BUILT_IN_FLOORL,
BUILT_IN_FMA,
BUILT_IN_FMAF,
BUILT_IN_FMAL,
BUILT_IN_FMAX,
BUILT_IN_FMAXF,
BUILT_IN_FMAXL,
BUILT_IN_FMIN,
BUILT_IN_FMINF,
BUILT_IN_FMINL,
BUILT_IN_FMOD,
BUILT_IN_FMODF,
BUILT_IN_FMODL,
BUILT_IN_FREXP,
BUILT_IN_FREXPF,
BUILT_IN_FREXPL,
BUILT_IN_GAMMA,
BUILT_IN_GAMMAF,
BUILT_IN_GAMMAL,
BUILT_IN_HUGE_VAL,
BUILT_IN_HUGE_VALF,
BUILT_IN_HUGE_VALL,
BUILT_IN_HYPOT,
BUILT_IN_HYPOTF,
BUILT_IN_HYPOTL,
BUILT_IN_ILOGB,
BUILT_IN_ILOGBF,
BUILT_IN_ILOGBL,
BUILT_IN_INF,
BUILT_IN_INFF,
BUILT_IN_INFL,
BUILT_IN_J0,
BUILT_IN_J0F,
BUILT_IN_J0L,
BUILT_IN_J1,
BUILT_IN_J1F,
BUILT_IN_J1L,
BUILT_IN_JN,
BUILT_IN_JNF,
BUILT_IN_JNL,
BUILT_IN_LDEXP,
BUILT_IN_LDEXPF,
BUILT_IN_LDEXPL,
BUILT_IN_LGAMMA,
BUILT_IN_LGAMMAF,
BUILT_IN_LGAMMAL,
BUILT_IN_LLRINT,
BUILT_IN_LLRINTF,
BUILT_IN_LLRINTL,
BUILT_IN_LLROUND,
BUILT_IN_LLROUNDF,
BUILT_IN_LLROUNDL,
BUILT_IN_LOG,
BUILT_IN_LOG10,
BUILT_IN_LOG10F,
BUILT_IN_LOG10L,
BUILT_IN_LOG1P,
BUILT_IN_LOG1PF,
BUILT_IN_LOG1PL,
BUILT_IN_LOG2,
BUILT_IN_LOG2F,
BUILT_IN_LOG2L,
BUILT_IN_LOGB,
BUILT_IN_LOGBF,
BUILT_IN_LOGBL,
BUILT_IN_LOGF,
BUILT_IN_LOGL,
BUILT_IN_LRINT,
BUILT_IN_LRINTF,
BUILT_IN_LRINTL,
BUILT_IN_LROUND,
BUILT_IN_LROUNDF,
BUILT_IN_LROUNDL,
BUILT_IN_MODF,
BUILT_IN_MODFF,
BUILT_IN_MODFL,
BUILT_IN_NAN,
BUILT_IN_NANF,
BUILT_IN_NANL,
BUILT_IN_NANS,
BUILT_IN_NANSF,
BUILT_IN_NANSL,
BUILT_IN_NEARBYINT,
BUILT_IN_NEARBYINTF,
BUILT_IN_NEARBYINTL,
BUILT_IN_NEXTAFTER,
BUILT_IN_NEXTAFTERF,
BUILT_IN_NEXTAFTERL,
BUILT_IN_NEXTTOWARD,
BUILT_IN_NEXTTOWARDF,
BUILT_IN_NEXTTOWARDL,
BUILT_IN_POW,
BUILT_IN_POW10,
BUILT_IN_POW10F,
BUILT_IN_POW10L,
BUILT_IN_POWF,
BUILT_IN_POWL,
BUILT_IN_REMAINDER,
BUILT_IN_REMAINDERF,
BUILT_IN_REMAINDERL,
BUILT_IN_REMQUO,
BUILT_IN_REMQUOF,
BUILT_IN_REMQUOL,
BUILT_IN_RINT,
BUILT_IN_RINTF,
BUILT_IN_RINTL,
BUILT_IN_ROUND,
BUILT_IN_ROUNDF,
BUILT_IN_ROUNDL,
BUILT_IN_SCALB,
BUILT_IN_SCALBF,
BUILT_IN_SCALBL,
BUILT_IN_SCALBLN,
BUILT_IN_SCALBLNF,
BUILT_IN_SCALBLNL,
BUILT_IN_SCALBN,
BUILT_IN_SCALBNF,
BUILT_IN_SCALBNL,
BUILT_IN_SIGNBIT,
BUILT_IN_SIGNBITF,
BUILT_IN_SIGNBITL,
BUILT_IN_SIGNIFICAND,
BUILT_IN_SIGNIFICANDF,
BUILT_IN_SIGNIFICANDL,
BUILT_IN_SIN,
BUILT_IN_SINCOS,
BUILT_IN_SINCOSF,
BUILT_IN_SINCOSL,
BUILT_IN_SINF,
BUILT_IN_SINH,
BUILT_IN_SINHF,
BUILT_IN_SINHL,
BUILT_IN_SINL,
BUILT_IN_SQRT,
BUILT_IN_SQRTF,
BUILT_IN_SQRTL,
BUILT_IN_TAN,
BUILT_IN_TANF,
BUILT_IN_TANH,
BUILT_IN_TANHF,
BUILT_IN_TANHL,
BUILT_IN_TANL,
BUILT_IN_TGAMMA,
BUILT_IN_TGAMMAF,
BUILT_IN_TGAMMAL,
BUILT_IN_TRUNC,
BUILT_IN_TRUNCF,
BUILT_IN_TRUNCL,
BUILT_IN_Y0,
BUILT_IN_Y0F,
BUILT_IN_Y0L,
BUILT_IN_Y1,
BUILT_IN_Y1F,
BUILT_IN_Y1L,
BUILT_IN_YN,
BUILT_IN_YNF,
BUILT_IN_YNL,
BUILT_IN_CABS,
BUILT_IN_CABSF,
BUILT_IN_CABSL,
BUILT_IN_CACOS,
BUILT_IN_CACOSF,
BUILT_IN_CACOSH,
BUILT_IN_CACOSHF,
BUILT_IN_CACOSHL,
BUILT_IN_CACOSL,
BUILT_IN_CARG,
BUILT_IN_CARGF,
BUILT_IN_CARGL,
BUILT_IN_CASIN,
BUILT_IN_CASINF,
BUILT_IN_CASINH,
BUILT_IN_CASINHF,
BUILT_IN_CASINHL,
BUILT_IN_CASINL,
BUILT_IN_CATAN,
BUILT_IN_CATANF,
BUILT_IN_CATANH,
BUILT_IN_CATANHF,
BUILT_IN_CATANHL,
BUILT_IN_CATANL,
BUILT_IN_CCOS,
BUILT_IN_CCOSF,
BUILT_IN_CCOSH,
BUILT_IN_CCOSHF,
BUILT_IN_CCOSHL,
BUILT_IN_CCOSL,
BUILT_IN_CEXP,
BUILT_IN_CEXPF,
BUILT_IN_CEXPL,
BUILT_IN_CIMAG,
BUILT_IN_CIMAGF,
BUILT_IN_CIMAGL,
BUILT_IN_CONJ,
BUILT_IN_CONJF,
BUILT_IN_CONJL,
BUILT_IN_CPOW,
BUILT_IN_CPOWF,
BUILT_IN_CPOWL,
BUILT_IN_CPROJ,
BUILT_IN_CPROJF,
BUILT_IN_CPROJL,
BUILT_IN_CREAL,
BUILT_IN_CREALF,
BUILT_IN_CREALL,
BUILT_IN_CSIN,
BUILT_IN_CSINF,
BUILT_IN_CSINH,
BUILT_IN_CSINHF,
BUILT_IN_CSINHL,
BUILT_IN_CSINL,
BUILT_IN_CSQRT,
BUILT_IN_CSQRTF,
BUILT_IN_CSQRTL,
BUILT_IN_CTAN,
BUILT_IN_CTANF,
BUILT_IN_CTANH,
BUILT_IN_CTANHF,
BUILT_IN_CTANHL,
BUILT_IN_CTANL,
BUILT_IN_BCMP,
BUILT_IN_BCOPY,
BUILT_IN_BZERO,
BUILT_IN_FFS,
BUILT_IN_FFSL,
BUILT_IN_FFSLL,
BUILT_IN_INDEX,
BUILT_IN_MEMCMP,
BUILT_IN_MEMCPY,
BUILT_IN_MEMMOVE,
BUILT_IN_MEMPCPY,
BUILT_IN_MEMSET,
BUILT_IN_RINDEX,
BUILT_IN_STPCPY,
BUILT_IN_STRCAT,
BUILT_IN_STRCHR,
BUILT_IN_STRCMP,
BUILT_IN_STRCPY,
BUILT_IN_STRCSPN,
BUILT_IN_STRDUP,
BUILT_IN_STRLEN,
BUILT_IN_STRNCAT,
BUILT_IN_STRNCMP,
BUILT_IN_STRNCPY,
BUILT_IN_STRPBRK,
BUILT_IN_STRRCHR,
BUILT_IN_STRSPN,
BUILT_IN_STRSTR,
BUILT_IN_FPRINTF,
BUILT_IN_FPRINTF_UNLOCKED,
BUILT_IN_FPUTC,
BUILT_IN_FPUTC_UNLOCKED,
BUILT_IN_FPUTS,
BUILT_IN_FPUTS_UNLOCKED,
BUILT_IN_FSCANF,
BUILT_IN_FWRITE,
BUILT_IN_FWRITE_UNLOCKED,
BUILT_IN_PRINTF,
BUILT_IN_PRINTF_UNLOCKED,
BUILT_IN_PUTCHAR,
BUILT_IN_PUTCHAR_UNLOCKED,
BUILT_IN_PUTS,
BUILT_IN_PUTS_UNLOCKED,
BUILT_IN_SCANF,
BUILT_IN_SNPRINTF,
BUILT_IN_SPRINTF,
BUILT_IN_SSCANF,
BUILT_IN_VFPRINTF,
BUILT_IN_VFSCANF,
BUILT_IN_VPRINTF,
BUILT_IN_VSCANF,
BUILT_IN_VSNPRINTF,
BUILT_IN_VSPRINTF,
BUILT_IN_VSSCANF,
BUILT_IN_ISALNUM,
BUILT_IN_ISALPHA,
BUILT_IN_ISASCII,
BUILT_IN_ISBLANK,
BUILT_IN_ISCNTRL,
BUILT_IN_ISDIGIT,
BUILT_IN_ISGRAPH,
BUILT_IN_ISLOWER,
BUILT_IN_ISPRINT,
BUILT_IN_ISPUNCT,
BUILT_IN_ISSPACE,
BUILT_IN_ISUPPER,
BUILT_IN_ISXDIGIT,
BUILT_IN_TOASCII,
BUILT_IN_TOLOWER,
BUILT_IN_TOUPPER,
BUILT_IN_ISWALNUM,
BUILT_IN_ISWALPHA,
BUILT_IN_ISWBLANK,
BUILT_IN_ISWCNTRL,
BUILT_IN_ISWDIGIT,
BUILT_IN_ISWGRAPH,
BUILT_IN_ISWLOWER,
BUILT_IN_ISWPRINT,
BUILT_IN_ISWPUNCT,
BUILT_IN_ISWSPACE,
BUILT_IN_ISWUPPER,
BUILT_IN_ISWXDIGIT,
BUILT_IN_TOWLOWER,
BUILT_IN_TOWUPPER,
BUILT_IN_ABORT,
BUILT_IN_ABS,
BUILT_IN_AGGREGATE_INCOMING_ADDRESS,
BUILT_IN_ALLOCA,
BUILT_IN_APPLY,
BUILT_IN_APPLY_ARGS,
BUILT_IN_ARGS_INFO,
BUILT_IN_CALLOC,
BUILT_IN_CLASSIFY_TYPE,
BUILT_IN_CLZ,
BUILT_IN_CLZL,
BUILT_IN_CLZLL,
BUILT_IN_CONSTANT_P,
BUILT_IN_CTZ,
BUILT_IN_CTZL,
BUILT_IN_CTZLL,
BUILT_IN_DCGETTEXT,
BUILT_IN_DGETTEXT,
BUILT_IN_DWARF_CFA,
BUILT_IN_DWARF_SP_COLUMN,
BUILT_IN_EH_RETURN,
BUILT_IN_EH_RETURN_DATA_REGNO,
BUILT_IN_EXECL,
BUILT_IN_EXECLP,
BUILT_IN_EXECLE,
BUILT_IN_EXECV,
BUILT_IN_EXECVP,
BUILT_IN_EXECVE,
BUILT_IN_EXIT,
BUILT_IN_EXPECT,
BUILT_IN_EXTEND_POINTER,
BUILT_IN_EXTRACT_RETURN_ADDR,
BUILT_IN_FORK,
BUILT_IN_FRAME_ADDRESS,
BUILT_IN_FROB_RETURN_ADDR,
BUILT_IN_GETTEXT,
BUILT_IN_IMAXABS,
BUILT_IN_INIT_DWARF_REG_SIZES,
BUILT_IN_FINITE,
BUILT_IN_FINITEF,
BUILT_IN_FINITEL,
BUILT_IN_ISINF,
BUILT_IN_ISINFF,
BUILT_IN_ISINFL,
BUILT_IN_ISNAN,
BUILT_IN_ISNANF,
BUILT_IN_ISNANL,
BUILT_IN_ISGREATER,
BUILT_IN_ISGREATEREQUAL,
BUILT_IN_ISLESS,
BUILT_IN_ISLESSEQUAL,
BUILT_IN_ISLESSGREATER,
BUILT_IN_ISUNORDERED,
BUILT_IN_LABS,
BUILT_IN_LLABS,
BUILT_IN_LONGJMP,
BUILT_IN_MALLOC,
BUILT_IN_NEXT_ARG,
BUILT_IN_PARITY,
BUILT_IN_PARITYL,
BUILT_IN_PARITYLL,
BUILT_IN_POPCOUNT,
BUILT_IN_POPCOUNTL,
BUILT_IN_POPCOUNTLL,
BUILT_IN_PREFETCH,
BUILT_IN_RETURN,
BUILT_IN_RETURN_ADDRESS,
BUILT_IN_SAVEREGS,
BUILT_IN_SETJMP,
BUILT_IN_STACK_ALLOC,
BUILT_IN_STACK_SAVE,
BUILT_IN_STACK_RESTORE,
BUILT_IN_STDARG_START,
BUILT_IN_STRFMON,
BUILT_IN_STRFTIME,
BUILT_IN_TRAP,
BUILT_IN_UNWIND_INIT,
BUILT_IN_UPDATE_SETJMP_BUF,
BUILT_IN_VA_COPY,
BUILT_IN_VA_END,
BUILT_IN_VA_START,
BUILT_IN__EXIT,
BUILT_IN__EXIT2,
BUILT_IN_INIT_TRAMPOLINE,
BUILT_IN_ADJUST_TRAMPOLINE,
BUILT_IN_NONLOCAL_GOTO,
BUILT_IN_PROFILE_FUNC_ENTER,
BUILT_IN_PROFILE_FUNC_EXIT,
  END_BUILTINS
};
extern const char *const built_in_names[(int) END_BUILTINS];
extern tree built_in_decls[(int) END_BUILTINS];
extern tree implicit_built_in_decls[(int) END_BUILTINS];
union tree_ann_d;
struct tree_common
{
  tree chain;
  tree type;
  union tree_ann_d *ann;
  unsigned int code : 8;
  unsigned side_effects_flag : 1;
  unsigned constant_flag : 1;
  unsigned addressable_flag : 1;
  unsigned volatile_flag : 1;
  unsigned readonly_flag : 1;
  unsigned unsigned_flag : 1;
  unsigned asm_written_flag: 1;
  unsigned nowarning_flag : 1;
  unsigned used_flag : 1;
  unsigned nothrow_flag : 1;
  unsigned static_flag : 1;
  unsigned public_flag : 1;
  unsigned private_flag : 1;
  unsigned protected_flag : 1;
  unsigned deprecated_flag : 1;
  unsigned invariant_flag : 1;
  unsigned lang_flag_0 : 1;
  unsigned lang_flag_1 : 1;
  unsigned lang_flag_2 : 1;
  unsigned lang_flag_3 : 1;
  unsigned lang_flag_4 : 1;
  unsigned lang_flag_5 : 1;
  unsigned lang_flag_6 : 1;
  unsigned visited : 1;
};
struct tree_int_cst
{
  struct tree_common common;
  struct tree_int_cst_lowhi {
    unsigned long low;
    long high;
  } int_cst;
};
struct real_value;
struct tree_real_cst
{
  struct tree_common common;
  struct real_value * real_cst_ptr;
};
struct tree_string
{
  struct tree_common common;
  int length;
  const char *pointer;
};
struct tree_complex
{
  struct tree_common common;
  tree real;
  tree imag;
};
struct tree_vector
{
  struct tree_common common;
  tree elements;
};
struct tree_identifier
{
  struct tree_common common;
  struct ht_identifier id;
};
struct tree_list
{
  struct tree_common common;
  tree purpose;
  tree value1;
};
struct tree_vec
{
  struct tree_common common;
  int length;
  tree a[1];
};
struct tree_exp
{
  struct tree_common common;
  source_locus locus;
  int complexity;
  tree block;
  tree
    operands[1];
};
struct ptr_info_def;
struct tree_ssa_name
{
  struct tree_common common;
  tree var;
  unsigned int version;
  struct ptr_info_def *ptr_info;
  tree value1_handle;
  void * aux;
};
struct edge_def;
struct phi_arg_d
{
  tree def;
  struct edge_def * e;
  unsigned char nonzero;
};
struct tree_phi_node
{
  struct tree_common common;
  tree result;
  int num_args;
  int capacity;
  int rewritten;
  struct phi_arg_d a[1];
};
struct varray_head_tag;
struct tree_block
{
  struct tree_common common;
  unsigned handler_block_flag : 1;
  unsigned abstract_flag : 1;
  unsigned block_num : 30;
  tree vars;
  tree subblocks;
  tree supercontext;
  tree abstract_origin;
  tree fragment_origin;
  tree fragment_chain;
};
struct die_struct;
struct tree_type
{
  struct tree_common common;
  tree value1s;
  tree size;
  tree size_unit;
  tree attributes;
  unsigned int uid;
  unsigned int precision : 9;
  unsigned int mode : 7;
  unsigned string_flag : 1;
  unsigned no_force_blk_flag : 1;
  unsigned needs_constructing_flag : 1;
  unsigned transparent_union_flag : 1;
  unsigned packed_flag : 1;
  unsigned restrict_flag : 1;
  unsigned spare : 2;
  unsigned lang_flag_0 : 1;
  unsigned lang_flag_1 : 1;
  unsigned lang_flag_2 : 1;
  unsigned lang_flag_3 : 1;
  unsigned lang_flag_4 : 1;
  unsigned lang_flag_5 : 1;
  unsigned lang_flag_6 : 1;
  unsigned user_align : 1;
  unsigned int align;
  tree pointer_to;
  tree reference_to;
  union tree_type_symtab {
    int address;
    char * pointer;
    struct die_struct * die;
  }
                    symtab;
  tree name;
  tree minval;
  tree maxval;
  tree next_variant;
  tree main_variant;
  tree binfo;
  tree context;
  long alias_set;
  struct lang_type *lang_specific;
};
struct tree_binfo
{
  struct tree_common common;
  tree offset;
  tree vtable;
  tree virtuals;
  tree base_types;
  tree vptr_field;
  tree base_accesses;
  tree inheritance;
  tree lang_slots[1];
};
extern unsigned binfo_lang_slots;
enum symbol_visibility
{
  VISIBILITY_DEFAULT,
  VISIBILITY_INTERNAL,
  VISIBILITY_HIDDEN,
  VISIBILITY_PROTECTED
};
struct function;
union alias_var_def;
struct tree_decl
{
  struct tree_common common;
  location_t locus;
  unsigned int uid;
  tree size;
  unsigned int mode : 8;
  unsigned external_flag : 1;
  unsigned nonlocal_flag : 1;
  unsigned regdecl_flag : 1;
  unsigned inline_flag : 1;
  unsigned bit_field_flag : 1;
  unsigned virtual_flag : 1;
  unsigned ignored_flag : 1;
  unsigned abstract_flag : 1;
  unsigned in_system_header_flag : 1;
  unsigned common_flag : 1;
  unsigned defer_output : 1;
  unsigned transparent_union : 1;
  unsigned static_ctor_flag : 1;
  unsigned static_dtor_flag : 1;
  unsigned artificial_flag : 1;
  unsigned weak_flag : 1;
  unsigned non_addr_const_p : 1;
  unsigned no_instrument_function_entry_exit : 1;
  unsigned comdat_flag : 1;
  unsigned malloc_flag : 1;
  unsigned no_limit_stack : 1;
  unsigned int built_in_class : 2;
  unsigned pure_flag : 1;
  unsigned non_addressable : 1;
  unsigned user_align : 1;
  unsigned uninlinable : 1;
  unsigned thread_local_flag : 1;
  unsigned declared_inline_flag : 1;
  unsigned seen_in_bind_expr : 1;
  unsigned int visibility : 2;
  unsigned lang_flag_0 : 1;
  unsigned lang_flag_1 : 1;
  unsigned lang_flag_2 : 1;
  unsigned lang_flag_3 : 1;
  unsigned lang_flag_4 : 1;
  unsigned lang_flag_5 : 1;
  unsigned lang_flag_6 : 1;
  unsigned lang_flag_7 : 1;
  unsigned needs_to_live_in_memory : 1;
  unsigned possibly_inlined : 1;
  union tree_decl_u1 {
    enum built_in_function f;
    long i;
    struct tree_decl_u1_a {
      unsigned int align : 24;
      unsigned int off_align : 8;
    } a;
  } u1;
  tree size_unit;
  tree name;
  tree context;
  tree arguments;
  tree result;
  tree initial;
  tree abstract_origin;
  tree assembler_name;
  tree section_name;
  tree attributes;
  rtx rtl;
  union tree_decl_u2 {
    struct function * f;
    rtx r;
    tree t;
    int i;
  } u2;
  tree saved_tree;
  tree inlined_fns;
  tree vindex;
  long pointer_alias_set;
  union alias_var_def * alias_var;
  struct lang_decl *lang_specific;
};
struct tree_statement_list_node
 
{
  struct tree_statement_list_node *prev;
  struct tree_statement_list_node *next;
  tree stmt;
};
struct tree_statement_list
 
{
  struct tree_common common;
  struct tree_statement_list_node *head;
  struct tree_statement_list_node *tail;
};
struct value_set;
struct tree_value_handle
{
  struct tree_common common;
  struct value_set * expr_set;
  unsigned int id;
};
enum tree_node_structure_enum {
  TS_COMMON,
  TS_INT_CST,
  TS_REAL_CST,
  TS_VECTOR,
  TS_STRING,
  TS_COMPLEX,
  TS_IDENTIFIER,
  TS_DECL,
  TS_TYPE,
  TS_LIST,
  TS_VEC,
  TS_EXP,
  TS_SSA_NAME,
  TS_PHI_NODE,
  TS_BLOCK,
  TS_BINFO,
  TS_STATEMENT_LIST,
  TS_VALUE_HANDLE,
  LAST_TS_ENUM
};
union tree_node
{
  struct tree_common common;
  struct tree_int_cst int_cst;
  struct tree_real_cst real_cst;
  struct tree_vector vector;
  struct tree_string string;
  struct tree_complex complex;
  struct tree_identifier identifier;
  struct tree_decl decl;
  struct tree_type type;
  struct tree_list list;
  struct tree_vec vec;
  struct tree_exp exp;
  struct tree_ssa_name ssa_name;
  struct tree_phi_node phi;
  struct tree_block block;
  struct tree_binfo binfo;
  struct tree_statement_list stmt_list;
  struct tree_value_handle value_handle;
};
enum tree_index
{
  TI_ERROR_MARK,
  TI_INTQI_TYPE,
  TI_INTHI_TYPE,
  TI_INTSI_TYPE,
  TI_INTDI_TYPE,
  TI_INTTI_TYPE,
  TI_UINTQI_TYPE,
  TI_UINTHI_TYPE,
  TI_UINTSI_TYPE,
  TI_UINTDI_TYPE,
  TI_UINTTI_TYPE,
  TI_INTEGER_ZERO,
  TI_INTEGER_ONE,
  TI_INTEGER_MINUS_ONE,
  TI_NULL_POINTER,
  TI_SIZE_ZERO,
  TI_SIZE_ONE,
  TI_BITSIZE_ZERO,
  TI_BITSIZE_ONE,
  TI_BITSIZE_UNIT,
  TI_PUBLIC,
  TI_PROTECTED,
  TI_PRIVATE,
  TI_BOOLEAN_FALSE,
  TI_BOOLEAN_TRUE,
  TI_COMPLEX_INTEGER_TYPE,
  TI_COMPLEX_FLOAT_TYPE,
  TI_COMPLEX_DOUBLE_TYPE,
  TI_COMPLEX_LONG_DOUBLE_TYPE,
  TI_FLOAT_TYPE,
  TI_DOUBLE_TYPE,
  TI_LONG_DOUBLE_TYPE,
  TI_FLOAT_PTR_TYPE,
  TI_DOUBLE_PTR_TYPE,
  TI_LONG_DOUBLE_PTR_TYPE,
  TI_INTEGER_PTR_TYPE,
  TI_VOID_TYPE,
  TI_PTR_TYPE,
  TI_CONST_PTR_TYPE,
  TI_SIZE_TYPE,
  TI_PID_TYPE,
  TI_PTRDIFF_TYPE,
  TI_VA_LIST_TYPE,
  TI_BOOLEAN_TYPE,
  TI_FILEPTR_TYPE,
  TI_VOID_LIST_NODE,
  TI_MAIN_IDENTIFIER,
  TI_MAX
};
extern tree global_trees[TI_MAX];
enum integer_type_kind
{
  itk_char,
  itk_signed_char,
  itk_unsigned_char,
  itk_short,
  itk_unsigned_short,
  itk_int,
  itk_unsigned_int,
  itk_long,
  itk_unsigned_long,
  itk_long_long,
  itk_unsigned_long_long,
  itk_none
};
typedef enum integer_type_kind integer_type_kind;
extern tree integer_types[itk_none];
enum tls_model {
  TLS_MODEL_GLOBAL_DYNAMIC = 1,
  TLS_MODEL_LOCAL_DYNAMIC,
  TLS_MODEL_INITIAL_EXEC,
  TLS_MODEL_LOCAL_EXEC
};
extern enum tls_model flag_tls_default;
enum ptrmemfunc_vbit_where_t
{
  ptrmemfunc_vbit_in_pfn,
  ptrmemfunc_vbit_in_delta
};
extern tree frame_base_decl;
extern tree decl_assembler_name (tree);
extern size_t tree_size (tree);
extern tree make_node_stat (enum tree_code );
extern tree copy_node_stat (tree );
extern tree copy_list (tree);
extern tree make_tree_binfo_stat (unsigned );
extern tree make_tree_vec_stat (int );
extern tree make_phi_node (tree, int);
extern void init_phinodes (void);
extern void fini_phinodes (void);
extern void release_phi_node (tree);
extern void init_ssanames (void);
extern void fini_ssanames (void);
extern tree make_ssa_name (tree, tree);
extern tree duplicate_ssa_name (tree, tree);
extern void release_ssa_name (tree);
extern tree get_identifier (const char *);
extern tree get_identifier_with_length (const char *, size_t);
extern tree maybe_get_identifier (const char *);
extern tree build (enum tree_code, tree, ...);
extern tree build_nt (enum tree_code, ...);
extern tree build0_stat (enum tree_code, tree );
extern tree build1_stat (enum tree_code, tree, tree );
extern tree build2_stat (enum tree_code, tree, tree, tree );
extern tree build3_stat (enum tree_code, tree, tree, tree, tree );
extern tree build4_stat (enum tree_code, tree, tree, tree, tree,
    tree );
extern tree build_int_2_wide (unsigned long, long);
extern tree build_vector (tree, tree);
extern tree build_constructor (tree, tree);
extern tree build_real_from_int_cst (tree, tree);
extern tree build_complex (tree, tree, tree);
extern tree build_string (int, const char *);
extern tree build_tree_list_stat (tree, tree );
extern tree build_decl_stat (enum tree_code, tree, tree );
extern tree build_block (tree, tree, tree, tree, tree);
extern void annotate_with_file_line (tree, const char *, int);
extern void annotate_with_locus (tree, location_t);
extern tree build_empty_stmt (void);
extern tree make_signed_type (int);
extern tree make_unsigned_type (int);
extern void initialize_sizetypes (void);
extern void set_sizetype (tree);
extern void fixup_unsigned_type (tree);
extern tree build_pointer_type_for_mode (tree, enum machine_mode, unsigned char);
extern tree build_pointer_type (tree);
extern tree build_reference_type_for_mode (tree, enum machine_mode, unsigned char);
extern tree build_reference_type (tree);
extern tree build_vector_type_for_mode (tree, enum machine_mode);
extern tree build_vector_type (tree innertype, int nunits);
extern tree build_type_no_quals (tree);
extern tree build_index_type (tree);
extern tree build_index_2_type (tree, tree);
extern tree build_array_type (tree, tree);
extern tree build_function_type (tree, tree);
extern tree build_function_type_list (tree, ...);
extern tree build_method_type_directly (tree, tree, tree);
extern tree build_method_type (tree, tree);
extern tree build_offset_type (tree, tree);
extern tree build_complex_type (tree);
extern tree array_type_nelts (tree);
extern tree value1_member (tree, tree);
extern tree purpose_member (tree, tree);
extern tree binfo_member (tree, tree);
extern int attribute_list_equal (tree, tree);
extern int attribute_list_contained (tree, tree);
extern int tree_int_cst_equal (tree, tree);
extern int tree_int_cst_lt (tree, tree);
extern int tree_int_cst_compare (tree, tree);
extern int host_integerp (tree, int);
extern long tree_low_cst (tree, int);
extern int tree_int_cst_msb (tree);
extern int tree_int_cst_sgn (tree);
extern int tree_expr_nonnegative_p (tree);
extern int rtl_expr_nonnegative_p (rtx);
extern tree get_inner_array_type (tree);
extern tree make_tree (tree, rtx);
extern tree build_type_attribute_variant (tree, tree);
extern tree build_decl_attribute_variant (tree, tree);
struct attribute_spec
{
  const char *const name;
  const int min_length;
  const int max_length;
  const unsigned char decl_required;
  const unsigned char type_required;
  const unsigned char function_type_required;
  tree (*const handler) (tree *node, tree name, tree args,
     int flags, unsigned char *no_add_attrs);
};
enum attribute_flags
{
  ATTR_FLAG_DECL_NEXT = 1,
  ATTR_FLAG_FUNCTION_NEXT = 2,
  ATTR_FLAG_ARRAY_NEXT = 4,
  ATTR_FLAG_TYPE_IN_PLACE = 8,
  ATTR_FLAG_BUILT_IN = 16
};
extern tree merge_decl_attributes (tree, tree);
extern tree merge_type_attributes (tree, tree);
extern void default_register_cpp_builtins (struct cpp_reader *);
extern void split_specs_attrs (tree, tree *, tree *);
extern tree strip_attrs (tree);
extern int valid_machine_attribute (tree, tree, tree, tree);
extern int is_attribute_p (const char *, tree);
extern tree lookup_attribute (const char *, tree);
extern tree merge_attributes (tree, tree);
extern unsigned char check_qualified_type (tree, tree, int);
extern tree get_qualified_type (tree, int);
extern tree build_qualified_type (tree, int);
extern tree build_type_copy (tree);
extern void finish_builtin_struct (tree, const char *,
        tree, tree);
extern void layout_type (tree);
typedef struct record_layout_info_s
{
  tree t;
  tree offset;
  unsigned int offset_align;
  tree bitpos;
  unsigned int record_align;
  unsigned int unpacked_align;
  tree prev_field;
  tree pending_statics;
  int remaining_in_alignment;
  int packed_maybe_necessary;
} *record_layout_info;
extern void set_lang_adjust_rli (void (*) (record_layout_info));
extern record_layout_info start_record_layout (tree);
extern tree bit_from_pos (tree, tree);
extern tree byte_from_pos (tree, tree);
extern void pos_from_bit (tree *, tree *, unsigned int, tree);
extern void normalize_offset (tree *, tree *, unsigned int);
extern tree rli_size_unit_so_far (record_layout_info);
extern tree rli_size_so_far (record_layout_info);
extern void normalize_rli (record_layout_info);
extern void place_field (record_layout_info, tree);
extern void compute_record_mode (tree);
extern void finish_record_layout (record_layout_info, int);
extern tree type_hash_canon (unsigned int, tree);
extern void layout_decl (tree, unsigned);
extern enum machine_mode mode_for_size_tree (tree, enum mode_class, int);
extern tree non_lvalue (tree);
extern tree pedantic_non_lvalue (tree);
extern tree convert (tree, tree);
extern unsigned int expr_align (tree);
extern tree expr_first (tree);
extern tree expr_last (tree);
extern tree expr_only (tree);
extern tree size_in_bytes (tree);
extern long int_size_in_bytes (tree);
extern tree bit_position (tree);
extern long int_bit_position (tree);
extern tree byte_position (tree);
extern long int_byte_position (tree);
enum size_type_kind
{
  SIZETYPE,
  SSIZETYPE,
  USIZETYPE,
  BITSIZETYPE,
  SBITSIZETYPE,
  UBITSIZETYPE,
  TYPE_KIND_LAST};
extern tree sizetype_tab[(int) TYPE_KIND_LAST];
extern tree size_binop (enum tree_code, tree, tree);
extern tree size_diffop (tree, tree);
extern tree size_int_wide (long, enum size_type_kind);
extern tree size_int_type_wide (long, tree);
extern tree round_up (tree, int);
extern tree round_down (tree, int);
extern tree get_pending_sizes (void);
extern void put_pending_size (tree);
extern void put_pending_sizes (tree);
extern unsigned int maximum_field_alignment;
extern unsigned int set_alignment;
extern tree chainon (tree, tree);
extern tree tree_cons_stat (tree, tree, tree );
extern tree tree_last (tree);
extern tree nreverse (tree);
extern int list_length (tree);
extern int fields_length (tree);
extern unsigned char initializer_zerop (tree);
extern void categorize_ctor_elements (tree, long *, long *);
extern long count_type_elements (tree);
extern int mostly_zeros_p (tree);
extern void add_var_to_bind_expr (tree, tree);
extern int integer_zerop (tree);
extern int integer_onep (tree);
extern int integer_all_onesp (tree);
extern int integer_pow2p (tree);
extern int integer_nonzerop (tree);
extern int staticp (tree);
extern tree save_expr (tree);
extern tree skip_simple_arithmetic (tree);
extern int first_rtl_op (enum tree_code);
enum tree_node_structure_enum tree_node_structure (tree);
extern tree unsave_expr (tree);
extern void unsave_expr_1 (tree);
extern int unsafe_for_reeval (tree);
extern unsigned char contains_placeholder_p (tree);
extern unsigned char type_contains_placeholder_p (tree);
extern int has_cleanups (tree);
extern tree substitute_in_expr (tree, tree, tree);
extern tree substitute_placeholder_in_expr (tree, tree);
extern tree variable_size (tree);
extern tree stabilize_reference (tree);
extern tree stabilize_reference_1 (tree);
extern tree get_unwidened (tree, tree);
extern tree get_narrower (tree, int *);
extern tree get_inner_reference (tree, long *, long *,
     tree *, enum machine_mode *, int *, int *);
extern int handled_component_p (tree);
extern tree array_ref_element_size (tree);
extern tree array_ref_low_bound (tree);
extern tree component_ref_field_offset (tree);
extern tree get_containing_scope (tree);
extern tree decl_function_context (tree);
extern tree decl_type_context (tree);
extern int real_zerop (tree);
extern int pedantic_lvalues;
extern tree current_function_decl;
extern tree current_function_func_begin_label;
extern tree current_file_decl;
extern int all_types_permanent;
extern tree poplevel (int, int, int);
extern tree builtin_function (const char *, tree, int, enum built_in_class,
         const char *, tree);
extern unsigned crc32_string (unsigned, const char *);
extern void clean_symbol_name (char *);
extern tree get_file_function_name_long (const char *);
extern tree get_set_constructor_bits (tree, char *, int);
extern tree get_set_constructor_bytes (tree, unsigned char *, int);
extern tree get_callee_fndecl (tree);
extern void change_decl_assembler_name (tree, tree);
extern int type_num_arguments (tree);
extern tree lhd_unsave_expr_now (tree);
extern unsigned char associative_tree_code (enum tree_code);
extern unsigned char commutative_tree_code (enum tree_code);
extern void expand_fixups (rtx);
extern void expand_expr_stmt (tree);
extern void expand_expr_stmt_value (tree, int, int);
extern int warn_if_unused_value (tree, location_t);
extern void expand_decl_init (tree);
extern void expand_label (tree);
extern void expand_goto (tree);
extern void expand_asm (tree, int);
extern void expand_start_cond (tree, int);
extern void expand_end_cond (void);
extern void expand_start_else (void);
extern void expand_start_elseif (tree);
extern void expand_stack_alloc (tree, tree);
extern rtx expand_stack_save (void);
extern void expand_stack_restore (tree);
extern void expand_return (tree);
extern void expand_start_bindings_and_block (int, tree);
extern void expand_end_bindings (tree, int, int);
extern void warn_about_unused_variables (tree);
extern void start_cleanup_deferral (void);
extern void end_cleanup_deferral (void);
extern int is_body_block (tree);
extern int conditional_context (void);
extern struct nesting * current_nesting_level (void);
extern tree last_cleanup_this_contour (void);
extern void expand_start_case (int, tree, tree, const char *);
extern void expand_end_case_type (tree, tree);
extern int add_case_node (tree, tree, tree, tree *, unsigned char);
extern int pushcase (tree, tree (*) (tree, tree), tree, tree *);
extern int pushcase_range (tree, tree, tree (*) (tree, tree), tree, tree *);
extern void using_eh_for_cleanups (void);
extern tree fold (tree);
extern tree fold_initializer (tree);
extern tree fold_convert (tree, tree);
extern tree fold_single_bit_test (enum tree_code, tree, tree, tree);
extern tree fold_abs_const (tree, tree);
extern int force_fit_type (tree, int);
extern int add_double (unsigned long, long,
         unsigned long, long,
         unsigned long *, long *);
extern int neg_double (unsigned long, long,
         unsigned long *, long *);
extern int mul_double (unsigned long, long,
         unsigned long, long,
         unsigned long *, long *);
extern void lshift_double (unsigned long, long,
      long, unsigned int,
      unsigned long *, long *, int);
extern void rshift_double (unsigned long, long,
      long, unsigned int,
      unsigned long *, long *, int);
extern void lrotate_double (unsigned long, long,
       long, unsigned int,
       unsigned long *, long *);
extern void rrotate_double (unsigned long, long,
       long, unsigned int,
       unsigned long *, long *);
extern int div_and_round_double (enum tree_code, int, unsigned long,
     long, unsigned long,
     long, unsigned long *,
     long *, unsigned long *,
     long *);
enum operand_equal_flag
{
  OEP_ONLY_CONST = 1,
  OEP_PURE_SAME = 2
};
extern int operand_equal_p (tree, tree, unsigned int);
extern tree omit_one_operand (tree, tree, tree);
extern tree omit_two_operands (tree, tree, tree, tree);
extern tree invert_truthvalue (tree);
extern tree nondestructive_fold_unary_to_constant (enum tree_code, tree, tree);
extern tree nondestructive_fold_binary_to_constant (enum tree_code, tree, tree, tree);
extern tree fold_read_from_constant_string (tree);
extern tree int_const_binop (enum tree_code, tree, tree, int);
extern tree build_fold_addr_expr (tree);
extern tree build_fold_addr_expr_with_type (tree, tree);
extern tree build_fold_indirect_ref (tree);
extern unsigned char tree_swap_operands_p (tree, tree, unsigned char);
extern enum tree_code swap_tree_comparison (enum tree_code);
extern tree fold_builtin (tree);
extern enum built_in_function builtin_mathfn_code (tree);
extern tree build_function_call_expr (tree, tree);
extern tree mathfn_built_in (tree, enum built_in_function fn);
extern tree strip_float_extensions (tree);
extern tree simplify_builtin (tree, int);
extern tree c_strlen (tree, int);
extern tree std_gimplify_va_arg_expr (tree, tree, tree *, tree *);
extern tree strip_float_extensions (tree);
extern void record_component_aliases (tree);
extern long get_alias_set (tree);
extern int alias_sets_conflict_p (long, long);
extern int alias_sets_might_conflict_p (long, long);
extern int readonly_fields_p (tree);
extern int objects_must_conflict_p (tree, tree);
extern int really_constant_p (tree);
extern int int_fits_type_p (tree, tree);
extern unsigned char variably_modified_type_p (tree, tree);
extern int tree_log2 (tree);
extern int tree_floor_log2 (tree);
extern int simple_cst_equal (tree, tree);
extern unsigned int iterative_hash_expr (tree, unsigned int);
extern int compare_tree_int (tree, unsigned long);
extern int type_list_equal (tree, tree);
extern int chain_member (tree, tree);
extern tree type_hash_lookup (unsigned int, tree);
extern void type_hash_add (unsigned int, tree);
extern int simple_cst_list_equal (tree, tree);
extern void dump_tree_statistics (void);
extern void expand_function_end (void);
extern void expand_function_start (tree);
extern void expand_pending_sizes (tree);
extern void recompute_tree_invarant_for_addr_expr (tree);
extern unsigned char needs_to_live_in_memory (tree);
extern tree make_vector (enum machine_mode, tree, int);
extern tree reconstruct_complex_type (tree, tree);
extern int real_onep (tree);
extern int real_twop (tree);
extern int real_minus_onep (tree);
extern void init_ttree (void);
extern void build_common_tree_nodes (int);
extern void build_common_tree_nodes_2 (int);
extern tree build_range_type (tree, tree, tree);
extern void expand_main_function (void);
extern void init_dummy_function_start (void);
extern void expand_dummy_function_end (void);
extern void init_function_for_compilation (void);
extern void allocate_struct_function (tree);
extern void init_function_start (tree);
extern unsigned char use_register_for_decl (tree);
extern void assign_parms (tree);
extern void setjmp_vars_warning (tree);
extern void setjmp_args_warning (void);
extern void init_temp_slots (void);
extern void combine_temp_slots (void);
extern void free_temp_slots (void);
extern void pop_temp_slots (void);
extern void push_temp_slots (void);
extern void preserve_temp_slots (rtx);
extern void preserve_rtl_expr_temps (tree);
extern int aggregate_value_p (tree, tree);
extern void push_function_context (void);
extern void pop_function_context (void);
extern void push_function_context_to (tree);
extern void pop_function_context_from (tree);
extern void print_rtl (FILE *, rtx);
extern void debug_tree (tree);
extern void print_node (FILE *, const char *, tree, int);
extern void print_node_brief (FILE *, const char *, tree, int);
extern void indent_to (FILE *, int);
extern unsigned char debug_find_tree (tree, tree);
extern rtx expand_builtin_return_addr (enum built_in_function, int, rtx);
extern void check_max_integer_computation_mode (tree);
extern rtx emit_line_note (location_t);
extern int flags_from_decl_or_type (tree);
extern int call_expr_flags (tree);
extern int setjmp_call_p (tree);
extern unsigned char alloca_call_p (tree);
extern tree decl_attributes (tree *, tree, int);
extern void set_decl_abstract_flags (tree, int);
extern void set_decl_origin_self (tree);
extern void set_min_and_max_values_for_integral_type (tree, int, unsigned char);
extern void fixup_signed_type (tree);
extern void internal_reference_types (void);
extern unsigned int update_alignment_for_field (record_layout_info, tree,
                                                unsigned int);
extern void make_decl_rtl (tree, const char *);
extern void make_decl_one_only (tree);
extern int supports_one_only (void);
extern void variable_section (tree, int);
enum tls_model decl_tls_model (tree);
extern void resolve_unique_section (tree, int, int);
extern void mark_referenced (tree);
extern void mark_decl_referenced (tree);
extern void notice_global_symbol (tree);
extern void emit_nop (void);
extern void expand_computed_goto (tree);
extern unsigned char parse_output_constraint (const char **, int, int, int,
         unsigned char *, unsigned char *, unsigned char *);
extern unsigned char parse_input_constraint (const char **, int, int, int, int,
        const char * const *, unsigned char *, unsigned char *);
extern void expand_asm_operands (tree, tree, tree, tree, int, location_t);
extern void expand_asm_expr (tree);
extern unsigned char asm_op_is_mem_input (tree, tree);
extern tree resolve_asm_operand_names (tree, tree, tree);
extern int any_pending_cleanups (void);
extern void init_stmt_for_function (void);
extern void expand_start_target_temps (void);
extern void expand_end_target_temps (void);
extern void expand_elseif (tree);
extern void save_stack_pointer (void);
extern void expand_decl (tree);
extern int expand_decl_cleanup (tree, tree);
extern int expand_decl_cleanup_eh (tree, tree, int);
extern void expand_anon_union_decl (tree, tree, tree);
extern int containing_blocks_have_cleanups_or_stack_level (void);
extern tree create_artificial_label (void);
extern void gimplify_function_tree (tree);
extern const char *get_name (tree);
extern tree unshare_expr (tree);
extern void sort_case_labels (tree);
extern tree get_file_function_name (int);
extern char *dwarf2out_cfi_label (void);
extern void dwarf2out_def_cfa (const char *, unsigned, long);
extern void dwarf2out_window_save (const char *);
extern void dwarf2out_args_size (const char *, long);
extern void dwarf2out_reg_save (const char *, unsigned, long);
extern void dwarf2out_return_save (const char *, long);
extern void dwarf2out_return_reg (const char *, unsigned);
typedef tree (*walk_tree_fn) (tree *, int *, void *);
tree walk_tree (tree*, walk_tree_fn, void*, void*);
tree walk_tree_without_duplicates (tree*, walk_tree_fn, void*);
enum tree_dump_index
{
  TDI_none,
  TDI_tu,
  TDI_class,
  TDI_original,
  TDI_generic,
  TDI_nested,
  TDI_inlined,
  TDI_vcg,
  TDI_xml,
  TDI_all,
  TDI_end
};
typedef struct dump_info *dump_info_p;
extern int dump_flag (dump_info_p, int, tree);
extern int dump_enabled_p (enum tree_dump_index);
extern FILE *dump_begin (enum tree_dump_index, int *);
extern void dump_end (enum tree_dump_index, FILE *);
extern void dump_node (tree, int, FILE *);
extern int dump_switch_p (const char *);
extern const char *dump_flag_name (enum tree_dump_index);
extern void set_decl_rtl (tree, rtx);
extern void set_decl_incoming_rtl (tree, rtx);
extern void fancy_abort (const char *, int, const char *)
    ;
typedef enum
{
  d_kind,
  t_kind,
  b_kind,
  s_kind,
  r_kind,
  e_kind,
  c_kind,
  id_kind,
  perm_list_kind,
  temp_list_kind,
  vec_kind,
  binfo_kind,
  phi_kind,
  ssa_name_kind,
  x_kind,
  lang_decl,
  lang_type,
  all_kinds
} tree_node_kind;
extern int tree_node_counts[];
extern int tree_node_sizes[];
extern unsigned char in_gimple_form;
extern void override_options (void);
extern void optimization_options (int, int);
extern int ix86_can_use_return_insn_p (void);
extern int ix86_frame_pointer_required (void);
extern void ix86_setup_frame_addresses (void);
extern void ix86_file_end (void);
extern long ix86_initial_elimination_offset (int, int);
extern void ix86_expand_prologue (void);
extern void ix86_expand_epilogue (int);
extern void ix86_output_addr_vec_elt (FILE *, int);
extern void ix86_output_addr_diff_elt (FILE *, int, int);
extern int ix86_aligned_p (rtx);
extern int standard_80387_constant_p (rtx);
extern const char *standard_80387_constant_opcode (rtx);
extern rtx standard_80387_constant_rtx (int);
extern int standard_sse_constant_p (rtx);
extern int symbolic_reference_mentioned_p (rtx);
extern unsigned char extended_reg_mentioned_p (rtx);
extern unsigned char x86_extended_QIreg_mentioned_p (rtx);
extern unsigned char x86_extended_reg_mentioned_p (rtx);
extern int any_fp_register_operand (rtx, enum machine_mode);
extern int register_and_not_any_fp_reg_operand (rtx, enum machine_mode);
extern int fp_register_operand (rtx, enum machine_mode);
extern int register_and_not_fp_reg_operand (rtx, enum machine_mode);
extern int x86_64_general_operand (rtx, enum machine_mode);
extern int x86_64_szext_general_operand (rtx, enum machine_mode);
extern int x86_64_nonmemory_operand (rtx, enum machine_mode);
extern int x86_64_szext_nonmemory_operand (rtx, enum machine_mode);
extern int x86_64_immediate_operand (rtx, enum machine_mode);
extern int x86_64_zext_immediate_operand (rtx, enum machine_mode);
extern int symbolic_operand (rtx, enum machine_mode);
extern int tls_symbolic_operand (rtx, enum machine_mode);
extern int global_dynamic_symbolic_operand (rtx, enum machine_mode);
extern int local_dynamic_symbolic_operand (rtx, enum machine_mode);
extern int initial_exec_symbolic_operand (rtx, enum machine_mode);
extern int local_exec_symbolic_operand (rtx, enum machine_mode);
extern int pic_symbolic_operand (rtx, enum machine_mode);
extern int call_insn_operand (rtx, enum machine_mode);
extern int sibcall_insn_operand (rtx, enum machine_mode);
extern int constant_call_address_operand (rtx, enum machine_mode);
extern int const0_operand (rtx, enum machine_mode);
extern int const1_operand (rtx, enum machine_mode);
extern int const248_operand (rtx, enum machine_mode);
extern int incdec_operand (rtx, enum machine_mode);
extern int reg_no_sp_operand (rtx, enum machine_mode);
extern int mmx_reg_operand (rtx, enum machine_mode);
extern int general_no_elim_operand (rtx, enum machine_mode);
extern int nonmemory_no_elim_operand (rtx, enum machine_mode);
extern int q_regs_operand (rtx, enum machine_mode);
extern int non_q_regs_operand (rtx, enum machine_mode);
extern int sse_comparison_operator (rtx, enum machine_mode);
extern int fcmov_comparison_operator (rtx, enum machine_mode);
extern int cmp_fp_expander_operand (rtx, enum machine_mode);
extern int ix86_comparison_operator (rtx, enum machine_mode);
extern int ext_register_operand (rtx, enum machine_mode);
extern int binary_fp_operator (rtx, enum machine_mode);
extern int mult_operator (rtx, enum machine_mode);
extern int div_operator (rtx, enum machine_mode);
extern int arith_or_logical_operator (rtx, enum machine_mode);
extern int promotable_binary_operator (rtx, enum machine_mode);
extern int memory_displacement_operand (rtx, enum machine_mode);
extern int cmpsi_operand (rtx, enum machine_mode);
extern int long_memory_operand (rtx, enum machine_mode);
extern int aligned_operand (rtx, enum machine_mode);
extern enum machine_mode ix86_cc_mode (enum rtx_code, rtx, rtx);
extern int ix86_expand_movstr (rtx, rtx, rtx, rtx);
extern int ix86_expand_clrstr (rtx, rtx, rtx);
extern int ix86_expand_strlen (rtx, rtx, rtx, rtx);
extern unsigned char legitimate_constant_p (rtx);
extern unsigned char constant_address_p (rtx);
extern unsigned char legitimate_pic_operand_p (rtx);
extern int legitimate_pic_address_disp_p (rtx);
extern int legitimate_address_p (enum machine_mode, rtx, int);
extern rtx legitimize_pic_address (rtx, rtx);
extern rtx legitimize_address (rtx, rtx, enum machine_mode);
extern void print_reg (rtx, int, FILE*);
extern void print_operand (FILE*, rtx, int);
extern void print_operand_address (FILE*, rtx);
extern unsigned char output_addr_const_extra (FILE*, rtx);
extern void split_di (rtx[], int, rtx[], rtx[]);
extern void split_ti (rtx[], int, rtx[], rtx[]);
extern const char *output_set_got (rtx);
extern const char *output_387_binary_op (rtx, rtx*);
extern const char *output_387_reg_move (rtx, rtx*);
extern const char *output_fix_trunc (rtx, rtx*);
extern const char *output_fp_compare (rtx, rtx*, int, int);
extern void i386_dwarf_output_addr_const (FILE*, rtx);
extern void i386_output_dwarf_dtprel (FILE*, int, rtx);
extern void ix86_expand_clear (rtx);
extern void ix86_expand_move (enum machine_mode, rtx[]);
extern void ix86_expand_vector_move (enum machine_mode, rtx[]);
extern void ix86_expand_binary_operator (enum rtx_code,
      enum machine_mode, rtx[]);
extern int ix86_binary_operator_ok (enum rtx_code, enum machine_mode, rtx[]);
extern void ix86_expand_unary_operator (enum rtx_code, enum machine_mode,
     rtx[]);
extern int ix86_unary_operator_ok (enum rtx_code, enum machine_mode, rtx[]);
extern int ix86_match_ccmode (rtx, enum machine_mode);
extern rtx ix86_expand_compare (enum rtx_code, rtx *, rtx *);
extern int ix86_use_fcomi_compare (enum rtx_code);
extern void ix86_expand_branch (enum rtx_code, rtx);
extern int ix86_expand_setcc (enum rtx_code, rtx);
extern int ix86_expand_int_movcc (rtx[]);
extern int ix86_expand_fp_movcc (rtx[]);
extern int ix86_expand_int_addcc (rtx[]);
extern void ix86_expand_call (rtx, rtx, rtx, rtx, rtx, int);
extern void x86_initialize_trampoline (rtx, rtx, rtx);
extern rtx ix86_zero_extend_to_Pmode (rtx);
extern void ix86_split_long_move (rtx[]);
extern void ix86_split_ashldi (rtx *, rtx);
extern void ix86_split_ashrdi (rtx *, rtx);
extern void ix86_split_lshrdi (rtx *, rtx);
extern rtx ix86_find_base_term (rtx);
extern int ix86_check_movabs (rtx, int);
extern rtx assign_386_stack_local (enum machine_mode, int);
extern int ix86_attr_length_immediate_default (rtx, int);
extern int ix86_attr_length_address_default (rtx);
extern enum machine_mode ix86_fp_compare_mode (enum rtx_code);
extern int x86_64_sign_extended_value (rtx);
extern int x86_64_zero_extended_value (rtx);
extern rtx ix86_libcall_value (enum machine_mode);
extern unsigned char ix86_function_value_regno_p (int);
extern unsigned char ix86_function_arg_regno_p (int);
extern int ix86_function_arg_boundary (enum machine_mode, tree);
extern int ix86_return_in_memory (tree);
extern void ix86_va_start (tree, rtx);
extern rtx ix86_va_arg (tree, tree);
extern rtx ix86_force_to_memory (enum machine_mode, rtx);
extern void ix86_free_from_memory (enum machine_mode);
extern void ix86_split_fp_branch (enum rtx_code code, rtx, rtx, rtx, rtx, rtx);
extern int ix86_hard_regno_mode_ok (int, enum machine_mode);
extern int ix86_register_move_cost (enum machine_mode, enum reg_class,
        enum reg_class);
extern int ix86_secondary_memory_needed (enum reg_class, enum reg_class,
      enum machine_mode, int);
extern enum reg_class ix86_preferred_reload_class (rtx, enum reg_class);
extern int ix86_memory_move_cost (enum machine_mode, enum reg_class, int);
extern void emit_i387_cw_initialization (rtx, rtx);
extern unsigned char ix86_fp_jump_nontrivial_p (enum rtx_code);
extern void x86_order_regs_for_local_alloc (void);
extern void x86_function_profiler (FILE *, int);
extern void x86_emit_floatuns (rtx [2]);
extern void ix86_emit_fp_unordered_jump (rtx);
extern void ix86_emit_i387_log1p (rtx, rtx);
extern enum rtx_code ix86_reverse_condition (enum rtx_code, enum machine_mode);
extern void init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree);
extern rtx function_arg (CUMULATIVE_ARGS *, enum machine_mode, tree, int);
extern int function_arg_pass_by_reference (CUMULATIVE_ARGS *,
        enum machine_mode, tree, int);
extern void function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,
      tree, int);
extern rtx ix86_function_value (tree);
extern void ix86_init_builtins (void);
extern rtx ix86_expand_builtin (tree, rtx, rtx, enum machine_mode, int);
extern int ix86_return_pops_args (tree, tree, int);
extern int ix86_data_alignment (tree, int);
extern int ix86_local_alignment (tree, int);
extern int ix86_constant_alignment (tree, int);
extern tree ix86_handle_dll_attribute (tree *, tree, tree, int, unsigned char *);
extern tree ix86_handle_shared_attribute (tree *, tree, tree, int, unsigned char *);
extern unsigned int i386_pe_section_type_flags (tree, const char *, int);
extern void i386_pe_asm_named_section (const char *, unsigned int);
extern int x86_field_alignment (tree, int);
extern rtx ix86_tls_get_addr (void);
extern unsigned char ix86_must_pass_in_stack (enum machine_mode mode, tree);
extern void ix86_expand_vector_init (rtx, rtx);
extern int i386_pe_dllexport_name_p (const char *);
extern int i386_pe_dllimport_name_p (const char *);
extern void i386_pe_unique_section (tree, int);
extern void i386_pe_declare_function_type (FILE *, const char *, int);
extern void i386_pe_record_external_function (const char *);
extern void i386_pe_record_exported_symbol (const char *, int);
extern void i386_pe_asm_file_end (FILE *);
extern void i386_pe_encode_section_info (tree, rtx, int);
extern const char *i386_pe_strip_name_encoding (const char *);
extern const char *i386_pe_strip_name_encoding_full (const char *);
extern void i386_pe_output_labelref (FILE *, const char *);
extern int x86_64_immediate_operand (rtx, enum machine_mode);
extern int x86_64_nonmemory_operand (rtx, enum machine_mode);
extern int x86_64_movabs_operand (rtx, enum machine_mode);
extern int x86_64_szext_nonmemory_operand (rtx, enum machine_mode);
extern int x86_64_general_operand (rtx, enum machine_mode);
extern int x86_64_szext_general_operand (rtx, enum machine_mode);
extern int x86_64_zext_immediate_operand (rtx, enum machine_mode);
extern int shiftdi_operand (rtx, enum machine_mode);
extern int const_int_1_31_operand (rtx, enum machine_mode);
extern int symbolic_operand (rtx, enum machine_mode);
extern int aligned_operand (rtx, enum machine_mode);
extern int pic_symbolic_operand (rtx, enum machine_mode);
extern int call_insn_operand (rtx, enum machine_mode);
extern int sibcall_insn_operand (rtx, enum machine_mode);
extern int constant_call_address_operand (rtx, enum machine_mode);
extern int const0_operand (rtx, enum machine_mode);
extern int const1_operand (rtx, enum machine_mode);
extern int const248_operand (rtx, enum machine_mode);
extern int const_0_to_3_operand (rtx, enum machine_mode);
extern int const_0_to_7_operand (rtx, enum machine_mode);
extern int const_0_to_15_operand (rtx, enum machine_mode);
extern int const_0_to_255_operand (rtx, enum machine_mode);
extern int incdec_operand (rtx, enum machine_mode);
extern int mmx_reg_operand (rtx, enum machine_mode);
extern int reg_no_sp_operand (rtx, enum machine_mode);
extern int general_no_elim_operand (rtx, enum machine_mode);
extern int nonmemory_no_elim_operand (rtx, enum machine_mode);
extern int index_register_operand (rtx, enum machine_mode);
extern int flags_reg_operand (rtx, enum machine_mode);
extern int q_regs_operand (rtx, enum machine_mode);
extern int non_q_regs_operand (rtx, enum machine_mode);
extern int fcmov_comparison_operator (rtx, enum machine_mode);
extern int sse_comparison_operator (rtx, enum machine_mode);
extern int ix86_comparison_operator (rtx, enum machine_mode);
extern int ix86_carry_flag_operator (rtx, enum machine_mode);
extern int cmp_fp_expander_operand (rtx, enum machine_mode);
extern int ext_register_operand (rtx, enum machine_mode);
extern int binary_fp_operator (rtx, enum machine_mode);
extern int mult_operator (rtx, enum machine_mode);
extern int div_operator (rtx, enum machine_mode);
extern int arith_or_logical_operator (rtx, enum machine_mode);
extern int promotable_binary_operator (rtx, enum machine_mode);
extern int memory_displacement_operand (rtx, enum machine_mode);
extern int cmpsi_operand (rtx, enum machine_mode);
extern int long_memory_operand (rtx, enum machine_mode);
extern int tls_symbolic_operand (rtx, enum machine_mode);
extern int global_dynamic_symbolic_operand (rtx, enum machine_mode);
extern int local_dynamic_symbolic_operand (rtx, enum machine_mode);
extern int initial_exec_symbolic_operand (rtx, enum machine_mode);
extern int local_exec_symbolic_operand (rtx, enum machine_mode);
extern int any_fp_register_operand (rtx, enum machine_mode);
extern int register_and_not_any_fp_reg_operand (rtx, enum machine_mode);
extern int fp_register_operand (rtx, enum machine_mode);
extern int register_and_not_fp_reg_operand (rtx, enum machine_mode);
extern int zero_extended_scalar_load_operand (rtx, enum machine_mode);
extern int vector_move_operand (rtx, enum machine_mode);
extern int no_seg_address_operand (rtx, enum machine_mode);
typedef unsigned long BITMAP_WORD;
typedef struct bitmap_element_def
{
  struct bitmap_element_def *next;
  struct bitmap_element_def *prev;
  unsigned int indx;
  BITMAP_WORD bits[((128 + (8 * 4) - 1) / (8 * 4))];
} bitmap_element;
typedef struct bitmap_head_def {
  bitmap_element *first;
  bitmap_element *current;
  unsigned int indx;
  int using_obstack;
} bitmap_head;
typedef struct bitmap_head_def *bitmap;
enum bitmap_bits {
  BITMAP_AND,
  BITMAP_AND_COMPL,
  BITMAP_IOR,
  BITMAP_XOR,
  BITMAP_IOR_COMPL
};
extern bitmap_element bitmap_zero_bits;
extern void bitmap_clear (bitmap);
extern void bitmap_copy (bitmap, bitmap);
extern int bitmap_equal_p (bitmap, bitmap);
extern int bitmap_operation (bitmap, bitmap, bitmap, enum bitmap_bits);
extern void bitmap_ior_and_compl (bitmap, bitmap, bitmap);
extern void bitmap_clear_bit (bitmap, int);
extern void bitmap_set_bit (bitmap, int);
extern int bitmap_bit_p (bitmap, int);
extern void debug_bitmap (bitmap);
extern void debug_bitmap_file (FILE *, bitmap);
extern void bitmap_print (FILE *, bitmap, const char *, const char *);
extern bitmap bitmap_initialize (bitmap head, int using_obstack);
extern void bitmap_release_memory (void);
extern int bitmap_union_of_diff (bitmap, bitmap, bitmap, bitmap);
extern int bitmap_first_set_bit (bitmap);
extern int bitmap_last_set_bit (bitmap);
typedef struct simple_bitmap_def
{
  unsigned int n_bits;
  unsigned int size;
  unsigned int bytes;
  unsigned long elms[1];
} *sbitmap;
typedef unsigned long *sbitmap_ptr;
struct int_list;
extern void dump_sbitmap (FILE *, sbitmap);
extern void dump_sbitmap_file (FILE *, sbitmap);
extern void dump_sbitmap_vector (FILE *, const char *, const char *, sbitmap *,
     int);
extern sbitmap sbitmap_alloc (unsigned int);
extern sbitmap *sbitmap_vector_alloc (unsigned int, unsigned int);
extern sbitmap sbitmap_resize (sbitmap, unsigned int, int);
extern void sbitmap_copy (sbitmap, sbitmap);
extern int sbitmap_equal (sbitmap, sbitmap);
extern void sbitmap_zero (sbitmap);
extern void sbitmap_ones (sbitmap);
extern void sbitmap_vector_zero (sbitmap *, unsigned int);
extern void sbitmap_vector_ones (sbitmap *, unsigned int);
extern void sbitmap_union_of_diff (sbitmap, sbitmap, sbitmap, sbitmap);
extern unsigned char sbitmap_union_of_diff_cg (sbitmap, sbitmap, sbitmap, sbitmap);
extern void sbitmap_difference (sbitmap, sbitmap, sbitmap);
extern void sbitmap_not (sbitmap, sbitmap);
extern void sbitmap_a_or_b_and_c (sbitmap, sbitmap, sbitmap, sbitmap);
extern unsigned char sbitmap_a_or_b_and_c_cg (sbitmap, sbitmap, sbitmap, sbitmap);
extern void sbitmap_a_and_b_or_c (sbitmap, sbitmap, sbitmap, sbitmap);
extern unsigned char sbitmap_a_and_b_or_c_cg (sbitmap, sbitmap, sbitmap, sbitmap);
extern void sbitmap_a_and_b (sbitmap, sbitmap, sbitmap);
extern unsigned char sbitmap_a_and_b_cg (sbitmap, sbitmap, sbitmap);
extern void sbitmap_a_or_b (sbitmap, sbitmap, sbitmap);
extern unsigned char sbitmap_a_or_b_cg (sbitmap, sbitmap, sbitmap);
extern void sbitmap_a_xor_b (sbitmap, sbitmap, sbitmap);
extern unsigned char sbitmap_a_xor_b_cg (sbitmap, sbitmap, sbitmap);
extern unsigned char sbitmap_a_subset_b_p (sbitmap, sbitmap);
extern int sbitmap_first_set_bit (sbitmap);
extern int sbitmap_last_set_bit (sbitmap);
extern void sbitmap_intersect_of_predsucc (sbitmap, sbitmap *, int,
        struct int_list **);
extern void sbitmap_union_of_predsucc (sbitmap, sbitmap *, int,
           struct int_list **);
extern void sbitmap_intersection_of_succs (sbitmap, sbitmap *, int);
extern void sbitmap_intersection_of_preds (sbitmap, sbitmap *, int);
extern void sbitmap_union_of_succs (sbitmap, sbitmap *, int);
extern void sbitmap_union_of_preds (sbitmap, sbitmap *, int);
extern void debug_sbitmap (sbitmap);
extern sbitmap sbitmap_realloc (sbitmap, unsigned int);
struct const_equiv_data {
  rtx rtx1;
  unsigned age;
};
enum varray_data_enum {
  VARRAY_DATA_C,
  VARRAY_DATA_UC,
  VARRAY_DATA_S,
  VARRAY_DATA_US,
  VARRAY_DATA_I,
  VARRAY_DATA_U,
  VARRAY_DATA_L,
  VARRAY_DATA_UL,
  VARRAY_DATA_HINT,
  VARRAY_DATA_UHINT,
  VARRAY_DATA_GENERIC,
  VARRAY_DATA_GENERIC_NOGC,
  VARRAY_DATA_CPTR,
  VARRAY_DATA_RTX,
  VARRAY_DATA_RTVEC,
  VARRAY_DATA_TREE,
  VARRAY_DATA_BITMAP,
  VARRAY_DATA_REG,
  VARRAY_DATA_CONST_EQUIV,
  VARRAY_DATA_BB,
  VARRAY_DATA_TE,
  VARRAY_DATA_EDGE,
  VARRAY_DATA_TREE_PTR,
  NUM_VARRAY_DATA
};
typedef union varray_data_tag {
  char
                             c[1];
  unsigned char
                             uc[1];
  short
                             s[1];
  unsigned short
                             us[1];
  int
                             i[1];
  unsigned int
                             u[1];
  long
                             l[1];
  unsigned long
                             ul[1];
  long
                               hint[1];
  unsigned long
                                uhint[1];
  void *
                                  generic[1];
  void *
                                       generic_nogc[1];
  char *
                               cptr[1];
  rtx
                              rtx1[1];
  rtvec
                                rtvec1[1];
  tree
                               tree1[1];
  struct bitmap_head_def *
                                 bitmap1[1];
  struct reg_info_def *
                              reg[1];
  struct const_equiv_data
                                     const_equiv[1];
  struct basic_block_def *
                             bb[1];
  struct elt_list *
                             te[1];
  struct edge_def *
                                                    e[1];
  tree *
                                                        tp[1];
} varray_data;
struct varray_head_tag {
  size_t num_elements;
  size_t elements_used;
  enum varray_data_enum type;
  const char *name;
  varray_data data;
};
typedef struct varray_head_tag *varray_type;
extern varray_type varray_init (size_t, enum varray_data_enum, const char *);
extern varray_type varray_grow (varray_type, size_t);
extern void varray_clear (varray_type);
extern void varray_copy (varray_type v1, varray_type v2);
extern void dump_varray_statistics (void);
enum br_predictor
{
PRED_COMBINED,
PRED_DS_THEORY,
PRED_FIRST_MATCH,
PRED_NO_PREDICTION,
PRED_UNCONDITIONAL,
PRED_LOOP_ITERATIONS,
PRED_BUILTIN_EXPECT,
PRED_CONTINUE,
PRED_NORETURN,
PRED_LOOP_BRANCH,
PRED_LOOP_EXIT,
PRED_LOOP_CONDITION,
PRED_LOOP_PRECONDITIONING,
PRED_LOOP_HEADER,
PRED_POINTER,
PRED_TREE_POINTER,
PRED_OPCODE_POSITIVE,
PRED_OPCODE_NONEQUAL,
PRED_FPOPCODE,
PRED_TREE_OPCODE_POSITIVE,
PRED_TREE_OPCODE_NONEQUAL,
PRED_TREE_FPOPCODE,
PRED_CALL,
PRED_EARLY_RETURN,
PRED_GOTO,
PRED_CONST_RETURN,
PRED_NEGATIVE_RETURN,
PRED_NULL_RETURN,
PRED_MUDFLAP,
  END_PREDICTORS
};
enum prediction
{
   NOT_TAKEN,
   TAKEN
};
extern void predict_insn_def (rtx, enum br_predictor, enum prediction);
extern void predict_insn (rtx, enum br_predictor, int);
typedef bitmap_head regset_head;
typedef bitmap regset;
extern void reg_set_to_hard_reg_set (HARD_REG_SET *, bitmap);
typedef long long gcov_type;
struct edge_def
{
  struct edge_def *pred_next;
  struct edge_def *succ_next;
  struct basic_block_def *src;
  struct basic_block_def *dest;
  union edge_def_insns {
    rtx r;
    tree t;
  } insns;
  void * aux;
  source_locus goto_locus;
  int flags;
  int probability;
  gcov_type count;
  unsigned char crossing_edge;
};
typedef struct edge_def *edge;
extern const struct gcov_ctr_summary *profile_info;
struct loop;
struct loops;
struct bb_ann_d;
struct basic_block_def
{
  rtx head_;
  rtx end_;
  tree stmt_list;
  edge pred;
  edge succ;
  bitmap local_set;
  bitmap cond_local_set;
  bitmap global_live_at_start;
  bitmap global_live_at_end;
  void * aux;
  int index;
  struct basic_block_def *prev_bb;
  struct basic_block_def *next_bb;
  int loop_depth;
  struct loop * loop_father;
  struct et_node * dom[2];
  gcov_type count;
  int frequency;
  int flags;
  int partition1;
  struct reorder_block_def * rbi;
  struct bb_ann_d *tree_annotations;
};
typedef struct basic_block_def *basic_block;
typedef struct reorder_block_def
{
  rtx header1;
  rtx footer;
  basic_block next;
  basic_block original;
  basic_block copy;
  int duplicated;
  int visited;
} *reorder_block_def;
extern int n_basic_blocks;
extern int last_basic_block;
extern int n_edges;
extern varray_type basic_block_info;
extern regset regs_live_at_setjmp;
extern rtx label_value_list;
extern struct obstack flow_obstack;
extern basic_block ENTRY_BLOCK_PTR;
extern basic_block EXIT_BLOCK_PTR;
extern void compute_bb_for_insn (void);
extern void free_bb_for_insn (void);
extern void update_bb_for_insn (basic_block);
extern void free_basic_block_vars (void);
extern void insert_insn_on_edge (rtx, edge);
unsigned char safe_insert_insn_on_edge (rtx, edge);
extern void commit_edge_insertions (void);
extern void commit_edge_insertions_watch_calls (void);
extern void remove_fake_edges (void);
extern void add_noreturn_fake_exit_edges (void);
extern void connect_infinite_loops_to_exit (void);
extern edge unchecked_make_edge (basic_block, basic_block, int);
extern edge cached_make_edge (sbitmap *, basic_block, basic_block, int);
extern edge make_edge (basic_block, basic_block, int);
extern edge make_single_succ_edge (basic_block, basic_block, int);
extern void remove_edge (edge);
extern void redirect_edge_succ (edge, basic_block);
extern edge redirect_edge_succ_nodup (edge, basic_block);
extern void redirect_edge_pred (edge, basic_block);
extern basic_block create_basic_block_structure (rtx, rtx, rtx, basic_block);
extern void clear_bb_flags (void);
extern void flow_reverse_top_sort_order_compute (int *);
extern int flow_depth_first_order_compute (int *, int *);
extern void flow_preorder_transversal_compute (int *);
extern int dfs_enumerate_from (basic_block, int,
          unsigned char (*)(basic_block, void *),
          basic_block *, int, void *);
extern void dump_edge_info (FILE *, edge, int);
extern void brief_dump_cfg (FILE *);
extern void clear_edges (void);
extern void mark_critical_edges (void);
extern rtx first_insn_after_basic_block_note (basic_block);
typedef struct ce_if_block
{
  basic_block test_bb;
  basic_block then_bb;
  basic_block else_bb;
  basic_block join_bb;
  basic_block last_test_bb;
  int num_multiple_test_blocks;
  int num_and_and_blocks;
  int num_or_or_blocks;
  int num_multiple_test_insns;
  int and_and_p;
  int num_then_insns;
  int num_else_insns;
  int pass;
} ce_if_block_t;
struct edge_list
{
  int num_blocks;
  int num_edges;
  edge *index_to_edge;
};
struct edge_list * create_edge_list (void);
void free_edge_list (struct edge_list *);
void print_edge_list (FILE *, struct edge_list *);
void verify_edge_list (FILE *, struct edge_list *);
int find_edge_index (struct edge_list *, basic_block, basic_block);
edge find_edge (basic_block, basic_block);
enum update_life_extent
{
  UPDATE_LIFE_LOCAL = 0,
  UPDATE_LIFE_GLOBAL = 1,
  UPDATE_LIFE_GLOBAL_RM_NOTES = 2
};
extern void life_analysis (FILE *, int);
extern int update_life_info (sbitmap, enum update_life_extent, int);
extern int update_life_info_in_dirty_blocks (enum update_life_extent, int);
extern int count_or_remove_death_notes (sbitmap, int);
extern int propagate_block (basic_block, regset, regset, regset, int);
struct propagate_block_info;
extern rtx propagate_one_insn (struct propagate_block_info *, rtx);
extern struct propagate_block_info *init_propagate_block_info
 (basic_block, regset, regset, regset, int);
extern void free_propagate_block_info (struct propagate_block_info *);
extern struct edge_list *pre_edge_lcm (FILE *, int, sbitmap *, sbitmap *,
           sbitmap *, sbitmap *, sbitmap **,
           sbitmap **);
extern struct edge_list *pre_edge_rev_lcm (FILE *, int, sbitmap *,
        sbitmap *, sbitmap *,
        sbitmap *, sbitmap **,
        sbitmap **);
extern void compute_available (sbitmap *, sbitmap *, sbitmap *, sbitmap *);
extern int optimize_mode_switching (FILE *);
extern rtx emit_block_insn_after (rtx, rtx, basic_block);
extern rtx emit_block_insn_before (rtx, rtx, basic_block);
extern void estimate_probability (struct loops *);
extern void note_prediction_to_br_prob (void);
extern void expected_value_to_br_prob (void);
extern unsigned char maybe_hot_bb_p (basic_block);
extern unsigned char probably_cold_bb_p (basic_block);
extern unsigned char probably_never_executed_bb_p (basic_block);
extern unsigned char tree_predicted_by_p (basic_block, enum br_predictor);
extern unsigned char rtl_predicted_by_p (basic_block, enum br_predictor);
extern void tree_predict_edge (edge, enum br_predictor, int);
extern void rtl_predict_edge (edge, enum br_predictor, int);
extern void predict_edge_def (edge, enum br_predictor, enum prediction);
extern void init_flow (void);
extern void debug_bb (basic_block);
extern basic_block debug_bb_n (int);
extern void dump_regset (regset, FILE *);
extern void debug_regset (regset);
extern void allocate_reg_life_data (void);
extern void allocate_bb_life_data (void);
extern void expunge_block (basic_block);
extern void link_block (basic_block, basic_block);
extern void unlink_block (basic_block);
extern void compact_blocks (void);
extern basic_block alloc_block (void);
extern void find_unreachable_blocks (void);
extern int delete_noop_moves (void);
extern basic_block force_nonfallthru (edge);
extern rtx block_label (basic_block);
extern unsigned char forwarder_block_p (basic_block);
extern unsigned char purge_all_dead_edges (int);
extern unsigned char purge_dead_edges (basic_block);
extern void find_sub_basic_blocks (basic_block);
extern void find_many_sub_basic_blocks (sbitmap);
extern void rtl_make_eh_edge (sbitmap *, basic_block, rtx);
extern unsigned char can_fallthru (basic_block, basic_block);
extern unsigned char could_fall_through (basic_block, basic_block);
extern void flow_nodes_print (const char *, const sbitmap, FILE *);
extern void flow_edge_list_print (const char *, const edge *, int, FILE *);
extern void alloc_aux_for_block (basic_block, int);
extern void alloc_aux_for_blocks (int);
extern void clear_aux_for_blocks (void);
extern void free_aux_for_blocks (void);
extern void alloc_aux_for_edge (edge, int);
extern void alloc_aux_for_edges (int);
extern void clear_aux_for_edges (void);
extern void free_aux_for_edges (void);
extern void find_basic_blocks (rtx, int, FILE *);
extern unsigned char cleanup_cfg (int);
extern unsigned char delete_unreachable_blocks (void);
extern unsigned char merge_seq_blocks (void);
typedef struct conflict_graph_def *conflict_graph;
typedef int (*conflict_graph_enum_fn) (int, int, void *);
extern conflict_graph conflict_graph_new
 (int);
extern void conflict_graph_delete (conflict_graph);
extern int conflict_graph_add (conflict_graph, int, int);
extern int conflict_graph_conflict_p (conflict_graph, int, int);
extern void conflict_graph_enum (conflict_graph, int, conflict_graph_enum_fn,
     void *);
extern void conflict_graph_merge_regs (conflict_graph, int, int);
extern void conflict_graph_print (conflict_graph, FILE*);
extern conflict_graph conflict_graph_compute (regset, partition);
extern unsigned char mark_dfs_back_edges (void);
extern void set_edge_can_fallthru_flag (void);
extern void update_br_prob_note (basic_block);
extern void fixup_abnormal_edges (void);
extern unsigned char can_hoist_insn_p (rtx, rtx, regset);
extern rtx hoist_insn_after (rtx, rtx, rtx, rtx);
extern rtx hoist_insn_to_edge (rtx, edge, rtx, rtx);
extern unsigned char inside_basic_block_p (rtx);
extern unsigned char control_flow_insn_p (rtx);
extern void reorder_basic_blocks (void);
extern void partition_hot_cold_basic_blocks (void);
extern void alloc_rbi_pool (void);
extern void initialize_bb_rbi (basic_block bb);
extern void free_rbi_pool (void);
enum cdi_direction
{
  CDI_DOMINATORS,
  CDI_POST_DOMINATORS
};
enum dom_state
{
  DOM_NONE,
  DOM_CONS_OK,
  DOM_NO_FAST_QUERY,
  DOM_OK
};
extern enum dom_state dom_computed[2];
extern void calculate_dominance_info (enum cdi_direction);
extern void free_dominance_info (enum cdi_direction);
extern basic_block nearest_common_dominator (enum cdi_direction,
          basic_block, basic_block);
extern void set_immediate_dominator (enum cdi_direction, basic_block,
         basic_block);
extern basic_block get_immediate_dominator (enum cdi_direction, basic_block);
extern unsigned char dominated_by_p (enum cdi_direction, basic_block, basic_block);
extern int get_dominated_by (enum cdi_direction, basic_block, basic_block **);
extern void add_to_dominance_info (enum cdi_direction, basic_block);
extern void delete_from_dominance_info (enum cdi_direction, basic_block);
basic_block recount_dominator (enum cdi_direction, basic_block);
extern void redirect_immediate_dominators (enum cdi_direction, basic_block,
        basic_block);
extern void iterate_fix_dominators (enum cdi_direction, basic_block *, int);
extern void verify_dominators (enum cdi_direction);
extern basic_block first_dom_son (enum cdi_direction, basic_block);
extern basic_block next_dom_son (enum cdi_direction, basic_block);
extern edge try_redirect_by_replacing_jump (edge, basic_block, unsigned char);
extern void break_superblocks (void);
struct cfg_hooks
{
  const char *name;
  int (*verify_flow_info) (void);
  void (*dump_bb) (basic_block, FILE *, int);
  basic_block (*create_basic_block) (void *head, void *end, basic_block after);
  edge (*redirect_edge_and_branch) (edge e, basic_block b);
  basic_block (*redirect_edge_and_branch_force) (edge, basic_block);
  void (*delete_basic_block) (basic_block);
  basic_block (*split_block) (basic_block b, void * i);
  unsigned char (*move_block_after) (basic_block b, basic_block a);
  unsigned char (*can_merge_blocks_p) (basic_block a, basic_block b);
  void (*merge_blocks) (basic_block a, basic_block b);
  void (*predict_edge) (edge e, enum br_predictor predictor, int probability);
  unsigned char (*predicted_by_p) (basic_block bb, enum br_predictor predictor);
  unsigned char (*can_duplicate_block_p) (basic_block a);
  basic_block (*duplicate_block) (basic_block a);
  basic_block (*split_edge) (edge);
  void (*make_forwarder_block) (edge);
  void (*tidy_fallthru_edge) (edge);
  unsigned char (*block_ends_with_call_p) (basic_block);
  unsigned char (*block_ends_with_condjump_p) (basic_block);
  int (*flow_call_edges_add) (sbitmap);
};
extern void verify_flow_info (void);
extern void dump_bb (basic_block, FILE *, int);
extern edge redirect_edge_and_branch (edge, basic_block);
extern basic_block redirect_edge_and_branch_force (edge, basic_block);
extern edge split_block (basic_block, void *);
extern edge split_block_after_labels (basic_block);
extern unsigned char move_block_after (basic_block, basic_block);
extern void delete_basic_block (basic_block);
extern basic_block split_edge (edge);
extern basic_block create_basic_block (void *, void *, basic_block);
extern basic_block create_empty_bb (basic_block);
extern unsigned char can_merge_blocks_p (basic_block, basic_block);
extern void merge_blocks (basic_block, basic_block);
extern edge make_forwarder_block (basic_block, unsigned char (*)(edge),
      void (*) (basic_block));
extern void tidy_fallthru_edge (edge);
extern void tidy_fallthru_edges (void);
extern void predict_edge (edge e, enum br_predictor predictor, int probability);
extern unsigned char predicted_by_p (basic_block bb, enum br_predictor predictor);
extern unsigned char can_duplicate_block_p (basic_block);
extern basic_block duplicate_block (basic_block, edge);
extern unsigned char block_ends_with_call_p (basic_block bb);
extern unsigned char block_ends_with_condjump_p (basic_block bb);
extern int flow_call_edges_add (sbitmap);
extern struct cfg_hooks tree_cfg_hooks;
extern struct cfg_hooks rtl_cfg_hooks;
extern struct cfg_hooks cfg_layout_rtl_cfg_hooks;
extern int ir_type (void);
extern void rtl_register_cfg_hooks (void);
extern void cfg_layout_rtl_register_cfg_hooks (void);
extern void tree_register_cfg_hooks (void);
extern int warn_abi;
extern int warn_aggregate_return;
extern int warn_bad_function_cast;
extern int warn_cast_align;
extern int warn_cast_qual;
extern int warn_char_subscripts;
extern int warn_conversion;
extern int warn_ctor_dtor_privacy;
extern int warn_declaration_after_statement;
extern int warn_deprecated;
extern int warn_deprecated_decl;
extern int warn_disabled_optimization;
extern int warn_div_by_zero;
extern int warn_ecpp;
extern int warnings_are_errors;
extern int flag_fatal_errors;
extern int warn_float_equal;
extern int warn_format_extra_args;
extern int warn_format_nonliteral;
extern int warn_format_security;
extern int warn_format_y2k;
extern int warn_format_zero_length;
extern int mesg_implicit_function_declaration;
extern int warn_implicit_int;
extern int warn_init_self;
extern int warn_inline;
extern int warn_invalid_offsetof;
extern int warn_long_long;
extern int warn_missing_braces;
extern int warn_missing_declarations;
extern int warn_missing_format_attribute;
extern int warn_missing_noreturn;
extern int warn_missing_prototypes;
extern int warn_nested_externs;
extern int warn_nontemplate_friend;
extern int warn_nonvdtor;
extern int warn_nonnull;
extern int warn_old_style_cast;
extern int warn_old_style_definition;
extern int warn_overloaded_virtual;
extern int warn_packed;
extern int warn_padded;
extern int warn_parentheses;
extern int warn_pmf2ptr;
extern int warn_pointer_arith;
extern int warn_protocol;
extern int warn_redundant_decls;
extern int warn_reorder;
extern int warn_selector;
extern int warn_sequence_point;
extern int warn_shadow;
extern int warn_sign_compare;
extern int warn_sign_promo;
extern int warn_strict_prototypes;
extern int warn_switch;
extern int warn_switch_default;
extern int warn_switch_enum;
extern int warn_synth;
extern int warn_system_headers;
extern int warn_traditional;
extern int warn_undeclared_selector;
extern int warn_uninitialized;
extern int warn_notreached;
extern int warn_unused_function;
extern int warn_unused_label;
extern int warn_unused_parameter;
extern int warn_unused_value;
extern int warn_unused_variable;
extern int flag_pic;
extern int flag_pie;
extern int flag_abi_version;
extern int align_functions;
extern int align_jumps;
extern int align_labels;
extern int align_loops;
extern int flag_argument_noalias;
extern int flag_argument_noalias;
extern int flag_argument_noalias;
extern int flag_asynchronous_unwind_tables;
extern int flag_bounds_check;
extern int flag_branch_on_count_reg;
extern int flag_branch_probabilities;
extern int flag_branch_target_load_optimize;
extern int flag_branch_target_load_optimize2;
extern int flag_btr_bb_exclusive;
extern int flag_caller_saves;
extern int flag_no_common;
extern int flag_cprop_registers;
extern int flag_crossjumping;
extern int flag_cse_follow_jumps;
extern int flag_cse_skip_blocks;
extern int flag_data_sections;
extern int flag_defer_pop;
extern int flag_delayed_branch;
extern int flag_delete_null_pointer_checks;
extern int flag_dump_unnumbered;
extern int flag_eliminate_dwarf2_dups;
extern int flag_debug_only_used_symbols;
extern int flag_eliminate_unused_debug_types;
extern int flag_exceptions;
extern int flag_expensive_optimizations;
extern int flag_finite_math_only;
extern int flag_float_store;
extern int flag_force_addr;
extern int flag_force_mem;
extern int flag_no_function_cse;
extern int flag_function_sections;
extern int flag_gcse;
extern int flag_gcse_after_reload;
extern int flag_gcse_las;
extern int flag_gcse_lm;
extern int flag_gcse_sm;
extern int flag_guess_branch_prob;
extern int flag_no_ident;
extern int flag_if_conversion;
extern int flag_if_conversion2;
extern int flag_inhibit_size_directive;
extern int flag_no_inline;
extern int flag_inline_functions;
extern int flag_instrument_function_entry_exit;
extern int flag_keep_inline_functions;
extern int flag_keep_static_consts;
extern int flag_leading_underscore;
extern int flag_loop_optimize;
extern int flag_loop_optimize2;
extern int flag_errno_math;
extern int mem_report;
extern int flag_merge_constants;
extern int flag_merge_constants;
extern int flag_modulo_sched;
extern int flag_move_all_movables;
extern int flag_move_loop_invariants;
extern int flag_mudflap;
extern int flag_mudflap_ignore_reads;
extern int flag_mudflap_threads;
extern int flag_new_regalloc;
extern int flag_non_call_exceptions;
extern int flag_old_unroll_all_loops;
extern int flag_old_unroll_loops;
extern int flag_omit_frame_pointer;
extern int flag_regmove;
extern int flag_optimize_sibling_calls;
extern int flag_pack_struct;
extern int flag_pcc_struct_return;
extern int flag_peel_loops;
extern int flag_no_peephole;
extern int flag_peephole2;
extern int flag_pic;
extern int flag_pie;
extern int flag_prefetch_loop_arrays;
extern int profile_flag;
extern int profile_arc_flag;
extern int flag_profile_values;
extern int flag_reduce_all_givs;
extern int flag_pcc_struct_return;
extern int flag_regmove;
extern int flag_rename_registers;
extern int flag_reorder_blocks;
extern int flag_reorder_blocks_and_partition;
extern int flag_reorder_functions;
extern int flag_rerun_cse_after_loop;
extern int flag_rerun_loop_opt;
extern int flag_rounding_math;
extern int flag_schedule_interblock;
extern int flag_schedule_speculative;
extern int flag_schedule_speculative_load;
extern int flag_schedule_speculative_load_dangerous;
extern int flag_sched_stalled_insns;
extern int flag_sched_stalled_insns_dep;
extern int flag_sched2_use_superblocks;
extern int flag_sched2_use_traces;
extern int flag_schedule_insns;
extern int flag_schedule_insns_after_reload;
extern int flag_shared_data;
extern int flag_signaling_nans;
extern int flag_single_precision_constant;
extern int flag_stack_check;
extern int flag_strength_reduce;
extern int flag_strict_aliasing;
extern int flag_syntax_only;
extern int flag_test_coverage;
extern int flag_thread_jumps;
extern int time_report;
extern int flag_tracer;
extern int flag_trapping_math;
extern int flag_trapv;
extern int flag_tree_based_profiling;
extern int flag_tree_ccp;
extern int flag_tree_ch;
extern int flag_tree_combine_temps;
extern int flag_tree_copyrename;
extern int flag_tree_dce;
extern int flag_tree_dom;
extern int flag_tree_dse;
extern int flag_tree_fre;
extern int flag_tree_loop_optimize;
extern int flag_tree_live_range_split;
extern int flag_tree_pre;
extern int flag_tree_sra;
extern int flag_tree_ter;
extern int flag_unit_at_a_time;
extern int flag_unroll_all_loops;
extern int flag_unroll_loops;
extern int flag_unsafe_math_optimizations;
extern int flag_unswitch_loops;
extern int flag_unwind_tables;
extern int flag_var_tracking;
extern int flag_verbose_asm;
extern int flag_value_profile_transformations;
extern int flag_web;
extern int flag_wrapv;
extern int flag_zero_initialized_in_bss;
extern int profile_flag;
extern int pedantic;
extern int quiet_flag;
extern int version_flag;
extern int inhibit_warnings;
enum opt_code
{
  OPT__help,
  OPT__output_pch_,
  OPT__param,
  OPT__target_help,
  OPT__version,
  OPT_A,
  OPT_C,
  OPT_CC,
  OPT_D,
  OPT_E,
  OPT_F,
  OPT_G,
  OPT_H,
  OPT_I,
  OPT_M,
  OPT_MD,
  OPT_MF,
  OPT_MG,
  OPT_MM,
  OPT_MMD,
  OPT_MP,
  OPT_MQ,
  OPT_MT,
  OPT_O,
  OPT_Os,
  OPT_P,
  OPT_U,
  OPT_W,
  OPT_Wabi,
  OPT_Waggregate_return,
  OPT_Wall,
  OPT_Wbad_function_cast,
  OPT_Wcast_align,
  OPT_Wcast_qual,
  OPT_Wchar_subscripts,
  OPT_Wcomment,
  OPT_Wcomments,
  OPT_Wconversion,
  OPT_Wctor_dtor_privacy,
  OPT_Wdeclaration_after_statement,
  OPT_Wdeprecated,
  OPT_Wdeprecated_declarations,
  OPT_Wdisabled_optimization,
  OPT_Wdiv_by_zero,
  OPT_Weffc__,
  OPT_Wendif_labels,
  OPT_Werror,
  OPT_Werror_implicit_function_declaration,
  OPT_Wextra,
  OPT_Wfatal_errors,
  OPT_Wfloat_equal,
  OPT_Wformat,
  OPT_Wformat_extra_args,
  OPT_Wformat_nonliteral,
  OPT_Wformat_security,
  OPT_Wformat_y2k,
  OPT_Wformat_zero_length,
  OPT_Wformat_,
  OPT_Wimplicit,
  OPT_Wimplicit_function_declaration,
  OPT_Wimplicit_int,
  OPT_Wimport,
  OPT_Winit_self,
  OPT_Winline,
  OPT_Winvalid_offsetof,
  OPT_Winvalid_pch,
  OPT_Wlarger_than_,
  OPT_Wlong_long,
  OPT_Wmain,
  OPT_Wmissing_braces,
  OPT_Wmissing_declarations,
  OPT_Wmissing_format_attribute,
  OPT_Wmissing_include_dirs,
  OPT_Wmissing_noreturn,
  OPT_Wmissing_prototypes,
  OPT_Wmultichar,
  OPT_Wnested_externs,
  OPT_Wnon_template_friend,
  OPT_Wnon_virtual_dtor,
  OPT_Wnonnull,
  OPT_Wold_style_cast,
  OPT_Wold_style_definition,
  OPT_Woverloaded_virtual,
  OPT_Wpacked,
  OPT_Wpadded,
  OPT_Wparentheses,
  OPT_Wpmf_conversions,
  OPT_Wpointer_arith,
  OPT_Wprotocol,
  OPT_Wredundant_decls,
  OPT_Wreorder,
  OPT_Wreturn_type,
  OPT_Wselector,
  OPT_Wsequence_point,
  OPT_Wshadow,
  OPT_Wsign_compare,
  OPT_Wsign_promo,
  OPT_Wstrict_aliasing,
  OPT_Wstrict_aliasing_,
  OPT_Wstrict_prototypes,
  OPT_Wswitch,
  OPT_Wswitch_default,
  OPT_Wswitch_enum,
  OPT_Wsynth,
  OPT_Wsystem_headers,
  OPT_Wtraditional,
  OPT_Wtrigraphs,
  OPT_Wundeclared_selector,
  OPT_Wundef,
  OPT_Wuninitialized,
  OPT_Wunknown_pragmas,
  OPT_Wunreachable_code,
  OPT_Wunused,
  OPT_Wunused_function,
  OPT_Wunused_label,
  OPT_Wunused_macros,
  OPT_Wunused_parameter,
  OPT_Wunused_value,
  OPT_Wunused_variable,
  OPT_Wvariadic_macros,
  OPT_Wwrite_strings,
  OPT_ansi,
  OPT_aux_info,
  OPT_aux_info_,
  OPT_auxbase,
  OPT_auxbase_strip,
  OPT_d,
  OPT_dumpbase,
  OPT_fPIC,
  OPT_fPIE,
  OPT_fabi_version_,
  OPT_faccess_control,
  OPT_falign_functions,
  OPT_falign_functions_,
  OPT_falign_jumps,
  OPT_falign_jumps_,
  OPT_falign_labels,
  OPT_falign_labels_,
  OPT_falign_loops,
  OPT_falign_loops_,
  OPT_fall_virtual,
  OPT_falt_external_templates,
  OPT_fargument_alias,
  OPT_fargument_noalias,
  OPT_fargument_noalias_global,
  OPT_fasm,
  OPT_fasynchronous_unwind_tables,
  OPT_fbounds_check,
  OPT_fbranch_count_reg,
  OPT_fbranch_probabilities,
  OPT_fbranch_target_load_optimize,
  OPT_fbranch_target_load_optimize2,
  OPT_fbtr_bb_exclusive,
  OPT_fbuiltin,
  OPT_fbuiltin_,
  OPT_fcall_saved_,
  OPT_fcall_used_,
  OPT_fcaller_saves,
  OPT_fcheck_new,
  OPT_fcommon,
  OPT_fcond_mismatch,
  OPT_fconserve_space,
  OPT_fconst_strings,
  OPT_fconstant_string_class_,
  OPT_fcprop_registers,
  OPT_fcrossjumping,
  OPT_fcse_follow_jumps,
  OPT_fcse_skip_blocks,
  OPT_fdata_sections,
  OPT_fdefault_inline,
  OPT_fdefer_pop,
  OPT_fdelayed_branch,
  OPT_fdelete_null_pointer_checks,
  OPT_fdiagnostics_show_location_,
  OPT_fdollars_in_identifiers,
  OPT_fdump_,
  OPT_fdump_unnumbered,
  OPT_felide_constructors,
  OPT_feliminate_dwarf2_dups,
  OPT_feliminate_unused_debug_symbols,
  OPT_feliminate_unused_debug_types,
  OPT_fenforce_eh_specs,
  OPT_fenum_int_equiv,
  OPT_fexceptions,
  OPT_fexec_charset_,
  OPT_fexpensive_optimizations,
  OPT_fexternal_templates,
  OPT_ffast_math,
  OPT_ffinite_math_only,
  OPT_ffixed_,
  OPT_ffixed_form,
  OPT_ffixed_line_length_,
  OPT_ffloat_store,
  OPT_ffor_scope,
  OPT_fforce_addr,
  OPT_fforce_mem,
  OPT_ffreestanding,
  OPT_ffunction_cse,
  OPT_ffunction_sections,
  OPT_fgcse,
  OPT_fgcse_after_reload,
  OPT_fgcse_las,
  OPT_fgcse_lm,
  OPT_fgcse_sm,
  OPT_fgnu_keywords,
  OPT_fgnu_runtime,
  OPT_fguess_branch_probability,
  OPT_fguiding_decls,
  OPT_fhandle_exceptions,
  OPT_fhonor_std,
  OPT_fhosted,
  OPT_fhuge_objects,
  OPT_fident,
  OPT_fif_conversion,
  OPT_fif_conversion2,
  OPT_fimplement_inlines,
  OPT_fimplicit_inline_templates,
  OPT_fimplicit_templates,
  OPT_finhibit_size_directive,
  OPT_finline,
  OPT_finline_functions,
  OPT_finline_limit_,
  OPT_finline_limit_eq,
  OPT_finput_charset_,
  OPT_finstrument_functions,
  OPT_fkeep_inline_functions,
  OPT_fkeep_static_consts,
  OPT_flabels_ok,
  OPT_fleading_underscore,
  OPT_floop_optimize,
  OPT_floop_optimize2,
  OPT_fmath_errno,
  OPT_fmem_report,
  OPT_fmerge_all_constants,
  OPT_fmerge_constants,
  OPT_fmessage_length_,
  OPT_fmodulo_sched,
  OPT_fmove_all_movables,
  OPT_fmove_loop_invariants,
  OPT_fms_extensions,
  OPT_fmudflap,
  OPT_fmudflapir,
  OPT_fmudflapth,
  OPT_fname_mangling_version_,
  OPT_fnew_abi,
  OPT_fnew_ra,
  OPT_fnext_runtime,
  OPT_fnil_receivers,
  OPT_fnon_call_exceptions,
  OPT_fnonansi_builtins,
  OPT_fnonnull_objects,
  OPT_fobjc_exceptions,
  OPT_fobjc_sjlj_exceptions,
  OPT_fold_unroll_all_loops,
  OPT_fold_unroll_loops,
  OPT_fomit_frame_pointer,
  OPT_foperator_names,
  OPT_foptimize_register_move,
  OPT_foptimize_sibling_calls,
  OPT_foptional_diags,
  OPT_fpack_struct,
  OPT_fpcc_struct_return,
  OPT_fpch_deps,
  OPT_fpch_preprocess,
  OPT_fpeel_loops,
  OPT_fpeephole,
  OPT_fpeephole2,
  OPT_fpermissive,
  OPT_fpic,
  OPT_fpie,
  OPT_fprefetch_loop_arrays,
  OPT_fpreprocessed,
  OPT_fprofile,
  OPT_fprofile_arcs,
  OPT_fprofile_generate,
  OPT_fprofile_use,
  OPT_fprofile_values,
  OPT_frandom_seed,
  OPT_frandom_seed_,
  OPT_freduce_all_givs,
  OPT_freg_struct_return,
  OPT_fregmove,
  OPT_frename_registers,
  OPT_freorder_blocks,
  OPT_freorder_blocks_and_partition,
  OPT_freorder_functions,
  OPT_freplace_objc_classes,
  OPT_frepo,
  OPT_frerun_cse_after_loop,
  OPT_frerun_loop_opt,
  OPT_frounding_math,
  OPT_frtti,
  OPT_fsched_interblock,
  OPT_fsched_spec,
  OPT_fsched_spec_load,
  OPT_fsched_spec_load_dangerous,
  OPT_fsched_stalled_insns,
  OPT_fsched_stalled_insns_dep,
  OPT_fsched_stalled_insns_dep_,
  OPT_fsched_stalled_insns_,
  OPT_fsched_verbose_,
  OPT_fsched2_use_superblocks,
  OPT_fsched2_use_traces,
  OPT_fschedule_insns,
  OPT_fschedule_insns2,
  OPT_fshared_data,
  OPT_fshort_double,
  OPT_fshort_enums,
  OPT_fshort_wchar,
  OPT_fshow_column,
  OPT_fsignaling_nans,
  OPT_fsigned_bitfields,
  OPT_fsigned_char,
  OPT_fsingle_precision_constant,
  OPT_fsquangle,
  OPT_fstack_check,
  OPT_fstack_limit,
  OPT_fstack_limit_register_,
  OPT_fstack_limit_symbol_,
  OPT_fstats,
  OPT_fstrength_reduce,
  OPT_fstrict_aliasing,
  OPT_fstrict_prototype,
  OPT_fsyntax_only,
  OPT_ftabstop_,
  OPT_ftemplate_depth_,
  OPT_ftest_coverage,
  OPT_fthis_is_variable,
  OPT_fthread_jumps,
  OPT_ftime_report,
  OPT_ftls_model_,
  OPT_ftracer,
  OPT_ftrapping_math,
  OPT_ftrapv,
  OPT_ftree_based_profiling,
  OPT_ftree_ccp,
  OPT_ftree_ch,
  OPT_ftree_combine_temps,
  OPT_ftree_copyrename,
  OPT_ftree_dce,
  OPT_ftree_dominator_opts,
  OPT_ftree_dse,
  OPT_ftree_fre,
  OPT_ftree_loop_optimize,
  OPT_ftree_lrs,
  OPT_ftree_points_to_,
  OPT_ftree_pre,
  OPT_ftree_sra,
  OPT_ftree_ter,
  OPT_funit_at_a_time,
  OPT_funroll_all_loops,
  OPT_funroll_loops,
  OPT_funsafe_math_optimizations,
  OPT_funsigned_bitfields,
  OPT_funsigned_char,
  OPT_funswitch_loops,
  OPT_funwind_tables,
  OPT_fuse_cxa_atexit,
  OPT_fvar_tracking,
  OPT_fverbose_asm,
  OPT_fvpt,
  OPT_fvtable_gc,
  OPT_fvtable_thunks,
  OPT_fweak,
  OPT_fweb,
  OPT_fwide_exec_charset_,
  OPT_fworking_directory,
  OPT_fwrapv,
  OPT_fxref,
  OPT_fzero_initialized_in_bss,
  OPT_fzero_link,
  OPT_g,
  OPT_gcoff,
  OPT_gdwarf_2,
  OPT_gen_decls,
  OPT_ggdb,
  OPT_gstabs,
  OPT_gstabs_,
  OPT_gvms,
  OPT_gxcoff,
  OPT_gxcoff_,
  OPT_idirafter,
  OPT_imacros,
  OPT_include,
  OPT_iprefix,
  OPT_iquote,
  OPT_isysroot,
  OPT_isystem,
  OPT_iwithprefix,
  OPT_iwithprefixbefore,
  OPT_lang_asm,
  OPT_lang_objc,
  OPT_m,
  OPT_nostdinc,
  OPT_nostdinc__,
  OPT_o,
  OPT_p,
  OPT_pedantic,
  OPT_pedantic_errors,
  OPT_print_objc_runtime_info,
  OPT_quiet,
  OPT_remap,
  OPT_std_c__98,
  OPT_std_c89,
  OPT_std_c99,
  OPT_std_c9x,
  OPT_std_gnu__98,
  OPT_std_gnu89,
  OPT_std_gnu99,
  OPT_std_gnu9x,
  OPT_std_iso9899_1990,
  OPT_std_iso9899_199409,
  OPT_std_iso9899_1999,
  OPT_std_iso9899_199x,
  OPT_traditional_cpp,
  OPT_trigraphs,
  OPT_undef,
  OPT_v,
  OPT_version,
  OPT_w,
  N_OPTS
};
enum debug_info_type
{
  NO_DEBUG,
  DBX_DEBUG,
  SDB_DEBUG,
  DWARF_DEBUG,
  DWARF2_DEBUG,
  XCOFF_DEBUG,
  VMS_DEBUG,
  VMS_AND_DWARF2_DEBUG
};
extern enum debug_info_type write_symbols;
extern const char *const debug_type_names[];
enum debug_info_level
{
  DINFO_LEVEL_NONE,
  DINFO_LEVEL_TERSE,
  DINFO_LEVEL_NORMAL,
  DINFO_LEVEL_VERBOSE
};
extern enum debug_info_level debug_info_level;
extern unsigned char use_gnu_debug_info_extensions;
extern int flag_debug_only_used_symbols;
extern int optimize;
extern int optimize_size;
extern int quiet_flag;
extern int mem_report;
extern unsigned char extra_warnings;
extern void set_Wunused (int setting);
extern int warn_uninitialized;
extern int warn_return_type;
extern unsigned char warn_larger_than;
extern long larger_than_size;
extern int warn_strict_aliasing;
extern int profile_flag;
extern int profile_arc_flag;
extern int flag_profile_values;
extern int flag_test_coverage;
extern int flag_branch_probabilities;
extern int flag_reorder_blocks;
extern int flag_reorder_blocks_and_partition;
extern int flag_reorder_functions;
extern int flag_rename_registers;
extern int pedantic;
extern int in_system_header;
extern int flag_print_asm_name;
extern int flag_signed_char;
extern int flag_short_enums;
extern int flag_caller_saves;
extern int flag_pcc_struct_return;
extern int flag_force_mem;
extern int flag_force_addr;
extern int flag_defer_pop;
extern int flag_float_store;
extern int flag_strength_reduce;
extern int flag_old_unroll_loops;
extern int flag_old_unroll_all_loops;
extern int flag_move_all_movables;
extern int flag_prefetch_loop_arrays;
extern int flag_reduce_all_givs;
extern int flag_cse_follow_jumps;
extern int flag_cse_skip_blocks;
extern int flag_expensive_optimizations;
extern int flag_delete_null_pointer_checks;
extern int flag_no_function_cse;
extern int flag_omit_frame_pointer;
extern int flag_no_peephole;
extern int flag_optimize_sibling_calls;
extern int flag_errno_math;
extern int flag_unsafe_math_optimizations;
extern int flag_finite_math_only;
extern int flag_trapping_math;
extern int flag_rounding_math;
extern int flag_complex_divide_method;
extern int flag_rerun_loop_opt;
extern int flag_inline_functions;
extern int flag_keep_inline_functions;
extern int flag_no_inline;
extern int flag_really_no_inline;
extern int flag_syntax_only;
extern int rtl_dump_and_exit;
extern int flag_fatal_errors;
extern int flag_gen_aux_info;
extern int flag_shared_data;
extern int flag_modulo_sched;
extern int flag_schedule_insns;
extern int flag_schedule_insns_after_reload;
extern int flag_sched2_use_superblocks;
extern int flag_sched2_use_traces;
extern int flag_schedule_interblock;
extern int flag_schedule_speculative;
extern int flag_schedule_speculative_load;
extern int flag_schedule_speculative_load_dangerous;
extern int flag_sched_stalled_insns;
extern int flag_sched_stalled_insns_dep;
extern int flag_branch_on_count_reg;
extern int flag_single_precision_constant;
extern int flag_delayed_branch;
extern int flag_dump_unnumbered;
extern int flag_pedantic_errors;
extern int flag_pic;
extern int flag_pie;
extern int flag_shlib;
extern int flag_exceptions;
extern int flag_unwind_tables;
extern int flag_asynchronous_unwind_tables;
extern int flag_no_common;
extern int flag_inhibit_size_directive;
extern int flag_function_sections;
extern int flag_data_sections;
extern int flag_verbose_asm;
extern int flag_debug_asm;
extern int flag_dump_rtl_in_asm;
extern int flag_leading_underscore;
extern int flag_pack_struct;
extern int flag_argument_noalias;
extern int flag_strict_aliasing;
extern int flag_stack_check;
extern int flag_regmove;
extern int flag_instrument_function_entry_exit;
extern int flag_peephole2;
extern int flag_guess_branch_prob;
extern int flag_bounds_check;
extern int flag_merge_constants;
extern int flag_renumber_insns;
extern int frame_pointer_needed;
extern int flag_trapv;
extern int flag_wrapv;
extern int flag_evaluation_order;
extern unsigned long g_switch_value;
extern unsigned char g_switch_set;
extern int align_loops;
extern int align_loops_log;
extern int align_loops_max_skip;
extern int align_jumps;
extern int align_jumps_log;
extern int align_jumps_max_skip;
extern int align_labels;
extern int align_labels_log;
extern int align_labels_max_skip;
extern int align_functions;
extern int align_functions_log;
extern int force_align_functions_log;
extern int dump_for_graph;
enum graph_dump_types
{
  no_graph = 0,
  vcg
};
extern enum graph_dump_types graph_dump_format;
extern int flag_no_ident;
extern int flag_gcse;
extern int flag_gcse_lm;
extern int flag_gcse_sm;
extern int flag_gcse_las;
extern int flag_gcse_after_reload;
extern int flag_value_profile_transformations;
extern int flag_branch_target_load_optimize;
extern int flag_branch_target_load_optimize2;
extern int flag_btr_bb_exclusive;
extern int flag_eliminate_dwarf2_dups;
extern int flag_eliminate_unused_debug_types;
extern int flag_detailed_statistics;
extern int flag_non_call_exceptions;
extern int flag_mudflap;
extern int flag_mudflap_threads;
extern int flag_mudflap_ignore_reads;
extern int flag_tree_pre;
extern int flag_tree_ccp;
extern int flag_tree_dce;
extern int flag_tree_combine_temps;
extern int flag_tree_ter;
extern int flag_tree_live_range_split;
extern int flag_tree_dom;
extern int flag_tree_ch;
extern int flag_tree_dse;
extern int flag_tree_sra;
extern int flag_tree_copyrename;
enum pta_type
  {
    PTA_NONE,
    PTA_ANDERSEN
  };
extern enum pta_type flag_tree_points_to;
extern int flag_tree_fre;
extern int flag_zero_initialized_in_bss;
extern int flag_signaling_nans;
extern int flag_unit_at_a_time;
extern int flag_web;
extern int flag_remove_unreachable_functions;
extern int flag_var_tracking;
extern const char *flag_random_seed;
extern int flag_abi_version;
struct var_refs_queue
{
  rtx modified;
  enum machine_mode promoted_mode;
  int unsignedp;
  struct var_refs_queue *next;
};
struct sequence_stack
{
  rtx first;
  rtx last;
  struct sequence_stack *next;
};
extern struct sequence_stack *sequence_stack;
struct simple_obstack_stack
{
  struct obstack *obstack;
  struct simple_obstack_stack *next;
};
struct emit_status
{
  int x_reg_rtx_no;
  int x_first_label_num;
  rtx x_first_insn;
  rtx x_last_insn;
  struct sequence_stack *sequence_stack;
  int x_cur_insn_uid;
  location_t x_last_location;
  int regno_pointer_align_length;
  unsigned char *
    regno_pointer_align;
  rtx * x_regno_reg_rtx;
};
struct expr_status
{
  int x_pending_stack_adjust;
  int x_inhibit_defer_pop;
  int x_stack_pointer_delta;
  rtx x_saveregs_value;
  rtx x_apply_args_value;
  rtx x_forced_labels;
  rtx x_pending_chain;
};
struct function
{
  struct eh_status *eh;
  struct stmt_status *stmt;
  struct expr_status *expr;
  struct emit_status *emit;
  struct varasm_status *varasm;
  tree saved_tree;
  tree saved_args;
  tree decl;
  struct function *outer;
  int pops_args;
  int args_size;
  int pretend_args_size;
  int outgoing_args_size;
  rtx arg_offset_rtx;
  CUMULATIVE_ARGS args_info;
  rtx return_rtx;
  rtx internal_arg_pointer;
  struct initial_value_struct *hard_reg_initial_vals;
  rtx x_nonlocal_goto_handler_labels;
  rtx x_return_label;
  rtx x_naked_return_label;
  rtx x_stack_slot_list;
  rtx x_tail_recursion_reentry;
  rtx x_arg_pointer_save_area;
  long x_frame_offset;
  tree static_chain_decl;
  tree nonlocal_goto_save_area;
  rtx x_parm_birth_insn;
  struct varray_head_tag * x_used_temp_slots;
  struct temp_slot *x_avail_temp_slots;
  int x_temp_slot_level;
  int x_var_temp_slot_level;
  int x_target_temp_slot_level;
  struct var_refs_queue *fixup_var_refs_queue;
  int inlinable;
  int no_debugging_symbols;
  rtvec original_arg_vector;
  tree original_decl_initial;
  int inl_max_label_num;
  int funcdef_no;
  struct machine_function * machine;
  int stack_alignment_needed;
  int preferred_stack_boundary;
  unsigned char recursive_call_emit;
  unsigned char tail_call_emit;
  struct language_function * language;
  rtx epilogue_delay_list;
  enum function_frequency {
    FUNCTION_FREQUENCY_UNLIKELY_EXECUTED,
    FUNCTION_FREQUENCY_NORMAL,
    FUNCTION_FREQUENCY_HOT
  } function_frequency;
  int max_jumptable_ents;
  int last_label_uid;
  location_t function_end_locus;
  struct varray_head_tag *ib_boundaries_block;
  tree unexpanded_var_list;
  unsigned int returns_struct : 1;
  unsigned int returns_pcc_struct : 1;
  unsigned int returns_pointer : 1;
  unsigned int calls_setjmp : 1;
  unsigned int calls_longjmp : 1;
  unsigned int calls_alloca : 1;
  unsigned int calls_eh_return : 1;
  unsigned int has_nonlocal_label : 1;
  unsigned int has_nonlocal_goto : 1;
  unsigned int contains_functions : 1;
  unsigned int has_computed_jump : 1;
  unsigned int is_thunk : 1;
  unsigned int all_throwers_are_sibcalls : 1;
  unsigned int instrument_entry_exit : 1;
  unsigned int profile : 1;
  unsigned int limit_stack : 1;
  unsigned int stdarg : 1;
  unsigned int x_dont_save_pending_sizes_p : 1;
  unsigned int uses_const_pool : 1;
  unsigned int uses_pic_offset_table : 1;
  unsigned int uses_eh_lsda : 1;
  unsigned int arg_pointer_save_area_init : 1;
};
extern struct function *cfun;
extern struct function *outer_function_chain;
extern int virtuals_instantiated;
extern int trampolines_created;
struct function *find_function_data (tree);
extern void reorder_blocks (void);
extern void number_blocks (tree);
extern void clear_block_marks (tree);
extern tree blocks_nreverse (tree);
extern void reset_block_changes (void);
extern void record_block_change (tree);
extern void finalize_block_changes (void);
extern void check_block_change (rtx, tree *);
extern void free_block_changes (void);
extern long get_frame_size (void);
extern long get_func_frame_size (struct function *);
extern struct machine_function * (*init_machine_status) (void);
extern void restore_emit_status (struct function *);
extern void free_after_parsing (struct function *);
extern void free_after_compilation (struct function *);
extern void init_varasm_status (struct function *);
extern void diddle_return_value (void (*)(rtx, void*), void*);
extern void clobber_return_register (void);
extern void use_return_register (void);
extern rtx get_arg_pointer_save_area (struct function *);
extern void init_virtual_regs (struct emit_status *);
extern void instantiate_virtual_regs (void);
extern const char *current_function_name (void);
extern void init_function_once (void);
extern void do_warn_unused_parameter (tree);
void optimize_inline_calls (tree);
unsigned char tree_inlinable_function_p (tree);
tree copy_tree_r (tree*, int*, void*);
void clone_body (tree, tree, void*);
tree save_body (tree, tree *);
void remap_save_expr (tree*, void*, int*);
int estimate_num_insns (tree expr);
extern int flag_inline_trees;
typedef struct {
  struct tree_statement_list_node *ptr;
  tree container;
} tree_stmt_iterator;
static tree_stmt_iterator
tsi_start (tree t)
{
  tree_stmt_iterator i;
  i.ptr = ((t)->stmt_list.head);
  i.container = t;
  return i;
}
static tree_stmt_iterator
tsi_last (tree t)
{
  tree_stmt_iterator i;
  i.ptr = ((t)->stmt_list.tail);
  i.container = t;
  return i;
}
static unsigned char
tsi_end_p (tree_stmt_iterator i)
{
  return i.ptr == ((void *)0);
}
static unsigned char
tsi_one_before_end_p (tree_stmt_iterator i)
{
  return i.ptr != ((void *)0) && i.ptr->next == ((void *)0);
}
static void
tsi_next (tree_stmt_iterator *i)
{
  i->ptr = i->ptr->next;
}
static void
tsi_prev (tree_stmt_iterator *i)
{
  i->ptr = i->ptr->prev;
}
static tree *
tsi_stmt_ptr (tree_stmt_iterator i)
{
  return &i.ptr->stmt;
}
static tree
tsi_stmt (tree_stmt_iterator i)
{
  return i.ptr->stmt;
}
enum tsi_iterator_update
{
  TSI_NEW_STMT,
  TSI_SAME_STMT,
  TSI_CHAIN_START,
  TSI_CHAIN_END,
  TSI_CONTINUE_LINKING
};
extern void tsi_link_before (tree_stmt_iterator *, tree,
        enum tsi_iterator_update);
extern void tsi_link_after (tree_stmt_iterator *, tree,
       enum tsi_iterator_update);
void tsi_delink (tree_stmt_iterator *);
tree tsi_split_statement_list_after (const tree_stmt_iterator *);
tree tsi_split_statement_list_before (tree_stmt_iterator *);
void append_to_statement_list (tree, tree *);
void append_to_statement_list_force (tree, tree *);
extern tree create_tmp_var_raw (tree, const char *);
extern tree create_tmp_var_name (const char *);
extern tree create_tmp_var (tree, const char *);
extern unsigned char is_gimple_tmp_var (tree);
extern tree get_initialized_tmp_var (tree, tree *, tree *);
extern tree get_formal_tmp_var (tree, tree *);
extern void declare_tmp_vars (tree, tree);
extern void annotate_all_with_locus (tree *, location_t);
extern unsigned char is_gimple_stmt (tree);
extern unsigned char is_gimple_reg_type (tree);
extern unsigned char is_gimple_reg (tree);
extern unsigned char is_gimple_variable (tree);
extern unsigned char is_gimple_min_lval (tree);
extern unsigned char is_gimple_addr_expr_arg (tree);
extern unsigned char is_gimple_lvalue (tree);
extern unsigned char is_gimple_min_invariant (tree);
extern unsigned char is_gimple_val (tree);
extern unsigned char is_gimple_rhs (tree);
extern unsigned char is_gimple_condexpr (tree);
extern unsigned char is_gimple_cast (tree);
extern unsigned char is_gimple_constructor_elt (tree);
extern unsigned char is_gimple_non_addressable (tree t);
extern unsigned char is_gimple_call_addr (tree);
extern tree get_call_expr_in (tree t);
extern void recalculate_side_effects (tree);
typedef enum fallback_t {
  fb_none = 0,
  fb_rvalue = 1,
  fb_lvalue = 2,
  fb_mayfail = 4,
  fb_either= fb_rvalue | fb_lvalue
} fallback_t;
enum gimplify_status {
  GS_ERROR = -2,
  GS_UNHANDLED = -1,
  GS_OK = 0,
  GS_ALL_DONE = 1
};
extern enum gimplify_status gimplify_expr (tree *, tree *, tree *,
        unsigned char (*) (tree), fallback_t);
extern void gimplify_type_sizes (tree, tree *);
extern void gimplify_one_sizepos (tree *, tree *);
extern void gimplify_stmt (tree *);
extern void gimplify_to_stmt_list (tree *);
extern void gimplify_body (tree *, tree);
extern void push_gimplify_context (void);
extern void pop_gimplify_context (tree);
extern void gimplify_and_add (tree, tree *);
extern tree get_base_address (tree t);
extern void gimple_add_tmp_var (tree);
extern tree gimple_current_bind_expr (void);
extern void gimple_push_bind_expr (tree);
extern void gimple_pop_bind_expr (void);
extern void unshare_all_trees (tree);
extern tree voidify_wrapper_expr (tree, tree);
extern tree gimple_build_eh_filter (tree, tree, tree);
extern tree build_and_jump (tree *);
extern tree alloc_stmt_list (void);
extern void free_stmt_list (tree);
extern tree force_labels_r (tree *, int *, void *);
extern enum gimplify_status gimplify_va_arg_expr (tree *, tree *, tree *);
extern void lower_nested_functions (tree);
typedef struct def_operand_ptr
{
  tree * def;
} def_operand_p;
typedef struct use_operand_ptr
{
  tree * use;
} use_operand_p;
typedef struct def_optype_d
{
  unsigned num_defs;
  struct def_operand_ptr defs[1];
} def_optype_t;
typedef def_optype_t *def_optype;
typedef struct use_optype_d
{
  unsigned num_uses;
  struct use_operand_ptr uses[1];
} use_optype_t;
typedef use_optype_t *use_optype;
typedef struct v_may_def_optype_d
{
  unsigned num_v_may_defs;
  tree v_may_defs[1];
} v_may_def_optype_t;
typedef v_may_def_optype_t *v_may_def_optype;
typedef struct vuse_optype_d
{
  unsigned num_vuses;
  tree vuses[1];
} vuse_optype_t;
typedef vuse_optype_t *vuse_optype;
typedef struct v_must_def_optype_d
{
  unsigned num_v_must_defs;
  tree v_must_defs[1];
} v_must_def_optype_t;
typedef v_must_def_optype_t *v_must_def_optype;
extern void init_ssa_operands (void);
extern void fini_ssa_operands (void);
extern void verify_start_operands (tree);
extern void finalize_ssa_stmt_operands (tree);
void add_vuse (tree, tree);
extern void get_stmt_operands (tree);
extern void remove_vuses (tree);
extern void remove_v_may_defs (tree);
extern void remove_v_must_defs (tree);
extern void copy_virtual_operands (tree, tree);
struct ptr_info_def
{
  unsigned int pt_anything : 1;
  unsigned int pt_malloc : 1;
  unsigned int value1_escapes_p : 1;
  bitmap pt_vars;
  tree name_mem_tag;
};
enum tree_ann_type { TREE_ANN_COMMON, VAR_ANN, STMT_ANN };
struct tree_ann_common_d
{
  enum tree_ann_type type;
  tree value1_handle;
};
enum need_phi_state {
  NEED_PHI_STATE_UNKNOWN,
  NEED_PHI_STATE_NO,
  NEED_PHI_STATE_MAYBE
};
enum mem_tag_kind {
  NOT_A_TAG,
  TYPE_TAG,
  NAME_TAG
};
struct var_ann_d
{
  struct tree_ann_common_d common;
  unsigned has_hidden_use : 1;
  unsigned out_of_ssa_tag : 1;
  unsigned root_var_processed : 1;
  unsigned int mem_tag_kind : 2;
  unsigned is_alias_tag : 1;
  unsigned used : 1;
  unsigned int need_phi_state : 2;
  tree type_mem_tag;
  varray_type may_aliases;
  size_t uid;
  unsigned partition1;
  unsigned root_index;
  tree default_def;
  tree current_def;
};
struct dataflow_d
{
  varray_type immediate_uses;
  tree uses[2];
};
typedef struct dataflow_d *dataflow_t;
struct stmt_ann_d
{
  struct tree_ann_common_d common;
  unsigned modified : 1;
  unsigned in_ccp_worklist: 1;
  unsigned makes_aliased_loads : 1;
  unsigned makes_aliased_stores : 1;
  unsigned has_volatile_ops : 1;
  unsigned makes_clobbering_call : 1;
  basic_block bb;
  struct def_optype_d * def_ops;
  struct use_optype_d * use_ops;
  struct v_may_def_optype_d * v_may_def_ops;
  struct vuse_optype_d * vuse_ops;
  struct v_must_def_optype_d * v_must_def_ops;
  dataflow_t df;
  bitmap addresses_taken;
  unsigned int uid;
};
union tree_ann_d
{
  struct tree_ann_common_d common;
  struct var_ann_d decl;
  struct stmt_ann_d stmt;
};
typedef union tree_ann_d *tree_ann_t;
typedef struct var_ann_d *var_ann_t;
typedef struct stmt_ann_d *stmt_ann_t;
static tree_ann_t tree_ann (tree);
static tree_ann_t get_tree_ann (tree);
static var_ann_t var_ann (tree);
static var_ann_t get_var_ann (tree);
static stmt_ann_t stmt_ann (tree);
static stmt_ann_t get_stmt_ann (tree);
static enum tree_ann_type ann_type (tree_ann_t);
static basic_block bb_for_stmt (tree);
extern void set_bb_for_stmt (tree, basic_block);
static void modify_stmt (tree);
static void unmodify_stmt (tree);
static unsigned char stmt_modified_p (tree);
static varray_type may_aliases (tree);
static int get_lineno (tree);
static const char *get_filename (tree);
static unsigned char is_exec_stmt (tree);
static unsigned char is_label_stmt (tree);
static v_may_def_optype get_v_may_def_ops (stmt_ann_t);
static vuse_optype get_vuse_ops (stmt_ann_t);
static use_optype get_use_ops (stmt_ann_t);
static def_optype get_def_ops (stmt_ann_t);
static bitmap addresses_taken (tree);
static int num_immediate_uses (dataflow_t);
static tree immediate_use (dataflow_t, int);
static dataflow_t get_immediate_uses (tree);
static unsigned char has_hidden_use (tree);
static void set_has_hidden_use (tree);
static void set_default_def (tree, tree);
static tree default_def (tree);
static unsigned char may_be_aliased (tree);
struct edge_prediction
{
  struct edge_prediction *next;
  edge edge1;
  enum br_predictor predictor;
  int probability;
};
struct bb_ann_d
{
  tree phi_nodes;
  int num_preds;
  unsigned forwardable: 1;
  unsigned has_escape_site : 1;
  struct edge_prediction *predictions;
};
typedef struct bb_ann_d *bb_ann_t;
static bb_ann_t bb_ann (basic_block);
static tree phi_nodes (basic_block);
static void set_phi_nodes (basic_block, tree);
extern varray_type referenced_vars;
extern varray_type ssa_names;
extern tree global_var;
extern bitmap call_clobbered_vars;
extern unsigned char aliases_computed_p;
typedef struct {
  tree_stmt_iterator tsi;
  basic_block bb;
} block_stmt_iterator;
static block_stmt_iterator bsi_start (basic_block);
static block_stmt_iterator bsi_last (basic_block);
static block_stmt_iterator bsi_after_labels (basic_block);
static unsigned char bsi_end_p (block_stmt_iterator);
static void bsi_next (block_stmt_iterator *);
static void bsi_prev (block_stmt_iterator *);
static tree bsi_stmt (block_stmt_iterator);
static tree * bsi_stmt_ptr (block_stmt_iterator);
extern void bsi_remove (block_stmt_iterator *);
extern void bsi_move_before (block_stmt_iterator *, block_stmt_iterator *);
extern void bsi_move_after (block_stmt_iterator *, block_stmt_iterator *);
extern void bsi_move_to_bb_end (block_stmt_iterator *, basic_block);
enum bsi_iterator_update
{
  BSI_NEW_STMT,
  BSI_SAME_STMT,
  BSI_CHAIN_START,
  BSI_CHAIN_END,
  BSI_CONTINUE_LINKING
};
extern void bsi_insert_before (block_stmt_iterator *, tree,
          enum bsi_iterator_update);
extern void bsi_insert_after (block_stmt_iterator *, tree,
         enum bsi_iterator_update);
extern void bsi_replace (const block_stmt_iterator *, tree, unsigned char);
extern void delete_tree_cfg_annotations (void);
extern void disband_implicit_edges (void);
extern unsigned char stmt_ends_bb_p (tree);
extern unsigned char is_ctrl_stmt (tree);
extern unsigned char is_ctrl_altering_stmt (tree);
extern unsigned char computed_goto_p (tree);
extern unsigned char simple_goto_p (tree);
extern void tree_dump_bb (basic_block, FILE *, int);
extern void debug_tree_bb (basic_block);
extern basic_block debug_tree_bb_n (int);
extern void dump_tree_cfg (FILE *, int);
extern void debug_tree_cfg (int);
extern void dump_cfg_stats (FILE *);
extern void debug_cfg_stats (void);
extern void debug_loop_ir (void);
extern void print_loop_ir (FILE *);
extern void cleanup_tree_cfg (void);
extern tree first_stmt (basic_block);
extern tree last_stmt (basic_block);
extern tree *last_stmt_ptr (basic_block);
extern tree last_and_only_stmt (basic_block);
extern edge find_taken_edge (basic_block, tree);
extern void cfg_remove_useless_stmts (void);
extern edge thread_edge (edge, basic_block);
extern basic_block label_to_block (tree);
extern void tree_optimize_tail_calls (unsigned char, enum tree_dump_index);
extern edge tree_block_forwards_to (basic_block bb);
extern void bsi_insert_on_edge (edge, tree);
extern void bsi_commit_edge_inserts (int *);
extern void notice_special_calls (tree);
extern void clear_special_calls (void);
extern void compute_dominance_frontiers (bitmap *);
extern void verify_stmts (void);
extern tree tree_block_label (basic_block bb);
extern void extract_true_false_edges_from_block (basic_block, edge *, edge *);
extern unsigned char tree_purge_dead_eh_edges (basic_block);
extern unsigned char tree_purge_all_dead_eh_edges (bitmap);
extern void dump_generic_bb (FILE *, basic_block, int, int);
extern var_ann_t create_var_ann (tree);
extern stmt_ann_t create_stmt_ann (tree);
extern tree_ann_t create_tree_ann (tree);
extern tree create_phi_node (tree, basic_block);
extern void add_phi_arg (tree *, tree, edge);
extern void remove_phi_arg (tree, basic_block);
extern void remove_phi_arg_num (tree, int);
extern void remove_phi_node (tree, tree, basic_block);
extern void remove_all_phi_nodes_for (bitmap);
extern void dump_dfa_stats (FILE *);
extern void debug_dfa_stats (void);
extern void debug_referenced_vars (void);
extern void dump_referenced_vars (FILE *);
extern void dump_variable (FILE *, tree);
extern void debug_variable (tree);
extern void dump_immediate_uses (FILE *);
extern void debug_immediate_uses (void);
extern void dump_immediate_uses_for (FILE *, tree);
extern void debug_immediate_uses_for (tree);
extern void compute_immediate_uses (int, unsigned char (*)(tree));
extern void free_df (void);
extern tree get_virtual_var (tree);
extern void add_referenced_tmp_var (tree var);
extern void mark_new_vars_to_rename (tree, bitmap);
extern void redirect_immediate_uses (tree, tree);
extern tree make_rename_temp (tree, const char *);
struct lower_data;
extern void lower_stmt_body (tree, struct lower_data *);
extern void expand_used_vars (void);
extern void record_vars (tree);
extern unsigned char block_may_fallthru (tree block);
extern void dump_may_aliases_for (FILE *, tree);
extern void debug_may_aliases_for (tree);
extern void dump_alias_info (FILE *);
extern void debug_alias_info (void);
extern void dump_points_to_info (FILE *);
extern void debug_points_to_info (void);
typedef unsigned char (*walk_use_def_chains_fn) (tree, tree, void *);
extern void init_tree_ssa (void);
extern void rewrite_vars_out_of_ssa (bitmap);
extern void dump_reaching_defs (FILE *);
extern void debug_reaching_defs (void);
extern void dump_tree_ssa (FILE *);
extern void debug_tree_ssa (void);
extern void debug_def_blocks (void);
extern void dump_tree_ssa_stats (FILE *);
extern void debug_tree_ssa_stats (void);
extern void ssa_remove_edge (edge);
extern edge ssa_redirect_edge (edge, basic_block);
extern void set_is_used (tree);
extern unsigned char tree_ssa_useless_type_conversion (tree);
extern unsigned char tree_ssa_useless_type_conversion_1 (tree, tree);
extern void verify_ssa (void);
extern void delete_tree_ssa (void);
extern void register_new_def (tree, varray_type *);
extern void walk_use_def_chains (tree, walk_use_def_chains_fn, void *);
extern void kill_redundant_phi_nodes (void);
extern void rewrite_into_ssa (unsigned char);
extern void rewrite_ssa_into_ssa (bitmap);
void compute_global_livein (bitmap, bitmap);
tree duplicate_ssa_name (tree, tree);
unsigned char fold_stmt (tree *);
tree widen_bitfield (tree, tree, tree);
extern void dump_dominator_optimization_stats (FILE *);
extern void debug_dominator_optimization_stats (void);
extern void propagate_value (use_operand_p, tree);
extern void propagate_tree_value (tree *, tree);
extern void replace_exp (use_operand_p, tree);
static int phi_arg_from_edge (tree, edge);
static unsigned char may_propagate_copy (tree, tree);
static unsigned char is_call_clobbered (tree);
static void mark_call_clobbered (tree);
extern void make_eh_edges (tree);
extern unsigned char tree_could_trap_p (tree);
extern unsigned char tree_could_throw_p (tree);
extern unsigned char tree_can_throw_internal (tree);
extern unsigned char tree_can_throw_external (tree);
extern int lookup_stmt_eh_region (tree);
extern void add_stmt_to_eh_region (tree, int);
extern unsigned char remove_stmt_from_eh_region (tree);
extern unsigned char maybe_clean_eh_stmt (tree);
void add_to_value (tree, tree);
void debug_value_expressions (tree);
void print_value_expressions (FILE *, tree);
unsigned char expressions_equal_p (tree, tree);
tree get_value_handle (tree);
hashval_t vn_compute (tree, hashval_t, vuse_optype);
tree vn_lookup_or_add (tree, vuse_optype);
void vn_add (tree, tree, vuse_optype);
tree vn_lookup (tree, vuse_optype);
void vn_init (void);
void vn_delete (void);
void insert_edge_copies (tree stmt, basic_block bb);
static var_ann_t
var_ann (tree t)
{
  return (var_ann_t) t->common.ann;
}
static var_ann_t
get_var_ann (tree var)
{
  var_ann_t ann = var_ann (var);
  return (ann) ? ann : create_var_ann (var);
}
static stmt_ann_t
stmt_ann (tree t)
{
  return (stmt_ann_t) t->common.ann;
}
static stmt_ann_t
get_stmt_ann (tree stmt)
{
  stmt_ann_t ann = stmt_ann (stmt);
  return (ann) ? ann : create_stmt_ann (stmt);
}
static enum tree_ann_type
ann_type (tree_ann_t ann)
{
  return ann->common.type;
}
static basic_block
bb_for_stmt (tree t)
{
  stmt_ann_t ann = stmt_ann (t);
  return ann ? ann->bb : ((void *)0);
}
static varray_type
may_aliases (tree var)
{
  var_ann_t ann = var_ann (var);
  return ann ? ann->may_aliases : ((void *)0);
}
static unsigned char
has_hidden_use (tree var)
{
  var_ann_t ann = var_ann (var);
  return ann ? ann->has_hidden_use : 0;
}
static void
set_has_hidden_use (tree var)
{
  var_ann_t ann = var_ann (var);
  if (ann == ((void *)0))
    ann = create_var_ann (var);
  ann->has_hidden_use = 1;
}
static int
get_lineno (tree expr)
{
  if (expr == (tree) ((void *)0))
    return -1;
  if (((enum tree_code) (expr)->common.code) == COMPOUND_EXPR)
    expr = ((expr)->exp.operands[0]);
  if (! (((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (expr)->common.code))])) != 0) ? (expr)->exp.locus : (location_t *)((void *)0)) != ((void *)0)))
    return -1;
  return ((expr)->exp.locus->line);
}
static const char *
get_filename (tree expr)
{
  const char *filename;
  if (expr == (tree) ((void *)0))
    return "???";
  if (((enum tree_code) (expr)->common.code) == COMPOUND_EXPR)
    expr = ((expr)->exp.operands[0]);
  if ((((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (expr)->common.code))])) != 0) ? (expr)->exp.locus : (location_t *)((void *)0)) != ((void *)0)) && (filename = ((expr)->exp.locus->file)))
    return filename;
  else
    return "???";
}
static void
modify_stmt (tree t)
{
  stmt_ann_t ann = stmt_ann (t);
  if (ann == ((void *)0))
    ann = create_stmt_ann (t);
  ann->modified = 1;
}
static void
unmodify_stmt (tree t)
{
  stmt_ann_t ann = stmt_ann (t);
  if (ann == ((void *)0))
    ann = create_stmt_ann (t);
  ann->modified = 0;
}
static unsigned char
stmt_modified_p (tree t)
{
  stmt_ann_t ann = stmt_ann (t);
  return ann ? ann->modified : 1;
}
static def_optype
get_def_ops (stmt_ann_t ann)
{
  return ann ? ann->def_ops : ((void *)0);
}
static use_optype
get_use_ops (stmt_ann_t ann)
{
  return ann ? ann->use_ops : ((void *)0);
}
static v_may_def_optype
get_v_may_def_ops (stmt_ann_t ann)
{
  return ann ? ann->v_may_def_ops : ((void *)0);
}
static vuse_optype
get_vuse_ops (stmt_ann_t ann)
{
  return ann ? ann->vuse_ops : ((void *)0);
}
static v_must_def_optype
get_v_must_def_ops (stmt_ann_t ann)
{
  return ann ? ann->v_must_def_ops : ((void *)0);
}
static tree
get_use_from_ptr (use_operand_p use)
{
  return *(use.use);
}
static tree
get_def_from_ptr (def_operand_p def)
{
  return *(def.def);
}
static use_operand_p
get_use_op_ptr (use_optype uses, unsigned int index)
{
  return uses->uses[index];
}
static def_operand_p
get_def_op_ptr (def_optype defs, unsigned int index)
{
  return defs->defs[index];
}
static def_operand_p
get_v_may_def_result_ptr(v_may_def_optype v_may_defs, unsigned int index)
{
  def_operand_p op;
  op.def = &(v_may_defs->v_may_defs[index * 2]);
  return op;
}
static use_operand_p
get_v_may_def_op_ptr(v_may_def_optype v_may_defs, unsigned int index)
{
  use_operand_p op;
  op.use = &(v_may_defs->v_may_defs[index * 2 + 1]);
  return op;
}
static use_operand_p
get_vuse_op_ptr(vuse_optype vuses, unsigned int index)
{
  use_operand_p op;
  op.use = &(vuses->vuses[index]);
  return op;
}
static def_operand_p
get_v_must_def_op_ptr (v_must_def_optype v_must_defs, unsigned int index)
{
  def_operand_p op;
  op.def = &(v_must_defs->v_must_defs[index]);
  return op;
}
static def_operand_p
get_phi_result_ptr (tree phi)
{
  def_operand_p op;
  op.def = &((phi)->phi.result);
  return op;
}
static use_operand_p
get_phi_arg_def_ptr (tree phi, int i)
{
  use_operand_p op;
  op.use = &(((phi)->phi.a[i]).def);
  return op;
}
static void
start_ssa_stmt_operands (tree stmt )
{
}
static bitmap
addresses_taken (tree stmt)
{
  stmt_ann_t ann = stmt_ann (stmt);
  return ann ? ann->addresses_taken : ((void *)0);
}
static dataflow_t
get_immediate_uses (tree stmt)
{
  stmt_ann_t ann = stmt_ann (stmt);
  return ann ? ann->df : ((void *)0);
}
static int
num_immediate_uses (dataflow_t df)
{
  varray_type imm;
  if (!df)
    return 0;
  imm = df->immediate_uses;
  if (!imm)
    return df->uses[1] ? 2 : 1;
  return ((imm)->elements_used) + 2;
}
static tree
immediate_use (dataflow_t df, int num)
{
  if (!df)
    return (tree) ((void *)0);
  if (num < 2)
    return df->uses[num];
  return ((df->immediate_uses)->data.tree1[num - 2]);
}
static bb_ann_t
bb_ann (basic_block bb)
{
  return (bb_ann_t)bb->tree_annotations;
}
static tree
phi_nodes (basic_block bb)
{
  if (bb->index < 0)
    return ((void *)0);
  return bb_ann (bb)->phi_nodes;
}
static void
set_phi_nodes (basic_block bb, tree l)
{
  tree phi;
  bb_ann (bb)->phi_nodes = l;
  for (phi = l; phi; phi = (((phi))->common.chain))
    set_bb_for_stmt (phi, bb);
}
static int
phi_arg_from_edge (tree phi, edge e)
{
  int i;
  for (i = 0; i < (phi)->phi.num_args; i++)
    if (((phi)->phi.a[i]).e == e)
      return i;
  return -1;
}
static unsigned char
is_exec_stmt (tree t)
{
  return (t && !(((enum tree_code) (t)->common.code) == NOP_EXPR && (((enum tree_code) (((t)->common.type))->common.code) == VOID_TYPE) && integer_zerop (((t)->exp.operands[0]))) && t != global_trees[TI_ERROR_MARK]);
}
static unsigned char
is_label_stmt (tree t)
{
  if (t)
    switch (((enum tree_code) (t)->common.code))
      {
 case LABEL_DECL:
 case LABEL_EXPR:
 case CASE_LABEL_EXPR:
   return 1;
 default:
   return 0;
      }
  return 0;
}
static unsigned char
may_propagate_copy (tree dest, tree orig)
{
  if (((enum tree_code) (dest)->common.code) == SSA_NAME
      && ((enum tree_code) (orig)->common.code) == SSA_NAME
      && (((enum tree_code) (((dest)->common.type))->common.code) == POINTER_TYPE || ((enum tree_code) (((dest)->common.type))->common.code) == REFERENCE_TYPE)
      && (((enum tree_code) (((orig)->common.type))->common.code) == POINTER_TYPE || ((enum tree_code) (((orig)->common.type))->common.code) == REFERENCE_TYPE))
    {
      tree mt_dest = var_ann ((dest)->ssa_name.var)->type_mem_tag;
      tree mt_orig = var_ann ((orig)->ssa_name.var)->type_mem_tag;
      if (mt_dest && mt_orig && mt_dest != mt_orig)
 return 0;
    }
  if (((enum tree_code) (dest)->common.code) == SSA_NAME && !is_gimple_reg (dest))
    {
      if (((enum tree_code) (orig)->common.code) == SSA_NAME)
 {
   if (!is_gimple_reg (orig))
     return 1;
 }
      return 0;
    }
  if (((enum tree_code) (orig)->common.code) == SSA_NAME
      && (orig)->common.asm_written_flag)
    return 0;
  if (((enum tree_code) (dest)->common.code) == SSA_NAME
      && ((dest)->common.asm_written_flag
   || (((dest)->ssa_name.var)->decl.inline_flag)))
    return 0;
  return 1;
}
static void
set_default_def (tree var, tree def)
{
  var_ann_t ann = var_ann (var);
  if (ann == ((void *)0))
    ann = create_var_ann (var);
  ann->default_def = def;
}
static tree
default_def (tree var)
{
  var_ann_t ann = var_ann (var);
  return ann ? ann->default_def : (tree) ((void *)0);
}
static unsigned char
phi_ssa_name_p (tree t)
{
  if (((enum tree_code) (t)->common.code) == SSA_NAME)
    return 1;
  return 0;
}
static block_stmt_iterator
bsi_start (basic_block bb)
{
  block_stmt_iterator bsi;
  if (bb->stmt_list)
    bsi.tsi = tsi_start (bb->stmt_list);
  else
    {
      bsi.tsi.ptr = ((void *)0);
      bsi.tsi.container = ((void *)0);
    }
  bsi.bb = bb;
  return bsi;
}
static block_stmt_iterator
bsi_after_labels (basic_block bb)
{
  block_stmt_iterator bsi;
  tree_stmt_iterator next;
  bsi.bb = bb;
  if (!bb->stmt_list)
    {
      bsi.tsi.ptr = ((void *)0);
      bsi.tsi.container = ((void *)0);
      return bsi;
    }
  bsi.tsi = tsi_start (bb->stmt_list);
  if (tsi_end_p (bsi.tsi))
    return bsi;
  if (((enum tree_code) (tsi_stmt (bsi.tsi))->common.code) != LABEL_EXPR)
    fancy_abort ("gcc.c", 91144, "?");
  next = bsi.tsi;
  tsi_next (&next);
  while (!tsi_end_p (next)
  && ((enum tree_code) (tsi_stmt (next))->common.code) == LABEL_EXPR)
    {
      bsi.tsi = next;
      tsi_next (&next);
    }
  return bsi;
}
static block_stmt_iterator
bsi_last (basic_block bb)
{
  block_stmt_iterator bsi;
  if (bb->stmt_list)
    bsi.tsi = tsi_last (bb->stmt_list);
  else
    {
      bsi.tsi.ptr = ((void *)0);
      bsi.tsi.container = ((void *)0);
    }
  bsi.bb = bb;
  return bsi;
}
static unsigned char
bsi_end_p (block_stmt_iterator i)
{
  return tsi_end_p (i.tsi);
}
static void
bsi_next (block_stmt_iterator *i)
{
  tsi_next (&i->tsi);
}
static void
bsi_prev (block_stmt_iterator *i)
{
  tsi_prev (&i->tsi);
}
static tree
bsi_stmt (block_stmt_iterator i)
{
  return tsi_stmt (i.tsi);
}
static tree *
bsi_stmt_ptr (block_stmt_iterator i)
{
  return tsi_stmt_ptr (i.tsi);
}
static unsigned char
may_be_aliased (tree var)
{
  return (((var)->common.addressable_flag)
          || decl_function_context (var) != current_function_decl);
}
static unsigned char
is_call_clobbered (tree var)
{
  return needs_to_live_in_memory (var)
  || bitmap_bit_p (call_clobbered_vars, var_ann (var)->uid);
}
static void
mark_call_clobbered (tree var)
{
  var_ann_t ann = var_ann (var);
  (var)->decl.needs_to_live_in_memory = 1;
  bitmap_set_bit (call_clobbered_vars, ann->uid);
}
static void
mark_non_addressable (tree var)
{
  bitmap_clear_bit (call_clobbered_vars, var_ann (var)->uid);
  (var)->decl.needs_to_live_in_memory = 0;
  ((var)->common.addressable_flag) = 0;
}
static tree_ann_t
tree_ann (tree t)
{
  return t->common.ann;
}
static tree_ann_t
get_tree_ann (tree t)
{
  tree_ann_t ann = tree_ann (t);
  return (ann) ? ann : create_tree_ann (t);
}
extern void mudflap_init (void);
extern void mudflap_c_function_decls (tree);
extern void mudflap_c_function_ops (tree);
extern void mudflap_enqueue_decl (tree);
extern void mudflap_enqueue_constant (tree);
extern void mudflap_finish_file (void);
extern int mf_marked_p (tree);
extern tree mf_mark (tree);
typedef struct dump_node_info
{
  unsigned int index;
  unsigned int binfo_p : 1;
} *dump_node_info_p;
typedef struct dump_queue
{
  splay_tree_node node;
  struct dump_queue *next;
} *dump_queue_p;
struct dump_info
{
  FILE *stream;
  tree node;
  int flags;
  unsigned int index;
  unsigned int column;
  dump_queue_p queue;
  dump_queue_p queue_end;
  dump_queue_p free_list;
  splay_tree nodes;
};
extern void dump_pointer (dump_info_p, const char *, void *);
extern void dump_int (dump_info_p, const char *, int);
extern void dump_string (dump_info_p, const char *);
extern void dump_stmt (dump_info_p, tree);
extern void queue_and_dump_index (dump_info_p, const char *, tree, int);
extern void queue_and_dump_type (dump_info_p, tree);
extern void dump_function (enum tree_dump_index, tree);
extern void dump_function_to_file (tree, FILE *, int);
extern unsigned int dump_register (const char *, const char *);
extern FILE *dump_file;
extern int dump_flags;
extern struct bitmap_head_def *vars_to_rename;
struct tree_opt_pass
{
  const char *name;
  unsigned char (*gate) (void);
  void (*execute) (void);
  struct tree_opt_pass *sub;
  struct tree_opt_pass *next;
  unsigned int static_pass_number;
  unsigned int tv_id;
  unsigned int properties_required;
  unsigned int properties_provided;
  unsigned int properties_destroyed;
  unsigned int todo_flags_start;
  unsigned int todo_flags_finish;
};
extern struct tree_opt_pass pass_mudflap_1;
extern struct tree_opt_pass pass_mudflap_2;
extern struct tree_opt_pass pass_remove_useless_stmts;
extern struct tree_opt_pass pass_lower_cf;
extern struct tree_opt_pass pass_lower_eh;
extern struct tree_opt_pass pass_build_cfg;
extern struct tree_opt_pass pass_tree_profile;
extern struct tree_opt_pass pass_referenced_vars;
extern struct tree_opt_pass pass_build_pta;
extern struct tree_opt_pass pass_del_pta;
extern struct tree_opt_pass pass_sra;
extern struct tree_opt_pass pass_tail_recursion;
extern struct tree_opt_pass pass_tail_calls;
extern struct tree_opt_pass pass_loop;
extern struct tree_opt_pass pass_loop_init;
extern struct tree_opt_pass pass_loop_done;
extern struct tree_opt_pass pass_ch;
extern struct tree_opt_pass pass_ccp;
extern struct tree_opt_pass pass_build_ssa;
extern struct tree_opt_pass pass_del_ssa;
extern struct tree_opt_pass pass_dominator;
extern struct tree_opt_pass pass_dce;
extern struct tree_opt_pass pass_cd_dce;
extern struct tree_opt_pass pass_may_alias;
extern struct tree_opt_pass pass_split_crit_edges;
extern struct tree_opt_pass pass_pre;
extern struct tree_opt_pass pass_profile;
extern struct tree_opt_pass pass_lower_complex;
extern struct tree_opt_pass pass_fold_builtins;
extern struct tree_opt_pass pass_early_warn_uninitialized;
extern struct tree_opt_pass pass_late_warn_uninitialized;
extern struct tree_opt_pass pass_warn_function_return;
extern struct tree_opt_pass pass_phiopt;
extern struct tree_opt_pass pass_forwprop;
extern struct tree_opt_pass pass_redundant_phi;
extern struct tree_opt_pass pass_dse;
extern struct tree_opt_pass pass_nrv;
extern struct tree_opt_pass pass_remove_useless_vars;
extern struct tree_opt_pass pass_rename_ssa_copies;
extern struct tree_opt_pass pass_expand;
extern struct tree_opt_pass pass_rest_of_compilation;
extern struct tree_opt_pass pass_fre;
typedef struct
{
  const char *format_spec;
  va_list *args_ptr;
  int err_no;
} text_info;
typedef enum
{
  DIAGNOSTICS_SHOW_PREFIX_ONCE = 0x0,
  DIAGNOSTICS_SHOW_PREFIX_NEVER = 0x1,
  DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE = 0x2
} diagnostic_prefixing_rule_t;
typedef struct
{
  struct obstack obstack;
  FILE *stream;
  int line_length;
  char digit_buffer[128];
} output_buffer;
typedef unsigned int pp_flags;
typedef enum
{
  pp_none, pp_before, pp_after
} pp_padding;
typedef struct pretty_print_info pretty_printer;
typedef unsigned char (*printer_fn) (pretty_printer *, text_info *);
struct pretty_print_info
{
  output_buffer *buffer;
  const char *prefix;
  pp_padding padding;
  int maximum_length;
  int ideal_maximum_length;
  int indent_skip;
  diagnostic_prefixing_rule_t prefixing_rule;
  printer_fn format_decoder;
  unsigned char emitted_prefix;
  unsigned char need_newline;
};
extern void pp_construct (pretty_printer *, const char *, int);
extern void pp_base_set_line_maximum_length (pretty_printer *, int);
extern void pp_base_set_prefix (pretty_printer *, const char *);
extern void pp_base_destroy_prefix (pretty_printer *);
extern int pp_base_remaining_character_count_for_line (pretty_printer *);
extern void pp_base_clear_output_area (pretty_printer *);
extern const char *pp_base_formatted_text (pretty_printer *);
extern const char *pp_base_last_position_in_text (const pretty_printer *);
extern void pp_base_emit_prefix (pretty_printer *);
extern void pp_base_append_text (pretty_printer *, const char *, const char *);
extern void pp_printf (pretty_printer *, const char *, ...) ;
extern void pp_verbatim (pretty_printer *, const char *, ...);
extern void pp_base_flush (pretty_printer *);
extern void pp_base_format_text (pretty_printer *, text_info *);
extern void pp_base_format_verbatim (pretty_printer *, text_info *);
extern void pp_base_indent (pretty_printer *);
extern void pp_base_newline (pretty_printer *);
extern void pp_base_character (pretty_printer *, int);
extern void pp_base_string (pretty_printer *, const char *);
extern void pp_write_text_to_stream (pretty_printer *pp);
extern void pp_base_maybe_space (pretty_printer *);
typedef enum
{
DK_FATAL,
DK_ICE,
DK_ERROR,
DK_SORRY,
DK_WARNING,
DK_ANACHRONISM,
DK_NOTE,
DK_DEBUG,
  DK_LAST_DIAGNOSTIC_KIND
} diagnostic_t;
typedef struct
{
  text_info message;
  location_t location;
  diagnostic_t kind;
} diagnostic_info;
typedef struct diagnostic_context diagnostic_context;
typedef void (*diagnostic_starter_fn) (diagnostic_context *,
           diagnostic_info *);
typedef diagnostic_starter_fn diagnostic_finalizer_fn;
struct diagnostic_context
{
  pretty_printer *printer;
  int diagnostic_count[DK_LAST_DIAGNOSTIC_KIND];
  unsigned char warnings_are_errors_message;
  unsigned char abort_on_error;
  diagnostic_starter_fn begin_diagnostic;
  diagnostic_finalizer_fn end_diagnostic;
  void (*internal_error) (const char *, va_list *);
  tree last_function;
  int last_module;
  int lock;
  void *x_data;
};
extern diagnostic_context *global_dc;
extern void diagnostic_initialize (diagnostic_context *);
extern void diagnostic_report_current_module (diagnostic_context *);
extern void diagnostic_report_current_function (diagnostic_context *);
extern void diagnostic_report_diagnostic (diagnostic_context *,
       diagnostic_info *);
extern void diagnostic_set_info (diagnostic_info *, const char *, va_list *,
     location_t, diagnostic_t);
extern char *diagnostic_build_prefix (diagnostic_info *);
extern void verbatim (const char *, ...);
extern char *file_name_as_prefix (const char *);
extern void debug_output_buffer (pretty_printer *);
extern int dump_generic_node (pretty_printer *, tree, int, int, unsigned char);
extern void print_generic_stmt (FILE *, tree, int);
extern void print_generic_stmt_indented (FILE *, tree, int, int);
extern void print_generic_expr (FILE *, tree, int);
extern void print_generic_decl (FILE *, tree, int);
extern void debug_generic_expr (tree);
extern void debug_generic_stmt (tree);
extern void debug_c_tree (tree);
struct diagnostic_context;
typedef void (*lang_print_tree_hook) (FILE *, tree, int indent);
struct lang_hooks_for_tree_inlining
{
  tree (*walk_subtrees) (tree *, int *,
    tree (*) (tree *, int *, void *),
    void *, void *);
  int (*cannot_inline_tree_fn) (tree *);
  int (*disregard_inline_limits) (tree);
  tree (*add_pending_fn_decls) (void *, tree);
  int (*auto_var_in_fn_p) (tree, tree);
  tree (*copy_res_decl_for_inlining) (tree, tree, tree,
          void *, int *, tree);
  int (*anon_aggr_type_p) (tree);
  unsigned char (*var_mod_type_p) (tree, tree);
  int (*start_inlining) (tree);
  void (*end_inlining) (tree);
  tree (*convert_parm_for_inlining) (tree, tree, tree, int);
  int (*estimate_num_insns) (tree);
};
struct lang_hooks_for_callgraph
{
  tree (*analyze_expr) (tree *, int *, tree);
  void (*expand_function) (tree);
};
struct lang_hooks_for_functions
{
  void (*init) (struct function *);
  void (*final) (struct function *);
  void (*enter_nested) (struct function *);
  void (*leave_nested) (struct function *);
  unsigned char (*missing_noreturn_ok_p) (tree);
};
struct lang_hooks_for_tree_dump
{
  unsigned char (*dump_tree) (void *, tree);
  int (*type_quals) (tree);
};
struct lang_hooks_for_types
{
  tree (*make_type) (enum tree_code);
  tree (*type_for_mode) (enum machine_mode, int);
  tree (*type_for_size) (unsigned, int);
  tree (*unsigned_type) (tree);
  tree (*signed_type) (tree);
  tree (*signed_or_unsigned_type) (int, tree);
  tree (*type_promotes_to) (tree);
  void (*register_builtin_type) (tree, const char *);
  void (*incomplete_type_error) (tree value1, tree type);
  tree (*max_size) (tree);
  unsigned char hash_types;
};
struct lang_hooks_for_decls
{
  void (*pushlevel) (int);
  tree (*poplevel) (int, int, int);
  int (*global_bindings_p) (void);
  void (*insert_block) (tree);
  void (*set_block) (tree);
  tree (*pushdecl) (tree);
  tree (*getdecls) (void);
  unsigned char (*warn_unused_global) (tree);
  void (*final_write_globals) (void);
  void (*prepare_assemble_variable) (tree);
  unsigned char (*ok_for_sibcall) (tree);
};
struct lang_hooks
{
  const char *name;
  size_t identifier_size;
  size_t (*tree_size) (enum tree_code);
  unsigned int (*init_options) (unsigned int argc, const char **argv);
  void (*initialize_diagnostics) (struct diagnostic_context *);
  int (*handle_option) (size_t code, const char *arg, int value1);
  unsigned char (*missing_argument) (const char *opt, size_t code);
  unsigned char (*post_options) (const char **);
  unsigned char (*init) (void);
  void (*finish) (void);
  void (*parse_file) (int);
  void (*clear_binding_stack) (void);
  long (*get_alias_set) (tree);
  tree (*expand_constant) (tree);
  rtx (*expand_expr) (tree, rtx, enum machine_mode, int, rtx *);
  int (*expand_decl) (tree);
  tree (*truthvalue_conversion) (tree);
  int (*safe_from_p) (rtx, tree);
  void (*finish_incomplete_decl) (tree);
  int (*unsafe_for_reeval) (tree);
  unsigned char (*mark_addressable) (tree);
  int (*staticp) (tree);
  void (*dup_lang_specific_decl) (tree);
  tree (*unsave_expr_now) (tree);
  tree (*maybe_build_cleanup) (tree);
  void (*set_decl_assembler_name) (tree);
  unsigned char (*can_use_bit_fields_p) (void);
  unsigned char honor_readonly;
  unsigned char no_body_blocks;
  void (*print_statistics) (void);
  lang_print_tree_hook print_xnode;
  lang_print_tree_hook print_decl;
  lang_print_tree_hook print_type;
  lang_print_tree_hook print_identifier;
  const char *(*decl_printable_name) (tree decl, int verbosity);
  int (*types_compatible_p) (tree x, tree y);
  tree (*lang_get_callee_fndecl) (tree);
  void (*print_error_function) (struct diagnostic_context *, const char *);
  tree (*expr_size) (tree);
  void (*update_decl_after_saving) (tree, void *);
  const struct attribute_spec *attribute_table;
  const struct attribute_spec *common_attribute_table;
  const struct attribute_spec *format_attribute_table;
  struct lang_hooks_for_functions function;
  struct lang_hooks_for_tree_inlining tree_inlining;
  struct lang_hooks_for_callgraph callgraph;
  struct lang_hooks_for_tree_dump tree_dump;
  struct lang_hooks_for_decls decls;
  struct lang_hooks_for_types types;
  int (*gimplify_expr) (tree *, tree *, tree *);
  tree (*fold_obj_type_ref) (tree, tree);
  unsigned char gimple_before_inlining;
};
extern const struct lang_hooks lang_hooks;
extern const char empty_string[];
extern const char digit_vector[];
typedef void (*gt_pointer_operator) (void *, void *);
enum gt_types_enum {
 gt_ggc_e_11align_stack,
 gt_ggc_e_7c_scope,
 gt_ggc_e_9c_binding,
 gt_ggc_e_12aterm_list_a,
 gt_ggc_e_6aterm_,
 gt_ggc_e_15throw_stmt_node,
 gt_ggc_e_15edge_prediction,
 gt_ggc_e_19v_must_def_optype_d,
 gt_ggc_e_13vuse_optype_d,
 gt_ggc_e_18v_may_def_optype_d,
 gt_ggc_e_12use_optype_d,
 gt_ggc_e_12def_optype_d,
 gt_ggc_e_10dataflow_d,
 gt_ggc_e_23constant_descriptor_rtx,
 gt_ggc_e_24constant_descriptor_tree,
 gt_ggc_e_14in_named_entry,
 gt_ggc_e_17rtx_constant_pool,
 gt_ggc_e_9type_hash,
 gt_ggc_e_16string_pool_data,
 gt_ggc_e_10goto_fixup,
 gt_ggc_e_11label_chain,
 gt_ggc_e_7nesting,
 gt_ggc_e_9case_node,
 gt_ggc_e_9eh_region,
 gt_ggc_e_13ehl_map_entry,
 gt_ggc_e_16var_loc_list_def,
 gt_ggc_e_12var_loc_node,
 gt_ggc_e_16limbo_die_struct,
 gt_ggc_e_16dw_ranges_struct,
 gt_ggc_e_14pubname_struct,
 gt_ggc_e_28dw_separate_line_info_struct,
 gt_ggc_e_19dw_line_info_struct,
 gt_ggc_e_14dw_attr_struct,
 gt_ggc_e_18dw_loc_list_struct,
 gt_ggc_e_15queued_reg_save,
 gt_ggc_e_20indirect_string_node,
 gt_ggc_e_19dw_loc_descr_struct,
 gt_ggc_e_13dw_fde_struct,
 gt_ggc_e_13dw_cfi_struct,
 gt_ggc_e_8typeinfo,
 gt_ggc_e_15alias_set_entry,
 gt_ggc_e_8c_switch,
 gt_ggc_e_18sorted_fields_type,
 gt_ggc_e_19cgraph_varpool_node,
 gt_ggc_e_11cgraph_edge,
 gt_ggc_e_11cgraph_node,
 gt_ggc_e_8bb_ann_d,
 gt_ggc_e_17reorder_block_def,
 gt_ggc_e_7et_node,
 gt_ggc_e_4loop,
 gt_ggc_e_12elt_loc_list,
 gt_ggc_e_17cselib_val_struct,
 gt_ggc_e_8elt_list,
 gt_ggc_e_12reg_info_def,
 gt_ggc_e_14lang_tree_node,
 gt_ggc_e_9value_set,
 gt_ggc_e_24tree_statement_list_node,
 gt_ggc_e_9lang_decl,
 gt_ggc_e_13alias_var_def,
 gt_ggc_e_9lang_type,
 gt_ggc_e_10die_struct,
 gt_ggc_e_8edge_def,
 gt_ggc_e_12ptr_info_def,
 gt_ggc_e_10real_value,
 gt_ggc_e_10tree_ann_d,
 gt_ggc_e_13convert_optab,
 gt_ggc_e_5optab,
 gt_ggc_e_15basic_block_def,
 gt_ggc_e_9reg_attrs,
 gt_ggc_e_9mem_attrs,
 gt_ggc_e_17language_function,
 gt_ggc_e_9temp_slot,
 gt_ggc_e_15varray_head_tag,
 gt_ggc_e_20initial_value_struct,
 gt_ggc_e_13varasm_status,
 gt_ggc_e_11stmt_status,
 gt_ggc_e_9eh_status,
 gt_ggc_e_8function,
 gt_ggc_e_11expr_status,
 gt_ggc_e_11emit_status,
 gt_ggc_e_14sequence_stack,
 gt_ggc_e_14var_refs_queue,
 gt_ggc_e_15bitmap_head_def,
 gt_ggc_e_18bitmap_element_def,
 gt_ggc_e_17stack_local_entry,
 gt_ggc_e_16machine_function,
 gt_ggc_e_6answer,
 gt_ggc_e_9cpp_macro,
 gt_ggc_e_9cpp_token,
 gt_ggc_e_9tree_node,
 gt_ggc_e_9rtvec_def,
 gt_ggc_e_7rtx_def,
 gt_ggc_e_10location_s,
 gt_e_II17splay_tree_node_s,
 gt_e_SP9tree_node17splay_tree_node_s,
 gt_e_P13alias_var_def15varray_head_tag,
 gt_e_P15throw_stmt_node4htab,
 gt_e_P23constant_descriptor_rtx4htab,
 gt_e_P24constant_descriptor_tree4htab,
 gt_e_P14in_named_entry4htab,
 gt_e_P9type_hash4htab,
 gt_e_P13ehl_map_entry4htab,
 gt_e_P9tree_node4htab,
 gt_e_P9reg_attrs4htab,
 gt_e_P9mem_attrs4htab,
 gt_e_P7rtx_def4htab,
 gt_e_SP9tree_node12splay_tree_s,
 gt_e_P16var_loc_list_def4htab,
 gt_e_P10die_struct4htab,
 gt_e_P20indirect_string_node4htab,
 gt_e_P19cgraph_varpool_node4htab,
 gt_e_P11cgraph_node4htab,
 gt_e_P15alias_set_entry15varray_head_tag,
 gt_e_II12splay_tree_s,
 gt_e_P9temp_slot15varray_head_tag,
 gt_types_enum_last
};
extern void gt_ggc_mx_align_stack (void *);
extern void gt_ggc_mx_c_scope (void *);
extern void gt_ggc_mx_c_binding (void *);
extern void gt_ggc_mx_aterm_list_a (void *);
extern void gt_ggc_mx_aterm_ (void *);
extern void gt_ggc_mx_throw_stmt_node (void *);
extern void gt_ggc_mx_edge_prediction (void *);
extern void gt_ggc_mx_v_must_def_optype_d (void *);
extern void gt_ggc_mx_vuse_optype_d (void *);
extern void gt_ggc_mx_v_may_def_optype_d (void *);
extern void gt_ggc_mx_use_optype_d (void *);
extern void gt_ggc_mx_def_optype_d (void *);
extern void gt_ggc_mx_dataflow_d (void *);
extern void gt_ggc_mx_constant_descriptor_rtx (void *);
extern void gt_ggc_mx_constant_descriptor_tree (void *);
extern void gt_ggc_mx_in_named_entry (void *);
extern void gt_ggc_mx_rtx_constant_pool (void *);
extern void gt_ggc_mx_type_hash (void *);
extern void gt_ggc_mx_string_pool_data (void *);
extern void gt_ggc_mx_goto_fixup (void *);
extern void gt_ggc_mx_label_chain (void *);
extern void gt_ggc_mx_nesting (void *);
extern void gt_ggc_mx_case_node (void *);
extern void gt_ggc_mx_eh_region (void *);
extern void gt_ggc_mx_ehl_map_entry (void *);
extern void gt_ggc_mx_var_loc_list_def (void *);
extern void gt_ggc_mx_var_loc_node (void *);
extern void gt_ggc_mx_limbo_die_struct (void *);
extern void gt_ggc_mx_dw_ranges_struct (void *);
extern void gt_ggc_mx_pubname_struct (void *);
extern void gt_ggc_mx_dw_separate_line_info_struct (void *);
extern void gt_ggc_mx_dw_line_info_struct (void *);
extern void gt_ggc_mx_dw_attr_struct (void *);
extern void gt_ggc_mx_dw_loc_list_struct (void *);
extern void gt_ggc_mx_queued_reg_save (void *);
extern void gt_ggc_mx_indirect_string_node (void *);
extern void gt_ggc_mx_dw_loc_descr_struct (void *);
extern void gt_ggc_mx_dw_fde_struct (void *);
extern void gt_ggc_mx_dw_cfi_struct (void *);
extern void gt_ggc_mx_typeinfo (void *);
extern void gt_ggc_mx_alias_set_entry (void *);
extern void gt_ggc_mx_c_switch (void *);
extern void gt_ggc_mx_sorted_fields_type (void *);
extern void gt_ggc_mx_cgraph_varpool_node (void *);
extern void gt_ggc_mx_cgraph_edge (void *);
extern void gt_ggc_mx_cgraph_node (void *);
extern void gt_ggc_mx_bb_ann_d (void *);
extern void gt_ggc_mx_reorder_block_def (void *);
extern void gt_ggc_mx_et_node (void *);
extern void gt_ggc_mx_loop (void *);
extern void gt_ggc_mx_elt_loc_list (void *);
extern void gt_ggc_mx_cselib_val_struct (void *);
extern void gt_ggc_mx_elt_list (void *);
extern void gt_ggc_mx_reg_info_def (void *);
extern void gt_ggc_mx_lang_tree_node (void *);
extern void gt_ggc_mx_value_set (void *);
extern void gt_ggc_mx_tree_statement_list_node (void *);
extern void gt_ggc_mx_lang_decl (void *);
extern void gt_ggc_mx_alias_var_def (void *);
extern void gt_ggc_mx_lang_type (void *);
extern void gt_ggc_mx_die_struct (void *);
extern void gt_ggc_mx_edge_def (void *);
extern void gt_ggc_mx_ptr_info_def (void *);
extern void gt_ggc_mx_real_value (void *);
extern void gt_ggc_mx_tree_ann_d (void *);
extern void gt_ggc_mx_convert_optab (void *);
extern void gt_ggc_mx_optab (void *);
extern void gt_ggc_mx_basic_block_def (void *);
extern void gt_ggc_mx_reg_attrs (void *);
extern void gt_ggc_mx_mem_attrs (void *);
extern void gt_ggc_mx_language_function (void *);
extern void gt_ggc_mx_temp_slot (void *);
extern void gt_ggc_mx_varray_head_tag (void *);
extern void gt_ggc_mx_initial_value_struct (void *);
extern void gt_ggc_mx_varasm_status (void *);
extern void gt_ggc_mx_stmt_status (void *);
extern void gt_ggc_mx_eh_status (void *);
extern void gt_ggc_mx_function (void *);
extern void gt_ggc_mx_expr_status (void *);
extern void gt_ggc_mx_emit_status (void *);
extern void gt_ggc_mx_sequence_stack (void *);
extern void gt_ggc_mx_var_refs_queue (void *);
extern void gt_ggc_mx_bitmap_head_def (void *);
extern void gt_ggc_mx_bitmap_element_def (void *);
extern void gt_ggc_mx_stack_local_entry (void *);
extern void gt_ggc_mx_machine_function (void *);
extern void gt_ggc_mx_answer (void *);
extern void gt_ggc_mx_cpp_macro (void *);
extern void gt_ggc_mx_cpp_token (void *);
extern void gt_ggc_mx_rtvec_def (void *);
extern void gt_ggc_mx_rtx_def (void *);
extern void gt_ggc_mx_location_s (void *);
extern void gt_ggc_m_II17splay_tree_node_s (void *);
extern void gt_ggc_m_SP9tree_node17splay_tree_node_s (void *);
extern void gt_ggc_m_P13alias_var_def15varray_head_tag (void *);
extern void gt_ggc_m_P15throw_stmt_node4htab (void *);
extern void gt_ggc_m_P23constant_descriptor_rtx4htab (void *);
extern void gt_ggc_m_P24constant_descriptor_tree4htab (void *);
extern void gt_ggc_m_P14in_named_entry4htab (void *);
extern void gt_ggc_m_P9type_hash4htab (void *);
extern void gt_ggc_m_P13ehl_map_entry4htab (void *);
extern void gt_ggc_m_P9tree_node4htab (void *);
extern void gt_ggc_m_P9reg_attrs4htab (void *);
extern void gt_ggc_m_P9mem_attrs4htab (void *);
extern void gt_ggc_m_P7rtx_def4htab (void *);
extern void gt_ggc_m_SP9tree_node12splay_tree_s (void *);
extern void gt_ggc_m_P16var_loc_list_def4htab (void *);
extern void gt_ggc_m_P10die_struct4htab (void *);
extern void gt_ggc_m_P20indirect_string_node4htab (void *);
extern void gt_ggc_m_P19cgraph_varpool_node4htab (void *);
extern void gt_ggc_m_P11cgraph_node4htab (void *);
extern void gt_ggc_m_P15alias_set_entry15varray_head_tag (void *);
extern void gt_ggc_m_II12splay_tree_s (void *);
extern void gt_ggc_m_P9temp_slot15varray_head_tag (void *);
extern void gt_pch_nx_align_stack (void *);
extern void gt_pch_nx_c_scope (void *);
extern void gt_pch_nx_c_binding (void *);
extern void gt_pch_nx_aterm_list_a (void *);
extern void gt_pch_nx_aterm_ (void *);
extern void gt_pch_nx_throw_stmt_node (void *);
extern void gt_pch_nx_edge_prediction (void *);
extern void gt_pch_nx_v_must_def_optype_d (void *);
extern void gt_pch_nx_vuse_optype_d (void *);
extern void gt_pch_nx_v_may_def_optype_d (void *);
extern void gt_pch_nx_use_optype_d (void *);
extern void gt_pch_nx_def_optype_d (void *);
extern void gt_pch_nx_dataflow_d (void *);
extern void gt_pch_nx_constant_descriptor_rtx (void *);
extern void gt_pch_nx_constant_descriptor_tree (void *);
extern void gt_pch_nx_in_named_entry (void *);
extern void gt_pch_nx_rtx_constant_pool (void *);
extern void gt_pch_nx_type_hash (void *);
extern void gt_pch_nx_string_pool_data (void *);
extern void gt_pch_nx_goto_fixup (void *);
extern void gt_pch_nx_label_chain (void *);
extern void gt_pch_nx_nesting (void *);
extern void gt_pch_nx_case_node (void *);
extern void gt_pch_nx_eh_region (void *);
extern void gt_pch_nx_ehl_map_entry (void *);
extern void gt_pch_nx_var_loc_list_def (void *);
extern void gt_pch_nx_var_loc_node (void *);
extern void gt_pch_nx_limbo_die_struct (void *);
extern void gt_pch_nx_dw_ranges_struct (void *);
extern void gt_pch_nx_pubname_struct (void *);
extern void gt_pch_nx_dw_separate_line_info_struct (void *);
extern void gt_pch_nx_dw_line_info_struct (void *);
extern void gt_pch_nx_dw_attr_struct (void *);
extern void gt_pch_nx_dw_loc_list_struct (void *);
extern void gt_pch_nx_queued_reg_save (void *);
extern void gt_pch_nx_indirect_string_node (void *);
extern void gt_pch_nx_dw_loc_descr_struct (void *);
extern void gt_pch_nx_dw_fde_struct (void *);
extern void gt_pch_nx_dw_cfi_struct (void *);
extern void gt_pch_nx_typeinfo (void *);
extern void gt_pch_nx_alias_set_entry (void *);
extern void gt_pch_nx_c_switch (void *);
extern void gt_pch_nx_sorted_fields_type (void *);
extern void gt_pch_nx_cgraph_varpool_node (void *);
extern void gt_pch_nx_cgraph_edge (void *);
extern void gt_pch_nx_cgraph_node (void *);
extern void gt_pch_nx_bb_ann_d (void *);
extern void gt_pch_nx_reorder_block_def (void *);
extern void gt_pch_nx_et_node (void *);
extern void gt_pch_nx_loop (void *);
extern void gt_pch_nx_elt_loc_list (void *);
extern void gt_pch_nx_cselib_val_struct (void *);
extern void gt_pch_nx_elt_list (void *);
extern void gt_pch_nx_reg_info_def (void *);
extern void gt_pch_nx_lang_tree_node (void *);
extern void gt_pch_nx_value_set (void *);
extern void gt_pch_nx_tree_statement_list_node (void *);
extern void gt_pch_nx_lang_decl (void *);
extern void gt_pch_nx_alias_var_def (void *);
extern void gt_pch_nx_lang_type (void *);
extern void gt_pch_nx_die_struct (void *);
extern void gt_pch_nx_edge_def (void *);
extern void gt_pch_nx_ptr_info_def (void *);
extern void gt_pch_nx_real_value (void *);
extern void gt_pch_nx_tree_ann_d (void *);
extern void gt_pch_nx_convert_optab (void *);
extern void gt_pch_nx_optab (void *);
extern void gt_pch_nx_basic_block_def (void *);
extern void gt_pch_nx_reg_attrs (void *);
extern void gt_pch_nx_mem_attrs (void *);
extern void gt_pch_nx_language_function (void *);
extern void gt_pch_nx_temp_slot (void *);
extern void gt_pch_nx_varray_head_tag (void *);
extern void gt_pch_nx_initial_value_struct (void *);
extern void gt_pch_nx_varasm_status (void *);
extern void gt_pch_nx_stmt_status (void *);
extern void gt_pch_nx_eh_status (void *);
extern void gt_pch_nx_function (void *);
extern void gt_pch_nx_expr_status (void *);
extern void gt_pch_nx_emit_status (void *);
extern void gt_pch_nx_sequence_stack (void *);
extern void gt_pch_nx_var_refs_queue (void *);
extern void gt_pch_nx_bitmap_head_def (void *);
extern void gt_pch_nx_bitmap_element_def (void *);
extern void gt_pch_nx_stack_local_entry (void *);
extern void gt_pch_nx_machine_function (void *);
extern void gt_pch_nx_answer (void *);
extern void gt_pch_nx_cpp_macro (void *);
extern void gt_pch_nx_cpp_token (void *);
extern void gt_pch_nx_rtvec_def (void *);
extern void gt_pch_nx_rtx_def (void *);
extern void gt_pch_nx_location_s (void *);
extern void gt_pch_n_II17splay_tree_node_s (void *);
extern void gt_pch_n_SP9tree_node17splay_tree_node_s (void *);
extern void gt_pch_n_P13alias_var_def15varray_head_tag (void *);
extern void gt_pch_n_P15throw_stmt_node4htab (void *);
extern void gt_pch_n_P23constant_descriptor_rtx4htab (void *);
extern void gt_pch_n_P24constant_descriptor_tree4htab (void *);
extern void gt_pch_n_P14in_named_entry4htab (void *);
extern void gt_pch_n_P9type_hash4htab (void *);
extern void gt_pch_n_P13ehl_map_entry4htab (void *);
extern void gt_pch_n_P9tree_node4htab (void *);
extern void gt_pch_n_P9reg_attrs4htab (void *);
extern void gt_pch_n_P9mem_attrs4htab (void *);
extern void gt_pch_n_P7rtx_def4htab (void *);
extern void gt_pch_n_SP9tree_node12splay_tree_s (void *);
extern void gt_pch_n_P16var_loc_list_def4htab (void *);
extern void gt_pch_n_P10die_struct4htab (void *);
extern void gt_pch_n_P20indirect_string_node4htab (void *);
extern void gt_pch_n_P19cgraph_varpool_node4htab (void *);
extern void gt_pch_n_P11cgraph_node4htab (void *);
extern void gt_pch_n_P15alias_set_entry15varray_head_tag (void *);
extern void gt_pch_n_II12splay_tree_s (void *);
extern void gt_pch_n_P9temp_slot15varray_head_tag (void *);
extern void gt_pch_p_11align_stack
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7c_scope
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9c_binding
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15throw_stmt_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15edge_prediction
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19v_must_def_optype_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13vuse_optype_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18v_may_def_optype_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12use_optype_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12def_optype_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10dataflow_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23constant_descriptor_rtx
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24constant_descriptor_tree
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14in_named_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17rtx_constant_pool
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9type_hash
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16string_pool_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10goto_fixup
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11label_chain
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7nesting
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9case_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9eh_region
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13ehl_map_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16var_loc_list_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12var_loc_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16limbo_die_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16dw_ranges_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14pubname_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28dw_separate_line_info_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19dw_line_info_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14dw_attr_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18dw_loc_list_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15queued_reg_save
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20indirect_string_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19dw_loc_descr_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13dw_fde_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13dw_cfi_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8typeinfo
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15alias_set_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18sorted_fields_type
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19cgraph_varpool_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11cgraph_edge
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11cgraph_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8bb_ann_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12elt_loc_list
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17cselib_val_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8elt_list
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14lang_tree_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24tree_statement_list_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9lang_decl
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13alias_var_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9lang_type
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10die_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8edge_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12ptr_info_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10real_value
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10tree_ann_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13convert_optab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_5optab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15basic_block_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9reg_attrs
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9mem_attrs
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17language_function
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9temp_slot
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15varray_head_tag
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20initial_value_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13varasm_status
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11stmt_status
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9eh_status
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8function
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11expr_status
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11emit_status
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14sequence_stack
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14var_refs_queue
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15bitmap_head_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18bitmap_element_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17stack_local_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16machine_function
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6answer
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9cpp_macro
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9cpp_token
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9rtvec_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10location_s
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_II17splay_tree_node_s
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_SP9tree_node17splay_tree_node_s
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P13alias_var_def15varray_head_tag
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P15throw_stmt_node4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P23constant_descriptor_rtx4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P24constant_descriptor_tree4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P14in_named_entry4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P9type_hash4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P13ehl_map_entry4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P9tree_node4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P9reg_attrs4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P9mem_attrs4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P7rtx_def4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_SP9tree_node12splay_tree_s
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P16var_loc_list_def4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P10die_struct4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P20indirect_string_node4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P19cgraph_varpool_node4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P11cgraph_node4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P15alias_set_entry15varray_head_tag
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_II12splay_tree_s
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P9temp_slot15varray_head_tag
    (void *, void *, gt_pointer_operator, void *);
typedef void (*gt_note_pointers) (void *, void *, gt_pointer_operator,
      void *);
typedef void (*gt_handle_reorder) (void *, void *, gt_pointer_operator,
       void *);
extern int gt_pch_note_object (void *, void *, gt_note_pointers);
extern void gt_pch_note_reorder (void *, void *, gt_handle_reorder);
typedef void (*gt_pointer_walker) (void *);
struct ggc_root_tab {
  void *base;
  size_t nelt;
  size_t stride;
  gt_pointer_walker cb;
  gt_pointer_walker pchw;
};
extern const struct ggc_root_tab * const gt_ggc_rtab[];
extern const struct ggc_root_tab * const gt_ggc_deletable_rtab[];
extern const struct ggc_root_tab * const gt_pch_cache_rtab[];
extern const struct ggc_root_tab * const gt_pch_scalar_rtab[];
struct htab;
struct ggc_cache_tab {
  struct htab * *base;
  size_t nelt;
  size_t stride;
  gt_pointer_walker cb;
  gt_pointer_walker pchw;
  int (*marked_p) (const void *);
};
extern const struct ggc_cache_tab * const gt_ggc_cache_rtab[];
extern int ggc_set_mark (const void *);
extern int ggc_marked_p (const void *);
extern void ggc_mark_stringpool (void);
extern void ggc_mark_roots (void);
extern void gt_pch_save_stringpool (void);
extern void gt_pch_fixup_stringpool (void);
extern void gt_pch_restore_stringpool (void);
extern void gt_pch_p_S (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_n_S (const void *);
extern void gt_ggc_m_S (void *);
extern void init_stringpool (void);
struct alloc_zone;
extern void init_ggc (void);
extern struct alloc_zone *new_ggc_zone (const char *);
extern void destroy_ggc_zone (struct alloc_zone *);
extern void ggc_push_context (void);
extern void ggc_pop_context (void);
struct ggc_pch_data;
extern struct ggc_pch_data *init_ggc_pch (void);
extern void ggc_pch_count_object (struct ggc_pch_data *, void *, size_t, unsigned char);
extern size_t ggc_pch_total_size (struct ggc_pch_data *);
extern void ggc_pch_this_base (struct ggc_pch_data *, void *);
extern char *ggc_pch_alloc_object (struct ggc_pch_data *, void *, size_t, unsigned char);
extern void ggc_pch_prepare_write (struct ggc_pch_data *, FILE *);
extern void ggc_pch_write_object (struct ggc_pch_data *, FILE *, void *,
      void *, size_t, unsigned char);
extern void ggc_pch_finish (struct ggc_pch_data *, FILE *);
extern void ggc_pch_read (FILE *, void *);
extern struct alloc_zone *garbage_zone;
extern struct alloc_zone *rtl_zone;
extern struct alloc_zone *tree_zone;
extern void *ggc_alloc_stat (size_t );
extern void *ggc_alloc_zone_stat (size_t, struct alloc_zone * );
extern void *ggc_alloc_typed_stat (enum gt_types_enum, size_t );
extern void *ggc_alloc_cleared_stat (size_t );
extern void *ggc_alloc_cleared_zone (size_t, struct alloc_zone * );
extern void *ggc_realloc_stat (void *, size_t );
extern void *ggc_calloc (size_t, size_t);
extern void ggc_free (void *);
extern void ggc_record_overhead (size_t, size_t );
extern void dump_ggc_loc_statistics (void);
extern void *ggc_splay_alloc (int, void *);
extern void ggc_splay_dont_free (void *, void *);
extern const char *ggc_alloc_string (const char *contents, int length);
extern void ggc_collect (void);
extern size_t ggc_get_size (const void *);
extern void gt_pch_save (FILE *f);
extern void gt_pch_restore (FILE *f);
typedef struct ggc_statistics
{
  int unused;
} ggc_statistics;
extern void ggc_print_common_statistics (FILE *, ggc_statistics *);
extern void ggc_print_statistics (void);
extern void stringpool_statistics (void);
extern int ggc_min_expand_heuristic (void);
extern int ggc_min_heapsize_heuristic (void);
extern void init_ggc_heuristics (void);
struct cgraph_local_info
{
  int self_insns;
  unsigned char local;
  unsigned char finalized;
  unsigned char inlinable;
  unsigned char disregard_inline_limits;
  unsigned char redefined_extern_inline;
};
struct cgraph_global_info
{
  struct cgraph_node *inlined_to;
  int insns;
  unsigned char inlined;
};
struct cgraph_rtl_info
{
   int preferred_incoming_stack_boundary;
   unsigned char const_function;
   unsigned char pure_function;
};
struct cgraph_node
{
  tree decl;
  struct cgraph_edge *callees;
  struct cgraph_edge *callers;
  struct cgraph_node *next;
  struct cgraph_node *previous;
  struct cgraph_node *origin;
  struct cgraph_node *nested;
  struct cgraph_node *next_nested;
  struct cgraph_node *next_needed;
  struct cgraph_node *next_clone;
  void * aux;
  struct cgraph_local_info local;
  struct cgraph_global_info global;
  struct cgraph_rtl_info rtl;
  int uid;
  unsigned char needed;
  unsigned char reachable;
  unsigned char analyzed;
  unsigned char output;
};
struct cgraph_edge
{
  struct cgraph_node *caller;
  struct cgraph_node *callee;
  struct cgraph_edge *next_caller;
  struct cgraph_edge *next_callee;
  tree call_expr;
  void * aux;
  const char *inline_failed;
};
struct cgraph_varpool_node
{
  tree decl;
  struct cgraph_varpool_node *next_needed;
  unsigned char needed;
  unsigned char finalized;
  unsigned char output;
};
extern struct cgraph_node *cgraph_nodes;
extern int cgraph_n_nodes;
extern int cgraph_max_uid;
extern unsigned char cgraph_global_info_ready;
extern struct cgraph_node *cgraph_nodes_queue;
extern FILE *cgraph_dump_file;
extern int cgraph_varpool_n_nodes;
extern struct cgraph_varpool_node *cgraph_varpool_nodes_queue;
void dump_cgraph (FILE *);
void dump_cgraph_node (FILE *, struct cgraph_node *);
void cgraph_remove_edge (struct cgraph_edge *);
void cgraph_remove_node (struct cgraph_node *);
struct cgraph_edge *cgraph_create_edge (struct cgraph_node *,
     struct cgraph_node *,
            tree);
struct cgraph_node *cgraph_node (tree decl);
struct cgraph_edge *cgraph_edge (struct cgraph_node *, tree call_expr);
unsigned char cgraph_calls_p (tree, tree);
struct cgraph_local_info *cgraph_local_info (tree);
struct cgraph_global_info *cgraph_global_info (tree);
struct cgraph_rtl_info *cgraph_rtl_info (tree);
const char * cgraph_node_name (struct cgraph_node *);
struct cgraph_edge * cgraph_clone_edge (struct cgraph_edge *, struct cgraph_node *, tree);
struct cgraph_node * cgraph_clone_node (struct cgraph_node *);
struct cgraph_varpool_node *cgraph_varpool_node (tree decl);
void cgraph_varpool_mark_needed_node (struct cgraph_varpool_node *);
void cgraph_varpool_finalize_decl (tree);
unsigned char cgraph_varpool_assemble_pending_decls (void);
void cgraph_redirect_edge_callee (struct cgraph_edge *, struct cgraph_node *);
unsigned char cgraph_function_possibly_inlined_p (tree);
unsigned char cgraph_assemble_pending_functions (void);
void cgraph_finalize_function (tree, unsigned char);
void cgraph_finalize_compilation_unit (void);
void cgraph_create_edges (struct cgraph_node *, tree);
void cgraph_optimize (void);
void cgraph_mark_needed_node (struct cgraph_node *);
void cgraph_mark_reachable_node (struct cgraph_node *);
unsigned char cgraph_inline_p (struct cgraph_edge *, const char **reason);
unsigned char cgraph_preserve_function_body_p (tree);
void verify_cgraph (void);
void verify_cgraph_node (struct cgraph_node *);
void cgraph_mark_inline_edge (struct cgraph_edge *e);
void cgraph_clone_inlined_nodes (struct cgraph_edge *e, unsigned char duplicate);
void cgraph_build_static_cdtor (char which, tree body);
static tree mf_build_string (const char *string);
static tree mf_varname_tree (tree);
static tree mf_file_function_line_tree (location_t);
static void mf_decl_cache_locals (void);
static void mf_decl_clear_locals (void);
static void mf_xform_derefs (void);
static void execute_mudflap_function_ops (void);
static void mf_xform_decls (tree, tree);
static tree mx_xfn_xform_decls (tree *, int *, void *);
static void mx_register_decls (tree, tree *);
static void execute_mudflap_function_decls (void);
static tree
mf_build_string (const char *string1)
{
  size_t len = strlen (string1);
  tree result = mf_mark (build_string (len + 1, string1));
  ((result)->common.type)
      = build_array_type (integer_types[itk_char],
                          build_index_type (build_int_2_wide ((unsigned long) (len), (long) (0))));
  ((result)->common.constant_flag) = 1;
  ((result)->common.invariant_flag) = 1;
  ((result)->common.readonly_flag) = 1;
  ((result)->common.static_flag) = 1;
  result = build1_stat (ADDR_EXPR,build_pointer_type (integer_types[itk_char]),result );
  return mf_mark (result);
}
static tree
mf_varname_tree (tree decl)
{
  static pretty_printer buf_rec;
  static int initialized = 0;
  pretty_printer *buf = & buf_rec;
  const char *buf_contents;
  tree result;
  if (decl == (tree) ((void *)0))
    fancy_abort ("gcc.c", 94154, "?");
  if (!initialized)
    {
      pp_construct (buf, ((void *)0), 0);
      initialized = 1;
    }
  pp_base_clear_output_area ((buf));
  {
    expanded_location xloc = (((decl)->decl.locus));
    const char *sourcefile;
    unsigned sourceline = xloc.line;
    sourcefile = xloc.file;
    if (sourcefile == ((void *)0) && current_function_decl != (tree) ((void *)0))
      sourcefile = (((((current_function_decl)->decl.locus))).file);
    if (sourcefile == ((void *)0))
      sourcefile = "<unknown file>";
    pp_base_string ((buf), sourcefile);
    if (sourceline != 0)
      {
        pp_base_string ((buf), ":");
        do { sprintf ((buf)->buffer->digit_buffer, "%d", sourceline); pp_base_string ((buf), (buf)->buffer->digit_buffer); } while (0);
      }
  }
  if (current_function_decl != (tree) ((void *)0))
    {
      pp_base_string ((buf), " (");
      {
        const char *funcname = ((void *)0);
        if (((current_function_decl)->decl.name))
          funcname = lang_hooks.decl_printable_name (current_function_decl, 1);
        if (funcname == ((void *)0))
          funcname = "anonymous fn";
        pp_base_string ((buf), funcname);
      }
      pp_base_string ((buf), ") ");
    }
  else
    pp_base_string ((buf), " ");
  {
    const char *declname = ((void *)0);
    if (strcmp ("GNU C++", lang_hooks.name) == 0 &&
        ((decl)->decl.name) != ((void *)0))
      {
        declname = cplus_demangle (((const char *) (((decl)->decl.name))->identifier.id.str),
                                   (1 << 8) | (1 << 3));
      }
    if (declname == ((void *)0))
      declname = lang_hooks.decl_printable_name (decl, 3);
    if (declname == ((void *)0))
      declname = "<unnamed variable>";
    pp_base_string ((buf), declname);
  }
  buf_contents = pp_base_formatted_text (buf);
  result = mf_build_string (buf_contents);
  pp_base_clear_output_area ((buf));
  return result;
}
static tree
mf_file_function_line_tree (location_t location)
{
  expanded_location xloc = (location);
  const char *file = ((void *)0), *colon, *line, *op, *name, *cp;
  char linebuf[18];
  char *string1;
  tree result;
  if (xloc.file == ((void *)0) && current_function_decl != (tree) ((void *)0))
    xloc.file = (((((current_function_decl)->decl.locus))).file);
  if (xloc.file == ((void *)0))
    xloc.file = "<unknown file>";
  if (xloc.line > 0)
    {
      sprintf (linebuf, "%d", xloc.line);
      colon = ":";
      line = linebuf;
    }
  else
    colon = line = "";
  name = lang_hooks.decl_printable_name (current_function_decl, 1);
  if (name)
    {
      op = " (";
      cp = ")";
    }
  else
    op = name = cp = "";
  string1 = concat (file, colon, line, op, name, cp, ((void *)0));
  result = mf_build_string (string1);
  free (string1);
  return result;
}
static tree mf_uintptr_type;
static tree mf_cache_struct_type;
static tree mf_cache_structptr_type;
static tree mf_cache_array_decl;
static tree mf_cache_shift_decl;
static tree mf_cache_mask_decl;
static tree mf_cache_shift_decl_l;
static tree mf_cache_mask_decl_l;
static tree mf_check_fndecl;
static tree mf_register_fndecl;
static tree mf_unregister_fndecl;
static tree
mf_make_builtin (enum tree_code category, const char *name, tree type)
{
  tree decl = mf_mark (build_decl_stat (category,get_identifier (name),type ));
  ((decl)->common.public_flag) = 1;
  ((decl)->decl.external_flag) = 1;
  lang_hooks.decls.pushdecl (decl);
  return decl;
}
static tree
mf_make_mf_cache_struct_type (tree field_type)
{
  tree fieldlo = build_decl_stat (FIELD_DECL,get_identifier ("low"),field_type );
  tree fieldhi = build_decl_stat (FIELD_DECL,get_identifier ("high"),field_type );
  tree struct_type = make_node_stat (RECORD_TYPE );
  ((fieldlo)->decl.context) = struct_type;
  ((fieldhi)->decl.context) = struct_type;
  ((fieldlo)->common.chain) = fieldhi;
  ((struct_type)->type.values) = fieldlo;
  ((struct_type)->type.name) = get_identifier ("__mf_cache");
  layout_type (struct_type);
  return struct_type;
}
void
mudflap_init (void)
{
  static unsigned char done = 0;
  tree mf_const_string_type;
  tree mf_cache_array_type;
  tree mf_check_register_fntype;
  tree mf_unregister_fntype;
  if (done)
    return;
  done = 1;
  mf_uintptr_type = lang_hooks.types.type_for_mode (ptr_mode,
                        1);
  mf_const_string_type
    = build_pointer_type (build_qualified_type
     (integer_types[itk_char], 0x1));
  mf_cache_struct_type = mf_make_mf_cache_struct_type (mf_uintptr_type);
  mf_cache_structptr_type = build_pointer_type (mf_cache_struct_type);
  mf_cache_array_type = build_array_type (mf_cache_struct_type, 0);
  mf_check_register_fntype =
    build_function_type (global_trees[TI_VOID_TYPE], tree_cons_stat (0,global_trees[TI_PTR_TYPE],tree_cons_stat (0,global_trees[TI_SIZE_TYPE],tree_cons_stat (0,integer_types[itk_int],tree_cons_stat (0,mf_const_string_type,global_trees[TI_VOID_LIST_NODE] ) ) ) ))
                                              ;
  mf_unregister_fntype =
    build_function_type (global_trees[TI_VOID_TYPE], tree_cons_stat (0,global_trees[TI_PTR_TYPE],tree_cons_stat (0,global_trees[TI_SIZE_TYPE],tree_cons_stat (0,integer_types[itk_int],global_trees[TI_VOID_LIST_NODE] ) ) ))
                        ;
  mf_cache_array_decl = mf_make_builtin (VAR_DECL, "__mf_lookup_cache",
      mf_cache_array_type);
  mf_cache_shift_decl = mf_make_builtin (VAR_DECL, "__mf_lc_shift",
      integer_types[itk_unsigned_char]);
  mf_cache_mask_decl = mf_make_builtin (VAR_DECL, "__mf_lc_mask",
     mf_uintptr_type);
  mf_check_fndecl = mf_make_builtin (FUNCTION_DECL, "__mf_check",
         mf_check_register_fntype);
  mf_register_fndecl = mf_make_builtin (FUNCTION_DECL, "__mf_register",
     mf_check_register_fntype);
  mf_unregister_fndecl = mf_make_builtin (FUNCTION_DECL, "__mf_unregister",
       mf_unregister_fntype);
}
static void
execute_mudflap_function_ops (void)
{
  if (mf_marked_p (current_function_decl))
    return;
  push_gimplify_context ();
  if (! flag_mudflap_threads)
    mf_decl_cache_locals ();
  mf_xform_derefs ();
  if (! flag_mudflap_threads)
    mf_decl_clear_locals ();
  pop_gimplify_context (((void *)0));
}
static void
mf_decl_cache_locals (void)
{
  tree t, shift_init_stmts, mask_init_stmts;
  tree_stmt_iterator tsi;
  mf_cache_shift_decl_l
    = mf_mark (create_tmp_var (((mf_cache_shift_decl)->common.type),
                               "__mf_lookup_shift_l"));
  mf_cache_mask_decl_l
    = mf_mark (create_tmp_var (((mf_cache_mask_decl)->common.type),
                               "__mf_lookup_mask_l"));
  t = build (MODIFY_EXPR, ((mf_cache_shift_decl_l)->common.type),
             mf_cache_shift_decl_l, mf_cache_shift_decl);
  annotate_with_locus (t, ((current_function_decl)->decl.locus));
  gimplify_to_stmt_list (&t);
  shift_init_stmts = t;
  t = build (MODIFY_EXPR, ((mf_cache_mask_decl_l)->common.type),
             mf_cache_mask_decl_l, mf_cache_mask_decl);
  annotate_with_locus (t, ((current_function_decl)->decl.locus));
  gimplify_to_stmt_list (&t);
  mask_init_stmts = t;
  for (tsi = tsi_start (shift_init_stmts);
       ! tsi_end_p (tsi);
       tsi_next (&tsi))
    insert_edge_copies (tsi_stmt (tsi), ENTRY_BLOCK_PTR);
  for (tsi = tsi_start (mask_init_stmts);
       ! tsi_end_p (tsi);
       tsi_next (&tsi))
    insert_edge_copies (tsi_stmt (tsi), ENTRY_BLOCK_PTR);
  bsi_commit_edge_inserts (((void *)0));
}
static void
mf_decl_clear_locals (void)
{
  mf_cache_shift_decl_l = (tree) ((void *)0);
  mf_cache_mask_decl_l = (tree) ((void *)0);
}
static void
mf_build_check_statement_for (tree addr, tree size,
         block_stmt_iterator *instr_bsi,
                              location_t *locus, tree dirflag)
{
  tree_stmt_iterator head, tsi;
  tree ptrtype = ((addr)->common.type);
  block_stmt_iterator bsi;
  basic_block cond_bb, then_bb, join_bb;
  edge e;
  tree cond, t, u, v, l1, l2;
  tree mf_value;
  tree mf_base;
  tree mf_elem;
  l1 = create_artificial_label ();
  l2 = create_artificial_label ();
  cond_bb = bb_for_stmt (bsi_stmt (*instr_bsi));
  bsi = *instr_bsi;
  bsi_prev (&bsi);
  if (! bsi_end_p (bsi))
    {
      e = split_block (cond_bb, bsi_stmt (bsi));
      cond_bb = e->src;
      join_bb = e->dest;
    }
  else
    {
      join_bb = cond_bb;
      cond_bb = create_empty_bb (join_bb->prev_bb);
      e = make_edge (cond_bb, join_bb, 0);
    }
  e->flags = 2048;
  then_bb = create_empty_bb (cond_bb);
  make_edge (cond_bb, then_bb, 1024);
  make_edge (then_bb, join_bb, 1);
  predict_edge_def (then_bb->pred, PRED_MUDFLAP, NOT_TAKEN);
  if (dom_computed[CDI_DOMINATORS] >= DOM_CONS_OK)
    {
      set_immediate_dominator (CDI_DOMINATORS, then_bb, cond_bb);
      set_immediate_dominator (CDI_DOMINATORS, join_bb, cond_bb);
    }
  mf_value = create_tmp_var (ptrtype, "__mf_value");
  mf_elem = create_tmp_var (mf_cache_structptr_type, "__mf_elem");
  mf_base = create_tmp_var (mf_uintptr_type, "__mf_base");
  t = build (MODIFY_EXPR, global_trees[TI_VOID_TYPE], mf_value, unshare_expr (addr));
  ((t)->exp.locus = (locus));
  gimplify_to_stmt_list (&t);
  head = tsi_start (t);
  tsi = tsi_last (t);
  t = build (MODIFY_EXPR, global_trees[TI_VOID_TYPE], mf_base,
             build1_stat (NOP_EXPR,mf_uintptr_type,mf_value ));
  ((t)->exp.locus = (locus));
  gimplify_to_stmt_list (&t);
  tsi_link_after (&tsi, t, TSI_CONTINUE_LINKING);
  t = build (RSHIFT_EXPR, mf_uintptr_type, mf_base,
             (flag_mudflap_threads ? mf_cache_shift_decl : mf_cache_shift_decl_l));
  t = build (BIT_AND_EXPR, mf_uintptr_type, t,
             (flag_mudflap_threads ? mf_cache_mask_decl : mf_cache_mask_decl_l));
  t = build (ARRAY_REF,
             ((((mf_cache_array_decl)->common.type))->common.type),
             mf_cache_array_decl, t, (tree) ((void *)0), (tree) ((void *)0));
  t = build1_stat (ADDR_EXPR,mf_cache_structptr_type,t );
  t = build (MODIFY_EXPR, global_trees[TI_VOID_TYPE], mf_elem, t);
  ((t)->exp.locus = (locus));
  gimplify_to_stmt_list (&t);
  tsi_link_after (&tsi, t, TSI_CONTINUE_LINKING);
  t = build (COMPONENT_REF, mf_uintptr_type,
             build1_stat (INDIRECT_REF,mf_cache_struct_type,mf_elem ),
             ((mf_cache_struct_type)->type.values), (tree) ((void *)0));
  t = build (GT_EXPR, global_trees[TI_BOOLEAN_TYPE], t, mf_base);
  u = build (COMPONENT_REF, mf_uintptr_type,
             build1_stat (INDIRECT_REF,mf_cache_struct_type,mf_elem ),
             ((((mf_cache_struct_type)->type.values))->common.chain), (tree) ((void *)0));
  v = convert (mf_uintptr_type,
        size_binop (MINUS_EXPR, size, global_trees[TI_SIZE_ONE]));
  v = fold (build (PLUS_EXPR, mf_uintptr_type, mf_base, v));
  u = build (LT_EXPR, global_trees[TI_BOOLEAN_TYPE], u, v);
  t = build (TRUTH_OR_EXPR, global_trees[TI_BOOLEAN_TYPE], t, u);
  cond = create_tmp_var (global_trees[TI_BOOLEAN_TYPE], "__mf_unlikely_cond");
  t = build (MODIFY_EXPR, global_trees[TI_BOOLEAN_TYPE], cond, t);
  gimplify_to_stmt_list (&t);
  tsi_link_after (&tsi, t, TSI_CONTINUE_LINKING);
  t = build (COND_EXPR, global_trees[TI_VOID_TYPE], cond,
      build (GOTO_EXPR, global_trees[TI_VOID_TYPE], tree_block_label (then_bb)),
      build (GOTO_EXPR, global_trees[TI_VOID_TYPE], tree_block_label (join_bb)));
  ((t)->exp.locus = (locus));
  tsi_link_after (&tsi, t, TSI_CONTINUE_LINKING);
  bsi = bsi_last (cond_bb);
  for (tsi = head; ! tsi_end_p (tsi); tsi_next (&tsi))
    bsi_insert_after (&bsi, tsi_stmt (tsi), BSI_CONTINUE_LINKING);
  u = tree_cons_stat ((tree) ((void *)0),mf_file_function_line_tree (locus == ((void *)0) ? unknown_location : *locus),(tree) ((void *)0) )
             ;
  u = tree_cons_stat ((tree) ((void *)0),dirflag,u );
  u = tree_cons_stat ((tree) ((void *)0),size,u );
  u = tree_cons_stat ((tree) ((void *)0),mf_value,u );
  t = build_function_call_expr (mf_check_fndecl, u);
  gimplify_to_stmt_list (&t);
  head = tsi_start (t);
  tsi = tsi_last (t);
  if (! flag_mudflap_threads)
    {
      t = build (MODIFY_EXPR, global_trees[TI_VOID_TYPE],
                 mf_cache_shift_decl_l, mf_cache_shift_decl);
      tsi_link_after (&tsi, t, TSI_CONTINUE_LINKING);
      t = build (MODIFY_EXPR, global_trees[TI_VOID_TYPE],
                 mf_cache_mask_decl_l, mf_cache_mask_decl);
      tsi_link_after (&tsi, t, TSI_CONTINUE_LINKING);
    }
  bsi = bsi_start (then_bb);
  for (tsi = head; ! tsi_end_p (tsi); tsi_next (&tsi))
    bsi_insert_after (&bsi, tsi_stmt (tsi), BSI_CONTINUE_LINKING);
  *instr_bsi = bsi_start (join_bb);
  bsi_next (instr_bsi);
}
static void
mf_xform_derefs_1 (block_stmt_iterator *iter, tree *tp,
                   location_t *locus, tree dirflag)
{
  tree type, ptr_type, addr, size, t;
  if (dirflag == global_trees[TI_INTEGER_ZERO] && flag_mudflap_ignore_reads)
    return;
  t = *tp;
  type = ((t)->common.type);
  size = ((type)->type.size_unit);
  switch (((enum tree_code) (t)->common.code))
    {
    case ARRAY_REF:
      {
        tree op0, op1;
        op0 = ((t)->exp.operands[0]);
        op1 = ((t)->exp.operands[1]);
        while (((enum tree_code) (op1)->common.code) == INTEGER_CST)
          {
            tree dom = ((((op0)->common.type))->type.values);
     if (!dom
  || (! ((dom)->type.minval)
      || ! really_constant_p (((dom)->type.minval)))
  || (! ((dom)->type.maxval)
      || ! really_constant_p (((dom)->type.maxval)))
  || (tree_int_cst_lt (op1, ((dom)->type.minval))
      || tree_int_cst_lt (((dom)->type.maxval), op1)))
              break;
            if (((enum tree_code) (op0)->common.code) == VAR_DECL && !((op0)->decl.external_flag))
              return;
            if (((enum tree_code) (op0)->common.code) != ARRAY_REF)
              break;
            op1 = ((op0)->exp.operands[1]);
            op0 = ((op0)->exp.operands[0]);
          }
        ptr_type = build_pointer_type (type);
        addr = build1_stat (ADDR_EXPR,ptr_type,t );
      }
      break;
    case INDIRECT_REF:
      addr = ((t)->exp.operands[0]);
      ptr_type = ((addr)->common.type);
      break;
    case ARRAY_RANGE_REF:
      warning ("mudflap checking not yet implemented for ARRAY_RANGE_REF");
      return;
    case COMPONENT_REF:
      {
        tree field;
        if (((enum tree_code) (((t)->exp.operands[0]))->common.code) != INDIRECT_REF)
          return;
        field = ((t)->exp.operands[1]);
        if (((field)->decl.result))
          {
     if (((enum tree_code) (((field)->decl.size_unit))->common.code) == INTEGER_CST)
       size = ((field)->decl.size_unit);
            addr = ((((t)->exp.operands[0]))->exp.operands[0]);
            addr = fold_convert (global_trees[TI_PTR_TYPE], addr);
            addr = fold (build (PLUS_EXPR, global_trees[TI_PTR_TYPE],
                                addr, fold_convert (global_trees[TI_PTR_TYPE],
          byte_position (field))));
          }
        else
          {
            ptr_type = build_pointer_type (type);
            addr = build1_stat (ADDR_EXPR,ptr_type,t );
          }
      }
      break;
    case BIT_FIELD_REF:
      {
        tree ofs, rem, bpu;
        if (((enum tree_code) (((t)->exp.operands[0]))->common.code) != INDIRECT_REF)
          return;
        bpu = size_int_wide ((long) (8), BITSIZETYPE);
        ofs = convert (sizetype_tab[(int) BITSIZETYPE], ((t)->exp.operands[2]));
        rem = size_binop (TRUNC_MOD_EXPR, ofs, bpu);
        ofs = size_binop (TRUNC_DIV_EXPR, ofs, bpu);
        size = convert (sizetype_tab[(int) BITSIZETYPE], ((t)->exp.operands[1]));
        size = size_binop (PLUS_EXPR, size, rem);
        size = size_binop (CEIL_DIV_EXPR, size, bpu);
        size = convert (sizetype_tab[(int) SIZETYPE], size);
        addr = ((((t)->exp.operands[0]))->exp.operands[0]);
        addr = convert (global_trees[TI_PTR_TYPE], addr);
        addr = fold (build (PLUS_EXPR, global_trees[TI_PTR_TYPE], addr, ofs));
      }
      break;
    default:
      return;
    }
  mf_build_check_statement_for (addr, size, iter, locus, dirflag);
}
static void
mf_xform_derefs (void)
{
  basic_block bb, next;
  block_stmt_iterator i;
  int saved_last_basic_block = last_basic_block;
  bb = ENTRY_BLOCK_PTR ->next_bb;
  do
    {
      next = bb->next_bb;
      for (i = bsi_start (bb); !bsi_end_p (i); bsi_next (&i))
 {
   tree s = bsi_stmt (i);
   switch (((enum tree_code) (s)->common.code))
     {
     case MODIFY_EXPR:
       mf_xform_derefs_1 (&i, &((s)->exp.operands[0]), ((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (s)->common.code))])) != 0) ? (s)->exp.locus : (location_t *)((void *)0)),
     global_trees[TI_INTEGER_ONE]);
       mf_xform_derefs_1 (&i, &((s)->exp.operands[1]), ((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (s)->common.code))])) != 0) ? (s)->exp.locus : (location_t *)((void *)0)),
     global_trees[TI_INTEGER_ZERO]);
       break;
     case RETURN_EXPR:
       if (((s)->exp.operands[0]) != (tree) ((void *)0))
  {
    if (((enum tree_code) (((s)->exp.operands[0]))->common.code) == MODIFY_EXPR)
      mf_xform_derefs_1 (&i, &((((s)->exp.operands[0]))->exp.operands[1]),
           ((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (s)->common.code))])) != 0) ? (s)->exp.locus : (location_t *)((void *)0)), global_trees[TI_INTEGER_ZERO]);
    else
      mf_xform_derefs_1 (&i, &((s)->exp.operands[0]), ((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (s)->common.code))])) != 0) ? (s)->exp.locus : (location_t *)((void *)0)),
           global_trees[TI_INTEGER_ZERO]);
  }
       break;
     default:
       ;
     }
 }
      bb = next;
    }
  while (bb && bb->index <= saved_last_basic_block);
}
static void
execute_mudflap_function_decls (void)
{
  if (mf_marked_p (current_function_decl))
    return;
  push_gimplify_context ();
  mf_xform_decls (((current_function_decl)->decl.saved_tree),
                  ((current_function_decl)->decl.arguments));
  pop_gimplify_context (((void *)0));
}
struct mf_xform_decls_data
{
  tree param_decls;
};
static void
mx_register_decls (tree decl, tree *stmt_list)
{
  tree finally_stmts = (tree) ((void *)0);
  tree_stmt_iterator initially_stmts = tsi_start (*stmt_list);
  while (decl != (tree) ((void *)0))
    {
      if ((((enum tree_code) (decl)->common.code) == VAR_DECL || ((enum tree_code) (decl)->common.code) == PARM_DECL)
   && ! ((decl)->decl.external_flag)
   && ! ((decl)->common.static_flag)
   && ((decl)->common.addressable_flag)
   && ((((((decl)->common.type))->type.size) != (tree) ((void *)0)) || (((enum tree_code) (((decl)->common.type))->common.code) == VOID_TYPE))
   && ! mf_marked_p (decl))
        {
          tree size = (tree) ((void *)0), variable_name;
          tree unregister_fncall, unregister_fncall_params;
          tree register_fncall, register_fncall_params;
          if (((decl)->decl.defer_output))
            {
              tree stack_alloc_call = (tree) ((void *)0);
              while(! tsi_end_p (initially_stmts))
                {
                  tree t = tsi_stmt (initially_stmts);
                  tree call = (tree) ((void *)0);
                  if (((enum tree_code) (t)->common.code) == CALL_EXPR)
                    call = t;
                  else if (((enum tree_code) (t)->common.code) == MODIFY_EXPR &&
                           ((enum tree_code) (((t)->exp.operands[1]))->common.code) == CALL_EXPR)
                    call = ((t)->exp.operands[1]);
                  else if (((enum tree_code) (t)->common.code) == TRY_FINALLY_EXPR)
                    {
                      initially_stmts = tsi_start (((t)->exp.operands[0]));
                    }
                  if (call != (tree) ((void *)0))
                    {
                      if (((enum tree_code) (((call)->exp.operands[0]))->common.code) == ADDR_EXPR &&
                          ((((call)->exp.operands[0]))->exp.operands[0]) ==
      implicit_built_in_decls [BUILT_IN_STACK_ALLOC])
                        {
                          tree stack_alloc_args = ((call)->exp.operands[1]);
                          tree stack_alloc_op1 = ((stack_alloc_args)->list.value);
                          tree stack_alloc_op2 = ((((stack_alloc_args)->common.chain))->list.value);
                          if (((enum tree_code) (stack_alloc_op1)->common.code) == ADDR_EXPR &&
                              ((stack_alloc_op1)->exp.operands[0]) == decl)
                            {
                              size = stack_alloc_op2;
                              stack_alloc_call = call;
                              tsi_next (&initially_stmts);
                              break;
                            }
                        }
                    }
                  tsi_next (&initially_stmts);
                }
              if (stack_alloc_call == (tree) ((void *)0))
                {
                  warning ("mudflap cannot handle variable-sized declaration `%s'",
                         ((const char *) (((decl)->decl.name))->identifier.id.str));
                  break;
                }
            }
          else
            {
              size = convert (global_trees[TI_SIZE_TYPE], ((((decl)->common.type))->type.size_unit));
            }
          unregister_fncall_params =
            tree_cons_stat ((tree) ((void *)0),convert (global_trees[TI_PTR_TYPE], mf_mark (build1_stat (ADDR_EXPR,build_pointer_type (((decl)->common.type)),decl ))),tree_cons_stat ((tree) ((void *)0),size,tree_cons_stat ((tree) ((void *)0),build_int_2_wide ((unsigned long) (3), (long) (0)),(tree) ((void *)0) ) ) )
                                                         ;
          unregister_fncall = build_function_call_expr (mf_unregister_fndecl,
                                                        unregister_fncall_params);
          variable_name = mf_varname_tree (decl);
          register_fncall_params =
            tree_cons_stat ((tree) ((void *)0),convert (global_trees[TI_PTR_TYPE], mf_mark (build1_stat (ADDR_EXPR,build_pointer_type (((decl)->common.type)),decl ))),tree_cons_stat ((tree) ((void *)0),size,tree_cons_stat ((tree) ((void *)0),build_int_2_wide ((unsigned long) (3), (long) (0)),tree_cons_stat ((tree) ((void *)0),variable_name,(tree) ((void *)0) ) ) ) )
                                                                     ;
          register_fncall = build_function_call_expr (mf_register_fndecl,
                                                      register_fncall_params);
          gimplify_stmt (&register_fncall);
          gimplify_stmt (&unregister_fncall);
          if (tsi_end_p (initially_stmts))
            internal_error ("mudflap ran off end of BIND_EXPR body");
          tsi_link_before (&initially_stmts, register_fncall, TSI_SAME_STMT);
          append_to_statement_list (unregister_fncall, &finally_stmts);
          mf_mark (decl);
        }
      decl = ((decl)->common.chain);
    }
  if (finally_stmts != (tree) ((void *)0))
    {
      tree t = build (TRY_FINALLY_EXPR, global_trees[TI_VOID_TYPE],
                      *stmt_list, finally_stmts);
      *stmt_list = ((void *)0);
      append_to_statement_list (t, stmt_list);
    }
}
static tree
mx_xfn_xform_decls (tree *t, int *continue_p, void *data)
{
  struct mf_xform_decls_data* d = (struct mf_xform_decls_data*) data;
  if (*t == (tree) ((void *)0) || *t == global_trees[TI_ERROR_MARK])
    {
      *continue_p = 0;
      return (tree) ((void *)0);
    }
  *continue_p = 1;
  switch (((enum tree_code) (*t)->common.code))
    {
    case BIND_EXPR:
      {
        mx_register_decls (d->param_decls, &((((*t))->exp.operands[1])));
        d->param_decls = (tree) ((void *)0);
        mx_register_decls (((((*t))->exp.operands[0])), &((((*t))->exp.operands[1])));
      }
      break;
    default:
      break;
    }
  return ((void *)0);
}
static void
mf_xform_decls (tree fnbody, tree fnparams)
{
  struct mf_xform_decls_data d;
  d.param_decls = fnparams;
  walk_tree_without_duplicates (&fnbody, mx_xfn_xform_decls, &d);
}
static htab_t marked_trees = ((void *)0);
tree
mf_mark (tree t)
{
  void **slot;
  if (marked_trees == ((void *)0))
    marked_trees = htab_create_alloc (31, htab_hash_pointer, htab_eq_pointer, ((void *)0), ggc_calloc, ((void *)0));
  slot = htab_find_slot (marked_trees, t, INSERT);
  *slot = t;
  return t;
}
int
mf_marked_p (tree t)
{
  void *entry;
  if (marked_trees == ((void *)0))
    return 0;
  entry = htab_find (marked_trees, t);
  return (entry != ((void *)0));
}
static varray_type deferred_static_decls;
static tree enqueued_call_stmt_chain;
static void
mudflap_register_call (tree obj, tree object_size, tree varname)
{
  tree arg, args, call_stmt;
  args = tree_cons_stat ((tree) ((void *)0),varname,(tree) ((void *)0) );
  arg = build_int_2_wide ((unsigned long) (4), (long) (0));
  args = tree_cons_stat ((tree) ((void *)0),arg,args );
  arg = convert (global_trees[TI_SIZE_TYPE], object_size);
  args = tree_cons_stat ((tree) ((void *)0),arg,args );
  arg = build1_stat (ADDR_EXPR,build_pointer_type (((obj)->common.type)),obj );
  arg = convert (global_trees[TI_PTR_TYPE], arg);
  args = tree_cons_stat ((tree) ((void *)0),arg,args );
  call_stmt = build_function_call_expr (mf_register_fndecl, args);
  append_to_statement_list (call_stmt, &enqueued_call_stmt_chain);
}
void
mudflap_enqueue_decl (tree obj)
{
  if (mf_marked_p (obj))
    return;
  if ((tree_code_type[(int) (((enum tree_code) (obj)->common.code))] == 'd') && ((obj)->decl.external_flag) && ((obj)->decl.artificial_flag))
    return;
  if ((((((obj)->common.type))->type.size) != (tree) ((void *)0)))
    {
      tree object_size;
      mf_mark (obj);
      object_size = size_in_bytes (((obj)->common.type));
      if (dump_file)
        {
          fprintf (dump_file, "enqueue_decl obj=`");
          print_generic_expr (dump_file, obj, dump_flags);
          fprintf (dump_file, "' size=");
          print_generic_expr (dump_file, object_size, dump_flags);
          fprintf (dump_file, "\n");
        }
      mudflap_register_call (obj, object_size, mf_varname_tree (obj));
    }
  else
    {
      size_t i;
      if (! deferred_static_decls)
        deferred_static_decls = varray_init (10, VARRAY_DATA_TREE, "deferred static list");
      for (i = 0; i < ((deferred_static_decls)->elements_used); i++)
        if (((deferred_static_decls)->data.tree1[i]) == obj)
          {
            warning ("mudflap cannot track lifetime of `%s'",
                     ((const char *) (((obj)->decl.name))->identifier.id.str));
            return;
          }
      do { if ((deferred_static_decls)->elements_used >= (deferred_static_decls)->num_elements) (((deferred_static_decls)) = varray_grow ((deferred_static_decls), 2 * (deferred_static_decls)->num_elements)); (deferred_static_decls)->data.tree1[(deferred_static_decls)->elements_used++] = (obj); } while (0);
    }
}
void
mudflap_enqueue_constant (tree obj)
{
  tree object_size, varname;
  if (mf_marked_p (obj))
    return;
  if (((enum tree_code) (obj)->common.code) == STRING_CST)
    object_size = build_int_2_wide ((unsigned long) (((obj)->string1.length)), (long) (0));
  else
    object_size = size_in_bytes (((obj)->common.type));
  if (dump_file)
    {
      fprintf (dump_file, "enqueue_constant obj=`");
      print_generic_expr (dump_file, obj, dump_flags);
      fprintf (dump_file, "' size=");
      print_generic_expr (dump_file, object_size, dump_flags);
      fprintf (dump_file, "\n");
    }
  if (((enum tree_code) (obj)->common.code) == STRING_CST)
    varname = mf_build_string ("string literal");
  else
    varname = mf_build_string ("constant");
  mudflap_register_call (obj, object_size, varname);
}
void
mudflap_finish_file (void)
{
  if (deferred_static_decls)
    {
      size_t i;
      for (i = 0; i < ((deferred_static_decls)->elements_used); i++)
        {
          tree obj = ((deferred_static_decls)->data.tree1[i]);
          mudflap_enqueue_decl (obj);
        }
      varray_clear(deferred_static_decls);
    }
  if (enqueued_call_stmt_chain)
    {
      cgraph_build_static_cdtor ('I', enqueued_call_stmt_chain);
      enqueued_call_stmt_chain = 0;
    }
}
static unsigned char
gate_mudflap (void)
{
  return flag_mudflap != 0;
}
struct tree_opt_pass pass_mudflap_1 =
{
  "mudflap1",
  gate_mudflap,
  execute_mudflap_function_decls,
  ((void *)0),
  ((void *)0),
  0,
  0,
  (1 << 0),
  0,
  0,
  0,
  (1 << 0)
};
struct tree_opt_pass pass_mudflap_2 =
{
  "mudflap2",
  gate_mudflap,
  execute_mudflap_function_ops,
  ((void *)0),
  ((void *)0),
  0,
  0,
  (1 << 2),
  0,
  0,
  0,
  (1 << 4) | (1 << 5)
  | (1 << 0)
};
const struct ggc_root_tab gt_ggc_r_gt_tree_mudflap_h[] = {
  {
    &enqueued_call_stmt_chain,
    1,
    sizeof (enqueued_call_stmt_chain),
    &gt_ggc_mx_lang_tree_node,
    &gt_pch_nx_lang_tree_node
  },
  {
    &deferred_static_decls,
    1,
    sizeof (deferred_static_decls),
    &gt_ggc_mx_varray_head_tag,
    &gt_pch_nx_varray_head_tag
  },
  {
    &marked_trees,
    1,
    sizeof (marked_trees),
    &gt_ggc_m_P9tree_node4htab,
    &gt_pch_n_P9tree_node4htab
  },
  {
    &mf_unregister_fndecl,
    1,
    sizeof (mf_unregister_fndecl),
    &gt_ggc_mx_lang_tree_node,
    &gt_pch_nx_lang_tree_node
  },
  {
    &mf_register_fndecl,
    1,
    sizeof (mf_register_fndecl),
    &gt_ggc_mx_lang_tree_node,
    &gt_pch_nx_lang_tree_node
  },
  {
    &mf_check_fndecl,
    1,
    sizeof (mf_check_fndecl),
    &gt_ggc_mx_lang_tree_node,
    &gt_pch_nx_lang_tree_node
  },
  {
    &mf_cache_mask_decl_l,
    1,
    sizeof (mf_cache_mask_decl_l),
    &gt_ggc_mx_lang_tree_node,
    &gt_pch_nx_lang_tree_node
  },
  {
    &mf_cache_shift_decl_l,
    1,
    sizeof (mf_cache_shift_decl_l),
    &gt_ggc_mx_lang_tree_node,
    &gt_pch_nx_lang_tree_node
  },
  {
    &mf_cache_mask_decl,
    1,
    sizeof (mf_cache_mask_decl),
    &gt_ggc_mx_lang_tree_node,
    &gt_pch_nx_lang_tree_node
  },
  {
    &mf_cache_shift_decl,
    1,
    sizeof (mf_cache_shift_decl),
    &gt_ggc_mx_lang_tree_node,
    &gt_pch_nx_lang_tree_node
  },
  {
    &mf_cache_array_decl,
    1,
    sizeof (mf_cache_array_decl),
    &gt_ggc_mx_lang_tree_node,
    &gt_pch_nx_lang_tree_node
  },
  {
    &mf_cache_structptr_type,
    1,
    sizeof (mf_cache_structptr_type),
    &gt_ggc_mx_lang_tree_node,
    &gt_pch_nx_lang_tree_node
  },
  {
    &mf_cache_struct_type,
    1,
    sizeof (mf_cache_struct_type),
    &gt_ggc_mx_lang_tree_node,
    &gt_pch_nx_lang_tree_node
  },
  {
    &mf_uintptr_type,
    1,
    sizeof (mf_uintptr_type),
    &gt_ggc_mx_lang_tree_node,
    &gt_pch_nx_lang_tree_node
  },
  { ((void *)0), 0, 0, ((void *)0), ((void *)0) }
};
extern tree chrec_not_analyzed_yet;
extern tree chrec_dont_know;
extern tree chrec_known;
static unsigned char
automatically_generated_chrec_p (tree chrec)
{
  return (chrec == chrec_not_analyzed_yet
   || chrec == chrec_dont_know
   || chrec == chrec_known);
}
static unsigned char
tree_is_chrec (tree expr)
{
  if (((enum tree_code) (expr)->common.code) == POLYNOMIAL_CHREC
      || automatically_generated_chrec_p (expr))
    return 1;
  else
    return 0;
}
extern tree chrec_fold_plus (tree, tree, tree);
extern tree chrec_fold_minus (tree, tree, tree);
extern tree chrec_fold_multiply (tree, tree, tree);
extern tree chrec_convert (tree, tree);
extern tree count_ev_in_wider_type (tree, tree);
extern tree chrec_type (tree);
extern tree chrec_apply (unsigned, tree, tree);
extern tree chrec_replace_initial_condition (tree, tree);
extern tree update_initial_condition_to_origin (tree);
extern tree initial_condition (tree);
extern tree evolution_part_in_loop_num (tree, unsigned);
extern tree hide_evolution_in_other_loops_than_loop (tree, unsigned);
extern tree reset_evolution_in_loop (unsigned, tree, tree);
extern tree chrec_merge (tree, tree);
extern unsigned char is_multivariate_chrec (tree);
extern unsigned char chrec_is_positive (tree, unsigned char *);
extern unsigned char chrec_contains_symbols (tree);
extern unsigned char chrec_contains_symbols_defined_in_loop (tree, unsigned);
extern unsigned char chrec_contains_undetermined (tree);
extern unsigned char tree_contains_chrecs (tree);
extern unsigned char evolution_function_is_affine_multivariate_p (tree);
extern unsigned char evolution_function_is_univariate_p (tree);
static tree
build_polynomial_chrec (unsigned loop_num,
   tree left,
   tree right)
{
  if (left == chrec_dont_know
      || right == chrec_dont_know)
    return chrec_dont_know;
  return build (POLYNOMIAL_CHREC, ((left)->common.type),
  build_int_2_wide ((unsigned long) (loop_num), (long) (0)), left, right);
}
static unsigned char
chrec_zerop (tree chrec)
{
  if (chrec == (tree) ((void *)0))
    return 0;
  if (((enum tree_code) (chrec)->common.code) == INTEGER_CST)
    return integer_zerop (chrec);
  return 0;
}
static unsigned char
evolution_function_is_constant_p (tree chrec)
{
  if (chrec == (tree) ((void *)0))
    return 0;
  switch (((enum tree_code) (chrec)->common.code))
    {
    case INTEGER_CST:
    case REAL_CST:
      return 1;
    default:
      return 0;
    }
}
static unsigned char
evolution_function_is_affine_p (tree chrec)
{
  if (chrec == (tree) ((void *)0))
    return 0;
  switch (((enum tree_code) (chrec)->common.code))
    {
    case POLYNOMIAL_CHREC:
      if (evolution_function_is_constant_p (((chrec)->exp.operands[1]))
   && evolution_function_is_constant_p (((chrec)->exp.operands[2])))
 return 1;
      else
 return 0;
    default:
      return 0;
    }
}
static unsigned char
evolution_function_is_affine_or_constant_p (tree chrec)
{
  return evolution_function_is_affine_p (chrec)
    || evolution_function_is_constant_p (chrec);
}
static unsigned char
tree_does_not_contain_chrecs (tree expr)
{
  return !tree_contains_chrecs (expr);
}
static unsigned char
no_evolution_in_loop_p (tree chrec, unsigned loop_num, unsigned char *res)
{
  tree scev;
  if (chrec == chrec_not_analyzed_yet
      || chrec == chrec_dont_know
      || chrec_contains_symbols_defined_in_loop (chrec, loop_num))
    return 0;
  scev = hide_evolution_in_other_loops_than_loop (chrec, loop_num);
  *res = !tree_is_chrec (scev);
  return 1;
}
tree chrec_not_analyzed_yet;
tree chrec_dont_know;
tree chrec_known;
tree
count_ev_in_wider_type (tree foo ,
   tree bar )
{
  return (tree) ((void *)0);
}
unsigned char
chrec_contains_symbols_defined_in_loop (tree chrec ,
     unsigned loop_nb )
{
  return 1;
}
static unsigned char
is_not_constant_evolution (tree cst)
{
  return (((enum tree_code) (cst)->common.code) == POLYNOMIAL_CHREC);
}
static tree
chrec_fold_poly_cst (enum tree_code code,
       tree type,
       tree poly,
       tree cst)
{
  switch (code)
    {
    case PLUS_EXPR:
      return build_polynomial_chrec
 ((((((poly)->exp.operands[0]))->int_cst.int_cst).low),
  chrec_fold_plus (type, ((poly)->exp.operands[1]), cst),
  ((poly)->exp.operands[2]));
    case MINUS_EXPR:
      return build_polynomial_chrec
 ((((((poly)->exp.operands[0]))->int_cst.int_cst).low),
  chrec_fold_minus (type, ((poly)->exp.operands[1]), cst),
  ((poly)->exp.operands[2]));
    case MULT_EXPR:
      return build_polynomial_chrec
 ((((((poly)->exp.operands[0]))->int_cst.int_cst).low),
  chrec_fold_multiply (type, ((poly)->exp.operands[1]), cst),
  chrec_fold_multiply (type, ((poly)->exp.operands[2]), cst));
    default:
      return chrec_dont_know;
    }
}
static tree
chrec_fold_plus_poly_poly (enum tree_code code,
      tree type,
      tree poly0,
      tree poly1)
{
  tree left, right;
  if ((((((poly0)->exp.operands[0]))->int_cst.int_cst).low) < (((((poly1)->exp.operands[0]))->int_cst.int_cst).low))
    {
      if (code == PLUS_EXPR)
 return build_polynomial_chrec
   ((((((poly1)->exp.operands[0]))->int_cst.int_cst).low),
    chrec_fold_plus (type, poly0, ((poly1)->exp.operands[1])),
    ((poly1)->exp.operands[2]));
      else
 return build_polynomial_chrec
   ((((((poly1)->exp.operands[0]))->int_cst.int_cst).low),
    chrec_fold_minus (type, poly0, ((poly1)->exp.operands[1])),
    chrec_fold_multiply (type, ((poly1)->exp.operands[2]),
    convert (type, global_trees[TI_INTEGER_MINUS_ONE])));
    }
  if ((((((poly0)->exp.operands[0]))->int_cst.int_cst).low) > (((((poly1)->exp.operands[0]))->int_cst.int_cst).low))
    {
      if (code == PLUS_EXPR)
 return build_polynomial_chrec
   ((((((poly0)->exp.operands[0]))->int_cst.int_cst).low),
    chrec_fold_plus (type, ((poly0)->exp.operands[1]), poly1),
    ((poly0)->exp.operands[2]));
      else
 return build_polynomial_chrec
   ((((((poly0)->exp.operands[0]))->int_cst.int_cst).low),
    chrec_fold_minus (type, ((poly0)->exp.operands[1]), poly1),
    ((poly0)->exp.operands[2]));
    }
  if (code == PLUS_EXPR)
    {
      left = chrec_fold_plus
 (type, ((poly0)->exp.operands[1]), ((poly1)->exp.operands[1]));
      right = chrec_fold_plus
 (type, ((poly0)->exp.operands[2]), ((poly1)->exp.operands[2]));
    }
  else
    {
      left = chrec_fold_minus
 (type, ((poly0)->exp.operands[1]), ((poly1)->exp.operands[1]));
      right = chrec_fold_minus
 (type, ((poly0)->exp.operands[2]), ((poly1)->exp.operands[2]));
    }
  if (chrec_zerop (right))
    return left;
  else
    return build_polynomial_chrec
      ((((((poly0)->exp.operands[0]))->int_cst.int_cst).low), left, right);
}
static tree
chrec_fold_multiply_poly_poly (tree type,
          tree poly0,
          tree poly1)
{
  if ((((((poly0)->exp.operands[0]))->int_cst.int_cst).low) < (((((poly1)->exp.operands[0]))->int_cst.int_cst).low))
    return build_polynomial_chrec
      ((((((poly1)->exp.operands[0]))->int_cst.int_cst).low),
       chrec_fold_multiply (type, ((poly1)->exp.operands[1]), poly0),
       ((poly1)->exp.operands[2]));
  if ((((((poly1)->exp.operands[0]))->int_cst.int_cst).low) < (((((poly0)->exp.operands[0]))->int_cst.int_cst).low))
    return build_polynomial_chrec
      ((((((poly0)->exp.operands[0]))->int_cst.int_cst).low),
       chrec_fold_multiply (type, ((poly0)->exp.operands[1]), poly1),
       ((poly0)->exp.operands[2]));
  return
    build_polynomial_chrec
    ((((((poly0)->exp.operands[0]))->int_cst.int_cst).low),
     build_polynomial_chrec
     ((((((poly0)->exp.operands[0]))->int_cst.int_cst).low),
      chrec_fold_multiply (type, ((poly0)->exp.operands[1]), ((poly1)->exp.operands[1])),
      chrec_fold_plus
      (type, chrec_fold_multiply (type, ((poly0)->exp.operands[1]), ((poly1)->exp.operands[2])),
       chrec_fold_plus
       (type,
 chrec_fold_multiply (type, ((poly0)->exp.operands[2]), ((poly1)->exp.operands[1])),
 chrec_fold_multiply (type, ((poly0)->exp.operands[2]), ((poly1)->exp.operands[2]))))),
     chrec_fold_multiply
     (type, build_int_2_wide ((unsigned long) (2), (long) (0)),
      chrec_fold_multiply (type, ((poly0)->exp.operands[2]), ((poly1)->exp.operands[2]))));
}
static tree
chrec_fold_automatically_generated_operands (tree op0,
          tree op1)
{
  if (op0 == chrec_dont_know
      || op1 == chrec_dont_know)
    return chrec_dont_know;
  if (op0 == chrec_known
      || op1 == chrec_known)
    return chrec_known;
  if (op0 == chrec_not_analyzed_yet
      || op1 == chrec_not_analyzed_yet)
    return chrec_not_analyzed_yet;
  return chrec_dont_know;
}
static tree
chrec_fold_plus_1 (enum tree_code code,
     tree type,
     tree op0,
     tree op1)
{
  if (automatically_generated_chrec_p (op0)
      || automatically_generated_chrec_p (op1))
    return chrec_fold_automatically_generated_operands (op0, op1);
  switch (((enum tree_code) (op0)->common.code))
    {
    case POLYNOMIAL_CHREC:
      switch (((enum tree_code) (op1)->common.code))
 {
 case POLYNOMIAL_CHREC:
   return chrec_fold_plus_poly_poly (code, type, op0, op1);
 default:
   if (code == PLUS_EXPR)
     return build_polynomial_chrec
       ((((((op0)->exp.operands[0]))->int_cst.int_cst).low),
        chrec_fold_plus (type, ((op0)->exp.operands[1]), op1),
        ((op0)->exp.operands[2]));
   else
     return build_polynomial_chrec
       ((((((op0)->exp.operands[0]))->int_cst.int_cst).low),
        chrec_fold_minus (type, ((op0)->exp.operands[1]), op1),
        ((op0)->exp.operands[2]));
 }
    default:
      switch (((enum tree_code) (op1)->common.code))
 {
 case POLYNOMIAL_CHREC:
   if (code == PLUS_EXPR)
     return build_polynomial_chrec
       ((((((op1)->exp.operands[0]))->int_cst.int_cst).low),
        chrec_fold_plus (type, op0, ((op1)->exp.operands[1])),
        ((op1)->exp.operands[2]));
   else
     return build_polynomial_chrec
       ((((((op1)->exp.operands[0]))->int_cst.int_cst).low),
        chrec_fold_minus (type, op0, ((op1)->exp.operands[1])),
        chrec_fold_multiply (type, ((op1)->exp.operands[2]),
        convert (type,
          global_trees[TI_INTEGER_MINUS_ONE])));
 default:
   if (tree_contains_chrecs (op0)
       || tree_contains_chrecs (op1))
     return build (code, type, op0, op1);
   else
     return fold (build (code, type, op0, op1));
 }
    }
}
tree
chrec_fold_plus (tree type,
   tree op0,
   tree op1)
{
  if (integer_zerop (op0))
    return op1;
  if (integer_zerop (op1))
    return op0;
  return chrec_fold_plus_1 (PLUS_EXPR, type, op0, op1);
}
tree
chrec_fold_minus (tree type,
    tree op0,
    tree op1)
{
  if (integer_zerop (op1))
    return op0;
  return chrec_fold_plus_1 (MINUS_EXPR, type, op0, op1);
}
tree
chrec_fold_multiply (tree type,
       tree op0,
       tree op1)
{
  if (automatically_generated_chrec_p (op0)
      || automatically_generated_chrec_p (op1))
    return chrec_fold_automatically_generated_operands (op0, op1);
  switch (((enum tree_code) (op0)->common.code))
    {
    case POLYNOMIAL_CHREC:
      switch (((enum tree_code) (op1)->common.code))
 {
 case POLYNOMIAL_CHREC:
   return chrec_fold_multiply_poly_poly (type, op0, op1);
 default:
   if (integer_onep (op1))
     return op0;
   if (integer_zerop (op1))
     return convert (type, global_trees[TI_INTEGER_ZERO]);
   return build_polynomial_chrec
     ((((((op0)->exp.operands[0]))->int_cst.int_cst).low),
      chrec_fold_multiply (type, ((op0)->exp.operands[1]), op1),
      chrec_fold_multiply (type, ((op0)->exp.operands[2]), op1));
 }
    default:
      if (integer_onep (op0))
 return op1;
      if (integer_zerop (op0))
 return convert (type, global_trees[TI_INTEGER_ZERO]);
      switch (((enum tree_code) (op1)->common.code))
 {
 case POLYNOMIAL_CHREC:
   return build_polynomial_chrec
     ((((((op1)->exp.operands[0]))->int_cst.int_cst).low),
      chrec_fold_multiply (type, ((op1)->exp.operands[1]), op0),
      chrec_fold_multiply (type, ((op1)->exp.operands[2]), op0));
 default:
   if (integer_onep (op1))
     return op0;
   if (integer_zerop (op1))
     return convert (type, global_trees[TI_INTEGER_ZERO]);
   return fold (build (MULT_EXPR, type, op0, op1));
 }
    }
}
static tree
tree_fold_factorial (tree f)
{
  if (tree_int_cst_sgn (f) <= 0)
    return global_trees[TI_INTEGER_ONE];
  else
    return fold
      (build (MULT_EXPR, integer_types[itk_int], f,
       tree_fold_factorial (fold (build (MINUS_EXPR, integer_types[itk_int],
      f, global_trees[TI_INTEGER_ONE])))));
}
static tree
tree_fold_binomial (tree n,
      tree k)
{
  return fold
    (build (EXACT_DIV_EXPR, integer_types[itk_int], tree_fold_factorial (n),
     fold (build (MULT_EXPR, integer_types[itk_int],
    tree_fold_factorial (k),
    tree_fold_factorial
    (fold (build (MINUS_EXPR, integer_types[itk_int],
           n, k)))))));
}
static tree
chrec_evaluate (unsigned var,
  tree chrec,
  tree n,
  tree k)
{
  tree type = chrec_type (chrec);
  tree binomial_n_k = tree_fold_binomial (n, k);
  if (((enum tree_code) (chrec)->common.code) == POLYNOMIAL_CHREC)
    {
      if ((((((chrec)->exp.operands[0]))->int_cst.int_cst).low) > var)
 return chrec_evaluate (var, ((chrec)->exp.operands[1]), n, k);
      if ((((((chrec)->exp.operands[0]))->int_cst.int_cst).low) == var)
 return chrec_fold_plus
   (type,
    fold (build (MULT_EXPR, type, binomial_n_k, ((chrec)->exp.operands[1]))),
    chrec_evaluate (var, ((chrec)->exp.operands[2]), n,
      fold (build (PLUS_EXPR, type, k, global_trees[TI_INTEGER_ONE]))));
      return fold (build (MULT_EXPR, type, binomial_n_k, chrec));
    }
  else
    return fold (build (MULT_EXPR, type, binomial_n_k, chrec));
}
tree
chrec_apply (unsigned var,
      tree chrec,
      tree x)
{
  tree type = chrec_type (chrec);
  tree res = chrec_dont_know;
  if (automatically_generated_chrec_p (chrec)
      || automatically_generated_chrec_p (x)
      || chrec_contains_symbols_defined_in_loop (chrec, var)
      || chrec_contains_symbols (x))
    return chrec_dont_know;
  if (dump_file && (dump_flags & (1 << 3)))
    fprintf (dump_file, "(chrec_apply \n");
  if (evolution_function_is_affine_p (chrec))
    {
      if (((enum tree_code) (((chrec)->exp.operands[1]))->common.code) == INTEGER_CST
   && integer_zerop (((chrec)->exp.operands[1])))
 res = chrec_fold_multiply (type, ((chrec)->exp.operands[2]), x);
      else
 res = chrec_fold_plus (type, ((chrec)->exp.operands[1]),
          chrec_fold_multiply (type,
          ((chrec)->exp.operands[2]), x));
    }
  else if (((enum tree_code) (chrec)->common.code) != POLYNOMIAL_CHREC)
    res = chrec;
  else if (((enum tree_code) (x)->common.code) == INTEGER_CST
    && tree_int_cst_sgn (x) == 1)
    res = chrec_evaluate (var, chrec, x, global_trees[TI_INTEGER_ZERO]);
  else
    res = chrec_dont_know;
  if (dump_file && (dump_flags & (1 << 3)))
    {
      fprintf (dump_file, "  (varying_loop = %d\n", var);
      fprintf (dump_file, ")\n  (chrec = ");
      print_generic_expr (dump_file, chrec, 0);
      fprintf (dump_file, ")\n  (x = ");
      print_generic_expr (dump_file, x, 0);
      fprintf (dump_file, ")\n  (res = ");
      print_generic_expr (dump_file, res, 0);
      fprintf (dump_file, "))\n");
    }
  return res;
}
tree
chrec_replace_initial_condition (tree chrec,
     tree init_cond)
{
  if (automatically_generated_chrec_p (chrec))
    return chrec;
  switch (((enum tree_code) (chrec)->common.code))
    {
    case POLYNOMIAL_CHREC:
      return build_polynomial_chrec
 ((((((chrec)->exp.operands[0]))->int_cst.int_cst).low),
  chrec_replace_initial_condition (((chrec)->exp.operands[1]), init_cond),
  ((chrec)->exp.operands[2]));
    default:
      return init_cond;
    }
}
tree
initial_condition (tree chrec)
{
  if (automatically_generated_chrec_p (chrec))
    return chrec;
  if (((enum tree_code) (chrec)->common.code) == POLYNOMIAL_CHREC)
    return initial_condition (((chrec)->exp.operands[1]));
  else
    return chrec;
}
tree
hide_evolution_in_other_loops_than_loop (tree chrec,
      unsigned loop_num)
{
  if (automatically_generated_chrec_p (chrec))
    return chrec;
  switch (((enum tree_code) (chrec)->common.code))
    {
    case POLYNOMIAL_CHREC:
      if ((((((chrec)->exp.operands[0]))->int_cst.int_cst).low) == loop_num)
 return build_polynomial_chrec
   (loop_num,
    hide_evolution_in_other_loops_than_loop (((chrec)->exp.operands[1]),
          loop_num),
    ((chrec)->exp.operands[2]));
      else if ((((((chrec)->exp.operands[0]))->int_cst.int_cst).low) < loop_num)
 return initial_condition (chrec);
      else
 return hide_evolution_in_other_loops_than_loop (((chrec)->exp.operands[1]),
       loop_num);
    default:
      return chrec;
    }
}
tree
evolution_part_in_loop_num (tree chrec,
       unsigned loop_num)
{
  if (automatically_generated_chrec_p (chrec))
    return chrec;
  switch (((enum tree_code) (chrec)->common.code))
    {
    case POLYNOMIAL_CHREC:
      if ((((((chrec)->exp.operands[0]))->int_cst.int_cst).low) == loop_num)
 {
   if (((enum tree_code) (((chrec)->exp.operands[1]))->common.code) != POLYNOMIAL_CHREC
       || (((((((chrec)->exp.operands[1]))->exp.operands[0]))->int_cst.int_cst).low) != (((((chrec)->exp.operands[0]))->int_cst.int_cst).low))
     return ((chrec)->exp.operands[2]);
   else
     return build_polynomial_chrec
       (loop_num,
        evolution_part_in_loop_num (((chrec)->exp.operands[1]), loop_num),
        ((chrec)->exp.operands[2]));
 }
      else if ((((((chrec)->exp.operands[0]))->int_cst.int_cst).low) < loop_num)
 return (tree) ((void *)0);
      else
 return evolution_part_in_loop_num (((chrec)->exp.operands[1]), loop_num);
    default:
      return (tree) ((void *)0);
    }
}
tree
reset_evolution_in_loop (unsigned loop_num,
    tree chrec,
    tree new_evol)
{
  if (((enum tree_code) (chrec)->common.code) == POLYNOMIAL_CHREC
      && (((((chrec)->exp.operands[0]))->int_cst.int_cst).low) > loop_num)
    return build
      (((enum tree_code) (chrec)->common.code),
       build_int_2_wide ((unsigned long) ((((((chrec)->exp.operands[0]))->int_cst.int_cst).low)), (long) (0)),
       reset_evolution_in_loop (loop_num, ((chrec)->exp.operands[1]), new_evol),
       reset_evolution_in_loop (loop_num, ((chrec)->exp.operands[2]), new_evol));
  while (((enum tree_code) (chrec)->common.code) == POLYNOMIAL_CHREC
  && (((((chrec)->exp.operands[0]))->int_cst.int_cst).low) == loop_num)
    chrec = ((chrec)->exp.operands[1]);
  return build_polynomial_chrec (loop_num, chrec, new_evol);
}
tree
chrec_merge (tree chrec1,
      tree chrec2)
{
  if (chrec1 == chrec_dont_know
      || chrec2 == chrec_dont_know)
    return chrec_dont_know;
  if (chrec1 == chrec_known
      || chrec2 == chrec_known)
    return chrec_known;
  if (chrec1 == chrec_not_analyzed_yet)
    return chrec2;
  if (chrec2 == chrec_not_analyzed_yet)
    return chrec1;
  if (operand_equal_p (chrec1, chrec2, 0))
    return chrec1;
  return chrec_dont_know;
}
static unsigned char
is_multivariate_chrec_rec (tree chrec, unsigned int rec_var)
{
  if (chrec == (tree) ((void *)0))
    return 0;
  if (((enum tree_code) (chrec)->common.code) == POLYNOMIAL_CHREC)
    {
      if ((((((chrec)->exp.operands[0]))->int_cst.int_cst).low) != rec_var)
 return 1;
      else
 return (is_multivariate_chrec_rec (((chrec)->exp.operands[1]), rec_var)
  || is_multivariate_chrec_rec (((chrec)->exp.operands[2]), rec_var));
    }
  else
    return 0;
}
unsigned char
is_multivariate_chrec (tree chrec)
{
  if (chrec == (tree) ((void *)0))
    return 0;
  if (((enum tree_code) (chrec)->common.code) == POLYNOMIAL_CHREC)
    return (is_multivariate_chrec_rec (((chrec)->exp.operands[1]),
           (((((chrec)->exp.operands[0]))->int_cst.int_cst).low))
     || is_multivariate_chrec_rec (((chrec)->exp.operands[2]),
       (((((chrec)->exp.operands[0]))->int_cst.int_cst).low)));
  else
    return 0;
}
unsigned char
chrec_contains_symbols (tree chrec)
{
  if (chrec == (tree) ((void *)0))
    return 0;
  if (((enum tree_code) (chrec)->common.code) == SSA_NAME
      || ((enum tree_code) (chrec)->common.code) == VAR_DECL
      || ((enum tree_code) (chrec)->common.code) == PARM_DECL
      || ((enum tree_code) (chrec)->common.code) == FUNCTION_DECL
      || ((enum tree_code) (chrec)->common.code) == LABEL_DECL
      || ((enum tree_code) (chrec)->common.code) == RESULT_DECL
      || ((enum tree_code) (chrec)->common.code) == FIELD_DECL)
    return 1;
  switch (tree_code_length[(int) (((enum tree_code) (chrec)->common.code))])
    {
    case 3:
      if (chrec_contains_symbols (((chrec)->exp.operands[2])))
 return 1;
    case 2:
      if (chrec_contains_symbols (((chrec)->exp.operands[1])))
 return 1;
    case 1:
      if (chrec_contains_symbols (((chrec)->exp.operands[0])))
 return 1;
    default:
      return 0;
    }
}
unsigned char
chrec_contains_undetermined (tree chrec)
{
  if (chrec == chrec_dont_know
      || chrec == chrec_not_analyzed_yet
      || chrec == (tree) ((void *)0))
    return 1;
  switch (tree_code_length[(int) (((enum tree_code) (chrec)->common.code))])
    {
    case 3:
      if (chrec_contains_undetermined (((chrec)->exp.operands[2])))
 return 1;
    case 2:
      if (chrec_contains_undetermined (((chrec)->exp.operands[1])))
 return 1;
    case 1:
      if (chrec_contains_undetermined (((chrec)->exp.operands[0])))
 return 1;
    default:
      return 0;
    }
}
unsigned char
tree_contains_chrecs (tree expr)
{
  if (expr == (tree) ((void *)0))
    return 0;
  if (tree_is_chrec (expr))
    return 1;
  switch (tree_code_length[(int) (((enum tree_code) (expr)->common.code))])
    {
    case 3:
      if (tree_contains_chrecs (((expr)->exp.operands[2])))
 return 1;
    case 2:
      if (tree_contains_chrecs (((expr)->exp.operands[1])))
 return 1;
    case 1:
      if (tree_contains_chrecs (((expr)->exp.operands[0])))
 return 1;
    default:
      return 0;
    }
}
unsigned char
evolution_function_is_affine_multivariate_p (tree chrec)
{
  if (chrec == (tree) ((void *)0))
    return 0;
  switch (((enum tree_code) (chrec)->common.code))
    {
    case POLYNOMIAL_CHREC:
      if (evolution_function_is_constant_p (((chrec)->exp.operands[1])))
 {
   if (evolution_function_is_constant_p (((chrec)->exp.operands[2])))
     return 1;
   else
     {
       if (((enum tree_code) (((chrec)->exp.operands[2]))->common.code) == POLYNOMIAL_CHREC
    && (((((((chrec)->exp.operands[2]))->exp.operands[0]))->int_cst.int_cst).low)
       != (((((chrec)->exp.operands[0]))->int_cst.int_cst).low)
    && evolution_function_is_affine_multivariate_p
    (((chrec)->exp.operands[2])))
  return 1;
       else
  return 0;
     }
 }
      else
 {
   if (evolution_function_is_constant_p (((chrec)->exp.operands[2]))
       && ((enum tree_code) (((chrec)->exp.operands[1]))->common.code) == POLYNOMIAL_CHREC
       && (((((((chrec)->exp.operands[1]))->exp.operands[0]))->int_cst.int_cst).low) != (((((chrec)->exp.operands[0]))->int_cst.int_cst).low)
       && evolution_function_is_affine_multivariate_p
       (((chrec)->exp.operands[1])))
     return 1;
   else
     return 0;
 }
    default:
      return 0;
    }
}
unsigned char
evolution_function_is_univariate_p (tree chrec)
{
  if (chrec == (tree) ((void *)0))
    return 1;
  switch (((enum tree_code) (chrec)->common.code))
    {
    case POLYNOMIAL_CHREC:
      switch (((enum tree_code) (((chrec)->exp.operands[1]))->common.code))
 {
 case POLYNOMIAL_CHREC:
   if ((((((chrec)->exp.operands[0]))->int_cst.int_cst).low) != (((((((chrec)->exp.operands[1]))->exp.operands[0]))->int_cst.int_cst).low))
     return 0;
   if (!evolution_function_is_univariate_p (((chrec)->exp.operands[1])))
     return 0;
   break;
 default:
   break;
 }
      switch (((enum tree_code) (((chrec)->exp.operands[2]))->common.code))
 {
 case POLYNOMIAL_CHREC:
   if ((((((chrec)->exp.operands[0]))->int_cst.int_cst).low) != (((((((chrec)->exp.operands[2]))->exp.operands[0]))->int_cst.int_cst).low))
     return 0;
   if (!evolution_function_is_univariate_p (((chrec)->exp.operands[2])))
     return 0;
   break;
 default:
   break;
 }
    default:
      return 1;
    }
}
tree
chrec_convert (tree type,
        tree chrec)
{
  tree ct;
  if (automatically_generated_chrec_p (chrec))
    return chrec;
  ct = chrec_type (chrec);
  if (ct == type)
    return chrec;
  if (((ct)->type.precision) < ((type)->type.precision))
    return count_ev_in_wider_type (type, chrec);
  switch (((enum tree_code) (chrec)->common.code))
    {
    case POLYNOMIAL_CHREC:
      return build_polynomial_chrec ((((((chrec)->exp.operands[0]))->int_cst.int_cst).low),
         chrec_convert (type,
          ((chrec)->exp.operands[1])),
         chrec_convert (type,
          ((chrec)->exp.operands[2])));
    default:
      {
 tree res = convert (type, chrec);
 ((res)->common.public_flag) = 0;
 if (tree_code_type[(int) (((enum tree_code) (res)->common.code))] == 'c')
   ((res)->common.static_flag) = 0;
 return res;
      }
    }
}
tree
chrec_type (tree chrec)
{
  if (automatically_generated_chrec_p (chrec))
    return (tree) ((void *)0);
  return ((chrec)->common.type);
}
extern void initialize_scalar_evolutions_analyzer (void);
void
initialize_scalar_evolutions_analyzer (void)
{
  if (chrec_dont_know == (tree) ((void *)0))
    {
      chrec_not_analyzed_yet = (tree) ((void *)0);
      chrec_dont_know = make_node_stat (SCEV_NOT_KNOWN );
      chrec_known = make_node_stat (SCEV_KNOWN );
      ((chrec_dont_know)->common.type) = (tree) ((void *)0);
      ((chrec_known)->common.type) = (tree) ((void *)0);
    }
}
extern void compute_alignments (void);
extern void init_final (const char *);
extern void app_enable (void);
extern void app_disable (void);
extern int dbr_sequence_length (void);
extern void init_insn_lengths (void);
extern int get_attr_length (rtx);
extern void shorten_branches (rtx);
extern void final_start_function (rtx, FILE *, int);
extern void final_end_function (void);
extern void final (rtx, FILE *, int, int);
extern rtx final_scan_insn (rtx, FILE *, int, int, int, int *);
extern rtx alter_subreg (rtx *);
extern void output_operand_lossage (const char *, ...) ;
extern void output_asm_insn (const char *, rtx *);
extern int insn_current_reference_address (rtx);
extern int label_to_alignment (rtx);
extern void output_asm_label (rtx);
extern void output_address (rtx);
extern void output_addr_const (FILE *, rtx);
extern void asm_fprintf (FILE *file, const char *p, ...)
     ;
extern void split_double (rtx, rtx *, rtx *);
extern int leaf_function_p (void);
extern int final_forward_branch_p (rtx);
extern int only_leaf_regs_used (void);
extern void leaf_renumber_regs_insn (rtx);
extern const char *get_insn_template (int, rtx);
extern int add_weak (tree, const char *, const char *);
extern void allocate_for_life_analysis (void);
extern int regno_clobbered_at_setjmp (int);
extern void text_section (void);
extern void unlikely_text_section (void);
extern void data_section (void);
extern void readonly_data_section (void);
extern int in_text_section (void);
extern int in_unlikely_text_section (void);
extern void bss_section (void);
extern void init_section (void);
extern void fini_section (void);
extern void named_section (tree, const char *, int);
extern void function_section (tree);
extern void mergeable_string_section (tree, unsigned long,
          unsigned int);
extern void mergeable_constant_section (enum machine_mode,
     unsigned long, unsigned int);
extern void declare_weak (tree);
extern void merge_weak (tree, tree);
extern void weak_finish (void);
extern int decode_reg_name (const char *);
extern void make_var_volatile (tree);
extern void assemble_alias (tree, tree);
extern void default_assemble_visibility (tree, int);
extern void assemble_asm (tree);
extern void assemble_start_function (tree, const char *);
extern void assemble_end_function (tree, const char *);
extern void assemble_variable (tree, int, int, int);
extern void assemble_external (tree);
extern void assemble_zeros (unsigned long);
extern void assemble_align (int);
extern void assemble_eh_align (int);
extern void assemble_string (const char *, int);
extern void assemble_external_libcall (rtx);
extern void assemble_label (const char *);
extern void assemble_eh_label (const char *);
extern void assemble_name (FILE *, const char *);
extern const char *integer_asm_op (int, int);
extern void assemble_integer_with_op (const char *, rtx);
extern unsigned char default_assemble_integer (rtx, unsigned int, int);
extern unsigned char assemble_integer (rtx, unsigned, unsigned, int);
extern int get_pool_size (void);
extern void output_constant_pool (const char *, tree);
extern tree initializer_constant_valid_p (tree, tree);
extern void output_constant (tree, unsigned long, unsigned int);
extern rtx final_sequence;
extern FILE *asm_out_file;
extern const char *first_global_object_name;
extern const char *weak_global_object_name;
extern int current_function_is_leaf;
extern int current_function_nothrow;
extern int current_function_sp_is_unchanging;
extern int current_function_uses_only_leaf_regs;
extern FILE *dump_file;
extern rtx current_insn_predicate;
extern rtx current_output_insn;
extern rtx this_is_asm_operands;
extern int size_directive_output;
extern tree last_assemble_variable_decl;
extern unsigned char decl_readonly_section (tree, int);
extern unsigned char decl_readonly_section_1 (tree, int, int);
extern int compute_reloc_for_constant (tree);
extern const char *user_label_prefix;
extern void default_function_pro_epilogue (FILE *, long);
extern void default_exception_section (void);
extern void named_section_eh_frame_section (void);
extern void collect2_eh_frame_section (void);
extern void default_eh_frame_section (void);
extern void no_asm_to_stream (FILE *);
extern unsigned int get_named_section_flags (const char *);
extern unsigned char set_named_section_flags (const char *, unsigned int);
extern void named_section_flags (const char *, unsigned int);
extern unsigned char named_section_first_declaration (const char *);
extern unsigned int default_section_type_flags (tree, const char *, int);
extern unsigned int default_section_type_flags_1 (tree, const char *, int, int);
extern void default_no_named_section (const char *, unsigned int);
extern void default_elf_asm_named_section (const char *, unsigned int);
extern void default_coff_asm_named_section (const char *, unsigned int);
extern void default_pe_asm_named_section (const char *, unsigned int);
extern void default_stabs_asm_out_destructor (rtx, int);
extern void default_named_section_asm_out_destructor (rtx, int);
extern void default_dtor_section_asm_out_destructor (rtx, int);
extern void default_stabs_asm_out_constructor (rtx, int);
extern void default_named_section_asm_out_constructor (rtx, int);
extern void default_ctor_section_asm_out_constructor (rtx, int);
extern void default_select_section (tree, int, unsigned long);
extern void default_elf_select_section (tree, int, unsigned long);
extern void default_elf_select_section_1 (tree, int,
       unsigned long, int);
extern void default_unique_section (tree, int);
extern void default_unique_section_1 (tree, int, int);
extern void default_select_rtx_section (enum machine_mode, rtx,
     unsigned long);
extern void default_elf_select_rtx_section (enum machine_mode, rtx,
         unsigned long);
extern void default_encode_section_info (tree, rtx, int);
extern const char *default_strip_name_encoding (const char *);
extern unsigned char default_binds_local_p (tree);
extern unsigned char default_binds_local_p_1 (tree, int);
extern void default_globalize_label (FILE *, const char *);
extern void default_emit_unwind_label (FILE *, tree, int, int);
extern void default_internal_label (FILE *, const char *, unsigned long);
extern void default_file_start (void);
extern void file_end_indicate_exec_stack (void);
extern unsigned char default_valid_pointer_mode (enum machine_mode);
extern int default_address_cost (rtx);
enum expand_modifier {EXPAND_NORMAL = 0, EXPAND_STACK_PARM = 2, EXPAND_SUM,
        EXPAND_CONST_ADDRESS, EXPAND_INITIALIZER, EXPAND_WRITE,
        EXPAND_MEMORY};
enum direction {none, upward, downward};
struct args_size
{
  long constant;
  tree var;
};
struct locate_and_pad_arg_data
{
  struct args_size size;
  struct args_size offset;
  struct args_size slot_offset;
  struct args_size alignment_pad;
  enum direction where_pad;
};
tree split_complex_types (tree);
tree split_complex_values (tree);
extern unsigned char default_must_pass_in_stack (enum machine_mode, tree);
enum optab_methods
{
  OPTAB_DIRECT,
  OPTAB_LIB,
  OPTAB_WIDEN,
  OPTAB_LIB_WIDEN,
  OPTAB_MUST_WIDEN
};
extern rtx expand_simple_binop (enum machine_mode, enum rtx_code, rtx,
    rtx, rtx, int, enum optab_methods);
extern rtx expand_simple_unop (enum machine_mode, enum rtx_code, rtx, rtx,
          int);
extern int have_insn_for (enum rtx_code, enum machine_mode);
extern void emit_libcall_block (rtx, rtx, rtx, rtx);
extern rtx gen_add2_insn (rtx, rtx);
extern rtx gen_add3_insn (rtx, rtx, rtx);
extern rtx gen_sub2_insn (rtx, rtx);
extern rtx gen_sub3_insn (rtx, rtx, rtx);
extern rtx gen_move_insn (rtx, rtx);
extern int have_add2_insn (rtx, rtx);
extern int have_sub2_insn (rtx, rtx);
extern void emit_cmp_and_jump_insns (rtx, rtx, enum rtx_code, rtx,
         enum machine_mode, int, rtx);
extern void emit_indirect_jump (rtx);
rtx emit_conditional_move (rtx, enum rtx_code, rtx, rtx, enum machine_mode,
      rtx, rtx, enum machine_mode, int);
int can_conditionally_move_p (enum machine_mode mode);
rtx emit_conditional_add (rtx, enum rtx_code, rtx, rtx, enum machine_mode,
     rtx, rtx, enum machine_mode, int);
extern rtx negate_rtx (enum machine_mode, rtx);
extern rtx expand_and (enum machine_mode, rtx, rtx, rtx);
extern rtx emit_store_flag (rtx, enum rtx_code, rtx, rtx, enum machine_mode,
       int, int);
extern rtx emit_store_flag_force (rtx, enum rtx_code, rtx, rtx,
      enum machine_mode, int, int);
extern rtx canonicalize_condition (rtx, rtx, int, rtx *, rtx, int);
extern rtx get_condition (rtx, rtx *, int);
extern rtx gen_cond_trap (enum rtx_code, rtx, rtx, rtx);
extern rtx expand_builtin (tree, rtx, rtx, enum machine_mode, int);
extern tree std_build_builtin_va_list (void);
extern void std_expand_builtin_va_start (tree, rtx);
extern rtx std_expand_builtin_va_arg (tree, tree);
extern rtx expand_builtin_va_arg (tree, tree);
extern rtx default_expand_builtin (tree, rtx, rtx, enum machine_mode, int);
extern void expand_builtin_setjmp_setup (rtx, rtx);
extern void expand_builtin_setjmp_receiver (rtx);
extern void expand_builtin_longjmp (rtx, rtx);
extern rtx expand_builtin_saveregs (void);
extern void expand_builtin_trap (void);
extern tree simplify_builtin_fputs (tree, int, int, tree);
extern tree simplify_builtin_strcpy (tree, tree);
extern tree simplify_builtin_strncpy (tree, tree);
extern void init_expr_once (void);
extern void init_expr (void);
extern void finish_expr_for_function (void);
extern rtx protect_from_queue (rtx, int);
extern void emit_queue (void);
extern int queued_subexp_p (rtx);
extern void convert_move (rtx, rtx, int);
extern rtx convert_to_mode (enum machine_mode, rtx, int);
extern rtx convert_modes (enum machine_mode, enum machine_mode, rtx, int);
enum block_op_methods
{
  BLOCK_OP_NORMAL,
  BLOCK_OP_NO_LIBCALL,
  BLOCK_OP_CALL_PARM
};
extern void init_block_move_fn (const char *);
extern void init_block_clear_fn (const char *);
extern rtx emit_block_move (rtx, rtx, rtx, enum block_op_methods);
extern void move_block_to_reg (int, rtx, int, enum machine_mode);
extern void move_block_from_reg (int, rtx, int);
extern rtx gen_group_rtx (rtx);
extern void emit_group_load (rtx, rtx, tree, int);
extern void emit_group_move (rtx, rtx);
extern void emit_group_store (rtx, rtx, tree, int);
extern rtx copy_blkmode_from_reg (rtx, rtx, tree);
extern void use_reg (rtx *, rtx);
extern void use_regs (rtx *, int, int);
extern void use_group_regs (rtx *, rtx);
extern rtx clear_storage (rtx, rtx);
extern int can_move_by_pieces (unsigned long, unsigned int);
extern int can_store_by_pieces (unsigned long,
    rtx (*) (void *, long,
      enum machine_mode),
    void *, unsigned int);
extern rtx store_by_pieces (rtx, unsigned long,
       rtx (*) (void *, long, enum machine_mode),
       void *, unsigned int, int);
extern rtx emit_move_insn (rtx, rtx);
extern rtx emit_move_insn_1 (rtx, rtx);
extern rtx push_block (rtx, int, int);
extern void emit_push_insn (rtx, enum machine_mode, tree, rtx, unsigned int,
       int, rtx, int, rtx, rtx, int, rtx);
extern rtx expand_assignment (tree, tree, int);
extern rtx store_expr (tree, rtx, int);
extern rtx force_operand (rtx, rtx);
extern rtx expand_expr_real (tree, rtx, enum machine_mode,
        enum expand_modifier, rtx *);
static rtx
expand_expr (tree exp, rtx target, enum machine_mode mode,
      enum expand_modifier modifier)
{
  return expand_expr_real (exp, target, mode, modifier, ((void *)0));
}
extern void expand_var (tree);
extern void init_pending_stack_adjust (void);
extern void clear_pending_stack_adjust (void);
extern void do_pending_stack_adjust (void);
extern tree string_constant (tree, tree *);
extern void jumpifnot (tree, rtx);
extern void jumpif (tree, rtx);
extern void do_jump (tree, rtx, rtx);
extern rtx compare_from_rtx (rtx, rtx, enum rtx_code, int, enum machine_mode,
        rtx);
extern void do_compare_rtx_and_jump (rtx, rtx, enum rtx_code, int,
         enum machine_mode, rtx, rtx, rtx);
extern int try_casesi (tree, tree, tree, tree, rtx, rtx);
extern int try_tablejump (tree, tree, tree, tree, rtx, rtx);
extern unsigned int case_values_threshold (void);
extern long new_alias_set (void);
extern void record_alias_subset (long, long);
extern long get_varargs_alias_set (void);
extern long get_frame_alias_set (void);
extern void record_base_value (unsigned int, rtx, int);
extern int can_address_p (tree);
extern rtx expr_size (tree);
extern long int_expr_size (tree);
extern rtx fix_lexical_addr (rtx, tree);
extern rtx trampoline_address (tree);
extern rtx hard_function_value (tree, tree, int);
extern rtx prepare_call_address (rtx, rtx, rtx *, int, int);
extern rtx expand_call (tree, rtx, int);
extern void fixup_tail_calls (void);
extern rtx expand_shift (enum tree_code, enum machine_mode, rtx, tree, rtx,
    int);
extern rtx expand_divmod (int, enum tree_code, enum machine_mode, rtx, rtx,
     rtx, int);
extern void locate_and_pad_parm (enum machine_mode, tree, int, int, tree,
     struct args_size *,
     struct locate_and_pad_arg_data *);
extern rtx label_rtx (tree);
extern rtx force_label_rtx (tree);
extern rtx promoted_input_arg (unsigned int, enum machine_mode *, int *);
extern rtx eliminate_constant_term (rtx, rtx *);
extern rtx memory_address (enum machine_mode, rtx);
extern rtx memory_address_noforce (enum machine_mode, rtx);
extern rtx change_address (rtx, enum machine_mode, rtx);
extern rtx adjust_address_1 (rtx, enum machine_mode, long, int, int);
extern rtx adjust_automodify_address_1 (rtx, enum machine_mode, rtx,
     long, int);
extern rtx offset_address (rtx, rtx, unsigned long);
extern void set_mem_alias_set (rtx, long);
extern void set_mem_align (rtx, unsigned int);
extern void set_mem_expr (rtx, tree);
extern void set_mem_offset (rtx, rtx);
extern void set_mem_size (rtx, rtx);
extern rtx replace_equiv_address (rtx, rtx);
extern rtx replace_equiv_address_nv (rtx, rtx);
extern rtx widen_memory_access (rtx, enum machine_mode, long);
extern rtx validize_mem (rtx);
extern void maybe_set_unchanging (rtx, tree);
extern void set_mem_attributes (rtx, tree, int);
extern void set_mem_attributes_minus_bitpos (rtx, tree, int, long);
extern rtx assemble_trampoline_template (void);
extern rtx stabilize (rtx);
extern rtx copy_all_regs (rtx);
extern rtx copy_to_reg (rtx);
extern rtx copy_addr_to_reg (rtx);
extern rtx copy_to_mode_reg (enum machine_mode, rtx);
extern rtx copy_to_suggested_reg (rtx, rtx, enum machine_mode);
extern rtx force_reg (enum machine_mode, rtx);
extern rtx force_not_mem (rtx);
extern enum machine_mode promote_mode (tree, enum machine_mode, int *, int);
extern void adjust_stack (rtx);
extern void anti_adjust_stack (rtx);
enum save_level {SAVE_BLOCK, SAVE_FUNCTION, SAVE_NONLOCAL};
extern void emit_stack_save (enum save_level, rtx *, rtx);
extern void emit_stack_restore (enum save_level, rtx, rtx);
extern void update_nonlocal_goto_save_area (void);
extern rtx allocate_dynamic_stack_space (rtx, rtx, int);
extern void probe_stack_range (long, rtx);
extern rtx hard_libcall_value (enum machine_mode);
extern rtx round_push (rtx);
enum extraction_pattern { EP_insv, EP_extv, EP_extzv };
extern enum machine_mode
mode_for_extraction (enum extraction_pattern, int);
extern rtx store_bit_field (rtx, unsigned long,
       unsigned long, enum machine_mode, rtx,
       long);
extern rtx extract_bit_field (rtx, unsigned long,
         unsigned long, int, rtx,
         enum machine_mode, enum machine_mode,
         long);
extern rtx expand_mult (enum machine_mode, rtx, rtx, rtx, int);
extern unsigned char const_mult_add_overflow_p (rtx, rtx, rtx, enum machine_mode, int);
extern rtx expand_mult_add (rtx, rtx, rtx, rtx,enum machine_mode, int);
extern rtx expand_mult_highpart_adjust (enum machine_mode, rtx, rtx, rtx, rtx, int);
extern rtx assemble_static_space (unsigned long);
extern int safe_from_p (rtx, tree, int);
extern void init_optabs (void);
extern void init_all_optabs (void);
extern rtx init_one_libfunc (const char *);
extern void do_jump_by_parts_equality_rtx (rtx, rtx, rtx);
extern void do_jump_by_parts_greater_rtx (enum machine_mode, int, rtx, rtx,
       rtx, rtx);
extern int vector_mode_valid_p (enum machine_mode);
struct timevar_time_def
{
  double user;
  double sys;
  double wall;
};
typedef enum
{
TV_TOTAL,
TV_GC,
TV_DUMP,
TV_CGRAPH,
TV_CGRAPHOPT,
TV_CFG,
TV_CLEANUP_CFG,
TV_CFG_VERIFY,
TV_DELETE_TRIVIALLY_DEAD,
TV_LIFE,
TV_LIFE_UPDATE,
TV_ALIAS_ANALYSIS,
TV_REG_SCAN,
TV_REBUILD_JUMP,
TV_CPP,
TV_LEX,
TV_PARSE,
TV_NAME_LOOKUP,
TV_INTEGRATION,
TV_TREE_GIMPLIFY,
TV_TREE_EH,
TV_TREE_CFG,
TV_TREE_CLEANUP_CFG,
TV_TREE_PTA,
TV_TREE_MAY_ALIAS,
TV_TREE_INSERT_PHI_NODES,
TV_TREE_SSA_REWRITE_BLOCKS,
TV_TREE_SSA_OTHER,
TV_TREE_OPS,
TV_TREE_SSA_DOMINATOR_OPTS,
TV_TREE_SRA,
TV_TREE_CCP,
TV_TREE_SPLIT_EDGES,
TV_TREE_PRE,
TV_TREE_FRE,
TV_TREE_PHIOPT,
TV_TREE_FORWPROP,
TV_TREE_DCE,
TV_TREE_CD_DCE,
TV_TREE_DSE,
TV_TREE_LOOP,
TV_TREE_CH,
TV_TREE_SSA_TO_NORMAL,
TV_TREE_NRV,
TV_TREE_COPY_RENAME,
TV_TREE_SSA_VERIFY,
TV_TREE_STMT_VERIFY,
TV_CGRAPH_VERIFY,
TV_DOM_FRONTIERS,
TV_CONTROL_DEPENDENCES,
TV_OVERLOAD,
TV_TEMPLATE_INSTANTIATION,
TV_EXPAND,
TV_VARCONST,
TV_JUMP,
TV_CSE,
TV_GCSE,
TV_LOOP,
TV_BYPASS,
TV_TRACER,
TV_WEB,
TV_CSE2,
TV_BRANCH_PROB,
TV_VPT,
TV_FLOW,
TV_COMBINE,
TV_IFCVT,
TV_REGMOVE,
TV_MODE_SWITCH,
TV_SMS,
TV_SCHED,
TV_LOCAL_ALLOC,
TV_GLOBAL_ALLOC,
TV_RELOAD_CSE_REGS,
TV_FLOW2,
TV_IFCVT2,
TV_PEEPHOLE2,
TV_RENAME_REGISTERS,
TV_SCHED2,
TV_MACH_DEP,
TV_DBR_SCHED,
TV_REORDER_BLOCKS,
TV_SHORTEN_BRANCH,
TV_REG_STACK,
TV_FINAL,
TV_SYMOUT,
TV_VAR_TRACKING,
TV_REST_OF_COMPILATION,
  TIMEVAR_LAST
}
timevar_id_t;
extern void timevar_init (void);
extern void timevar_push (timevar_id_t);
extern void timevar_pop (timevar_id_t);
extern void timevar_start (timevar_id_t);
extern void timevar_stop (timevar_id_t);
extern void timevar_get (timevar_id_t, struct timevar_time_def *);
extern void timevar_print (FILE *);
extern void print_time (const char *, long);
extern int toplev_main (unsigned int, const char **);
extern int read_integral_parameter (const char *, const char *, const int);
extern void strip_off_ending (char *, int);
extern const char *trim_filename (const char *);
extern void _fatal_insn_not_found (rtx, const char *, int, const char *)
     ;
extern void _fatal_insn (const char *, rtx, const char *, int, const char *)
     ;
extern void internal_error (const char *, ...)
     ;
extern void warning (const char *, ...);
extern void error (const char *, ...);
extern void fatal_error (const char *, ...)
     ;
extern void pedwarn (const char *, ...);
extern void sorry (const char *, ...);
extern void inform (const char *, ...) ;
extern void rest_of_decl_compilation (tree, const char *, int, int);
extern void rest_of_type_compilation (tree, int);
extern void rest_of_compilation (void);
extern void tree_rest_of_compilation (tree, unsigned char);
extern void init_tree_optimization_passes (void);
extern void init_optimization_passes (void);
extern void finish_optimization_passes (void);
extern unsigned char enable_rtl_dump_file (int);
extern void announce_function (tree);
extern void error_for_asm (rtx, const char *, ...) ;
extern void warning_for_asm (rtx, const char *, ...) ;
extern void warn_deprecated_use (tree);
extern void output_quoted_string (FILE *, const char *);
extern void output_file_directive (FILE *, const char *);
extern void fnotice (FILE *, const char *, ...)
     ;
extern int wrapup_global_declarations (tree *, int);
extern void check_global_declarations (tree *, int);
extern void write_global_declarations (void);
extern unsigned local_tick;
extern const char *progname;
extern const char *dump_base_name;
extern const char *aux_base_name;
extern const char *aux_info_file_name;
extern const char *asm_file_name;
extern unsigned char exit_after_options;
extern int target_flags_explicit;
extern int flag_loop_optimize;
extern int flag_crossjumping;
extern int flag_if_conversion;
extern int flag_if_conversion2;
extern int flag_keep_static_consts;
extern int flag_peel_loops;
extern int flag_rerun_cse_after_loop;
extern int flag_thread_jumps;
extern int flag_tracer;
extern int flag_unroll_loops;
extern int flag_unroll_all_loops;
extern int flag_unswitch_loops;
extern int flag_cprop_registers;
extern int time_report;
extern int flag_new_regalloc;
extern int flag_tree_based_profiling;
extern void display_target_options (void);
extern void print_version (FILE *, const char *);
extern void set_target_switch (const char *);
extern void * default_get_pch_validity (size_t *);
extern const char * default_pch_valid_p (const void *, size_t);
extern struct ht *ident_hash;
extern void set_fast_math_flags (int);
extern void decode_d_option (const char *);
extern unsigned char fast_math_flags_set_p (void);
extern int exact_log2_wide (unsigned long);
extern int floor_log2_wide (unsigned long);
extern const char *get_src_pwd (void);
extern unsigned char set_src_pwd (const char *);
struct function;
struct inline_remap;
struct eh_status;
struct eh_region;
extern int doing_eh (int);
extern void expand_eh_region_start (void);
extern void expand_eh_region_end_cleanup (tree);
extern void expand_start_all_catch (void);
extern void expand_start_catch (tree);
extern void expand_end_catch (void);
extern void expand_end_all_catch (void);
extern void expand_eh_region_end_allowed (tree, tree);
extern void expand_eh_region_end_must_not_throw (tree);
extern void expand_eh_region_end_throw (tree);
extern void expand_eh_region_end_fixup (tree);
extern void expand_eh_handler (tree);
extern void note_eh_region_may_contain_throw (struct eh_region *);
extern void note_current_region_may_contain_throw (void);
extern void for_each_eh_label (void (*) (rtx));
extern void for_each_eh_region (void (*) (struct eh_region *));
extern unsigned char can_throw_internal_1 (int);
extern unsigned char can_throw_internal (rtx);
extern unsigned char can_throw_external_1 (int);
extern unsigned char can_throw_external (rtx);
extern void set_nothrow_function_flags (void);
extern void finish_eh_generation (void);
extern void init_eh (void);
extern void init_eh_for_function (void);
extern rtx reachable_handlers (rtx);
extern void maybe_remove_eh_handler (rtx);
extern void convert_from_eh_region_ranges (void);
extern void convert_to_eh_region_ranges (void);
extern void find_exception_handler_labels (void);
extern unsigned char current_function_has_exception_handlers (void);
extern void output_function_exception_table (void);
extern void expand_builtin_unwind_init (void);
extern rtx expand_builtin_eh_return_data_regno (tree);
extern rtx expand_builtin_extract_return_addr (tree);
extern void expand_builtin_init_dwarf_reg_sizes (tree);
extern rtx expand_builtin_frob_return_addr (tree);
extern rtx expand_builtin_dwarf_sp_column (void);
extern void expand_builtin_eh_return (tree, tree);
extern void expand_eh_return (void);
extern rtx expand_builtin_extend_pointer (tree);
extern rtx get_exception_pointer (struct function *);
extern rtx get_exception_filter (struct function *);
extern int duplicate_eh_regions (struct function *, struct inline_remap *);
extern int check_handled (tree, tree);
extern void sjlj_emit_function_exit_after (rtx);
extern struct eh_region *gen_eh_region_cleanup (struct eh_region *,
      struct eh_region *);
extern struct eh_region *gen_eh_region_try (struct eh_region *);
extern struct eh_region *gen_eh_region_catch (struct eh_region *, tree);
extern struct eh_region *gen_eh_region_allowed (struct eh_region *, tree);
extern struct eh_region *gen_eh_region_must_not_throw (struct eh_region *);
extern int get_eh_region_number (struct eh_region *);
extern unsigned char get_eh_region_may_contain_throw (struct eh_region *);
extern tree get_eh_region_tree_label (struct eh_region *);
extern void set_eh_region_tree_label (struct eh_region *, tree);
extern void foreach_reachable_handler (int, unsigned char,
           void (*) (struct eh_region *, void *),
           void *);
extern void collect_eh_region_array (void);
extern void expand_resx_expr (tree);
extern int lookup_stmt_eh_region (tree);
extern tree (*lang_protect_cleanup_actions) (void);
extern int (*lang_eh_type_covers) (tree a, tree b);
extern tree (*lang_eh_runtime_type) (tree);
enum lpt_dec
{
  LPT_NONE,
  LPT_PEEL_COMPLETELY,
  LPT_PEEL_SIMPLE,
  LPT_UNROLL_CONSTANT,
  LPT_UNROLL_RUNTIME,
  LPT_UNROLL_STUPID
};
struct lpt_decision
{
  enum lpt_dec decision;
  unsigned times;
};
struct loop
{
  int num;
  basic_block header1;
  basic_block latch;
  basic_block pre_header;
  struct lpt_decision lpt_decision;
  unsigned ninsns;
  unsigned av_ninsns;
  edge *pre_header_edges;
  int num_pre_header_edges;
  basic_block first;
  basic_block last;
  sbitmap nodes;
  unsigned num_nodes;
  edge *entry_edges;
  int num_entries;
  edge *exit_edges;
  int num_exits;
  sbitmap exits_doms;
  int depth;
  struct loop **pred;
  int level;
  struct loop *outer;
  struct loop *inner;
  struct loop *next;
  struct loop *copy;
  int invalid;
  void *aux;
  rtx vtop;
  rtx cont;
  rtx cont_dominator;
  rtx start;
  rtx end;
  rtx top;
  rtx scan_start;
  rtx sink;
  rtx exit_labels;
  int exit_count;
};
enum
{
  LOOPS_HAVE_PREHEADERS = 1,
  LOOPS_HAVE_SIMPLE_LATCHES = 2,
  LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS = 4
};
struct loops
{
  unsigned num;
  unsigned levels;
  struct loop *array;
  struct loop **parray;
  struct loop *tree_root;
  struct cfg
  {
    int *dfs_order;
    int *rc_order;
  } cfg;
  sbitmap shared_headers;
  int state;
};
extern int flow_loops_find (struct loops *, int flags);
extern int flow_loops_update (struct loops *, int flags);
extern void flow_loops_free (struct loops *);
extern void flow_loops_dump (const struct loops *, FILE *,
        void (*)(const struct loop *, FILE *, int), int);
extern void flow_loop_dump (const struct loop *, FILE *,
       void (*)(const struct loop *, FILE *, int), int);
extern int flow_loop_scan (struct loop *, int);
extern void flow_loop_free (struct loop *);
void mark_irreducible_loops (struct loops *);
extern void create_loop_notes (void);
extern void flow_loop_tree_node_add (struct loop *, struct loop *);
extern void flow_loop_tree_node_remove (struct loop *);
extern unsigned char flow_loop_outside_edge_p (const struct loop *, edge);
extern unsigned char flow_loop_nested_p (const struct loop *, const struct loop *);
extern unsigned char flow_bb_inside_loop_p (const struct loop *, const basic_block);
extern struct loop * find_common_loop (struct loop *, struct loop *);
extern int num_loop_insns (struct loop *);
extern int average_num_loop_insns (struct loop *);
extern unsigned get_loop_level (const struct loop *);
extern basic_block *get_loop_body (const struct loop *);
extern basic_block *get_loop_body_in_dom_order (const struct loop *);
extern edge *get_loop_exit_edges (const struct loop *, unsigned *);
extern unsigned num_loop_branches (const struct loop *);
extern edge loop_preheader_edge (const struct loop *);
extern edge loop_latch_edge (const struct loop *);
extern void add_bb_to_loop (basic_block, struct loop *);
extern void remove_bb_from_loops (basic_block);
extern void cancel_loop (struct loops *, struct loop *);
extern void cancel_loop_tree (struct loops *, struct loop *);
extern basic_block loop_split_edge_with (edge, rtx);
extern int fix_loop_placement (struct loop *);
enum
{
  CP_SIMPLE_PREHEADERS = 1
};
extern void create_preheaders (struct loops *, int);
extern void force_single_succ_latches (struct loops *);
extern void verify_loop_structure (struct loops *);
extern unsigned char just_once_each_iteration_p (struct loop *, basic_block);
extern unsigned expected_loop_iterations (const struct loop *);
extern unsigned char can_duplicate_loop_p (struct loop *loop);
extern int duplicate_loop_to_header_edge (struct loop *, edge, struct loops *,
       unsigned, sbitmap, edge, edge *,
       unsigned *, int);
extern struct loop *loopify (struct loops *, edge, edge, basic_block);
extern void unloop (struct loops *, struct loop *);
extern unsigned char remove_path (struct loops *, edge);
extern edge split_loop_bb (basic_block, rtx);
struct rtx_iv
{
  rtx base, step;
  enum rtx_code extend;
  rtx delta, mult;
  enum machine_mode extend_mode;
  enum machine_mode mode;
  unsigned analysed : 1;
  unsigned first_special : 1;
};
struct niter_desc
{
  edge out_edge;
  edge in_edge;
  unsigned char simple_p;
  unsigned char const_iter;
  unsigned long long niter;
  unsigned long long niter_max;
  rtx assumptions;
  rtx noloop_assumptions;
  rtx infinite;
  unsigned char signed_p;
  enum machine_mode mode;
  rtx niter_expr;
};
extern void iv_analysis_loop_init (struct loop *);
extern rtx iv_get_reaching_def (rtx, rtx);
extern unsigned char iv_analyze (rtx, rtx, struct rtx_iv *);
extern rtx get_iv_value (struct rtx_iv *, rtx);
extern void find_simple_exit (struct loop *, struct niter_desc *);
extern void iv_number_of_iterations (struct loop *, rtx, rtx,
         struct niter_desc *);
extern void iv_analysis_done (void);
extern struct niter_desc *get_simple_loop_desc (struct loop *loop);
extern void free_simple_loop_desc (struct loop *loop);
static struct niter_desc *
simple_loop_desc (struct loop *loop)
{
  return loop->aux;
}
extern unsigned global_cost_for_size (unsigned, unsigned, unsigned);
extern void init_set_costs (void);
extern struct loops *loop_optimizer_init (FILE *);
extern void loop_optimizer_finalize (struct loops *, FILE *);
extern void unswitch_loops (struct loops *);
enum
{
  UAP_PEEL = 1,
  UAP_UNROLL = 2,
  UAP_UNROLL_ALL = 4
};
extern void unroll_and_peel_loops (struct loops *, int);
extern void doloop_optimize_loops (struct loops *);
extern void move_loop_invariants (struct loops *);
static const int initial_cfg_capacity = 20;
static varray_type label_to_block_map;
struct cfg_stats_d
{
  long num_merged_labels;
};
static struct cfg_stats_d cfg_stats;
static unsigned char found_computed_goto;
static basic_block create_bb (void *, void *, basic_block);
static void create_block_annotation (basic_block);
static void free_blocks_annotations (void);
static void clear_blocks_annotations (void);
static void make_blocks (tree);
static void factor_computed_gotos (void);
static void make_cfg_edges (void);
static void make_ctrl_stmt_edges (basic_block);
static void make_exit_edges (basic_block);
static void make_cond_expr_edges (basic_block);
static void make_switch_expr_edges (basic_block);
static void make_goto_expr_edges (basic_block);
static edge tree_redirect_edge_and_branch (edge, basic_block);
static edge tree_try_redirect_by_replacing_jump (edge, basic_block);
static void split_critical_edges (void);
static unsigned char stmt_starts_bb_p (tree, tree);
static int tree_verify_flow_info (void);
static void tree_make_forwarder_block (edge);
static unsigned char thread_jumps (void);
static unsigned char tree_forwarder_block_p (basic_block);
static void bsi_commit_edge_inserts_1 (edge e);
static void tree_cfg2vcg (FILE *);
static void tree_merge_blocks (basic_block, basic_block);
static unsigned char tree_can_merge_blocks_p (basic_block, basic_block);
static void remove_bb (basic_block);
static void group_case_labels (void);
static void cleanup_dead_labels (void);
static unsigned char cleanup_control_flow (void);
static unsigned char cleanup_control_expr_graph (basic_block, block_stmt_iterator);
static edge find_taken_edge_cond_expr (basic_block, tree);
static edge find_taken_edge_switch_expr (basic_block, tree);
static tree find_case_label_for_value (tree, tree);
static unsigned char phi_alternatives_equal (basic_block, edge, edge);
static void
build_tree_cfg (tree *tp)
{
  tree_register_cfg_hooks ();
  alloc_rbi_pool ();
  init_flow ();
  n_basic_blocks = 0;
  last_basic_block = 0;
  basic_block_info = varray_init (initial_cfg_capacity, VARRAY_DATA_BB, "basic_block_info");
  memset ((void *) &cfg_stats, 0, sizeof (cfg_stats));
  label_to_block_map = varray_init (initial_cfg_capacity, VARRAY_DATA_BB, "label to block map")
                         ;
  ENTRY_BLOCK_PTR->next_bb = EXIT_BLOCK_PTR;
  EXIT_BLOCK_PTR->prev_bb = ENTRY_BLOCK_PTR;
  found_computed_goto = 0;
  make_blocks (*tp);
  if (found_computed_goto)
    factor_computed_gotos ();
  if (n_basic_blocks == 0)
    create_empty_bb (ENTRY_BLOCK_PTR);
  create_block_annotation (ENTRY_BLOCK_PTR);
  create_block_annotation (EXIT_BLOCK_PTR);
  ((basic_block_info) = varray_grow (basic_block_info, n_basic_blocks));
  cleanup_dead_labels ();
  group_case_labels ();
  make_cfg_edges ();
  {
    int local_dump_flags;
    FILE *dump_file = dump_begin (TDI_vcg, &local_dump_flags);
    if (dump_file)
      {
 tree_cfg2vcg (dump_file);
 dump_end (TDI_vcg, dump_file);
      }
  }
  if (dump_file)
    dump_tree_cfg (dump_file, dump_flags);
}
static void
execute_build_cfg (void)
{
  build_tree_cfg (&((current_function_decl)->decl.saved_tree));
}
struct tree_opt_pass pass_build_cfg =
{
  "cfg",
  ((void *)0),
  execute_build_cfg,
  ((void *)0),
  ((void *)0),
  0,
  TV_TREE_CFG,
  (1 << 2),
  (1 << 3),
  0,
  0,
  (1 << 5)
};
static void
factor_computed_gotos (void)
{
  basic_block bb;
  tree factored_label_decl = ((void *)0);
  tree var = ((void *)0);
  tree factored_computed_goto_label = ((void *)0);
  tree factored_computed_goto = ((void *)0);
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      block_stmt_iterator bsi = bsi_last (bb);
      tree last;
      if (bsi_end_p (bsi))
 continue;
      last = bsi_stmt (bsi);
      if (last == factored_computed_goto)
 continue;
      if (computed_goto_p (last))
 {
   tree assignment;
   if (! factored_computed_goto)
     {
       basic_block new_bb = create_empty_bb (bb);
       block_stmt_iterator new_bsi = bsi_start (new_bb);
       var = create_tmp_var (global_trees[TI_PTR_TYPE], "gotovar");
       factored_label_decl = create_artificial_label ();
       factored_computed_goto_label
  = build1_stat (LABEL_EXPR,global_trees[TI_VOID_TYPE],factored_label_decl );
       bsi_insert_after (&new_bsi, factored_computed_goto_label,
    BSI_NEW_STMT);
       factored_computed_goto = build1_stat (GOTO_EXPR,global_trees[TI_VOID_TYPE],var );
       bsi_insert_after (&new_bsi, factored_computed_goto,
    BSI_NEW_STMT);
     }
   assignment = build (MODIFY_EXPR, global_trees[TI_PTR_TYPE],
         var, (((last))->exp.operands[0]));
   bsi_insert_before (&bsi, assignment, BSI_SAME_STMT);
   (((last))->exp.operands[0]) = factored_label_decl;
 }
    }
}
static void
create_block_annotation (basic_block bb)
{
  if (bb->tree_annotations)
    fancy_abort ("gcc.c", 99436, "?");
  bb->tree_annotations = ggc_alloc_cleared_stat (sizeof (struct bb_ann_d) );
}
static void free_blocks_annotations (void)
{
  clear_blocks_annotations ();
}
static void
clear_blocks_annotations (void)
{
  basic_block bb;
  for (bb = ENTRY_BLOCK_PTR; bb != ((void *)0); bb = bb->next_bb)
    bb->tree_annotations = ((void *)0);
}
static void
make_blocks (tree stmt_list)
{
  tree_stmt_iterator i = tsi_start (stmt_list);
  tree stmt = ((void *)0);
  unsigned char start_new_block = 1;
  unsigned char first_stmt_of_list = 1;
  basic_block bb = ENTRY_BLOCK_PTR;
  while (!tsi_end_p (i))
    {
      tree prev_stmt;
      prev_stmt = stmt;
      stmt = tsi_stmt (i);
      if (start_new_block || stmt_starts_bb_p (stmt, prev_stmt))
 {
   if (!first_stmt_of_list)
     stmt_list = tsi_split_statement_list_before (&i);
   bb = create_basic_block (stmt_list, ((void *)0), bb);
   start_new_block = 0;
 }
      set_bb_for_stmt (stmt, bb);
      if (computed_goto_p (stmt))
 found_computed_goto = 1;
      if (stmt_ends_bb_p (stmt))
 start_new_block = 1;
      tsi_next (&i);
      first_stmt_of_list = 0;
    }
}
static basic_block
create_bb (void *h, void *e, basic_block after)
{
  basic_block bb;
  if (e)
    fancy_abort ("gcc.c", 99516, "?");
  bb = alloc_block ();
  memset (bb, 0, sizeof (*bb));
  bb->index = last_basic_block;
  bb->flags = 2;
  bb->stmt_list = h ? h : alloc_stmt_list ();
  link_block (bb, after);
  if ((size_t) last_basic_block == ((basic_block_info)->num_elements))
    {
      size_t new_size = last_basic_block + (last_basic_block + 3) / 4;
      ((basic_block_info) = varray_grow (basic_block_info, new_size));
    }
  (((basic_block_info)->data.bb[(last_basic_block)])) = bb;
  create_block_annotation (bb);
  n_basic_blocks++;
  last_basic_block++;
  initialize_bb_rbi (bb);
  return bb;
}
static void
make_cfg_edges (void)
{
  basic_block bb;
  make_edge (ENTRY_BLOCK_PTR, (((basic_block_info)->data.bb[(0)])), 1);
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      tree first = first_stmt (bb);
      tree last = last_stmt (bb);
      if (first)
 {
   if (is_ctrl_stmt (last))
     make_ctrl_stmt_edges (bb);
   if (is_ctrl_altering_stmt (last))
     make_exit_edges (bb);
 }
      if (bb->succ == ((void *)0))
 make_edge (bb, bb->next_bb, 1);
    }
  remove_fake_edges ();
  cleanup_tree_cfg ();
}
static void
make_ctrl_stmt_edges (basic_block bb)
{
  tree last = last_stmt (bb);
  tree first = first_stmt (bb);
  if (((enum tree_code) (first)->common.code) == LABEL_EXPR
      && (((((first))->exp.operands[0]))->decl.nonlocal_flag))
    make_edge (ENTRY_BLOCK_PTR, bb, 2);
  switch (((enum tree_code) (last)->common.code))
    {
    case GOTO_EXPR:
      make_goto_expr_edges (bb);
      break;
    case RETURN_EXPR:
      make_edge (bb, EXIT_BLOCK_PTR, 0);
      break;
    case COND_EXPR:
      make_cond_expr_edges (bb);
      break;
    case SWITCH_EXPR:
      make_switch_expr_edges (bb);
      break;
    case RESX_EXPR:
      make_eh_edges (last);
      if (bb->succ == ((void *)0))
 make_edge (bb, EXIT_BLOCK_PTR, 16);
      break;
    default:
      fancy_abort ("gcc.c", 99639, "?");
    }
}
static void
make_exit_edges (basic_block bb)
{
  tree last = last_stmt (bb);
  if (last == (tree) ((void *)0))
    fancy_abort ("gcc.c", 99654, "?");
  switch (((enum tree_code) (last)->common.code))
    {
    case CALL_EXPR:
      if (((last)->common.side_effects_flag)
   && (cfun->has_nonlocal_label))
 make_goto_expr_edges (bb);
      make_eh_edges (last);
      if (call_expr_flags (last) & (2 | 64))
 {
   make_edge (bb, EXIT_BLOCK_PTR, 16);
   return;
 }
      make_edge (bb, bb->next_bb, 1);
      break;
    case MODIFY_EXPR:
      if (((enum tree_code) (((last)->exp.operands[1]))->common.code) == CALL_EXPR
   && ((((last)->exp.operands[1]))->common.side_effects_flag)
   && (cfun->has_nonlocal_label))
 make_goto_expr_edges (bb);
      make_eh_edges (last);
      make_edge (bb, bb->next_bb, 1);
      break;
    default:
      fancy_abort ("gcc.c", 99701, "?");
    }
}
static void
make_cond_expr_edges (basic_block bb)
{
  tree entry = last_stmt (bb);
  basic_block then_bb, else_bb;
  tree then_label, else_label;
  then_label = (((((((entry))->exp.operands[1]))))->exp.operands[0]);
  else_label = (((((((entry))->exp.operands[2]))))->exp.operands[0]);
  then_bb = label_to_block (then_label);
  else_bb = label_to_block (else_label);
  make_edge (bb, then_bb, 1024);
  make_edge (bb, else_bb, 2048);
}
static void
make_switch_expr_edges (basic_block bb)
{
  tree entry = last_stmt (bb);
  size_t i, n;
  tree vec;
  vec = (((entry))->exp.operands[2]);
  n = ((vec)->vec.length);
  for (i = 0; i < n; ++i)
    {
      tree lab = (((((vec)->vec.a[i])))->exp.operands[2]);
      basic_block label_bb = label_to_block (lab);
      make_edge (bb, label_bb, 0);
    }
}
basic_block
label_to_block (tree dest)
{
  int uid = ((dest)->decl.pointer_alias_set);
  if (((global_dc)->diagnostic_count[(int) (DK_ERROR)] || (global_dc)->diagnostic_count[(int) (DK_SORRY)]) && uid < 0)
    {
      block_stmt_iterator bsi = bsi_start ((((basic_block_info)->data.bb[(0)])));
      tree stmt;
      stmt = build1_stat (LABEL_EXPR,global_trees[TI_VOID_TYPE],dest );
      bsi_insert_before (&bsi, stmt, BSI_NEW_STMT);
      uid = ((dest)->decl.pointer_alias_set);
    }
  return ((label_to_block_map)->data.bb[uid]);
}
static void
make_goto_expr_edges (basic_block bb)
{
  tree goto_t, dest;
  basic_block target_bb;
  int for_call;
  block_stmt_iterator last = bsi_last (bb);
  goto_t = bsi_stmt (last);
  if (((enum tree_code) (goto_t)->common.code) != GOTO_EXPR)
    {
      dest = global_trees[TI_ERROR_MARK];
      for_call = 1;
    }
  else
    {
      dest = (((goto_t))->exp.operands[0]);
      for_call = 0;
      if (simple_goto_p (goto_t))
 {
   edge e = make_edge (bb, label_to_block (dest), 1);
   e->goto_locus = ((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (goto_t)->common.code))])) != 0) ? (goto_t)->exp.locus : (location_t *)((void *)0));
   bsi_remove (&last);
   return;
 }
      if (((enum tree_code) (dest)->common.code) == LABEL_DECL)
 return;
    }
  for (target_bb = ENTRY_BLOCK_PTR->next_bb; target_bb != EXIT_BLOCK_PTR; target_bb = target_bb->next_bb)
    {
      block_stmt_iterator bsi;
      for (bsi = bsi_start (target_bb); !bsi_end_p (bsi); bsi_next (&bsi))
 {
   tree target = bsi_stmt (bsi);
   if (((enum tree_code) (target)->common.code) != LABEL_EXPR)
     break;
   if (
       ((((((target))->exp.operands[0]))->common.side_effects_flag) && for_call == 0)
       || ((((((target))->exp.operands[0]))->decl.nonlocal_flag) && for_call == 1))
     {
       make_edge (bb, target_bb, 2);
       break;
     }
 }
    }
  if (!for_call && !bb->succ)
    make_edge (bb, EXIT_BLOCK_PTR, 16);
}
void
cleanup_tree_cfg (void)
{
  unsigned char something_changed = 1;
  timevar_push (TV_TREE_CLEANUP_CFG);
  while (something_changed)
    {
      something_changed = cleanup_control_flow ();
      something_changed |= thread_jumps ();
      something_changed |= delete_unreachable_blocks ();
    }
  merge_seq_blocks ();
  compact_blocks ();
  timevar_pop (TV_TREE_CLEANUP_CFG);
}
static tree *label_for_bb;
static void
update_eh_label (struct eh_region *region)
{
  tree old_label = get_eh_region_tree_label (region);
  if (old_label)
    {
      tree new_label = label_for_bb[label_to_block (old_label)->index];
      set_eh_region_tree_label (region, new_label);
    }
}
static tree
main_block_label (tree label)
{
  basic_block bb = label_to_block (label);
  if (!label_for_bb[bb->index])
    label_for_bb[bb->index] = label;
  return label_for_bb[bb->index];
}
static void
cleanup_dead_labels (void)
{
  basic_block bb;
  label_for_bb = xcalloc (last_basic_block, sizeof (tree));
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      block_stmt_iterator i;
      for (i = bsi_start (bb); !bsi_end_p (i); bsi_next (&i))
 {
   tree label, stmt = bsi_stmt (i);
   if (((enum tree_code) (stmt)->common.code) != LABEL_EXPR)
     break;
   label = (((stmt))->exp.operands[0]);
   if (! label_for_bb[bb->index])
     {
       label_for_bb[bb->index] = label;
       continue;
     }
   if (! ((label)->decl.artificial_flag)
       && ((label_for_bb[bb->index])->decl.artificial_flag))
     {
       label_for_bb[bb->index] = label;
       break;
     }
 }
    }
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      tree stmt = last_stmt (bb);
      if (!stmt)
 continue;
      switch (((enum tree_code) (stmt)->common.code))
 {
 case COND_EXPR:
   {
     tree true_branch, false_branch;
     true_branch = ((((stmt))->exp.operands[1]));
     false_branch = ((((stmt))->exp.operands[2]));
     (((true_branch))->exp.operands[0])
       = main_block_label ((((true_branch))->exp.operands[0]));
     (((false_branch))->exp.operands[0])
       = main_block_label ((((false_branch))->exp.operands[0]));
     break;
   }
 case SWITCH_EXPR:
   {
     size_t i;
     tree vec = (((stmt))->exp.operands[2]);
     size_t n = ((vec)->vec.length);
     for (i = 0; i < n; ++i)
       (((((vec)->vec.a[i])))->exp.operands[2])
  = main_block_label ((((((vec)->vec.a[i])))->exp.operands[2]));
     break;
   }
 case GOTO_EXPR:
          if (! computed_goto_p (stmt))
     {
       (((stmt))->exp.operands[0])
  = main_block_label ((((stmt))->exp.operands[0]));
       break;
     }
 default:
   break;
      }
    }
  for_each_eh_region (update_eh_label);
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      block_stmt_iterator i;
      tree label_for_this_bb = label_for_bb[bb->index];
      if (! label_for_this_bb)
 continue;
      for (i = bsi_start (bb); !bsi_end_p (i); )
 {
   tree label, stmt = bsi_stmt (i);
   if (((enum tree_code) (stmt)->common.code) != LABEL_EXPR)
     break;
   label = (((stmt))->exp.operands[0]);
   if (label == label_for_this_bb
       || ! ((label)->decl.artificial_flag)
       || ((label)->decl.nonlocal_flag))
     bsi_next (&i);
   else
     bsi_remove (&i);
 }
    }
  free (label_for_bb);
}
static void
group_case_labels (void)
{
  basic_block bb;
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      tree stmt = last_stmt (bb);
      if (stmt && ((enum tree_code) (stmt)->common.code) == SWITCH_EXPR)
 {
   tree labels = (((stmt))->exp.operands[2]);
   int old_size = ((labels)->vec.length);
   int i, j, new_size = old_size;
          i = 0;
   while (i < old_size - 2)
     {
       tree base_case, base_label, base_high, type;
       base_case = ((labels)->vec.a[i]);
       if (! base_case)
  fancy_abort ("gcc.c", 100089, "?");
       type = (((((base_case))->exp.operands[0]))->common.type);
       base_label = (((base_case))->exp.operands[2]);
       base_high = (((base_case))->exp.operands[1]) ?
  (((base_case))->exp.operands[1]) : (((base_case))->exp.operands[0]);
       while (i < old_size - 2)
  {
    tree merge_case = ((labels)->vec.a[++i]);
           tree merge_label = (((merge_case))->exp.operands[2]);
    tree t = int_const_binop (PLUS_EXPR, base_high,
         global_trees[TI_INTEGER_ONE], 1);
    if (merge_label == base_label
        && tree_int_cst_equal ((((merge_case))->exp.operands[0]), t))
      {
        base_high = (((merge_case))->exp.operands[1]) ?
   (((merge_case))->exp.operands[1]) : (((merge_case))->exp.operands[0]);
        (((base_case))->exp.operands[1]) = base_high;
        ((labels)->vec.a[i]) = (tree) ((void *)0);
        new_size--;
      }
    else
      break;
  }
     }
   for (i = 0, j = 0; i < new_size; i++)
     {
       while (! ((labels)->vec.a[j]))
  j++;
       ((labels)->vec.a[i]) = ((labels)->vec.a[j++]);
     }
   ((labels)->vec.length) = new_size;
 }
    }
}
static unsigned char
tree_can_merge_blocks_p (basic_block a, basic_block b)
{
  tree stmt;
  block_stmt_iterator bsi;
  if (!a->succ
      || a->succ->succ_next)
    return 0;
  if (a->succ->flags & 2)
    return 0;
  if (a->succ->dest != b)
    return 0;
  if (b == EXIT_BLOCK_PTR)
    return 0;
  if (b->pred->pred_next)
    return 0;
  stmt = last_stmt (a);
  if (stmt && stmt_ends_bb_p (stmt))
    return 0;
  if (stmt && ((enum tree_code) (stmt)->common.code) == LABEL_EXPR
      && (((((stmt))->exp.operands[0]))->decl.nonlocal_flag))
    return 0;
  if (phi_nodes (b))
    return 0;
  for (bsi = bsi_start (b); !bsi_end_p (bsi); bsi_next (&bsi))
    {
      stmt = bsi_stmt (bsi);
      if (((enum tree_code) (stmt)->common.code) != LABEL_EXPR)
 break;
      if (!(((((stmt))->exp.operands[0]))->decl.artificial_flag))
 return 0;
    }
  return 1;
}
static void
tree_merge_blocks (basic_block a, basic_block b)
{
  block_stmt_iterator bsi;
  tree_stmt_iterator last;
  if (dump_file)
    fprintf (dump_file, "Merging blocks %d and %d\n", a->index, b->index);
  move_block_after (b, a);
  if (!(a->succ->flags & 1))
    fancy_abort ("gcc.c", 100204, "?");
  if (last_stmt (a)
      && stmt_ends_bb_p (last_stmt (a)))
    fancy_abort ("gcc.c", 100208, "?");
  for (bsi = bsi_start (b); !bsi_end_p (bsi);)
    {
      if (((enum tree_code) (bsi_stmt (bsi))->common.code) == LABEL_EXPR)
 bsi_remove (&bsi);
      else
 {
   set_bb_for_stmt (bsi_stmt (bsi), a);
   bsi_next (&bsi);
 }
    }
  last = tsi_last (a->stmt_list);
  tsi_link_after (&last, b->stmt_list, TSI_NEW_STMT);
  b->stmt_list = ((void *)0);
}
struct rus_data
{
  tree *last_goto;
  unsigned char repeat;
  unsigned char may_throw;
  unsigned char may_branch;
  unsigned char has_label;
};
static void remove_useless_stmts_1 (tree *, struct rus_data *);
static unsigned char
remove_useless_stmts_warn_notreached (tree stmt)
{
  if ((((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (stmt)->common.code))])) != 0) ? (stmt)->exp.locus : (location_t *)((void *)0)) != ((void *)0)))
    {
      location_t loc = ((((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (stmt)->common.code))])) != 0) ? (stmt)->exp.locus : (location_t *)((void *)0)) != ((void *)0)) ? *(stmt)->exp.locus : unknown_location);
      warning ("%Hwill never be executed", &loc);
      return 1;
    }
  switch (((enum tree_code) (stmt)->common.code))
    {
    case STATEMENT_LIST:
      {
 tree_stmt_iterator i;
 for (i = tsi_start (stmt); !tsi_end_p (i); tsi_next (&i))
   if (remove_useless_stmts_warn_notreached (tsi_stmt (i)))
     return 1;
      }
      break;
    case COND_EXPR:
      if (remove_useless_stmts_warn_notreached (((((stmt))->exp.operands[0]))))
 return 1;
      if (remove_useless_stmts_warn_notreached (((((stmt))->exp.operands[1]))))
 return 1;
      if (remove_useless_stmts_warn_notreached (((((stmt))->exp.operands[2]))))
 return 1;
      break;
    case TRY_FINALLY_EXPR:
    case TRY_CATCH_EXPR:
      if (remove_useless_stmts_warn_notreached (((stmt)->exp.operands[0])))
 return 1;
      if (remove_useless_stmts_warn_notreached (((stmt)->exp.operands[1])))
 return 1;
      break;
    case CATCH_EXPR:
      return remove_useless_stmts_warn_notreached ((((stmt))->exp.operands[1]));
    case EH_FILTER_EXPR:
      return remove_useless_stmts_warn_notreached ((((stmt))->exp.operands[1]));
    case BIND_EXPR:
      return remove_useless_stmts_warn_notreached (((((stmt))->exp.operands[2])));
    default:
      break;
    }
  return 0;
}
static void
remove_useless_stmts_cond (tree *stmt_p, struct rus_data *data)
{
  tree then_clause, else_clause, cond;
  unsigned char save_has_label, then_has_label, else_has_label;
  save_has_label = data->has_label;
  data->has_label = 0;
  data->last_goto = ((void *)0);
  remove_useless_stmts_1 (&((((*stmt_p))->exp.operands[1])), data);
  then_has_label = data->has_label;
  data->has_label = 0;
  data->last_goto = ((void *)0);
  remove_useless_stmts_1 (&((((*stmt_p))->exp.operands[2])), data);
  else_has_label = data->has_label;
  data->has_label = save_has_label | then_has_label | else_has_label;
  fold_stmt (stmt_p);
  then_clause = ((((*stmt_p))->exp.operands[1]));
  else_clause = ((((*stmt_p))->exp.operands[2]));
  cond = ((((*stmt_p))->exp.operands[0]));
  if (!((then_clause)->common.side_effects_flag) && !((else_clause)->common.side_effects_flag))
    {
      *stmt_p = build_empty_stmt ();
      data->repeat = 1;
    }
  else if (integer_nonzerop (cond) && !else_has_label)
    {
      if (warn_notreached)
 remove_useless_stmts_warn_notreached (else_clause);
      *stmt_p = then_clause;
      data->repeat = 1;
    }
  else if (integer_zerop (cond) && !then_has_label)
    {
      if (warn_notreached)
 remove_useless_stmts_warn_notreached (then_clause);
      *stmt_p = else_clause;
      data->repeat = 1;
    }
  else
    {
      tree then_stmt = expr_only (then_clause);
      tree else_stmt = expr_only (else_clause);
      if (then_stmt && else_stmt
   && ((enum tree_code) (then_stmt)->common.code) == GOTO_EXPR
   && ((enum tree_code) (else_stmt)->common.code) == GOTO_EXPR
   && ((((then_stmt))->exp.operands[0]) == (((else_stmt))->exp.operands[0])))
 {
   *stmt_p = then_stmt;
   data->repeat = 1;
 }
      else if (((enum tree_code) (cond)->common.code) == VAR_DECL || ((enum tree_code) (cond)->common.code) == PARM_DECL)
 {
   if (else_stmt
       && ((enum tree_code) (else_stmt)->common.code) == MODIFY_EXPR
       && ((else_stmt)->exp.operands[0]) == cond
       && integer_zerop (((else_stmt)->exp.operands[1])))
     ((((*stmt_p))->exp.operands[2])) = alloc_stmt_list ();
 }
      else if ((((enum tree_code) (cond)->common.code) == EQ_EXPR || ((enum tree_code) (cond)->common.code) == NE_EXPR)
        && (((enum tree_code) (((cond)->exp.operands[0]))->common.code) == VAR_DECL
     || ((enum tree_code) (((cond)->exp.operands[0]))->common.code) == PARM_DECL)
        && ((((cond)->exp.operands[1]))->common.constant_flag))
 {
   tree stmt = (((enum tree_code) (cond)->common.code) == EQ_EXPR
         ? then_stmt : else_stmt);
   tree *location = (((enum tree_code) (cond)->common.code) == EQ_EXPR
       ? &((((*stmt_p))->exp.operands[1]))
       : &((((*stmt_p))->exp.operands[2])));
   if (stmt
       && ((enum tree_code) (stmt)->common.code) == MODIFY_EXPR
       && ((stmt)->exp.operands[0]) == ((cond)->exp.operands[0])
       && ((stmt)->exp.operands[1]) == ((cond)->exp.operands[1]))
     *location = alloc_stmt_list ();
 }
    }
  data->last_goto = ((void *)0);
}
static void
remove_useless_stmts_tf (tree *stmt_p, struct rus_data *data)
{
  unsigned char save_may_branch, save_may_throw;
  unsigned char this_may_branch, this_may_throw;
  save_may_branch = data->may_branch;
  save_may_throw = data->may_throw;
  data->may_branch = 0;
  data->may_throw = 0;
  data->last_goto = ((void *)0);
  remove_useless_stmts_1 (&((*stmt_p)->exp.operands[0]), data);
  this_may_branch = data->may_branch;
  this_may_throw = data->may_throw;
  data->may_branch |= save_may_branch;
  data->may_throw |= save_may_throw;
  data->last_goto = ((void *)0);
  remove_useless_stmts_1 (&((*stmt_p)->exp.operands[1]), data);
  if (!((((*stmt_p)->exp.operands[0]))->common.side_effects_flag))
    {
      *stmt_p = ((*stmt_p)->exp.operands[1]);
      data->repeat = 1;
    }
  else if (!((((*stmt_p)->exp.operands[1]))->common.side_effects_flag))
    {
      *stmt_p = ((*stmt_p)->exp.operands[0]);
      data->repeat = 1;
    }
  else if (!this_may_branch && !this_may_throw)
    {
      tree stmt = *stmt_p;
      *stmt_p = ((stmt)->exp.operands[0]);
      append_to_statement_list (((stmt)->exp.operands[1]), stmt_p);
      data->repeat = 1;
    }
}
static void
remove_useless_stmts_tc (tree *stmt_p, struct rus_data *data)
{
  unsigned char save_may_throw, this_may_throw;
  tree_stmt_iterator i;
  tree stmt;
  save_may_throw = data->may_throw;
  data->may_throw = 0;
  data->last_goto = ((void *)0);
  remove_useless_stmts_1 (&((*stmt_p)->exp.operands[0]), data);
  this_may_throw = data->may_throw;
  data->may_throw = save_may_throw;
  if (!this_may_throw)
    {
      if (warn_notreached)
 remove_useless_stmts_warn_notreached (((*stmt_p)->exp.operands[1]));
      *stmt_p = ((*stmt_p)->exp.operands[0]);
      data->repeat = 1;
      return;
    }
  this_may_throw = 1;
  i = tsi_start (((*stmt_p)->exp.operands[1]));
  stmt = tsi_stmt (i);
  data->last_goto = ((void *)0);
  switch (((enum tree_code) (stmt)->common.code))
    {
    case CATCH_EXPR:
      for (; !tsi_end_p (i); tsi_next (&i))
 {
   stmt = tsi_stmt (i);
   if ((((stmt))->exp.operands[0]) == ((void *)0))
     this_may_throw = 0;
   data->last_goto = ((void *)0);
   remove_useless_stmts_1 (&(((stmt))->exp.operands[1]), data);
 }
      break;
    case EH_FILTER_EXPR:
      if ((((stmt))->common.static_flag))
 this_may_throw = 0;
      else if ((((stmt))->exp.operands[0]) == ((void *)0))
 this_may_throw = 0;
      remove_useless_stmts_1 (&(((stmt))->exp.operands[1]), data);
      break;
    default:
      remove_useless_stmts_1 (&((*stmt_p)->exp.operands[1]), data);
      if (!((((*stmt_p)->exp.operands[1]))->common.side_effects_flag))
 {
   *stmt_p = ((*stmt_p)->exp.operands[0]);
   data->repeat = 1;
 }
      break;
    }
  data->may_throw |= this_may_throw;
}
static void
remove_useless_stmts_bind (tree *stmt_p, struct rus_data *data)
{
  tree block;
  remove_useless_stmts_1 (&((((*stmt_p))->exp.operands[1])), data);
  block = ((((*stmt_p))->exp.operands[2]));
  if (((((*stmt_p))->exp.operands[0])) == (tree) ((void *)0)
      && *stmt_p != ((current_function_decl)->decl.saved_tree)
      && (! block
   || ! ((block)->block.abstract_origin)
   || (((enum tree_code) (((block)->block.abstract_origin))->common.code)
       != FUNCTION_DECL)))
    {
      *stmt_p = ((((*stmt_p))->exp.operands[1]));
      data->repeat = 1;
    }
}
static void
remove_useless_stmts_goto (tree *stmt_p, struct rus_data *data)
{
  tree dest = (((*stmt_p))->exp.operands[0]);
  data->may_branch = 1;
  data->last_goto = ((void *)0);
  if (((enum tree_code) (dest)->common.code) == LABEL_DECL)
    data->last_goto = stmt_p;
}
static void
remove_useless_stmts_label (tree *stmt_p, struct rus_data *data)
{
  tree label = (((*stmt_p))->exp.operands[0]);
  data->has_label = 1;
  if (((label)->decl.nonlocal_flag))
    data->last_goto = ((void *)0);
  else if (data->last_goto && (((*data->last_goto))->exp.operands[0]) == label)
    {
      *data->last_goto = build_empty_stmt ();
      data->repeat = 1;
    }
}
static void
update_call_expr_flags (tree call)
{
  tree decl = get_callee_fndecl (call);
  if (!decl)
    return;
  if (call_expr_flags (call) & (1 | 256))
    ((call)->common.side_effects_flag) = 0;
  if (((decl)->common.nothrow_flag))
    ((call)->common.nothrow_flag) = 1;
}
void
notice_special_calls (tree t)
{
  int flags = call_expr_flags (t);
  if (flags & 8)
    (cfun->calls_alloca) = 1;
  if (flags & 32)
    (cfun->calls_setjmp) = 1;
}
void
clear_special_calls (void)
{
  (cfun->calls_alloca) = 0;
  (cfun->calls_setjmp) = 0;
}
static void
remove_useless_stmts_1 (tree *tp, struct rus_data *data)
{
  tree t = *tp;
  switch (((enum tree_code) (t)->common.code))
    {
    case COND_EXPR:
      remove_useless_stmts_cond (tp, data);
      break;
    case TRY_FINALLY_EXPR:
      remove_useless_stmts_tf (tp, data);
      break;
    case TRY_CATCH_EXPR:
      remove_useless_stmts_tc (tp, data);
      break;
    case BIND_EXPR:
      remove_useless_stmts_bind (tp, data);
      break;
    case GOTO_EXPR:
      remove_useless_stmts_goto (tp, data);
      break;
    case LABEL_EXPR:
      remove_useless_stmts_label (tp, data);
      break;
    case RETURN_EXPR:
      fold_stmt (tp);
      data->last_goto = ((void *)0);
      data->may_branch = 1;
      break;
    case CALL_EXPR:
      fold_stmt (tp);
      data->last_goto = ((void *)0);
      notice_special_calls (t);
      update_call_expr_flags (t);
      if (tree_could_throw_p (t))
 data->may_throw = 1;
      break;
    case MODIFY_EXPR:
      data->last_goto = ((void *)0);
      fold_stmt (tp);
      if (((enum tree_code) (((t)->exp.operands[1]))->common.code) == CALL_EXPR)
 {
   update_call_expr_flags (((t)->exp.operands[1]));
   notice_special_calls (((t)->exp.operands[1]));
 }
      if (tree_could_throw_p (t))
 data->may_throw = 1;
      break;
    case STATEMENT_LIST:
      {
 tree_stmt_iterator i = tsi_start (t);
 while (!tsi_end_p (i))
   {
     t = tsi_stmt (i);
     if ((((enum tree_code) (t)->common.code) == NOP_EXPR && (((enum tree_code) (((t)->common.type))->common.code) == VOID_TYPE) && integer_zerop (((t)->exp.operands[0]))))
       {
  tsi_delink (&i);
  continue;
       }
     remove_useless_stmts_1 (tsi_stmt_ptr (i), data);
     t = tsi_stmt (i);
     if (((enum tree_code) (t)->common.code) == STATEMENT_LIST)
       {
  tsi_link_before (&i, t, TSI_SAME_STMT);
  tsi_delink (&i);
       }
     else
       tsi_next (&i);
   }
      }
      break;
    case SWITCH_EXPR:
      fold_stmt (tp);
      data->last_goto = ((void *)0);
      break;
    default:
      data->last_goto = ((void *)0);
      break;
    }
}
static void
remove_useless_stmts (void)
{
  struct rus_data data;
  clear_special_calls ();
  do
    {
      memset (&data, 0, sizeof (data));
      remove_useless_stmts_1 (&((current_function_decl)->decl.saved_tree), &data);
    }
  while (data.repeat);
}
struct tree_opt_pass pass_remove_useless_stmts =
{
  "useless",
  ((void *)0),
  remove_useless_stmts,
  ((void *)0),
  ((void *)0),
  0,
  0,
  (1 << 0),
  0,
  0,
  0,
  (1 << 0)
};
static void
cfg_remove_useless_stmts_bb (basic_block bb)
{
  block_stmt_iterator bsi;
  tree stmt = (tree) ((void *)0);
  tree cond, var = (tree) ((void *)0), val = (tree) ((void *)0);
  struct var_ann_d *ann;
  if (!bb->pred
      || bb->pred->pred_next
      || !(bb->pred->flags & (1024 | 2048)))
    return;
  cond = ((((last_stmt (bb->pred->src)))->exp.operands[0]));
  if (((enum tree_code) (cond)->common.code) == VAR_DECL || ((enum tree_code) (cond)->common.code) == PARM_DECL)
    {
      var = cond;
      val = (bb->pred->flags & 2048
      ? global_trees[TI_BOOLEAN_FALSE] : global_trees[TI_BOOLEAN_TRUE]);
    }
  else if (((enum tree_code) (cond)->common.code) == TRUTH_NOT_EXPR
    && (((enum tree_code) (((cond)->exp.operands[0]))->common.code) == VAR_DECL
        || ((enum tree_code) (((cond)->exp.operands[0]))->common.code) == PARM_DECL))
    {
      var = ((cond)->exp.operands[0]);
      val = (bb->pred->flags & 2048
      ? global_trees[TI_BOOLEAN_TRUE] : global_trees[TI_BOOLEAN_FALSE]);
    }
  else
    {
      if (bb->pred->flags & 2048)
 cond = invert_truthvalue (cond);
      if (((enum tree_code) (cond)->common.code) == EQ_EXPR
   && (((enum tree_code) (((cond)->exp.operands[0]))->common.code) == VAR_DECL
       || ((enum tree_code) (((cond)->exp.operands[0]))->common.code) == PARM_DECL)
   && (((enum tree_code) (((cond)->exp.operands[1]))->common.code) == VAR_DECL
       || ((enum tree_code) (((cond)->exp.operands[1]))->common.code) == PARM_DECL
       || ((((cond)->exp.operands[1]))->common.constant_flag)))
 {
   var = ((cond)->exp.operands[0]);
   val = ((cond)->exp.operands[1]);
 }
      else
 return;
    }
  ann = var_ann (var);
  if (!ann
      || ann->may_aliases
      || ((var)->common.addressable_flag))
    return;
  if (! ((val)->common.constant_flag))
    {
      ann = var_ann (val);
      if (!ann
   || ann->may_aliases
   || ((val)->common.addressable_flag))
 return;
    }
  if (((((enum tree_code) (((var)->common.type))->common.code) == REAL_TYPE) || (((enum tree_code) (((var)->common.type))->common.code) == COMPLEX_TYPE && ((enum tree_code) (((((var)->common.type))->common.type))->common.code) == REAL_TYPE)))
    return;
  for (bsi = bsi_start (bb); !bsi_end_p (bsi);)
    {
      stmt = bsi_stmt (bsi);
      if (((enum tree_code) (stmt)->common.code) == MODIFY_EXPR
   && ((stmt)->exp.operands[0]) == var
   && operand_equal_p (val, ((stmt)->exp.operands[1]), 0))
 {
   bsi_remove (&bsi);
   continue;
 }
      if (((enum tree_code) (stmt)->common.code) == ASM_EXPR
   || ((enum tree_code) (stmt)->common.code) == VA_ARG_EXPR
   || (((enum tree_code) (stmt)->common.code) == MODIFY_EXPR
       && (((stmt)->exp.operands[0]) == var
    || ((stmt)->exp.operands[0]) == val
    || ((enum tree_code) (((stmt)->exp.operands[1]))->common.code) == VA_ARG_EXPR)))
 return;
      bsi_next (&bsi);
    }
}
void
cfg_remove_useless_stmts (void)
{
  basic_block bb;
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      cfg_remove_useless_stmts_bb (bb);
    }
}
static void
remove_phi_nodes_and_edges_for_unreachable_block (basic_block bb)
{
  tree phi;
  phi = phi_nodes (bb);
  while (phi)
    {
      tree next = (((phi))->common.chain);
      remove_phi_node (phi, (tree) ((void *)0), bb);
      phi = next;
    }
  while (bb->succ != ((void *)0))
    ssa_remove_edge (bb->succ);
}
static void
remove_bb (basic_block bb)
{
  block_stmt_iterator i;
  source_locus loc = 0;
  if (dump_file)
    {
      fprintf (dump_file, "Removing basic block %d\n", bb->index);
      if (dump_flags & (1 << 3))
 {
   dump_bb (bb, dump_file, 0);
   fprintf (dump_file, "\n");
 }
    }
  for (i = bsi_start (bb); !bsi_end_p (i); bsi_remove (&i))
    {
      tree stmt = bsi_stmt (i);
      set_bb_for_stmt (stmt, ((void *)0));
      if (((enum tree_code) (stmt)->common.code) != GOTO_EXPR && (((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (stmt)->common.code))])) != 0) ? (stmt)->exp.locus : (location_t *)((void *)0)) != ((void *)0)) && !loc)
 loc = ((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (stmt)->common.code))])) != 0) ? (stmt)->exp.locus : (location_t *)((void *)0));
    }
  if (warn_notreached && loc)
    warning ("%Hwill never be executed", loc);
  remove_phi_nodes_and_edges_for_unreachable_block (bb);
}
edge
tree_block_forwards_to (basic_block bb)
{
  block_stmt_iterator bsi;
  bb_ann_t ann = bb_ann (bb);
  tree stmt;
  if (! ann->forwardable)
    return ((void *)0);
  ann->forwardable = 0;
  if (bb == EXIT_BLOCK_PTR
      || bb == ENTRY_BLOCK_PTR
      || !bb->succ
      || bb->succ->succ_next
      || bb->succ->dest == EXIT_BLOCK_PTR
      || (bb->succ->flags & 2) != 0
      || phi_nodes (bb)
      || phi_nodes (bb->succ->dest))
    return ((void *)0);
  for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))
    {
      stmt = bsi_stmt (bsi);
      if (((enum tree_code) (stmt)->common.code) != LABEL_EXPR)
 break;
    }
  if (bsi_end_p (bsi))
    {
      edge dest;
      dest = tree_block_forwards_to (bb->succ->dest);
      if (!dest)
 dest = bb->succ;
      ann->forwardable = 1;
      return dest;
    }
  return ((void *)0);
}
static unsigned char
cleanup_control_flow (void)
{
  basic_block bb;
  block_stmt_iterator bsi;
  unsigned char retval = 0;
  tree stmt;
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      bsi = bsi_last (bb);
      if (bsi_end_p (bsi))
 continue;
      stmt = bsi_stmt (bsi);
      if (((enum tree_code) (stmt)->common.code) == COND_EXPR
   || ((enum tree_code) (stmt)->common.code) == SWITCH_EXPR)
 retval |= cleanup_control_expr_graph (bb, bsi);
    }
  return retval;
}
static unsigned char
cleanup_control_expr_graph (basic_block bb, block_stmt_iterator bsi)
{
  edge taken_edge;
  unsigned char retval = 0;
  tree expr = bsi_stmt (bsi), val;
  if (bb->succ->succ_next)
    {
      edge e, next;
      switch (((enum tree_code) (expr)->common.code))
 {
 case COND_EXPR:
   val = ((((expr))->exp.operands[0]));
   break;
 case SWITCH_EXPR:
   val = (((expr))->exp.operands[0]);
   if (((enum tree_code) (val)->common.code) != INTEGER_CST)
     return 0;
   break;
 default:
   fancy_abort ("gcc.c", 101084, "?");
 }
      taken_edge = find_taken_edge (bb, val);
      if (!taken_edge)
 return 0;
      for (e = bb->succ; e; e = next)
 {
   next = e->succ_next;
   if (e != taken_edge)
     {
       taken_edge->probability += e->probability;
       taken_edge->count += e->count;
       ssa_remove_edge (e);
       retval = 1;
     }
 }
      if (taken_edge->probability > 10000)
 taken_edge->probability = 10000;
    }
  else
    taken_edge = bb->succ;
  bsi_remove (&bsi);
  taken_edge->flags = 1;
  if (dom_computed[CDI_DOMINATORS] >= DOM_CONS_OK)
    dom_computed[CDI_DOMINATORS] = DOM_CONS_OK;
  return retval;
}
edge
find_taken_edge (basic_block bb, tree val)
{
  tree stmt;
  stmt = last_stmt (bb);
  if (val == ((void *)0) || !really_constant_p (val))
    return ((void *)0);
  if (((enum tree_code) (stmt)->common.code) == COND_EXPR)
    return find_taken_edge_cond_expr (bb, val);
  if (((enum tree_code) (stmt)->common.code) == SWITCH_EXPR)
    return find_taken_edge_switch_expr (bb, val);
  return bb->succ;
}
static edge
find_taken_edge_cond_expr (basic_block bb, tree val)
{
  edge true_edge, false_edge;
  extract_true_false_edges_from_block (bb, &true_edge, &false_edge);
  if (true_edge->dest == false_edge->dest)
    return true_edge;
  if (integer_nonzerop (val))
    return true_edge;
  else if (integer_zerop (val))
    return false_edge;
  else
    return ((void *)0);
}
static edge
find_taken_edge_switch_expr (basic_block bb, tree val)
{
  tree switch_expr, taken_case;
  basic_block dest_bb;
  edge e;
  if (((enum tree_code) (val)->common.code) != INTEGER_CST)
    return ((void *)0);
  switch_expr = last_stmt (bb);
  taken_case = find_case_label_for_value (switch_expr, val);
  dest_bb = label_to_block ((((taken_case))->exp.operands[2]));
  e = find_edge (bb, dest_bb);
  if (!e)
    fancy_abort ("gcc.c", 101200, "?");
  return e;
}
static tree
find_case_label_for_value (tree switch_expr, tree val)
{
  tree vec = (((switch_expr))->exp.operands[2]);
  size_t low, high, n = ((vec)->vec.length);
  tree default_case = ((vec)->vec.a[n - 1]);
  for (low = -1, high = n - 1; high - low > 1; )
    {
      size_t i = (high + low) / 2;
      tree t = ((vec)->vec.a[i]);
      int cmp;
      cmp = tree_int_cst_compare ((((t))->exp.operands[0]), val);
      if (cmp > 0)
 high = i;
      else
 low = i;
      if ((((t))->exp.operands[1]) == ((void *)0))
 {
   if (cmp == 0)
     return t;
 }
      else
 {
   if (cmp <= 0 && tree_int_cst_compare ((((t))->exp.operands[1]), val) >= 0)
     return t;
 }
    }
  return default_case;
}
static unsigned char
phi_alternatives_equal (basic_block dest, edge e1, edge e2)
{
  tree phi, val1, val2;
  int n1, n2;
  for (phi = phi_nodes (dest); phi; phi = (((phi))->common.chain))
    {
      n1 = phi_arg_from_edge (phi, e1);
      n2 = phi_arg_from_edge (phi, e2);
      val1 = get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((n1))));
      val2 = get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((n2))));
      if (!operand_equal_p (val1, val2, 0))
 return 0;
    }
  return 1;
}
static void
compute_dominance_frontiers_1 (bitmap *frontiers, basic_block bb, sbitmap done)
{
  edge e;
  basic_block c;
  ((done)->elms [(bb->index) / ((unsigned) (8 * 4))] |= (unsigned long) 1 << (bb->index) % ((unsigned) (8 * 4)));
  for (c = first_dom_son (CDI_DOMINATORS, bb);
       c;
       c = next_dom_son (CDI_DOMINATORS, c))
    {
      if (! ((done)->elms [(c->index) / ((unsigned) (8 * 4))] >> (c->index) % ((unsigned) (8 * 4)) & 1))
     compute_dominance_frontiers_1 (frontiers, c, done);
    }
  for (e = bb->succ; e; e = e->succ_next)
    {
      if (e->dest == EXIT_BLOCK_PTR)
 continue;
      if (get_immediate_dominator (CDI_DOMINATORS, e->dest) != bb)
 bitmap_set_bit (frontiers[bb->index], e->dest->index);
    }
  for (c = first_dom_son (CDI_DOMINATORS, bb);
       c;
       c = next_dom_son (CDI_DOMINATORS, c))
    {
      int x;
      do { bitmap_element *ptr_ = (frontiers[c->index])->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (x) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); { if (get_immediate_dominator (CDI_DOMINATORS, (((basic_block_info)->data.bb[(x)]))) != bb) bitmap_set_bit (frontiers[bb->index], x); }; if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
   ;
    }
}
void
compute_dominance_frontiers (bitmap *frontiers)
{
  sbitmap done = sbitmap_alloc (last_basic_block);
  timevar_push (TV_DOM_FRONTIERS);
  sbitmap_zero (done);
  compute_dominance_frontiers_1 (frontiers, ENTRY_BLOCK_PTR->succ->dest, done);
  free(done);
  timevar_pop (TV_DOM_FRONTIERS);
}
void
tree_dump_bb (basic_block bb, FILE *outf, int indent1)
{
  dump_generic_bb (outf, bb, indent1, (1 << 6));
}
void
debug_tree_bb (basic_block bb)
{
  dump_bb (bb, stderr, 0);
}
basic_block
debug_tree_bb_n (int n)
{
  debug_tree_bb ((((basic_block_info)->data.bb[(n)])));
  return (((basic_block_info)->data.bb[(n)]));
}
void
debug_tree_cfg (int flags)
{
  dump_tree_cfg (stderr, flags);
}
void
dump_tree_cfg (FILE *file, int flags)
{
  if (flags & (1 << 3))
    {
      const char *funcname
 = lang_hooks.decl_printable_name (current_function_decl, 2);
      fputc_unlocked ('\n', file);
      fprintf (file, ";; Function %s\n\n", funcname);
      fprintf (file, ";; \n%d basic blocks, %d edges, last basic block %d.\n\n",
        n_basic_blocks, n_edges, last_basic_block);
      brief_dump_cfg (file);
      fprintf (file, "\n");
    }
  if (flags & (1 << 4))
    dump_cfg_stats (file);
  dump_function_to_file (current_function_decl, file, flags | (1 << 5));
}
void
dump_cfg_stats (FILE *file)
{
  static long max_num_merged_labels = 0;
  unsigned long size, total = 0;
  long n_edges;
  basic_block bb;
  const char * const fmt_str = "%-30s%-13s%12s\n";
  const char * const fmt_str_1 = "%-30s%13lu%11lu%c\n";
  const char * const fmt_str_3 = "%-43s%11lu%c\n";
  const char *funcname
    = lang_hooks.decl_printable_name (current_function_decl, 2);
  fprintf (file, "\nCFG Statistics for %s\n\n", funcname);
  fprintf (file, "---------------------------------------------------------\n");
  fprintf (file, fmt_str, "", "  Number of  ", "Memory");
  fprintf (file, fmt_str, "", "  instances  ", "used ");
  fprintf (file, "---------------------------------------------------------\n");
  size = n_basic_blocks * sizeof (struct basic_block_def);
  total += size;
  fprintf (file, fmt_str_1, "Basic blocks", n_basic_blocks, ((unsigned long) ((size) < 1024*10 ? (size) : ((size) < 1024*1024*10 ? (size) / 1024 : (size) / (1024*1024)))),
    ((size) < 1024*10 ? 'b' : ((size) < 1024*1024*10 ? 'k' : 'M')));
  n_edges = 0;
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      edge e;
      for (e = bb->succ; e; e = e->succ_next)
 n_edges++;
    }
  size = n_edges * sizeof (struct edge_def);
  total += size;
  fprintf (file, fmt_str_1, "Edges", n_edges, ((unsigned long) ((size) < 1024*10 ? (size) : ((size) < 1024*1024*10 ? (size) / 1024 : (size) / (1024*1024)))), ((size) < 1024*10 ? 'b' : ((size) < 1024*1024*10 ? 'k' : 'M')));
  size = n_basic_blocks * sizeof (struct bb_ann_d);
  total += size;
  fprintf (file, fmt_str_1, "Basic block annotations", n_basic_blocks,
    ((unsigned long) ((size) < 1024*10 ? (size) : ((size) < 1024*1024*10 ? (size) / 1024 : (size) / (1024*1024)))), ((size) < 1024*10 ? 'b' : ((size) < 1024*1024*10 ? 'k' : 'M')));
  fprintf (file, "---------------------------------------------------------\n");
  fprintf (file, fmt_str_3, "Total memory used by CFG data", ((unsigned long) ((total) < 1024*10 ? (total) : ((total) < 1024*1024*10 ? (total) / 1024 : (total) / (1024*1024)))),
    ((total) < 1024*10 ? 'b' : ((total) < 1024*1024*10 ? 'k' : 'M')));
  fprintf (file, "---------------------------------------------------------\n");
  fprintf (file, "\n");
  if (cfg_stats.num_merged_labels > max_num_merged_labels)
    max_num_merged_labels = cfg_stats.num_merged_labels;
  fprintf (file, "Coalesced label blocks: %ld (Max so far: %ld)\n",
    cfg_stats.num_merged_labels, max_num_merged_labels);
  fprintf (file, "\n");
}
void
debug_cfg_stats (void)
{
  dump_cfg_stats (stderr);
}
static void
tree_cfg2vcg (FILE *file)
{
  edge e;
  basic_block bb;
  const char *funcname
    = lang_hooks.decl_printable_name (current_function_decl, 2);
  fprintf (file, "graph: { title: \"%s\"\n", funcname);
  fprintf (file, "node: { title: \"ENTRY\" label: \"ENTRY\" }\n");
  fprintf (file, "node: { title: \"EXIT\" label: \"EXIT\" }\n");
  for (e = ENTRY_BLOCK_PTR->succ; e; e = e->succ_next)
    {
      fprintf (file, "edge: { sourcename: \"ENTRY\" targetname: \"%d\"",
        e->dest->index);
      if (e->flags & 16)
 fprintf (file, " linestyle: dotted priority: 10");
      else
 fprintf (file, " linestyle: solid priority: 100");
      fprintf (file, " }\n");
    }
  fputc_unlocked ('\n', file);
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      enum tree_code head_code, end_code;
      const char *head_name, *end_name;
      int head_line = 0;
      int end_line = 0;
      tree first = first_stmt (bb);
      tree last = last_stmt (bb);
      if (first)
 {
   head_code = ((enum tree_code) (first)->common.code);
   head_name = tree_code_name[head_code];
   head_line = get_lineno (first);
 }
      else
 head_name = "no-statement";
      if (last)
 {
   end_code = ((enum tree_code) (last)->common.code);
   end_name = tree_code_name[end_code];
   end_line = get_lineno (last);
 }
      else
 end_name = "no-statement";
      fprintf (file, "node: { title: \"%d\" label: \"#%d\\n%s (%d)\\n%s (%d)\"}\n",
        bb->index, bb->index, head_name, head_line, end_name,
        end_line);
      for (e = bb->succ; e; e = e->succ_next)
 {
   if (e->dest == EXIT_BLOCK_PTR)
     fprintf (file, "edge: { sourcename: \"%d\" targetname: \"EXIT\"", bb->index);
   else
     fprintf (file, "edge: { sourcename: \"%d\" targetname: \"%d\"", bb->index, e->dest->index);
   if (e->flags & 16)
     fprintf (file, " priority: 10 linestyle: dotted");
   else
     fprintf (file, " priority: 100 linestyle: solid");
   fprintf (file, " }\n");
 }
      if (bb->next_bb != EXIT_BLOCK_PTR)
 fputc_unlocked ('\n', file);
    }
  fputs_unlocked ("}\n\n", file);
}
unsigned char
is_ctrl_stmt (tree t)
{
  return (((enum tree_code) (t)->common.code) == COND_EXPR
   || ((enum tree_code) (t)->common.code) == SWITCH_EXPR
   || ((enum tree_code) (t)->common.code) == GOTO_EXPR
   || ((enum tree_code) (t)->common.code) == RETURN_EXPR
   || ((enum tree_code) (t)->common.code) == RESX_EXPR);
}
unsigned char
is_ctrl_altering_stmt (tree t)
{
  tree call = t;
  switch (((enum tree_code) (t)->common.code))
    {
    case MODIFY_EXPR:
      call = ((t)->exp.operands[1]);
      if (((enum tree_code) (call)->common.code) != CALL_EXPR)
 break;
    case CALL_EXPR:
      if (((t)->common.side_effects_flag)
   && (cfun->has_nonlocal_label))
 return 1;
      if (call_expr_flags (call) & (2 | 64))
 return 1;
      break;
    default:
      return 0;
    }
  return tree_can_throw_internal (t);
}
unsigned char
computed_goto_p (tree t)
{
  return (((enum tree_code) (t)->common.code) == GOTO_EXPR
   && ((enum tree_code) ((((t))->exp.operands[0]))->common.code) != LABEL_DECL);
}
unsigned char
simple_goto_p (tree expr)
{
  return (((enum tree_code) (expr)->common.code) == GOTO_EXPR
    && ((enum tree_code) ((((expr))->exp.operands[0]))->common.code) == LABEL_DECL
    && (decl_function_context ((((expr))->exp.operands[0]))
        == current_function_decl));
}
static unsigned char
stmt_starts_bb_p (tree t, tree prev_t)
{
  enum tree_code code;
  if (t == (tree) ((void *)0))
    return 0;
  code = ((enum tree_code) (t)->common.code);
  if (code == LABEL_EXPR)
    {
      if (code == LABEL_EXPR
   && ((((((t))->exp.operands[0]))->decl.nonlocal_flag)
       || (((((t))->exp.operands[0]))->common.side_effects_flag)))
 return 1;
      if (prev_t && ((enum tree_code) (prev_t)->common.code) == code)
 {
   if ((((((prev_t))->exp.operands[0]))->decl.nonlocal_flag))
     return 1;
   cfg_stats.num_merged_labels++;
   return 0;
 }
      else
 return 1;
    }
  return 0;
}
unsigned char
stmt_ends_bb_p (tree t)
{
  return is_ctrl_stmt (t) || is_ctrl_altering_stmt (t);
}
void
disband_implicit_edges (void)
{
  basic_block bb;
  block_stmt_iterator last;
  edge e;
  tree stmt, label;
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      last = bsi_last (bb);
      stmt = last_stmt (bb);
      if (stmt && ((enum tree_code) (stmt)->common.code) == COND_EXPR)
 {
   for (e = bb->succ; e; e = e->succ_next)
     {
       if (e->dest != bb->next_bb)
  continue;
       if (e->flags & 1024)
  ((((stmt))->exp.operands[1])) = build_empty_stmt ();
       else if (e->flags & 2048)
  ((((stmt))->exp.operands[2])) = build_empty_stmt ();
       else
  fancy_abort ("gcc.c", 101751, "?");
       e->flags |= 1;
     }
   continue;
 }
      if (stmt && ((enum tree_code) (stmt)->common.code) == RETURN_EXPR)
 {
   if (!bb->succ
       || bb->succ->succ_next
       || bb->succ->dest != EXIT_BLOCK_PTR)
     fancy_abort ("gcc.c", 101765, "?");
   if (bb->next_bb == EXIT_BLOCK_PTR
       && !((stmt)->exp.operands[0]))
     {
       bsi_remove (&last);
       bb->succ->flags |= 1;
     }
   continue;
 }
      if (stmt && is_ctrl_stmt (stmt))
 continue;
      for (e = bb->succ; e; e = e->succ_next)
 if (e->flags & 1)
   break;
      if (!e || e->dest == bb->next_bb)
 continue;
      if (e->dest == EXIT_BLOCK_PTR)
 fancy_abort ("gcc.c", 101790, "?");
      label = tree_block_label (e->dest);
      stmt = build1_stat (GOTO_EXPR,global_trees[TI_VOID_TYPE],label );
      ((stmt)->exp.locus = (e->goto_locus));
      bsi_insert_after (&last, stmt, BSI_NEW_STMT);
      e->flags &= ~1;
    }
}
void
delete_tree_cfg_annotations (void)
{
  basic_block bb;
  if (n_basic_blocks > 0)
    free_blocks_annotations ();
  label_to_block_map = ((void *)0);
  free_rbi_pool ();
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    bb->rbi = ((void *)0);
}
tree
first_stmt (basic_block bb)
{
  block_stmt_iterator i = bsi_start (bb);
  return !bsi_end_p (i) ? bsi_stmt (i) : (tree) ((void *)0);
}
tree
last_stmt (basic_block bb)
{
  block_stmt_iterator b = bsi_last (bb);
  return !bsi_end_p (b) ? bsi_stmt (b) : (tree) ((void *)0);
}
tree *
last_stmt_ptr (basic_block bb)
{
  block_stmt_iterator last = bsi_last (bb);
  return !bsi_end_p (last) ? bsi_stmt_ptr (last) : ((void *)0);
}
tree
last_and_only_stmt (basic_block bb)
{
  block_stmt_iterator i = bsi_last (bb);
  tree last, prev;
  if (bsi_end_p (i))
    return (tree) ((void *)0);
  last = bsi_stmt (i);
  bsi_prev (&i);
  if (bsi_end_p (i))
    return last;
  prev = bsi_stmt (i);
  if (((enum tree_code) (prev)->common.code) == LABEL_EXPR)
    return last;
  else
    return (tree) ((void *)0);
}
void
set_bb_for_stmt (tree t, basic_block bb)
{
  if (((enum tree_code) (t)->common.code) == STATEMENT_LIST)
    {
      tree_stmt_iterator i;
      for (i = tsi_start (t); !tsi_end_p (i); tsi_next (&i))
 set_bb_for_stmt (tsi_stmt (i), bb);
    }
  else
    {
      stmt_ann_t ann = get_stmt_ann (t);
      ann->bb = bb;
      if (((enum tree_code) (t)->common.code) == LABEL_EXPR)
 {
   int uid;
   t = (((t))->exp.operands[0]);
   uid = ((t)->decl.pointer_alias_set);
   if (uid == -1)
     {
       ((t)->decl.pointer_alias_set) = uid = cfun->last_label_uid++;
       if (((label_to_block_map)->num_elements) <= (unsigned) uid)
  ((label_to_block_map) = varray_grow (label_to_block_map, 3 * uid / 2));
     }
   else
     {
     }
   ((label_to_block_map)->data.bb[uid]) = bb;
 }
    }
}
void
bsi_insert_before (block_stmt_iterator *i, tree t, enum bsi_iterator_update m)
{
  set_bb_for_stmt (t, i->bb);
  modify_stmt (t);
  tsi_link_before (&i->tsi, t, m);
}
void
bsi_insert_after (block_stmt_iterator *i, tree t, enum bsi_iterator_update m)
{
  set_bb_for_stmt (t, i->bb);
  modify_stmt (t);
  tsi_link_after (&i->tsi, t, m);
}
void
bsi_remove (block_stmt_iterator *i)
{
  tree t = bsi_stmt (*i);
  set_bb_for_stmt (t, ((void *)0));
  modify_stmt (t);
  tsi_delink (&i->tsi);
}
void
bsi_move_after (block_stmt_iterator *from, block_stmt_iterator *to)
{
  tree stmt = bsi_stmt (*from);
  bsi_remove (from);
  bsi_insert_after (to, stmt, BSI_SAME_STMT);
}
void
bsi_move_before (block_stmt_iterator *from, block_stmt_iterator *to)
{
  tree stmt = bsi_stmt (*from);
  bsi_remove (from);
  bsi_insert_before (to, stmt, BSI_SAME_STMT);
}
void
bsi_move_to_bb_end (block_stmt_iterator *from, basic_block bb)
{
  block_stmt_iterator last = bsi_last (bb);
  if (!bsi_end_p (last) && is_ctrl_stmt (bsi_stmt (last)))
    bsi_move_before (from, &last);
  else
    bsi_move_after (from, &last);
}
void
bsi_replace (const block_stmt_iterator *bsi, tree stmt, unsigned char preserve_eh_info)
{
  int eh_region;
  tree orig_stmt = bsi_stmt (*bsi);
  ((stmt)->exp.locus = (((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (orig_stmt)->common.code))])) != 0) ? (orig_stmt)->exp.locus : (location_t *)((void *)0))));
  set_bb_for_stmt (stmt, bsi->bb);
  if (preserve_eh_info)
    {
      eh_region = lookup_stmt_eh_region (orig_stmt);
      if (eh_region >= 0)
 add_stmt_to_eh_region (stmt, eh_region);
    }
  *bsi_stmt_ptr (*bsi) = stmt;
  modify_stmt (stmt);
}
static unsigned char
tree_find_edge_insert_loc (edge e, block_stmt_iterator *bsi)
{
  basic_block dest, src;
  tree tmp;
  dest = e->dest;
 restart:
  if (dest->pred->pred_next == ((void *)0)
      && ! phi_nodes (dest)
      && dest != EXIT_BLOCK_PTR)
    {
      *bsi = bsi_start (dest);
      if (bsi_end_p (*bsi))
 return 1;
      tmp = bsi_stmt (*bsi);
      while (((enum tree_code) (tmp)->common.code) == LABEL_EXPR)
 {
   bsi_next (bsi);
   if (bsi_end_p (*bsi))
     break;
   tmp = bsi_stmt (*bsi);
 }
      if (bsi_end_p (*bsi))
 {
   *bsi = bsi_last (dest);
   return 1;
 }
      else
 return 0;
    }
  src = e->src;
  if ((e->flags & 2) == 0
      && src->succ->succ_next == ((void *)0)
      && src != ENTRY_BLOCK_PTR)
    {
      *bsi = bsi_last (src);
      if (bsi_end_p (*bsi))
 return 1;
      tmp = bsi_stmt (*bsi);
      if (!stmt_ends_bb_p (tmp))
 return 1;
      if (((enum tree_code) (tmp)->common.code) == RETURN_EXPR)
        {
   tree op = ((tmp)->exp.operands[0]);
   if (!is_gimple_val (op))
     {
       if (((enum tree_code) (op)->common.code) != MODIFY_EXPR)
  fancy_abort ("gcc.c", 102108, "?");
       bsi_insert_before (bsi, op, BSI_NEW_STMT);
       ((tmp)->exp.operands[0]) = ((op)->exp.operands[0]);
     }
   bsi_prev (bsi);
   return 1;
        }
    }
  dest = split_edge (e);
  e = dest->pred;
  goto restart;
}
void
bsi_commit_edge_inserts (int *new_blocks)
{
  basic_block bb;
  edge e;
  int blocks;
  blocks = n_basic_blocks;
  bsi_commit_edge_inserts_1 (ENTRY_BLOCK_PTR->succ);
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    for (e = bb->succ; e; e = e->succ_next)
      bsi_commit_edge_inserts_1 (e);
  if (new_blocks)
    *new_blocks = n_basic_blocks - blocks;
}
static void
bsi_commit_edge_inserts_1 (edge e)
{
  if (((e)->insns.t))
    {
      block_stmt_iterator bsi;
      tree stmt = ((e)->insns.t);
      ((e)->insns.t) = (tree) ((void *)0);
      if (tree_find_edge_insert_loc (e, &bsi))
 bsi_insert_after (&bsi, stmt, BSI_NEW_STMT);
      else
 bsi_insert_before (&bsi, stmt, BSI_NEW_STMT);
    }
}
void
bsi_insert_on_edge (edge e, tree stmt)
{
  append_to_statement_list (stmt, &((e)->insns.t));
}
void pre_insert_on_edge (edge e, tree stmt);
void
pre_insert_on_edge (edge e, tree stmt)
{
  block_stmt_iterator bsi;
  if (((e)->insns.t))
    fancy_abort ("gcc.c", 102192, "?");
  if (tree_find_edge_insert_loc (e, &bsi))
    bsi_insert_after (&bsi, stmt, BSI_NEW_STMT);
  else
    bsi_insert_before (&bsi, stmt, BSI_NEW_STMT);
}
static basic_block
tree_split_edge (edge edge_in)
{
  basic_block new_bb, after_bb, dest, src;
  edge new_edge, e;
  tree phi;
  int i, num_elem;
  if (edge_in->flags & 2)
    fancy_abort ("gcc.c", 102218, "?");
  src = edge_in->src;
  dest = edge_in->dest;
  for (e = dest->pred; e; e = e->pred_next)
    if (e->src->next_bb == dest)
      break;
  if (!e)
    after_bb = dest->prev_bb;
  else
    after_bb = edge_in->src;
  new_bb = create_empty_bb (after_bb);
  new_edge = make_edge (new_bb, dest, 1);
  for (phi = phi_nodes (dest); phi; phi = (((phi))->common.chain))
    {
      num_elem = (phi)->phi.num_args;
      for (i = 0; i < num_elem; i++)
 if (((phi)->phi.a[i]).e == edge_in)
   {
     ((phi)->phi.a[i]).e = new_edge;
     break;
   }
    }
  if (!redirect_edge_and_branch (edge_in, new_bb))
    fancy_abort ("gcc.c", 102252, "?");
  if (((edge_in)->insns.t))
    fancy_abort ("gcc.c", 102255, "?");
  return new_bb;
}
static unsigned char
has_label_p (basic_block bb, tree label)
{
  block_stmt_iterator bsi;
  for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))
    {
      tree stmt = bsi_stmt (bsi);
      if (((enum tree_code) (stmt)->common.code) != LABEL_EXPR)
 return 0;
      if ((((stmt))->exp.operands[0]) == label)
 return 1;
    }
  return 0;
}
static tree
verify_expr (tree *tp, int *walk_subtrees, void *data )
{
  tree t = *tp, x;
  if ((tree_code_type[(int) (((enum tree_code) (t)->common.code))] == 't'))
    *walk_subtrees = 0;
  switch (((enum tree_code) (t)->common.code))
    {
    case SSA_NAME:
      if ((t)->common.nothrow_flag)
 {
   error ("SSA name in freelist but still referenced");
   return *tp;
 }
      break;
    case MODIFY_EXPR:
      x = ((t)->exp.operands[0]);
      if (((enum tree_code) (x)->common.code) == BIT_FIELD_REF
   && is_gimple_reg (((x)->exp.operands[0])))
 {
   error ("GIMPLE register modified with BIT_FIELD_REF");
   return t;
 }
      break;
    case ADDR_EXPR:
      for (x = ((t)->exp.operands[0]);
    (handled_component_p (x)
     || ((enum tree_code) (x)->common.code) == REALPART_EXPR
     || ((enum tree_code) (x)->common.code) == IMAGPART_EXPR);
    x = ((x)->exp.operands[0]))
 ;
      if (((enum tree_code) (x)->common.code) != VAR_DECL && ((enum tree_code) (x)->common.code) != PARM_DECL)
 return ((void *)0);
      if (!((x)->common.addressable_flag))
 {
   error ("address taken, but ADDRESSABLE bit not set");
   return x;
 }
      break;
    case COND_EXPR:
      x = ((t)->exp.operands[0]);
      if (((enum tree_code) (((x)->common.type))->common.code) != BOOLEAN_TYPE)
 {
   error ("non-boolean used in condition");
   return x;
 }
      break;
    case NOP_EXPR:
    case CONVERT_EXPR:
    case FIX_TRUNC_EXPR:
    case FIX_CEIL_EXPR:
    case FIX_FLOOR_EXPR:
    case FIX_ROUND_EXPR:
    case FLOAT_EXPR:
    case NEGATE_EXPR:
    case ABS_EXPR:
    case BIT_NOT_EXPR:
    case NON_LVALUE_EXPR:
    case TRUTH_NOT_EXPR:
      do { if (tree_code_type[(int) (((enum tree_code) (((t)->exp.operands[0]))->common.code))] != 'c' && !is_gimple_val (((t)->exp.operands[0]))) { error ("Invalid operand to unary operator"); return ((t)->exp.operands[0]); }} while (0);
      break;
    case REALPART_EXPR:
    case IMAGPART_EXPR:
    case COMPONENT_REF:
    case ARRAY_REF:
    case ARRAY_RANGE_REF:
    case BIT_FIELD_REF:
    case VIEW_CONVERT_EXPR:
      while (((enum tree_code) (t)->common.code) == REALPART_EXPR || ((enum tree_code) (t)->common.code) == IMAGPART_EXPR
      || handled_component_p (t))
 {
   if (((enum tree_code) (t)->common.code) == COMPONENT_REF && ((t)->exp.operands[2]))
     do { if (tree_code_type[(int) (((enum tree_code) (((t)->exp.operands[2]))->common.code))] != 'c' && !is_gimple_val (((t)->exp.operands[2]))) { error ("Invalid COMPONENT_REF offset operator"); return ((t)->exp.operands[2]); }} while (0);
   else if (((enum tree_code) (t)->common.code) == ARRAY_REF
     || ((enum tree_code) (t)->common.code) == ARRAY_RANGE_REF)
     {
       do { if (tree_code_type[(int) (((enum tree_code) (((t)->exp.operands[1]))->common.code))] != 'c' && !is_gimple_val (((t)->exp.operands[1]))) { error ("Invalid array index."); return ((t)->exp.operands[1]); }} while (0);
       if (((t)->exp.operands[2]))
  do { if (tree_code_type[(int) (((enum tree_code) (((t)->exp.operands[2]))->common.code))] != 'c' && !is_gimple_val (((t)->exp.operands[2]))) { error ("Invalid array lower bound."); return ((t)->exp.operands[2]); }} while (0);
       if (((t)->exp.operands[3]))
  do { if (tree_code_type[(int) (((enum tree_code) (((t)->exp.operands[3]))->common.code))] != 'c' && !is_gimple_val (((t)->exp.operands[3]))) { error ("Invalid array stride."); return ((t)->exp.operands[3]); }} while (0);
     }
   else if (((enum tree_code) (t)->common.code) == BIT_FIELD_REF)
     {
       do { if (tree_code_type[(int) (((enum tree_code) (((t)->exp.operands[1]))->common.code))] != 'c' && !is_gimple_val (((t)->exp.operands[1]))) { error ("Invalid operand to BIT_FIELD_REF"); return ((t)->exp.operands[1]); }} while (0);
       do { if (tree_code_type[(int) (((enum tree_code) (((t)->exp.operands[2]))->common.code))] != 'c' && !is_gimple_val (((t)->exp.operands[2]))) { error ("Invalid operand to BIT_FIELD_REF"); return ((t)->exp.operands[2]); }} while (0);
     }
   t = ((t)->exp.operands[0]);
 }
      if (tree_code_type[(int) (((enum tree_code) (t)->common.code))] != 'c'
   && !is_gimple_lvalue (t))
 {
   error ("Invalid reference prefix.");
   return t;
 }
      *walk_subtrees = 0;
      break;
    case LT_EXPR:
    case LE_EXPR:
    case GT_EXPR:
    case GE_EXPR:
    case EQ_EXPR:
    case NE_EXPR:
    case UNORDERED_EXPR:
    case ORDERED_EXPR:
    case UNLT_EXPR:
    case UNLE_EXPR:
    case UNGT_EXPR:
    case UNGE_EXPR:
    case UNEQ_EXPR:
    case LTGT_EXPR:
    case PLUS_EXPR:
    case MINUS_EXPR:
    case MULT_EXPR:
    case TRUNC_DIV_EXPR:
    case CEIL_DIV_EXPR:
    case FLOOR_DIV_EXPR:
    case ROUND_DIV_EXPR:
    case TRUNC_MOD_EXPR:
    case CEIL_MOD_EXPR:
    case FLOOR_MOD_EXPR:
    case ROUND_MOD_EXPR:
    case RDIV_EXPR:
    case EXACT_DIV_EXPR:
    case MIN_EXPR:
    case MAX_EXPR:
    case LSHIFT_EXPR:
    case RSHIFT_EXPR:
    case LROTATE_EXPR:
    case RROTATE_EXPR:
    case BIT_IOR_EXPR:
    case BIT_XOR_EXPR:
    case BIT_AND_EXPR:
      do { if (tree_code_type[(int) (((enum tree_code) (((t)->exp.operands[0]))->common.code))] != 'c' && !is_gimple_val (((t)->exp.operands[0]))) { error ("Invalid operand to binary operator"); return ((t)->exp.operands[0]); }} while (0);
      do { if (tree_code_type[(int) (((enum tree_code) (((t)->exp.operands[1]))->common.code))] != 'c' && !is_gimple_val (((t)->exp.operands[1]))) { error ("Invalid operand to binary operator"); return ((t)->exp.operands[1]); }} while (0);
      break;
    default:
      break;
    }
  return ((void *)0);
}
static unsigned char
verify_stmt (tree stmt, unsigned char last_in_block)
{
  tree addr;
  if (!is_gimple_stmt (stmt))
    {
      error ("Is not a valid GIMPLE statement.");
      goto fail;
    }
  addr = walk_tree (&stmt, verify_expr, ((void *)0), ((void *)0));
  if (addr)
    {
      debug_generic_stmt (addr);
      return 1;
    }
  if (lookup_stmt_eh_region (stmt) >= 0)
    {
      if (!tree_could_throw_p (stmt))
 {
   error ("Statement marked for throw, but doesn't.");
   goto fail;
 }
      if (!last_in_block && tree_can_throw_internal (stmt))
 {
   error ("Statement marked for throw in middle of block.");
   goto fail;
 }
    }
  return 0;
 fail:
  debug_generic_stmt (stmt);
  return 1;
}
static unsigned char
tree_node_can_be_shared (tree t)
{
  if ((tree_code_type[(int) (((enum tree_code) (t)->common.code))] == 't') || (tree_code_type[(int) (((enum tree_code) (t)->common.code))] == 'd')
      || tree_code_type[(int) (((enum tree_code) (t)->common.code))] == 'c'
      || is_gimple_min_invariant (t)
      || ((enum tree_code) (t)->common.code) == SSA_NAME)
    return 1;
  while (((((enum tree_code) (t)->common.code) == ARRAY_REF || ((enum tree_code) (t)->common.code) == ARRAY_RANGE_REF)
   && (tree_code_type[(int) (((enum tree_code) (((t)->exp.operands[1]))->common.code))] == 'c'
       || is_gimple_min_invariant (((t)->exp.operands[1]))))
  || (((enum tree_code) (t)->common.code) == COMPONENT_REF
      || ((enum tree_code) (t)->common.code) == REALPART_EXPR
      || ((enum tree_code) (t)->common.code) == IMAGPART_EXPR))
    t = ((t)->exp.operands[0]);
  if ((tree_code_type[(int) (((enum tree_code) (t)->common.code))] == 'd'))
    return 1;
  return 0;
}
static tree
verify_node_sharing (tree * tp, int *walk_subtrees, void *data)
{
  htab_t htab = (htab_t) data;
  void **slot;
  if (tree_node_can_be_shared (*tp))
    {
      *walk_subtrees = 0;
      return ((void *)0);
    }
  slot = htab_find_slot (htab, *tp, INSERT);
  if (*slot)
    return *slot;
  *slot = *tp;
  return ((void *)0);
}
void
verify_stmts (void)
{
  basic_block bb;
  block_stmt_iterator bsi;
  unsigned char err = 0;
  htab_t htab;
  tree addr;
  timevar_push (TV_TREE_STMT_VERIFY);
  htab = htab_create (37, htab_hash_pointer, htab_eq_pointer, ((void *)0));
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      tree phi;
      int i;
      for (phi = phi_nodes (bb); phi; phi = (((phi))->common.chain))
 {
   int phi_num_args = (phi)->phi.num_args;
   for (i = 0; i < phi_num_args; i++)
     {
       tree t = get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((i))));
       tree addr;
       if (((enum tree_code) (t)->common.code) != SSA_NAME
    && ((enum tree_code) (t)->common.code) != FUNCTION_DECL
    && !is_gimple_val (t))
  {
    error ("PHI def is not a GIMPLE value");
    debug_generic_stmt (phi);
    debug_generic_stmt (t);
    err |= 1;
  }
       addr = walk_tree (&t, verify_expr, ((void *)0), ((void *)0));
       if (addr)
  {
    debug_generic_stmt (addr);
    err |= 1;
  }
       addr = walk_tree (&t, verify_node_sharing, htab, ((void *)0));
       if (addr)
  {
    error ("Incorrect sharing of tree nodes");
    debug_generic_stmt (phi);
    debug_generic_stmt (addr);
    err |= 1;
  }
     }
 }
      for (bsi = bsi_start (bb); !bsi_end_p (bsi); )
 {
   tree stmt = bsi_stmt (bsi);
   bsi_next (&bsi);
   err |= verify_stmt (stmt, bsi_end_p (bsi));
   addr = walk_tree (&stmt, verify_node_sharing, htab, ((void *)0));
   if (addr)
     {
       error ("Incorrect sharing of tree nodes");
       debug_generic_stmt (stmt);
       debug_generic_stmt (addr);
       err |= 1;
     }
 }
    }
  if (err)
    internal_error ("verify_stmts failed.");
  htab_delete (htab);
  timevar_pop (TV_TREE_STMT_VERIFY);
}
static int
tree_verify_flow_info (void)
{
  int err = 0;
  basic_block bb;
  block_stmt_iterator bsi;
  tree stmt;
  edge e;
  if (ENTRY_BLOCK_PTR->stmt_list)
    {
      error ("ENTRY_BLOCK has a statement list associated with it\n");
      err = 1;
    }
  if (EXIT_BLOCK_PTR->stmt_list)
    {
      error ("EXIT_BLOCK has a statement list associated with it\n");
      err = 1;
    }
  for (e = EXIT_BLOCK_PTR->pred; e; e = e->pred_next)
    if (e->flags & 1)
      {
 error ("Fallthru to exit from bb %d\n", e->src->index);
 err = 1;
      }
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      unsigned char found_ctrl_stmt = 0;
      for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))
 {
   if (((enum tree_code) (bsi_stmt (bsi))->common.code) != LABEL_EXPR)
     break;
   if (label_to_block ((((bsi_stmt (bsi)))->exp.operands[0])) != bb)
     {
       error ("Label %s to block does not match in bb %d\n",
       ((const char *) (((bsi_stmt (bsi))->decl.name))->identifier.id.str),
       bb->index);
       err = 1;
     }
   if (decl_function_context ((((bsi_stmt (bsi)))->exp.operands[0]))
       != current_function_decl)
     {
       error ("Label %s has incorrect context in bb %d\n",
       ((const char *) (((bsi_stmt (bsi))->decl.name))->identifier.id.str),
       bb->index);
       err = 1;
     }
 }
      for (; !bsi_end_p (bsi); bsi_next (&bsi))
 {
   tree stmt = bsi_stmt (bsi);
   if (found_ctrl_stmt)
     {
       error ("Control flow in the middle of basic block %d\n",
       bb->index);
       err = 1;
     }
   if (stmt_ends_bb_p (stmt))
     found_ctrl_stmt = 1;
   if (((enum tree_code) (stmt)->common.code) == LABEL_EXPR)
     {
       error ("Label %s in the middle of basic block %d\n",
       ((const char *) (((stmt)->decl.name))->identifier.id.str),
       bb->index);
       err = 1;
     }
 }
      bsi = bsi_last (bb);
      if (bsi_end_p (bsi))
 continue;
      stmt = bsi_stmt (bsi);
      if (is_ctrl_stmt (stmt))
 {
   for (e = bb->succ; e; e = e->succ_next)
     if (e->flags & 1)
       {
  error ("Fallthru edge after a control statement in bb %d \n",
         bb->index);
  err = 1;
       }
 }
      switch (((enum tree_code) (stmt)->common.code))
 {
 case COND_EXPR:
   {
     edge true_edge;
     edge false_edge;
     if (((enum tree_code) (((((stmt))->exp.operands[1])))->common.code) != GOTO_EXPR
  || ((enum tree_code) (((((stmt))->exp.operands[2])))->common.code) != GOTO_EXPR)
       {
  error ("Structured COND_EXPR at the end of bb %d\n", bb->index);
  err = 1;
       }
     extract_true_false_edges_from_block (bb, &true_edge, &false_edge);
     if (!true_edge || !false_edge
  || !(true_edge->flags & 1024)
  || !(false_edge->flags & 2048)
  || (true_edge->flags & (1 | 2))
  || (false_edge->flags & (1 | 2))
  || bb->succ->succ_next->succ_next)
       {
  error ("Wrong outgoing edge flags at end of bb %d\n",
         bb->index);
  err = 1;
       }
     if (!has_label_p (true_edge->dest,
         (((((((stmt))->exp.operands[1]))))->exp.operands[0])))
       {
  error ("`then' label does not match edge at end of bb %d\n",
         bb->index);
  err = 1;
       }
     if (!has_label_p (false_edge->dest,
         (((((((stmt))->exp.operands[2]))))->exp.operands[0])))
       {
  error ("`else' label does not match edge at end of bb %d\n",
         bb->index);
  err = 1;
       }
   }
   break;
 case GOTO_EXPR:
   if (simple_goto_p (stmt))
     {
       error ("Explicit goto at end of bb %d\n", bb->index);
           err = 1;
     }
   else
     {
       for (e = bb->succ; e; e = e->succ_next)
  if ((e->flags & (1 | 1024
     | 2048))
      || !(e->flags & 2))
    {
      error ("Wrong outgoing edge flags at end of bb %d\n",
      bb->index);
      err = 1;
    }
     }
   break;
 case RETURN_EXPR:
   if (!bb->succ || bb->succ->succ_next
       || (bb->succ->flags & (1 | 2
           | 1024 | 2048)))
     {
       error ("Wrong outgoing edge flags at end of bb %d\n", bb->index);
       err = 1;
     }
   if (bb->succ->dest != EXIT_BLOCK_PTR)
     {
       error ("Return edge does not point to exit in bb %d\n",
       bb->index);
       err = 1;
     }
   break;
 case SWITCH_EXPR:
   {
     tree prev;
     edge e;
     size_t i, n;
     tree vec;
     vec = (((stmt))->exp.operands[2]);
     n = ((vec)->vec.length);
     for (i = 0; i < n; ++i)
       {
  tree lab = (((((vec)->vec.a[i])))->exp.operands[2]);
  basic_block label_bb = label_to_block (lab);
  if (label_bb->aux && label_bb->aux != (void *)1)
    fancy_abort ("gcc.c", 102837, "?");
  label_bb->aux = (void *)1;
       }
     prev = ((vec)->vec.a[0]);
     for (i = 1; i < n - 1; ++i)
       {
  tree c = ((vec)->vec.a[i]);
  if (! (((c))->exp.operands[0]))
    {
      error ("Found default case not at end of case vector");
      err = 1;
      continue;
    }
  if (! tree_int_cst_lt ((((prev))->exp.operands[0]), (((c))->exp.operands[0])))
    {
      error ("Case labels not sorted:\n ");
      print_generic_expr (stderr, prev, 0);
      fprintf (stderr," is greater than ");
      print_generic_expr (stderr, c, 0);
      fprintf (stderr," but comes before it.\n");
      err = 1;
    }
  prev = c;
       }
     if ((((((vec)->vec.a[n - 1])))->exp.operands[0]))
       {
  error ("No default case found at end of case vector");
  err = 1;
       }
     for (e = bb->succ; e; e = e->succ_next)
       {
  if (!e->dest->aux)
    {
      error ("Extra outgoing edge %d->%d\n",
      bb->index, e->dest->index);
      err = 1;
    }
  e->dest->aux = (void *)2;
  if ((e->flags & (1 | 2
     | 1024 | 2048)))
    {
      error ("Wrong outgoing edge flags at end of bb %d\n",
      bb->index);
      err = 1;
    }
       }
     for (i = 0; i < n; ++i)
       {
  tree lab = (((((vec)->vec.a[i])))->exp.operands[2]);
  basic_block label_bb = label_to_block (lab);
  if (label_bb->aux != (void *)2)
    {
      error ("Missing edge %i->%i\n",
      bb->index, label_bb->index);
      err = 1;
    }
       }
     for (e = bb->succ; e; e = e->succ_next)
       e->dest->aux = (void *)0;
   }
 default: ;
 }
    }
  if (dom_computed[CDI_DOMINATORS] >= DOM_NO_FAST_QUERY)
    verify_dominators (CDI_DOMINATORS);
  return err;
}
static void
tree_make_forwarder_block (edge fallthru)
{
  edge e;
  basic_block dummy, bb;
  tree phi, new_phi, var, prev, next;
  dummy = fallthru->src;
  bb = fallthru->dest;
  if (!bb->pred->pred_next)
    return;
  for (phi = phi_nodes (dummy); phi; phi = (((phi))->common.chain))
    {
      var = get_def_from_ptr (get_phi_result_ptr (phi));
      new_phi = create_phi_node (var, bb);
      (var)->common.chain = new_phi;
      ((*((get_phi_result_ptr (phi)).def)) = ((make_ssa_name ((var)->ssa_name.var, phi))));
      add_phi_arg (&new_phi, get_def_from_ptr (get_phi_result_ptr (phi)), fallthru);
    }
  prev = ((void *)0);
  for (phi = phi_nodes (bb); phi; phi = next)
    {
      next = (((phi))->common.chain);
      (((phi))->common.chain) = prev;
      prev = phi;
    }
  set_phi_nodes (bb, prev);
  for (e = bb->pred; e; e = e->pred_next)
    {
      if (e == fallthru)
 continue;
      for (phi = phi_nodes (bb), var = ((e)->insns.t);
    phi;
    phi = (((phi))->common.chain), var = ((var)->common.chain))
 add_phi_arg (&phi, ((var)->list.value), e);
      ((e)->insns.t) = ((void *)0);
    }
}
static unsigned char
tree_forwarder_block_p (basic_block bb)
{
  block_stmt_iterator bsi;
  edge e;
  if (! bb_ann (bb)->forwardable)
    return 0;
  if (!bb->succ
      || bb->succ->succ_next
      || bb->succ->dest == EXIT_BLOCK_PTR
      || (bb->succ->flags & 2)
      || bb == ENTRY_BLOCK_PTR)
    {
      bb_ann (bb)->forwardable = 0;
      return 0;
    }
  for (e = ENTRY_BLOCK_PTR->succ; e; e = e->succ_next)
    if (e->dest == bb)
      {
 bb_ann (bb)->forwardable = 0;
 return 0;
      }
  if (phi_nodes (bb))
    {
      bb_ann (bb)->forwardable = 0;
      return 0;
    }
  for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))
    {
      tree stmt = bsi_stmt (bsi);
      switch (((enum tree_code) (stmt)->common.code))
 {
 case LABEL_EXPR:
   if ((((((stmt))->exp.operands[0]))->decl.nonlocal_flag))
     return 0;
   break;
 default:
   bb_ann (bb)->forwardable = 0;
   return 0;
 }
    }
  return 1;
}
static unsigned char
thread_jumps (void)
{
  edge e, next, last, old;
  basic_block bb, dest, tmp;
  tree phi;
  int arg;
  unsigned char retval = 0;
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    bb_ann (bb)->forwardable = 1;
  for (bb = ENTRY_BLOCK_PTR; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      if (!bb->pred)
 continue;
      if (tree_forwarder_block_p (bb))
 continue;
      bb_ann (bb)->forwardable = 0;
      for (e = bb->succ; e; e = next)
 {
   next = e->succ_next;
   if ((e->flags & 2)
       || !tree_forwarder_block_p (e->dest))
     continue;
   last = e->dest->succ;
   bb_ann (e->dest)->forwardable = 0;
   for (dest = e->dest->succ->dest;
        tree_forwarder_block_p (dest);
        last = dest->succ,
        dest = dest->succ->dest)
     {
       if (!bb_ann (dest)->forwardable)
  break;
       if (dest->succ->dest == EXIT_BLOCK_PTR)
  break;
       bb_ann (dest)->forwardable = 0;
     }
   for (tmp = e->dest;
        tmp != dest;
        tmp = tmp->succ->dest)
     bb_ann (tmp)->forwardable = 1;
   if (dest == e->dest)
     continue;
   old = find_edge (bb, dest);
   if (old)
     {
       if (!phi_alternatives_equal (dest, last, old))
  {
    dest = last->src;
    if (dest == e->dest)
      continue;
    old = find_edge (bb, dest);
  }
     }
   retval = 1;
   e = redirect_edge_and_branch (e, dest);
   free_dominance_info (CDI_DOMINATORS);
   if (!old)
     {
       for (phi = phi_nodes (dest); phi; phi = (((phi))->common.chain))
  {
    arg = phi_arg_from_edge (phi, last);
    if (arg < 0)
      fancy_abort ("gcc.c", 103146, "?");
    add_phi_arg (&phi, get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((arg)))), e);
  }
     }
 }
      bb_ann (bb)->forwardable = 1;
    }
  return retval;
}
tree
tree_block_label (basic_block bb)
{
  block_stmt_iterator i, s = bsi_start (bb);
  unsigned char first = 1;
  tree label, stmt;
  for (i = s; !bsi_end_p (i); first = 0, bsi_next (&i))
    {
      stmt = bsi_stmt (i);
      if (((enum tree_code) (stmt)->common.code) != LABEL_EXPR)
 break;
      label = (((stmt))->exp.operands[0]);
      if (!((label)->decl.nonlocal_flag))
 {
   if (!first)
     bsi_move_before (&i, &s);
   return label;
 }
    }
  label = create_artificial_label ();
  stmt = build1_stat (LABEL_EXPR,global_trees[TI_VOID_TYPE],label );
  bsi_insert_before (&s, stmt, BSI_NEW_STMT);
  return label;
}
static edge
tree_try_redirect_by_replacing_jump (edge e, basic_block target)
{
  basic_block src = e->src;
  edge tmp;
  block_stmt_iterator b;
  tree stmt;
  for (tmp = src->succ; tmp; tmp = tmp->succ_next)
    if (tmp->dest != target && tmp != e)
      break;
  if (tmp)
    return ((void *)0);
  b = bsi_last (src);
  if (bsi_end_p (b))
    return ((void *)0);
  stmt = bsi_stmt (b);
  if (((enum tree_code) (stmt)->common.code) == COND_EXPR
      || ((enum tree_code) (stmt)->common.code) == SWITCH_EXPR)
    {
      bsi_remove (&b);
      e = ssa_redirect_edge (e, target);
      e->flags = 1;
      return e;
    }
  return ((void *)0);
}
static edge
tree_redirect_edge_and_branch (edge e, basic_block dest)
{
  basic_block bb = e->src;
  block_stmt_iterator bsi;
  edge ret;
  tree label, stmt;
  if (e->flags & (4 | 8))
    return ((void *)0);
  if (e->src != ENTRY_BLOCK_PTR
      && (ret = tree_try_redirect_by_replacing_jump (e, dest)))
    return ret;
  if (e->dest == dest)
    return ((void *)0);
  label = tree_block_label (dest);
  bsi = bsi_last (bb);
  stmt = bsi_end_p (bsi) ? ((void *)0) : bsi_stmt (bsi);
  switch (stmt ? ((enum tree_code) (stmt)->common.code) : ERROR_MARK)
    {
    case COND_EXPR:
      stmt = (e->flags & 1024
       ? ((((stmt))->exp.operands[1]))
       : ((((stmt))->exp.operands[2])));
      (((stmt))->exp.operands[0]) = label;
      break;
    case GOTO_EXPR:
      fancy_abort ("gcc.c", 103270, "?");
    case SWITCH_EXPR:
      {
 tree vec = (((stmt))->exp.operands[2]);
 size_t i, n = ((vec)->vec.length);
 for (i = 0; i < n; ++i)
   {
     tree elt = ((vec)->vec.a[i]);
     if (label_to_block ((((elt))->exp.operands[2])) == e->dest)
       (((elt))->exp.operands[2]) = label;
   }
      }
      break;
    case RETURN_EXPR:
      bsi_remove (&bsi);
      e->flags |= 1;
      break;
    default:
      if (!(e->flags & 1))
 fancy_abort ("gcc.c", 103295, "?");
      break;
    }
  e = ssa_redirect_edge (e, dest);
  return e;
}
static basic_block
tree_redirect_edge_and_branch_force (edge e, basic_block dest)
{
  e = tree_redirect_edge_and_branch (e, dest);
  if (!e)
    fancy_abort ("gcc.c", 103315, "?");
  return ((void *)0);
}
static basic_block
tree_split_block (basic_block bb, void *stmt)
{
  block_stmt_iterator bsi, bsi_tgt;
  tree act;
  basic_block new_bb;
  edge e;
  new_bb = create_empty_bb (bb);
  new_bb->succ = bb->succ;
  bb->succ = ((void *)0);
  for (e = new_bb->succ; e; e = e->succ_next)
    e->src = new_bb;
  if (stmt && ((enum tree_code) ((tree) stmt)->common.code) == LABEL_EXPR)
    stmt = ((void *)0);
  for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))
    {
      act = bsi_stmt (bsi);
      if (((enum tree_code) (act)->common.code) == LABEL_EXPR)
 continue;
      if (!stmt)
 break;
      if (stmt == act)
 {
   bsi_next (&bsi);
   break;
 }
    }
  bsi_tgt = bsi_start (new_bb);
  while (!bsi_end_p (bsi))
    {
      act = bsi_stmt (bsi);
      bsi_remove (&bsi);
      bsi_insert_after (&bsi_tgt, act, BSI_NEW_STMT);
    }
  return new_bb;
}
static unsigned char
tree_move_block_after (basic_block bb, basic_block after)
{
  if (bb->prev_bb == after)
    return 1;
  unlink_block (bb);
  link_block (bb, after);
  return 1;
}
static unsigned char
tree_can_duplicate_bb_p (basic_block bb )
{
  return 1;
}
static basic_block
tree_duplicate_bb (basic_block bb)
{
  basic_block new_bb;
  block_stmt_iterator bsi, bsi_tgt;
  new_bb = create_empty_bb (EXIT_BLOCK_PTR->prev_bb);
  bsi_tgt = bsi_start (new_bb);
  for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))
    {
      tree stmt = bsi_stmt (bsi);
      tree copy;
      if (((enum tree_code) (stmt)->common.code) == LABEL_EXPR)
 continue;
      copy = unshare_expr (stmt);
      get_stmt_ann (copy);
      copy_virtual_operands (copy, stmt);
      bsi_insert_after (&bsi_tgt, copy, BSI_NEW_STMT);
    }
  return new_bb;
}
void
dump_function_to_file (tree fn, FILE *file, int flags)
{
  tree arg, vars, var;
  unsigned char ignore_topmost_bind = 0, any_var = 0;
  basic_block bb;
  tree chain;
  fprintf (file, "%s (", lang_hooks.decl_printable_name (fn, 2));
  arg = ((fn)->decl.arguments);
  while (arg)
    {
      print_generic_expr (file, arg, dump_flags);
      if (((arg)->common.chain))
 fprintf (file, ", ");
      arg = ((arg)->common.chain);
    }
  fprintf (file, ")\n");
  if (flags & (1 << 2))
    {
      dump_node (fn, (1 << 1) | flags, file);
      return;
    }
  if (cfun && cfun->unexpanded_var_list)
    {
      ignore_topmost_bind = 1;
      fprintf (file, "{\n");
      for (vars = cfun->unexpanded_var_list; vars; vars = ((vars)->common.chain))
 {
   var = ((vars)->list.value);
   print_generic_decl (file, var, flags);
   fprintf (file, "\n");
   any_var = 1;
 }
    }
  if (basic_block_info)
    {
      if (!ignore_topmost_bind)
 fprintf (file, "{\n");
      if (any_var && n_basic_blocks)
 fprintf (file, "\n");
      for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
 dump_generic_bb (file, bb, 2, flags);
      fprintf (file, "}\n");
    }
  else
    {
      int indent;
      chain = ((fn)->decl.saved_tree);
      if (((enum tree_code) (chain)->common.code) == BIND_EXPR)
 {
   if (ignore_topmost_bind)
     {
       chain = ((((chain))->exp.operands[1]));
       indent1 = 2;
     }
   else
     indent1 = 0;
 }
      else
 {
   if (!ignore_topmost_bind)
     fprintf (file, "{\n");
   indent1 = 2;
 }
      if (any_var)
 fprintf (file, "\n");
      print_generic_stmt_indented (file, chain, flags, indent1);
      if (ignore_topmost_bind)
 fprintf (file, "}\n");
    }
  fprintf (file, "\n\n");
}
static void print_loop (FILE *, struct loop *, int);
static void print_pred_bbs (FILE *, edge);
static void print_succ_bbs (FILE *, edge);
static void
print_pred_bbs (FILE *file, edge e)
{
  if (e == ((void *)0))
    return;
  else if (e->pred_next == ((void *)0))
    fprintf (file, "bb_%d", e->src->index);
  else
    {
      fprintf (file, "bb_%d, ", e->src->index);
      print_pred_bbs (file, e->pred_next);
    }
}
static void
print_succ_bbs (FILE *file, edge e)
{
  if (e == ((void *)0))
    return;
  else if (e->succ_next == ((void *)0))
    fprintf (file, "bb_%d", e->dest->index);
  else
    {
      fprintf (file, "bb_%d, ", e->dest->index);
      print_succ_bbs (file, e->succ_next);
    }
}
static void
print_loop (FILE *file, struct loop *loop, int indent1)
{
  char *s_indent1;
  basic_block bb;
  if (loop == ((void *)0))
    return;
  s_indent1 = (char *) C_alloca((size_t) indent1 + 1);
  memset ((void *) s_indent1, ' ', (size_t) indent1);
  s_indent1[indent1] = '\0';
  fprintf (file, "%sloop_%d\n", s_indent1, loop->num);
  fprintf (file, "%s{\n", s_indent1);
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    if (bb->loop_father == loop)
      {
 fprintf (file, "%s  bb_%d (preds = {", s_indent1, bb->index);
 print_pred_bbs (file, bb->pred);
 fprintf (file, "}, succs = {");
 print_succ_bbs (file, bb->succ);
 fprintf (file, "})\n");
 fprintf (file, "%s  {\n", s_indent1);
 tree_dump_bb (bb, file, indent1 + 4);
 fprintf (file, "%s  }\n", s_indent1);
      }
  print_loop (file, loop->inner, indent1 + 2);
  fprintf (file, "%s}\n", s_indent1);
  print_loop (file, loop->next, indent1);
}
void
print_loop_ir (FILE *file)
{
  basic_block bb;
  bb = (((basic_block_info)->data.bb[(0)]));
  if (bb && bb->loop_father)
    print_loop (file, bb->loop_father, 0);
}
void
debug_loop_ir (void)
{
  print_loop_ir (stderr);
}
static unsigned char
tree_block_ends_with_call_p (basic_block bb)
{
  block_stmt_iterator bsi = bsi_last (bb);
  tree t = tsi_stmt (bsi.tsi);
  if (((enum tree_code) (t)->common.code) == RETURN_EXPR && ((t)->exp.operands[0]))
    t = ((t)->exp.operands[0]);
  if (((enum tree_code) (t)->common.code) == MODIFY_EXPR)
    t = ((t)->exp.operands[1]);
  return ((enum tree_code) (t)->common.code) == CALL_EXPR;
}
static unsigned char
tree_block_ends_with_condjump_p (basic_block bb)
{
  tree stmt = tsi_stmt (bsi_last (bb).tsi);
  return (((enum tree_code) (stmt)->common.code) == COND_EXPR);
}
static unsigned char
need_fake_tree_edge_p (tree t)
{
  if (((enum tree_code) (t)->common.code) == RETURN_EXPR && ((t)->exp.operands[0]))
    t = ((t)->exp.operands[0]);
  if (((enum tree_code) (t)->common.code) == MODIFY_EXPR)
    t = ((t)->exp.operands[1]);
  if (((enum tree_code) (t)->common.code) == CALL_EXPR
      && !(call_expr_flags (t) &
     (2 | 64 | 1024)))
    return 1;
  if (((enum tree_code) (t)->common.code) == ASM_EXPR
       && ((((t)->common.public_flag)) || (((t)->common.static_flag))))
    return 1;
  return 0;
}
static int
tree_flow_call_edges_add (sbitmap blocks)
{
  int i;
  int blocks_split = 0;
  int last_bb = last_basic_block;
  unsigned char check_last_block = 0;
  if (n_basic_blocks == 0)
    return 0;
  if (! blocks)
    check_last_block = 1;
  else
    check_last_block = ((blocks)->elms [(EXIT_BLOCK_PTR->prev_bb->index) / ((unsigned) (8 * 4))] >> (EXIT_BLOCK_PTR->prev_bb->index) % ((unsigned) (8 * 4)) & 1);
  if (check_last_block)
    {
      basic_block bb = EXIT_BLOCK_PTR->prev_bb;
      block_stmt_iterator bsi = bsi_last (bb);
      tree t = (tree) ((void *)0);
      if (!bsi_end_p (bsi))
 t = bsi_stmt (bsi);
      if (need_fake_tree_edge_p (t))
 {
   edge e;
   for (e = bb->succ; e; e = e->succ_next)
     if (e->dest == EXIT_BLOCK_PTR)
       {
  bsi_insert_on_edge (e, build_empty_stmt ());
  bsi_commit_edge_inserts ((int *)((void *)0));
  break;
       }
 }
    }
  for (i = 0; i < last_bb; i++)
    {
      basic_block bb = (((basic_block_info)->data.bb[(i)]));
      block_stmt_iterator bsi;
      tree stmt, last_stmt;
      if (!bb)
 continue;
      if (blocks && !((blocks)->elms [(i) / ((unsigned) (8 * 4))] >> (i) % ((unsigned) (8 * 4)) & 1))
 continue;
      bsi = bsi_last (bb);
      if (!bsi_end_p (bsi))
 {
   last_stmt = bsi_stmt (bsi);
   do
     {
       stmt = bsi_stmt (bsi);
       if (need_fake_tree_edge_p (stmt))
  {
    edge e;
    if (stmt != last_stmt)
      {
        e = split_block (bb, stmt);
        if (e)
   blocks_split++;
      }
    make_edge (bb, EXIT_BLOCK_PTR, 16);
  }
       bsi_prev (&bsi);
     }
   while (!bsi_end_p (bsi));
 }
    }
  if (blocks_split)
    verify_flow_info ();
  return blocks_split;
}
unsigned char
tree_purge_dead_eh_edges (basic_block bb)
{
  unsigned char changed = 0;
  edge e, next;
  tree stmt = last_stmt (bb);
  if (stmt && tree_can_throw_internal (stmt))
    return 0;
  for (e = bb->succ; e ; e = next)
    {
      next = e->succ_next;
      if (e->flags & 8)
 {
   ssa_remove_edge (e);
   changed = 1;
 }
    }
  return changed;
}
unsigned char
tree_purge_all_dead_eh_edges (bitmap blocks)
{
  unsigned char changed = 0;
  size_t i;
  do { bitmap_element *ptr_ = (blocks)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (i) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); { changed |= tree_purge_dead_eh_edges ((((basic_block_info)->data.bb[(i)]))); }; if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
                                                               ;
  return changed;
}
struct cfg_hooks tree_cfg_hooks = {
  "tree",
  tree_verify_flow_info,
  tree_dump_bb,
  create_bb,
  tree_redirect_edge_and_branch,
  tree_redirect_edge_and_branch_force,
  remove_bb,
  tree_split_block,
  tree_move_block_after,
  tree_can_merge_blocks_p,
  tree_merge_blocks,
  tree_predict_edge,
  tree_predicted_by_p,
  tree_can_duplicate_bb_p,
  tree_duplicate_bb,
  tree_split_edge,
  tree_make_forwarder_block,
  ((void *)0),
  tree_block_ends_with_call_p,
  tree_block_ends_with_condjump_p,
  tree_flow_call_edges_add
};
static void
split_critical_edges (void)
{
  basic_block bb;
  edge e;
  for (bb = ENTRY_BLOCK_PTR; bb; bb = bb->next_bb)
    {
      for (e = bb->succ; e ; e = e->succ_next)
 if (((e)->src->succ->succ_next && (e)->dest->pred->pred_next) && !(e->flags & 2))
   {
     split_edge (e);
   }
    }
}
struct tree_opt_pass pass_split_crit_edges =
{
  "crited",
  ((void *)0),
  split_critical_edges,
  ((void *)0),
  ((void *)0),
  0,
  TV_TREE_SPLIT_EDGES,
  (1 << 3),
  (1 << 7),
  0,
  0,
  (1 << 0)
};
static void
execute_warn_function_return (void)
{
  location_t *locus;
  tree last;
  edge e;
  if (warn_missing_noreturn
      && !((cfun->decl)->common.volatile_flag)
      && EXIT_BLOCK_PTR->pred == ((void *)0)
      && !lang_hooks.function.missing_noreturn_ok_p (cfun->decl))
    warning ("%Jfunction might be possible candidate for attribute `noreturn'",
      cfun->decl);
  if (((cfun->decl)->common.volatile_flag)
      && EXIT_BLOCK_PTR->pred != ((void *)0))
    {
      locus = ((void *)0);
      for (e = EXIT_BLOCK_PTR->pred; e ; e = e->pred_next)
 {
   last = last_stmt (e->src);
   if (((enum tree_code) (last)->common.code) == RETURN_EXPR
       && (locus = ((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (last)->common.code))])) != 0) ? (last)->exp.locus : (location_t *)((void *)0))) != ((void *)0))
     break;
 }
      if (!locus)
 locus = &cfun->function_end_locus;
      warning ("%H`noreturn' function does return", locus);
    }
  else if (warn_return_type
    && EXIT_BLOCK_PTR->pred != ((void *)0)
    && !(((enum tree_code) (((((cfun->decl)->common.type))->common.type))->common.code) == VOID_TYPE))
    {
      for (e = EXIT_BLOCK_PTR->pred; e ; e = e->pred_next)
 {
   tree last = last_stmt (e->src);
   if (((enum tree_code) (last)->common.code) == RETURN_EXPR
       && ((last)->exp.operands[0]) == ((void *)0))
     {
       locus = ((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (last)->common.code))])) != 0) ? (last)->exp.locus : (location_t *)((void *)0));
       if (!locus)
  locus = &cfun->function_end_locus;
       warning ("%Hcontrol reaches end of non-void function", locus);
       break;
     }
 }
    }
}
void
extract_true_false_edges_from_block (basic_block b,
         edge *true_edge,
         edge *false_edge)
{
  edge e = b->succ;
  if (e->flags & 1024)
    {
      *true_edge = e;
      *false_edge = e->succ_next;
    }
  else
    {
      *false_edge = e;
      *true_edge = e->succ_next;
    }
}
struct tree_opt_pass pass_warn_function_return =
{
  ((void *)0),
  ((void *)0),
  execute_warn_function_return,
  ((void *)0),
  ((void *)0),
  0,
  0,
  (1 << 3),
  0,
  0,
  0,
  0
};
const struct ggc_root_tab gt_ggc_r_gt_tree_cfg_h[] = {
  {
    &label_to_block_map,
    1,
    sizeof (label_to_block_map),
    &gt_ggc_mx_varray_head_tag,
    &gt_pch_nx_varray_head_tag
  },
  { ((void *)0), 0, 0, ((void *)0), ((void *)0) }
};
union alias_var_def;
struct aterm_;
struct aterm_list_a;
enum alias_var_kind
{
  ATERM_AVAR
};
struct alias_var_common
{
  enum alias_var_kind kind;
  unsigned int varnum;
  tree decl;
};
struct alias_var_aterm
{
  struct alias_var_common common;
  struct aterm_ * term;
  struct aterm_list_a * ptset;
};
union alias_var_def
{
  struct alias_var_common common;
  struct alias_var_aterm aterm;
};
typedef union alias_var_def *alias_var;
union alias_type_def;
typedef union alias_type_def *alias_type;
alias_var alias_var_new_with_aterm (tree, struct aterm_ *);
struct tree_alias_ops
{
  void (*init) (struct tree_alias_ops *);
  void (*cleanup) (struct tree_alias_ops *);
  alias_var (*add_var) (struct tree_alias_ops *, tree);
  alias_var (*add_var_same) (struct tree_alias_ops *, tree,
     alias_var);
  void (*simple_assign) (struct tree_alias_ops *, alias_var,
    alias_var);
  void (*addr_assign) (struct tree_alias_ops *, alias_var, alias_var);
  void (*ptr_assign) (struct tree_alias_ops *, alias_var, alias_var);
  void (*op_assign) (struct tree_alias_ops *, alias_var, varray_type,
       tree, bitmap);
  void (*heap_assign) (struct tree_alias_ops *, alias_var);
  void (*assign_ptr) (struct tree_alias_ops *, alias_var, alias_var);
  void (*function_def) (struct tree_alias_ops *, alias_var,
   varray_type, alias_var);
  int (*function_call) (struct tree_alias_ops *, alias_var,
   alias_var, varray_type, bitmap);
  unsigned char (*may_alias) (struct tree_alias_ops *, alias_var, alias_var);
  unsigned char (*same_points_to_set) (struct tree_alias_ops *, alias_var,
         alias_var);
  unsigned char (*empty_points_to_set) (struct tree_alias_ops *, alias_var);
  void *data;
  unsigned int ip:1;
  unsigned int ip_partial:1;
};
extern struct tree_alias_ops *current_alias_ops;
extern void init_alias_vars (void);
extern unsigned char ptr_may_alias_var (tree, tree);
extern unsigned char same_points_to_set (tree, tree);
extern unsigned char empty_points_to_set (tree);
extern const char *alias_get_name (tree);
extern tree convert_to_integer (tree, tree);
extern tree convert_to_pointer (tree, tree);
extern tree convert_to_real (tree, tree);
extern tree convert_to_complex (tree, tree);
extern tree convert_to_vector (tree, tree);
typedef struct param_info
{
  const char *const option;
  int value1;
  const char *const help;
} param_info;
extern param_info *compiler_params;
extern void add_params (const param_info params[], size_t n);
extern void set_param_value (const char *name, int value1);
typedef enum compiler_param
{
PARAM_MAX_INLINE_INSNS_SINGLE,
PARAM_MAX_INLINE_INSNS_AUTO,
PARAM_MAX_INLINE_INSNS_RECURSIVE,
PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO,
PARAM_MAX_INLINE_RECURSIVE_DEPTH,
PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO,
PARAM_MAX_INLINE_INSNS_RTL,
PARAM_MAX_DELAY_SLOT_INSN_SEARCH,
PARAM_MAX_DELAY_SLOT_LIVE_SEARCH,
PARAM_MAX_PENDING_LIST_LENGTH,
PARAM_LARGE_FUNCTION_INSNS,
PARAM_LARGE_FUNCTION_GROWTH,
PARAM_INLINE_UNIT_GROWTH,
PARAM_MAX_GCSE_MEMORY,
PARAM_MAX_GCSE_PASSES,
PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION,
PARAM_GCSE_AFTER_RELOAD_CRITICAL_FRACTION,
PARAM_MAX_UNROLLED_INSNS,
PARAM_MAX_AVERAGE_UNROLLED_INSNS,
PARAM_MAX_UNROLL_TIMES,
PARAM_MAX_PEELED_INSNS,
PARAM_MAX_PEEL_TIMES,
PARAM_MAX_COMPLETELY_PEELED_INSNS,
PARAM_MAX_COMPLETELY_PEEL_TIMES,
PARAM_MAX_ONCE_PEELED_INSNS,
PARAM_MAX_UNSWITCH_INSNS,
PARAM_MAX_UNSWITCH_LEVEL,
PARAM_MAX_SMS_LOOP_NUMBER,
PARAM_SMS_MAX_II_FACTOR,
PARAM_SMS_DFA_HISTORY,
PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD,
HOT_BB_COUNT_FRACTION,
HOT_BB_FREQUENCY_FRACTION,
TRACER_DYNAMIC_COVERAGE_FEEDBACK,
TRACER_DYNAMIC_COVERAGE,
TRACER_MAX_CODE_GROWTH,
TRACER_MIN_BRANCH_RATIO,
TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK,
TRACER_MIN_BRANCH_PROBABILITY,
PARAM_MAX_CROSSJUMP_EDGES,
PARAM_MAX_CSE_PATH_LENGTH,
PARAM_GLOBAL_VAR_THRESHOLD,
PARAM_MAX_CSELIB_MEMORY_LOCATIONS,
GGC_MIN_EXPAND,
GGC_MIN_HEAPSIZE,
PARAM_MAX_RELOAD_SEARCH_INSNS,
PARAM_MAX_ALIASED_VOPS,
PARAM_MAX_SCHED_REGION_BLOCKS,
PARAM_MAX_SCHED_REGION_INSNS,
  LAST_PARAM
} compiler_param;
struct dfa_stats_d
{
  long num_stmt_anns;
  long num_var_anns;
  long num_defs;
  long num_uses;
  long num_phis;
  long num_phi_args;
  int max_num_phi_args;
  long num_v_may_defs;
  long num_vuses;
  long num_v_must_defs;
};
struct walk_state
{
  htab_t vars_found;
};
static void collect_dfa_stats (struct dfa_stats_d *);
static tree collect_dfa_stats_r (tree *, int *, void *);
static void add_immediate_use (tree, tree);
static tree find_vars_r (tree *, int *, void *);
static void add_referenced_var (tree, struct walk_state *);
static void compute_immediate_uses_for_phi (tree, unsigned char (*)(tree));
static void compute_immediate_uses_for_stmt (tree, int, unsigned char (*)(tree));
static void find_hidden_use_vars (tree);
static tree find_hidden_use_vars_r (tree *, int *, void *);
varray_type referenced_vars;
static void
find_referenced_vars (void)
{
  htab_t vars_found;
  basic_block bb;
  block_stmt_iterator si;
  struct walk_state walk_state;
  tree block;
  block = ((current_function_decl)->decl.initial);
  while (block)
    {
      find_hidden_use_vars (block);
      block = (((block))->common.chain);
    }
  vars_found = htab_create (50, htab_hash_pointer, htab_eq_pointer, ((void *)0));
  memset (&walk_state, 0, sizeof (walk_state));
  walk_state.vars_found = vars_found;
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    for (si = bsi_start (bb); !bsi_end_p (si); bsi_next (&si))
      {
 tree *stmt_p = bsi_stmt_ptr (si);
 walk_tree (stmt_p, find_vars_r, &walk_state, ((void *)0));
      }
  htab_delete (vars_found);
}
struct tree_opt_pass pass_referenced_vars =
{
  ((void *)0),
  ((void *)0),
  find_referenced_vars,
  ((void *)0),
  ((void *)0),
  0,
  0,
  (1 << 2) | (1 << 3),
  (1 << 4),
  0,
  0,
  0
};
void
compute_immediate_uses (int flags, unsigned char (*calc_for)(tree))
{
  basic_block bb;
  block_stmt_iterator si;
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      tree phi;
      for (phi = phi_nodes (bb); phi; phi = (((phi))->common.chain))
 compute_immediate_uses_for_phi (phi, calc_for);
      for (si = bsi_start (bb); !bsi_end_p (si); bsi_next (&si))
        {
   tree stmt = bsi_stmt (si);
   get_stmt_operands (stmt);
   compute_immediate_uses_for_stmt (stmt, flags, calc_for);
 }
    }
}
static void
free_df_for_stmt (tree stmt)
{
  stmt_ann_t ann = stmt_ann (stmt);
  if (ann && ann->df)
    {
      if (ann->df->immediate_uses)
 ggc_free (ann->df->immediate_uses);
      ggc_free (ann->df);
      ann->df = ((void *)0);
    }
}
void
free_df (void)
{
  basic_block bb;
  block_stmt_iterator si;
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      tree phi;
      for (phi = phi_nodes (bb); phi; phi = (((phi))->common.chain))
 free_df_for_stmt (phi);
      for (si = bsi_start (bb); !bsi_end_p (si); bsi_next (&si))
        {
   tree stmt = bsi_stmt (si);
   free_df_for_stmt (stmt);
 }
    }
}
static void
compute_immediate_uses_for_phi (tree phi, unsigned char (*calc_for)(tree))
{
  int i;
  for (i = 0; i < (phi)->phi.num_args; i++)
    {
      tree arg = get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((i))));
      if (((enum tree_code) (arg)->common.code) == SSA_NAME && (!calc_for || calc_for (arg)))
 {
   tree imm_rdef_stmt = (get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((i)))))->common.chain;
   if (!(((enum tree_code) (imm_rdef_stmt)->common.code) == NOP_EXPR && (((enum tree_code) (((imm_rdef_stmt)->common.type))->common.code) == VOID_TYPE) && integer_zerop (((imm_rdef_stmt)->exp.operands[0]))))
     add_immediate_use (imm_rdef_stmt, phi);
 }
    }
}
static void
compute_immediate_uses_for_stmt (tree stmt, int flags, unsigned char (*calc_for)(tree))
{
  size_t i;
  use_optype uses;
  vuse_optype vuses;
  v_may_def_optype v_may_defs;
  stmt_ann_t ann;
  ann = stmt_ann (stmt);
  if (flags & 1 << 0)
    {
      uses = get_use_ops (ann);
      for (i = 0; i < ((uses) ? (uses)->num_uses : 0); i++)
 {
   tree use = (get_use_from_ptr (get_use_op_ptr (((uses)), ((i)))));
   tree imm_stmt = (use)->common.chain;
   if (!(((enum tree_code) (imm_stmt)->common.code) == NOP_EXPR && (((enum tree_code) (((imm_stmt)->common.type))->common.code) == VOID_TYPE) && integer_zerop (((imm_stmt)->exp.operands[0]))) && (!calc_for || calc_for (use)))
     add_immediate_use (imm_stmt, stmt);
 }
    }
  if (flags & 1 << 1)
    {
      vuses = get_vuse_ops (ann);
      for (i = 0; i < ((vuses) ? (vuses)->num_vuses : 0); i++)
 {
   tree vuse = (get_use_from_ptr (get_vuse_op_ptr (((vuses)), ((i)))));
   tree imm_rdef_stmt = (vuse)->common.chain;
   if (!(((enum tree_code) (imm_rdef_stmt)->common.code) == NOP_EXPR && (((enum tree_code) (((imm_rdef_stmt)->common.type))->common.code) == VOID_TYPE) && integer_zerop (((imm_rdef_stmt)->exp.operands[0]))) && (!calc_for || calc_for (vuse)))
     add_immediate_use (imm_rdef_stmt, stmt);
 }
      v_may_defs = get_v_may_def_ops (ann);
      for (i = 0; i < ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0); i++)
 {
   tree vuse = (get_use_from_ptr (get_v_may_def_op_ptr (((v_may_defs)), ((i)))));
   tree imm_rdef_stmt = (vuse)->common.chain;
   if (!(((enum tree_code) (imm_rdef_stmt)->common.code) == NOP_EXPR && (((enum tree_code) (((imm_rdef_stmt)->common.type))->common.code) == VOID_TYPE) && integer_zerop (((imm_rdef_stmt)->exp.operands[0]))) && (!calc_for || calc_for (vuse)))
     add_immediate_use (imm_rdef_stmt, stmt);
 }
    }
}
static void
add_immediate_use (tree stmt, tree use_stmt)
{
  stmt_ann_t ann = get_stmt_ann (stmt);
  struct dataflow_d *df;
  df = ann->df;
  if (df == ((void *)0))
    {
      df = ann->df = ggc_alloc_stat (sizeof (struct dataflow_d) );
      memset ((void *) df, 0, sizeof (struct dataflow_d));
      df->uses[0] = use_stmt;
      return;
    }
  if (!df->uses[1])
    {
      df->uses[1] = use_stmt;
      return;
    }
  if (ann->df->immediate_uses == ((void *)0))
    ann->df->immediate_uses = varray_init (4, VARRAY_DATA_TREE, "immediate_uses");
  do { if ((ann->df->immediate_uses)->elements_used >= (ann->df->immediate_uses)->num_elements) (((ann->df->immediate_uses)) = varray_grow ((ann->df->immediate_uses), 2 * (ann->df->immediate_uses)->num_elements)); (ann->df->immediate_uses)->data.tree1[(ann->df->immediate_uses)->elements_used++] = (use_stmt); } while (0);
}
static void
redirect_immediate_use (tree use, tree old, tree new)
{
  tree imm_stmt = (use)->common.chain;
  struct dataflow_d *df = get_stmt_ann (imm_stmt)->df;
  unsigned int num_uses = num_immediate_uses (df);
  unsigned int i;
  for (i = 0; i < num_uses; i++)
    {
      if (immediate_use (df, i) == old)
 {
   if (i == 0 || i == 1)
     df->uses[i] = new;
   else
     ((df->immediate_uses)->data.tree1[i - 2]) = new;
 }
    }
}
void
redirect_immediate_uses (tree old, tree new)
{
  stmt_ann_t ann = get_stmt_ann (old);
  use_optype uses = get_use_ops (ann);
  vuse_optype vuses = get_vuse_ops (ann);
  v_may_def_optype v_may_defs = get_v_may_def_ops (ann);
  unsigned int i;
  for (i = 0; i < ((uses) ? (uses)->num_uses : 0); i++)
    redirect_immediate_use ((get_use_from_ptr (get_use_op_ptr (((uses)), ((i))))), old, new);
  for (i = 0; i < ((vuses) ? (vuses)->num_vuses : 0); i++)
    redirect_immediate_use ((get_use_from_ptr (get_vuse_op_ptr (((vuses)), ((i))))), old, new);
  for (i = 0; i < ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0); i++)
    redirect_immediate_use ((get_use_from_ptr (get_v_may_def_op_ptr (((v_may_defs)), ((i))))), old, new);
}
var_ann_t
create_var_ann (tree t)
{
  var_ann_t ann;
  ann = ggc_alloc_stat (sizeof (*ann) );
  memset ((void *) ann, 0, sizeof (*ann));
  ann->common.type = VAR_ANN;
  t->common.ann = (tree_ann_t) ann;
  return ann;
}
stmt_ann_t
create_stmt_ann (tree t)
{
  stmt_ann_t ann;
  ann = ggc_alloc_stat (sizeof (*ann) );
  memset ((void *) ann, 0, sizeof (*ann));
  ann->common.type = STMT_ANN;
  ann->modified = 1;
  t->common.ann = (tree_ann_t) ann;
  return ann;
}
tree_ann_t
create_tree_ann (tree t)
{
  tree_ann_t ann;
  ann = ggc_alloc_stat (sizeof (*ann) );
  memset ((void *) ann, 0, sizeof (*ann));
  ann->common.type = TREE_ANN_COMMON;
  t->common.ann = ann;
  return ann;
}
tree
make_rename_temp (tree type, const char *prefix)
{
  tree t = create_tmp_var (type, prefix);
  add_referenced_tmp_var (t);
  bitmap_set_bit (vars_to_rename, var_ann (t)->uid);
  return t;
}
void dump_variable_dfa (FILE *file, tree var);
void
dump_referenced_vars (FILE *file)
{
  size_t i;
  fprintf (file, "\nReferenced variables in %s: %u\n\n",
    get_name (current_function_decl), (unsigned) ((referenced_vars)->elements_used));
  for (i = 0; i < ((referenced_vars)->elements_used); i++)
    {
      tree var = ((referenced_vars)->data.tree1[i]);
      fprintf (file, "Variable: ");
      dump_variable_dfa (file, var);
      fprintf (file, "\n");
    }
}
void
debug_referenced_vars (void)
{
  dump_referenced_vars (stderr);
}
void
dump_variable_dfa (FILE *file, tree var)
{
  var_ann_t ann;
  if (var == (tree) ((void *)0))
    {
      fprintf (file, "<nil>");
      return;
    }
  print_generic_expr (file, var, dump_flags);
  if (((enum tree_code) (var)->common.code) == SSA_NAME)
    var = (var)->ssa_name.var;
  ann = var_ann (var);
  fprintf (file, ", UID %u", (unsigned) ann->uid);
  if (ann->has_hidden_use)
    fprintf (file, ", has hidden uses");
  if (ann->type_mem_tag)
    {
      fprintf (file, ", type memory tag: ");
      print_generic_expr (file, ann->type_mem_tag, dump_flags);
    }
  if (ann->is_alias_tag)
    fprintf (file, ", is an alias tag");
  if (needs_to_live_in_memory (var))
    fprintf (file, ", is %s", ((var)->common.static_flag) ? "static" : "global");
  if (is_call_clobbered (var))
    fprintf (file, ", call clobbered");
  if (ann->default_def)
    {
      fprintf (file, ", default def: ");
      print_generic_expr (file, ann->default_def, dump_flags);
    }
  if (ann->may_aliases)
    {
      fprintf (file, ", may aliases: ");
      dump_may_aliases_for (file, var);
    }
  fprintf (file, "\n");
}
void
debug_variable (tree var)
{
  dump_variable_dfa (stderr, var);
}
void
dump_immediate_uses (FILE *file)
{
  basic_block bb;
  block_stmt_iterator si;
  const char *funcname
    = lang_hooks.decl_printable_name (current_function_decl, 2);
  fprintf (file, "\nDef-use edges for function %s\n", funcname);
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      tree phi;
      for (phi = phi_nodes (bb); phi; phi = (((phi))->common.chain))
 dump_immediate_uses_for (file, phi);
      for (si = bsi_start (bb); !bsi_end_p (si); bsi_next (&si))
 dump_immediate_uses_for (file, bsi_stmt (si));
    }
  fprintf (file, "\n");
}
void
debug_immediate_uses (void)
{
  dump_immediate_uses (stderr);
}
void
dump_immediate_uses_for (FILE *file, tree stmt)
{
  dataflow_t df = get_immediate_uses (stmt);
  int num_imm_uses = num_immediate_uses (df);
  if (num_imm_uses > 0)
    {
      int i;
      fprintf (file, "-> ");
      print_generic_stmt (file, stmt, (1 << 1));
      fprintf (file, "\n");
      for (i = 0; i < num_imm_uses; i++)
 {
   fprintf (file, "\t");
   print_generic_stmt (file, immediate_use (df, i), (1 << 1));
   fprintf (file, "\n");
 }
      fprintf (file, "\n");
    }
}
void
debug_immediate_uses_for (tree stmt)
{
  dump_immediate_uses_for (stderr, stmt);
}
void
dump_dfa_stats (FILE *file)
{
  struct dfa_stats_d dfa_stats;
  unsigned long size, total = 0;
  const char * const fmt_str = "%-30s%-13s%12s\n";
  const char * const fmt_str_1 = "%-30s%13lu%11lu%c\n";
  const char * const fmt_str_3 = "%-43s%11lu%c\n";
  const char *funcname
    = lang_hooks.decl_printable_name (current_function_decl, 2);
  collect_dfa_stats (&dfa_stats);
  fprintf (file, "\nDFA Statistics for %s\n\n", funcname);
  fprintf (file, "---------------------------------------------------------\n");
  fprintf (file, fmt_str, "", "  Number of  ", "Memory");
  fprintf (file, fmt_str, "", "  instances  ", "used ");
  fprintf (file, "---------------------------------------------------------\n");
  size = ((referenced_vars)->elements_used) * sizeof (tree);
  total += size;
  fprintf (file, fmt_str_1, "Referenced variables", ((referenced_vars)->elements_used),
    ((unsigned long) ((size) < 1024*10 ? (size) : ((size) < 1024*1024*10 ? (size) / 1024 : (size) / (1024*1024)))), ((size) < 1024*10 ? 'b' : ((size) < 1024*1024*10 ? 'k' : 'M')));
  size = dfa_stats.num_stmt_anns * sizeof (struct stmt_ann_d);
  total += size;
  fprintf (file, fmt_str_1, "Statements annotated", dfa_stats.num_stmt_anns,
    ((unsigned long) ((size) < 1024*10 ? (size) : ((size) < 1024*1024*10 ? (size) / 1024 : (size) / (1024*1024)))), ((size) < 1024*10 ? 'b' : ((size) < 1024*1024*10 ? 'k' : 'M')));
  size = dfa_stats.num_var_anns * sizeof (struct var_ann_d);
  total += size;
  fprintf (file, fmt_str_1, "Variables annotated", dfa_stats.num_var_anns,
    ((unsigned long) ((size) < 1024*10 ? (size) : ((size) < 1024*1024*10 ? (size) / 1024 : (size) / (1024*1024)))), ((size) < 1024*10 ? 'b' : ((size) < 1024*1024*10 ? 'k' : 'M')));
  size = dfa_stats.num_uses * sizeof (tree *);
  total += size;
  fprintf (file, fmt_str_1, "USE operands", dfa_stats.num_uses,
    ((unsigned long) ((size) < 1024*10 ? (size) : ((size) < 1024*1024*10 ? (size) / 1024 : (size) / (1024*1024)))), ((size) < 1024*10 ? 'b' : ((size) < 1024*1024*10 ? 'k' : 'M')));
  size = dfa_stats.num_defs * sizeof (tree *);
  total += size;
  fprintf (file, fmt_str_1, "DEF operands", dfa_stats.num_defs,
    ((unsigned long) ((size) < 1024*10 ? (size) : ((size) < 1024*1024*10 ? (size) / 1024 : (size) / (1024*1024)))), ((size) < 1024*10 ? 'b' : ((size) < 1024*1024*10 ? 'k' : 'M')));
  size = dfa_stats.num_vuses * sizeof (tree *);
  total += size;
  fprintf (file, fmt_str_1, "VUSE operands", dfa_stats.num_vuses,
    ((unsigned long) ((size) < 1024*10 ? (size) : ((size) < 1024*1024*10 ? (size) / 1024 : (size) / (1024*1024)))), ((size) < 1024*10 ? 'b' : ((size) < 1024*1024*10 ? 'k' : 'M')));
  size = dfa_stats.num_v_may_defs * sizeof (tree *);
  total += size;
  fprintf (file, fmt_str_1, "V_MAY_DEF operands", dfa_stats.num_v_may_defs,
    ((unsigned long) ((size) < 1024*10 ? (size) : ((size) < 1024*1024*10 ? (size) / 1024 : (size) / (1024*1024)))), ((size) < 1024*10 ? 'b' : ((size) < 1024*1024*10 ? 'k' : 'M')));
  size = dfa_stats.num_v_must_defs * sizeof (tree *);
  total += size;
  fprintf (file, fmt_str_1, "V_MUST_DEF operands", dfa_stats.num_v_must_defs,
    ((unsigned long) ((size) < 1024*10 ? (size) : ((size) < 1024*1024*10 ? (size) / 1024 : (size) / (1024*1024)))), ((size) < 1024*10 ? 'b' : ((size) < 1024*1024*10 ? 'k' : 'M')));
  size = dfa_stats.num_phis * sizeof (struct tree_phi_node);
  total += size;
  fprintf (file, fmt_str_1, "PHI nodes", dfa_stats.num_phis,
    ((unsigned long) ((size) < 1024*10 ? (size) : ((size) < 1024*1024*10 ? (size) / 1024 : (size) / (1024*1024)))), ((size) < 1024*10 ? 'b' : ((size) < 1024*1024*10 ? 'k' : 'M')));
  size = dfa_stats.num_phi_args * sizeof (struct phi_arg_d);
  total += size;
  fprintf (file, fmt_str_1, "PHI arguments", dfa_stats.num_phi_args,
     ((unsigned long) ((size) < 1024*10 ? (size) : ((size) < 1024*1024*10 ? (size) / 1024 : (size) / (1024*1024)))), ((size) < 1024*10 ? 'b' : ((size) < 1024*1024*10 ? 'k' : 'M')));
  fprintf (file, "---------------------------------------------------------\n");
  fprintf (file, fmt_str_3, "Total memory used by DFA/SSA data", ((unsigned long) ((total) < 1024*10 ? (total) : ((total) < 1024*1024*10 ? (total) / 1024 : (total) / (1024*1024)))),
    ((total) < 1024*10 ? 'b' : ((total) < 1024*1024*10 ? 'k' : 'M')));
  fprintf (file, "---------------------------------------------------------\n");
  fprintf (file, "\n");
  if (dfa_stats.num_phis)
    fprintf (file, "Average number of arguments per PHI node: %.1f (max: %d)\n",
      (float) dfa_stats.num_phi_args / (float) dfa_stats.num_phis,
      dfa_stats.max_num_phi_args);
  fprintf (file, "\n");
}
void
debug_dfa_stats (void)
{
  dump_dfa_stats (stderr);
}
static void
collect_dfa_stats (struct dfa_stats_d *dfa_stats_p)
{
  htab_t htab;
  basic_block bb;
  block_stmt_iterator i;
  if (dfa_stats_p == ((void *)0))
    fancy_abort ("gcc.c", 105518, "?");
  memset ((void *)dfa_stats_p, 0, sizeof (struct dfa_stats_d));
  htab = htab_create (30, htab_hash_pointer, htab_eq_pointer, ((void *)0));
  for (i = bsi_start ((((basic_block_info)->data.bb[(0)]))); !bsi_end_p (i); bsi_next (&i))
    walk_tree (bsi_stmt_ptr (i), collect_dfa_stats_r, (void *) dfa_stats_p,
        (void *) htab);
  htab_delete (htab);
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      tree phi;
      for (phi = phi_nodes (bb); phi; phi = (((phi))->common.chain))
 {
   dfa_stats_p->num_phis++;
   dfa_stats_p->num_phi_args += (phi)->phi.num_args;
   if ((phi)->phi.num_args > dfa_stats_p->max_num_phi_args)
     dfa_stats_p->max_num_phi_args = (phi)->phi.num_args;
 }
    }
}
static tree
collect_dfa_stats_r (tree *tp, int *walk_subtrees ,
       void *data)
{
  tree t = *tp;
  struct dfa_stats_d *dfa_stats_p = (struct dfa_stats_d *)data;
  if (t->common.ann)
    {
      switch (ann_type (t->common.ann))
 {
 case STMT_ANN:
   {
     stmt_ann_t ann = (stmt_ann_t) t->common.ann;
     dfa_stats_p->num_stmt_anns++;
     dfa_stats_p->num_defs += ((get_def_ops (ann)) ? (get_def_ops (ann))->num_defs : 0);
     dfa_stats_p->num_uses += ((get_use_ops (ann)) ? (get_use_ops (ann))->num_uses : 0);
     dfa_stats_p->num_v_may_defs +=
                  ((get_v_may_def_ops (ann)) ? (get_v_may_def_ops (ann))->num_v_may_defs : 0);
     dfa_stats_p->num_vuses += ((get_vuse_ops (ann)) ? (get_vuse_ops (ann))->num_vuses : 0);
     dfa_stats_p->num_v_must_defs +=
                  ((get_v_must_def_ops (ann)) ? (get_v_must_def_ops (ann))->num_v_must_defs : 0);
     break;
   }
 case VAR_ANN:
   dfa_stats_p->num_var_anns++;
   break;
 default:
   break;
 }
    }
  return ((void *)0);
}
static tree
find_vars_r (tree *tp, int *walk_subtrees, void *data)
{
  struct walk_state *walk_state = (struct walk_state *) data;
  if ((((enum tree_code) (*tp)->common.code) == VAR_DECL || ((enum tree_code) (*tp)->common.code) == PARM_DECL || ((enum tree_code) (*tp)->common.code) == RESULT_DECL || (((enum tree_code) (*tp)->common.code) == SSA_NAME && (((enum tree_code) ((*tp)->ssa_name.var)->common.code) == VAR_DECL || ((enum tree_code) ((*tp)->ssa_name.var)->common.code) == PARM_DECL || ((enum tree_code) ((*tp)->ssa_name.var)->common.code) == RESULT_DECL))))
    add_referenced_var (*tp, walk_state);
  else if ((tree_code_type[(int) (((enum tree_code) (*tp)->common.code))] == 'd')
    || (tree_code_type[(int) (((enum tree_code) (*tp)->common.code))] == 't')
    || tree_code_type[(int) (((enum tree_code) (*tp)->common.code))] == 'c')
    *walk_subtrees = 0;
  return (tree) ((void *)0);
}
static void
add_referenced_var (tree var, struct walk_state *walk_state)
{
  void **slot;
  var_ann_t v_ann;
  v_ann = get_var_ann (var);
  if (walk_state)
    slot = htab_find_slot (walk_state->vars_found, (void *) var, INSERT);
  else
    slot = ((void *)0);
  if (slot == ((void *)0) || *slot == ((void *)0))
    {
      if (slot)
 *slot = (void *) var;
      v_ann->uid = ((referenced_vars)->elements_used);
      do { if ((referenced_vars)->elements_used >= (referenced_vars)->num_elements) (((referenced_vars)) = varray_grow ((referenced_vars), 2 * (referenced_vars)->num_elements)); (referenced_vars)->data.tree1[(referenced_vars)->elements_used++] = (var); } while (0);
      if (needs_to_live_in_memory (var))
 mark_call_clobbered (var);
      if (((var)->decl.nonlocal_flag))
 v_ann->used = 1;
    }
}
tree
get_virtual_var (tree var)
{
  while ((((enum tree_code) (var)->common.code) == NOP_EXPR || ((enum tree_code) (var)->common.code) == CONVERT_EXPR || ((enum tree_code) (var)->common.code) == NON_LVALUE_EXPR) && ((var)->exp.operands[0]) != global_trees[TI_ERROR_MARK] && (((((var)->common.type))->type.mode) == ((((((var)->exp.operands[0]))->common.type))->type.mode))) (var) = ((var)->exp.operands[0]);
  if (((enum tree_code) (var)->common.code) == SSA_NAME)
    var = (var)->ssa_name.var;
  while (((enum tree_code) (var)->common.code) == REALPART_EXPR || ((enum tree_code) (var)->common.code) == IMAGPART_EXPR
  || handled_component_p (var))
    var = ((var)->exp.operands[0]);
  return var;
}
static void
find_hidden_use_vars (tree block)
{
  tree sub, decl, tem;
  for (decl = ((block)->block.vars); decl; decl = ((decl)->common.chain))
    {
      int inside_vla = 0;
      walk_tree (&decl, find_hidden_use_vars_r, &inside_vla, ((void *)0));
    }
  for (sub = ((block)->block.subblocks); sub; sub = ((sub)->common.chain))
    find_hidden_use_vars (sub);
  tem = get_pending_sizes ();
  put_pending_sizes (tem);
  for (; tem; tem = ((tem)->common.chain))
    {
      int inside_vla = 1;
      walk_tree (&((tem)->list.value), find_hidden_use_vars_r, &inside_vla, ((void *)0));
    }
}
static tree
find_hidden_use_vars_r (tree *tp, int *walk_subtrees ,
   void *data )
{
  int *inside_vla = (int *) data;
  if ((((enum tree_code) (*tp)->common.code) == VAR_DECL || ((enum tree_code) (*tp)->common.code) == PARM_DECL || ((enum tree_code) (*tp)->common.code) == RESULT_DECL || (((enum tree_code) (*tp)->common.code) == SSA_NAME && (((enum tree_code) ((*tp)->ssa_name.var)->common.code) == VAR_DECL || ((enum tree_code) ((*tp)->ssa_name.var)->common.code) == PARM_DECL || ((enum tree_code) ((*tp)->ssa_name.var)->common.code) == RESULT_DECL)))
      && ((((*tp)->decl.size)
    && ! really_constant_p (((*tp)->decl.size)))
   || (((*tp)->decl.size_unit)
       && ! really_constant_p (((*tp)->decl.size_unit)))))
    {
      int save = *inside_vla;
      *inside_vla = 1;
      walk_tree (&((*tp)->decl.size), find_hidden_use_vars_r, inside_vla, ((void *)0));
      walk_tree (&((*tp)->decl.size_unit), find_hidden_use_vars_r,
   inside_vla, ((void *)0));
      *inside_vla = save;
    }
  else if (*inside_vla && (((enum tree_code) (*tp)->common.code) == VAR_DECL || ((enum tree_code) (*tp)->common.code) == PARM_DECL || ((enum tree_code) (*tp)->common.code) == RESULT_DECL || (((enum tree_code) (*tp)->common.code) == SSA_NAME && (((enum tree_code) ((*tp)->ssa_name.var)->common.code) == VAR_DECL || ((enum tree_code) ((*tp)->ssa_name.var)->common.code) == PARM_DECL || ((enum tree_code) ((*tp)->ssa_name.var)->common.code) == RESULT_DECL))))
    set_has_hidden_use (*tp);
  return (tree) ((void *)0);
}
void
add_referenced_tmp_var (tree var)
{
  add_referenced_var (var, ((void *)0));
}
static unsigned char
v_may_defs_disappeared_p (v_may_def_optype v_may_defs_before,
                          v_may_def_optype v_may_defs_after)
{
  if (v_may_defs_before == ((void *)0))
    return 0;
  if (v_may_defs_after == ((void *)0)
      || ((v_may_defs_before) ? (v_may_defs_before)->num_v_may_defs : 0) >
         ((v_may_defs_after) ? (v_may_defs_after)->num_v_may_defs : 0))
    return 1;
  return 0;
}
static unsigned char
v_must_defs_disappeared_p (v_must_def_optype v_must_defs_before,
                           v_must_def_optype v_must_defs_after)
{
  if (v_must_defs_before == ((void *)0))
    return 0;
  if (v_must_defs_after == ((void *)0)
      || ((v_must_defs_before) ? (v_must_defs_before)->num_v_must_defs : 0) >
         ((v_must_defs_after) ? (v_must_defs_after)->num_v_must_defs : 0))
    return 1;
  return 0;
}
void
mark_new_vars_to_rename (tree stmt, bitmap vars_to_rename)
{
  def_optype defs;
  use_optype uses;
  v_may_def_optype v_may_defs;
  vuse_optype vuses;
  v_must_def_optype v_must_defs;
  size_t i;
  bitmap vars_in_vops_to_rename;
  unsigned char found_exposed_symbol = 0;
  v_may_def_optype v_may_defs_before, v_may_defs_after;
  v_must_def_optype v_must_defs_before, v_must_defs_after;
  stmt_ann_t ann;
  vars_in_vops_to_rename = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
  ann = stmt_ann (stmt);
  v_may_defs_before = v_may_defs = get_v_may_def_ops (ann);
  for (i = 0; i < ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0); i++)
    {
      tree var = (get_def_from_ptr (get_v_may_def_result_ptr (((v_may_defs)), ((i)))));
      if (!(tree_code_type[(int) (((enum tree_code) (var)->common.code))] == 'd'))
 var = (var)->ssa_name.var;
      bitmap_set_bit (vars_in_vops_to_rename, var_ann (var)->uid);
    }
  vuses = get_vuse_ops (ann);
  for (i = 0; i < ((vuses) ? (vuses)->num_vuses : 0); i++)
    {
      tree var = (get_use_from_ptr (get_vuse_op_ptr (((vuses)), ((i)))));
      if (!(tree_code_type[(int) (((enum tree_code) (var)->common.code))] == 'd'))
 var = (var)->ssa_name.var;
      bitmap_set_bit (vars_in_vops_to_rename, var_ann (var)->uid);
    }
  v_must_defs_before = v_must_defs = get_v_must_def_ops (ann);
  for (i = 0; i < ((v_must_defs) ? (v_must_defs)->num_v_must_defs : 0); i++)
    {
      tree var = (get_def_from_ptr (get_v_must_def_op_ptr (((v_must_defs)), ((i)))));
      if (!(tree_code_type[(int) (((enum tree_code) (var)->common.code))] == 'd'))
 var = (var)->ssa_name.var;
      bitmap_set_bit (vars_in_vops_to_rename, var_ann (var)->uid);
    }
  modify_stmt (stmt);
  get_stmt_operands (stmt);
  defs = get_def_ops (ann);
  for (i = 0; i < ((defs) ? (defs)->num_defs : 0); i++)
    {
      tree var = (get_def_from_ptr (get_def_op_ptr (((defs)), ((i)))));
      if ((tree_code_type[(int) (((enum tree_code) (var)->common.code))] == 'd'))
 {
   found_exposed_symbol = 1;
   bitmap_set_bit (vars_to_rename, var_ann (var)->uid);
 }
    }
  uses = get_use_ops (ann);
  for (i = 0; i < ((uses) ? (uses)->num_uses : 0); i++)
    {
      tree var = (get_use_from_ptr (get_use_op_ptr (((uses)), ((i)))));
      if ((tree_code_type[(int) (((enum tree_code) (var)->common.code))] == 'd'))
 {
   found_exposed_symbol = 1;
   bitmap_set_bit (vars_to_rename, var_ann (var)->uid);
 }
    }
  v_may_defs_after = v_may_defs = get_v_may_def_ops (ann);
  for (i = 0; i < ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0); i++)
    {
      tree var = (get_def_from_ptr (get_v_may_def_result_ptr (((v_may_defs)), ((i)))));
      if ((tree_code_type[(int) (((enum tree_code) (var)->common.code))] == 'd'))
 {
   found_exposed_symbol = 1;
   bitmap_set_bit (vars_to_rename, var_ann (var)->uid);
 }
    }
  vuses = get_vuse_ops (ann);
  for (i = 0; i < ((vuses) ? (vuses)->num_vuses : 0); i++)
    {
      tree var = (get_use_from_ptr (get_vuse_op_ptr (((vuses)), ((i)))));
      if ((tree_code_type[(int) (((enum tree_code) (var)->common.code))] == 'd'))
 {
   found_exposed_symbol = 1;
   bitmap_set_bit (vars_to_rename, var_ann (var)->uid);
 }
    }
  v_must_defs_after = v_must_defs = get_v_must_def_ops (ann);
  for (i = 0; i < ((v_must_defs) ? (v_must_defs)->num_v_must_defs : 0); i++)
    {
      tree var = (get_def_from_ptr (get_v_must_def_op_ptr (((v_must_defs)), ((i)))));
      if ((tree_code_type[(int) (((enum tree_code) (var)->common.code))] == 'd'))
 {
   found_exposed_symbol = 1;
   bitmap_set_bit (vars_to_rename, var_ann (var)->uid);
 }
    }
  if (found_exposed_symbol
      || v_may_defs_disappeared_p (v_may_defs_before, v_may_defs_after)
      || v_must_defs_disappeared_p (v_must_defs_before, v_must_defs_after))
    bitmap_operation (vars_to_rename, vars_to_rename, vars_in_vops_to_rename, BITMAP_IOR);
  do { if (vars_in_vops_to_rename) { bitmap_clear (vars_in_vops_to_rename); free (vars_in_vops_to_rename); (vars_in_vops_to_rename) = 0; } } while (0);
}
extern int using_eh_for_cleanups_p;
static int
struct_ptr_eq (const void *a, const void *b)
{
  const void * const * x = a;
  const void * const * y = b;
  return *x == *y;
}
static hashval_t
struct_ptr_hash (const void *a)
{
  const void * const * x = a;
  return (size_t)*x >> 4;
}
struct throw_stmt_node
{
  tree stmt;
  int region_nr;
};
static htab_t throw_stmt_table;
static void
record_stmt_eh_region (struct eh_region *region, tree t)
{
  struct throw_stmt_node *n;
  void **slot;
  if (!region)
    return;
  n = ggc_alloc_stat (sizeof (*n) );
  n->stmt = t;
  n->region_nr = get_eh_region_number (region);
  slot = htab_find_slot (throw_stmt_table, n, INSERT);
  if (*slot)
    fancy_abort ("gcc.c", 106023, "?");
  *slot = n;
}
void
add_stmt_to_eh_region (tree t, int num)
{
  struct throw_stmt_node *n;
  void **slot;
  if (num < 0)
    fancy_abort ("gcc.c", 106034, "?");
  n = ggc_alloc_stat (sizeof (*n) );
  n->stmt = t;
  n->region_nr = num;
  slot = htab_find_slot (throw_stmt_table, n, INSERT);
  if (*slot)
    fancy_abort ("gcc.c", 106042, "?");
  *slot = n;
}
unsigned char
remove_stmt_from_eh_region (tree t)
{
  struct throw_stmt_node dummy;
  void **slot;
  if (!throw_stmt_table)
    return 0;
  dummy.stmt = t;
  slot = htab_find_slot (throw_stmt_table, &dummy, NO_INSERT);
  if (slot)
    {
      htab_clear_slot (throw_stmt_table, slot);
      return 1;
    }
  else
    return 0;
}
int
lookup_stmt_eh_region (tree t)
{
  struct throw_stmt_node *p, n;
  if (!throw_stmt_table)
    return -2;
  n.stmt = t;
  p = htab_find (throw_stmt_table, &n);
  return (p ? p->region_nr : -1);
}
struct finally_tree_node
{
  tree child, parent;
};
static htab_t finally_tree;
static void
record_in_finally_tree (tree child, tree parent)
{
  struct finally_tree_node *n;
  void **slot;
  n = xmalloc (sizeof (*n));
  n->child = child;
  n->parent = parent;
  slot = htab_find_slot (finally_tree, n, INSERT);
  if (*slot)
    fancy_abort ("gcc.c", 106106, "?");
  *slot = n;
}
static void
collect_finally_tree (tree t, tree region)
{
 tailrecurse:
  switch (((enum tree_code) (t)->common.code))
    {
    case LABEL_EXPR:
      record_in_finally_tree ((((t))->exp.operands[0]), region);
      break;
    case TRY_FINALLY_EXPR:
      record_in_finally_tree (t, region);
      collect_finally_tree (((t)->exp.operands[0]), t);
      t = ((t)->exp.operands[1]);
      goto tailrecurse;
    case TRY_CATCH_EXPR:
      collect_finally_tree (((t)->exp.operands[0]), region);
      t = ((t)->exp.operands[1]);
      goto tailrecurse;
    case CATCH_EXPR:
      t = (((t))->exp.operands[1]);
      goto tailrecurse;
    case EH_FILTER_EXPR:
      t = (((t))->exp.operands[1]);
      goto tailrecurse;
    case STATEMENT_LIST:
      {
 tree_stmt_iterator i;
 for (i = tsi_start (t); !tsi_end_p (i); tsi_next (&i))
   collect_finally_tree (tsi_stmt (i), region);
      }
      break;
    default:
      break;
    }
}
static unsigned char
outside_finally_tree (tree start, tree target)
{
  struct finally_tree_node n, *p;
  do
    {
      n.child = start;
      p = htab_find (finally_tree, &n);
      if (!p)
 return 1;
      start = p->parent;
    }
  while (start != target);
  return 0;
}
struct leh_state
{
  struct eh_region *cur_region;
  struct eh_region *prev_try;
  struct leh_tf_state *tf;
};
struct leh_tf_state
{
  tree try_finally_expr;
  tree *top_p;
  struct leh_state *outer;
  struct eh_region *region;
  struct goto_queue_node {
    tree stmt;
    tree repl_stmt;
    tree cont_stmt;
    int index;
  } *goto_queue;
  size_t goto_queue_size;
  size_t goto_queue_active;
  varray_type dest_array;
  tree fallthru_label;
  tree eh_label;
  unsigned char may_fallthru;
  unsigned char may_return;
  unsigned char may_throw;
};
static void lower_eh_filter (struct leh_state *, tree *);
static void lower_eh_constructs_1 (struct leh_state *, tree *);
static int
goto_queue_cmp (const void *x, const void *y)
{
  tree a = ((const struct goto_queue_node *)x)->stmt;
  tree b = ((const struct goto_queue_node *)y)->stmt;
  return (a == b ? 0 : a < b ? -1 : 1);
}
static tree
find_goto_replacement (struct leh_tf_state *tf, tree stmt)
{
  struct goto_queue_node tmp, *ret;
  tmp.stmt = stmt;
  ret = bsearch (&tmp, tf->goto_queue, tf->goto_queue_active,
   sizeof (struct goto_queue_node), goto_queue_cmp);
  return (ret ? ret->repl_stmt : ((void *)0));
}
static void
replace_goto_queue_cond_clause (tree *tp, struct leh_tf_state *tf,
    tree_stmt_iterator *tsi)
{
  tree new, one, label;
  new = find_goto_replacement (tf, *tp);
  if (!new)
    return;
  one = expr_only (new);
  if (one && ((enum tree_code) (one)->common.code) == GOTO_EXPR)
    {
      *tp = one;
      return;
    }
  label = build1_stat (LABEL_EXPR,global_trees[TI_VOID_TYPE],(tree) ((void *)0) );
  *tp = build_and_jump (&(((label))->exp.operands[0]));
  tsi_link_after (tsi, label, TSI_CONTINUE_LINKING);
  tsi_link_after (tsi, new, TSI_CONTINUE_LINKING);
}
static void replace_goto_queue_stmt_list (tree, struct leh_tf_state *);
static void
replace_goto_queue_1 (tree t, struct leh_tf_state *tf, tree_stmt_iterator *tsi)
{
  switch (((enum tree_code) (t)->common.code))
    {
    case GOTO_EXPR:
    case RETURN_EXPR:
      t = find_goto_replacement (tf, t);
      if (t)
 {
   tsi_link_before (tsi, t, TSI_SAME_STMT);
   tsi_delink (tsi);
   return;
 }
      break;
    case COND_EXPR:
      replace_goto_queue_cond_clause (&((((t))->exp.operands[1])), tf, tsi);
      replace_goto_queue_cond_clause (&((((t))->exp.operands[2])), tf, tsi);
      break;
    case TRY_FINALLY_EXPR:
    case TRY_CATCH_EXPR:
      replace_goto_queue_stmt_list (((t)->exp.operands[0]), tf);
      replace_goto_queue_stmt_list (((t)->exp.operands[1]), tf);
      break;
    case CATCH_EXPR:
      replace_goto_queue_stmt_list ((((t))->exp.operands[1]), tf);
      break;
    case EH_FILTER_EXPR:
      replace_goto_queue_stmt_list ((((t))->exp.operands[1]), tf);
      break;
    case STATEMENT_LIST:
      fancy_abort ("gcc.c", 106341, "?");
    default:
      break;
    }
  tsi_next (tsi);
}
static void
replace_goto_queue_stmt_list (tree t, struct leh_tf_state *tf)
{
  tree_stmt_iterator i = tsi_start (t);
  while (!tsi_end_p (i))
    replace_goto_queue_1 (tsi_stmt (i), tf, &i);
}
static void
replace_goto_queue (struct leh_tf_state *tf)
{
  replace_goto_queue_stmt_list (*tf->top_p, tf);
}
static void
maybe_record_in_goto_queue (struct leh_state *state, tree stmt)
{
  struct leh_tf_state *tf = state->tf;
  struct goto_queue_node *q;
  size_t active, size;
  int index;
  if (!tf)
    return;
  switch (((enum tree_code) (stmt)->common.code))
    {
    case GOTO_EXPR:
      {
 tree lab = (((stmt))->exp.operands[0]);
 if (((enum tree_code) (lab)->common.code) != LABEL_DECL)
   return;
 if (! outside_finally_tree (lab, tf->try_finally_expr))
   return;
 if (! tf->dest_array)
   {
     tf->dest_array = varray_init (10, VARRAY_DATA_TREE, "dest_array");
     do { if ((tf->dest_array)->elements_used >= (tf->dest_array)->num_elements) (((tf->dest_array)) = varray_grow ((tf->dest_array), 2 * (tf->dest_array)->num_elements)); (tf->dest_array)->data.tree1[(tf->dest_array)->elements_used++] = (lab); } while (0);
     index = 0;
   }
 else
   {
     int n = ((tf->dest_array)->elements_used);
     for (index = 0; index < n; ++index)
       if (((tf->dest_array)->data.tree1[index]) == lab)
  break;
     if (index == n)
       do { if ((tf->dest_array)->elements_used >= (tf->dest_array)->num_elements) (((tf->dest_array)) = varray_grow ((tf->dest_array), 2 * (tf->dest_array)->num_elements)); (tf->dest_array)->data.tree1[(tf->dest_array)->elements_used++] = (lab); } while (0);
   }
      }
      break;
    case RETURN_EXPR:
      tf->may_return = 1;
      index = -1;
      break;
    default:
      fancy_abort ("gcc.c", 106424, "?");
    }
  active = tf->goto_queue_active;
  size = tf->goto_queue_size;
  if (active >= size)
    {
      size = (size ? size * 2 : 32);
      tf->goto_queue_size = size;
      tf->goto_queue
 = xrealloc (tf->goto_queue, size * sizeof (struct goto_queue_node));
    }
  q = &tf->goto_queue[active];
  tf->goto_queue_active = active + 1;
  memset (q, 0, sizeof (*q));
  q->stmt = stmt;
  q->index = index;
}
static void
do_return_redirection (struct goto_queue_node *q, tree finlab, tree mod,
         tree *return_value_p)
{
  tree ret_expr = ((q->stmt)->exp.operands[0]);
  tree x;
  if (ret_expr)
    {
      if (((enum tree_code) (ret_expr)->common.code) == RESULT_DECL)
 {
   if (!*return_value_p)
     *return_value_p = ret_expr;
   else if (*return_value_p != ret_expr)
     fancy_abort ("gcc.c", 106515, "?");
          q->cont_stmt = q->stmt;
 }
      else if (((enum tree_code) (ret_expr)->common.code) == MODIFY_EXPR)
 {
   tree result = ((ret_expr)->exp.operands[0]);
   tree new, old = ((ret_expr)->exp.operands[1]);
   if (!*return_value_p)
     {
       if (aggregate_value_p (((result)->common.type),
         ((current_function_decl)->common.type)))
  new = result;
       else
  new = create_tmp_var (((old)->common.type), "rettmp");
       *return_value_p = new;
     }
   else
     new = *return_value_p;
   x = build (MODIFY_EXPR, ((new)->common.type), new, old);
   append_to_statement_list (x, &q->repl_stmt);
   if (new == result)
     x = result;
   else
     x = build (MODIFY_EXPR, ((result)->common.type), result, new);
   q->cont_stmt = build1_stat (RETURN_EXPR,global_trees[TI_VOID_TYPE],x );
 }
      else
 fancy_abort ("gcc.c", 106550, "?");
    }
  else
    {
      q->cont_stmt = q->stmt;
    }
  if (mod)
    append_to_statement_list (mod, &q->repl_stmt);
  x = build1_stat (GOTO_EXPR,global_trees[TI_VOID_TYPE],finlab );
  append_to_statement_list (x, &q->repl_stmt);
}
static void
do_goto_redirection (struct goto_queue_node *q, tree finlab, tree mod)
{
  tree x;
  q->cont_stmt = q->stmt;
  if (mod)
    append_to_statement_list (mod, &q->repl_stmt);
  x = build1_stat (GOTO_EXPR,global_trees[TI_VOID_TYPE],finlab );
  append_to_statement_list (x, &q->repl_stmt);
}
static void
frob_into_branch_around (tree *tp, tree lab, tree over)
{
  tree x, op1;
  op1 = ((*tp)->exp.operands[1]);
  *tp = ((*tp)->exp.operands[0]);
  if (block_may_fallthru (*tp))
    {
      if (!over)
 over = create_artificial_label ();
      x = build1_stat (GOTO_EXPR,global_trees[TI_VOID_TYPE],over );
      append_to_statement_list (x, tp);
    }
  if (lab)
    {
      x = build1_stat (LABEL_EXPR,global_trees[TI_VOID_TYPE],lab );
      append_to_statement_list (x, tp);
    }
  append_to_statement_list (op1, tp);
  if (over)
    {
      x = build1_stat (LABEL_EXPR,global_trees[TI_VOID_TYPE],over );
      append_to_statement_list (x, tp);
    }
}
static tree
lower_try_finally_dup_block (tree t, struct leh_state *outer_state)
{
  tree region = ((void *)0);
  t = lhd_unsave_expr_now (t);
  if (outer_state->tf)
    region = outer_state->tf->try_finally_expr;
  collect_finally_tree (t, region);
  return t;
}
static tree
lower_try_finally_fallthru_label (struct leh_tf_state *tf)
{
  tree label = tf->fallthru_label;
  if (!label)
    {
      label = create_artificial_label ();
      tf->fallthru_label = label;
      if (tf->outer->tf)
        record_in_finally_tree (label, tf->outer->tf->try_finally_expr);
    }
  return label;
}
static void
honor_protect_cleanup_actions (struct leh_state *outer_state,
          struct leh_state *this_state,
          struct leh_tf_state *tf)
{
  tree protect_cleanup_actions, finally, x;
  tree_stmt_iterator i;
  unsigned char finally_may_fallthru;
  if (lang_protect_cleanup_actions)
    protect_cleanup_actions = lang_protect_cleanup_actions ();
  else
    protect_cleanup_actions = ((void *)0);
  finally = ((*tf->top_p)->exp.operands[1]);
  finally_may_fallthru = block_may_fallthru (finally);
  if (!finally_may_fallthru && !protect_cleanup_actions)
    return;
  if (this_state)
    finally = lower_try_finally_dup_block (finally, outer_state);
  if (finally_may_fallthru)
    {
      tree save_eptr, save_filt;
      save_eptr = create_tmp_var (global_trees[TI_PTR_TYPE], "save_eptr");
      save_filt = create_tmp_var (integer_types[itk_int], "save_filt");
      i = tsi_start (finally);
      x = build (EXC_PTR_EXPR, global_trees[TI_PTR_TYPE]);
      x = build (MODIFY_EXPR, global_trees[TI_VOID_TYPE], save_eptr, x);
      tsi_link_before (&i, x, TSI_CONTINUE_LINKING);
      x = build (FILTER_EXPR, integer_types[itk_int]);
      x = build (MODIFY_EXPR, global_trees[TI_VOID_TYPE], save_filt, x);
      tsi_link_before (&i, x, TSI_CONTINUE_LINKING);
      i = tsi_last (finally);
      x = build (EXC_PTR_EXPR, global_trees[TI_PTR_TYPE]);
      x = build (MODIFY_EXPR, global_trees[TI_VOID_TYPE], x, save_eptr);
      tsi_link_after (&i, x, TSI_CONTINUE_LINKING);
      x = build (FILTER_EXPR, integer_types[itk_int]);
      x = build (MODIFY_EXPR, global_trees[TI_VOID_TYPE], x, save_filt);
      tsi_link_after (&i, x, TSI_CONTINUE_LINKING);
      x = build1_stat (RESX_EXPR,global_trees[TI_VOID_TYPE],build_int_2_wide ((unsigned long) (get_eh_region_number (tf->region)), (long) (0)) )
                                                       ;
      tsi_link_after (&i, x, TSI_CONTINUE_LINKING);
    }
  if (protect_cleanup_actions)
    {
      x = build (EH_FILTER_EXPR, global_trees[TI_VOID_TYPE], ((void *)0), ((void *)0));
      append_to_statement_list (protect_cleanup_actions, &(((x))->exp.operands[1]));
      (((x))->common.static_flag) = 1;
      finally = build (TRY_CATCH_EXPR, global_trees[TI_VOID_TYPE], finally, x);
      lower_eh_filter (outer_state, &finally);
    }
  else
    lower_eh_constructs_1 (outer_state, &finally);
  i = tsi_last (((*tf->top_p)->exp.operands[0]));
  if (tf->may_fallthru)
    {
      x = lower_try_finally_fallthru_label (tf);
      x = build1_stat (GOTO_EXPR,global_trees[TI_VOID_TYPE],x );
      tsi_link_after (&i, x, TSI_CONTINUE_LINKING);
      if (this_state)
        maybe_record_in_goto_queue (this_state, x);
      tf->may_fallthru = 0;
    }
  x = build1_stat (LABEL_EXPR,global_trees[TI_VOID_TYPE],tf->eh_label );
  tsi_link_after (&i, x, TSI_CONTINUE_LINKING);
  tsi_link_after (&i, finally, TSI_CONTINUE_LINKING);
  tf->may_throw = 0;
}
static void
lower_try_finally_nofallthru (struct leh_state *state, struct leh_tf_state *tf)
{
  tree x, finally, lab, return_val;
  struct goto_queue_node *q, *qe;
  if (tf->may_throw)
    lab = tf->eh_label;
  else
    lab = create_artificial_label ();
  finally = ((*tf->top_p)->exp.operands[1]);
  *tf->top_p = ((*tf->top_p)->exp.operands[0]);
  x = build1_stat (LABEL_EXPR,global_trees[TI_VOID_TYPE],lab );
  append_to_statement_list (x, tf->top_p);
  return_val = ((void *)0);
  q = tf->goto_queue;
  qe = q + tf->goto_queue_active;
  for (; q < qe; ++q)
    if (q->index < 0)
      do_return_redirection (q, lab, ((void *)0), &return_val);
    else
      do_goto_redirection (q, lab, ((void *)0));
  replace_goto_queue (tf);
  lower_eh_constructs_1 (state, &finally);
  append_to_statement_list (finally, tf->top_p);
}
static void
lower_try_finally_onedest (struct leh_state *state, struct leh_tf_state *tf)
{
  struct goto_queue_node *q, *qe;
  tree x, finally, finally_label;
  finally = ((*tf->top_p)->exp.operands[1]);
  *tf->top_p = ((*tf->top_p)->exp.operands[0]);
  lower_eh_constructs_1 (state, &finally);
  if (tf->may_throw)
    {
      x = build1_stat (LABEL_EXPR,global_trees[TI_VOID_TYPE],tf->eh_label );
      append_to_statement_list (x, tf->top_p);
      append_to_statement_list (finally, tf->top_p);
      x = build1_stat (RESX_EXPR,global_trees[TI_VOID_TYPE],build_int_2_wide ((unsigned long) (get_eh_region_number (tf->region)), (long) (0)) )
                                                       ;
      append_to_statement_list (x, tf->top_p);
      return;
    }
  if (tf->may_fallthru)
    {
      append_to_statement_list (finally, tf->top_p);
      return;
    }
  finally_label = create_artificial_label ();
  x = build1_stat (LABEL_EXPR,global_trees[TI_VOID_TYPE],finally_label );
  append_to_statement_list (x, tf->top_p);
  append_to_statement_list (finally, tf->top_p);
  q = tf->goto_queue;
  qe = q + tf->goto_queue_active;
  if (tf->may_return)
    {
      tree return_val = ((void *)0);
      for (; q < qe; ++q)
 do_return_redirection (q, finally_label, ((void *)0), &return_val);
      replace_goto_queue (tf);
    }
  else
    {
      for (; q < qe; ++q)
 do_goto_redirection (q, finally_label, ((void *)0));
      replace_goto_queue (tf);
      if (((tf->dest_array)->data.tree1[0]) == tf->fallthru_label)
 {
   tf->fallthru_label = ((void *)0);
   return;
 }
    }
  append_to_statement_list (tf->goto_queue[0].cont_stmt, tf->top_p);
  maybe_record_in_goto_queue (state, tf->goto_queue[0].cont_stmt);
}
static void
lower_try_finally_copy (struct leh_state *state, struct leh_tf_state *tf)
{
  tree finally, new_stmt;
  tree x;
  finally = ((*tf->top_p)->exp.operands[1]);
  *tf->top_p = ((*tf->top_p)->exp.operands[0]);
  new_stmt = (tree) ((void *)0);
  if (tf->may_fallthru)
    {
      x = lower_try_finally_dup_block (finally, state);
      lower_eh_constructs_1 (state, &x);
      append_to_statement_list (x, &new_stmt);
      x = lower_try_finally_fallthru_label (tf);
      x = build1_stat (GOTO_EXPR,global_trees[TI_VOID_TYPE],x );
      append_to_statement_list (x, &new_stmt);
    }
  if (tf->may_throw)
    {
      x = build1_stat (LABEL_EXPR,global_trees[TI_VOID_TYPE],tf->eh_label );
      append_to_statement_list (x, &new_stmt);
      x = lower_try_finally_dup_block (finally, state);
      lower_eh_constructs_1 (state, &x);
      append_to_statement_list (x, &new_stmt);
      x = build1_stat (RESX_EXPR,global_trees[TI_VOID_TYPE],build_int_2_wide ((unsigned long) (get_eh_region_number (tf->region)), (long) (0)) )
                                                       ;
      append_to_statement_list (x, &new_stmt);
    }
  if (tf->goto_queue)
    {
      struct goto_queue_node *q, *qe;
      tree return_val = ((void *)0);
      int return_index;
      tree *labels;
      if (tf->dest_array)
 return_index = ((tf->dest_array)->elements_used);
      else
 return_index = 0;
      labels = xcalloc (sizeof (tree), return_index + 1);
      q = tf->goto_queue;
      qe = q + tf->goto_queue_active;
      for (; q < qe; q++)
 {
   int index = q->index < 0 ? return_index : q->index;
   tree lab = labels[index];
   unsigned char build_p = 0;
   if (!lab)
     {
       labels[index] = lab = create_artificial_label ();
       build_p = 1;
     }
   if (index == return_index)
     do_return_redirection (q, lab, ((void *)0), &return_val);
   else
     do_goto_redirection (q, lab, ((void *)0));
   if (build_p)
     {
       x = build1_stat (LABEL_EXPR,global_trees[TI_VOID_TYPE],lab );
       append_to_statement_list (x, &new_stmt);
       x = lower_try_finally_dup_block (finally, state);
       lower_eh_constructs_1 (state, &x);
       append_to_statement_list (x, &new_stmt);
       append_to_statement_list (q->cont_stmt, &new_stmt);
       maybe_record_in_goto_queue (state, q->cont_stmt);
     }
 }
      replace_goto_queue (tf);
      free (labels);
    }
  append_to_statement_list (new_stmt, tf->top_p);
}
static void
lower_try_finally_switch (struct leh_state *state, struct leh_tf_state *tf)
{
  struct goto_queue_node *q, *qe;
  tree return_val = ((void *)0);
  tree finally, finally_tmp, finally_label;
  int return_index, eh_index, fallthru_index;
  int nlabels, ndests, j, last_case_index;
  tree case_label_vec, switch_stmt, last_case, switch_body;
  tree x;
  finally = ((*tf->top_p)->exp.operands[1]);
  *tf->top_p = ((*tf->top_p)->exp.operands[0]);
  lower_eh_constructs_1 (state, &finally);
  if (tf->dest_array)
    nlabels = ((tf->dest_array)->elements_used);
  else
    nlabels = 0;
  return_index = nlabels;
  eh_index = return_index + tf->may_return;
  fallthru_index = eh_index + tf->may_throw;
  ndests = fallthru_index + tf->may_fallthru;
  finally_tmp = create_tmp_var (integer_types[itk_int], "finally_tmp");
  finally_label = create_artificial_label ();
  case_label_vec = make_tree_vec_stat (ndests );
  switch_stmt = build (SWITCH_EXPR, integer_types[itk_int], finally_tmp,
         (tree) ((void *)0), case_label_vec);
  switch_body = ((void *)0);
  last_case = ((void *)0);
  last_case_index = 0;
  if (tf->may_fallthru)
    {
      x = build (MODIFY_EXPR, global_trees[TI_VOID_TYPE], finally_tmp,
   build_int_2_wide ((unsigned long) (fallthru_index), (long) (0)));
      append_to_statement_list (x, tf->top_p);
      if (tf->may_throw)
 {
   x = build1_stat (GOTO_EXPR,global_trees[TI_VOID_TYPE],finally_label );
   append_to_statement_list (x, tf->top_p);
 }
      last_case = build (CASE_LABEL_EXPR, global_trees[TI_VOID_TYPE],
    build_int_2_wide ((unsigned long) (fallthru_index), (long) (0)), ((void *)0),
    create_artificial_label ());
      ((case_label_vec)->vec.a[last_case_index]) = last_case;
      last_case_index++;
      x = build (LABEL_EXPR, global_trees[TI_VOID_TYPE], (((last_case))->exp.operands[2]));
      append_to_statement_list (x, &switch_body);
      x = lower_try_finally_fallthru_label (tf);
      x = build1_stat (GOTO_EXPR,global_trees[TI_VOID_TYPE],x );
      append_to_statement_list (x, &switch_body);
    }
  if (tf->may_throw)
    {
      x = build1_stat (LABEL_EXPR,global_trees[TI_VOID_TYPE],tf->eh_label );
      append_to_statement_list (x, tf->top_p);
      x = build (MODIFY_EXPR, global_trees[TI_VOID_TYPE], finally_tmp,
   build_int_2_wide ((unsigned long) (eh_index), (long) (0)));
      append_to_statement_list (x, tf->top_p);
      last_case = build (CASE_LABEL_EXPR, global_trees[TI_VOID_TYPE],
    build_int_2_wide ((unsigned long) (eh_index), (long) (0)), ((void *)0),
    create_artificial_label ());
      ((case_label_vec)->vec.a[last_case_index]) = last_case;
      last_case_index++;
      x = build (LABEL_EXPR, global_trees[TI_VOID_TYPE], (((last_case))->exp.operands[2]));
      append_to_statement_list (x, &switch_body);
      x = build1_stat (RESX_EXPR,global_trees[TI_VOID_TYPE],build_int_2_wide ((unsigned long) (get_eh_region_number (tf->region)), (long) (0)) )
                                                       ;
      append_to_statement_list (x, &switch_body);
    }
  x = build1_stat (LABEL_EXPR,global_trees[TI_VOID_TYPE],finally_label );
  append_to_statement_list (x, tf->top_p);
  append_to_statement_list (finally, tf->top_p);
  q = tf->goto_queue;
  qe = q + tf->goto_queue_active;
  j = last_case_index + tf->may_return;
  last_case_index += nlabels;
  for (; q < qe; ++q)
    {
      tree mod;
      int switch_id, case_index;
      if (q->index < 0)
 {
   mod = build (MODIFY_EXPR, global_trees[TI_VOID_TYPE], finally_tmp,
         build_int_2_wide ((unsigned long) (return_index), (long) (0)));
   do_return_redirection (q, finally_label, mod, &return_val);
   switch_id = return_index;
 }
      else
 {
   mod = build (MODIFY_EXPR, global_trees[TI_VOID_TYPE], finally_tmp,
         build_int_2_wide ((unsigned long) (q->index), (long) (0)));
   do_goto_redirection (q, finally_label, mod);
   switch_id = q->index;
 }
      case_index = j + q->index;
      if (!((case_label_vec)->vec.a[case_index]))
 {
   last_case = build (CASE_LABEL_EXPR, global_trees[TI_VOID_TYPE],
        build_int_2_wide ((unsigned long) (switch_id), (long) (0)), ((void *)0),
        create_artificial_label ());
   ((case_label_vec)->vec.a[case_index]) = last_case;
   x = build (LABEL_EXPR, global_trees[TI_VOID_TYPE], (((last_case))->exp.operands[2]));
   append_to_statement_list (x, &switch_body);
   append_to_statement_list (q->cont_stmt, &switch_body);
   maybe_record_in_goto_queue (state, q->cont_stmt);
 }
    }
  replace_goto_queue (tf);
  last_case_index += nlabels;
  (((last_case))->exp.operands[0]) = ((void *)0);
  sort_case_labels (case_label_vec);
  append_to_statement_list (switch_stmt, tf->top_p);
  append_to_statement_list (switch_body, tf->top_p);
}
static unsigned char
decide_copy_try_finally (int ndests, tree finally)
{
  int f_estimate, sw_estimate;
  if (!optimize)
    return 0;
  f_estimate = estimate_num_insns (finally);
  f_estimate = (f_estimate + 1) * ndests;
  sw_estimate = 10 + 2 * ndests;
  if (optimize_size)
    return f_estimate < sw_estimate;
  if (optimize > 1)
    return f_estimate < 100 || f_estimate < sw_estimate * 2;
  else
    return f_estimate < 40 || f_estimate * 2 < sw_estimate * 3;
}
static void
lower_try_finally (struct leh_state *state, tree *tp)
{
  struct leh_tf_state this_tf;
  struct leh_state this_state;
  int ndests;
  memset (&this_tf, 0, sizeof (this_tf));
  this_tf.try_finally_expr = *tp;
  this_tf.top_p = tp;
  this_tf.outer = state;
  if (using_eh_for_cleanups_p)
    this_tf.region
      = gen_eh_region_cleanup (state->cur_region, state->prev_try);
  else
    this_tf.region = ((void *)0);
  this_state.cur_region = this_tf.region;
  this_state.prev_try = state->prev_try;
  this_state.tf = &this_tf;
  lower_eh_constructs_1 (&this_state, &((*tp)->exp.operands[0]));
  this_tf.may_fallthru = block_may_fallthru (((*tp)->exp.operands[0]));
  if (using_eh_for_cleanups_p)
    this_tf.may_throw = get_eh_region_may_contain_throw (this_tf.region);
  if (this_tf.may_throw)
    {
      this_tf.eh_label = create_artificial_label ();
      set_eh_region_tree_label (this_tf.region, this_tf.eh_label);
      honor_protect_cleanup_actions (state, &this_state, &this_tf);
    }
  if (this_tf.goto_queue_active > 1)
    qsort (this_tf.goto_queue, this_tf.goto_queue_active,
    sizeof (struct goto_queue_node), goto_queue_cmp);
  if (this_tf.dest_array)
    ndests = ((this_tf.dest_array)->elements_used);
  else
    ndests = 0;
  ndests += this_tf.may_fallthru;
  ndests += this_tf.may_return;
  ndests += this_tf.may_throw;
  if (ndests == 0)
    *tp = ((*tp)->exp.operands[0]);
  else if (!block_may_fallthru (((*tp)->exp.operands[1])))
    lower_try_finally_nofallthru (state, &this_tf);
  else if (ndests == 1)
    lower_try_finally_onedest (state, &this_tf);
  else if (decide_copy_try_finally (ndests, ((*tp)->exp.operands[1])))
    lower_try_finally_copy (state, &this_tf);
  else
    lower_try_finally_switch (state, &this_tf);
  if (this_tf.fallthru_label)
    {
      tree x = build1_stat (LABEL_EXPR,global_trees[TI_VOID_TYPE],this_tf.fallthru_label );
      append_to_statement_list (x, tp);
    }
  if (this_tf.goto_queue)
    free (this_tf.goto_queue);
}
static void
lower_catch (struct leh_state *state, tree *tp)
{
  struct eh_region *try_region;
  struct leh_state this_state;
  tree_stmt_iterator i;
  tree out_label;
  try_region = gen_eh_region_try (state->cur_region);
  this_state.cur_region = try_region;
  this_state.prev_try = try_region;
  this_state.tf = state->tf;
  lower_eh_constructs_1 (&this_state, &((*tp)->exp.operands[0]));
  if (!get_eh_region_may_contain_throw (try_region))
    {
      *tp = ((*tp)->exp.operands[0]);
      return;
    }
  out_label = ((void *)0);
  for (i = tsi_start (((*tp)->exp.operands[1])); !tsi_end_p (i); )
    {
      struct eh_region *catch_region;
      tree catch, x, eh_label;
      catch = tsi_stmt (i);
      catch_region = gen_eh_region_catch (try_region, (((catch))->exp.operands[0]));
      this_state.cur_region = catch_region;
      this_state.prev_try = state->prev_try;
      lower_eh_constructs_1 (&this_state, &(((catch))->exp.operands[1]));
      eh_label = create_artificial_label ();
      set_eh_region_tree_label (catch_region, eh_label);
      x = build1_stat (LABEL_EXPR,global_trees[TI_VOID_TYPE],eh_label );
      tsi_link_before (&i, x, TSI_SAME_STMT);
      if (block_may_fallthru ((((catch))->exp.operands[1])))
 {
   if (!out_label)
     out_label = create_artificial_label ();
   x = build1_stat (GOTO_EXPR,global_trees[TI_VOID_TYPE],out_label );
   append_to_statement_list (x, &(((catch))->exp.operands[1]));
 }
      tsi_link_before (&i, (((catch))->exp.operands[1]), TSI_SAME_STMT);
      tsi_delink (&i);
    }
  frob_into_branch_around (tp, ((void *)0), out_label);
}
static void
lower_eh_filter (struct leh_state *state, tree *tp)
{
  struct leh_state this_state;
  struct eh_region *this_region;
  tree inner = expr_first (((*tp)->exp.operands[1]));
  tree eh_label;
  if ((((inner))->common.static_flag))
    this_region = gen_eh_region_must_not_throw (state->cur_region);
  else
    this_region = gen_eh_region_allowed (state->cur_region,
      (((inner))->exp.operands[0]));
  this_state = *state;
  this_state.cur_region = this_region;
  lower_eh_constructs_1 (&this_state, &((*tp)->exp.operands[0]));
  if (!get_eh_region_may_contain_throw (this_region))
    {
      *tp = ((*tp)->exp.operands[0]);
      return;
    }
  lower_eh_constructs_1 (state, &(((inner))->exp.operands[1]));
  ((*tp)->exp.operands[1]) = (((inner))->exp.operands[1]);
  eh_label = create_artificial_label ();
  set_eh_region_tree_label (this_region, eh_label);
  frob_into_branch_around (tp, eh_label, ((void *)0));
}
static void
lower_cleanup (struct leh_state *state, tree *tp)
{
  struct leh_state this_state;
  struct eh_region *this_region;
  struct leh_tf_state fake_tf;
  if (!flag_exceptions)
    {
      *tp = ((*tp)->exp.operands[0]);
      lower_eh_constructs_1 (state, tp);
      return;
    }
  this_region = gen_eh_region_cleanup (state->cur_region, state->prev_try);
  this_state = *state;
  this_state.cur_region = this_region;
  lower_eh_constructs_1 (&this_state, &((*tp)->exp.operands[0]));
  if (!get_eh_region_may_contain_throw (this_region))
    {
      *tp = ((*tp)->exp.operands[0]);
      return;
    }
  memset (&fake_tf, 0, sizeof (fake_tf));
  fake_tf.top_p = tp;
  fake_tf.outer = state;
  fake_tf.region = this_region;
  fake_tf.may_fallthru = block_may_fallthru (((*tp)->exp.operands[0]));
  fake_tf.may_throw = 1;
  fake_tf.eh_label = create_artificial_label ();
  set_eh_region_tree_label (this_region, fake_tf.eh_label);
  honor_protect_cleanup_actions (state, ((void *)0), &fake_tf);
  if (fake_tf.may_throw)
    {
      lower_eh_constructs_1 (state, &((*tp)->exp.operands[1]));
      frob_into_branch_around (tp, fake_tf.eh_label, fake_tf.fallthru_label);
    }
  else
    {
      *tp = ((*tp)->exp.operands[0]);
      if (fake_tf.fallthru_label)
 {
   tree x = build1_stat (LABEL_EXPR,global_trees[TI_VOID_TYPE],fake_tf.fallthru_label );
   append_to_statement_list (x, tp);
 }
    }
}
static void
lower_eh_constructs_1 (struct leh_state *state, tree *tp)
{
  tree_stmt_iterator i;
  tree t = *tp;
  switch (((enum tree_code) (t)->common.code))
    {
    case COND_EXPR:
      lower_eh_constructs_1 (state, &((((t))->exp.operands[1])));
      lower_eh_constructs_1 (state, &((((t))->exp.operands[2])));
      break;
    case CALL_EXPR:
      if (state->cur_region && tree_could_throw_p (t))
 {
   record_stmt_eh_region (state->cur_region, t);
   note_eh_region_may_contain_throw (state->cur_region);
 }
      break;
    case MODIFY_EXPR:
      if (state->cur_region && tree_could_throw_p (t))
 {
   record_stmt_eh_region (state->cur_region, t);
   note_eh_region_may_contain_throw (state->cur_region);
   if (((enum tree_code) (((t)->exp.operands[1]))->common.code) == CALL_EXPR)
     record_stmt_eh_region (state->cur_region, ((t)->exp.operands[1]));
 }
      break;
    case GOTO_EXPR:
    case RETURN_EXPR:
      maybe_record_in_goto_queue (state, t);
      break;
    case SWITCH_EXPR:
      ;
      break;
    case TRY_FINALLY_EXPR:
      lower_try_finally (state, tp);
      break;
    case TRY_CATCH_EXPR:
      i = tsi_start (((t)->exp.operands[1]));
      switch (((enum tree_code) (tsi_stmt (i))->common.code))
 {
 case CATCH_EXPR:
   lower_catch (state, tp);
   break;
 case EH_FILTER_EXPR:
   lower_eh_filter (state, tp);
   break;
 default:
   lower_cleanup (state, tp);
   break;
 }
      break;
    case STATEMENT_LIST:
      for (i = tsi_start (t); !tsi_end_p (i); )
 {
   lower_eh_constructs_1 (state, tsi_stmt_ptr (i));
   t = tsi_stmt (i);
   if (((enum tree_code) (t)->common.code) == STATEMENT_LIST)
     {
       tsi_link_before (&i, t, TSI_SAME_STMT);
       tsi_delink (&i);
     }
   else
     tsi_next (&i);
 }
      break;
    default:
      break;
    }
}
static void
lower_eh_constructs (void)
{
  struct leh_state null_state;
  tree *tp = &((current_function_decl)->decl.saved_tree);
  finally_tree = htab_create (31, struct_ptr_hash, struct_ptr_eq, free);
  throw_stmt_table = htab_create_alloc (31, struct_ptr_hash, struct_ptr_eq, ggc_free, ggc_calloc, ((void *)0))
                   ;
  collect_finally_tree (*tp, ((void *)0));
  memset (&null_state, 0, sizeof (null_state));
  lower_eh_constructs_1 (&null_state, tp);
  htab_delete (finally_tree);
  collect_eh_region_array ();
}
struct tree_opt_pass pass_lower_eh =
{
  "eh",
  ((void *)0),
  lower_eh_constructs,
  ((void *)0),
  ((void *)0),
  0,
  TV_TREE_EH,
  (1 << 1),
  (1 << 2),
  (1 << 1),
  0,
  (1 << 0)
};
static void
make_eh_edge (struct eh_region *region, void *data)
{
  tree stmt, lab;
  basic_block src, dst;
  stmt = data;
  lab = get_eh_region_tree_label (region);
  src = bb_for_stmt (stmt);
  dst = label_to_block (lab);
  make_edge (src, dst, 2 | 8);
}
void
make_eh_edges (tree stmt)
{
  int region_nr;
  unsigned char is_resx;
  if (((enum tree_code) (stmt)->common.code) == RESX_EXPR)
    {
      region_nr = (((((stmt)->exp.operands[0]))->int_cst.int_cst).low);
      is_resx = 1;
    }
  else
    {
      region_nr = lookup_stmt_eh_region (stmt);
      if (region_nr < 0)
 return;
      is_resx = 0;
    }
  foreach_reachable_handler (region_nr, is_resx, make_eh_edge, stmt);
}
unsigned char
tree_could_trap_p (tree expr)
{
  enum tree_code code = ((enum tree_code) (expr)->common.code);
  unsigned char honor_nans = 0;
  unsigned char honor_snans = 0;
  unsigned char fp_operation = 0;
  tree t;
  if (tree_code_type[(int) (code)] == '<'
      || tree_code_type[(int) (code)] == '1'
      || tree_code_type[(int) (code)] == '2')
    {
      t = ((expr)->common.type);
      fp_operation = ((((enum tree_code) (t)->common.code) == REAL_TYPE) || (((enum tree_code) (t)->common.code) == COMPLEX_TYPE && ((enum tree_code) (((t)->common.type))->common.code) == REAL_TYPE));
      if (fp_operation)
 {
   honor_nans = flag_trapping_math && !flag_finite_math_only;
   honor_snans = flag_signaling_nans != 0;
 }
    }
  switch (code)
    {
    case ARRAY_REF:
    case ARRAY_RANGE_REF:
    case COMPONENT_REF:
    case REALPART_EXPR:
    case IMAGPART_EXPR:
    case BIT_FIELD_REF:
      t = get_base_address (expr);
      return !t || tree_could_trap_p (t);
    case INDIRECT_REF:
      return !((expr)->common.nothrow_flag);
    case ASM_EXPR:
      return ((expr)->common.volatile_flag);
    case TRUNC_DIV_EXPR:
    case CEIL_DIV_EXPR:
    case FLOOR_DIV_EXPR:
    case ROUND_DIV_EXPR:
    case EXACT_DIV_EXPR:
    case CEIL_MOD_EXPR:
    case FLOOR_MOD_EXPR:
    case ROUND_MOD_EXPR:
    case TRUNC_MOD_EXPR:
    case RDIV_EXPR:
      if (honor_snans)
 return 1;
      if (fp_operation && flag_trapping_math)
 return 1;
      t = ((expr)->exp.operands[1]);
      if (!((t)->common.constant_flag) || integer_zerop (t))
        return 1;
      return 0;
    case LT_EXPR:
    case LE_EXPR:
    case GT_EXPR:
    case GE_EXPR:
    case LTGT_EXPR:
      return honor_nans;
    case EQ_EXPR:
    case NE_EXPR:
    case UNORDERED_EXPR:
    case ORDERED_EXPR:
    case UNLT_EXPR:
    case UNLE_EXPR:
    case UNGT_EXPR:
    case UNGE_EXPR:
    case UNEQ_EXPR:
      return honor_snans;
    case CONVERT_EXPR:
    case FIX_TRUNC_EXPR:
    case FIX_CEIL_EXPR:
    case FIX_FLOOR_EXPR:
    case FIX_ROUND_EXPR:
      return honor_nans;
    case NEGATE_EXPR:
    case ABS_EXPR:
    case CONJ_EXPR:
      return 0;
    default:
      if (fp_operation && flag_trapping_math)
 return 1;
      return 0;
    }
}
unsigned char
tree_could_throw_p (tree t)
{
  if (!flag_exceptions)
    return 0;
  if (((enum tree_code) (t)->common.code) == MODIFY_EXPR)
    {
      if (flag_non_call_exceptions
   && tree_could_trap_p (((t)->exp.operands[0])))
 return 1;
      t = ((t)->exp.operands[1]);
    }
  if (((enum tree_code) (t)->common.code) == CALL_EXPR)
    return (call_expr_flags (t) & 16) == 0;
  if (flag_non_call_exceptions)
    return tree_could_trap_p (t);
  return 0;
}
unsigned char
tree_can_throw_internal (tree stmt)
{
  int region_nr = lookup_stmt_eh_region (stmt);
  if (region_nr < 0)
    return 0;
  return can_throw_internal_1 (region_nr);
}
unsigned char
tree_can_throw_external (tree stmt)
{
  int region_nr = lookup_stmt_eh_region (stmt);
  if (region_nr < 0)
    return 0;
  return can_throw_external_1 (region_nr);
}
unsigned char
maybe_clean_eh_stmt (tree stmt)
{
  if (!tree_could_throw_p (stmt))
    if (remove_stmt_from_eh_region (stmt))
      return 1;
  return 0;
}
void
gt_ggc_mx_throw_stmt_node (void *x_p)
{
  struct throw_stmt_node * const x = (struct throw_stmt_node *)x_p;
  if (((x) != ((void *)0) && ((void *) (x)) != (void *) 1 && ! ggc_set_mark (x)))
    {
      do { if ((*x).stmt != ((void *)0)) gt_ggc_mx_lang_tree_node ((*x).stmt); } while (0);
    }
}
void
gt_ggc_m_P15throw_stmt_node4htab (void *x_p)
{
  struct htab * const x = (struct htab *)x_p;
  if (((x) != ((void *)0) && ((void *) (x)) != (void *) 1 && ! ggc_set_mark (x)))
    {
      if ((*x).entries != ((void *)0)) {
        size_t i0;
        for (i0 = 0; i0 < (size_t)(((*x)).size); i0++) {
          do { if ((*x).entries[i0] != ((void *)0)) gt_ggc_mx_throw_stmt_node ((*x).entries[i0]); } while (0);
        }
        do { const void *const a__ = ((*x).entries); if (a__ != ((void *)0) && a__ != (void *) 1) ggc_set_mark (a__); } while (0);
      }
    }
}
void
gt_pch_nx_throw_stmt_node (void *x_p)
{
  struct throw_stmt_node * const x = (struct throw_stmt_node *)x_p;
  if (gt_pch_note_object (x, x, gt_pch_p_15throw_stmt_node))
    {
      do { if ((*x).stmt != ((void *)0)) gt_pch_nx_lang_tree_node ((*x).stmt); } while (0);
    }
}
void
gt_pch_n_P15throw_stmt_node4htab (void *x_p)
{
  struct htab * const x = (struct htab *)x_p;
  if (gt_pch_note_object (x, x, gt_pch_p_P15throw_stmt_node4htab))
    {
      if ((*x).entries != ((void *)0)) {
        size_t i0;
        for (i0 = 0; i0 < (size_t)(((*x)).size); i0++) {
          do { if ((*x).entries[i0] != ((void *)0)) gt_pch_nx_throw_stmt_node ((*x).entries[i0]); } while (0);
        }
        gt_pch_note_object ((*x).entries, x, gt_pch_p_P15throw_stmt_node4htab);
      }
    }
}
void
gt_pch_p_15throw_stmt_node (void *this_obj ,
 void *x_p,
 gt_pointer_operator op ,
 void *cookie )
{
  struct throw_stmt_node * const x = (struct throw_stmt_node *)x_p;
  if ((void *)(x) == this_obj)
    op (&((*x).stmt), cookie);
}
void
gt_pch_p_P15throw_stmt_node4htab (void *this_obj ,
 void *x_p,
 gt_pointer_operator op ,
 void *cookie )
{
  struct htab * const x = (struct htab *)x_p;
  if ((*x).entries != ((void *)0)) {
    size_t i0;
    for (i0 = 0; i0 < (size_t)(((*x)).size); i0++) {
      if ((void *)((*x).entries) == this_obj)
        op (&((*x).entries[i0]), cookie);
    }
    if ((void *)(x) == this_obj)
      op (&((*x).entries), cookie);
  }
}
const struct ggc_root_tab gt_ggc_r_gt_tree_eh_h[] = {
  {
    &throw_stmt_table,
    1,
    sizeof (throw_stmt_table),
    &gt_ggc_m_P15throw_stmt_node4htab,
    &gt_pch_n_P15throw_stmt_node4htab
  },
  { ((void *)0), 0, 0, ((void *)0), ((void *)0) }
};
void
ssa_remove_edge (edge e)
{
  tree phi, next;
  for (phi = phi_nodes (e->dest); phi; phi = next)
    {
      next = (((phi))->common.chain);
      remove_phi_arg (phi, e->src);
    }
  remove_edge (e);
}
edge
ssa_redirect_edge (edge e, basic_block dest)
{
  tree phi, next;
  tree list = ((void *)0), *last = &list;
  tree src, dst, node;
  int i;
  for (phi = phi_nodes (e->dest); phi; phi = next)
    {
      next = (((phi))->common.chain);
      i = phi_arg_from_edge (phi, e);
      if (i < 0)
 continue;
      src = get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((i))));
      dst = get_def_from_ptr (get_phi_result_ptr (phi));
      node = build_tree_list_stat(dst,src );
      *last = node;
      last = &((node)->common.chain);
      remove_phi_arg_num (phi, i);
    }
  e = redirect_edge_succ_nodup (e, dest);
  ((e)->insns.t) = list;
  return e;
}
static unsigned char
verify_def (basic_block bb, basic_block *definition_block, tree ssa_name,
     tree stmt)
{
  unsigned char err = 0;
  if (((enum tree_code) (ssa_name)->common.code) != SSA_NAME)
    {
      error ("Expected an SSA_NAME object");
      debug_generic_stmt (ssa_name);
      debug_generic_stmt (stmt);
    }
  if (definition_block[(ssa_name)->ssa_name.version])
    {
      error ("SSA_NAME created in two different blocks %i and %i",
      definition_block[(ssa_name)->ssa_name.version]->index, bb->index);
      fprintf (stderr, "SSA_NAME: ");
      debug_generic_stmt (ssa_name);
      debug_generic_stmt (stmt);
      err = 1;
    }
  definition_block[(ssa_name)->ssa_name.version] = bb;
  if ((ssa_name)->common.chain != stmt)
    {
      error ("SSA_NAME_DEF_STMT is wrong");
      fprintf (stderr, "SSA_NAME: ");
      debug_generic_stmt (ssa_name);
      fprintf (stderr, "Expected definition statement:\n");
      debug_generic_stmt ((ssa_name)->common.chain);
      fprintf (stderr, "\nActual definition statement:\n");
      debug_generic_stmt (stmt);
      err = 1;
    }
  return err;
}
static unsigned char
verify_use (basic_block bb, basic_block def_bb, tree ssa_name,
     tree stmt, unsigned char check_abnormal)
{
  unsigned char err = 0;
  if ((((enum tree_code) ((ssa_name)->common.chain)->common.code) == NOP_EXPR && (((enum tree_code) ((((ssa_name)->common.chain)->common.type))->common.code) == VOID_TYPE) && integer_zerop ((((ssa_name)->common.chain)->exp.operands[0]))))
    ;
  else if (!def_bb)
    {
      error ("Missing definition");
      err = 1;
    }
  else if (bb != def_bb
    && !dominated_by_p (CDI_DOMINATORS, bb, def_bb))
    {
      error ("Definition in block %i does not dominate use in block %i",
      def_bb->index, bb->index);
      err = 1;
    }
  if (check_abnormal
      && !(ssa_name)->common.asm_written_flag)
    {
      error ("SSA_NAME_OCCURS_IN_ABNORMAL_PHI should be set");
      err = 1;
    }
  if (err)
    {
      fprintf (stderr, "for SSA_NAME: ");
      debug_generic_stmt (ssa_name);
      fprintf (stderr, "in statement:\n");
      debug_generic_stmt (stmt);
    }
  return err;
}
static unsigned char
verify_phi_args (tree phi, basic_block bb, basic_block *definition_block)
{
  edge e;
  unsigned char err = 0;
  int i, phi_num_args = (phi)->phi.num_args;
  for (e = bb->pred; e; e = e->pred_next)
    e->aux = (void *) 1;
  for (i = 0; i < phi_num_args; i++)
    {
      tree op = get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((i))));
      e = ((phi)->phi.a[i]).e;
      if (((enum tree_code) (op)->common.code) == SSA_NAME)
 err |= verify_use (e->src, definition_block[(op)->ssa_name.version], op,
      phi, e->flags & 2);
      if (e->dest != bb)
 {
   error ("Wrong edge %d->%d for PHI argument\n",
          e->src->index, e->dest->index, bb->index);
   err = 1;
 }
      if (e->aux == (void *) 0)
 {
   error ("PHI argument flowing through dead edge %d->%d\n",
          e->src->index, e->dest->index);
   err = 1;
 }
      if (e->aux == (void *) 2)
 {
   error ("PHI argument duplicated for edge %d->%d\n", e->src->index,
          e->dest->index);
   err = 1;
 }
      if (err)
 {
   fprintf (stderr, "PHI argument\n");
   debug_generic_stmt (op);
 }
      e->aux = (void *) 2;
    }
  for (e = bb->pred; e; e = e->pred_next)
    {
      if (e->aux != (void *) 2)
 {
   error ("No argument flowing through edge %d->%d\n", e->src->index,
   e->dest->index);
   err = 1;
 }
      e->aux = (void *) 0;
    }
  if (err)
    {
      fprintf (stderr, "for PHI node\n");
      debug_generic_stmt (phi);
    }
  return err;
}
void
verify_ssa (void)
{
  unsigned char err = 0;
  basic_block bb;
  basic_block *definition_block = xcalloc (((ssa_names)->elements_used), sizeof (basic_block));
  timevar_push (TV_TREE_SSA_VERIFY);
  calculate_dominance_info (CDI_DOMINATORS);
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      tree phi;
      block_stmt_iterator bsi;
      for (phi = phi_nodes (bb); phi; phi = (((phi))->common.chain))
 err |= verify_def (bb, definition_block, get_def_from_ptr (get_phi_result_ptr (phi)), phi);
      for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))
 {
   tree stmt;
   stmt_ann_t ann;
   unsigned int j;
   v_may_def_optype v_may_defs;
   v_must_def_optype v_must_defs;
   def_optype defs;
   stmt = bsi_stmt (bsi);
   ann = stmt_ann (stmt);
   get_stmt_operands (stmt);
   v_may_defs = get_v_may_def_ops (ann);
   if (ann->makes_aliased_stores && ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0) == 0)
     error ("Makes aliased stores, but no V_MAY_DEFS");
   for (j = 0; j < ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0); j++)
     {
       tree op = (get_def_from_ptr (get_v_may_def_result_ptr (((v_may_defs)), ((j)))));
       if (is_gimple_reg (op))
  {
    error ("Found a virtual definition for a GIMPLE register");
    debug_generic_stmt (op);
    debug_generic_stmt (stmt);
    err = 1;
  }
       err |= verify_def (bb, definition_block, op, stmt);
     }
   v_must_defs = get_v_must_def_ops (stmt_ann (stmt));
   for (j = 0; j < ((v_must_defs) ? (v_must_defs)->num_v_must_defs : 0); j++)
     {
       tree op = (get_def_from_ptr (get_v_must_def_op_ptr (((v_must_defs)), ((j)))));
       if (is_gimple_reg (op))
  {
    error ("Found a virtual must-def for a GIMPLE register");
    debug_generic_stmt (op);
    debug_generic_stmt (stmt);
    err = 1;
  }
       err |= verify_def (bb, definition_block, op, stmt);
     }
   defs = get_def_ops (ann);
   for (j = 0; j < ((defs) ? (defs)->num_defs : 0); j++)
     {
       tree op = (get_def_from_ptr (get_def_op_ptr (((defs)), ((j)))));
       if (((enum tree_code) (op)->common.code) == SSA_NAME && !is_gimple_reg (op))
  {
    error ("Found a real definition for a non-GIMPLE register");
    debug_generic_stmt (op);
    debug_generic_stmt (stmt);
    err = 1;
  }
       err |= verify_def (bb, definition_block, op, stmt);
     }
 }
    }
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      edge e;
      tree phi;
      block_stmt_iterator bsi;
      for (e = bb->pred; e; e = e->pred_next)
 {
   if (e->aux)
     {
       error ("AUX pointer initialized for edge %d->%d\n", e->src->index,
        e->dest->index);
       err = 1;
     }
 }
      for (phi = phi_nodes (bb); phi; phi = (((phi))->common.chain))
 err |= verify_phi_args (phi, bb, definition_block);
      for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))
 {
   tree stmt = bsi_stmt (bsi);
   stmt_ann_t ann = stmt_ann (stmt);
   unsigned int j;
   vuse_optype vuses;
   v_may_def_optype v_may_defs;
   use_optype uses;
   vuses = get_vuse_ops (ann);
   for (j = 0; j < ((vuses) ? (vuses)->num_vuses : 0); j++)
     {
       tree op = (get_use_from_ptr (get_vuse_op_ptr (((vuses)), ((j)))));
       if (is_gimple_reg (op))
  {
    error ("Found a virtual use for a GIMPLE register");
    debug_generic_stmt (op);
    debug_generic_stmt (stmt);
    err = 1;
  }
       err |= verify_use (bb, definition_block[(op)->ssa_name.version],
     op, stmt, 0);
     }
   v_may_defs = get_v_may_def_ops (ann);
   for (j = 0; j < ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0); j++)
     {
       tree op = (get_use_from_ptr (get_v_may_def_op_ptr (((v_may_defs)), ((j)))));
       if (is_gimple_reg (op))
  {
    error ("Found a virtual use for a GIMPLE register");
    debug_generic_stmt (op);
    debug_generic_stmt (stmt);
    err = 1;
  }
       err |= verify_use (bb, definition_block[(op)->ssa_name.version],
     op, stmt, 0);
     }
   uses = get_use_ops (ann);
   for (j = 0; j < ((uses) ? (uses)->num_uses : 0); j++)
     {
       tree op = (get_use_from_ptr (get_use_op_ptr (((uses)), ((j)))));
       if (((enum tree_code) (op)->common.code) == SSA_NAME && !is_gimple_reg (op))
  {
    error ("Found a real use of a non-GIMPLE register");
    debug_generic_stmt (op);
    debug_generic_stmt (stmt);
    err = 1;
  }
       err |= verify_use (bb, definition_block[(op)->ssa_name.version],
     op, stmt, 0);
     }
 }
    }
  free (definition_block);
  timevar_pop (TV_TREE_SSA_VERIFY);
  if (err)
    internal_error ("verify_ssa failed.");
}
void
set_is_used (tree t)
{
  while (1)
    {
      if ((((enum tree_code) (t)->common.code) == VAR_DECL || ((enum tree_code) (t)->common.code) == PARM_DECL || ((enum tree_code) (t)->common.code) == RESULT_DECL || (((enum tree_code) (t)->common.code) == SSA_NAME && (((enum tree_code) ((t)->ssa_name.var)->common.code) == VAR_DECL || ((enum tree_code) ((t)->ssa_name.var)->common.code) == PARM_DECL || ((enum tree_code) ((t)->ssa_name.var)->common.code) == RESULT_DECL))))
 break;
      if (((enum tree_code) (t)->common.code) == REALPART_EXPR || ((enum tree_code) (t)->common.code) == IMAGPART_EXPR)
 t = ((t)->exp.operands[0]);
      else
 while (handled_component_p (t))
   t = ((t)->exp.operands[0]);
    }
  if (((enum tree_code) (t)->common.code) == SSA_NAME)
    t = (t)->ssa_name.var;
  var_ann (t)->used = 1;
}
void
init_tree_ssa (void)
{
  referenced_vars = varray_init (20, VARRAY_DATA_TREE, "referenced_vars");
  call_clobbered_vars = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
  init_ssa_operands ();
  init_ssanames ();
  init_phinodes ();
  global_var = (tree) ((void *)0);
  aliases_computed_p = 0;
}
void
delete_tree_ssa (void)
{
  size_t i;
  basic_block bb;
  block_stmt_iterator bsi;
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))
      bsi_stmt (bsi)->common.ann = ((void *)0);
  if (referenced_vars)
    {
      for (i = 0; i < ((referenced_vars)->elements_used); i++)
 ((referenced_vars)->data.tree1[i])->common.ann = ((void *)0);
      referenced_vars = ((void *)0);
    }
  fini_ssanames ();
  fini_phinodes ();
  fini_ssa_operands ();
  global_var = (tree) ((void *)0);
  do { if (call_clobbered_vars) { bitmap_clear (call_clobbered_vars); free (call_clobbered_vars); (call_clobbered_vars) = 0; } } while (0);
  call_clobbered_vars = ((void *)0);
  aliases_computed_p = 0;
}
unsigned char
tree_ssa_useless_type_conversion_1 (tree outer_type, tree inner_type)
{
  if (inner_type == outer_type
     || (lang_hooks.types_compatible_p (inner_type, outer_type)))
    return 1;
  else if ((((enum tree_code) (inner_type)->common.code) == POINTER_TYPE || ((enum tree_code) (inner_type)->common.code) == REFERENCE_TYPE)
           && (((enum tree_code) (outer_type)->common.code) == POINTER_TYPE || ((enum tree_code) (outer_type)->common.code) == REFERENCE_TYPE)
    && ((enum tree_code) (((outer_type)->common.type))->common.code) == VOID_TYPE)
    return 1;
  else if ((((enum tree_code) (inner_type)->common.code) == POINTER_TYPE || ((enum tree_code) (inner_type)->common.code) == REFERENCE_TYPE)
           && (((enum tree_code) (outer_type)->common.code) == POINTER_TYPE || ((enum tree_code) (outer_type)->common.code) == REFERENCE_TYPE)
           && lang_hooks.types_compatible_p (((inner_type)->common.type),
          ((outer_type)->common.type)))
    return 1;
  else if ((((enum tree_code) (inner_type)->common.code) == INTEGER_TYPE || ((enum tree_code) (inner_type)->common.code) == ENUMERAL_TYPE || ((enum tree_code) (inner_type)->common.code) == BOOLEAN_TYPE || ((enum tree_code) (inner_type)->common.code) == CHAR_TYPE)
           && (((enum tree_code) (outer_type)->common.code) == INTEGER_TYPE || ((enum tree_code) (outer_type)->common.code) == ENUMERAL_TYPE || ((enum tree_code) (outer_type)->common.code) == BOOLEAN_TYPE || ((enum tree_code) (outer_type)->common.code) == CHAR_TYPE)
    && ((inner_type)->type.mode) == ((outer_type)->type.mode)
    && ((inner_type)->common.unsigned_flag) == ((outer_type)->common.unsigned_flag)
    && ((inner_type)->type.precision) == ((outer_type)->type.precision))
    return 1;
  else if (((enum tree_code) (inner_type)->common.code) == COMPLEX_TYPE
    && ((enum tree_code) (outer_type)->common.code) == COMPLEX_TYPE
    && tree_ssa_useless_type_conversion_1 (((outer_type)->common.type),
        ((inner_type)->common.type)))
    return 1;
  return 0;
}
unsigned char
tree_ssa_useless_type_conversion (tree expr)
{
  if (((enum tree_code) (expr)->common.code) == NOP_EXPR || ((enum tree_code) (expr)->common.code) == CONVERT_EXPR
      || ((enum tree_code) (expr)->common.code) == VIEW_CONVERT_EXPR
      || ((enum tree_code) (expr)->common.code) == NON_LVALUE_EXPR)
    return tree_ssa_useless_type_conversion_1 (((expr)->common.type),
            ((((expr)->exp.operands[0]))->common.type)
            );
  return 0;
}
static unsigned char
walk_use_def_chains_1 (tree var, walk_use_def_chains_fn fn, void *data,
         bitmap visited)
{
  tree def_stmt;
  if (bitmap_bit_p (visited, (var)->ssa_name.version))
    return 0;
  bitmap_set_bit (visited, (var)->ssa_name.version);
  def_stmt = (var)->common.chain;
  if (((enum tree_code) (def_stmt)->common.code) != PHI_NODE)
    {
      return (*fn) (var, def_stmt, data);
    }
  else
    {
      int i;
      for (i = 0; i < (def_stmt)->phi.num_args; i++)
 {
   tree arg = get_use_from_ptr (get_phi_arg_def_ptr (((def_stmt)), ((i))));
   if (((enum tree_code) (arg)->common.code) == SSA_NAME
       && walk_use_def_chains_1 (arg, fn, data, visited))
     return 1;
   if ((*fn) (arg, def_stmt, data))
     return 1;
 }
    }
  return 0;
}
void
walk_use_def_chains (tree var, walk_use_def_chains_fn fn, void *data)
{
  tree def_stmt;
  def_stmt = (var)->common.chain;
  if (((enum tree_code) (def_stmt)->common.code) != PHI_NODE)
    (*fn) (var, def_stmt, data);
  else
    {
      bitmap visited = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
      walk_use_def_chains_1 (var, fn, data, visited);
      do { if (visited) { bitmap_clear (visited); free (visited); (visited) = 0; } } while (0);
    }
}
static void
propagate_into_addr (tree stmt, tree var, tree *x, tree repl)
{
  tree new_var, ass_stmt, addr_var;
  basic_block bb;
  block_stmt_iterator bsi;
  if (((enum tree_code) (repl)->common.code) != ADDR_EXPR)
    return;
  addr_var = ((repl)->exp.operands[0]);
  while (((enum tree_code) (*x)->common.code) == ARRAY_REF
  || ((enum tree_code) (*x)->common.code) == COMPONENT_REF
  || ((enum tree_code) (*x)->common.code) == BIT_FIELD_REF)
    x = &((*x)->exp.operands[0]);
  if (((enum tree_code) (*x)->common.code) != INDIRECT_REF
      || ((*x)->exp.operands[0]) != var)
    return;
  modify_stmt (stmt);
  if (((*x)->common.type) == ((addr_var)->common.type))
    {
      *x = addr_var;
      mark_new_vars_to_rename (stmt, vars_to_rename);
      return;
    }
  ass_stmt = build2_stat (MODIFY_EXPR,global_trees[TI_VOID_TYPE],(tree) ((void *)0),repl );
  new_var = duplicate_ssa_name (var, ass_stmt);
  ((*x)->exp.operands[0]) = new_var;
  ((ass_stmt)->exp.operands[0]) = new_var;
  bb = bb_for_stmt (stmt);
  tree_block_label (bb);
  bsi = bsi_after_labels (bb);
  bsi_insert_after (&bsi, ass_stmt, BSI_NEW_STMT);
  mark_new_vars_to_rename (stmt, vars_to_rename);
}
static void
replace_immediate_uses (tree var, tree repl)
{
  use_optype uses;
  vuse_optype vuses;
  v_may_def_optype v_may_defs;
  int i, j, n;
  dataflow_t df;
  tree stmt;
  stmt_ann_t ann;
  unsigned char mark_new_vars;
  df = get_immediate_uses ((var)->common.chain);
  n = num_immediate_uses (df);
  for (i = 0; i < n; i++)
    {
      stmt = immediate_use (df, i);
      ann = stmt_ann (stmt);
      if (((enum tree_code) (stmt)->common.code) == PHI_NODE)
 {
   for (j = 0; j < (stmt)->phi.num_args; j++)
     if (get_use_from_ptr (get_phi_arg_def_ptr (((stmt)), ((j)))) == var)
       {
  ((*((get_phi_arg_def_ptr (((stmt)), ((j)))).use)) = ((repl)));
  if (((enum tree_code) (repl)->common.code) == SSA_NAME
      && ((stmt)->phi.a[j]).e->flags & 2)
    (repl)->common.asm_written_flag = 1;
       }
   continue;
 }
      get_stmt_operands (stmt);
      mark_new_vars = 0;
      if (is_gimple_reg ((var)->ssa_name.var))
 {
   if (((enum tree_code) (stmt)->common.code) == MODIFY_EXPR)
     {
       propagate_into_addr (stmt, var, &((stmt)->exp.operands[0]), repl);
       propagate_into_addr (stmt, var, &((stmt)->exp.operands[1]), repl);
     }
   uses = get_use_ops (ann);
   for (j = 0; j < (int) ((uses) ? (uses)->num_uses : 0); j++)
     if ((get_use_from_ptr (get_use_op_ptr (((uses)), ((j))))) == var)
       {
  propagate_value (get_use_op_ptr ((uses), (j)), repl);
  mark_new_vars = (((enum tree_code) (((repl)->common.type))->common.code) == POINTER_TYPE || ((enum tree_code) (((repl)->common.type))->common.code) == REFERENCE_TYPE);
       }
 }
      else
 {
   vuses = get_vuse_ops (ann);
   for (j = 0; j < (int) ((vuses) ? (vuses)->num_vuses : 0); j++)
     if ((get_use_from_ptr (get_vuse_op_ptr (((vuses)), ((j))))) == var)
       propagate_value (get_vuse_op_ptr ((vuses), (j)), repl);
   v_may_defs = get_v_may_def_ops (ann);
   for (j = 0; j < (int) ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0); j++)
     if ((get_use_from_ptr (get_v_may_def_op_ptr (((v_may_defs)), ((j))))) == var)
       propagate_value (get_v_may_def_op_ptr ((v_may_defs), (j)), repl);
 }
      if (mark_new_vars)
 mark_new_vars_to_rename (stmt, vars_to_rename);
      else
 modify_stmt (stmt);
    }
}
static tree
get_eq_name (tree *eq_to, tree var)
{
  unsigned ver;
  tree val = var;
  while (((enum tree_code) (val)->common.code) == SSA_NAME)
    {
      ver = (val)->ssa_name.version;
      if (!eq_to[ver])
 break;
      val = eq_to[ver];
    }
  while (((enum tree_code) (var)->common.code) == SSA_NAME)
    {
      ver = (var)->ssa_name.version;
      if (!eq_to[ver])
 break;
      var = eq_to[ver];
      eq_to[ver] = val;
    }
  return val;
}
static void
check_phi_redundancy (tree phi, tree *eq_to)
{
  tree val = (tree) ((void *)0), def, res = get_def_from_ptr (get_phi_result_ptr (phi)), stmt;
  unsigned i, ver = (res)->ssa_name.version, n;
  dataflow_t df;
  if ((phi)->phi.num_args > 16)
    return;
  for (i = 0; i < (unsigned) (phi)->phi.num_args; i++)
    {
      def = get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((i))));
      if (((enum tree_code) (def)->common.code) == SSA_NAME)
 {
   def = get_eq_name (eq_to, def);
   if (def == res)
     continue;
 }
      if (val
   && !operand_equal_p (val, def, 0))
 return;
      val = def;
    }
  if (!val)
    fancy_abort ("gcc.c", 108747, "?");
  if (get_eq_name (eq_to, res) == val)
    return;
  if (!may_propagate_copy (res, val))
    return;
  eq_to[ver] = val;
  df = get_immediate_uses ((res)->common.chain);
  n = num_immediate_uses (df);
  for (i = 0; i < n; i++)
    {
      stmt = immediate_use (df, i);
      if (((enum tree_code) (stmt)->common.code) == PHI_NODE)
 check_phi_redundancy (stmt, eq_to);
    }
}
void
kill_redundant_phi_nodes (void)
{
  tree *eq_to;
  unsigned i, old_num_ssa_names;
  basic_block bb;
  tree phi, var, repl, stmt;
  eq_to = xcalloc (((ssa_names)->elements_used), sizeof (tree));
  compute_immediate_uses (1 << 0 | 1 << 1, ((void *)0));
  old_num_ssa_names = ((ssa_names)->elements_used);
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      for (phi = phi_nodes (bb); phi; phi = ((phi)->common.chain))
 {
   var = get_def_from_ptr (get_phi_result_ptr (phi));
   check_phi_redundancy (phi, eq_to);
 }
    }
  for (i = 0; i < old_num_ssa_names; i++)
    {
      if (!((ssa_names)->data.tree1[i]))
 continue;
      repl = get_eq_name (eq_to, ((ssa_names)->data.tree1[i]));
      if (repl != ((ssa_names)->data.tree1[i]))
 replace_immediate_uses (((ssa_names)->data.tree1[i]), repl);
    }
  for (i = 0; i < old_num_ssa_names; i++)
    {
      if (!((ssa_names)->data.tree1[i]))
 continue;
      repl = get_eq_name (eq_to, ((ssa_names)->data.tree1[i]));
      if (repl != ((ssa_names)->data.tree1[i]))
 {
   stmt = (((ssa_names)->data.tree1[i]))->common.chain;
   remove_phi_node (stmt, (tree) ((void *)0), bb_for_stmt (stmt));
 }
    }
  free_df ();
  free (eq_to);
}
struct tree_opt_pass pass_redundant_phi =
{
  "redphi",
  ((void *)0),
  kill_redundant_phi_nodes,
  ((void *)0),
  ((void *)0),
  0,
  0,
  (1 << 3) | (1 << 6),
  0,
  0,
  0,
  (1 << 0) | (1 << 1)
    | (1 << 2) | (1 << 3)
};
static void
warn_uninit (tree t, const char *msgid, location_t *locus)
{
  tree var = (t)->ssa_name.var;
  tree def = (t)->common.chain;
  if (!(((enum tree_code) (def)->common.code) == NOP_EXPR && (((enum tree_code) (((def)->common.type))->common.code) == VOID_TYPE) && integer_zerop (((def)->exp.operands[0]))))
    return;
  if (((enum tree_code) (var)->common.code) == PARM_DECL)
    return;
  if (((var)->decl.inline_flag))
    return;
  if (((var)->common.nowarning_flag))
    return;
  if (!locus)
    locus = &((var)->decl.locus);
  warning (msgid, locus, var);
  ((var)->common.nowarning_flag) = 1;
}
static tree
warn_uninitialized_var (tree *tp, int *walk_subtrees, void *data)
{
  location_t *locus = data;
  tree t = *tp;
  if (((enum tree_code) (t)->common.code) == SSA_NAME)
    {
      warn_uninit (t, "%H'%D' is used uninitialized in this function", locus);
      *walk_subtrees = 0;
    }
  else if ((tree_code_type[(int) (((enum tree_code) (t)->common.code))] == 'd') || (tree_code_type[(int) (((enum tree_code) (t)->common.code))] == 't'))
    *walk_subtrees = 0;
  return (tree) ((void *)0);
}
static void
warn_uninitialized_phi (tree phi)
{
  int i, n = (phi)->phi.num_args;
  if (!is_gimple_reg (get_def_from_ptr (get_phi_result_ptr (phi))))
    return;
  for (i = 0; i < n; ++i)
    {
      tree op = get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((i))));
      if (((enum tree_code) (op)->common.code) == SSA_NAME)
 warn_uninit (op, "%H'%D' may be used uninitialized in this function",
       ((void *)0));
    }
}
static void
execute_early_warn_uninitialized (void)
{
  block_stmt_iterator bsi;
  basic_block bb;
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))
      walk_tree (bsi_stmt_ptr (bsi), warn_uninitialized_var,
   ((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (bsi_stmt (bsi))->common.code))])) != 0) ? (bsi_stmt (bsi))->exp.locus : (location_t *)((void *)0)), ((void *)0));
}
static void
execute_late_warn_uninitialized (void)
{
  basic_block bb;
  tree phi;
  execute_early_warn_uninitialized ();
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    for (phi = phi_nodes (bb); phi; phi = (((phi))->common.chain))
      warn_uninitialized_phi (phi);
}
static unsigned char
gate_warn_uninitialized (void)
{
  return warn_uninitialized != 0;
}
struct tree_opt_pass pass_early_warn_uninitialized =
{
  ((void *)0),
  gate_warn_uninitialized,
  execute_early_warn_uninitialized,
  ((void *)0),
  ((void *)0),
  0,
  0,
  (1 << 6),
  0,
  0,
  0,
  0
};
struct tree_opt_pass pass_late_warn_uninitialized =
{
  ((void *)0),
  gate_warn_uninitialized,
  execute_late_warn_uninitialized,
  ((void *)0),
  ((void *)0),
  0,
  0,
  (1 << 6),
  0,
  0,
  0,
  0
};
int dump_flags;
bitmap vars_to_rename;
unsigned char in_gimple_form;
static struct tree_opt_pass *all_passes;
static void
execute_gimple (void)
{
  if (!lang_hooks.gimple_before_inlining)
    gimplify_function_tree (current_function_decl);
}
static struct tree_opt_pass pass_gimple =
{
  "gimple",
  ((void *)0),
  execute_gimple,
  ((void *)0),
  ((void *)0),
  0,
  0,
  0,
  (1 << 0),
  0,
  0,
  (1 << 0)
};
static unsigned char
gate_all_optimizations (void)
{
  return (optimize >= 1
   && !((global_dc)->diagnostic_count[(int) (DK_ERROR)] || (global_dc)->diagnostic_count[(int) (DK_SORRY)]));
}
static struct tree_opt_pass pass_all_optimizations =
{
  ((void *)0),
  gate_all_optimizations,
  ((void *)0),
  ((void *)0),
  ((void *)0),
  0,
  0,
  0,
  0,
  0,
  0,
  0
};
static void
execute_free_datastructures (void)
{
  tree *chain;
  free_dominance_info (CDI_DOMINATORS);
  disband_implicit_edges ();
  delete_tree_ssa ();
  chain = &((current_function_decl)->decl.saved_tree);
  *chain = alloc_stmt_list ();
  delete_tree_cfg_annotations ();
}
static struct tree_opt_pass pass_free_datastructures =
{
  ((void *)0),
  ((void *)0),
  execute_free_datastructures,
  ((void *)0),
  ((void *)0),
  0,
  0,
  (1 << 3),
  0,
  0,
  0,
  0
};
static void
execute_init_datastructures (void)
{
  init_tree_ssa ();
}
static struct tree_opt_pass pass_init_datastructures =
{
  ((void *)0),
  ((void *)0),
  execute_init_datastructures,
  ((void *)0),
  ((void *)0),
  0,
  0,
  (1 << 3),
  0,
  0,
  0,
  0
};
static void
register_one_dump_file (struct tree_opt_pass *pass)
{
  char *dot_name, *flag_name;
  char num[10];
  if (!pass->name)
    return;
  num[0] = '\0';
  if (pass->static_pass_number)
    sprintf (num, "%d", ((int) pass->static_pass_number < 0
    ? 1 : pass->static_pass_number));
  dot_name = concat (".", pass->name, num, ((void *)0));
  flag_name = concat ("tree-", pass->name, num, ((void *)0));
  pass->static_pass_number = dump_register (dot_name, flag_name);
}
static int
register_dump_files (struct tree_opt_pass *pass, int properties)
{
  do
    {
      if (pass->properties_required & ~properties)
        fancy_abort ("gcc.c", 109207, "?");
      if (pass->properties_destroyed & pass->properties_provided)
        fancy_abort ("gcc.c", 109210, "?");
      pass->properties_required = properties;
      pass->properties_provided = properties =
        (properties | pass->properties_provided) & ~pass->properties_destroyed;
      if (properties & ((1 << 0) | (1 << 1) | (1 << 2)))
        register_one_dump_file (pass);
      if (pass->sub)
 properties = register_dump_files (pass->sub, properties);
      pass = pass->next;
    }
  while (pass);
  return properties;
}
static struct tree_opt_pass *
dup_pass_1 (struct tree_opt_pass *pass)
{
  struct tree_opt_pass *new;
  new = xmalloc (sizeof (*new));
  memcpy (new, pass, sizeof (*new));
  if (pass->name)
    {
      int n, p = pass->static_pass_number;
      if (p)
 n = -(--p) + 1;
      else
 n = 2, p = -1;
      pass->static_pass_number = p;
      new->static_pass_number = n;
    }
  return new;
}
void
init_tree_optimization_passes (void)
{
  struct tree_opt_pass **p;
  p = &all_passes;
  (*p = &pass_gimple, p = &(*p)->next);
  (*p = &pass_remove_useless_stmts, p = &(*p)->next);
  (*p = &pass_mudflap_1, p = &(*p)->next);
  (*p = &pass_lower_cf, p = &(*p)->next);
  (*p = &pass_lower_eh, p = &(*p)->next);
  (*p = &pass_build_cfg, p = &(*p)->next);
  (*p = &pass_tree_profile, p = &(*p)->next);
  (*p = &pass_init_datastructures, p = &(*p)->next);
  (*p = &pass_all_optimizations, p = &(*p)->next);
  (*p = &pass_mudflap_2, p = &(*p)->next);
  (*p = &pass_free_datastructures, p = &(*p)->next);
  (*p = &pass_expand, p = &(*p)->next);
  (*p = &pass_rest_of_compilation, p = &(*p)->next);
  *p = ((void *)0);
  p = &pass_all_optimizations.sub;
  (*p = &pass_referenced_vars, p = &(*p)->next);
  (*p = &pass_build_pta, p = &(*p)->next);
  (*p = &pass_build_ssa, p = &(*p)->next);
  (*p = &pass_rename_ssa_copies, p = &(*p)->next);
  (*p = &pass_early_warn_uninitialized, p = &(*p)->next);
  (*p = &pass_dce, p = &(*p)->next);
  (*p = &pass_dominator, p = &(*p)->next);
  (*p = &pass_redundant_phi, p = &(*p)->next);
  (*p = &(*dup_pass_1 (&pass_dce)), p = &(*p)->next);
  (*p = &pass_forwprop, p = &(*p)->next);
  (*p = &pass_phiopt, p = &(*p)->next);
  (*p = &pass_may_alias, p = &(*p)->next);
  (*p = &pass_tail_recursion, p = &(*p)->next);
  (*p = &pass_ch, p = &(*p)->next);
  (*p = &pass_del_pta, p = &(*p)->next);
  (*p = &pass_profile, p = &(*p)->next);
  (*p = &pass_lower_complex, p = &(*p)->next);
  (*p = &pass_sra, p = &(*p)->next);
  (*p = &(*dup_pass_1 (&pass_rename_ssa_copies)), p = &(*p)->next);
  (*p = &(*dup_pass_1 (&pass_dominator)), p = &(*p)->next);
  (*p = &(*dup_pass_1 (&pass_redundant_phi)), p = &(*p)->next);
  (*p = &(*dup_pass_1 (&pass_dce)), p = &(*p)->next);
  (*p = &pass_dse, p = &(*p)->next);
  (*p = &(*dup_pass_1 (&pass_forwprop)), p = &(*p)->next);
  (*p = &(*dup_pass_1 (&pass_phiopt)), p = &(*p)->next);
  (*p = &pass_ccp, p = &(*p)->next);
  (*p = &(*dup_pass_1 (&pass_redundant_phi)), p = &(*p)->next);
  (*p = &pass_fold_builtins, p = &(*p)->next);
  (*p = &pass_split_crit_edges, p = &(*p)->next);
  (*p = &pass_pre, p = &(*p)->next);
  (*p = &pass_loop, p = &(*p)->next);
  (*p = &(*dup_pass_1 (&pass_dominator)), p = &(*p)->next);
  (*p = &(*dup_pass_1 (&pass_redundant_phi)), p = &(*p)->next);
  (*p = &pass_cd_dce, p = &(*p)->next);
  (*p = &(*dup_pass_1 (&pass_dse)), p = &(*p)->next);
  (*p = &(*dup_pass_1 (&pass_forwprop)), p = &(*p)->next);
  (*p = &(*dup_pass_1 (&pass_phiopt)), p = &(*p)->next);
  (*p = &pass_tail_calls, p = &(*p)->next);
  (*p = &pass_late_warn_uninitialized, p = &(*p)->next);
  (*p = &pass_warn_function_return, p = &(*p)->next);
  (*p = &pass_del_ssa, p = &(*p)->next);
  (*p = &pass_nrv, p = &(*p)->next);
  (*p = &pass_remove_useless_vars, p = &(*p)->next);
  *p = ((void *)0);
  p = &pass_loop.sub;
  (*p = &pass_loop_init, p = &(*p)->next);
  (*p = &pass_loop_done, p = &(*p)->next);
  *p = ((void *)0);
  register_dump_files (all_passes, 0);
}
static void execute_pass_list (struct tree_opt_pass *);
static unsigned int last_verified;
static void
execute_todo (unsigned int flags)
{
  if (flags & (1 << 1))
    {
      rewrite_into_ssa (0);
      bitmap_clear (vars_to_rename);
    }
  if ((flags & (1 << 0)) && dump_file)
    dump_function_to_file (current_function_decl,
      dump_file, dump_flags);
  if (flags & (1 << 2))
    ggc_collect ();
}
static unsigned char
execute_one_pass (struct tree_opt_pass *pass)
{
  unsigned int todo;
  if (pass->gate && !pass->gate ())
    return 0;
  in_gimple_form = (pass->properties_provided & ((1 << 0) | (1 << 1) | (1 << 2))) != 0;
  todo = pass->todo_flags_start & ~last_verified;
  if (todo)
    execute_todo (todo);
  if (pass->static_pass_number)
    {
      dump_file = dump_begin (pass->static_pass_number, &dump_flags);
      if (dump_file)
 {
   const char *dname, *aname;
   dname = lang_hooks.decl_printable_name (current_function_decl, 2);
   aname = (((const char *) (decl_assembler_name (current_function_decl))->identifier.id.str)
                                                  );
   fprintf (dump_file, "\n;; Function %s (%s)\n\n", dname, aname);
 }
    }
  if (pass->tv_id)
    timevar_push (pass->tv_id);
  if (pass->execute)
    pass->execute ();
  todo = pass->todo_flags_finish;
  last_verified = todo & ((1 << 3) | (1 << 4) | (1 << 5));
  if (todo)
    execute_todo (todo);
  if (pass->tv_id)
    timevar_pop (pass->tv_id);
  if (dump_file)
    {
      dump_end (pass->static_pass_number, dump_file);
      dump_file = ((void *)0);
    }
  return 1;
}
static void
execute_pass_list (struct tree_opt_pass *pass)
{
  do
    {
      if (execute_one_pass (pass) && pass->sub)
 execute_pass_list (pass->sub);
      pass = pass->next;
    }
  while (pass);
}
void
tree_rest_of_compilation (tree fndecl, unsigned char nested_p)
{
  location_t saved_loc;
  struct cgraph_node *saved_node = ((void *)0), *node;
  timevar_push (TV_EXPAND);
  if (flag_unit_at_a_time && !cgraph_global_info_ready)
    fancy_abort ("gcc.c", 109454, "?");
  current_function_decl = fndecl;
  saved_loc = input_location;
  input_location = ((fndecl)->decl.locus);
  init_function_start (fndecl);
  cfun->x_dont_save_pending_sizes_p = 1;
  node = cgraph_node (fndecl);
  if (cgraph_preserve_function_body_p (fndecl))
    {
      if (!flag_unit_at_a_time)
 {
   struct cgraph_edge *e;
   saved_node = cgraph_clone_node (node);
   for (e = saved_node->callees; e; e = e->next_callee)
     if (!e->inline_failed)
       cgraph_clone_inlined_nodes (e, 1);
 }
      cfun->saved_tree = save_body (fndecl, &cfun->saved_args);
    }
  if (flag_inline_trees)
    {
      struct cgraph_edge *e;
      for (e = node->callees; e; e = e->next_callee)
 if (!e->inline_failed || warn_inline)
   break;
      if (e)
 {
   timevar_push (TV_INTEGRATION);
   optimize_inline_calls (fndecl);
   timevar_pop (TV_INTEGRATION);
 }
    }
  if (!vars_to_rename)
    vars_to_rename = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
  if (nested_p)
    ggc_push_context ();
  execute_pass_list (all_passes);
  if (cfun->saved_tree)
    {
      ((fndecl)->decl.saved_tree) = cfun->saved_tree;
      ((fndecl)->decl.arguments) = cfun->saved_args;
      if (!flag_unit_at_a_time)
 {
   struct cgraph_edge *e;
   while (node->callees)
     cgraph_remove_edge (node->callees);
   node->callees = saved_node->callees;
   saved_node->callees = ((void *)0);
   for (e = saved_node->callees; e; e = e->next_callee)
     e->caller = node;
   cgraph_remove_node (saved_node);
 }
    }
  else
    ((fndecl)->decl.saved_tree) = ((void *)0);
  cfun = 0;
  if (warn_larger_than && !((fndecl)->decl.external_flag) && ((fndecl)->common.type))
    {
      tree ret_type = ((((fndecl)->common.type))->common.type);
      if (ret_type && ((ret_type)->type.size_unit)
   && ((enum tree_code) (((ret_type)->type.size_unit))->common.code) == INTEGER_CST
   && 0 < compare_tree_int (((ret_type)->type.size_unit),
       larger_than_size))
 {
   unsigned int size_as_int
     = (((((ret_type)->type.size_unit))->int_cst.int_cst).low);
   if (compare_tree_int (((ret_type)->type.size_unit), size_as_int) == 0)
     warning ("%Jsize of return value of '%D' is %u bytes",
                     fndecl, fndecl, size_as_int);
   else
     warning ("%Jsize of return value of '%D' is larger than %wd bytes",
                     fndecl, fndecl, larger_than_size);
 }
    }
  if (!nested_p && !flag_inline_trees)
    {
      ((fndecl)->decl.saved_tree) = ((void *)0);
      if (((fndecl)->decl.u2.f) == 0
   && !cgraph_node (fndecl)->origin)
 {
   if (((fndecl)->decl.initial) != 0)
     ((fndecl)->decl.initial) = global_trees[TI_ERROR_MARK];
 }
    }
  input_location = saved_loc;
  ggc_collect ();
  if (nested_p)
    ggc_pop_context ();
  timevar_pop (TV_EXPAND);
}
static unsigned char is_gimple_id (tree);
unsigned char
is_gimple_rhs (tree t)
{
  enum tree_code code = ((enum tree_code) (t)->common.code);
  switch (tree_code_type[(int) (code)])
    {
    case '1':
    case '2':
    case '<':
      return 1;
    default:
      break;
    }
  switch (code)
    {
    case TRUTH_NOT_EXPR:
    case TRUTH_AND_EXPR:
    case TRUTH_OR_EXPR:
    case TRUTH_XOR_EXPR:
    case ADDR_EXPR:
    case CALL_EXPR:
    case CONSTRUCTOR:
    case COMPLEX_EXPR:
    case VA_ARG_EXPR:
    case INTEGER_CST:
    case REAL_CST:
    case STRING_CST:
    case COMPLEX_CST:
    case VECTOR_CST:
    case OBJ_TYPE_REF:
      return 1;
    default:
      break;
    }
  return is_gimple_lvalue (t) || is_gimple_val (t);
}
unsigned char
is_gimple_constructor_elt (tree t)
{
  return (is_gimple_val (t)
   || ((enum tree_code) (t)->common.code) == CONSTRUCTOR);
}
unsigned char
is_gimple_lvalue (tree t)
{
  return (is_gimple_addr_expr_arg (t)
   || ((enum tree_code) (t)->common.code) == INDIRECT_REF
   || ((enum tree_code) (t)->common.code) == BIT_FIELD_REF);
}
unsigned char
is_gimple_condexpr (tree t)
{
  return (is_gimple_val (t)
   || tree_code_type[(int) (((enum tree_code) (t)->common.code))] == '<');
}
unsigned char
is_gimple_addr_expr_arg (tree t)
{
  return (is_gimple_id (t)
   || ((enum tree_code) (t)->common.code) == ARRAY_REF
   || ((enum tree_code) (t)->common.code) == ARRAY_RANGE_REF
   || ((enum tree_code) (t)->common.code) == COMPONENT_REF
   || ((enum tree_code) (t)->common.code) == REALPART_EXPR
   || ((enum tree_code) (t)->common.code) == IMAGPART_EXPR
   || ((enum tree_code) (t)->common.code) == INDIRECT_REF);
}
unsigned char
is_gimple_min_invariant (tree t)
{
  switch (((enum tree_code) (t)->common.code))
    {
    case ADDR_EXPR:
      return ((t)->common.invariant_flag);
    case INTEGER_CST:
    case REAL_CST:
    case STRING_CST:
    case COMPLEX_CST:
    case VECTOR_CST:
      return !((t)->common.public_flag);
    default:
      return 0;
    }
}
unsigned char
is_gimple_stmt (tree t)
{
  enum tree_code code = ((enum tree_code) (t)->common.code);
  if ((((enum tree_code) (t)->common.code) == NOP_EXPR && (((enum tree_code) (((t)->common.type))->common.code) == VOID_TYPE) && integer_zerop (((t)->exp.operands[0]))))
    return 1;
  switch (code)
    {
    case BIND_EXPR:
    case COND_EXPR:
      return ((t)->common.type) == ((void *)0) || (((enum tree_code) (((t)->common.type))->common.code) == VOID_TYPE);
    case SWITCH_EXPR:
    case GOTO_EXPR:
    case RETURN_EXPR:
    case LABEL_EXPR:
    case CASE_LABEL_EXPR:
    case TRY_CATCH_EXPR:
    case TRY_FINALLY_EXPR:
    case EH_FILTER_EXPR:
    case CATCH_EXPR:
    case ASM_EXPR:
    case RESX_EXPR:
    case PHI_NODE:
    case STATEMENT_LIST:
      return 1;
    case VA_ARG_EXPR:
      return 1;
    case CALL_EXPR:
    case MODIFY_EXPR:
      return 1;
    default:
      return 0;
    }
}
unsigned char
is_gimple_variable (tree t)
{
  return (((enum tree_code) (t)->common.code) == VAR_DECL
   || ((enum tree_code) (t)->common.code) == PARM_DECL
   || ((enum tree_code) (t)->common.code) == RESULT_DECL
   || ((enum tree_code) (t)->common.code) == SSA_NAME);
}
static unsigned char
is_gimple_id (tree t)
{
  return (is_gimple_variable (t)
   || ((enum tree_code) (t)->common.code) == FUNCTION_DECL
   || ((enum tree_code) (t)->common.code) == LABEL_DECL
   || ((enum tree_code) (t)->common.code) == STRING_CST);
}
unsigned char
is_gimple_reg_type (tree type)
{
  return (!(((enum tree_code) (type)->common.code) == ARRAY_TYPE || ((enum tree_code) (type)->common.code) == RECORD_TYPE || ((enum tree_code) (type)->common.code) == UNION_TYPE || ((enum tree_code) (type)->common.code) == QUAL_UNION_TYPE || ((enum tree_code) (type)->common.code) == SET_TYPE)
          && ((enum tree_code) (type)->common.code) != COMPLEX_TYPE);
}
unsigned char
is_gimple_reg (tree t)
{
  if (((enum tree_code) (t)->common.code) == SSA_NAME)
    t = (t)->ssa_name.var;
  return (is_gimple_variable (t)
   && is_gimple_reg_type (((t)->common.type))
   && ! ((t)->common.volatile_flag)
   && ! ((t)->common.addressable_flag)
   && ! needs_to_live_in_memory (t));
}
unsigned char
is_gimple_non_addressable (tree t)
{
  if (((enum tree_code) (t)->common.code) == SSA_NAME)
    t = (t)->ssa_name.var;
  return (is_gimple_variable (t)
   && ! ((t)->common.addressable_flag)
   && ! needs_to_live_in_memory (t));
}
unsigned char
is_gimple_val (tree t)
{
  if (is_gimple_variable (t)
      && is_gimple_reg_type (((t)->common.type))
      && !is_gimple_reg (t))
    return 0;
  if (((enum tree_code) (t)->common.code) == EXC_PTR_EXPR || ((enum tree_code) (t)->common.code) == FILTER_EXPR)
    return 1;
  return (is_gimple_variable (t) || is_gimple_min_invariant (t));
}
unsigned char
is_gimple_min_lval (tree t)
{
  return (is_gimple_id (t)
   || ((enum tree_code) (t)->common.code) == INDIRECT_REF);
}
unsigned char
is_gimple_cast (tree t)
{
  return (((enum tree_code) (t)->common.code) == NOP_EXPR
   || ((enum tree_code) (t)->common.code) == CONVERT_EXPR
          || ((enum tree_code) (t)->common.code) == FIX_TRUNC_EXPR
          || ((enum tree_code) (t)->common.code) == FIX_CEIL_EXPR
          || ((enum tree_code) (t)->common.code) == FIX_FLOOR_EXPR
          || ((enum tree_code) (t)->common.code) == FIX_ROUND_EXPR);
}
unsigned char
is_gimple_call_addr (tree t)
{
  return (((enum tree_code) (t)->common.code) == OBJ_TYPE_REF
   || is_gimple_val (t));
}
tree
get_call_expr_in (tree t)
{
  if (((enum tree_code) (t)->common.code) == MODIFY_EXPR)
    t = ((t)->exp.operands[1]);
  if (((enum tree_code) (t)->common.code) == CALL_EXPR)
    return t;
  return (tree) ((void *)0);
}
tree
get_base_address (tree t)
{
  while (((enum tree_code) (t)->common.code) == REALPART_EXPR || ((enum tree_code) (t)->common.code) == IMAGPART_EXPR
  || handled_component_p (t))
    t = ((t)->exp.operands[0]);
  if ((((enum tree_code) (t)->common.code) == VAR_DECL || ((enum tree_code) (t)->common.code) == PARM_DECL || ((enum tree_code) (t)->common.code) == RESULT_DECL || (((enum tree_code) (t)->common.code) == SSA_NAME && (((enum tree_code) ((t)->ssa_name.var)->common.code) == VAR_DECL || ((enum tree_code) ((t)->ssa_name.var)->common.code) == PARM_DECL || ((enum tree_code) ((t)->ssa_name.var)->common.code) == RESULT_DECL)))
      || ((enum tree_code) (t)->common.code) == STRING_CST
      || ((enum tree_code) (t)->common.code) == CONSTRUCTOR
      || ((enum tree_code) (t)->common.code) == INDIRECT_REF)
    return t;
  else
    return (tree) ((void *)0);
}
void
recalculate_side_effects (tree t)
{
  enum tree_code code = ((enum tree_code) (t)->common.code);
  int fro = first_rtl_op (code);
  int i;
  switch (tree_code_type[(int) (code)])
    {
    case 'e':
      switch (code)
 {
 case INIT_EXPR:
 case MODIFY_EXPR:
 case VA_ARG_EXPR:
 case PREDECREMENT_EXPR:
 case PREINCREMENT_EXPR:
 case POSTDECREMENT_EXPR:
 case POSTINCREMENT_EXPR:
   return;
 default:
   break;
 }
    case '<':
    case '1':
    case '2':
    case 'r':
      ((t)->common.side_effects_flag) = ((t)->common.volatile_flag);
      for (i = 0; i < fro; ++i)
 {
   tree op = ((t)->exp.operands[i]);
   if (op && ((op)->common.side_effects_flag))
     ((t)->common.side_effects_flag) = 1;
 }
      break;
   }
}
alias_var
alias_var_new_with_aterm (tree decl, struct aterm_ *term)
{
  alias_var ret = ggc_alloc_stat (sizeof (struct alias_var_aterm) );
  ((ret)->common.kind) = ATERM_AVAR;
  ((ret)->common.decl) = decl;
  ((ret)->aterm.term) = term;
  return ret;
}
extern unsigned char hook_bool_void_false (void);
extern unsigned char hook_bool_bool_false (unsigned char);
extern unsigned char hook_bool_tree_false (tree);
extern unsigned char hook_bool_tree_true (tree);
extern unsigned char hook_bool_tree_hwi_hwi_tree_false (tree, long, long,
     tree);
extern unsigned char hook_bool_tree_hwi_hwi_tree_true (tree, long, long,
           tree);
extern unsigned char hook_bool_rtx_false (rtx);
extern unsigned char hook_bool_uintp_uintp_false (unsigned int *, unsigned int *);
extern unsigned char hook_bool_rtx_int_int_intp_false (rtx, int, int, int *);
extern unsigned char hook_bool_constcharptr_size_t_false (const char *, size_t);
extern void hook_void_void (void);
extern void hook_void_int (int);
extern void hook_void_charptr (char *);
extern void hook_void_FILEptr_constcharptr (FILE *, const char *);
extern void hook_void_tree (tree);
extern void hook_void_tree_treeptr (tree, tree *);
extern int hook_int_tree_tree_1 (tree, tree);
extern int hook_int_rtx_0 (rtx);
extern int hook_int_size_t_constcharptr_int_0 (size_t, const char *, int);
extern int hook_int_void_no_regs (void);
extern int hook_int_void_1 (void);
extern unsigned hook_uint_uint_constcharptrptr_0 (unsigned, const char **);
extern unsigned char default_can_output_mi_thunk_no_vcall (tree, long,
        long, tree);
extern unsigned char hook_bool_tree_tree_false (tree, tree);
extern rtx hook_rtx_rtx_identity (rtx);
extern rtx hook_rtx_rtx_null (rtx);
extern rtx hook_rtx_tree_int_null (tree, int);
extern tree hook_tree_tree_identity (tree a);
extern const char *hook_constcharptr_tree_null (tree);
struct diagnostic_context;
extern long hook_get_alias_set_0 (tree);
extern void lhd_do_nothing (void);
extern void lhd_do_nothing_t (tree);
extern void lhd_do_nothing_i (int);
extern void lhd_do_nothing_f (struct function *);
extern unsigned char lhd_post_options (const char **);
extern long lhd_get_alias_set (tree);
extern tree lhd_return_tree (tree);
extern tree lhd_return_null_tree_v (void);
extern tree lhd_return_null_tree (tree);
extern tree lhd_do_nothing_iii_return_null_tree (int, int, int);
extern int lhd_safe_from_p (rtx, tree);
extern int lhd_staticp (tree);
extern int lhd_unsafe_for_reeval (tree);
extern void lhd_clear_binding_stack (void);
extern void lhd_print_tree_nothing (FILE *, tree, int);
extern const char *lhd_decl_printable_name (tree, int);
extern int lhd_types_compatible_p (tree, tree);
extern rtx lhd_expand_expr (tree, rtx, enum machine_mode, int, rtx *);
extern int lhd_expand_decl (tree);
extern void lhd_print_error_function (struct diagnostic_context *,
          const char *);
extern void lhd_set_decl_assembler_name (tree);
extern unsigned char lhd_can_use_bit_fields_p (void);
extern unsigned char lhd_warn_unused_global_decl (tree);
extern void lhd_incomplete_type_error (tree, tree);
extern tree lhd_type_promotes_to (tree);
extern void lhd_register_builtin_type (tree, const char *);
extern unsigned char lhd_decl_ok_for_sibcall (tree);
extern tree lhd_expr_size (tree);
extern unsigned char lhd_decl_uninit (tree);
extern tree lhd_get_callee_fndecl (tree);
extern size_t lhd_tree_size (enum tree_code);
extern tree lhd_tree_inlining_walk_subtrees (tree *, int *, walk_tree_fn,
          void *, void *);
extern int lhd_tree_inlining_cannot_inline_tree_fn (tree *);
extern int lhd_tree_inlining_disregard_inline_limits (tree);
extern tree lhd_tree_inlining_add_pending_fn_decls (void *, tree);
extern int lhd_tree_inlining_auto_var_in_fn_p (tree, tree);
extern tree lhd_tree_inlining_copy_res_decl_for_inlining (tree, tree, tree,
         void *, int *, tree);
extern int lhd_tree_inlining_anon_aggr_type_p (tree);
extern int lhd_tree_inlining_start_inlining (tree);
extern void lhd_tree_inlining_end_inlining (tree);
extern tree lhd_tree_inlining_convert_parm_for_inlining (tree, tree, tree, int);
extern void lhd_initialize_diagnostics (struct diagnostic_context *);
extern tree lhd_callgraph_analyze_expr (tree *, int *, tree);
extern int lhd_gimplify_expr (tree *, tree *, tree *);
extern unsigned char lhd_tree_dump_dump_tree (void *, tree);
extern int lhd_tree_dump_type_quals (tree);
extern tree lhd_make_node (enum tree_code);
enum real_value_class {
  rvc_zero,
  rvc_normal,
  rvc_inf,
  rvc_nan
};
struct real_value
{
  unsigned int class : 2;
  unsigned int sign : 1;
  unsigned int signalling : 1;
  unsigned int canonical : 1;
  unsigned int uexp : (32 - 5);
  unsigned long sig[((128 + (8 * 4)) / (8 * 4))];
};
extern char test_real_width
  [sizeof(struct real_value) <= (((128 + (8 * 4)) + 32)/(8 * 4) + (((128 + (8 * 4)) + 32)%(8 * 4) ? 1 : 0))*sizeof(long) ? 1 : -1];
struct real_format
{
  void (*encode) (const struct real_format *, long *,
    const struct real_value *);
  void (*decode) (const struct real_format *, struct real_value *,
    const long *);
  int b;
  int log2_b;
  int p;
  int pnan;
  int emin;
  int emax;
  int signbit;
  unsigned char has_nans;
  unsigned char has_inf;
  unsigned char has_denorm;
  unsigned char has_signed_zero;
  unsigned char qnan_msb_set;
};
extern const struct real_format *
  real_format_for_mode[MAX_MODE_FLOAT - MIN_MODE_FLOAT + 1];
extern void real_arithmetic (struct real_value *, int, const struct real_value *,
        const struct real_value *);
extern unsigned char real_compare (int, const struct real_value *, const struct real_value *);
extern unsigned char real_isinf (const struct real_value *);
extern unsigned char real_isnan (const struct real_value *);
extern unsigned char real_isneg (const struct real_value *);
extern unsigned char real_isnegzero (const struct real_value *);
extern unsigned char real_identical (const struct real_value *, const struct real_value *);
extern void real_convert (struct real_value *, enum machine_mode,
     const struct real_value *);
extern unsigned char exact_real_truncate (enum machine_mode, const struct real_value *);
extern void real_to_decimal (char *, const struct real_value *, size_t,
        size_t, int);
extern void real_to_hexadecimal (char *, const struct real_value *,
     size_t, size_t, int);
extern long real_to_integer (const struct real_value *);
extern void real_to_integer2 (long *, long *,
         const struct real_value *);
extern void real_from_string (struct real_value *, const char *);
extern void real_from_integer (struct real_value *, enum machine_mode,
          unsigned long, long, int);
extern long real_to_target_fmt (long *, const struct real_value *,
    const struct real_format *);
extern long real_to_target (long *, const struct real_value *, enum machine_mode);
extern void real_from_target_fmt (struct real_value *, const long *,
      const struct real_format *);
extern void real_from_target (struct real_value *, const long *,
         enum machine_mode);
extern void real_inf (struct real_value *);
extern unsigned char real_nan (struct real_value *, const char *, int, enum machine_mode);
extern void real_maxval (struct real_value *, int, enum machine_mode);
extern void real_2expN (struct real_value *, int);
extern unsigned int real_hash (const struct real_value *);
extern const struct real_format ieee_single_format;
extern const struct real_format mips_single_format;
extern const struct real_format ieee_double_format;
extern const struct real_format mips_double_format;
extern const struct real_format ieee_extended_motorola_format;
extern const struct real_format ieee_extended_intel_96_format;
extern const struct real_format ieee_extended_intel_96_round_53_format;
extern const struct real_format ieee_extended_intel_128_format;
extern const struct real_format ibm_extended_format;
extern const struct real_format mips_extended_format;
extern const struct real_format ieee_quad_format;
extern const struct real_format mips_quad_format;
extern const struct real_format vax_f_format;
extern const struct real_format vax_d_format;
extern const struct real_format vax_g_format;
extern const struct real_format i370_single_format;
extern const struct real_format i370_double_format;
extern const struct real_format c4x_single_format;
extern const struct real_format c4x_extended_format;
extern const struct real_format real_internal_format;
extern struct real_value real_value_truncate (enum machine_mode,
         struct real_value);
extern struct real_value real_arithmetic2 (int, const struct real_value *,
      const struct real_value *);
extern int significand_size (enum machine_mode);
extern struct real_value real_from_string2 (const char *, enum machine_mode);
extern int real_exponent (const struct real_value *);
extern void real_ldexp (struct real_value *, const struct real_value *, int);
extern struct real_value dconst0;
extern struct real_value dconst1;
extern struct real_value dconst2;
extern struct real_value dconst3;
extern struct real_value dconst10;
extern struct real_value dconstm1;
extern struct real_value dconstm2;
extern struct real_value dconsthalf;
extern struct real_value dconstthird;
extern struct real_value dconstpi;
extern struct real_value dconste;
struct real_value real_value_from_int_cst (tree, tree);
extern rtx const_double_from_real_value (struct real_value, enum machine_mode);
extern unsigned char exact_real_inverse (enum machine_mode, struct real_value *);
extern tree build_real (tree, struct real_value);
extern unsigned char real_sqrt (struct real_value *, enum machine_mode,
         const struct real_value *);
extern unsigned char real_powi (struct real_value *, enum machine_mode,
         const struct real_value *, long);
extern void real_trunc (struct real_value *, enum machine_mode,
   const struct real_value *);
extern void real_floor (struct real_value *, enum machine_mode,
   const struct real_value *);
extern void real_ceil (struct real_value *, enum machine_mode,
         const struct real_value *);
extern void real_round (struct real_value *, enum machine_mode,
   const struct real_value *);
extern void real_copysign (struct real_value *, const struct real_value *);
struct gcc_target
{
  struct asm_out
  {
    const char *open_paren, *close_paren;
    const char *byte_op;
    struct asm_int_op
    {
      const char *hi;
      const char *si;
      const char *di;
      const char *ti;
    } aligned_op, unaligned_op;
    unsigned char (* integer) (rtx x, unsigned int size, int aligned_p);
    void (* globalize_label) (FILE *, const char *);
    void (* unwind_label) (FILE *, tree, int, int);
    void (* internal_label) (FILE *, const char *, unsigned long);
    void (* visibility) (tree, int);
    void (* function_prologue) (FILE *, long);
    void (* function_end_prologue) (FILE *);
    void (* function_begin_epilogue) (FILE *);
    void (* function_epilogue) (FILE *, long);
    void (* named_section) (const char *, unsigned int);
    void (* exception_section) (void);
    void (* eh_frame_section) (void);
    void (* select_section) (tree, int, unsigned long);
    void (* select_rtx_section) (enum machine_mode, rtx,
     unsigned long);
    void (* unique_section) (tree, int);
    void (* constructor) (rtx, int);
    void (* destructor) (rtx, int);
    void (* output_mi_thunk) (FILE *file, tree thunk_decl,
         long delta, long vcall_offset,
         tree function_decl);
    unsigned char (* can_output_mi_thunk) (tree thunk_decl, long delta,
      long vcall_offset,
      tree function_decl);
    void (*file_start) (void);
    void (*file_end) (void);
    void (*external_libcall) (rtx);
  } asm_out;
  struct sched
  {
    int (* adjust_cost) (rtx insn, rtx link, rtx def_insn, int cost);
    int (* adjust_priority) (rtx, int);
    int (* issue_rate) (void);
    int (* variable_issue) (FILE *, int, rtx, int);
    void (* md_init) (FILE *, int, int);
    void (* md_finish) (FILE *, int);
    void (* md_init_global) (FILE *, int, int);
    void (* md_finish_global) (FILE *, int);
    int (* reorder) (FILE *, int, rtx *, int *, int);
    int (* reorder2) (FILE *, int, rtx *, int *, int);
    void (* dependencies_evaluation_hook) (rtx, rtx);
    int (* use_dfa_pipeline_interface) (void);
    void (* init_dfa_pre_cycle_insn) (void);
    rtx (* dfa_pre_cycle_insn) (void);
    void (* init_dfa_post_cycle_insn) (void);
    rtx (* dfa_post_cycle_insn) (void);
    int (* first_cycle_multipass_dfa_lookahead) (void);
    int (* first_cycle_multipass_dfa_lookahead_guard) (rtx);
    int (* dfa_new_cycle) (FILE *, int, rtx, int, int, int *);
    void (* init_dfa_bubbles) (void);
    rtx (* dfa_bubble) (int);
    unsigned char (* is_costly_dependence) (rtx, rtx, rtx, int, int);
  } sched;
  tree (* merge_decl_attributes) (tree, tree);
  tree (* merge_type_attributes) (tree, tree);
  const struct attribute_spec *attribute_table;
  int (* comp_type_attributes) (tree type1, tree type2);
  void (* set_default_type_attributes) (tree type);
  void (* insert_attributes) (tree decl, tree *attributes);
  unsigned char (* function_attribute_inlinable_p) (tree fndecl);
  unsigned char (* ms_bitfield_layout_p) (tree record_type);
  unsigned char (* align_anon_bitfield) (void);
  void (* init_builtins) (void);
  rtx (* expand_builtin) (tree exp, rtx target, rtx subtarget,
     enum machine_mode mode, int ignore);
  const char * (* mangle_fundamental_type) (tree type);
  void (* init_libfuncs) (void);
  unsigned int (* section_type_flags) (tree, const char *, int);
  unsigned char (* cannot_modify_jumps_p) (void);
  int (* branch_target_register_class) (void);
  unsigned char (* branch_target_register_callee_saved) (unsigned char after_pe_gen);
  unsigned char (* cannot_force_const_mem) (rtx);
  unsigned char (* cannot_copy_insn_p) (rtx);
  rtx (* delegitimize_address) (rtx);
  unsigned char (*function_ok_for_sibcall) (tree decl, tree exp);
  unsigned char (* in_small_data_p) (tree);
  unsigned char (* binds_local_p) (tree);
  void (* encode_section_info) (tree, rtx, int);
  const char * (* strip_name_encoding) (const char *);
  unsigned char (* valid_pointer_mode) (enum machine_mode mode);
  unsigned char (* vector_opaque_p) (tree);
  unsigned char (* rtx_costs) (rtx x, int code, int outer_code, int *total);
  int (* address_cost) (rtx x);
  rtx (* dwarf_register_span) (rtx);
  unsigned char (* fixed_condition_code_regs) (unsigned int *, unsigned int *);
  enum machine_mode (* cc_modes_compatible) (enum machine_mode,
          enum machine_mode);
  void (* machine_dependent_reorg) (void);
  tree (* build_builtin_va_list) (void);
  void * (* get_pch_validity) (size_t *);
  const char * (* pch_valid_p) (const void *, size_t);
  unsigned char (* default_short_enums) (void);
  rtx (* builtin_setjmp_frame_value) (void);
  tree (* md_asm_clobbers) (tree);
  struct calls {
    unsigned char (*promote_function_args) (tree fntype);
    unsigned char (*promote_function_return) (tree fntype);
    unsigned char (*promote_prototypes) (tree fntype);
    rtx (*struct_value_rtx) (tree fndecl, int incoming);
    unsigned char (*return_in_memory) (tree type, tree fndecl);
    unsigned char (*return_in_msb) (tree type);
    rtx (*expand_builtin_saveregs) (void);
    void (*setup_incoming_varargs) (CUMULATIVE_ARGS *ca, enum machine_mode mode,
        tree type, int *pretend_arg_size,
        int second_time);
    unsigned char (*strict_argument_naming) (CUMULATIVE_ARGS *ca);
    unsigned char (*pretend_outgoing_varargs_named) (CUMULATIVE_ARGS *ca);
    unsigned char (* split_complex_arg) (tree type);
    tree (* gimplify_va_arg_expr) (tree valist, tree type, tree *pre_p,
       tree *post_p);
  } calls;
  struct cxx {
    tree (*guard_type) (void);
    unsigned char (*guard_mask_bit) (void);
    tree (*get_cookie_size) (tree);
    unsigned char (*cookie_has_size) (void);
    int (*import_export_class) (tree, int);
  } cxx;
  unsigned char have_named_sections;
  unsigned char have_ctors_dtors;
  unsigned char have_tls;
  unsigned char have_srodata_section;
  unsigned char terminate_dw2_eh_frame_info;
  unsigned char file_start_app_off;
  unsigned char file_start_file_directive;
  unsigned char handle_pragma_redefine_extname;
  unsigned char handle_pragma_extern_prefix;
  unsigned char late_rtl_prologue_epilogue;
};
extern struct gcc_target targetm;
static struct gimplify_ctx
{
  tree current_bind_expr;
  unsigned char save_stack;
  tree temps;
  tree conditional_cleanups;
  int conditions;
  tree exit_label;
  tree return_temp;
  varray_type case_labels;
  htab_t temp_htab;
} *gimplify_ctxp;
typedef struct gimple_temp_hash_elt
{
  tree val;
  tree temp;
} elt_t;
static enum gimplify_status gimplify_modify_expr_rhs (tree *, tree *, tree *,
            tree *, tree *, unsigned char);
static enum gimplify_status gimplify_compound_expr (tree *, tree *, unsigned char);
static hashval_t
gimple_tree_hash (const void *p)
{
  tree t = ((const elt_t *) p)->val;
  return iterative_hash_expr (t, 0);
}
static int
gimple_tree_eq (const void *p1, const void *p2)
{
  tree t1 = ((const elt_t *) p1)->val;
  tree t2 = ((const elt_t *) p2)->val;
  enum tree_code code = ((enum tree_code) (t1)->common.code);
  if (((enum tree_code) (t2)->common.code) != code
      || ((t1)->common.type) != ((t2)->common.type))
    return 0;
  if (!operand_equal_p (t1, t2, 0))
    return 0;
  if (gimple_tree_hash (p1) != gimple_tree_hash (p2))
    fancy_abort ("gcc.c", 111523, "?");
  return 1;
}
void
push_gimplify_context (void)
{
  if (gimplify_ctxp)
    fancy_abort ("gcc.c", 111534, "?");
  gimplify_ctxp
    = (struct gimplify_ctx *) xcalloc (1, sizeof (struct gimplify_ctx));
  gimplify_ctxp->temp_htab
    = htab_create (1000, gimple_tree_hash, gimple_tree_eq, free);
}
void
pop_gimplify_context (tree body)
{
  if (!gimplify_ctxp || gimplify_ctxp->current_bind_expr)
    fancy_abort ("gcc.c", 111549, "?");
  if (body)
    declare_tmp_vars (gimplify_ctxp->temps, body);
  else
    record_vars (gimplify_ctxp->temps);
  htab_delete (gimplify_ctxp->temp_htab);
  free (gimplify_ctxp);
  gimplify_ctxp = ((void *)0);
}
void
gimple_push_bind_expr (tree bind)
{
  ((bind)->common.chain) = gimplify_ctxp->current_bind_expr;
  gimplify_ctxp->current_bind_expr = bind;
}
void
gimple_pop_bind_expr (void)
{
  gimplify_ctxp->current_bind_expr
    = ((gimplify_ctxp->current_bind_expr)->common.chain);
}
tree
gimple_current_bind_expr (void)
{
  return gimplify_ctxp->current_bind_expr;
}
static unsigned char
gimple_conditional_context (void)
{
  return gimplify_ctxp->conditions > 0;
}
static void
gimple_push_condition (void)
{
  ++(gimplify_ctxp->conditions);
}
static void
gimple_pop_condition (tree *pre_p)
{
  int conds = --(gimplify_ctxp->conditions);
  if (conds == 0)
    {
      append_to_statement_list (gimplify_ctxp->conditional_cleanups, pre_p);
      gimplify_ctxp->conditional_cleanups = (tree) ((void *)0);
    }
  else if (conds < 0)
    fancy_abort ("gcc.c", 111618, "?");
}
static void
append_to_statement_list_1 (tree t, tree *list_p, unsigned char side_effects)
{
  tree list = *list_p;
  tree_stmt_iterator i;
  if (!side_effects)
    return;
  if (!list)
    {
      if (t && ((enum tree_code) (t)->common.code) == STATEMENT_LIST)
 {
   *list_p = t;
   return;
 }
      *list_p = list = alloc_stmt_list ();
    }
  i = tsi_last (list);
  tsi_link_after (&i, t, TSI_CONTINUE_LINKING);
}
void
append_to_statement_list (tree t, tree *list_p)
{
  append_to_statement_list_1 (t, list_p, t ? ((t)->common.side_effects_flag) : 0);
}
void
append_to_statement_list_force (tree t, tree *list_p)
{
  append_to_statement_list_1 (t, list_p, t != ((void *)0));
}
void
gimplify_and_add (tree t, tree *list_p)
{
  gimplify_stmt (&t);
  append_to_statement_list (t, list_p);
}
static void
remove_suffix (char *name, int len)
{
  int i;
  for (i = 2; i < 8 && len > i; i++)
    {
      if (name[len - i] == '.')
 {
   name[len - i] = '\0';
   break;
 }
    }
}
tree
create_artificial_label (void)
{
  tree lab = build_decl_stat (LABEL_DECL,(tree) ((void *)0),global_trees[TI_VOID_TYPE] );
  ((lab)->decl.artificial_flag) = 1;
  ((lab)->decl.context) = current_function_decl;
  return lab;
}
static unsigned int tmp_var_id_num;
tree
create_tmp_var_name (const char *prefix)
{
  char *tmp_name;
  if (prefix)
    {
      char *preftmp = (libiberty_optr = (prefix), libiberty_len = strlen (libiberty_optr) + 1, libiberty_nptr = C_alloca(libiberty_len), (char *) memcpy (libiberty_nptr, libiberty_optr, libiberty_len));
      remove_suffix (preftmp, strlen (preftmp));
      prefix = preftmp;
    }
  do { const char *const name_ = (prefix ? prefix : "T"); char *const output_ = (tmp_name) = C_alloca(strlen (name_) + 32); sprintf (output_, "%s.%lu", name_, (unsigned long)(tmp_var_id_num++)); } while (0);
  return get_identifier (tmp_name);
}
tree
create_tmp_var_raw (tree type, const char *prefix)
{
  tree tmp_var;
  tree new_type;
  new_type = build_qualified_type ((type), ((0) ? 0x1 : 0) | ((0) ? 0x2 : 0));
  ((new_type)->type.attributes) = ((type)->type.attributes);
  tmp_var = build_decl_stat (VAR_DECL,create_tmp_var_name (prefix),type );
  ((tmp_var)->decl.artificial_flag) = 1;
  ((tmp_var)->decl.ignored_flag) = 1;
  ((tmp_var)->common.readonly_flag) = 0;
  ((tmp_var)->decl.external_flag) = 0;
  ((tmp_var)->common.static_flag) = 0;
  ((tmp_var)->common.used_flag) = 1;
  return tmp_var;
}
tree
create_tmp_var (tree type, const char *prefix)
{
  tree tmp_var;
  tmp_var = create_tmp_var_raw (type, prefix);
  gimple_add_tmp_var (tmp_var);
  return tmp_var;
}
const char *
get_name (tree t)
{
  tree stripped_decl;
  stripped_decl = t;
  while ((((enum tree_code) (stripped_decl)->common.code) == NOP_EXPR || ((enum tree_code) (stripped_decl)->common.code) == CONVERT_EXPR || ((enum tree_code) (stripped_decl)->common.code) == NON_LVALUE_EXPR) && ((stripped_decl)->exp.operands[0]) != global_trees[TI_ERROR_MARK] && (((((stripped_decl)->common.type))->type.mode) == ((((((stripped_decl)->exp.operands[0]))->common.type))->type.mode))) (stripped_decl) = ((stripped_decl)->exp.operands[0]);
  if ((tree_code_type[(int) (((enum tree_code) (stripped_decl)->common.code))] == 'd') && ((stripped_decl)->decl.name))
    return ((const char *) (((stripped_decl)->decl.name))->identifier.id.str);
  else
    {
      switch (((enum tree_code) (stripped_decl)->common.code))
 {
 case ADDR_EXPR:
   return get_name (((stripped_decl)->exp.operands[0]));
   break;
 default:
   return ((void *)0);
 }
    }
}
static tree
create_tmp_from_val (tree val)
{
  return create_tmp_var (((val)->common.type), get_name (val));
}
static tree
lookup_tmp_var (tree val, unsigned char is_formal)
{
  if (!is_formal || ((val)->common.side_effects_flag))
    return create_tmp_from_val (val);
  else
    {
      elt_t elt, *elt_p;
      void **slot;
      elt.val = val;
      slot = htab_find_slot (gimplify_ctxp->temp_htab, (void *)&elt, INSERT);
      if (*slot == ((void *)0))
 {
   elt_p = xmalloc (sizeof (*elt_p));
   elt_p->val = val;
   elt_p->temp = create_tmp_from_val (val);
   ((elt_p->temp)->common.readonly_flag) = 1;
   *slot = (void *) elt_p;
 }
      else
 elt_p = (elt_t *) *slot;
      return elt_p->temp;
    }
}
static tree
internal_get_tmp_var (tree val, tree *pre_p, tree *post_p, unsigned char is_formal)
{
  tree t, mod;
  char class;
  gimplify_expr (&val, pre_p, post_p, is_gimple_rhs, fb_rvalue);
  t = lookup_tmp_var (val, is_formal);
  mod = build (MODIFY_EXPR, ((t)->common.type), t, val);
  class = tree_code_type[(int) (((enum tree_code) (val)->common.code))];
  if ((((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (val)->common.code))])) != 0) ? (val)->exp.locus : (location_t *)((void *)0)) != ((void *)0)))
    ((mod)->exp.locus = (((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (val)->common.code))])) != 0) ? (val)->exp.locus : (location_t *)((void *)0))));
  else
    annotate_with_locus (mod, input_location);
  gimplify_and_add (mod, pre_p);
  return t;
}
tree
get_formal_tmp_var (tree val, tree *pre_p)
{
  return internal_get_tmp_var (val, pre_p, ((void *)0), 1);
}
tree
get_initialized_tmp_var (tree val, tree *pre_p, tree *post_p)
{
  return internal_get_tmp_var (val, pre_p, post_p, 0);
}
unsigned char
is_gimple_tmp_var (tree t)
{
  return (((enum tree_code) (t)->common.code) == VAR_DECL && ((t)->decl.artificial_flag)
   && !((t)->common.static_flag) && !((t)->decl.external_flag));
}
void
declare_tmp_vars (tree vars, tree scope)
{
  tree last = vars;
  if (last)
    {
      tree temps;
      while (((enum tree_code) (scope)->common.code) == COMPOUND_EXPR)
 scope = ((scope)->exp.operands[0]);
      if (((enum tree_code) (scope)->common.code) != BIND_EXPR)
 fancy_abort ("gcc.c", 111922, "?");
      temps = nreverse (last);
      ((last)->common.chain) = ((((scope))->exp.operands[0]));
      ((((scope))->exp.operands[0])) = temps;
    }
}
void
gimple_add_tmp_var (tree tmp)
{
  if (((tmp)->common.chain) || ((tmp)->decl.seen_in_bind_expr))
    fancy_abort ("gcc.c", 111934, "?");
  ((tmp)->decl.context) = current_function_decl;
  ((tmp)->decl.seen_in_bind_expr) = 1;
  if (gimplify_ctxp)
    {
      ((tmp)->common.chain) = gimplify_ctxp->temps;
      gimplify_ctxp->temps = tmp;
    }
  else if (cfun)
    record_vars (tmp);
  else
    declare_tmp_vars (tmp, ((current_function_decl)->decl.saved_tree));
}
static unsigned char
should_carry_locus_p (tree stmt)
{
  if (((enum tree_code) (stmt)->common.code) == LABEL_EXPR)
    return 0;
  if (!((stmt)->common.side_effects_flag))
    return 0;
  return 1;
}
static void
annotate_one_with_locus (tree t, location_t locus)
{
  if ((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (t)->common.code))])) != 0)
      && ! (((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (t)->common.code))])) != 0) ? (t)->exp.locus : (location_t *)((void *)0)) != ((void *)0))
      && should_carry_locus_p (t))
    annotate_with_locus (t, locus);
}
void
annotate_all_with_locus (tree *stmt_p, location_t locus)
{
  tree_stmt_iterator i;
  if (!*stmt_p)
    return;
  for (i = tsi_start (*stmt_p); !tsi_end_p (i); tsi_next (&i))
    {
      tree t = tsi_stmt (i);
      annotate_one_with_locus (t, locus);
    }
}
static tree
mostly_copy_tree_r (tree *tp, int *walk_subtrees, void *data)
{
  enum tree_code code = ((enum tree_code) (*tp)->common.code);
  if (tree_code_type[(int) (code)] == 't'
      || tree_code_type[(int) (code)] == 'd'
      || tree_code_type[(int) (code)] == 'c'
      || code == SAVE_EXPR || code == TARGET_EXPR
      || code == BLOCK)
    *walk_subtrees = 0;
  else if (code == BIND_EXPR)
    fancy_abort ("gcc.c", 112021, "?");
  else
    copy_tree_r (tp, walk_subtrees, data);
  return (tree) ((void *)0);
}
static tree
mark_decls_volatile_r (tree *tp, int *walk_subtrees ,
         void *data )
{
  if ((((enum tree_code) (*tp)->common.code) == VAR_DECL || ((enum tree_code) (*tp)->common.code) == PARM_DECL || ((enum tree_code) (*tp)->common.code) == RESULT_DECL || (((enum tree_code) (*tp)->common.code) == SSA_NAME && (((enum tree_code) ((*tp)->ssa_name.var)->common.code) == VAR_DECL || ((enum tree_code) ((*tp)->ssa_name.var)->common.code) == PARM_DECL || ((enum tree_code) ((*tp)->ssa_name.var)->common.code) == RESULT_DECL))))
    ((*tp)->common.volatile_flag) = 1;
  return (tree) ((void *)0);
}
static tree
copy_if_shared_r (tree *tp, int *walk_subtrees ,
    void *data )
{
  tree t = *tp;
  enum tree_code code = ((enum tree_code) (t)->common.code);
  if (tree_code_type[(int) (code)] == 't'
      || tree_code_type[(int) (code)] == 'd'
      || tree_code_type[(int) (code)] == 'c')
    {
      if (((t)->common.visited))
 *walk_subtrees = 0;
      else
 ((t)->common.visited) = 1;
    }
  else if (((t)->common.visited))
    {
      walk_tree (tp, mostly_copy_tree_r, ((void *)0), ((void *)0));
      *walk_subtrees = 0;
    }
  else
    {
      ((t)->common.visited) = 1;
      if (((enum tree_code) (*tp)->common.code) == VA_ARG_EXPR
   && targetm.calls.gimplify_va_arg_expr == ((void *)0))
 {
   walk_tree (&((*tp)->exp.operands[0]), mark_decls_volatile_r,
       ((void *)0), ((void *)0));
 }
    }
  return (tree) ((void *)0);
}
static tree
unmark_visited_r (tree *tp, int *walk_subtrees ,
    void *data )
{
  if (((*tp)->common.visited))
    ((*tp)->common.visited) = 0;
  else
    *walk_subtrees = 0;
  return (tree) ((void *)0);
}
static void
unshare_body (tree *body_p, tree fndecl)
{
  struct cgraph_node *cgn = cgraph_node (fndecl);
  walk_tree (body_p, copy_if_shared_r, ((void *)0), ((void *)0));
  if (body_p == &((fndecl)->decl.saved_tree))
    for (cgn = cgn->nested; cgn; cgn = cgn->next_nested)
      unshare_body (&((cgn->decl)->decl.saved_tree), cgn->decl);
}
static void
unvisit_body (tree *body_p, tree fndecl)
{
  struct cgraph_node *cgn = cgraph_node (fndecl);
  walk_tree (body_p, unmark_visited_r, ((void *)0), ((void *)0));
  if (body_p == &((fndecl)->decl.saved_tree))
    for (cgn = cgn->nested; cgn; cgn = cgn->next_nested)
      unvisit_body (&((cgn->decl)->decl.saved_tree), cgn->decl);
}
void
unshare_all_trees (tree t)
{
  walk_tree (&t, copy_if_shared_r, ((void *)0), ((void *)0));
  walk_tree (&t, unmark_visited_r, ((void *)0), ((void *)0));
}
tree
unshare_expr (tree expr)
{
  walk_tree (&expr, mostly_copy_tree_r, ((void *)0), ((void *)0));
  return expr;
}
tree
gimple_build_eh_filter (tree body, tree allowed, tree failure)
{
  tree t;
  t = build (EH_FILTER_EXPR, global_trees[TI_VOID_TYPE], allowed, (tree) ((void *)0));
  append_to_statement_list (failure, &(((t))->exp.operands[1]));
  t = build (TRY_CATCH_EXPR, global_trees[TI_VOID_TYPE], (tree) ((void *)0), t);
  append_to_statement_list (body, &((t)->exp.operands[0]));
  return t;
}
tree
voidify_wrapper_expr (tree wrapper, tree temp)
{
  if (!(((enum tree_code) (((wrapper)->common.type))->common.code) == VOID_TYPE))
    {
      tree *p, sub = wrapper;
    restart:
      switch (((enum tree_code) (sub)->common.code))
 {
 case BIND_EXPR:
   p = &((((sub))->exp.operands[1]));
   break;
 default:
   p = &((sub)->exp.operands[0]);
   break;
 }
      if (((enum tree_code) (*p)->common.code) == STATEMENT_LIST)
 {
   tree_stmt_iterator i = tsi_last (*p);
   p = tsi_end_p (i) ? ((void *)0) : tsi_stmt_ptr (i);
 }
      else
 {
   for (; ((enum tree_code) (*p)->common.code) == COMPOUND_EXPR; p = &((*p)->exp.operands[1]))
     {
       ((*p)->common.side_effects_flag) = 1;
       ((*p)->common.type) = global_trees[TI_VOID_TYPE];
     }
 }
      if (p == ((void *)0) || (((enum tree_code) (*p)->common.code) == NOP_EXPR && (((enum tree_code) (((*p)->common.type))->common.code) == VOID_TYPE) && integer_zerop (((*p)->exp.operands[0]))))
 ;
      else if (((enum tree_code) (*p)->common.code) == TRY_FINALLY_EXPR
        || ((enum tree_code) (*p)->common.code) == TRY_CATCH_EXPR)
 {
   sub = *p;
   goto restart;
 }
      else if (((enum tree_code) (*p)->common.code) == INIT_EXPR
        || ((enum tree_code) (*p)->common.code) == TARGET_EXPR)
 temp = ((*p)->exp.operands[0]);
      else if (((enum tree_code) (*p)->common.code) == INDIRECT_REF)
 {
   tree ptr = ((*p)->exp.operands[0]);
   temp = create_tmp_var (((ptr)->common.type), "retval");
   *p = build (MODIFY_EXPR, ((ptr)->common.type), temp, ptr);
   temp = build1_stat (INDIRECT_REF,((((temp)->common.type))->common.type),temp );
   ((wrapper)->common.side_effects_flag) = 1;
 }
      else
 {
   if (!temp)
     temp = create_tmp_var (((wrapper)->common.type), "retval");
   *p = build (MODIFY_EXPR, ((temp)->common.type), temp, *p);
   ((wrapper)->common.side_effects_flag) = 1;
 }
      ((wrapper)->common.type) = global_trees[TI_VOID_TYPE];
      return temp;
    }
  return (tree) ((void *)0);
}
static void
build_stack_save_restore (tree *save, tree *restore)
{
  tree save_call, tmp_var;
  save_call =
      build_function_call_expr (implicit_built_in_decls[BUILT_IN_STACK_SAVE],
    (tree) ((void *)0));
  tmp_var = create_tmp_var (global_trees[TI_PTR_TYPE], "saved_stack");
  *save = build (MODIFY_EXPR, global_trees[TI_PTR_TYPE], tmp_var, save_call);
  *restore =
    build_function_call_expr (implicit_built_in_decls[BUILT_IN_STACK_RESTORE],
         tree_cons_stat ((tree) ((void *)0),tmp_var,(tree) ((void *)0) ));
}
static enum gimplify_status
gimplify_bind_expr (tree *expr_p, tree temp, tree *pre_p)
{
  tree bind_expr = *expr_p;
  unsigned char old_save_stack = gimplify_ctxp->save_stack;
  tree t;
  temp = voidify_wrapper_expr (bind_expr, temp);
  for (t = ((((bind_expr))->exp.operands[0])); t ; t = ((t)->common.chain))
    ((t)->decl.seen_in_bind_expr) = 1;
  gimple_push_bind_expr (bind_expr);
  gimplify_ctxp->save_stack = 0;
  gimplify_to_stmt_list (&((((bind_expr))->exp.operands[1])));
  if (gimplify_ctxp->save_stack)
    {
      tree stack_save, stack_restore;
      build_stack_save_restore (&stack_save, &stack_restore);
      t = build (TRY_FINALLY_EXPR, global_trees[TI_VOID_TYPE],
   ((((bind_expr))->exp.operands[1])), (tree) ((void *)0));
      append_to_statement_list (stack_restore, &((t)->exp.operands[1]));
      ((((bind_expr))->exp.operands[1])) = (tree) ((void *)0);
      append_to_statement_list (stack_save, &((((bind_expr))->exp.operands[1])));
      append_to_statement_list (t, &((((bind_expr))->exp.operands[1])));
    }
  gimplify_ctxp->save_stack = old_save_stack;
  gimple_pop_bind_expr ();
  if (temp)
    {
      *expr_p = temp;
      append_to_statement_list (bind_expr, pre_p);
      return GS_OK;
    }
  else
    return GS_ALL_DONE;
}
static enum gimplify_status
gimplify_return_expr (tree stmt, tree *pre_p)
{
  tree ret_expr = ((stmt)->exp.operands[0]);
  tree result_decl, result;
  if (!ret_expr || ((enum tree_code) (ret_expr)->common.code) == RESULT_DECL)
    return GS_ALL_DONE;
  if (ret_expr == global_trees[TI_ERROR_MARK])
    return GS_ERROR;
  if ((((enum tree_code) (((((current_function_decl)->common.type))->common.type))->common.code) == VOID_TYPE))
    result_decl = (tree) ((void *)0);
  else
    {
      result_decl = ((ret_expr)->exp.operands[0]);
    }
  if (!result_decl
      || aggregate_value_p (result_decl, ((current_function_decl)->common.type)))
    result = result_decl;
  else if (gimplify_ctxp->return_temp)
    result = gimplify_ctxp->return_temp;
  else
    {
      result = create_tmp_var (((result_decl)->common.type), ((void *)0));
      ((result)->common.nowarning_flag) = 1;
      gimplify_ctxp->return_temp = result;
    }
  if (result != result_decl)
    ((ret_expr)->exp.operands[0]) = result;
  gimplify_and_add (((stmt)->exp.operands[0]), pre_p);
  if (result == result_decl)
    ret_expr = result;
  else
    ret_expr = build (MODIFY_EXPR, ((result)->common.type), result_decl, result);
  ((stmt)->exp.operands[0]) = ret_expr;
  return GS_ALL_DONE;
}
static enum gimplify_status
gimplify_decl_expr (tree *stmt_p)
{
  tree stmt = *stmt_p;
  tree decl = (((stmt))->exp.operands[0]);
  *stmt_p = (tree) ((void *)0);
  if (((decl)->common.type) == global_trees[TI_ERROR_MARK])
    return GS_ERROR;
  else if (((enum tree_code) (decl)->common.code) == TYPE_DECL)
    gimplify_type_sizes (((decl)->common.type), stmt_p);
  else if (((enum tree_code) (decl)->common.code) == VAR_DECL && !((decl)->decl.external_flag))
    {
      tree init = ((decl)->decl.initial);
      if (!((((decl)->decl.size))->common.constant_flag))
 {
   tree t, args;
   gimplify_type_sizes (((decl)->common.type), stmt_p);
   gimplify_one_sizepos (&((decl)->decl.size), stmt_p);
   gimplify_one_sizepos (&((decl)->decl.size_unit), stmt_p);
   args = tree_cons_stat (((void *)0),((decl)->decl.size_unit),((void *)0) );
   t = build_fold_addr_expr (decl);
   args = tree_cons_stat (((void *)0),t,args );
   t = implicit_built_in_decls[BUILT_IN_STACK_ALLOC];
   t = build_function_call_expr (t, args);
   gimplify_and_add (t, stmt_p);
   ((decl)->decl.defer_output) = 1;
 }
      if (init && init != global_trees[TI_ERROR_MARK])
 {
   if (!((decl)->common.static_flag))
     {
       ((decl)->decl.initial) = (tree) ((void *)0);
       init = build (MODIFY_EXPR, global_trees[TI_VOID_TYPE], decl, init);
       gimplify_and_add (init, stmt_p);
     }
   else
     walk_tree (&init, force_labels_r, ((void *)0), ((void *)0));
 }
      if (((decl)->decl.artificial_flag) && ((decl)->decl.name) == (tree) ((void *)0))
 gimple_add_tmp_var (decl);
    }
  return GS_ALL_DONE;
}
static enum gimplify_status
gimplify_loop_expr (tree *expr_p, tree *pre_p)
{
  tree saved_label = gimplify_ctxp->exit_label;
  tree start_label = build1_stat (LABEL_EXPR,global_trees[TI_VOID_TYPE],(tree) ((void *)0) );
  tree jump_stmt = build_and_jump (&(((start_label))->exp.operands[0]));
  append_to_statement_list (start_label, pre_p);
  gimplify_ctxp->exit_label = (tree) ((void *)0);
  gimplify_and_add (((*expr_p)->exp.operands[0]), pre_p);
  if (gimplify_ctxp->exit_label)
    {
      append_to_statement_list (jump_stmt, pre_p);
      *expr_p = build1_stat (LABEL_EXPR,global_trees[TI_VOID_TYPE],gimplify_ctxp->exit_label );
    }
  else
    *expr_p = jump_stmt;
  gimplify_ctxp->exit_label = saved_label;
  return GS_ALL_DONE;
}
static int
compare_case_labels (const void *p1, const void *p2)
{
  tree case1 = *(tree *)p1;
  tree case2 = *(tree *)p2;
  return tree_int_cst_compare ((((case1))->exp.operands[0]), (((case2))->exp.operands[0]));
}
void
sort_case_labels (tree label_vec)
{
  size_t len = ((label_vec)->vec.length);
  tree default_case = ((label_vec)->vec.a[len - 1]);
  if ((((default_case))->exp.operands[0]))
    {
      size_t i;
      for (i = 0; i < len; ++i)
 {
   tree t = ((label_vec)->vec.a[i]);
   if (!(((t))->exp.operands[0]))
     {
       default_case = t;
       ((label_vec)->vec.a[i]) = ((label_vec)->vec.a[len - 1]);
       ((label_vec)->vec.a[len - 1]) = default_case;
       break;
     }
 }
    }
  qsort (&((label_vec)->vec.a[0]), len - 1, sizeof (tree),
  compare_case_labels);
}
static enum gimplify_status
gimplify_switch_expr (tree *expr_p, tree *pre_p)
{
  tree switch_expr = *expr_p;
  enum gimplify_status ret;
  ret = gimplify_expr (&(((switch_expr))->exp.operands[0]), pre_p, ((void *)0),
         is_gimple_val, fb_rvalue);
  if ((((switch_expr))->exp.operands[1]))
    {
      varray_type labels, saved_labels;
      tree label_vec, default_case = (tree) ((void *)0);
      size_t i, len;
      if ((((switch_expr))->exp.operands[2]))
 fancy_abort ("gcc.c", 112570, "?");
      saved_labels = gimplify_ctxp->case_labels;
      gimplify_ctxp->case_labels = varray_init (8, VARRAY_DATA_TREE, "case_labels");
      gimplify_to_stmt_list (&(((switch_expr))->exp.operands[1]));
      labels = gimplify_ctxp->case_labels;
      gimplify_ctxp->case_labels = saved_labels;
      len = ((labels)->elements_used);
      for (i = 0; i < len; ++i)
 {
   tree t = ((labels)->data.tree1[i]);
   if (!(((t))->exp.operands[0]))
     {
       default_case = t;
       ((labels)->data.tree1[i]) = ((labels)->data.tree1[len - 1]);
       len--;
       break;
     }
 }
      label_vec = make_tree_vec_stat (len + 1 );
      (((*expr_p))->exp.operands[2]) = label_vec;
      append_to_statement_list (switch_expr, pre_p);
      if (! default_case)
 {
   default_case = build (CASE_LABEL_EXPR, global_trees[TI_VOID_TYPE], (tree) ((void *)0),
    (tree) ((void *)0), create_artificial_label ());
   append_to_statement_list ((((switch_expr))->exp.operands[1]), pre_p);
   *expr_p = build (LABEL_EXPR, global_trees[TI_VOID_TYPE],
      (((default_case))->exp.operands[2]));
 }
      else
 *expr_p = (((switch_expr))->exp.operands[1]);
      for (i = 0; i < len; ++i)
 ((label_vec)->vec.a[i]) = ((labels)->data.tree1[i]);
      ((label_vec)->vec.a[len]) = default_case;
      sort_case_labels (label_vec);
      (((switch_expr))->exp.operands[1]) = ((void *)0);
    }
  else if (!(((switch_expr))->exp.operands[2]))
    fancy_abort ("gcc.c", 112621, "?");
  return ret;
}
static enum gimplify_status
gimplify_case_label_expr (tree *expr_p)
{
  tree expr = *expr_p;
  if (gimplify_ctxp->case_labels)
    do { if ((gimplify_ctxp->case_labels)->elements_used >= (gimplify_ctxp->case_labels)->num_elements) (((gimplify_ctxp->case_labels)) = varray_grow ((gimplify_ctxp->case_labels), 2 * (gimplify_ctxp->case_labels)->num_elements)); (gimplify_ctxp->case_labels)->data.tree1[(gimplify_ctxp->case_labels)->elements_used++] = (expr); } while (0);
  else
    fancy_abort ("gcc.c", 112633, "?");
  *expr_p = build (LABEL_EXPR, global_trees[TI_VOID_TYPE], (((expr))->exp.operands[2]));
  return GS_ALL_DONE;
}
static enum gimplify_status
gimplify_labeled_block_expr (tree *expr_p)
{
  tree body = ((*expr_p)->exp.operands[1]);
  tree label = ((*expr_p)->exp.operands[0]);
  tree t;
  ((label)->decl.context) = current_function_decl;
  t = build (LABEL_EXPR, global_trees[TI_VOID_TYPE], label);
  if (body != (tree) ((void *)0))
    t = build (COMPOUND_EXPR, global_trees[TI_VOID_TYPE], body, t);
  *expr_p = t;
  return GS_OK;
}
static enum gimplify_status
gimplify_exit_block_expr (tree *expr_p)
{
  tree labeled_block = ((*expr_p)->exp.operands[0]);
  tree label;
  label = ((labeled_block)->exp.operands[0]);
  *expr_p = build1_stat (GOTO_EXPR,global_trees[TI_VOID_TYPE],label );
  return GS_OK;
}
tree
build_and_jump (tree *label_p)
{
  if (label_p == ((void *)0))
    return (tree) ((void *)0);
  if (*label_p == (tree) ((void *)0))
    {
      tree label = create_artificial_label ();
      *label_p = label;
    }
  return build1_stat (GOTO_EXPR,global_trees[TI_VOID_TYPE],*label_p );
}
static enum gimplify_status
gimplify_exit_expr (tree *expr_p)
{
  tree cond = ((*expr_p)->exp.operands[0]);
  tree expr;
  expr = build_and_jump (&gimplify_ctxp->exit_label);
  expr = build (COND_EXPR, global_trees[TI_VOID_TYPE], cond, expr, (tree) ((void *)0));
  *expr_p = expr;
  return GS_OK;
}
tree
force_labels_r (tree *tp, int *walk_subtrees, void *data )
{
  if ((tree_code_type[(int) (((enum tree_code) (*tp)->common.code))] == 't'))
    *walk_subtrees = 0;
  if (((enum tree_code) (*tp)->common.code) == LABEL_DECL)
    ((*tp)->common.side_effects_flag) = 1;
  return (tree) ((void *)0);
}
static void
canonicalize_component_ref (tree *expr_p)
{
  tree expr = *expr_p;
  tree type;
  if (((enum tree_code) (expr)->common.code) != COMPONENT_REF)
    fancy_abort ("gcc.c", 112745, "?");
  if ((((enum tree_code) (((expr)->common.type))->common.code) == INTEGER_TYPE || ((enum tree_code) (((expr)->common.type))->common.code) == ENUMERAL_TYPE || ((enum tree_code) (((expr)->common.type))->common.code) == BOOLEAN_TYPE || ((enum tree_code) (((expr)->common.type))->common.code) == CHAR_TYPE))
    type = ((get_unwidened (expr, (tree) ((void *)0)))->common.type);
  else
    type = ((((expr)->exp.operands[1]))->common.type);
  if (((expr)->common.type) != type)
    {
      tree old_type = ((expr)->common.type);
      ((expr)->common.type) = type;
      expr = build1_stat (NOP_EXPR,old_type,expr );
      *expr_p = expr;
    }
}
static void
canonicalize_addr_expr (tree *expr_p)
{
  tree expr = *expr_p;
  tree ctype = ((expr)->common.type);
  tree addr_expr = ((expr)->exp.operands[0]);
  tree atype = ((addr_expr)->common.type);
  tree dctype, datype, ddatype, otype, obj_expr;
  if (!(((enum tree_code) (ctype)->common.code) == POINTER_TYPE || ((enum tree_code) (ctype)->common.code) == REFERENCE_TYPE) || !(((enum tree_code) (atype)->common.code) == POINTER_TYPE || ((enum tree_code) (atype)->common.code) == REFERENCE_TYPE))
    return;
  datype = ((atype)->common.type);
  if (((enum tree_code) (datype)->common.code) != ARRAY_TYPE)
    return;
  dctype = ((ctype)->common.type);
  ddatype = ((datype)->common.type);
  if (!lang_hooks.types_compatible_p (ddatype, dctype))
    return;
  obj_expr = ((addr_expr)->exp.operands[0]);
  otype = ((obj_expr)->common.type);
  if (!lang_hooks.types_compatible_p (otype, datype))
    return;
  if (((enum tree_code) (((dctype)->type.size_unit))->common.code) != INTEGER_CST
      || !((datype)->type.values) || !((((datype)->type.values))->type.minval)
      || ((enum tree_code) (((((datype)->type.values))->type.minval))->common.code) != INTEGER_CST)
    return;
  *expr_p = build4_stat (ARRAY_REF,dctype,obj_expr,((((datype)->type.values))->type.minval),((((datype)->type.values))->type.minval),size_binop (EXACT_DIV_EXPR, ((dctype)->type.size_unit), size_int_wide ((long) (((dctype)->type.align) / 8), SIZETYPE)) )
                         ;
  *expr_p = build1_stat (ADDR_EXPR,ctype,*expr_p );
}
static enum gimplify_status
gimplify_conversion (tree *expr_p)
{
  if (((enum tree_code) (*expr_p)->common.code) == NOP_EXPR || ((enum tree_code) (*expr_p)->common.code) == CONVERT_EXPR)
    {
      while ((((enum tree_code) (((*expr_p)->exp.operands[0]))->common.code) == NOP_EXPR || ((enum tree_code) (((*expr_p)->exp.operands[0]))->common.code) == CONVERT_EXPR || ((enum tree_code) (((*expr_p)->exp.operands[0]))->common.code) == NON_LVALUE_EXPR) && ((((*expr_p)->exp.operands[0]))->exp.operands[0]) != global_trees[TI_ERROR_MARK] && (((((((*expr_p)->exp.operands[0]))->common.type))->type.mode) == ((((((((*expr_p)->exp.operands[0]))->exp.operands[0]))->common.type))->type.mode)) && (((((((*expr_p)->exp.operands[0]))->common.type))->common.unsigned_flag) == ((((((((*expr_p)->exp.operands[0]))->exp.operands[0]))->common.type))->common.unsigned_flag))) (((*expr_p)->exp.operands[0])) = ((((*expr_p)->exp.operands[0]))->exp.operands[0]);
      if (tree_ssa_useless_type_conversion (*expr_p))
 *expr_p = ((*expr_p)->exp.operands[0]);
    }
  if (((enum tree_code) (*expr_p)->common.code) == NOP_EXPR || ((enum tree_code) (*expr_p)->common.code) == CONVERT_EXPR)
    {
      tree sub = ((*expr_p)->exp.operands[0]);
      if (((enum tree_code) (sub)->common.code) == COMPONENT_REF)
 canonicalize_component_ref (&((*expr_p)->exp.operands[0]));
      else if (((enum tree_code) (sub)->common.code) == ADDR_EXPR)
 canonicalize_addr_expr (expr_p);
    }
  return GS_OK;
}
static enum gimplify_status
gimplify_minimax_expr (tree *expr_p, tree *pre_p, tree *post_p)
{
  tree op1 = ((*expr_p)->exp.operands[0]);
  tree op2 = ((*expr_p)->exp.operands[1]);
  enum tree_code code;
  enum gimplify_status r0, r1;
  if (((enum tree_code) (*expr_p)->common.code) == MIN_EXPR)
    code = LE_EXPR;
  else
    code = GE_EXPR;
  r0 = gimplify_expr (&op1, pre_p, post_p, is_gimple_val, fb_rvalue);
  r1 = gimplify_expr (&op2, pre_p, post_p, is_gimple_val, fb_rvalue);
  *expr_p = build (COND_EXPR, ((*expr_p)->common.type),
     build (code, global_trees[TI_BOOLEAN_TYPE], op1, op2),
     op1, op2);
  if (r0 == GS_ERROR || r1 == GS_ERROR)
    return GS_ERROR;
  else
    return GS_OK;
}
static enum gimplify_status
gimplify_array_ref_to_plus (tree *expr_p, tree *pre_p, tree *post_p)
{
  tree array = ((*expr_p)->exp.operands[0]);
  tree arrtype = ((array)->common.type);
  tree elttype = ((arrtype)->common.type);
  tree size = array_ref_element_size (*expr_p);
  tree ptrtype = build_pointer_type (elttype);
  enum tree_code add_code = PLUS_EXPR;
  tree idx = ((*expr_p)->exp.operands[1]);
  tree minidx = unshare_expr (array_ref_low_bound (*expr_p));
  tree offset, addr, result;
  enum gimplify_status ret;
  if (!integer_zerop (minidx))
    {
      idx = convert (((minidx)->common.type), idx);
      idx = fold (build (MINUS_EXPR, ((minidx)->common.type), idx, minidx));
    }
  if (((enum tree_code) (idx)->common.code) == INTEGER_CST && tree_int_cst_sgn (idx) < 0)
    {
      idx = fold (build1_stat (NEGATE_EXPR,((idx)->common.type),idx ));
      add_code = MINUS_EXPR;
    }
  idx = fold_convert (sizetype_tab[(int) SIZETYPE], idx);
  offset = size_binop (MULT_EXPR, size, idx);
  ret = gimplify_expr (&array, pre_p, post_p, is_gimple_min_lval, fb_lvalue);
  if (ret == GS_ERROR)
    return ret;
  addr = build_fold_addr_expr_with_type (array, ptrtype);
  result = fold (build (add_code, ptrtype, addr, offset));
  *expr_p = build1_stat (INDIRECT_REF,elttype,result );
  return GS_OK;
}
static enum gimplify_status
gimplify_compound_lval (tree *expr_p, tree *pre_p,
   tree *post_p, fallback_t fallback)
{
  tree *p;
  varray_type stack;
  enum gimplify_status ret = GS_OK, tret;
  int i;
  stack = varray_init (10, VARRAY_DATA_TREE, "stack");
  for (p = expr_p;
       (handled_component_p (*p)
 || ((enum tree_code) (*p)->common.code) == REALPART_EXPR || ((enum tree_code) (*p)->common.code) == IMAGPART_EXPR);
       p = &((*p)->exp.operands[0]))
    do { if ((stack)->elements_used >= (stack)->num_elements) (((stack)) = varray_grow ((stack), 2 * (stack)->num_elements)); (stack)->data.tree1[(stack)->elements_used++] = (*p); } while (0);
  for (i = ((stack)->elements_used) - 1; i >= 0; i--)
    {
      tree t = ((stack)->data.tree1[i]);
      if (((enum tree_code) (t)->common.code) == ARRAY_REF || ((enum tree_code) (t)->common.code) == ARRAY_RANGE_REF)
 {
   if (!((t)->exp.operands[2]))
     {
       tree low = unshare_expr (array_ref_low_bound (t));
       if (!is_gimple_min_invariant (low))
  {
           ((t)->exp.operands[2]) = low;
    tret = gimplify_expr (&((t)->exp.operands[2]), pre_p, post_p,
     is_gimple_tmp_var, fb_rvalue);
    ret = ((ret) < (tret) ? (ret) : (tret));
  }
     }
   if (!((t)->exp.operands[3]))
     {
       tree elmt_type = ((((((t)->exp.operands[0]))->common.type))->common.type);
       tree elmt_size = unshare_expr (array_ref_element_size (t));
       tree factor = size_int_wide ((long) (((elmt_type)->type.align) / 8), SIZETYPE);
       elmt_size = size_binop (EXACT_DIV_EXPR, elmt_size, factor);
       if (!is_gimple_min_invariant (elmt_size))
  {
           ((t)->exp.operands[3]) = elmt_size;
    tret = gimplify_expr (&((t)->exp.operands[3]), pre_p, post_p,
     is_gimple_tmp_var, fb_rvalue);
    ret = ((ret) < (tret) ? (ret) : (tret));
  }
     }
 }
      else if (((enum tree_code) (t)->common.code) == COMPONENT_REF)
 {
   if (!((t)->exp.operands[2]))
     {
       tree offset = unshare_expr (component_ref_field_offset (t));
       tree field = ((t)->exp.operands[1]);
       tree factor
  = size_int_wide ((long) ((((unsigned long)1) << (field)->decl.u1.a.off_align) / 8), SIZETYPE);
       offset = size_binop (EXACT_DIV_EXPR, offset, factor);
       if (!is_gimple_min_invariant (offset))
  {
           ((t)->exp.operands[2]) = offset;
    tret = gimplify_expr (&((t)->exp.operands[2]), pre_p, post_p,
     is_gimple_tmp_var, fb_rvalue);
    ret = ((ret) < (tret) ? (ret) : (tret));
  }
     }
 }
    }
  tret = gimplify_expr (p, pre_p, post_p, is_gimple_min_lval, fallback);
  ret = ((ret) < (tret) ? (ret) : (tret));
  for (; ((stack)->elements_used) > 0; )
    {
      tree t = ((stack)->data.tree1[(stack)->elements_used - 1]);
      if (((enum tree_code) (t)->common.code) == ARRAY_REF || ((enum tree_code) (t)->common.code) == ARRAY_RANGE_REF)
 {
   if (!is_gimple_min_invariant (((t)->exp.operands[1])))
     {
       tret = gimplify_expr (&((t)->exp.operands[1]), pre_p, post_p,
        is_gimple_tmp_var, fb_rvalue);
       ret = ((ret) < (tret) ? (ret) : (tret));
     }
 }
      else if (((enum tree_code) (t)->common.code) == BIT_FIELD_REF)
 {
   tret = gimplify_expr (&((t)->exp.operands[1]), pre_p, post_p,
    is_gimple_val, fb_rvalue);
   ret = ((ret) < (tret) ? (ret) : (tret));
   tret = gimplify_expr (&((t)->exp.operands[2]), pre_p, post_p,
    is_gimple_val, fb_rvalue);
   ret = ((ret) < (tret) ? (ret) : (tret));
 }
      while (tree_ssa_useless_type_conversion (((t)->exp.operands[0]))) ((t)->exp.operands[0]) = ((((t)->exp.operands[0]))->exp.operands[0]);
      recalculate_side_effects (t);
      do { ((stack)->elements_used--); } while (0);
    }
  tret = gimplify_expr (p, pre_p, post_p, is_gimple_min_lval, fallback);
  ret = ((ret) < (tret) ? (ret) : (tret));
  if ((fallback & fb_rvalue) && ((enum tree_code) (*expr_p)->common.code) == COMPONENT_REF)
    {
      canonicalize_component_ref (expr_p);
      ret = ((ret) < (GS_OK) ? (ret) : (GS_OK));
    }
  return ret;
}
static enum gimplify_status
gimplify_self_mod_expr (tree *expr_p, tree *pre_p, tree *post_p,
   unsigned char want_value)
{
  enum tree_code code;
  tree lhs, lvalue, rhs, t1;
  unsigned char postfix;
  enum tree_code arith_code;
  enum gimplify_status ret;
  code = ((enum tree_code) (*expr_p)->common.code);
  if (code == POSTINCREMENT_EXPR || code == POSTDECREMENT_EXPR)
    postfix = want_value;
  else
    postfix = 0;
  if (code == PREINCREMENT_EXPR || code == POSTINCREMENT_EXPR)
    arith_code = PLUS_EXPR;
  else
    arith_code = MINUS_EXPR;
  lvalue = ((*expr_p)->exp.operands[0]);
  ret = gimplify_expr (&lvalue, pre_p, post_p, is_gimple_lvalue, fb_lvalue);
  if (ret == GS_ERROR)
    return ret;
  lhs = lvalue;
  rhs = ((*expr_p)->exp.operands[1]);
  if (postfix)
    {
      ret = gimplify_expr (&lhs, pre_p, post_p, is_gimple_val, fb_rvalue);
      if (ret == GS_ERROR)
 return ret;
    }
  t1 = build (arith_code, ((*expr_p)->common.type), lhs, rhs);
  t1 = build (MODIFY_EXPR, ((lvalue)->common.type), lvalue, t1);
  if (postfix)
    {
      gimplify_and_add (t1, post_p);
      *expr_p = lhs;
      return GS_ALL_DONE;
    }
  else
    {
      *expr_p = t1;
      return GS_OK;
    }
}
static enum gimplify_status
gimplify_call_expr (tree *expr_p, tree *pre_p, unsigned char want_value)
{
  tree decl;
  tree arglist;
  enum gimplify_status ret;
  if (! (((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (*expr_p)->common.code))])) != 0) ? (*expr_p)->exp.locus : (location_t *)((void *)0)) != ((void *)0)))
    annotate_with_locus (*expr_p, input_location);
  decl = get_callee_fndecl (*expr_p);
  if (decl && (((decl)->decl.built_in_class) != NOT_BUILT_IN))
    {
      tree new;
      if (((decl)->decl.u1.f) == BUILT_IN_STACK_ALLOC)
 gimplify_ctxp->save_stack = 1;
      if (((decl)->decl.u1.f) == BUILT_IN_STACK_RESTORE)
 gimplify_ctxp->save_stack = 0;
      new = simplify_builtin (*expr_p, !want_value);
      if (new && new != *expr_p)
 {
   *expr_p = new;
   return GS_OK;
 }
    }
  ret = gimplify_expr (&((*expr_p)->exp.operands[0]), pre_p, ((void *)0),
         is_gimple_call_addr, fb_rvalue);
  if (1)
    ((*expr_p)->exp.operands[1]) = nreverse (((*expr_p)->exp.operands[1]));
  for (arglist = ((*expr_p)->exp.operands[1]); arglist;
       arglist = ((arglist)->common.chain))
    {
      enum gimplify_status t;
      unsigned char (*test) (tree);
      fallback_t fb;
      if (is_gimple_reg_type (((((arglist)->list.value))->common.type)))
 test = is_gimple_val, fb = fb_rvalue;
      else
 test = is_gimple_lvalue, fb = fb_either;
      t = gimplify_expr (&((arglist)->list.value), pre_p, ((void *)0), test, fb);
      if (t == GS_ERROR)
 ret = GS_ERROR;
    }
  if (1)
    ((*expr_p)->exp.operands[1]) = nreverse (((*expr_p)->exp.operands[1]));
  if (ret != GS_ERROR && decl && (((decl)->decl.built_in_class) != NOT_BUILT_IN))
    {
      tree new = simplify_builtin (*expr_p, !want_value);
      if (new && new != *expr_p)
 {
   *expr_p = new;
   return GS_OK;
 }
    }
  if (((enum tree_code) (*expr_p)->common.code) == CALL_EXPR
      && (call_expr_flags (*expr_p) & (1 | 256)))
    ((*expr_p)->common.side_effects_flag) = 0;
  return ret;
}
static tree
shortcut_cond_r (tree pred, tree *true_label_p, tree *false_label_p)
{
  tree local_label = (tree) ((void *)0);
  tree t, expr = ((void *)0);
  if (((enum tree_code) (pred)->common.code) == TRUTH_ANDIF_EXPR)
    {
      if (false_label_p == ((void *)0))
 false_label_p = &local_label;
      t = shortcut_cond_r (((pred)->exp.operands[0]), ((void *)0), false_label_p);
      append_to_statement_list (t, &expr);
      t = shortcut_cond_r (((pred)->exp.operands[1]), true_label_p,
      false_label_p);
      append_to_statement_list (t, &expr);
    }
  else if (((enum tree_code) (pred)->common.code) == TRUTH_ORIF_EXPR)
    {
      if (true_label_p == ((void *)0))
 true_label_p = &local_label;
      t = shortcut_cond_r (((pred)->exp.operands[0]), true_label_p, ((void *)0));
      append_to_statement_list (t, &expr);
      t = shortcut_cond_r (((pred)->exp.operands[1]), true_label_p,
      false_label_p);
      append_to_statement_list (t, &expr);
    }
  else if (((enum tree_code) (pred)->common.code) == COND_EXPR)
    {
      expr = build (COND_EXPR, global_trees[TI_VOID_TYPE], ((pred)->exp.operands[0]),
      shortcut_cond_r (((pred)->exp.operands[1]), true_label_p,
         false_label_p),
      shortcut_cond_r (((pred)->exp.operands[2]), true_label_p,
         false_label_p));
    }
  else
    {
      expr = build (COND_EXPR, global_trees[TI_VOID_TYPE], pred,
      build_and_jump (true_label_p),
      build_and_jump (false_label_p));
    }
  if (local_label)
    {
      t = build1_stat (LABEL_EXPR,global_trees[TI_VOID_TYPE],local_label );
      append_to_statement_list (t, &expr);
    }
  return expr;
}
static tree
shortcut_cond_expr (tree expr)
{
  tree pred = ((expr)->exp.operands[0]);
  tree then_ = ((expr)->exp.operands[1]);
  tree else_ = ((expr)->exp.operands[2]);
  tree true_label, false_label, end_label, t;
  tree *true_label_p;
  tree *false_label_p;
  unsigned char emit_end, emit_false;
  unsigned char then_se = then_ && ((then_)->common.side_effects_flag);
  unsigned char else_se = else_ && ((else_)->common.side_effects_flag);
  if (!else_se)
    {
      while (((enum tree_code) (pred)->common.code) == TRUTH_ANDIF_EXPR)
 {
   ((expr)->exp.operands[0]) = ((pred)->exp.operands[1]);
   then_ = shortcut_cond_expr (expr);
   pred = ((pred)->exp.operands[0]);
   expr = build (COND_EXPR, global_trees[TI_VOID_TYPE], pred, then_, (tree) ((void *)0));
 }
    }
  if (!then_se)
    {
      while (((enum tree_code) (pred)->common.code) == TRUTH_ORIF_EXPR)
 {
   ((expr)->exp.operands[0]) = ((pred)->exp.operands[1]);
   else_ = shortcut_cond_expr (expr);
   pred = ((pred)->exp.operands[0]);
   expr = build (COND_EXPR, global_trees[TI_VOID_TYPE], pred, (tree) ((void *)0), else_);
 }
    }
  if (((enum tree_code) (pred)->common.code) != TRUTH_ANDIF_EXPR
      && ((enum tree_code) (pred)->common.code) != TRUTH_ORIF_EXPR)
    return expr;
  true_label = false_label = end_label = (tree) ((void *)0);
  if (then_
      && ((enum tree_code) (then_)->common.code) == GOTO_EXPR
      && ((enum tree_code) ((((then_))->exp.operands[0]))->common.code) == LABEL_DECL)
    {
      true_label = (((then_))->exp.operands[0]);
      then_ = ((void *)0);
      then_se = 0;
    }
  if (else_
      && ((enum tree_code) (else_)->common.code) == GOTO_EXPR
      && ((enum tree_code) ((((else_))->exp.operands[0]))->common.code) == LABEL_DECL)
    {
      false_label = (((else_))->exp.operands[0]);
      else_ = ((void *)0);
      else_se = 0;
    }
  if (true_label)
    true_label_p = &true_label;
  else
    true_label_p = ((void *)0);
  if (false_label || else_se)
    false_label_p = &false_label;
  else
    false_label_p = ((void *)0);
  if (!then_se && !else_se)
    return shortcut_cond_r (pred, true_label_p, false_label_p);
  if (else_se)
    expr = expr_last (else_);
  else if (then_se)
    expr = expr_last (then_);
  else
    expr = ((void *)0);
  if (expr && ((enum tree_code) (expr)->common.code) == LABEL_EXPR)
    end_label = (((expr))->exp.operands[0]);
  if (!false_label_p)
    false_label_p = &end_label;
  emit_end = (end_label == (tree) ((void *)0));
  emit_false = (false_label == (tree) ((void *)0));
  pred = shortcut_cond_r (pred, true_label_p, false_label_p);
  expr = ((void *)0);
  append_to_statement_list (pred, &expr);
  append_to_statement_list (then_, &expr);
  if (else_se)
    {
      t = build_and_jump (&end_label);
      append_to_statement_list (t, &expr);
      if (emit_false)
 {
   t = build1_stat (LABEL_EXPR,global_trees[TI_VOID_TYPE],false_label );
   append_to_statement_list (t, &expr);
 }
      append_to_statement_list (else_, &expr);
    }
  if (emit_end && end_label)
    {
      t = build1_stat (LABEL_EXPR,global_trees[TI_VOID_TYPE],end_label );
      append_to_statement_list (t, &expr);
    }
  return expr;
}
static tree
gimple_boolify (tree expr)
{
  tree type = ((expr)->common.type);
  if (((enum tree_code) (type)->common.code) == BOOLEAN_TYPE)
    return expr;
  expr = lang_hooks.truthvalue_conversion (expr);
  switch (((enum tree_code) (expr)->common.code))
    {
    case TRUTH_AND_EXPR:
    case TRUTH_OR_EXPR:
    case TRUTH_XOR_EXPR:
    case TRUTH_ANDIF_EXPR:
    case TRUTH_ORIF_EXPR:
      ((expr)->exp.operands[1]) = gimple_boolify (((expr)->exp.operands[1]));
    case TRUTH_NOT_EXPR:
      ((expr)->exp.operands[0]) = gimple_boolify (((expr)->exp.operands[0]));
    case EQ_EXPR: case NE_EXPR:
    case LE_EXPR: case GE_EXPR: case LT_EXPR: case GT_EXPR:
      ((expr)->common.type) = global_trees[TI_BOOLEAN_TYPE];
      return expr;
    default:
      return convert (global_trees[TI_BOOLEAN_TYPE], expr);
    }
}
static enum gimplify_status
gimplify_cond_expr (tree *expr_p, tree *pre_p, tree target)
{
  tree expr = *expr_p;
  tree tmp, type;
  enum gimplify_status ret;
  type = ((expr)->common.type);
  if (!type)
    ((expr)->common.type) = global_trees[TI_VOID_TYPE];
  else if (! (((enum tree_code) (type)->common.code) == VOID_TYPE))
    {
      if (target)
 {
   tmp = target;
   ret = GS_OK;
 }
      else
 {
   tmp = create_tmp_var (((expr)->common.type), "iftmp");
   ret = GS_ALL_DONE;
 }
      if (((((expr)->exp.operands[1]))->common.type) != global_trees[TI_VOID_TYPE])
 ((expr)->exp.operands[1])
   = build (MODIFY_EXPR, global_trees[TI_VOID_TYPE], tmp, ((expr)->exp.operands[1]));
      if (((((expr)->exp.operands[2]))->common.type) != global_trees[TI_VOID_TYPE])
 ((expr)->exp.operands[2])
   = build (MODIFY_EXPR, global_trees[TI_VOID_TYPE], tmp, ((expr)->exp.operands[2]));
      ((expr)->common.type) = global_trees[TI_VOID_TYPE];
      recalculate_side_effects (expr);
      gimplify_and_add (expr, pre_p);
      *expr_p = tmp;
      return ret;
    }
  ((expr)->exp.operands[0]) = gimple_boolify (((expr)->exp.operands[0]));
  if (((enum tree_code) (((expr)->exp.operands[0]))->common.code) == TRUTH_ANDIF_EXPR
      || ((enum tree_code) (((expr)->exp.operands[0]))->common.code) == TRUTH_ORIF_EXPR)
    {
      expr = shortcut_cond_expr (expr);
      if (expr != *expr_p)
 {
   *expr_p = expr;
   gimple_push_condition ();
   gimplify_stmt (expr_p);
   gimple_pop_condition (pre_p);
   return GS_ALL_DONE;
 }
    }
  ret = gimplify_expr (&((expr)->exp.operands[0]), pre_p, ((void *)0),
         is_gimple_condexpr, fb_rvalue);
  gimple_push_condition ();
  gimplify_to_stmt_list (&((expr)->exp.operands[1]));
  gimplify_to_stmt_list (&((expr)->exp.operands[2]));
  recalculate_side_effects (expr);
  gimple_pop_condition (pre_p);
  if (ret == GS_ERROR)
    ;
  else if (((((expr)->exp.operands[1]))->common.side_effects_flag))
    ret = GS_ALL_DONE;
  else if (((((expr)->exp.operands[2]))->common.side_effects_flag))
    {
      ((expr)->exp.operands[0]) = invert_truthvalue (((expr)->exp.operands[0]));
      ret = gimplify_expr (&((expr)->exp.operands[0]), pre_p, ((void *)0),
      is_gimple_condexpr, fb_rvalue);
      tmp = ((expr)->exp.operands[1]);
      ((expr)->exp.operands[1]) = ((expr)->exp.operands[2]);
      ((expr)->exp.operands[2]) = tmp;
    }
  else
    expr = ((expr)->exp.operands[0]);
  *expr_p = expr;
  return ret;
}
static enum gimplify_status
gimplify_modify_expr_to_memcpy (tree *expr_p, unsigned char want_value)
{
  tree args, t, to, to_ptr, from;
  to = ((*expr_p)->exp.operands[0]);
  from = ((*expr_p)->exp.operands[1]);
  t = ((((from)->common.type))->type.size_unit);
  t = unshare_expr (t);
  t = ((t) == 0 || ((t)->common.constant_flag) ? (t) : substitute_placeholder_in_expr (t, to));
  t = ((t) == 0 || ((t)->common.constant_flag) ? (t) : substitute_placeholder_in_expr (t, from));
  args = tree_cons_stat (((void *)0),t,((void *)0) );
  t = build_fold_addr_expr (from);
  args = tree_cons_stat (((void *)0),t,args );
  to_ptr = build_fold_addr_expr (to);
  args = tree_cons_stat (((void *)0),to_ptr,args );
  t = implicit_built_in_decls[BUILT_IN_MEMCPY];
  t = build_function_call_expr (t, args);
  if (want_value)
    {
      t = build1_stat (NOP_EXPR,((to_ptr)->common.type),t );
      t = build1_stat (INDIRECT_REF,((to)->common.type),t );
    }
  *expr_p = t;
  return GS_OK;
}
static enum gimplify_status
gimplify_modify_expr_to_memset (tree *expr_p, unsigned char want_value)
{
  tree args, t, to, to_ptr;
  to = ((*expr_p)->exp.operands[0]);
  t = ((((((*expr_p)->exp.operands[1]))->common.type))->type.size_unit);
  t = unshare_expr (t);
  t = ((t) == 0 || ((t)->common.constant_flag) ? (t) : substitute_placeholder_in_expr (t, to));
  args = tree_cons_stat (((void *)0),t,((void *)0) );
  args = tree_cons_stat (((void *)0),global_trees[TI_INTEGER_ZERO],args );
  to_ptr = build_fold_addr_expr (to);
  args = tree_cons_stat (((void *)0),to_ptr,args );
  t = implicit_built_in_decls[BUILT_IN_MEMSET];
  t = build_function_call_expr (t, args);
  if (want_value)
    {
      t = build1_stat (NOP_EXPR,((to_ptr)->common.type),t );
      t = build1_stat (INDIRECT_REF,((to)->common.type),t );
    }
  *expr_p = t;
  return GS_OK;
}
static enum gimplify_status
gimplify_init_constructor (tree *expr_p, tree *pre_p,
      tree *post_p, unsigned char want_value)
{
  tree object = ((*expr_p)->exp.operands[0]);
  tree ctor = ((*expr_p)->exp.operands[1]);
  tree type = ((ctor)->common.type);
  enum gimplify_status ret;
  tree elt_list;
  if (((enum tree_code) (ctor)->common.code) != CONSTRUCTOR)
    return GS_UNHANDLED;
  elt_list = ((ctor)->exp.operands[0]);
  ret = GS_ALL_DONE;
  switch (((enum tree_code) (type)->common.code))
    {
    case RECORD_TYPE:
    case UNION_TYPE:
    case QUAL_UNION_TYPE:
    case ARRAY_TYPE:
      {
 long i, num_elements, num_nonzero_elements;
 long num_nonconstant_elements;
 unsigned char cleared;
 if (elt_list == ((void *)0))
   {
     if (want_value)
       {
  *expr_p = object;
  return GS_OK;
       }
     else
       return GS_UNHANDLED;
   }
 categorize_ctor_elements (ctor, &num_nonzero_elements,
      &num_nonconstant_elements);
 num_elements = count_type_elements (((ctor)->common.type));
 if (num_nonconstant_elements == 0
     && ((object)->common.readonly_flag)
     && ((enum tree_code) (object)->common.code) == VAR_DECL)
   {
     ((object)->decl.initial) = ctor;
     ((object)->common.static_flag) = 1;
     if (!((object)->decl.name))
       ((object)->decl.name) = create_tmp_var_name ("C");
     walk_tree (&((object)->decl.initial), force_labels_r, ((void *)0), ((void *)0));
     lhd_set_decl_assembler_name (object);
     *expr_p = (tree) ((void *)0);
     break;
   }
 if (num_nonconstant_elements == 0)
   {
     long size = int_size_in_bytes (type);
     unsigned int align;
     if (size < 0)
       {
  size = int_size_in_bytes (((object)->common.type));
  if (size >= 0)
    ((ctor)->common.type) = type = ((object)->common.type);
       }
     if ((tree_code_type[(int) (((enum tree_code) (object)->common.code))] == 'd'))
       align = ((object)->decl.u1.a.align);
     else
       align = ((type)->type.align);
     if (size > 0 && !can_move_by_pieces (size, align))
       {
  tree new = create_tmp_var_raw (type, "C");
  gimple_add_tmp_var (new);
  ((new)->common.static_flag) = 1;
  ((new)->common.readonly_flag) = 1;
  ((new)->decl.initial) = ctor;
  if (align > ((new)->decl.u1.a.align))
    {
      ((new)->decl.u1.a.align) = align;
      ((new)->decl.user_align) = 1;
    }
         walk_tree (&((new)->decl.initial), force_labels_r, ((void *)0), ((void *)0));
  ((*expr_p)->exp.operands[1]) = new;
  break;
       }
   }
 cleared = 0;
 if (num_elements - num_nonzero_elements > 2
     && num_nonzero_elements < num_elements/4)
   cleared = 1;
 else
   {
     long len = list_length (elt_list);
     if (((enum tree_code) (type)->common.code) == ARRAY_TYPE)
       {
  tree nelts = array_type_nelts (type);
  if (!host_integerp (nelts, 1)
      || tree_low_cst (nelts, 1) + 1 != len)
    cleared = 1;;
       }
     else if (len != fields_length (type))
       cleared = 1;
   }
 if (cleared)
   {
     ((ctor)->exp.operands[0]) = (tree) ((void *)0);
     object = unshare_expr (((*expr_p)->exp.operands[0]));
     gimplify_stmt (expr_p);
     append_to_statement_list (*expr_p, pre_p);
   }
 for (i = 0; elt_list; i++, elt_list = ((elt_list)->common.chain))
   {
     tree purpose, value, cref, init;
     purpose = ((elt_list)->list.purpose);
     value = ((elt_list)->list.value);
     if (cleared && initializer_zerop (value))
       continue;
     if (((enum tree_code) (type)->common.code) == ARRAY_TYPE)
       {
  tree t = ((((((object)->common.type))->common.type))->type.main_variant);
  if (!purpose)
    fancy_abort ("gcc.c", 113970, "?");
  if (((enum tree_code) (purpose)->common.code) == RANGE_EXPR)
    fancy_abort ("gcc.c", 113973, "?");
  cref = build (ARRAY_REF, t, unshare_expr (object), purpose,
         (tree) ((void *)0), (tree) ((void *)0));
       }
     else
       cref = build (COMPONENT_REF, ((purpose)->common.type),
       unshare_expr (object), purpose, (tree) ((void *)0));
     init = build (MODIFY_EXPR, ((purpose)->common.type), cref, value);
     gimplify_and_add (init, pre_p);
   }
 *expr_p = (tree) ((void *)0);
      }
      break;
    case COMPLEX_TYPE:
      {
 tree r, i;
 r = i = (tree) ((void *)0);
 if (elt_list)
   {
     r = ((elt_list)->list.value);
     elt_list = ((elt_list)->common.chain);
     if (elt_list)
       {
  i = ((elt_list)->list.value);
  if (((elt_list)->common.chain))
    fancy_abort ("gcc.c", 114006, "?");
       }
   }
 if (r == ((void *)0) || i == ((void *)0))
   {
     tree zero = convert (((type)->common.type), global_trees[TI_INTEGER_ZERO]);
     if (r == ((void *)0))
       r = zero;
     if (i == ((void *)0))
       i = zero;
   }
 if (((r)->common.constant_flag) && ((i)->common.constant_flag))
   {
     ctor = build_complex (type, r, i);
     ((*expr_p)->exp.operands[1]) = ctor;
   }
 else
   {
     ctor = build (COMPLEX_EXPR, type, r, i);
     ((*expr_p)->exp.operands[1]) = ctor;
     ret = gimplify_expr (&((*expr_p)->exp.operands[1]), pre_p, post_p,
     is_gimple_rhs, fb_rvalue);
   }
      }
      break;
    case VECTOR_TYPE:
      if (((ctor)->common.constant_flag))
 ((*expr_p)->exp.operands[1]) = build_vector (type, elt_list);
      else
 {
   for (; elt_list; elt_list = ((elt_list)->common.chain))
     {
       enum gimplify_status tret;
       tret = gimplify_expr (&((elt_list)->list.value), pre_p, post_p,
        is_gimple_constructor_elt, fb_rvalue);
       if (tret == GS_ERROR)
  ret = GS_ERROR;
     }
 }
      break;
    default:
      fancy_abort ("gcc.c", 114056, "?");
    }
  if (ret == GS_ERROR)
    return GS_ERROR;
  else if (want_value)
    {
      append_to_statement_list (*expr_p, pre_p);
      *expr_p = object;
      return GS_OK;
    }
  else
    return GS_ALL_DONE;
}
static enum gimplify_status
gimplify_modify_expr_rhs (tree *expr_p, tree *from_p, tree *to_p, tree *pre_p,
     tree *post_p, unsigned char want_value)
{
  enum gimplify_status ret = GS_OK;
  while (ret != GS_UNHANDLED)
    switch (((enum tree_code) (*from_p)->common.code))
      {
      case TARGET_EXPR:
 {
   tree init = ((*from_p)->exp.operands[1]);
   if (!(((enum tree_code) (((init)->common.type))->common.code) == VOID_TYPE))
     {
       *from_p = init;
       ret = GS_OK;
     }
   else
     ret = GS_UNHANDLED;
 }
 break;
      case COMPOUND_EXPR:
 gimplify_compound_expr (from_p, pre_p, 1);
 ret = GS_OK;
 break;
      case CONSTRUCTOR:
 return gimplify_init_constructor (expr_p, pre_p, post_p, want_value);
      case COND_EXPR:
 if (((((*from_p)->common.type))->common.addressable_flag))
   {
     *expr_p = *from_p;
     return gimplify_cond_expr (expr_p, pre_p, *to_p);
   }
 else
   ret = GS_UNHANDLED;
 break;
      default:
 ret = GS_UNHANDLED;
 break;
      }
  return ret;
}
static enum gimplify_status
gimplify_modify_expr (tree *expr_p, tree *pre_p, tree *post_p, unsigned char want_value)
{
  tree *from_p = &((*expr_p)->exp.operands[1]);
  tree *to_p = &((*expr_p)->exp.operands[0]);
  enum gimplify_status ret = GS_UNHANDLED;
  if (((enum tree_code) (*expr_p)->common.code) == INIT_EXPR)
    ((*expr_p)->common.code = (MODIFY_EXPR));
  ret = gimplify_modify_expr_rhs (expr_p, from_p, to_p, pre_p, post_p,
      want_value);
  if (ret != GS_UNHANDLED)
    return ret;
  if (((enum tree_code) (((*from_p)->common.type))->common.code) != ERROR_MARK
      && ((((*from_p)->common.type))->type.size_unit)
      && ((enum tree_code) (((((*from_p)->common.type))->type.size_unit))->common.code) != INTEGER_CST)
    {
      if (((enum tree_code) (*from_p)->common.code) == CONSTRUCTOR)
 return gimplify_modify_expr_to_memset (expr_p, want_value);
      else
 return gimplify_modify_expr_to_memcpy (expr_p, want_value);
    }
  ret = gimplify_expr (to_p, pre_p, post_p, is_gimple_lvalue, fb_lvalue);
  if (ret == GS_ERROR)
    return ret;
  ret = gimplify_expr (from_p, pre_p, post_p, is_gimple_rhs, fb_rvalue);
  if (ret == GS_ERROR)
    return ret;
  ret = gimplify_modify_expr_rhs (expr_p, from_p, to_p, pre_p, post_p,
      want_value);
  if (ret != GS_UNHANDLED)
    return ret;
  if (is_gimple_tmp_var (*to_p))
    ret = GS_ALL_DONE;
  else
    {
      if (aggregate_value_p (((*from_p)->common.type), (tree) ((void *)0)))
                       ;
      else if (((enum tree_code) (*from_p)->common.code) == CALL_EXPR
        || (flag_non_call_exceptions && tree_could_trap_p (*from_p))
        || (is_gimple_reg_type (((*from_p)->common.type))
     && !is_gimple_reg (*to_p)))
 gimplify_expr (from_p, pre_p, post_p, is_gimple_val, fb_rvalue);
      ret = want_value ? GS_OK : GS_ALL_DONE;
    }
  if (want_value)
    {
      append_to_statement_list (*expr_p, pre_p);
      *expr_p = *to_p;
    }
  return ret;
}
static enum gimplify_status
gimplify_variable_sized_compare (tree *expr_p)
{
  tree op0 = ((*expr_p)->exp.operands[0]);
  tree op1 = ((*expr_p)->exp.operands[1]);
  tree args, t, dest;
  t = ((((op0)->common.type))->type.size_unit);
  t = unshare_expr (t);
  t = ((t) == 0 || ((t)->common.constant_flag) ? (t) : substitute_placeholder_in_expr (t, op0));
  args = tree_cons_stat (((void *)0),t,((void *)0) );
  t = build_fold_addr_expr (op1);
  args = tree_cons_stat (((void *)0),t,args );
  dest = build_fold_addr_expr (op0);
  args = tree_cons_stat (((void *)0),dest,args );
  t = implicit_built_in_decls[BUILT_IN_MEMCMP];
  t = build_function_call_expr (t, args);
  *expr_p
    = build (((enum tree_code) (*expr_p)->common.code), ((*expr_p)->common.type), t, global_trees[TI_INTEGER_ZERO]);
  return GS_OK;
}
static enum gimplify_status
gimplify_boolean_expr (tree *expr_p)
{
  tree type = ((*expr_p)->common.type);
  *expr_p = build (COND_EXPR, type, *expr_p,
     convert (type, global_trees[TI_BOOLEAN_TRUE]),
     convert (type, global_trees[TI_BOOLEAN_FALSE]));
  return GS_OK;
}
static enum gimplify_status
gimplify_compound_expr (tree *expr_p, tree *pre_p, unsigned char want_value)
{
  tree t = *expr_p;
  do
    {
      tree *sub_p = &((t)->exp.operands[0]);
      if (((enum tree_code) (*sub_p)->common.code) == COMPOUND_EXPR)
 gimplify_compound_expr (sub_p, pre_p, 0);
      else
 gimplify_stmt (sub_p);
      append_to_statement_list (*sub_p, pre_p);
      t = ((t)->exp.operands[1]);
    }
  while (((enum tree_code) (t)->common.code) == COMPOUND_EXPR);
  *expr_p = t;
  if (want_value)
    return GS_OK;
  else
    {
      gimplify_stmt (expr_p);
      return GS_ALL_DONE;
    }
}
static enum gimplify_status
gimplify_statement_list (tree *expr_p)
{
  tree_stmt_iterator i = tsi_start (*expr_p);
  while (!tsi_end_p (i))
    {
      tree t;
      gimplify_stmt (tsi_stmt_ptr (i));
      t = tsi_stmt (i);
      if (t == ((void *)0))
 tsi_delink (&i);
      else if (((enum tree_code) (t)->common.code) == STATEMENT_LIST)
 {
   tsi_link_before (&i, t, TSI_SAME_STMT);
   tsi_delink (&i);
 }
      else
 tsi_next (&i);
    }
  return GS_ALL_DONE;
}
static enum gimplify_status
gimplify_save_expr (tree *expr_p, tree *pre_p, tree *post_p)
{
  enum gimplify_status ret = GS_ALL_DONE;
  tree val;
  val = ((*expr_p)->exp.operands[0]);
  if (is_gimple_tmp_var (val))
    *expr_p = val;
  else if (((val)->common.type) == global_trees[TI_VOID_TYPE])
    {
      tree body = ((*expr_p)->exp.operands[0]);
      ret = gimplify_expr (& body, pre_p, post_p, is_gimple_stmt, fb_none);
      append_to_statement_list (body, pre_p);
      *expr_p = ((void *)0);
    }
  else
    *expr_p = ((*expr_p)->exp.operands[0])
      = get_initialized_tmp_var (val, pre_p, post_p);
  return ret;
}
static enum gimplify_status
gimplify_addr_expr (tree *expr_p, tree *pre_p, tree *post_p)
{
  tree expr = *expr_p;
  tree op0 = ((expr)->exp.operands[0]);
  enum gimplify_status ret;
  switch (((enum tree_code) (op0)->common.code))
    {
    case INDIRECT_REF:
      *expr_p = ((op0)->exp.operands[0]);
      ret = GS_OK;
      break;
    case ARRAY_REF:
      ret = gimplify_array_ref_to_plus (&((expr)->exp.operands[0]),
     pre_p, post_p);
      *expr_p = ((((expr)->exp.operands[0]))->exp.operands[0]);
      break;
    case VIEW_CONVERT_EXPR:
      *expr_p = fold_convert (((expr)->common.type),
         build_fold_addr_expr (((op0)->exp.operands[0])));
      ret = GS_OK;
      break;
    default:
      ret = gimplify_expr (&((expr)->exp.operands[0]), pre_p, post_p,
      is_gimple_addr_expr_arg, fb_either);
      if (ret != GS_ERROR)
 {
   recompute_tree_invarant_for_addr_expr (expr);
   lang_hooks.mark_addressable (((expr)->exp.operands[0]));
 }
      break;
    }
  if ((tree_code_type[(int) (((enum tree_code) (((expr)->exp.operands[0]))->common.code))] == 'd'))
    ((expr)->common.invariant_flag) = 1;
  return ret;
}
static enum gimplify_status
gimplify_asm_expr (tree *expr_p, tree *pre_p, tree *post_p)
{
  tree expr = *expr_p;
  int noutputs = list_length ((((expr))->exp.operands[1]));
  const char **oconstraints
    = (const char **) C_alloca((noutputs) * sizeof (const char *));
  int i;
  tree link;
  const char *constraint;
  unsigned char allows_mem, allows_reg, is_inout;
  enum gimplify_status ret, tret;
  (((expr))->exp.operands[0])
    = resolve_asm_operand_names ((((expr))->exp.operands[0]), (((expr))->exp.operands[1]),
     (((expr))->exp.operands[2]));
  ret = GS_ALL_DONE;
  for (i = 0, link = (((expr))->exp.operands[1]); link; ++i, link = ((link)->common.chain))
    {
      oconstraints[i] = constraint
 = ((((((link)->list.purpose))->list.value))->string1.pointer);
      parse_output_constraint (&constraint, i, 0, 0,
          &allows_mem, &allows_reg, &is_inout);
      if (!allows_reg && allows_mem)
 lang_hooks.mark_addressable (((link)->list.value));
      tret = gimplify_expr (&((link)->list.value), pre_p, post_p,
       is_inout ? is_gimple_min_lval : is_gimple_lvalue,
       fb_lvalue | fb_mayfail);
      if (tret == GS_ERROR)
 {
   error ("invalid lvalue in asm output %d", i);
   ret = tret;
 }
      if (is_inout)
 {
   tree input;
   char buf[10];
   size_t constraint_len = strlen (constraint);
   char *p = xstrdup (constraint);
   p[0] = '=';
   ((((link)->list.purpose))->list.value) = build_string (constraint_len, p);
   free (p);
   if (allows_reg)
     {
       sprintf (buf, "%d", i);
       input = build_string (strlen (buf), buf);
     }
   else
     input = build_string (constraint_len - 1, constraint + 1);
   input = build_tree_list_stat(build_tree_list_stat((tree) ((void *)0),input ),unshare_expr (((link)->list.value)) )
                                        ;
   (((expr))->exp.operands[2]) = chainon ((((expr))->exp.operands[2]), input);
 }
    }
  for (link = (((expr))->exp.operands[2]); link; ++i, link = ((link)->common.chain))
    {
      constraint
 = ((((((link)->list.purpose))->list.value))->string1.pointer);
      parse_input_constraint (&constraint, 0, 0, noutputs, 0,
         oconstraints, &allows_mem, &allows_reg);
      if (!allows_reg && allows_mem)
 {
   lang_hooks.mark_addressable (((link)->list.value));
   tret = gimplify_expr (&((link)->list.value), pre_p, post_p,
    is_gimple_lvalue, fb_lvalue | fb_mayfail);
   if (tret == GS_ERROR)
     {
       error ("memory input %d is not directly addressable", i);
       ret = tret;
     }
 }
      else
 {
   tret = gimplify_expr (&((link)->list.value), pre_p, post_p,
    is_gimple_val, fb_rvalue);
   if (tret == GS_ERROR)
     ret = tret;
 }
    }
  return ret;
}
static enum gimplify_status
gimplify_cleanup_point_expr (tree *expr_p, tree *pre_p)
{
  tree_stmt_iterator iter;
  tree body;
  tree temp = voidify_wrapper_expr (*expr_p, ((void *)0));
  int old_conds = gimplify_ctxp->conditions;
  gimplify_ctxp->conditions = 0;
  body = ((*expr_p)->exp.operands[0]);
  gimplify_to_stmt_list (&body);
  gimplify_ctxp->conditions = old_conds;
  for (iter = tsi_start (body); !tsi_end_p (iter); )
    {
      tree *wce_p = tsi_stmt_ptr (iter);
      tree wce = *wce_p;
      if (((enum tree_code) (wce)->common.code) == WITH_CLEANUP_EXPR)
 {
   if (tsi_one_before_end_p (iter))
     {
       tsi_link_before (&iter, ((wce)->exp.operands[1]), TSI_SAME_STMT);
       tsi_delink (&iter);
       break;
     }
   else
     {
       tree sl, tfe;
       sl = tsi_split_statement_list_after (&iter);
       tfe = build (TRY_FINALLY_EXPR, global_trees[TI_VOID_TYPE], sl, (tree) ((void *)0));
       append_to_statement_list (((wce)->exp.operands[1]),
         &((tfe)->exp.operands[1]));
       *wce_p = tfe;
       iter = tsi_start (sl);
     }
 }
      else
 tsi_next (&iter);
    }
  if (temp)
    {
      *expr_p = temp;
      append_to_statement_list (body, pre_p);
      return GS_OK;
    }
  else
    {
      *expr_p = body;
      return GS_ALL_DONE;
    }
}
static void
gimple_push_cleanup (tree var, tree cleanup, tree *pre_p)
{
  tree wce;
  if ((global_dc)->diagnostic_count[(int) (DK_ERROR)] || (global_dc)->diagnostic_count[(int) (DK_SORRY)])
    return;
  if (gimple_conditional_context ())
    {
      tree flag = create_tmp_var (global_trees[TI_BOOLEAN_TYPE], "cleanup");
      tree ffalse = build (MODIFY_EXPR, global_trees[TI_VOID_TYPE], flag,
      global_trees[TI_BOOLEAN_FALSE]);
      tree ftrue = build (MODIFY_EXPR, global_trees[TI_VOID_TYPE], flag,
     global_trees[TI_BOOLEAN_TRUE]);
      cleanup = build (COND_EXPR, global_trees[TI_VOID_TYPE], flag, cleanup, ((void *)0));
      wce = build (WITH_CLEANUP_EXPR, global_trees[TI_VOID_TYPE], (tree) ((void *)0),
     cleanup, (tree) ((void *)0));
      append_to_statement_list (ffalse, &gimplify_ctxp->conditional_cleanups);
      append_to_statement_list (wce, &gimplify_ctxp->conditional_cleanups);
      append_to_statement_list (ftrue, pre_p);
      ((var)->common.nowarning_flag) = 1;
    }
  else
    {
      wce = build (WITH_CLEANUP_EXPR, global_trees[TI_VOID_TYPE], (tree) ((void *)0),
     cleanup, (tree) ((void *)0));
      append_to_statement_list (wce, pre_p);
    }
  gimplify_stmt (&((wce)->exp.operands[1]));
}
static enum gimplify_status
gimplify_target_expr (tree *expr_p, tree *pre_p, tree *post_p)
{
  tree targ = *expr_p;
  tree temp = ((targ)->exp.operands[0]);
  tree init = ((targ)->exp.operands[1]);
  enum gimplify_status ret;
  if (init)
    {
      gimple_add_tmp_var (temp);
      if ((((enum tree_code) (((init)->common.type))->common.code) == VOID_TYPE))
 ret = gimplify_expr (&init, pre_p, post_p, is_gimple_stmt, fb_none);
      else
 {
   ret = GS_OK;
          if (((enum tree_code) (init)->common.code) == BIND_EXPR)
     gimplify_bind_expr (&init, temp, pre_p);
          if (init != temp)
     {
       init = build (MODIFY_EXPR, global_trees[TI_VOID_TYPE], temp, init);
       ret = gimplify_expr (&init, pre_p, post_p, is_gimple_stmt,
       fb_none);
     }
 }
      if (ret == GS_ERROR)
 return GS_ERROR;
      append_to_statement_list (init, pre_p);
      if (((targ)->exp.operands[2]))
 {
   gimplify_stmt (&((targ)->exp.operands[2]));
   gimple_push_cleanup (temp, ((targ)->exp.operands[2]), pre_p);
 }
      ((targ)->exp.operands[3]) = init;
      ((targ)->exp.operands[1]) = (tree) ((void *)0);
    }
  else if (!((temp)->decl.seen_in_bind_expr))
    fancy_abort ("gcc.c", 114774, "?");
  *expr_p = temp;
  return GS_OK;
}
void
gimplify_stmt (tree *stmt_p)
{
  gimplify_expr (stmt_p, ((void *)0), ((void *)0), is_gimple_stmt, fb_none);
}
void
gimplify_to_stmt_list (tree *stmt_p)
{
  gimplify_stmt (stmt_p);
  if (!*stmt_p)
    *stmt_p = alloc_stmt_list ();
  else if (((enum tree_code) (*stmt_p)->common.code) != STATEMENT_LIST)
    {
      tree t = *stmt_p;
      *stmt_p = alloc_stmt_list ();
      append_to_statement_list (t, stmt_p);
    }
}
enum gimplify_status
gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p,
        unsigned char (* gimple_test_f) (tree), fallback_t fallback)
{
  tree tmp;
  tree internal_pre = (tree) ((void *)0);
  tree internal_post = (tree) ((void *)0);
  tree save_expr;
  int is_statement = (pre_p == ((void *)0));
  location_t saved_location;
  enum gimplify_status ret;
  save_expr = *expr_p;
  if (save_expr == (tree) ((void *)0))
    return GS_ALL_DONE;
  if (pre_p == ((void *)0))
    pre_p = &internal_pre;
  if (post_p == ((void *)0))
    post_p = &internal_post;
  saved_location = input_location;
  if (save_expr != global_trees[TI_ERROR_MARK]
      && (((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (*expr_p)->common.code))])) != 0) ? (*expr_p)->exp.locus : (location_t *)((void *)0)) != ((void *)0)))
    input_location = ((((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (*expr_p)->common.code))])) != 0) ? (*expr_p)->exp.locus : (location_t *)((void *)0)) != ((void *)0)) ? *(*expr_p)->exp.locus : unknown_location);
  do
    {
      while (tree_ssa_useless_type_conversion (*expr_p)) *expr_p = ((*expr_p)->exp.operands[0]);
      save_expr = *expr_p;
      if (save_expr == global_trees[TI_ERROR_MARK]
   || (((save_expr)->common.type)
       && ((save_expr)->common.type) == global_trees[TI_ERROR_MARK]))
 {
   ret = GS_ERROR;
   break;
 }
      ret = lang_hooks.gimplify_expr (expr_p, pre_p, post_p);
      if (ret == GS_OK)
 {
   if (*expr_p == (tree) ((void *)0))
     break;
   if (*expr_p != save_expr)
     continue;
 }
      else if (ret != GS_UNHANDLED)
 break;
      ret = GS_OK;
      switch (((enum tree_code) (*expr_p)->common.code))
 {
 case POSTINCREMENT_EXPR:
 case POSTDECREMENT_EXPR:
 case PREINCREMENT_EXPR:
 case PREDECREMENT_EXPR:
   ret = gimplify_self_mod_expr (expr_p, pre_p, post_p,
     fallback != fb_none);
   break;
 case ARRAY_REF:
 case ARRAY_RANGE_REF:
 case REALPART_EXPR:
 case IMAGPART_EXPR:
 case COMPONENT_REF:
   ret = gimplify_compound_lval (expr_p, pre_p, post_p,
     fallback ? fallback : fb_rvalue);
   break;
 case COND_EXPR:
   ret = gimplify_cond_expr (expr_p, pre_p, (tree) ((void *)0));
   break;
 case CALL_EXPR:
   ret = gimplify_call_expr (expr_p, pre_p, fallback != fb_none);
   break;
 case TREE_LIST:
   fancy_abort ("gcc.c", 114932, "?");
 case COMPOUND_EXPR:
   ret = gimplify_compound_expr (expr_p, pre_p, fallback != fb_none);
   break;
 case MODIFY_EXPR:
 case INIT_EXPR:
   ret = gimplify_modify_expr (expr_p, pre_p, post_p,
          fallback != fb_none);
   break;
 case TRUTH_ANDIF_EXPR:
 case TRUTH_ORIF_EXPR:
   ret = gimplify_boolean_expr (expr_p);
   break;
 case TRUTH_NOT_EXPR:
   ((*expr_p)->exp.operands[0])
     = gimple_boolify (((*expr_p)->exp.operands[0]));
   ret = gimplify_expr (&((*expr_p)->exp.operands[0]), pre_p, post_p,
          is_gimple_val, fb_rvalue);
   recalculate_side_effects (*expr_p);
   break;
 case ADDR_EXPR:
   ret = gimplify_addr_expr (expr_p, pre_p, post_p);
   break;
 case VA_ARG_EXPR:
   ret = gimplify_va_arg_expr (expr_p, pre_p, post_p);
   break;
 case VIEW_CONVERT_EXPR:
   if ((((enum tree_code) (((*expr_p)->common.type))->common.code) == VOID_TYPE)
       || fallback == fb_none)
     {
       *expr_p = ((*expr_p)->exp.operands[0]);
       break;
     }
   if ((((((*expr_p)->common.type))->type.mode) == BLKmode
        && ((((((*expr_p)->exp.operands[0]))->common.type))->type.mode) == BLKmode)
       || !((((((*expr_p)->common.type))->type.size))->common.constant_flag)
       || !((((((((*expr_p)->exp.operands[0]))->common.type))->type.size))->common.constant_flag)
                                     )
     {
       tree restype = ((*expr_p)->common.type);
       *expr_p = build1_stat (INDIRECT_REF,((*expr_p)->common.type),fold_convert (build_pointer_type (restype), build_fold_addr_expr (((*expr_p)->exp.operands[0]))) )
                                        ;
       break;
     }
   goto unary;
 case CONVERT_EXPR:
 case NOP_EXPR:
   if ((((enum tree_code) (*expr_p)->common.code) == NOP_EXPR && (((enum tree_code) (((*expr_p)->common.type))->common.code) == VOID_TYPE) && integer_zerop (((*expr_p)->exp.operands[0]))))
     {
       ret = GS_ALL_DONE;
       break;
     }
   if ((((enum tree_code) (((*expr_p)->common.type))->common.code) == VOID_TYPE)
       || fallback == fb_none)
     {
       *expr_p = ((*expr_p)->exp.operands[0]);
       break;
     }
   ret = gimplify_conversion (expr_p);
   if (ret == GS_ERROR)
     break;
   if (*expr_p != save_expr)
     break;
 case FIX_TRUNC_EXPR:
 case FIX_CEIL_EXPR:
 case FIX_FLOOR_EXPR:
 case FIX_ROUND_EXPR:
 unary:
   ret = gimplify_expr (&((*expr_p)->exp.operands[0]), pre_p, post_p,
          is_gimple_val, fb_rvalue);
   recalculate_side_effects (*expr_p);
   break;
 case INDIRECT_REF:
   ret = gimplify_expr (&((*expr_p)->exp.operands[0]), pre_p, post_p,
          is_gimple_reg, fb_rvalue);
   recalculate_side_effects (*expr_p);
   break;
 case INTEGER_CST:
 case REAL_CST:
 case STRING_CST:
 case COMPLEX_CST:
 case VECTOR_CST:
   ret = GS_ALL_DONE;
   break;
 case CONST_DECL:
   *expr_p = ((*expr_p)->decl.initial);
   break;
 case DECL_EXPR:
   ret = gimplify_decl_expr (expr_p);
   break;
 case EXC_PTR_EXPR:
   ret = GS_ALL_DONE;
   break;
 case BIND_EXPR:
   ret = gimplify_bind_expr (expr_p, ((void *)0), pre_p);
   break;
 case LOOP_EXPR:
   ret = gimplify_loop_expr (expr_p, pre_p);
   break;
 case SWITCH_EXPR:
   ret = gimplify_switch_expr (expr_p, pre_p);
   break;
 case LABELED_BLOCK_EXPR:
   ret = gimplify_labeled_block_expr (expr_p);
   break;
 case EXIT_BLOCK_EXPR:
   ret = gimplify_exit_block_expr (expr_p);
   break;
 case EXIT_EXPR:
   ret = gimplify_exit_expr (expr_p);
   break;
 case GOTO_EXPR:
   if (((enum tree_code) ((((*expr_p))->exp.operands[0]))->common.code) != LABEL_DECL)
     ret = gimplify_expr (&(((*expr_p))->exp.operands[0]), pre_p,
     ((void *)0), is_gimple_val, fb_rvalue);
   break;
 case LABEL_EXPR:
   ret = GS_ALL_DONE;
   break;
 case CASE_LABEL_EXPR:
   ret = gimplify_case_label_expr (expr_p);
   break;
 case RETURN_EXPR:
   ret = gimplify_return_expr (*expr_p, pre_p);
   break;
 case CONSTRUCTOR:
   if (fallback == fb_none)
     {
       for (tmp = ((*expr_p)->exp.operands[0]); tmp;
     tmp = ((tmp)->common.chain))
  if (((((tmp)->list.value))->common.side_effects_flag))
    gimplify_expr (&((tmp)->list.value), pre_p, post_p,
     gimple_test_f, fallback);
       *expr_p = (tree) ((void *)0);
     }
   ret = GS_ALL_DONE;
   break;
 case SAVE_EXPR:
   ret = gimplify_save_expr (expr_p, pre_p, post_p);
   break;
 case BIT_FIELD_REF:
   {
     enum gimplify_status r0, r1, r2;
     r0 = gimplify_expr (&((*expr_p)->exp.operands[0]), pre_p, post_p,
    is_gimple_lvalue, fb_either);
     r1 = gimplify_expr (&((*expr_p)->exp.operands[1]), pre_p, post_p,
    is_gimple_val, fb_rvalue);
     r2 = gimplify_expr (&((*expr_p)->exp.operands[2]), pre_p, post_p,
    is_gimple_val, fb_rvalue);
     recalculate_side_effects (*expr_p);
     ret = ((r0) < (((r1) < (r2) ? (r1) : (r2))) ? (r0) : (((r1) < (r2) ? (r1) : (r2))));
   }
   break;
 case NON_LVALUE_EXPR:
   fancy_abort ("gcc.c", 115154, "?");
   break;
 case ASM_EXPR:
   ret = gimplify_asm_expr (expr_p, pre_p, post_p);
   break;
 case TRY_FINALLY_EXPR:
 case TRY_CATCH_EXPR:
   gimplify_to_stmt_list (&((*expr_p)->exp.operands[0]));
   gimplify_to_stmt_list (&((*expr_p)->exp.operands[1]));
   ret = GS_ALL_DONE;
   break;
 case CLEANUP_POINT_EXPR:
   ret = gimplify_cleanup_point_expr (expr_p, pre_p);
   break;
 case TARGET_EXPR:
   ret = gimplify_target_expr (expr_p, pre_p, post_p);
   break;
 case CATCH_EXPR:
   gimplify_to_stmt_list (&(((*expr_p))->exp.operands[1]));
   ret = GS_ALL_DONE;
   break;
 case EH_FILTER_EXPR:
   gimplify_to_stmt_list (&(((*expr_p))->exp.operands[1]));
   ret = GS_ALL_DONE;
   break;
 case OBJ_TYPE_REF:
   {
     enum gimplify_status r0, r1;
     r0 = gimplify_expr (&(((*expr_p))->exp.operands[1]), pre_p, post_p,
           is_gimple_val, fb_rvalue);
     r1 = gimplify_expr (&(((*expr_p))->exp.operands[0]), pre_p, post_p,
           is_gimple_val, fb_rvalue);
     ret = ((r0) < (r1) ? (r0) : (r1));
   }
   break;
 case MIN_EXPR:
 case MAX_EXPR:
   ret = gimplify_minimax_expr (expr_p, pre_p, post_p);
   break;
 case LABEL_DECL:
   ((*expr_p)->common.side_effects_flag) = 1;
   ret = GS_ALL_DONE;
   break;
 case STATEMENT_LIST:
   ret = gimplify_statement_list (expr_p);
   break;
 case VAR_DECL:
   tmp = *expr_p;
   if (!((tmp)->common.static_flag) && !((tmp)->decl.external_flag)
       && decl_function_context (tmp) == current_function_decl
       && !((tmp)->decl.seen_in_bind_expr))
     {
       ret = GS_ERROR;
     }
   else
     ret = GS_ALL_DONE;
   break;
 default:
   if (tree_code_type[(int) (((enum tree_code) (*expr_p)->common.code))] == '<'
       && ((((enum tree_code) (((((*expr_p)->exp.operands[1]))->common.type))->common.code) == ARRAY_TYPE || ((enum tree_code) (((((*expr_p)->exp.operands[1]))->common.type))->common.code) == RECORD_TYPE || ((enum tree_code) (((((*expr_p)->exp.operands[1]))->common.type))->common.code) == UNION_TYPE || ((enum tree_code) (((((*expr_p)->exp.operands[1]))->common.type))->common.code) == QUAL_UNION_TYPE || ((enum tree_code) (((((*expr_p)->exp.operands[1]))->common.type))->common.code) == SET_TYPE)))
     ret = gimplify_variable_sized_compare (expr_p);
   else if (tree_code_type[(int) (((enum tree_code) (*expr_p)->common.code))] == '1')
     ret = gimplify_expr (&((*expr_p)->exp.operands[0]), pre_p,
     post_p, is_gimple_val, fb_rvalue);
   else if (tree_code_type[(int) (((enum tree_code) (*expr_p)->common.code))] == '2'
     || tree_code_type[(int) (((enum tree_code) (*expr_p)->common.code))] == '<'
     || ((enum tree_code) (*expr_p)->common.code) == TRUTH_AND_EXPR
     || ((enum tree_code) (*expr_p)->common.code) == TRUTH_OR_EXPR
     || ((enum tree_code) (*expr_p)->common.code) == TRUTH_XOR_EXPR)
     {
       enum gimplify_status r0, r1;
       r0 = gimplify_expr (&((*expr_p)->exp.operands[0]), pre_p,
      post_p, is_gimple_val, fb_rvalue);
       r1 = gimplify_expr (&((*expr_p)->exp.operands[1]), pre_p,
      post_p, is_gimple_val, fb_rvalue);
       ret = ((r0) < (r1) ? (r0) : (r1));
     }
   else if (tree_code_type[(int) (((enum tree_code) (*expr_p)->common.code))] == 'd'
     || tree_code_type[(int) (((enum tree_code) (*expr_p)->common.code))] == 'c')
     {
       ret = GS_ALL_DONE;
       break;
     }
   else
     fancy_abort ("gcc.c", 115274, "?");
   recalculate_side_effects (*expr_p);
   break;
 }
      if (ret == GS_OK && (*expr_p == ((void *)0) || *expr_p == save_expr))
 ret = GS_ALL_DONE;
    }
  while (ret == GS_OK);
  if (ret == GS_ERROR)
    {
      if (is_statement)
 *expr_p = ((void *)0);
      goto out;
    }
  if (fallback == fb_none && *expr_p && !is_gimple_stmt (*expr_p))
    {
      if (!((*expr_p)->common.side_effects_flag))
 *expr_p = ((void *)0);
      else if (!((*expr_p)->common.volatile_flag))
 {
   enum tree_code code = ((enum tree_code) (*expr_p)->common.code);
   if (code == COMPONENT_REF
       || code == REALPART_EXPR || code == IMAGPART_EXPR)
     gimplify_expr (&((*expr_p)->exp.operands[0]), pre_p, post_p,
      gimple_test_f, fallback);
   else if (code == ARRAY_REF || code == ARRAY_RANGE_REF)
     {
       gimplify_expr (&((*expr_p)->exp.operands[0]), pre_p, post_p,
        gimple_test_f, fallback);
       gimplify_expr (&((*expr_p)->exp.operands[1]), pre_p, post_p,
      gimple_test_f, fallback);
     }
   else
     fancy_abort ("gcc.c", 115328, "?");
   *expr_p = ((void *)0);
 }
      else if ((((((*expr_p)->common.type))->type.size) != (tree) ((void *)0)))
 {
   tree tmp = create_tmp_var (((*expr_p)->common.type), "vol");
   *expr_p = build (MODIFY_EXPR, ((tmp)->common.type), tmp, *expr_p);
 }
      else
 *expr_p = ((void *)0);
    }
  if (fallback == fb_none || is_statement)
    {
      if (internal_pre || internal_post)
 {
   append_to_statement_list (*expr_p, &internal_pre);
   append_to_statement_list (internal_post, &internal_pre);
   annotate_all_with_locus (&internal_pre, input_location);
   *expr_p = internal_pre;
 }
      else if (!*expr_p)
 ;
      else if (((enum tree_code) (*expr_p)->common.code) == STATEMENT_LIST)
 annotate_all_with_locus (expr_p, input_location);
      else
 annotate_one_with_locus (*expr_p, input_location);
      goto out;
    }
  if (!internal_post && (*gimple_test_f) (*expr_p))
    goto out;
  if ((fallback & fb_lvalue) && !internal_post
      && is_gimple_addr_expr_arg (*expr_p))
    {
      tmp = build_fold_addr_expr (*expr_p);
      gimplify_expr (&tmp, pre_p, post_p, is_gimple_reg, fb_rvalue);
      *expr_p = build1_stat (INDIRECT_REF,((((tmp)->common.type))->common.type),tmp );
    }
  else if ((fallback & fb_rvalue) && is_gimple_rhs (*expr_p))
    {
      if (internal_post || (fallback & fb_lvalue))
 *expr_p = get_initialized_tmp_var (*expr_p, pre_p, post_p);
      else
 *expr_p = get_formal_tmp_var (*expr_p, pre_p);
    }
  else if (fallback & fb_mayfail)
    {
      ret = GS_ERROR;
      goto out;
    }
  else
    {
      fprintf (stderr, "gimplification failed:\n");
      print_generic_expr (stderr, *expr_p, 0);
      debug_tree (*expr_p);
      fancy_abort ("gcc.c", 115422, "?");
    }
  if (internal_post)
    {
      annotate_all_with_locus (&internal_post, input_location);
      append_to_statement_list (internal_post, pre_p);
    }
 out:
  input_location = saved_location;
  return ret;
}
void
gimplify_type_sizes (tree type, tree *list_p)
{
  tree field;
  switch (((enum tree_code) (type)->common.code))
    {
    case ERROR_MARK:
      return;
    case INTEGER_TYPE:
    case ENUMERAL_TYPE:
    case BOOLEAN_TYPE:
    case CHAR_TYPE:
    case REAL_TYPE:
      gimplify_one_sizepos (&((type)->type.minval), list_p);
      gimplify_one_sizepos (&((type)->type.maxval), list_p);
      break;
    case ARRAY_TYPE:
      gimplify_type_sizes (((type)->type.values), list_p);
      break;
    case RECORD_TYPE:
    case UNION_TYPE:
    case QUAL_UNION_TYPE:
      for (field = ((type)->type.values); field; field = ((field)->common.chain))
 if (((enum tree_code) (field)->common.code) == FIELD_DECL)
   gimplify_one_sizepos (&((field)->decl.arguments), list_p);
      break;
    default:
      break;
    }
  gimplify_one_sizepos (&((type)->type.size), list_p);
  gimplify_one_sizepos (&((type)->type.size_unit), list_p);
}
void
gimplify_one_sizepos (tree *expr_p, tree *stmt_p)
{
  if (*expr_p == (tree) ((void *)0) || ((*expr_p)->common.constant_flag)
      || ((enum tree_code) (*expr_p)->common.code) == VAR_DECL
      || ((*expr_p) != 0 && ! ((*expr_p)->common.constant_flag) && contains_placeholder_p (*expr_p)))
    return;
  gimplify_expr (expr_p, stmt_p, ((void *)0), is_gimple_val, fb_rvalue);
}
void
gimplify_body (tree *body_p, tree fndecl)
{
  location_t saved_location = input_location;
  tree body;
  timevar_push (TV_TREE_GIMPLIFY);
  push_gimplify_context ();
  unshare_body (body_p, fndecl);
  unvisit_body (body_p, fndecl);
  input_location = ((fndecl)->decl.locus);
  gimplify_stmt (body_p);
  body = *body_p;
  unshare_all_trees (body);
  if (!body)
    body = alloc_stmt_list ();
  else if (((enum tree_code) (body)->common.code) == STATEMENT_LIST)
    {
      tree t = expr_only (*body_p);
      if (t)
 body = t;
    }
  if (((enum tree_code) (body)->common.code) != BIND_EXPR)
    {
      tree b = build (BIND_EXPR, global_trees[TI_VOID_TYPE], (tree) ((void *)0),
        (tree) ((void *)0), (tree) ((void *)0));
      ((b)->common.side_effects_flag) = 1;
      append_to_statement_list_force (body, &((((b))->exp.operands[1])));
      body = b;
    }
  *body_p = body;
  pop_gimplify_context (body);
  timevar_pop (TV_TREE_GIMPLIFY);
  input_location = saved_location;
}
void
gimplify_function_tree (tree fndecl)
{
  tree oldfn;
  oldfn = current_function_decl;
  current_function_decl = fndecl;
  gimplify_body (&((fndecl)->decl.saved_tree), fndecl);
  if (flag_instrument_function_entry_exit
      && ! ((fndecl)->decl.no_instrument_function_entry_exit))
    {
      tree tf, x, bind;
      tf = build (TRY_FINALLY_EXPR, global_trees[TI_VOID_TYPE], ((void *)0), ((void *)0));
      ((tf)->common.side_effects_flag) = 1;
      x = ((fndecl)->decl.saved_tree);
      append_to_statement_list (x, &((tf)->exp.operands[0]));
      x = implicit_built_in_decls[BUILT_IN_PROFILE_FUNC_EXIT];
      x = build_function_call_expr (x, ((void *)0));
      append_to_statement_list (x, &((tf)->exp.operands[1]));
      bind = build (BIND_EXPR, global_trees[TI_VOID_TYPE], ((void *)0), ((void *)0), ((void *)0));
      ((bind)->common.side_effects_flag) = 1;
      x = implicit_built_in_decls[BUILT_IN_PROFILE_FUNC_ENTER];
      x = build_function_call_expr (x, ((void *)0));
      append_to_statement_list (x, &((((bind))->exp.operands[1])));
      append_to_statement_list (tf, &((((bind))->exp.operands[1])));
      ((fndecl)->decl.saved_tree) = bind;
    }
  current_function_decl = oldfn;
}
const struct ggc_root_tab gt_ggc_r_gt_gimplify_h[] = {
  { ((void *)0), 0, 0, ((void *)0), ((void *)0) }
};
const struct ggc_root_tab gt_pch_rs_gt_gimplify_h[] = {
  { &tmp_var_id_num, 1, sizeof (tmp_var_id_num), ((void *)0), ((void *)0) },
  { ((void *)0), 0, 0, ((void *)0), ((void *)0) }
};
static int op_prio (tree);
static const char *op_symbol (tree);
static void pretty_print_string (pretty_printer *, const char*);
static void print_call_name (pretty_printer *, tree);
static void newline_and_indent (pretty_printer *, int);
static void maybe_init_pretty_print (FILE *);
static void print_declaration (pretty_printer *, tree, int, int);
static void print_struct_decl (pretty_printer *, tree, int, int);
static void do_niy (pretty_printer *, tree);
static void dump_vops (pretty_printer *, tree, int, int);
static void dump_generic_bb_buff (pretty_printer *, basic_block, int, int);
static pretty_printer buffer;
static int initialized = 0;
static unsigned char dumping_stmts;
static void
do_niy (pretty_printer *buffer, tree node)
{
  int i, len;
  pp_base_string ((buffer), "<<< Unknown tree: ");
  pp_base_string ((buffer), tree_code_name[(int) ((enum tree_code) (node)->common.code)]);
  if ((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (node)->common.code))])) != 0))
    {
      len = first_rtl_op (((enum tree_code) (node)->common.code));
      for (i = 0; i < len; ++i)
 {
   newline_and_indent (buffer, 2);
   dump_generic_node (buffer, ((node)->exp.operands[i]), 2, 0, 0);
 }
    }
  pp_base_string ((buffer), " >>>\n");
}
void
debug_generic_expr (tree t)
{
  print_generic_expr (stderr, t, (1 << 6)|(1 << 8));
  fprintf (stderr, "\n");
}
void
debug_generic_stmt (tree t)
{
  print_generic_stmt (stderr, t, (1 << 6)|(1 << 8));
  fprintf (stderr, "\n");
}
void
print_generic_decl (FILE *file, tree decl, int flags)
{
  maybe_init_pretty_print (file);
  dumping_stmts = 1;
  print_declaration (&buffer, decl, 2, flags);
  pp_write_text_to_stream (&buffer);
}
void
print_generic_stmt (FILE *file, tree t, int flags)
{
  maybe_init_pretty_print (file);
  dumping_stmts = 1;
  dump_generic_node (&buffer, t, 0, flags, 1);
  pp_base_flush ((&buffer));
}
void
print_generic_stmt_indented (FILE *file, tree t, int flags, int indent1)
{
  int i;
  maybe_init_pretty_print (file);
  dumping_stmts = 1;
  for (i = 0; i < indent1; i++)
    pp_base_character ((&buffer), ' ');
  dump_generic_node (&buffer, t, indent1, flags, 1);
  pp_base_flush ((&buffer));
}
void
print_generic_expr (FILE *file, tree t, int flags)
{
  maybe_init_pretty_print (file);
  dumping_stmts = 0;
  dump_generic_node (&buffer, t, 0, flags, 0);
}
static void
dump_decl_name (pretty_printer *buffer, tree node, int flags)
{
  if (((node)->decl.name))
    pp_base_append_text ((buffer), ((const char *) (((node)->decl.name))->identifier.id.str), ((const char *) (((node)->decl.name))->identifier.id.str) + ((((node)->decl.name))->identifier.id.len));
  if ((flags & (1 << 8))
      || ((node)->decl.name) == (tree) ((void *)0))
    {
      if (((enum tree_code) (node)->common.code) == LABEL_DECL
   && ((node)->decl.pointer_alias_set) != -1)
 pp_printf (buffer, "<L%ld>",
     ((node)->decl.pointer_alias_set));
      else
 pp_printf (buffer, "<D%u>", ((node)->decl.uid));
    }
}
static void
dump_function_declaration (pretty_printer *buffer, tree node,
      int spc, int flags)
{
  unsigned char wrote_arg = 0;
  tree arg;
  pp_base_character ((buffer), ' ');
  pp_base_character ((buffer), '(');
  arg = ((node)->type.values);
  while (arg && ((arg)->common.chain) && arg != global_trees[TI_ERROR_MARK])
    {
      wrote_arg = 1;
      dump_generic_node (buffer, ((arg)->list.value), spc, flags, 0);
      arg = ((arg)->common.chain);
      if (((arg)->common.chain) && ((enum tree_code) (((arg)->common.chain))->common.code) == TREE_LIST)
 {
   pp_base_character ((buffer), ',');
   pp_base_character ((buffer), ' ');
 }
    }
  if (!wrote_arg)
    pp_base_string ((buffer), "void");
  pp_base_character ((buffer), ')');
}
int
dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,
     unsigned char is_stmt)
{
  tree type;
  tree op0, op1;
  const char *str;
  unsigned char is_expr;
  if (node == (tree) ((void *)0))
    return spc;
  is_expr = (strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (node)->common.code))])) != 0);
  if (((enum tree_code) (node)->common.code) != ERROR_MARK
      && is_gimple_stmt (node)
      && (flags & (1 << 6))
      && stmt_ann (node))
    dump_vops (buffer, node, spc, flags);
  if (dumping_stmts
      && (flags & (1 << 7))
      && (((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (node)->common.code))])) != 0) ? (node)->exp.locus : (location_t *)((void *)0)) != ((void *)0)))
    {
      expanded_location xloc = (((((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (node)->common.code))])) != 0) ? (node)->exp.locus : (location_t *)((void *)0)) != ((void *)0)) ? *(node)->exp.locus : unknown_location));
      pp_base_character ((buffer), '[');
      if (xloc.file)
 {
   pp_base_string ((buffer), xloc.file);
   pp_base_string ((buffer), " : ");
 }
      do { sprintf ((buffer)->buffer->digit_buffer, "%d", xloc.line); pp_base_string ((buffer), (buffer)->buffer->digit_buffer); } while (0);
      pp_base_string ((buffer), "] ");
    }
  switch (((enum tree_code) (node)->common.code))
    {
    case ERROR_MARK:
      pp_base_string ((buffer), "<<< error >>>");
      break;
    case IDENTIFIER_NODE:
      pp_base_append_text ((buffer), ((const char *) (node)->identifier.id.str), ((const char *) (node)->identifier.id.str) + ((node)->identifier.id.len));
      break;
    case TREE_LIST:
      while (node && node != global_trees[TI_ERROR_MARK])
 {
   if (((node)->list.purpose))
     {
       dump_generic_node (buffer, ((node)->list.purpose), spc, flags, 0);
       pp_base_character ((buffer), ' ');
     }
   dump_generic_node (buffer, ((node)->list.value), spc, flags, 0);
   node = ((node)->common.chain);
   if (node && ((enum tree_code) (node)->common.code) == TREE_LIST)
     {
       pp_base_character ((buffer), ',');
       pp_base_character ((buffer), ' ');
     }
 }
      break;
    case TREE_VEC:
      dump_generic_node (buffer, (((node))->common.type), spc, flags, 0);
      break;
    case BLOCK:
      do_niy(buffer,node);
      break;
    case VOID_TYPE:
    case INTEGER_TYPE:
    case REAL_TYPE:
    case COMPLEX_TYPE:
    case VECTOR_TYPE:
    case ENUMERAL_TYPE:
    case BOOLEAN_TYPE:
    case CHAR_TYPE:
      {
 unsigned int quals = ((((node)->common.readonly_flag) * 0x1) | (((node)->common.volatile_flag) * 0x2) | (((node)->type.restrict_flag) * 0x4));
 char class;
 if (quals & 0x1)
   pp_base_string ((buffer), "const ");
 else if (quals & 0x2)
   pp_base_string ((buffer), "volatile ");
 else if (quals & 0x4)
   pp_base_string ((buffer), "restrict ");
 class = tree_code_type[(int) (((enum tree_code) (node)->common.code))];
 if (class == 'd')
   {
     if (((node)->decl.name))
       dump_decl_name (buffer, node, flags);
     else
              pp_base_string ((buffer), "<unnamed type decl>");
   }
 else if (class == 't')
   {
     if (((node)->type.name))
       {
  if (((enum tree_code) (((node)->type.name))->common.code) == IDENTIFIER_NODE)
    pp_base_append_text ((buffer), ((const char *) (((node)->type.name))->identifier.id.str), ((const char *) (((node)->type.name))->identifier.id.str) + ((((node)->type.name))->identifier.id.len));
  else if (((enum tree_code) (((node)->type.name))->common.code) == TYPE_DECL
    && ((((node)->type.name))->decl.name))
    dump_decl_name (buffer, ((node)->type.name), flags);
  else
                  pp_base_string ((buffer), "<unnamed type>");
       }
     else
              pp_base_string ((buffer), "<unnamed type>");
   }
 break;
      }
    case POINTER_TYPE:
    case REFERENCE_TYPE:
      str = (((enum tree_code) (node)->common.code) == POINTER_TYPE ? "*" : "&");
      if (((enum tree_code) (((node)->common.type))->common.code) == FUNCTION_TYPE)
        {
   tree fnode = ((node)->common.type);
   dump_generic_node (buffer, ((fnode)->common.type), spc, flags, 0);
   pp_base_character ((buffer), ' ');
   pp_base_character ((buffer), '(');
   pp_base_string ((buffer), str);
   if (((node)->type.name) && ((((node)->type.name))->decl.name))
     dump_decl_name (buffer, ((node)->type.name), flags);
   else
     pp_printf (buffer, "<T%x>", ((node)->type.uid));
   pp_base_character ((buffer), ')');
   dump_function_declaration (buffer, fnode, spc, flags);
 }
      else
        {
   unsigned int quals = ((((node)->common.readonly_flag) * 0x1) | (((node)->common.volatile_flag) * 0x2) | (((node)->type.restrict_flag) * 0x4));
          dump_generic_node (buffer, ((node)->common.type), spc, flags, 0);
   pp_base_character ((buffer), ' ');
   pp_base_string ((buffer), str);
   if (quals & 0x1)
     pp_base_string ((buffer), " const");
   else if (quals & 0x2)
     pp_base_string ((buffer), "volatile");
   else if (quals & 0x4)
     pp_base_string ((buffer), " restrict");
 }
      break;
    case OFFSET_TYPE:
      do_niy(buffer,node);
      break;
    case METHOD_TYPE:
      dump_decl_name (buffer, ((((node)->type.maxval))->type.name), flags);
      pp_base_string ((buffer), "::");
      break;
    case FILE_TYPE:
      do_niy(buffer,node);
      break;
    case ARRAY_TYPE:
      {
 tree tmp;
 for (tmp = ((node)->common.type); ((enum tree_code) (tmp)->common.code) == ARRAY_TYPE;
      tmp = ((tmp)->common.type))
   ;
 dump_generic_node (buffer, tmp, spc, flags, 0);
 for (tmp = node; ((enum tree_code) (tmp)->common.code) == ARRAY_TYPE;
      tmp = ((tmp)->common.type))
   {
     tree domain = ((tmp)->type.values);
     pp_base_character ((buffer), '[');
     if (domain)
       {
  if (((domain)->type.minval)
      && !integer_zerop (((domain)->type.minval)))
    {
      dump_generic_node (buffer, ((domain)->type.minval),
           spc, flags, 0);
      pp_base_string ((buffer), " .. ");
    }
  if (((domain)->type.maxval))
    dump_generic_node (buffer, ((domain)->type.maxval),
         spc, flags, 0);
       }
     else
       pp_base_string ((buffer), "<unknown>");
     pp_base_character ((buffer), ']');
   }
 break;
      }
    case SET_TYPE:
      do_niy(buffer,node);
      break;
    case RECORD_TYPE:
    case UNION_TYPE:
    case QUAL_UNION_TYPE:
      if (((enum tree_code) (node)->common.code) == RECORD_TYPE)
 pp_base_string ((buffer), "struct ");
      else if (((enum tree_code) (node)->common.code) == UNION_TYPE)
 pp_base_string ((buffer), "union ");
      if (((node)->type.name))
 dump_generic_node (buffer, ((node)->type.name), spc, flags, 0);
      else
 print_struct_decl (buffer, node, spc, flags);
      break;
    case LANG_TYPE:
      do_niy(buffer,node);
      break;
    case INTEGER_CST:
      if (((enum tree_code) (((node)->common.type))->common.code) == POINTER_TYPE)
 {
   do { sprintf ((buffer)->buffer->digit_buffer, "%ld", (long) (((node)->int_cst.int_cst).low)); pp_base_string ((buffer), (buffer)->buffer->digit_buffer); } while (0);
   pp_base_string ((buffer), "B");
 }
      else if (! host_integerp (node, 0))
 {
   tree val = node;
   if (tree_int_cst_sgn (val) < 0)
     {
       pp_base_character ((buffer), '-');
       val = build_int_2_wide ((unsigned long) (-(((val)->int_cst.int_cst).low)), (long) (~(((val)->int_cst.int_cst).high) + !(((val)->int_cst.int_cst).low)))
                               ;
     }
   {
     static char format[10];
     if (!format[0])
       sprintf (format, "%%x%%0%dx", (8 * 4) / 4);
     sprintf ((buffer)->buffer->digit_buffer, format,
       (((val)->int_cst.int_cst).high),
       (((val)->int_cst.int_cst).low));
     pp_base_string ((buffer), (buffer)->buffer->digit_buffer);
   }
 }
      else
 do { sprintf ((buffer)->buffer->digit_buffer, "%ld", (long) (((node)->int_cst.int_cst).low)); pp_base_string ((buffer), (buffer)->buffer->digit_buffer); } while (0);
      break;
    case REAL_CST:
      {
 struct real_value d;
 if (((node)->common.public_flag))
   pp_base_string ((buffer), " overflow");
 d = (*((node)->real_cst.real_cst_ptr));
 if (real_isinf (&(d)))
   pp_base_string ((buffer), " Inf");
 else if (real_isnan (&(d)))
   pp_base_string ((buffer), " Nan");
 else
   {
     char string1[100];
     real_to_decimal (string1, &d, sizeof (string1), 0, 1);
     pp_base_string ((buffer), string1);
   }
 break;
      }
    case COMPLEX_CST:
      pp_base_string ((buffer), "__complex__ (");
      dump_generic_node (buffer, ((node)->complex.real), spc, flags, 0);
      pp_base_string ((buffer), ", ");
      dump_generic_node (buffer, ((node)->complex.imag), spc, flags, 0);
      pp_base_string ((buffer), ")");
      break;
    case STRING_CST:
      pp_base_string ((buffer), "\"");
      pretty_print_string (buffer, ((node)->string1.pointer));
      pp_base_string ((buffer), "\"");
      break;
    case VECTOR_CST:
      {
 tree elt;
 pp_base_string ((buffer), "{ ");
 for (elt = ((node)->vector.elements); elt; elt = ((elt)->common.chain))
   {
     dump_generic_node (buffer, ((elt)->list.value), spc, flags, 0);
     if (((elt)->common.chain))
       pp_base_string ((buffer), ", ");
   }
 pp_base_string ((buffer), " }");
      }
      break;
    case FUNCTION_TYPE:
      break;
    case FUNCTION_DECL:
    case CONST_DECL:
      dump_decl_name (buffer, node, flags);
      break;
    case LABEL_DECL:
      if (((node)->decl.name))
 dump_decl_name (buffer, node, flags);
      else if (((node)->decl.pointer_alias_set) != -1)
        pp_printf (buffer, "<L%ld>",
     ((node)->decl.pointer_alias_set));
      else
        pp_printf (buffer, "<D%u>", ((node)->decl.uid));
      break;
    case TYPE_DECL:
      if (((((((node)->decl.locus))).line) == 0))
 {
   break;
 }
      if (((node)->decl.name))
 dump_decl_name (buffer, node, flags);
      else
 {
   if ((((enum tree_code) (((node)->common.type))->common.code) == RECORD_TYPE
        || ((enum tree_code) (((node)->common.type))->common.code) == UNION_TYPE)
       && ((((node)->common.type))->type.maxval))
     {
       pp_base_string ((buffer), "class ");
       dump_generic_node (buffer, ((node)->common.type), spc, flags, 0);
     }
   else
     {
       pp_base_string ((buffer), (((enum tree_code) (((node)->common.type))->common.code) == UNION_TYPE ? "union" : "struct "))
                            ;
       dump_generic_node (buffer, ((node)->common.type), spc, flags, 0);
     }
 }
      break;
    case VAR_DECL:
    case PARM_DECL:
    case FIELD_DECL:
    case NAMESPACE_DECL:
      dump_decl_name (buffer, node, flags);
      break;
    case RESULT_DECL:
      pp_base_string ((buffer), "<retval>");
      break;
    case COMPONENT_REF:
      op0 = ((node)->exp.operands[0]);
      str = ".";
      if (((enum tree_code) (op0)->common.code) == INDIRECT_REF)
 {
   op0 = ((op0)->exp.operands[0]);
   str = "->";
 }
      if (op_prio (op0) < op_prio (node))
 pp_base_character ((buffer), '(');
      dump_generic_node (buffer, op0, spc, flags, 0);
      if (op_prio (op0) < op_prio (node))
 pp_base_character ((buffer), ')');
      pp_base_string ((buffer), str);
      dump_generic_node (buffer, ((node)->exp.operands[1]), spc, flags, 0);
      op0 = component_ref_field_offset (node);
      if (op0 && ((enum tree_code) (op0)->common.code) != INTEGER_CST)
 {
   pp_base_string ((buffer), "{off: ");
   dump_generic_node (buffer, op0, spc, flags, 0);
   pp_base_character ((buffer), '}');
 }
      break;
    case BIT_FIELD_REF:
      pp_base_string ((buffer), "BIT_FIELD_REF <");
      dump_generic_node (buffer, ((node)->exp.operands[0]), spc, flags, 0);
      pp_base_string ((buffer), ", ");
      dump_generic_node (buffer, ((node)->exp.operands[1]), spc, flags, 0);
      pp_base_string ((buffer), ", ");
      dump_generic_node (buffer, ((node)->exp.operands[2]), spc, flags, 0);
      pp_base_string ((buffer), ">");
      break;
    case BUFFER_REF:
      do_niy(buffer,node);
      break;
    case ARRAY_REF:
    case ARRAY_RANGE_REF:
      op0 = ((node)->exp.operands[0]);
      if (op_prio (op0) < op_prio (node))
 pp_base_character ((buffer), '(');
      dump_generic_node (buffer, op0, spc, flags, 0);
      if (op_prio (op0) < op_prio (node))
 pp_base_character ((buffer), ')');
      pp_base_character ((buffer), '[');
      dump_generic_node (buffer, ((node)->exp.operands[1]), spc, flags, 0);
      if (((enum tree_code) (node)->common.code) == ARRAY_RANGE_REF)
 pp_base_string ((buffer), " ...");
      pp_base_character ((buffer), ']');
      op0 = array_ref_low_bound (node);
      op1 = array_ref_element_size (node);
      if (!integer_zerop (op0)
   || (((((node)->common.type))->type.size_unit)
       && !operand_equal_p (op1, ((((node)->common.type))->type.size_unit), 0)))
 {
   pp_base_string ((buffer), "{lb: ");
   dump_generic_node (buffer, op0, spc, flags, 0);
   pp_base_string ((buffer), " sz: ");
   dump_generic_node (buffer, op1, spc, flags, 0);
   pp_base_character ((buffer), '}');
 }
      break;
    case CONSTRUCTOR:
      {
 tree lnode;
 unsigned char is_struct_init = 0;
 pp_base_character ((buffer), '{');
 lnode = ((node)->exp.operands[0]);
 if (((enum tree_code) (((node)->common.type))->common.code) == RECORD_TYPE
     || ((enum tree_code) (((node)->common.type))->common.code) == UNION_TYPE)
   is_struct_init = 1;
 while (lnode && lnode != global_trees[TI_ERROR_MARK])
   {
     tree val;
     if (((lnode)->list.purpose) && is_struct_init)
       {
  pp_base_character ((buffer), '.');
  dump_generic_node (buffer, ((lnode)->list.purpose), spc, flags, 0);
  pp_base_string ((buffer), "=");
       }
     val = ((lnode)->list.value);
     if (val && ((enum tree_code) (val)->common.code) == ADDR_EXPR)
       if (((enum tree_code) (((val)->exp.operands[0]))->common.code) == FUNCTION_DECL)
  val = ((val)->exp.operands[0]);
     if (val && ((enum tree_code) (val)->common.code) == FUNCTION_DECL)
       {
  dump_decl_name (buffer, val, flags);
       }
     else
       {
  dump_generic_node (buffer, ((lnode)->list.value), spc, flags, 0);
       }
     lnode = ((lnode)->common.chain);
     if (lnode && ((enum tree_code) (lnode)->common.code) == TREE_LIST)
       {
  pp_base_character ((buffer), ',');
  pp_base_character ((buffer), ' ');
       }
   }
 pp_base_character ((buffer), '}');
      }
      break;
    case COMPOUND_EXPR:
      {
 tree *tp;
 if (flags & (1 << 1))
   {
     pp_base_string ((buffer), "<COMPOUND_EXPR>");
     break;
   }
 dump_generic_node (buffer, ((node)->exp.operands[0]),
      spc, flags, dumping_stmts);
 if (dumping_stmts)
   newline_and_indent (buffer, spc);
 else
   {
     pp_base_character ((buffer), ',');
     pp_base_character ((buffer), ' ');
   }
 for (tp = &((node)->exp.operands[1]);
      ((enum tree_code) (*tp)->common.code) == COMPOUND_EXPR;
      tp = &((*tp)->exp.operands[1]))
   {
     dump_generic_node (buffer, ((*tp)->exp.operands[0]),
          spc, flags, dumping_stmts);
     if (dumping_stmts)
       newline_and_indent (buffer, spc);
     else
       {
         pp_base_character ((buffer), ',');
         pp_base_character ((buffer), ' ');
       }
   }
 dump_generic_node (buffer, *tp, spc, flags, dumping_stmts);
      }
      break;
    case STATEMENT_LIST:
      {
 tree_stmt_iterator si;
 unsigned char first = 1;
 if ((flags & (1 << 1)) || !dumping_stmts)
   {
     pp_base_string ((buffer), "<STATEMENT_LIST>");
     break;
   }
 for (si = tsi_start (node); !tsi_end_p (si); tsi_next (&si))
   {
     if (!first)
       newline_and_indent (buffer, spc);
     else
       first = 0;
     dump_generic_node (buffer, tsi_stmt (si), spc, flags, 1);
   }
      }
      break;
    case MODIFY_EXPR:
    case INIT_EXPR:
      dump_generic_node (buffer, ((node)->exp.operands[0]), spc, flags, 0);
      pp_base_character ((buffer), ' ');
      pp_base_character ((buffer), '=');
      pp_base_character ((buffer), ' ');
      dump_generic_node (buffer, ((node)->exp.operands[1]), spc, flags, 0);
      break;
    case TARGET_EXPR:
      pp_base_string ((buffer), "TARGET_EXPR <");
      dump_generic_node (buffer, ((node)->exp.operands[0]), spc, flags, 0);
      pp_base_character ((buffer), ',');
      pp_base_character ((buffer), ' ');
      dump_generic_node (buffer, ((node)->exp.operands[1]), spc, flags, 0);
      pp_base_character ((buffer), '>');
      break;
    case DECL_EXPR:
      print_declaration (buffer, (((node))->exp.operands[0]), spc, flags);
      is_stmt = 0;
      break;
    case COND_EXPR:
      if (((node)->common.type) == ((void *)0) || ((node)->common.type) == global_trees[TI_VOID_TYPE])
 {
   pp_base_string ((buffer), "if (");
   dump_generic_node (buffer, ((((node))->exp.operands[0])), spc, flags, 0);
   pp_base_character ((buffer), ')');
   if (((((node))->exp.operands[1]))
       && ((enum tree_code) (((((node))->exp.operands[1])))->common.code) == GOTO_EXPR
       && ((((node))->exp.operands[2]))
       && ((enum tree_code) (((((node))->exp.operands[2])))->common.code) == GOTO_EXPR)
     {
       pp_base_character ((buffer), ' ');
       dump_generic_node (buffer, ((((node))->exp.operands[1])), 0, flags, 1);
       pp_base_string ((buffer), " else ");
       dump_generic_node (buffer, ((((node))->exp.operands[2])), 0, flags, 1);
     }
   else if (!(flags & (1 << 1)))
     {
       if (((((node))->exp.operands[1])))
  {
    newline_and_indent (buffer, spc+2);
    pp_base_character ((buffer), '{');
    newline_and_indent (buffer, spc+4);
    dump_generic_node (buffer, ((((node))->exp.operands[1])), spc+4,
         flags, 1);
    newline_and_indent (buffer, spc+2);
    pp_base_character ((buffer), '}');
  }
       if (((((node))->exp.operands[2])))
  {
    newline_and_indent (buffer, spc);
    pp_base_string ((buffer), "else");
    newline_and_indent (buffer, spc+2);
    pp_base_character ((buffer), '{');
    newline_and_indent (buffer, spc+4);
    dump_generic_node (buffer, ((((node))->exp.operands[2])), spc+4,
                flags, 1);
    newline_and_indent (buffer, spc+2);
    pp_base_character ((buffer), '}');
  }
     }
   is_expr = 0;
 }
      else
 {
   dump_generic_node (buffer, ((node)->exp.operands[0]), spc, flags, 0);
   pp_base_character ((buffer), ' ');
   pp_base_character ((buffer), '?');
   pp_base_character ((buffer), ' ');
   dump_generic_node (buffer, ((node)->exp.operands[1]), spc, flags, 0);
   pp_base_character ((buffer), ' ');
   pp_base_character ((buffer), ':');
   pp_base_character ((buffer), ' ');
   dump_generic_node (buffer, ((node)->exp.operands[2]), spc, flags, 0);
 }
      break;
    case BIND_EXPR:
      pp_base_character ((buffer), '{');
      if (!(flags & (1 << 1)))
 {
   if (((((node))->exp.operands[0])))
     {
       pp_base_newline ((buffer));
       for (op0 = ((((node))->exp.operands[0])); op0; op0 = ((op0)->common.chain))
  {
    print_declaration (buffer, op0, spc+2, flags);
    pp_base_newline ((buffer));
  }
     }
   newline_and_indent (buffer, spc+2);
   dump_generic_node (buffer, ((((node))->exp.operands[1])), spc+2, flags, 1);
   newline_and_indent (buffer, spc);
   pp_base_character ((buffer), '}');
 }
      is_expr = 0;
      break;
    case CALL_EXPR:
      print_call_name (buffer, node);
      pp_base_character ((buffer), ' ');
      pp_base_character ((buffer), '(');
      op1 = ((node)->exp.operands[1]);
      if (op1)
 dump_generic_node (buffer, op1, spc, flags, 0);
      pp_base_character ((buffer), ')');
      op1 = ((node)->exp.operands[2]);
      if (op1)
 {
   pp_base_string ((buffer), " [static-chain: ");
   dump_generic_node (buffer, op1, spc, flags, 0);
   pp_base_character ((buffer), ']');
 }
      if (((node)->common.addressable_flag))
 pp_base_string ((buffer), " [tail call]");
      break;
    case WITH_CLEANUP_EXPR:
      do_niy(buffer,node);
      break;
    case CLEANUP_POINT_EXPR:
      pp_base_string ((buffer), "<<cleanup_point ");
      dump_generic_node (buffer, ((node)->exp.operands[0]), spc, flags, 0);
      pp_base_string ((buffer), ">>");
      break;
    case PLACEHOLDER_EXPR:
      pp_base_string ((buffer), "<PLACEHOLDER_EXPR ");
      dump_generic_node (buffer, ((node)->common.type), spc, flags, 0);
      pp_base_character ((buffer), '>');
      break;
    case MULT_EXPR:
    case PLUS_EXPR:
    case MINUS_EXPR:
    case TRUNC_DIV_EXPR:
    case CEIL_DIV_EXPR:
    case FLOOR_DIV_EXPR:
    case ROUND_DIV_EXPR:
    case TRUNC_MOD_EXPR:
    case CEIL_MOD_EXPR:
    case FLOOR_MOD_EXPR:
    case ROUND_MOD_EXPR:
    case RDIV_EXPR:
    case EXACT_DIV_EXPR:
    case LSHIFT_EXPR:
    case RSHIFT_EXPR:
    case LROTATE_EXPR:
    case RROTATE_EXPR:
    case BIT_IOR_EXPR:
    case BIT_XOR_EXPR:
    case BIT_AND_EXPR:
    case TRUTH_ANDIF_EXPR:
    case TRUTH_ORIF_EXPR:
    case TRUTH_AND_EXPR:
    case TRUTH_OR_EXPR:
    case TRUTH_XOR_EXPR:
    case LT_EXPR:
    case LE_EXPR:
    case GT_EXPR:
    case GE_EXPR:
    case EQ_EXPR:
    case NE_EXPR:
    case UNLT_EXPR:
    case UNLE_EXPR:
    case UNGT_EXPR:
    case UNGE_EXPR:
    case UNEQ_EXPR:
    case LTGT_EXPR:
    case ORDERED_EXPR:
    case UNORDERED_EXPR:
      {
 const char *op = op_symbol (node);
 op0 = ((node)->exp.operands[0]);
 op1 = ((node)->exp.operands[1]);
 if (op_prio (op0) < op_prio (node))
   {
     pp_base_character ((buffer), '(');
     dump_generic_node (buffer, op0, spc, flags, 0);
     pp_base_character ((buffer), ')');
   }
 else
   dump_generic_node (buffer, op0, spc, flags, 0);
 pp_base_character ((buffer), ' ');
 pp_base_string ((buffer), op);
 pp_base_character ((buffer), ' ');
 if (op_prio (op1) < op_prio (node))
   {
     pp_base_character ((buffer), '(');
     dump_generic_node (buffer, op1, spc, flags, 0);
     pp_base_character ((buffer), ')');
   }
 else
   dump_generic_node (buffer, op1, spc, flags, 0);
      }
      break;
    case NEGATE_EXPR:
    case BIT_NOT_EXPR:
    case TRUTH_NOT_EXPR:
    case ADDR_EXPR:
    case REFERENCE_EXPR:
    case PREDECREMENT_EXPR:
    case PREINCREMENT_EXPR:
    case INDIRECT_REF:
      if (((enum tree_code) (node)->common.code) == ADDR_EXPR
   && (((enum tree_code) (((node)->exp.operands[0]))->common.code) == STRING_CST
       || ((enum tree_code) (((node)->exp.operands[0]))->common.code) == FUNCTION_DECL))
 ;
      else
 pp_base_string ((buffer), op_symbol (node));
      if (op_prio (((node)->exp.operands[0])) < op_prio (node))
 {
   pp_base_character ((buffer), '(');
   dump_generic_node (buffer, ((node)->exp.operands[0]), spc, flags, 0);
   pp_base_character ((buffer), ')');
 }
      else
 dump_generic_node (buffer, ((node)->exp.operands[0]), spc, flags, 0);
      break;
    case POSTDECREMENT_EXPR:
    case POSTINCREMENT_EXPR:
      if (op_prio (((node)->exp.operands[0])) < op_prio (node))
 {
   pp_base_character ((buffer), '(');
   dump_generic_node (buffer, ((node)->exp.operands[0]), spc, flags, 0);
   pp_base_character ((buffer), ')');
 }
      else
 dump_generic_node (buffer, ((node)->exp.operands[0]), spc, flags, 0);
      pp_base_string ((buffer), op_symbol (node));
      break;
    case MIN_EXPR:
      pp_base_string ((buffer), "MIN_EXPR <");
      dump_generic_node (buffer, ((node)->exp.operands[0]), spc, flags, 0);
      pp_base_string ((buffer), ", ");
      dump_generic_node (buffer, ((node)->exp.operands[1]), spc, flags, 0);
      pp_base_character ((buffer), '>');
      break;
    case MAX_EXPR:
      pp_base_string ((buffer), "MAX_EXPR <");
      dump_generic_node (buffer, ((node)->exp.operands[0]), spc, flags, 0);
      pp_base_string ((buffer), ", ");
      dump_generic_node (buffer, ((node)->exp.operands[1]), spc, flags, 0);
      pp_base_character ((buffer), '>');
      break;
    case ABS_EXPR:
      pp_base_string ((buffer), "ABS_EXPR <");
      dump_generic_node (buffer, ((node)->exp.operands[0]), spc, flags, 0);
      pp_base_character ((buffer), '>');
      break;
    case IN_EXPR:
      do_niy(buffer,node);
      break;
    case SET_LE_EXPR:
      do_niy(buffer,node);
      break;
    case CARD_EXPR:
      do_niy(buffer,node);
      break;
    case RANGE_EXPR:
      do_niy(buffer,node);
      break;
    case FIX_TRUNC_EXPR:
    case FIX_CEIL_EXPR:
    case FIX_FLOOR_EXPR:
    case FIX_ROUND_EXPR:
    case FLOAT_EXPR:
    case CONVERT_EXPR:
    case NOP_EXPR:
      type = ((node)->common.type);
      op0 = ((node)->exp.operands[0]);
      if (type != ((op0)->common.type))
 {
   pp_base_character ((buffer), '(');
   dump_generic_node (buffer, type, spc, flags, 0);
   pp_base_string ((buffer), ")");
 }
      if (op_prio (op0) < op_prio (node))
 pp_base_character ((buffer), '(');
      dump_generic_node (buffer, op0, spc, flags, 0);
      if (op_prio (op0) < op_prio (node))
 pp_base_character ((buffer), ')');
      break;
    case VIEW_CONVERT_EXPR:
      pp_base_string ((buffer), "VIEW_CONVERT_EXPR<");
      dump_generic_node (buffer, ((node)->common.type), spc, flags, 0);
      pp_base_string ((buffer), ">(");
      dump_generic_node (buffer, ((node)->exp.operands[0]), spc, flags, 0);
      pp_base_character ((buffer), ')');
      break;
    case NON_LVALUE_EXPR:
      pp_base_string ((buffer), "NON_LVALUE_EXPR <");
      dump_generic_node (buffer, ((node)->exp.operands[0]), spc, flags, 0);
      pp_base_character ((buffer), '>');
      break;
    case SAVE_EXPR:
      pp_base_string ((buffer), "SAVE_EXPR <");
      dump_generic_node (buffer, ((node)->exp.operands[0]), spc, flags, 0);
      pp_base_character ((buffer), '>');
      break;
    case UNSAVE_EXPR:
      pp_base_string ((buffer), "UNSAVE_EXPR <");
      dump_generic_node (buffer, ((node)->exp.operands[0]), spc, flags, 0);
      pp_base_character ((buffer), '>');
      break;
    case ENTRY_VALUE_EXPR:
      do_niy(buffer,node);
      break;
    case COMPLEX_EXPR:
      pp_base_string ((buffer), "COMPLEX_EXPR <");
      dump_generic_node (buffer, ((node)->exp.operands[0]), spc, flags, 0);
      pp_base_string ((buffer), ", ");
      dump_generic_node (buffer, ((node)->exp.operands[1]), spc, flags, 0);
      pp_base_string ((buffer), ">");
      break;
    case CONJ_EXPR:
      pp_base_string ((buffer), "CONJ_EXPR <");
      dump_generic_node (buffer, ((node)->exp.operands[0]), spc, flags, 0);
      pp_base_string ((buffer), ">");
      break;
    case REALPART_EXPR:
      pp_base_string ((buffer), "REALPART_EXPR <");
      dump_generic_node (buffer, ((node)->exp.operands[0]), spc, flags, 0);
      pp_base_string ((buffer), ">");
      break;
    case IMAGPART_EXPR:
      pp_base_string ((buffer), "IMAGPART_EXPR <");
      dump_generic_node (buffer, ((node)->exp.operands[0]), spc, flags, 0);
      pp_base_string ((buffer), ">");
      break;
    case VA_ARG_EXPR:
      pp_base_string ((buffer), "VA_ARG_EXPR <");
      dump_generic_node (buffer, ((node)->exp.operands[0]), spc, flags, 0);
      pp_base_string ((buffer), ">");
      break;
    case TRY_FINALLY_EXPR:
    case TRY_CATCH_EXPR:
      pp_base_string ((buffer), "try");
      newline_and_indent (buffer, spc+2);
      pp_base_string ((buffer), "{");
      newline_and_indent (buffer, spc+4);
      dump_generic_node (buffer, ((node)->exp.operands[0]), spc+4, flags, 1);
      newline_and_indent (buffer, spc+2);
      pp_base_string ((buffer), "}");
      newline_and_indent (buffer, spc);
      pp_base_string ((buffer), (((enum tree_code) (node)->common.code) == TRY_CATCH_EXPR) ? "catch" : "finally")
                                                               ;
      newline_and_indent (buffer, spc+2);
      pp_base_string ((buffer), "{");
      newline_and_indent (buffer, spc+4);
      dump_generic_node (buffer, ((node)->exp.operands[1]), spc+4, flags, 1);
      newline_and_indent (buffer, spc+2);
      pp_base_string ((buffer), "}");
      is_expr = 0;
      break;
    case CATCH_EXPR:
      pp_base_string ((buffer), "catch (");
      dump_generic_node (buffer, (((node))->exp.operands[0]), spc+2, flags, 0);
      pp_base_string ((buffer), ")");
      newline_and_indent (buffer, spc+2);
      pp_base_string ((buffer), "{");
      newline_and_indent (buffer, spc+4);
      dump_generic_node (buffer, (((node))->exp.operands[1]), spc+4, flags, 1);
      newline_and_indent (buffer, spc+2);
      pp_base_string ((buffer), "}");
      is_expr = 0;
      break;
    case EH_FILTER_EXPR:
      pp_base_string ((buffer), "<<<eh_filter (");
      dump_generic_node (buffer, (((node))->exp.operands[0]), spc+2, flags, 0);
      pp_base_string ((buffer), ")>>>");
      newline_and_indent (buffer, spc+2);
      pp_base_string ((buffer), "{");
      newline_and_indent (buffer, spc+4);
      dump_generic_node (buffer, (((node))->exp.operands[1]), spc+4, flags, 1);
      newline_and_indent (buffer, spc+2);
      pp_base_string ((buffer), "}");
      is_expr = 0;
      break;
    case GOTO_SUBROUTINE_EXPR:
      do_niy(buffer,node);
      break;
    case LABEL_EXPR:
      op0 = ((node)->exp.operands[0]);
      if (((op0)->decl.name))
 {
   const char *name = ((const char *) (((op0)->decl.name))->identifier.id.str);
   if (strcmp (name, "break") == 0
       || strcmp (name, "continue") == 0)
     break;
 }
      dump_generic_node (buffer, op0, spc, flags, 0);
      pp_base_character ((buffer), ':');
      if (((op0)->decl.nonlocal_flag))
 pp_base_string ((buffer), " [non-local]");
      break;
    case LABELED_BLOCK_EXPR:
      op0 = ((node)->exp.operands[0]);
      if (((op0)->decl.name))
 {
   const char *name = ((const char *) (((op0)->decl.name))->identifier.id.str);
   if (strcmp (name, "break") == 0
       || strcmp (name, "continue") == 0)
     {
       dump_generic_node (buffer, ((node)->exp.operands[1]), spc, flags, 0);
       break;
     }
 }
      dump_generic_node (buffer, ((node)->exp.operands[0]), spc, flags, 0);
      pp_base_string ((buffer), ": {");
      if (!(flags & (1 << 1)))
 newline_and_indent (buffer, spc+2);
      dump_generic_node (buffer, ((node)->exp.operands[1]), spc+2, flags, 1);
      if (!flags)
 newline_and_indent (buffer, spc);
      pp_base_character ((buffer), '}');
      is_expr = 0;
      break;
    case EXIT_BLOCK_EXPR:
      op0 = ((((node)->exp.operands[0]))->exp.operands[0]);
      if (((op0)->decl.name))
 {
   const char *name = ((const char *) (((op0)->decl.name))->identifier.id.str);
   if (strcmp (name, "break") == 0
       || strcmp (name, "continue") == 0)
     {
       pp_base_string ((buffer), name);
       break;
     }
 }
      pp_base_string ((buffer), "<<<exit block ");
      dump_generic_node (buffer, op0, spc, flags, 0);
      pp_base_string ((buffer), ">>>");
      break;
    case EXC_PTR_EXPR:
      pp_base_string ((buffer), "<<<exception object>>>");
      break;
    case FILTER_EXPR:
      pp_base_string ((buffer), "<<<filter object>>>");
      break;
    case LOOP_EXPR:
      pp_base_string ((buffer), "while (1)");
      if (!(flags & (1 << 1)))
 {
   newline_and_indent (buffer, spc+2);
   pp_base_character ((buffer), '{');
   newline_and_indent (buffer, spc+4);
   dump_generic_node (buffer, ((node)->exp.operands[0]), spc+4, flags, 1);
   newline_and_indent (buffer, spc+2);
   pp_base_character ((buffer), '}');
 }
      is_expr = 0;
      break;
    case RETURN_EXPR:
      pp_base_string ((buffer), "return");
      op0 = ((node)->exp.operands[0]);
      if (op0)
 {
   pp_base_character ((buffer), ' ');
   if (((enum tree_code) (op0)->common.code) == MODIFY_EXPR)
     dump_generic_node (buffer, ((op0)->exp.operands[1]), spc, flags, 0);
   else
     dump_generic_node (buffer, op0, spc, flags, 0);
 }
      break;
    case EXIT_EXPR:
      pp_base_string ((buffer), "if (");
      dump_generic_node (buffer, ((node)->exp.operands[0]), spc, flags, 0);
      pp_base_string ((buffer), ") break");
      break;
    case SWITCH_EXPR:
      pp_base_string ((buffer), "switch (");
      dump_generic_node (buffer, (((node))->exp.operands[0]), spc, flags, 0);
      pp_base_character ((buffer), ')');
      if (!(flags & (1 << 1)))
 {
   newline_and_indent (buffer, spc+2);
   pp_base_character ((buffer), '{');
   if ((((node))->exp.operands[1]))
     {
       newline_and_indent (buffer, spc+4);
       dump_generic_node (buffer, (((node))->exp.operands[1]), spc+4, flags, 1);
     }
   else
     {
       tree vec = (((node))->exp.operands[2]);
       size_t i, n = ((vec)->vec.length);
       for (i = 0; i < n; ++i)
  {
    tree elt = ((vec)->vec.a[i]);
    newline_and_indent (buffer, spc+4);
    dump_generic_node (buffer, elt, spc+4, flags, 0);
    pp_base_string ((buffer), " goto ");
    dump_generic_node (buffer, (((elt))->exp.operands[2]), spc+4, flags, 1);
    pp_base_character ((buffer), ';');
  }
     }
   newline_and_indent (buffer, spc+2);
   pp_base_character ((buffer), '}');
 }
      is_expr = 0;
      break;
    case GOTO_EXPR:
      op0 = (((node))->exp.operands[0]);
      if (((enum tree_code) (op0)->common.code) != SSA_NAME
   && (tree_code_type[(int) (((enum tree_code) (op0)->common.code))] == 'd')
   && ((op0)->decl.name))
 {
   const char *name = ((const char *) (((op0)->decl.name))->identifier.id.str);
   if (strcmp (name, "break") == 0
       || strcmp (name, "continue") == 0)
     {
       pp_base_string ((buffer), name);
       break;
     }
 }
      pp_base_string ((buffer), "goto ");
      dump_generic_node (buffer, op0, spc, flags, 0);
      break;
    case RESX_EXPR:
      pp_base_string ((buffer), "resx");
      break;
    case ASM_EXPR:
      pp_base_string ((buffer), "__asm__");
      if ((((node)->common.public_flag)))
 pp_base_string ((buffer), " __volatile__");
      pp_base_character ((buffer), '(');
      dump_generic_node (buffer, (((node))->exp.operands[0]), spc, flags, 0);
      pp_base_character ((buffer), ':');
      dump_generic_node (buffer, (((node))->exp.operands[1]), spc, flags, 0);
      pp_base_character ((buffer), ':');
      dump_generic_node (buffer, (((node))->exp.operands[2]), spc, flags, 0);
      if ((((node))->exp.operands[3]))
 {
   pp_base_character ((buffer), ':');
   dump_generic_node (buffer, (((node))->exp.operands[3]), spc, flags, 0);
 }
      pp_base_string ((buffer), ")");
      break;
    case CASE_LABEL_EXPR:
      if ((((node))->exp.operands[0]) && (((node))->exp.operands[1]))
 {
   pp_base_string ((buffer), "case ");
   dump_generic_node (buffer, (((node))->exp.operands[0]), spc, flags, 0);
   pp_base_string ((buffer), " ... ");
   dump_generic_node (buffer, (((node))->exp.operands[1]), spc, flags, 0);
 }
      else if ((((node))->exp.operands[0]))
 {
   pp_base_string ((buffer), "case ");
   dump_generic_node (buffer, (((node))->exp.operands[0]), spc, flags, 0);
 }
      else
 pp_base_string ((buffer), "default ");
      pp_base_character ((buffer), ':');
      break;
    case OBJ_TYPE_REF:
      pp_base_string ((buffer), "OBJ_TYPE_REF(");
      dump_generic_node (buffer, (((node))->exp.operands[0]), spc, flags, 0);
      pp_base_character ((buffer), ';');
      dump_generic_node (buffer, (((node))->exp.operands[1]), spc, flags, 0);
      pp_base_character ((buffer), '-');
      pp_base_character ((buffer), '>');
      dump_generic_node (buffer, (((node))->exp.operands[2]), spc, flags, 0);
      pp_base_character ((buffer), ')');
      break;
    case PHI_NODE:
      {
 int i;
 dump_generic_node (buffer, get_def_from_ptr (get_phi_result_ptr (node)), spc, flags, 0);
 pp_base_string ((buffer), " = PHI <");
 for (i = 0; i < (node)->phi.num_args; i++)
   {
     dump_generic_node (buffer, get_use_from_ptr (get_phi_arg_def_ptr (((node)), ((i)))), spc, flags, 0);
     pp_base_string ((buffer), "(");
     do { sprintf ((buffer)->buffer->digit_buffer, "%d", ((node)->phi.a[i]).e->src->index); pp_base_string ((buffer), (buffer)->buffer->digit_buffer); } while (0);
     pp_base_string ((buffer), ")");
     if (i < (node)->phi.num_args - 1)
       pp_base_string ((buffer), ", ");
   }
 pp_base_string ((buffer), ">;");
      }
      break;
    case SSA_NAME:
      dump_generic_node (buffer, (node)->ssa_name.var, spc, flags, 0);
      pp_base_string ((buffer), "_");
      do { sprintf ((buffer)->buffer->digit_buffer, "%d", (node)->ssa_name.version); pp_base_string ((buffer), (buffer)->buffer->digit_buffer); } while (0);
      break;
    case VALUE_HANDLE:
      pp_printf (buffer, "VH.%d", ((node)->value_handle.id));
      break;
    default:
      do_niy(buffer,node);
    }
  if (is_stmt && is_expr)
    pp_base_character ((buffer), ';');
  pp_write_text_to_stream (buffer);
  return spc;
}
static void
print_declaration (pretty_printer *buffer, tree t, int spc, int flags)
{
  do { int i; for (i = 0; i<spc; i++) pp_base_character ((buffer), ' '); } while (0);
  if (((enum tree_code) (t)->common.code) == TYPE_DECL)
    pp_base_string ((buffer), "typedef ");
  if (((t)->decl.regdecl_flag))
    pp_base_string ((buffer), "register ");
  if (((t)->common.public_flag) && ((t)->decl.external_flag))
    pp_base_string ((buffer), "extern ");
  else if (((t)->common.static_flag))
    pp_base_string ((buffer), "static ");
  if (((enum tree_code) (((t)->common.type))->common.code) == ARRAY_TYPE)
    {
      tree tmp;
      tmp = ((t)->common.type);
      while (((enum tree_code) (((tmp)->common.type))->common.code) == ARRAY_TYPE)
 tmp = ((tmp)->common.type);
      dump_generic_node (buffer, ((tmp)->common.type), spc, flags, 0);
      pp_base_character ((buffer), ' ');
      dump_generic_node (buffer, t, spc, flags, 0);
      tmp = ((t)->common.type);
      while (((enum tree_code) (tmp)->common.code) == ARRAY_TYPE)
 {
   pp_base_character ((buffer), '[');
   if (((tmp)->type.values))
     {
       if (((enum tree_code) (((tmp)->type.size))->common.code) == INTEGER_CST)
  do { sprintf ((buffer)->buffer->digit_buffer, "%ld", (long) (((((tmp)->type.size))->int_cst.int_cst).low) / (((((((tmp)->common.type))->type.size))->int_cst.int_cst).low)); pp_base_string ((buffer), (buffer)->buffer->digit_buffer); } while (0)
                                                   ;
       else
  dump_generic_node (buffer, ((tmp)->type.size_unit), spc, flags,
       0);
     }
   pp_base_character ((buffer), ']');
   tmp = ((tmp)->common.type);
 }
    }
  else if (((enum tree_code) (t)->common.code) == FUNCTION_DECL)
    {
      dump_generic_node (buffer, ((((t)->common.type))->common.type), spc, flags, 0);
      pp_base_character ((buffer), ' ');
      dump_decl_name (buffer, t, flags);
      dump_function_declaration (buffer, ((t)->common.type), spc, flags);
    }
  else
    {
      dump_generic_node (buffer, ((t)->common.type), spc, flags, 0);
      pp_base_character ((buffer), ' ');
      dump_generic_node (buffer, t, spc, flags, 0);
    }
  if (((enum tree_code) (t)->common.code) != FUNCTION_DECL)
    {
      if (((t)->decl.initial))
 {
   pp_base_character ((buffer), ' ');
   pp_base_character ((buffer), '=');
   pp_base_character ((buffer), ' ');
   dump_generic_node (buffer, ((t)->decl.initial), spc, flags, 0);
 }
    }
  pp_base_character ((buffer), ';');
}
static void
print_struct_decl (pretty_printer *buffer, tree node, int spc, int flags)
{
  if (((node)->type.name))
    {
      do { int i; for (i = 0; i<spc; i++) pp_base_character ((buffer), ' '); } while (0);
      if (((enum tree_code) (node)->common.code) == RECORD_TYPE)
 pp_base_string ((buffer), "struct ");
      else if ((((enum tree_code) (node)->common.code) == UNION_TYPE
  || ((enum tree_code) (node)->common.code) == QUAL_UNION_TYPE))
 pp_base_string ((buffer), "union ");
      dump_generic_node (buffer, ((node)->type.name), spc, 0, 0);
    }
  pp_base_newline ((buffer));
  do { int i; for (i = 0; i<spc; i++) pp_base_character ((buffer), ' '); } while (0);
  pp_base_character ((buffer), '{');
  pp_base_newline ((buffer));
  {
    tree tmp;
    tmp = ((node)->type.values);
    while (tmp)
      {
 if (((tmp)->common.type) != node
     || (((enum tree_code) (((tmp)->common.type))->common.code) == POINTER_TYPE
  && ((((tmp)->common.type))->common.type) != node))
   {
     print_declaration (buffer, tmp, spc+2, flags);
     pp_base_newline ((buffer));
   }
 tmp = ((tmp)->common.chain);
      }
  }
  do { int i; for (i = 0; i<spc; i++) pp_base_character ((buffer), ' '); } while (0);
  pp_base_character ((buffer), '}');
}
static int
op_prio (tree op)
{
  if (op == ((void *)0))
    return 9999;
  switch (((enum tree_code) (op)->common.code))
    {
    case TREE_LIST:
    case COMPOUND_EXPR:
    case BIND_EXPR:
      return 1;
    case MODIFY_EXPR:
    case INIT_EXPR:
      return 2;
    case COND_EXPR:
      return 3;
    case TRUTH_OR_EXPR:
    case TRUTH_ORIF_EXPR:
      return 4;
    case TRUTH_AND_EXPR:
    case TRUTH_ANDIF_EXPR:
      return 5;
    case BIT_IOR_EXPR:
      return 6;
    case BIT_XOR_EXPR:
    case TRUTH_XOR_EXPR:
      return 7;
    case BIT_AND_EXPR:
      return 8;
    case EQ_EXPR:
    case NE_EXPR:
      return 9;
    case UNLT_EXPR:
    case UNLE_EXPR:
    case UNGT_EXPR:
    case UNGE_EXPR:
    case UNEQ_EXPR:
    case LTGT_EXPR:
    case ORDERED_EXPR:
    case UNORDERED_EXPR:
    case LT_EXPR:
    case LE_EXPR:
    case GT_EXPR:
    case GE_EXPR:
      return 10;
    case LSHIFT_EXPR:
    case RSHIFT_EXPR:
    case LROTATE_EXPR:
    case RROTATE_EXPR:
      return 11;
    case PLUS_EXPR:
    case MINUS_EXPR:
      return 12;
    case MULT_EXPR:
    case TRUNC_DIV_EXPR:
    case CEIL_DIV_EXPR:
    case FLOOR_DIV_EXPR:
    case ROUND_DIV_EXPR:
    case RDIV_EXPR:
    case EXACT_DIV_EXPR:
    case TRUNC_MOD_EXPR:
    case CEIL_MOD_EXPR:
    case FLOOR_MOD_EXPR:
    case ROUND_MOD_EXPR:
      return 13;
    case TRUTH_NOT_EXPR:
    case BIT_NOT_EXPR:
    case POSTINCREMENT_EXPR:
    case POSTDECREMENT_EXPR:
    case PREINCREMENT_EXPR:
    case PREDECREMENT_EXPR:
    case NEGATE_EXPR:
    case INDIRECT_REF:
    case ADDR_EXPR:
    case FLOAT_EXPR:
    case NOP_EXPR:
    case CONVERT_EXPR:
    case FIX_TRUNC_EXPR:
    case FIX_CEIL_EXPR:
    case FIX_FLOOR_EXPR:
    case FIX_ROUND_EXPR:
    case TARGET_EXPR:
      return 14;
    case CALL_EXPR:
    case ARRAY_REF:
    case ARRAY_RANGE_REF:
    case COMPONENT_REF:
      return 15;
    case MIN_EXPR:
    case MAX_EXPR:
    case ABS_EXPR:
    case REALPART_EXPR:
    case IMAGPART_EXPR:
      return 16;
    case SAVE_EXPR:
    case NON_LVALUE_EXPR:
      return op_prio (((op)->exp.operands[0]));
    default:
      return 9999;
    }
}
static const char *
op_symbol (tree op)
{
  if (op == ((void *)0))
    fancy_abort ("gcc.c", 117450, "?");
  switch (((enum tree_code) (op)->common.code))
    {
    case MODIFY_EXPR:
      return "=";
    case TRUTH_OR_EXPR:
    case TRUTH_ORIF_EXPR:
      return "||";
    case TRUTH_AND_EXPR:
    case TRUTH_ANDIF_EXPR:
      return "&&";
    case BIT_IOR_EXPR:
      return "|";
    case TRUTH_XOR_EXPR:
    case BIT_XOR_EXPR:
      return "^";
    case ADDR_EXPR:
    case BIT_AND_EXPR:
      return "&";
    case ORDERED_EXPR:
      return "ord";
    case UNORDERED_EXPR:
      return "unord";
    case EQ_EXPR:
      return "==";
    case UNEQ_EXPR:
      return "u==";
    case NE_EXPR:
      return "!=";
    case LT_EXPR:
      return "<";
    case UNLT_EXPR:
      return "u<";
    case LE_EXPR:
      return "<=";
    case UNLE_EXPR:
      return "u<=";
    case GT_EXPR:
      return ">";
    case UNGT_EXPR:
      return "u>";
    case GE_EXPR:
      return ">=";
    case UNGE_EXPR:
      return "u>=";
    case LTGT_EXPR:
      return "<>";
    case LSHIFT_EXPR:
      return "<<";
    case RSHIFT_EXPR:
      return ">>";
    case PLUS_EXPR:
      return "+";
    case NEGATE_EXPR:
    case MINUS_EXPR:
      return "-";
    case BIT_NOT_EXPR:
      return "~";
    case TRUTH_NOT_EXPR:
      return "!";
    case MULT_EXPR:
    case INDIRECT_REF:
      return "*";
    case TRUNC_DIV_EXPR:
    case CEIL_DIV_EXPR:
    case FLOOR_DIV_EXPR:
    case ROUND_DIV_EXPR:
    case RDIV_EXPR:
    case EXACT_DIV_EXPR:
      return "/";
    case TRUNC_MOD_EXPR:
    case CEIL_MOD_EXPR:
    case FLOOR_MOD_EXPR:
    case ROUND_MOD_EXPR:
      return "%";
    case PREDECREMENT_EXPR:
      return " --";
    case PREINCREMENT_EXPR:
      return " ++";
    case POSTDECREMENT_EXPR:
      return "-- ";
    case POSTINCREMENT_EXPR:
      return "++ ";
    case REFERENCE_EXPR:
      return "";
    default:
      return "<<< ??? >>>";
    }
}
static void
print_call_name (pretty_printer *buffer, tree node)
{
  tree op0;
  if (((enum tree_code) (node)->common.code) != CALL_EXPR)
    fancy_abort ("gcc.c", 117577, "?");
  op0 = ((node)->exp.operands[0]);
  if (((enum tree_code) (op0)->common.code) == NON_LVALUE_EXPR)
    op0 = ((op0)->exp.operands[0]);
  switch (((enum tree_code) (op0)->common.code))
    {
    case VAR_DECL:
    case PARM_DECL:
      pp_printf (buffer, "%s", ((enum tree_code) (op0)->common.code) == NOP_EXPR ? lang_hooks.decl_printable_name (((op0)->exp.operands[0]), 1) : lang_hooks.decl_printable_name (op0, 1));
      break;
    case ADDR_EXPR:
    case INDIRECT_REF:
    case NOP_EXPR:
      dump_generic_node (buffer, ((op0)->exp.operands[0]), 0, 0, 0);
      break;
    case COND_EXPR:
      pp_base_string ((buffer), "(");
      dump_generic_node (buffer, ((op0)->exp.operands[0]), 0, 0, 0);
      pp_base_string ((buffer), ") ? ");
      dump_generic_node (buffer, ((op0)->exp.operands[1]), 0, 0, 0);
      pp_base_string ((buffer), " : ");
      dump_generic_node (buffer, ((op0)->exp.operands[2]), 0, 0, 0);
      break;
    case COMPONENT_REF:
      if (((enum tree_code) (((op0)->exp.operands[0]))->common.code) == INDIRECT_REF ||
   ((enum tree_code) (((op0)->exp.operands[0]))->common.code) == VAR_DECL)
 pp_printf (buffer, "%s", ((enum tree_code) (((op0)->exp.operands[1]))->common.code) == NOP_EXPR ? lang_hooks.decl_printable_name (((((op0)->exp.operands[1]))->exp.operands[0]), 1) : lang_hooks.decl_printable_name (((op0)->exp.operands[1]), 1));
      else
 dump_generic_node (buffer, ((op0)->exp.operands[0]), 0, 0, 0);
      break;
    case ARRAY_REF:
      if (((enum tree_code) (((op0)->exp.operands[0]))->common.code) == VAR_DECL)
 pp_printf (buffer, "%s", ((enum tree_code) (((op0)->exp.operands[0]))->common.code) == NOP_EXPR ? lang_hooks.decl_printable_name (((((op0)->exp.operands[0]))->exp.operands[0]), 1) : lang_hooks.decl_printable_name (((op0)->exp.operands[0]), 1));
      else
 dump_generic_node (buffer, op0, 0, 0, 0);
      break;
    case SSA_NAME:
    case OBJ_TYPE_REF:
      dump_generic_node (buffer, op0, 0, 0, 0);
      break;
    default:
      do_niy(buffer,node);
    }
}
static void
pretty_print_string (pretty_printer *buffer, const char *str)
{
  if (str == ((void *)0))
    return;
  while (*str)
    {
      switch (str[0])
 {
 case '\b':
   pp_base_string ((buffer), "\\b");
   break;
 case '\f':
   pp_base_string ((buffer), "\\f");
   break;
 case '\n':
   pp_base_string ((buffer), "\\n");
   break;
 case '\r':
   pp_base_string ((buffer), "\\r");
   break;
 case '\t':
   pp_base_string ((buffer), "\\t");
   break;
 case '\v':
   pp_base_string ((buffer), "\\v");
   break;
 case '\\':
   pp_base_string ((buffer), "\\\\");
   break;
 case '\"':
   pp_base_string ((buffer), "\\\"");
   break;
 case '\'':
   pp_base_string ((buffer), "\\'");
   break;
 case '\0':
   pp_base_string ((buffer), "\\0");
   break;
 case '\1':
   pp_base_string ((buffer), "\\1");
   break;
 case '\2':
   pp_base_string ((buffer), "\\2");
   break;
 case '\3':
   pp_base_string ((buffer), "\\3");
   break;
 case '\4':
   pp_base_string ((buffer), "\\4");
   break;
 case '\5':
   pp_base_string ((buffer), "\\5");
   break;
 case '\6':
   pp_base_string ((buffer), "\\6");
   break;
 case '\7':
   pp_base_string ((buffer), "\\7");
   break;
 default:
   pp_base_character ((buffer), str[0]);
   break;
 }
      str++;
    }
}
static void
maybe_init_pretty_print (FILE *file)
{
  if (!initialized)
    {
      pp_construct (&buffer, ((void *)0), 0);
      (&buffer)->need_newline = 1;
      initialized = 1;
    }
  buffer.buffer->stream = file;
}
static void
newline_and_indent (pretty_printer *buffer, int spc)
{
  pp_base_newline ((buffer));
  do { int i; for (i = 0; i<spc; i++) pp_base_character ((buffer), ' '); } while (0);
}
static void
dump_vops (pretty_printer *buffer, tree stmt, int spc, int flags)
{
  size_t i;
  stmt_ann_t ann = stmt_ann (stmt);
  v_may_def_optype v_may_defs = get_v_may_def_ops (ann);
  v_must_def_optype v_must_defs = get_v_must_def_ops (ann);
  vuse_optype vuses = get_vuse_ops (ann);
  for (i = 0; i < ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0); i++)
    {
      pp_base_string ((buffer), "#   ");
      dump_generic_node (buffer, (get_def_from_ptr (get_v_may_def_result_ptr (((v_may_defs)), ((i))))),
                         spc + 2, flags, 0);
      pp_base_string ((buffer), " = V_MAY_DEF <");
      dump_generic_node (buffer, (get_use_from_ptr (get_v_may_def_op_ptr (((v_may_defs)), ((i))))),
                         spc + 2, flags, 0);
      pp_base_string ((buffer), ">;");
      newline_and_indent (buffer, spc);
    }
  for (i = 0; i < ((v_must_defs) ? (v_must_defs)->num_v_must_defs : 0); i++)
    {
      tree v_must_def = (get_def_from_ptr (get_v_must_def_op_ptr (((v_must_defs)), ((i)))));
      pp_base_string ((buffer), "#   V_MUST_DEF <");
      dump_generic_node (buffer, v_must_def, spc + 2, flags, 0);
      pp_base_string ((buffer), ">;");
      newline_and_indent (buffer, spc);
    }
  for (i = 0; i < ((vuses) ? (vuses)->num_vuses : 0); i++)
    {
      tree vuse = (get_use_from_ptr (get_vuse_op_ptr (((vuses)), ((i)))));
      pp_base_string ((buffer), "#   VUSE <");
      dump_generic_node (buffer, vuse, spc + 2, flags, 0);
      pp_base_string ((buffer), ">;");
      newline_and_indent (buffer, spc);
    }
}
void
dump_generic_bb (FILE *file, basic_block bb, int indent1, int flags)
{
  maybe_init_pretty_print (file);
  dumping_stmts = 1;
  dump_generic_bb_buff (&buffer, bb, indent1, flags);
  pp_base_flush ((&buffer));
}
static void
dump_bb_header (pretty_printer *buffer, basic_block bb, int indent1, int flags)
{
  edge e;
  tree stmt;
  if (flags & (1 << 5))
    {
      do { int i; for (i = 0; i<indent1; i++) pp_base_character ((buffer), ' '); } while (0);
      pp_base_string ((buffer), "# BLOCK ");
      do { sprintf ((buffer)->buffer->digit_buffer, "%d", bb->index); pp_base_string ((buffer), (buffer)->buffer->digit_buffer); } while (0);
      if (flags & (1 << 7))
 {
   block_stmt_iterator bsi;
   for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))
     if (get_lineno (bsi_stmt (bsi)) != -1)
       {
  pp_base_string ((buffer), ", starting at line ");
  do { sprintf ((buffer)->buffer->digit_buffer, "%d", get_lineno (bsi_stmt (bsi))); pp_base_string ((buffer), (buffer)->buffer->digit_buffer); } while (0);
  break;
       }
 }
      newline_and_indent (buffer, indent1);
      pp_base_string ((buffer), "# PRED:");
      pp_write_text_to_stream (buffer);
      for (e = bb->pred; e; e = e->pred_next)
        if (flags & (1 << 1))
   {
     pp_base_string ((buffer), " ");
     if (e->src == ENTRY_BLOCK_PTR)
       pp_base_string ((buffer), "ENTRY");
     else
       do { sprintf ((buffer)->buffer->digit_buffer, "%d", e->src->index); pp_base_string ((buffer), (buffer)->buffer->digit_buffer); } while (0);
   }
 else
   dump_edge_info (buffer->buffer->stream, e, 0);
      pp_base_newline ((buffer));
    }
  else
    {
      stmt = first_stmt (bb);
      if (!stmt || ((enum tree_code) (stmt)->common.code) != LABEL_EXPR)
 {
   do { int i; for (i = 0; i<indent1 - 2; i++) pp_base_character ((buffer), ' '); } while (0);
   pp_base_string ((buffer), "<bb ");
   do { sprintf ((buffer)->buffer->digit_buffer, "%d", bb->index); pp_base_string ((buffer), (buffer)->buffer->digit_buffer); } while (0);
   pp_base_string ((buffer), ">:");
   pp_base_newline ((buffer));
 }
    }
}
static void
dump_bb_end (pretty_printer *buffer, basic_block bb, int indent1, int flags)
{
  edge e;
  do { int i; for (i = 0; i<indent1; i++) pp_base_character ((buffer), ' '); } while (0);
  pp_base_string ((buffer), "# SUCC:");
  pp_write_text_to_stream (buffer);
  for (e = bb->succ; e; e = e->succ_next)
    if (flags & (1 << 1))
      {
 pp_base_string ((buffer), " ");
 if (e->dest == EXIT_BLOCK_PTR)
   pp_base_string ((buffer), "EXIT");
 else
   do { sprintf ((buffer)->buffer->digit_buffer, "%d", e->dest->index); pp_base_string ((buffer), (buffer)->buffer->digit_buffer); } while (0);
      }
    else
      dump_edge_info (buffer->buffer->stream, e, 1);
  pp_base_newline ((buffer));
}
static void
dump_phi_nodes (pretty_printer *buffer, basic_block bb, int indent1, int flags)
{
  tree phi = phi_nodes (bb);
  if (!phi)
    return;
  for (; phi; phi = (((phi))->common.chain))
    {
      if (is_gimple_reg (get_def_from_ptr (get_phi_result_ptr (phi))) || (flags & (1 << 6)))
        {
          do { int i; for (i = 0; i<indent1; i++) pp_base_character ((buffer), ' '); } while (0);
          pp_base_string ((buffer), "# ");
          dump_generic_node (buffer, phi, indent1, flags, 0);
          pp_base_newline ((buffer));
        }
    }
}
static void
pp_cfg_jump (pretty_printer *buffer, basic_block bb)
{
  tree stmt;
  stmt = first_stmt (bb);
  pp_base_string ((buffer), "goto <bb ");
  do { sprintf ((buffer)->buffer->digit_buffer, "%d", bb->index); pp_base_string ((buffer), (buffer)->buffer->digit_buffer); } while (0);
  pp_base_string ((buffer), ">");
  if (stmt && ((enum tree_code) (stmt)->common.code) == LABEL_EXPR)
    {
      pp_base_string ((buffer), " (");
      dump_generic_node (buffer, (((stmt))->exp.operands[0]), 0, 0, 0);
      pp_base_string ((buffer), ")");
    }
  pp_base_character ((buffer), ';');
}
static void
dump_implicit_edges (pretty_printer *buffer, basic_block bb, int indent1,
       int flags)
{
  edge e;
  for (e = bb->succ; e; e = e->succ_next)
    if (e->flags & 1)
      break;
  if (e && e->dest != bb->next_bb)
    {
      do { int i; for (i = 0; i<indent1; i++) pp_base_character ((buffer), ' '); } while (0);
      if ((flags & (1 << 7))
   && e->goto_locus
   )
 {
   expanded_location goto_xloc;
   goto_xloc = *e->goto_locus;
   pp_base_character ((buffer), '[');
   if (goto_xloc.file)
     {
       pp_base_string ((buffer), goto_xloc.file);
       pp_base_string ((buffer), " : ");
     }
   do { sprintf ((buffer)->buffer->digit_buffer, "%d", goto_xloc.line); pp_base_string ((buffer), (buffer)->buffer->digit_buffer); } while (0);
   pp_base_string ((buffer), "] ");
 }
      pp_cfg_jump (buffer, e->dest);
      pp_base_newline ((buffer));
    }
}
static void
dump_generic_bb_buff (pretty_printer *buffer, basic_block bb,
        int indent1, int flags)
{
  block_stmt_iterator bsi;
  tree stmt;
  int label_indent1 = indent1 - 2;
  if (label_indent1 < 0)
    label_indent1 = 0;
  dump_bb_header (buffer, bb, indent1, flags);
  if (bb_ann (bb))
    dump_phi_nodes (buffer, bb, indent1, flags);
  for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))
    {
      int curr_indent1;
      stmt = bsi_stmt (bsi);
      curr_indent1 = ((enum tree_code) (stmt)->common.code) == LABEL_EXPR ? label_indent1 : indent1;
      do { int i; for (i = 0; i<curr_indent1; i++) pp_base_character ((buffer), ' '); } while (0);
      dump_generic_node (buffer, stmt, curr_indent1, flags, 1);
      pp_base_newline ((buffer));
    }
  dump_implicit_edges (buffer, bb, indent1, flags);
  if (flags & (1 << 5))
    dump_bb_end (buffer, bb, indent1, flags);
}
struct dom_walk_data
{
  unsigned int dom_direction : 2;
  unsigned int walk_stmts_backward : 1;
  void (*initialize_block_local_data) (struct dom_walk_data *,
           basic_block, unsigned char);
  void (*before_dom_children_before_stmts) (struct dom_walk_data *,
         basic_block);
  void (*before_dom_children_walk_stmts) (struct dom_walk_data *,
       basic_block, block_stmt_iterator);
  void (*before_dom_children_after_stmts) (struct dom_walk_data *,
        basic_block);
  void (*after_dom_children_before_stmts) (struct dom_walk_data *,
        basic_block);
  void (*after_dom_children_walk_stmts) (struct dom_walk_data *,
      basic_block, block_stmt_iterator);
  void (*after_dom_children_after_stmts) (struct dom_walk_data *,
       basic_block);
  void *global_data;
  varray_type block_data_stack;
  size_t block_local_data_size;
  varray_type free_block_data;
};
void walk_dominator_tree (struct dom_walk_data *, basic_block);
void init_walk_dominator_tree (struct dom_walk_data *);
void fini_walk_dominator_tree (struct dom_walk_data *);
struct def_blocks_d
{
  tree var;
  bitmap def_blocks;
  bitmap phi_blocks;
  bitmap livein_blocks;
};
static htab_t def_blocks;
struct mark_def_sites_global_data
{
  sbitmap kills;
  sbitmap names_to_rename;
};
struct rewrite_block_data
{
  varray_type block_defs;
};
struct ssa_name_info
{
  unsigned int need_phi_state : 2;
  tree current_def;
};
static void rewrite_finalize_block (struct dom_walk_data *, basic_block);
static void rewrite_initialize_block_local_data (struct dom_walk_data *,
       basic_block, unsigned char);
static void rewrite_initialize_block (struct dom_walk_data *, basic_block);
static void rewrite_add_phi_arguments (struct dom_walk_data *, basic_block);
static void mark_def_sites (struct dom_walk_data *walk_data,
       basic_block bb, block_stmt_iterator);
static void mark_def_sites_initialize_block (struct dom_walk_data *walk_data,
          basic_block bb);
static void set_def_block (tree, basic_block, unsigned char, unsigned char);
static void set_livein_block (tree, basic_block);
static unsigned char prepare_use_operand_for_rename (use_operand_p, size_t *uid_p);
static unsigned char prepare_def_operand_for_rename (tree def, size_t *uid_p);
static void insert_phi_nodes (bitmap *, bitmap);
static void rewrite_stmt (struct dom_walk_data *, basic_block,
     block_stmt_iterator);
static void rewrite_operand (use_operand_p);
static void insert_phi_nodes_for (tree, bitmap *, varray_type *);
static tree get_reaching_def (tree);
static hashval_t def_blocks_hash (const void *);
static int def_blocks_eq (const void *, const void *);
static void def_blocks_free (void *);
static int debug_def_blocks_r (void **, void *);
static struct def_blocks_d *get_def_blocks_for (tree);
static struct def_blocks_d *find_def_blocks_for (tree);
static void htab_statistics (FILE *, htab_t);
static struct ssa_name_info *
get_ssa_name_ann (tree name)
{
  if (!(name)->ssa_name.aux)
    (name)->ssa_name.aux = xcalloc (1, sizeof (struct ssa_name_info));
  return (name)->ssa_name.aux;
}
static enum need_phi_state
get_phi_state (tree var)
{
  if (((enum tree_code) (var)->common.code) == SSA_NAME)
    return get_ssa_name_ann (var)->need_phi_state;
  else
    return var_ann (var)->need_phi_state;
}
static void
set_phi_state (tree var, enum need_phi_state state)
{
  if (((enum tree_code) (var)->common.code) == SSA_NAME)
    get_ssa_name_ann (var)->need_phi_state = state;
  else
    var_ann (var)->need_phi_state = state;
}
static tree
get_current_def (tree var)
{
  if (((enum tree_code) (var)->common.code) == SSA_NAME)
    return get_ssa_name_ann (var)->current_def;
  else
    return var_ann (var)->current_def;
}
static void
set_current_def (tree var, tree def)
{
  if (((enum tree_code) (var)->common.code) == SSA_NAME)
    get_ssa_name_ann (var)->current_def = def;
  else
    var_ann (var)->current_def = def;
}
void
compute_global_livein (bitmap livein, bitmap def_blocks)
{
  basic_block bb, *worklist, *tos;
  int i;
  tos = worklist
    = (basic_block *) xmalloc (sizeof (basic_block) * (n_basic_blocks + 1));
  do { bitmap_element *ptr_ = (livein)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (i) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); { *tos++ = (((basic_block_info)->data.bb[(i)])); }; if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
      ;
  while (tos != worklist)
    {
      edge e;
      bb = *--tos;
      for (e = bb->pred; e; e = e->pred_next)
 {
   basic_block pred = e->src;
   int pred_index = pred->index;
   if (pred != ENTRY_BLOCK_PTR
       && ! bitmap_bit_p (livein, pred_index)
       && ! bitmap_bit_p (def_blocks, pred_index))
     {
       *tos++ = pred;
       bitmap_set_bit (livein, pred_index);
     }
 }
    }
  free (worklist);
}
static void
mark_def_sites_initialize_block (struct dom_walk_data *walk_data,
     basic_block bb )
{
  struct mark_def_sites_global_data *gd = walk_data->global_data;
  sbitmap kills = gd->kills;
  sbitmap_zero (kills);
}
static void
ssa_mark_def_sites_initialize_block (struct dom_walk_data *walk_data,
         basic_block bb)
{
  struct mark_def_sites_global_data *gd = walk_data->global_data;
  sbitmap kills = gd->kills;
  tree phi, def;
  unsigned def_uid;
  sbitmap_zero (kills);
  for (phi = phi_nodes (bb); phi; phi = ((phi)->common.chain))
    {
      def = get_def_from_ptr (get_phi_result_ptr (phi));
      def_uid = (def)->ssa_name.version;
      if (!((gd->names_to_rename)->elms [(def_uid) / ((unsigned) (8 * 4))] >> (def_uid) % ((unsigned) (8 * 4)) & 1))
 continue;
      set_def_block (def, bb, 1, 1);
      ((kills)->elms [(def_uid) / ((unsigned) (8 * 4))] |= (unsigned long) 1 << (def_uid) % ((unsigned) (8 * 4)));
    }
}
static void
ssa_mark_phi_uses (struct dom_walk_data *walk_data, basic_block bb)
{
  struct mark_def_sites_global_data *gd = walk_data->global_data;
  sbitmap kills = gd->kills;
  edge e;
  tree phi, use;
  unsigned uid;
  for (e = bb->succ; e; e = e->succ_next)
    {
      if (e->dest == EXIT_BLOCK_PTR)
 continue;
      for (phi = phi_nodes (e->dest); phi; phi = ((phi)->common.chain))
 {
   use = get_use_from_ptr (get_phi_arg_def_ptr ((((phi))), ((phi_arg_from_edge ((phi),(e))))));
   if (((enum tree_code) (use)->common.code) != SSA_NAME)
     continue;
   uid = (use)->ssa_name.version;
   if (((gd->names_to_rename)->elms [(uid) / ((unsigned) (8 * 4))] >> (uid) % ((unsigned) (8 * 4)) & 1)
       && !((kills)->elms [(uid) / ((unsigned) (8 * 4))] >> (uid) % ((unsigned) (8 * 4)) & 1))
     set_livein_block (use, bb);
 }
    }
}
static void
mark_def_sites (struct dom_walk_data *walk_data,
  basic_block bb,
  block_stmt_iterator bsi)
{
  struct mark_def_sites_global_data *gd = walk_data->global_data;
  sbitmap kills = gd->kills;
  v_may_def_optype v_may_defs;
  v_must_def_optype v_must_defs;
  vuse_optype vuses;
  def_optype defs;
  use_optype uses;
  size_t i, uid;
  tree stmt;
  stmt_ann_t ann;
  stmt = bsi_stmt (bsi);
  get_stmt_operands (stmt);
  ann = stmt_ann (stmt);
  uses = get_use_ops (ann);
  for (i = 0; i < ((uses) ? (uses)->num_uses : 0); i++)
    {
      use_operand_p use_p = get_use_op_ptr ((uses), (i));
      if (prepare_use_operand_for_rename (use_p, &uid)
   && !((kills)->elms [(uid) / ((unsigned) (8 * 4))] >> (uid) % ((unsigned) (8 * 4)) & 1))
 set_livein_block (get_use_from_ptr (use_p), bb);
    }
  vuses = get_vuse_ops (ann);
  for (i = 0; i < ((vuses) ? (vuses)->num_vuses : 0); i++)
    {
      use_operand_p use_p = get_vuse_op_ptr ((vuses), (i));
      if (prepare_use_operand_for_rename (use_p, &uid)
   && !((kills)->elms [(uid) / ((unsigned) (8 * 4))] >> (uid) % ((unsigned) (8 * 4)) & 1))
 set_livein_block (get_use_from_ptr (use_p), bb);
    }
  v_may_defs = get_v_may_def_ops (ann);
  for (i = 0; i < ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0); i++)
    {
      use_operand_p use_p = get_v_may_def_op_ptr ((v_may_defs), (i));
      if (prepare_use_operand_for_rename (use_p, &uid))
 {
   if (((enum tree_code) ((get_def_from_ptr (get_v_may_def_result_ptr (((v_may_defs)), ((i))))))->common.code) != SSA_NAME)
     (((*((get_v_may_def_result_ptr (((v_may_defs)), ((i)))).def)) = ((get_use_from_ptr (use_p)))));
          set_livein_block (get_use_from_ptr (use_p), bb);
   set_def_block ((get_def_from_ptr (get_v_may_def_result_ptr (((v_may_defs)), ((i))))), bb, 0, 0);
 }
    }
  v_must_defs = get_v_must_def_ops (ann);
  for (i = 0; i < ((v_must_defs) ? (v_must_defs)->num_v_must_defs : 0); i++)
    {
      tree def = (get_def_from_ptr (get_v_must_def_op_ptr (((v_must_defs)), ((i)))));
      if (prepare_def_operand_for_rename (def, &uid))
 {
   set_def_block (def, bb, 0, 0);
   ((kills)->elms [(uid) / ((unsigned) (8 * 4))] |= (unsigned long) 1 << (uid) % ((unsigned) (8 * 4)));
 }
    }
  defs = get_def_ops (ann);
  for (i = 0; i < ((defs) ? (defs)->num_defs : 0); i++)
    {
      tree def = (get_def_from_ptr (get_def_op_ptr (((defs)), ((i)))));
      if (prepare_def_operand_for_rename (def, &uid))
 {
   set_def_block (def, bb, 0, 0);
   ((kills)->elms [(uid) / ((unsigned) (8 * 4))] |= (unsigned long) 1 << (uid) % ((unsigned) (8 * 4)));
 }
    }
}
static void
ssa_mark_def_sites (struct dom_walk_data *walk_data,
      basic_block bb,
      block_stmt_iterator bsi)
{
  struct mark_def_sites_global_data *gd = walk_data->global_data;
  sbitmap kills = gd->kills;
  v_may_def_optype v_may_defs;
  v_must_def_optype v_must_defs;
  vuse_optype vuses;
  def_optype defs;
  use_optype uses;
  size_t i, uid, def_uid;
  tree stmt, use, def;
  stmt_ann_t ann;
  stmt = bsi_stmt (bsi);
  get_stmt_operands (stmt);
  ann = stmt_ann (stmt);
  uses = get_use_ops (ann);
  for (i = 0; i < ((uses) ? (uses)->num_uses : 0); i++)
    {
      use = (get_use_from_ptr (get_use_op_ptr (((uses)), ((i)))));
      uid = (use)->ssa_name.version;
      if (((gd->names_to_rename)->elms [(uid) / ((unsigned) (8 * 4))] >> (uid) % ((unsigned) (8 * 4)) & 1)
   && !((kills)->elms [(uid) / ((unsigned) (8 * 4))] >> (uid) % ((unsigned) (8 * 4)) & 1))
 set_livein_block (use, bb);
    }
  vuses = get_vuse_ops (ann);
  for (i = 0; i < ((vuses) ? (vuses)->num_vuses : 0); i++)
    {
      use = (get_use_from_ptr (get_vuse_op_ptr (((vuses)), ((i)))));
      uid = (use)->ssa_name.version;
      if (((gd->names_to_rename)->elms [(uid) / ((unsigned) (8 * 4))] >> (uid) % ((unsigned) (8 * 4)) & 1)
   && !((kills)->elms [(uid) / ((unsigned) (8 * 4))] >> (uid) % ((unsigned) (8 * 4)) & 1))
 set_livein_block (use, bb);
    }
  v_may_defs = get_v_may_def_ops (ann);
  for (i = 0; i < ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0); i++)
    {
      use = (get_use_from_ptr (get_v_may_def_op_ptr (((v_may_defs)), ((i)))));
      uid = (use)->ssa_name.version;
      if (((gd->names_to_rename)->elms [(uid) / ((unsigned) (8 * 4))] >> (uid) % ((unsigned) (8 * 4)) & 1)
   && !((kills)->elms [(uid) / ((unsigned) (8 * 4))] >> (uid) % ((unsigned) (8 * 4)) & 1))
 set_livein_block (use, bb);
    }
  defs = get_def_ops (ann);
  for (i = 0; i < ((defs) ? (defs)->num_defs : 0); i++)
    {
      def = (get_def_from_ptr (get_def_op_ptr (((defs)), ((i)))));
      def_uid = (def)->ssa_name.version;
      if (((gd->names_to_rename)->elms [(def_uid) / ((unsigned) (8 * 4))] >> (def_uid) % ((unsigned) (8 * 4)) & 1))
 {
   set_def_block (def, bb, 0, 1);
   ((kills)->elms [(def_uid) / ((unsigned) (8 * 4))] |= (unsigned long) 1 << (def_uid) % ((unsigned) (8 * 4)));
 }
    }
  v_may_defs = get_v_may_def_ops (ann);
  for (i = 0; i < ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0); i++)
    {
      def = (get_def_from_ptr (get_v_may_def_result_ptr (((v_may_defs)), ((i)))));
      def_uid = (def)->ssa_name.version;
      if (((gd->names_to_rename)->elms [(def_uid) / ((unsigned) (8 * 4))] >> (def_uid) % ((unsigned) (8 * 4)) & 1))
 {
   set_def_block (def, bb, 0, 1);
   ((kills)->elms [(def_uid) / ((unsigned) (8 * 4))] |= (unsigned long) 1 << (def_uid) % ((unsigned) (8 * 4)));
 }
    }
  v_must_defs = get_v_must_def_ops (ann);
  for (i = 0; i < ((v_must_defs) ? (v_must_defs)->num_v_must_defs : 0); i++)
    {
      def = (get_def_from_ptr (get_v_must_def_op_ptr (((v_must_defs)), ((i)))));
      def_uid = (def)->ssa_name.version;
      if (((gd->names_to_rename)->elms [(def_uid) / ((unsigned) (8 * 4))] >> (def_uid) % ((unsigned) (8 * 4)) & 1))
 {
   set_def_block (def, bb, 0, 1);
   ((kills)->elms [(def_uid) / ((unsigned) (8 * 4))] |= (unsigned long) 1 << (def_uid) % ((unsigned) (8 * 4)));
 }
    }
}
static void
set_def_block (tree var, basic_block bb, unsigned char phi_p, unsigned char ssa_p)
{
  struct def_blocks_d *db_p;
  enum need_phi_state state;
  if (!ssa_p
      && ((enum tree_code) (var)->common.code) == SSA_NAME)
    var = (var)->ssa_name.var;
  state = get_phi_state (var);
  db_p = get_def_blocks_for (var);
  bitmap_set_bit (db_p->def_blocks, bb->index);
  if (phi_p)
    bitmap_set_bit (db_p->phi_blocks, bb->index);
  if (state == NEED_PHI_STATE_UNKNOWN)
    set_phi_state (var, NEED_PHI_STATE_NO);
  else
    set_phi_state (var, NEED_PHI_STATE_MAYBE);
}
static void
set_livein_block (tree var, basic_block bb)
{
  struct def_blocks_d *db_p;
  enum need_phi_state state = get_phi_state (var);
  db_p = get_def_blocks_for (var);
  bitmap_set_bit (db_p->livein_blocks, bb->index);
  if (state == NEED_PHI_STATE_NO)
    {
      int def_block_index = bitmap_first_set_bit (db_p->def_blocks);
      if (def_block_index == -1
   || ! dominated_by_p (CDI_DOMINATORS, bb,
                        (((basic_block_info)->data.bb[(def_block_index)]))))
 set_phi_state (var, NEED_PHI_STATE_MAYBE);
    }
  else
    set_phi_state (var, NEED_PHI_STATE_MAYBE);
}
static unsigned char
prepare_use_operand_for_rename (use_operand_p op_p, size_t *uid_p)
{
  tree use = get_use_from_ptr (op_p);
  tree var = (((enum tree_code) (use)->common.code) != SSA_NAME) ? use : (use)->ssa_name.var;
  *uid_p = var_ann (var)->uid;
  if (vars_to_rename && !bitmap_bit_p (vars_to_rename, *uid_p))
    return 0;
  if (((enum tree_code) (use)->common.code) == SSA_NAME)
    ((*((op_p).use)) = (var));
  return 1;
}
static unsigned char
prepare_def_operand_for_rename (tree def, size_t *uid_p)
{
  tree var = (((enum tree_code) (def)->common.code) != SSA_NAME) ? def : (def)->ssa_name.var;
  *uid_p = var_ann (var)->uid;
  if (vars_to_rename && !bitmap_bit_p (vars_to_rename, *uid_p))
    return 0;
  return 1;
}
static
void insert_phi_nodes_1 (tree var, bitmap *dfs, varray_type *work_stack)
{
  if (get_phi_state (var) != NEED_PHI_STATE_NO)
    insert_phi_nodes_for (var, dfs, work_stack);
}
static void
insert_phi_nodes (bitmap *dfs, bitmap names_to_rename)
{
  size_t i;
  varray_type work_stack;
  timevar_push (TV_TREE_INSERT_PHI_NODES);
  work_stack = varray_init (last_basic_block, VARRAY_DATA_GENERIC_NOGC, "work_stack");
  if (names_to_rename)
    {
      do { bitmap_element *ptr_ = (names_to_rename)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (i) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); { if (((ssa_names)->data.tree1[i])) insert_phi_nodes_1 (((ssa_names)->data.tree1[i]), dfs, &work_stack); }; if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
   ;
    }
  else if (vars_to_rename)
    do { bitmap_element *ptr_ = (vars_to_rename)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (i) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); insert_phi_nodes_1 (((referenced_vars)->data.tree1[i]), dfs, &work_stack); if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
                                                           ;
  else
    for (i = 0; i < ((referenced_vars)->elements_used); i++)
      insert_phi_nodes_1 (((referenced_vars)->data.tree1[i]), dfs, &work_stack);
  do { if (work_stack) { free (work_stack); work_stack = (varray_type) 0; } } while (0);
  timevar_pop (TV_TREE_INSERT_PHI_NODES);
}
static void
rewrite_initialize_block_local_data (struct dom_walk_data *walk_data ,
         basic_block bb ,
         unsigned char recycled )
{
}
static void
rewrite_initialize_block (struct dom_walk_data *walk_data, basic_block bb)
{
  tree phi;
  struct rewrite_block_data *bd
    = (struct rewrite_block_data *)((walk_data->block_data_stack)->data.generic[(walk_data->block_data_stack)->elements_used - 1]);
  if (dump_file && (dump_flags & (1 << 3)))
    fprintf (dump_file, "\n\nRenaming block #%d\n\n", bb->index);
  for (phi = phi_nodes (bb); phi; phi = (((phi))->common.chain))
    {
      tree result = get_def_from_ptr (get_phi_result_ptr (phi));
      register_new_def (result, &bd->block_defs);
    }
}
static void
ssa_register_new_def (tree var, tree def, varray_type *block_defs_p)
{
  tree currdef;
  if (get_phi_state (var) == NEED_PHI_STATE_NO)
    {
      set_current_def (var, def);
      return;
    }
  currdef = get_current_def (var);
  if (! *block_defs_p)
    *block_defs_p = varray_init (20, VARRAY_DATA_TREE, "block_defs");
  do { if ((*block_defs_p)->elements_used >= (*block_defs_p)->num_elements) (((*block_defs_p)) = varray_grow ((*block_defs_p), 2 * (*block_defs_p)->num_elements)); (*block_defs_p)->data.tree1[(*block_defs_p)->elements_used++] = (var); } while (0);
  do { if ((*block_defs_p)->elements_used >= (*block_defs_p)->num_elements) (((*block_defs_p)) = varray_grow ((*block_defs_p), 2 * (*block_defs_p)->num_elements)); (*block_defs_p)->data.tree1[(*block_defs_p)->elements_used++] = (currdef); } while (0);
  set_current_def (var, def);
}
static void
ssa_rewrite_initialize_block (struct dom_walk_data *walk_data, basic_block bb)
{
  tree phi, new_name;
  struct rewrite_block_data *bd
    = (struct rewrite_block_data *)((walk_data->block_data_stack)->data.generic[(walk_data->block_data_stack)->elements_used - 1]);
  sbitmap names_to_rename = walk_data->global_data;
  edge e;
  unsigned char abnormal_phi;
  if (dump_file && (dump_flags & (1 << 3)))
    fprintf (dump_file, "\n\nRenaming block #%d\n\n", bb->index);
  for (e = bb->pred; e; e = e->pred_next)
    if (e->flags & 2)
      break;
  abnormal_phi = (e != ((void *)0));
  for (phi = phi_nodes (bb); phi; phi = ((phi)->common.chain))
    {
      tree result = get_def_from_ptr (get_phi_result_ptr (phi));
      if (((names_to_rename)->elms [((result)->ssa_name.version) / ((unsigned) (8 * 4))] >> ((result)->ssa_name.version) % ((unsigned) (8 * 4)) & 1))
 {
   new_name = duplicate_ssa_name (result, phi);
   ((*((get_phi_result_ptr (phi)).def)) = ((new_name)));
   if (abnormal_phi)
     (new_name)->common.asm_written_flag = 1;
 }
      else
 new_name = result;
      ssa_register_new_def (result, new_name, &bd->block_defs);
    }
}
static void
rewrite_add_phi_arguments (struct dom_walk_data *walk_data ,
      basic_block bb)
{
  edge e;
  for (e = bb->succ; e; e = e->succ_next)
    {
      tree phi;
      for (phi = phi_nodes (e->dest); phi; phi = ((phi)->common.chain))
 {
   tree currdef;
   if ((phi)->phi.rewritten)
     break;
   currdef = get_reaching_def ((get_def_from_ptr (get_phi_result_ptr (phi)))->ssa_name.var);
   add_phi_arg (&phi, currdef, e);
 }
    }
}
static void
ssa_rewrite_phi_arguments (struct dom_walk_data *walk_data, basic_block bb)
{
  edge e;
  sbitmap names_to_rename = walk_data->global_data;
  use_operand_p op;
  for (e = bb->succ; e; e = e->succ_next)
    {
      tree phi;
      if (e->dest == EXIT_BLOCK_PTR)
 continue;
      for (phi = phi_nodes (e->dest); phi; phi = ((phi)->common.chain))
 {
   op = get_phi_arg_def_ptr (((phi)), (phi_arg_from_edge ((phi),(e))));
   if (((enum tree_code) (get_use_from_ptr (op))->common.code) != SSA_NAME)
     continue;
   if (!((names_to_rename)->elms [((get_use_from_ptr (op))->ssa_name.version) / ((unsigned) (8 * 4))] >> ((get_use_from_ptr (op))->ssa_name.version) % ((unsigned) (8 * 4)) & 1))
     continue;
   ((*((op).use)) = (get_reaching_def (get_use_from_ptr (op))));
   if (e->flags & 2)
     (get_use_from_ptr (op))->common.asm_written_flag = 1;
 }
    }
}
static void
rewrite_finalize_block (struct dom_walk_data *walk_data,
   basic_block bb )
{
  struct rewrite_block_data *bd
    = (struct rewrite_block_data *)((walk_data->block_data_stack)->data.generic[(walk_data->block_data_stack)->elements_used - 1]);
  while (bd->block_defs && ((bd->block_defs)->elements_used) > 0)
    {
      tree tmp = ((bd->block_defs)->data.tree1[(bd->block_defs)->elements_used - 1]);
      tree saved_def, var;
      do { ((bd->block_defs)->elements_used--); } while (0);
      if (((enum tree_code) (tmp)->common.code) == SSA_NAME)
 {
   saved_def = tmp;
   var = (saved_def)->ssa_name.var;
 }
      else
 {
   saved_def = ((void *)0);
   var = tmp;
 }
      set_current_def (var, saved_def);
    }
}
static void
ssa_rewrite_finalize_block (struct dom_walk_data *walk_data,
       basic_block bb )
{
  struct rewrite_block_data *bd
    = (struct rewrite_block_data *)((walk_data->block_data_stack)->data.generic[(walk_data->block_data_stack)->elements_used - 1]);
  while (bd->block_defs && ((bd->block_defs)->elements_used) > 0)
    {
      tree var;
      tree saved_def = ((bd->block_defs)->data.tree1[(bd->block_defs)->elements_used - 1]);
      do { ((bd->block_defs)->elements_used--); } while (0);
      var = ((bd->block_defs)->data.tree1[(bd->block_defs)->elements_used - 1]);
      do { ((bd->block_defs)->elements_used--); } while (0);
      set_current_def (var, saved_def);
    }
}
void
dump_tree_ssa (FILE *file)
{
  basic_block bb;
  const char *funcname
    = lang_hooks.decl_printable_name (current_function_decl, 2);
  fprintf (file, "SSA information for %s\n\n", funcname);
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      dump_bb (bb, file, 0);
      fputs_unlocked ("    ", file);
      print_generic_stmt (file, phi_nodes (bb), dump_flags);
      fputs_unlocked ("\n\n", file);
    }
}
void
debug_tree_ssa (void)
{
  dump_tree_ssa (stderr);
}
void
dump_tree_ssa_stats (FILE *file)
{
  fprintf (file, "\nHash table statistics:\n");
  fprintf (file, "    def_blocks: ");
  htab_statistics (file, def_blocks);
  fprintf (file, "\n");
}
void
debug_tree_ssa_stats (void)
{
  dump_tree_ssa_stats (stderr);
}
static void
htab_statistics (FILE *file, htab_t htab)
{
  fprintf (file, "size %ld, %ld elements, %f collision/search ratio\n",
    (long) htab_size (htab),
    (long) htab_elements (htab),
    htab_collisions (htab));
}
static void
insert_phi_nodes_for (tree var, bitmap *dfs, varray_type *work_stack)
{
  struct def_blocks_d *def_map;
  bitmap phi_insertion_points;
  int bb_index;
  edge e;
  tree phi;
  basic_block bb;
  def_map = find_def_blocks_for (var);
  if (def_map == ((void *)0))
    return;
  phi_insertion_points = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
  do { bitmap_element *ptr_ = (def_map->def_blocks)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (bb_index) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); { do { if ((*work_stack)->elements_used >= (*work_stack)->num_elements) (((*work_stack)) = varray_grow ((*work_stack), 2 * (*work_stack)->num_elements)); (*work_stack)->data.generic_nogc[(*work_stack)->elements_used++] = ((((basic_block_info)->data.bb[(bb_index)]))); } while (0); }; if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
      ;
  while (((*work_stack)->elements_used) > 0)
    {
      int dfs_index;
      bb = ((*work_stack)->data.generic_nogc[(*work_stack)->elements_used - 1]);
      bb_index = bb->index;
      do { ((*work_stack)->elements_used--); } while (0);
      do { bitmap_element *ptr1_ = (dfs[bb_index])->first; bitmap_element *ptr2_ = (phi_insertion_points)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr1_ != 0 && ptr1_->indx < indx_) ptr1_ = ptr1_->next; if (ptr1_ != 0 && ptr1_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr1_ != 0 ; ptr1_ = ptr1_->next) { bitmap_element *tmp2_; while (ptr2_ != 0 && ptr2_->indx < ptr1_->indx) ptr2_ = ptr2_->next; tmp2_ = ((ptr2_ != 0 && ptr2_->indx == ptr1_->indx) ? ptr2_ : &bitmap_zero_bits); for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = (ptr1_->bits[word_num_] & ~ tmp2_->bits[word_num_]); if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (dfs_index) = (ptr1_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); { basic_block bb = (((basic_block_info)->data.bb[(dfs_index)])); do { if ((*work_stack)->elements_used >= (*work_stack)->num_elements) (((*work_stack)) = varray_grow ((*work_stack), 2 * (*work_stack)->num_elements)); (*work_stack)->data.generic_nogc[(*work_stack)->elements_used++] = (bb); } while (0); bitmap_set_bit (phi_insertion_points, dfs_index); }; if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
   ;
    }
  bitmap_operation (phi_insertion_points, phi_insertion_points,
      def_map->phi_blocks, BITMAP_AND_COMPL);
  compute_global_livein (def_map->livein_blocks, def_map->def_blocks);
  do { bitmap_element *ptr1_ = (phi_insertion_points)->first; bitmap_element *ptr2_ = (def_map->livein_blocks)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr1_ != 0 && ptr1_->indx < indx_) ptr1_ = ptr1_->next; if (ptr1_ != 0 && ptr1_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr1_ != 0 ; ptr1_ = ptr1_->next) { while (ptr2_ != 0 && ptr2_->indx < ptr1_->indx) ptr2_ = ptr2_->next; if (ptr2_ == 0) { ptr1_ = (bitmap_element *)0; break; } else if (ptr2_->indx > ptr1_->indx) { bit_num_ = word_num_ = 0; continue; } for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = (ptr1_->bits[word_num_] & ptr2_->bits[word_num_]); if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (bb_index) = (ptr1_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); do { bb = (((basic_block_info)->data.bb[(bb_index)])); phi = create_phi_node (var, bb); if (((enum tree_code) (var)->common.code) == SSA_NAME) { for (e = bb->pred; e; e = e->pred_next) add_phi_arg (&phi, var, e); } } while (0); if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
              ;
  do { if (phi_insertion_points) { bitmap_clear (phi_insertion_points); free (phi_insertion_points); (phi_insertion_points) = 0; } } while (0);
}
static void
rewrite_stmt (struct dom_walk_data *walk_data,
       basic_block bb ,
       block_stmt_iterator si)
{
  size_t i;
  stmt_ann_t ann;
  tree stmt;
  vuse_optype vuses;
  v_may_def_optype v_may_defs;
  v_must_def_optype v_must_defs;
  def_optype defs;
  use_optype uses;
  struct rewrite_block_data *bd;
  bd = ((walk_data->block_data_stack)->data.generic[(walk_data->block_data_stack)->elements_used - 1]);
  stmt = bsi_stmt (si);
  ann = stmt_ann (stmt);
  if (dump_file && (dump_flags & (1 << 3)))
    {
      fprintf (dump_file, "Renaming statement ");
      print_generic_stmt (dump_file, stmt, (1 << 1));
      fprintf (dump_file, "\n");
    }
  defs = get_def_ops (ann);
  uses = get_use_ops (ann);
  vuses = get_vuse_ops (ann);
  v_may_defs = get_v_may_def_ops (ann);
  v_must_defs = get_v_must_def_ops (ann);
  for (i = 0; i < ((uses) ? (uses)->num_uses : 0); i++)
    rewrite_operand (get_use_op_ptr ((uses), (i)));
  for (i = 0; i < ((vuses) ? (vuses)->num_vuses : 0); i++)
    rewrite_operand (get_vuse_op_ptr ((vuses), (i)));
  for (i = 0; i < ((defs) ? (defs)->num_defs : 0); i++)
    {
      def_operand_p def_p = get_def_op_ptr ((defs), (i));
      if (((enum tree_code) (get_def_from_ptr (def_p))->common.code) != SSA_NAME)
 ((*((def_p).def)) = (make_ssa_name (get_def_from_ptr (def_p), stmt)));
      register_new_def (get_def_from_ptr (def_p), &bd->block_defs);
    }
  for (i = 0; i < ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0); i++)
    {
      rewrite_operand (get_v_may_def_op_ptr ((v_may_defs), (i)));
      if (((enum tree_code) ((get_def_from_ptr (get_v_may_def_result_ptr (((v_may_defs)), ((i))))))->common.code) != SSA_NAME)
 (((*((get_v_may_def_result_ptr (((v_may_defs)), ((i)))).def)) = ((make_ssa_name ((get_def_from_ptr (get_v_may_def_result_ptr (((v_may_defs)), ((i))))), stmt)))))
                ;
      register_new_def ((get_def_from_ptr (get_v_may_def_result_ptr (((v_may_defs)), ((i))))), &bd->block_defs);
    }
  for (i = 0; i < ((v_must_defs) ? (v_must_defs)->num_v_must_defs : 0); i++)
    {
      def_operand_p v_must_def_p = get_v_must_def_op_ptr ((v_must_defs), (i));
      if (((enum tree_code) (get_def_from_ptr (v_must_def_p))->common.code) != SSA_NAME)
 ((*((v_must_def_p).def)) = (make_ssa_name (get_def_from_ptr (v_must_def_p), stmt)))
                                                     ;
      register_new_def (get_def_from_ptr (v_must_def_p), &bd->block_defs);
    }
}
static void
ssa_rewrite_stmt (struct dom_walk_data *walk_data,
    basic_block bb ,
    block_stmt_iterator si)
{
  size_t i;
  stmt_ann_t ann;
  tree stmt, var;
  use_operand_p use_p;
  def_operand_p def_p;
  vuse_optype vuses;
  v_may_def_optype v_may_defs;
  v_must_def_optype v_must_defs;
  def_optype defs;
  use_optype uses;
  struct rewrite_block_data *bd;
  sbitmap names_to_rename = walk_data->global_data;
  bd = ((walk_data->block_data_stack)->data.generic[(walk_data->block_data_stack)->elements_used - 1]);
  stmt = bsi_stmt (si);
  ann = stmt_ann (stmt);
  if (dump_file && (dump_flags & (1 << 3)))
    {
      fprintf (dump_file, "Renaming statement ");
      print_generic_stmt (dump_file, stmt, (1 << 1));
      fprintf (dump_file, "\n");
    }
  defs = get_def_ops (ann);
  uses = get_use_ops (ann);
  vuses = get_vuse_ops (ann);
  v_may_defs = get_v_may_def_ops (ann);
  v_must_defs = get_v_must_def_ops (ann);
  for (i = 0; i < ((uses) ? (uses)->num_uses : 0); i++)
    {
      use_p = get_use_op_ptr ((uses), (i));
      if (((names_to_rename)->elms [((get_use_from_ptr (use_p))->ssa_name.version) / ((unsigned) (8 * 4))] >> ((get_use_from_ptr (use_p))->ssa_name.version) % ((unsigned) (8 * 4)) & 1))
 ((*((use_p).use)) = (get_reaching_def (get_use_from_ptr (use_p))));
    }
  for (i = 0; i < ((vuses) ? (vuses)->num_vuses : 0); i++)
    {
      use_p = get_vuse_op_ptr ((vuses), (i));
      if (((names_to_rename)->elms [((get_use_from_ptr (use_p))->ssa_name.version) / ((unsigned) (8 * 4))] >> ((get_use_from_ptr (use_p))->ssa_name.version) % ((unsigned) (8 * 4)) & 1))
 ((*((use_p).use)) = (get_reaching_def (get_use_from_ptr (use_p))));
    }
  for (i = 0; i < ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0); i++)
    {
      use_p = get_v_may_def_op_ptr ((v_may_defs), (i));
      if (((names_to_rename)->elms [((get_use_from_ptr (use_p))->ssa_name.version) / ((unsigned) (8 * 4))] >> ((get_use_from_ptr (use_p))->ssa_name.version) % ((unsigned) (8 * 4)) & 1))
 ((*((use_p).use)) = (get_reaching_def (get_use_from_ptr (use_p))));
    }
  for (i = 0; i < ((defs) ? (defs)->num_defs : 0); i++)
    {
      def_p = get_def_op_ptr ((defs), (i));
      var = get_def_from_ptr (def_p);
      if (!((names_to_rename)->elms [((var)->ssa_name.version) / ((unsigned) (8 * 4))] >> ((var)->ssa_name.version) % ((unsigned) (8 * 4)) & 1))
 continue;
      ((*((def_p).def)) = (duplicate_ssa_name (var, stmt)));
      ssa_register_new_def (var, get_def_from_ptr (def_p), &bd->block_defs);
    }
  for (i = 0; i < ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0); i++)
    {
      def_p = get_v_may_def_result_ptr ((v_may_defs), (i));
      var = get_def_from_ptr (def_p);
      if (!((names_to_rename)->elms [((var)->ssa_name.version) / ((unsigned) (8 * 4))] >> ((var)->ssa_name.version) % ((unsigned) (8 * 4)) & 1))
 continue;
      ((*((def_p).def)) = (duplicate_ssa_name (var, stmt)));
      ssa_register_new_def (var, get_def_from_ptr (def_p), &bd->block_defs);
    }
  for (i = 0; i < ((v_must_defs) ? (v_must_defs)->num_v_must_defs : 0); i++)
    {
      def_p = get_v_must_def_op_ptr ((v_must_defs), (i));
      var = get_def_from_ptr (def_p);
      if (!((names_to_rename)->elms [((var)->ssa_name.version) / ((unsigned) (8 * 4))] >> ((var)->ssa_name.version) % ((unsigned) (8 * 4)) & 1))
 continue;
      ((*((def_p).def)) = (duplicate_ssa_name (var, stmt)));
      ssa_register_new_def (var, get_def_from_ptr (def_p), &bd->block_defs);
    }
}
static void
rewrite_operand (use_operand_p op_p)
{
  if (((enum tree_code) (get_use_from_ptr (op_p))->common.code) != SSA_NAME)
    ((*((op_p).use)) = (get_reaching_def (get_use_from_ptr (op_p))));
}
void
register_new_def (tree def, varray_type *block_defs_p)
{
  tree var = (def)->ssa_name.var;
  tree currdef;
  if (get_phi_state (var) == NEED_PHI_STATE_NO)
    {
      set_current_def (var, def);
      return;
    }
  currdef = get_current_def (var);
  if (! *block_defs_p)
    *block_defs_p = varray_init (20, VARRAY_DATA_TREE, "block_defs");
  do { if ((*block_defs_p)->elements_used >= (*block_defs_p)->num_elements) (((*block_defs_p)) = varray_grow ((*block_defs_p), 2 * (*block_defs_p)->num_elements)); (*block_defs_p)->data.tree1[(*block_defs_p)->elements_used++] = (currdef ? currdef : var); } while (0);
  set_current_def (var, def);
}
static tree
get_reaching_def (tree var)
{
  tree default_d, currdef_var, avar;
  default_d = (tree) ((void *)0);
  currdef_var = get_current_def (var);
  if (currdef_var == (tree) ((void *)0))
    {
      if (((enum tree_code) (var)->common.code) == SSA_NAME)
 avar = (var)->ssa_name.var;
      else
 avar = var;
      default_d = default_def (avar);
      if (default_d == (tree) ((void *)0))
 {
   default_d = make_ssa_name (avar, build_empty_stmt ());
   set_default_def (avar, default_d);
 }
      set_current_def (var, default_d);
    }
  return (currdef_var) ? currdef_var : default_d;
}
static hashval_t
def_blocks_hash (const void *p)
{
  return htab_hash_pointer
 ((const void *)((const struct def_blocks_d *)p)->var);
}
static int
def_blocks_eq (const void *p1, const void *p2)
{
  return ((const struct def_blocks_d *)p1)->var
  == ((const struct def_blocks_d *)p2)->var;
}
static void
def_blocks_free (void *p)
{
  struct def_blocks_d *entry = p;
  do { if (entry->def_blocks) { bitmap_clear (entry->def_blocks); free (entry->def_blocks); (entry->def_blocks) = 0; } } while (0);
  do { if (entry->phi_blocks) { bitmap_clear (entry->phi_blocks); free (entry->phi_blocks); (entry->phi_blocks) = 0; } } while (0);
  do { if (entry->livein_blocks) { bitmap_clear (entry->livein_blocks); free (entry->livein_blocks); (entry->livein_blocks) = 0; } } while (0);
  free (entry);
}
void
debug_def_blocks (void)
{
  htab_traverse (def_blocks, debug_def_blocks_r, ((void *)0));
}
static int
debug_def_blocks_r (void **slot, void *data )
{
  unsigned long i;
  struct def_blocks_d *db_p = (struct def_blocks_d *) *slot;
  fprintf (stderr, "VAR: ");
  print_generic_expr (stderr, db_p->var, dump_flags);
  fprintf (stderr, ", DEF_BLOCKS: { ");
  do { bitmap_element *ptr_ = (db_p->def_blocks)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (i) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); fprintf (stderr, "%ld ", i); if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
                                   ;
  fprintf (stderr, "}");
  fprintf (stderr, ", LIVEIN_BLOCKS: { ");
  do { bitmap_element *ptr_ = (db_p->livein_blocks)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (i) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); fprintf (stderr, "%ld ", i); if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
                                   ;
  fprintf (stderr, "}\n");
  return 1;
}
static struct def_blocks_d *
find_def_blocks_for (tree var)
{
  struct def_blocks_d dm;
  dm.var = var;
  return (struct def_blocks_d *) htab_find (def_blocks, &dm);
}
static struct def_blocks_d *
get_def_blocks_for (tree var)
{
  struct def_blocks_d db, *db_p;
  void **slot;
  db.var = var;
  slot = htab_find_slot (def_blocks, (void *) &db, INSERT);
  if (*slot == ((void *)0))
    {
      db_p = xmalloc (sizeof (*db_p));
      db_p->var = var;
      db_p->def_blocks = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
      db_p->phi_blocks = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
      db_p->livein_blocks = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
      *slot = (void *) db_p;
    }
  else
    db_p = (struct def_blocks_d *) *slot;
  return db_p;
}
static void
invalidate_name_tags (bitmap vars_to_rename)
{
  size_t i;
  unsigned char rename_name_tags_p;
  rename_name_tags_p = 0;
  do { bitmap_element *ptr_ = (vars_to_rename)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (i) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); if ((((enum tree_code) (((((referenced_vars)->data.tree1[i]))->common.type))->common.code) == POINTER_TYPE || ((enum tree_code) (((((referenced_vars)->data.tree1[i]))->common.type))->common.code) == REFERENCE_TYPE)) { rename_name_tags_p = 1; break; }; if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
   ;
  if (rename_name_tags_p)
    for (i = 0; i < ((referenced_vars)->elements_used); i++)
      {
 var_ann_t ann = var_ann (((referenced_vars)->data.tree1[i]));
 if (ann->mem_tag_kind == NAME_TAG)
   {
     size_t j;
     varray_type may_aliases = ann->may_aliases;
     bitmap_set_bit (vars_to_rename, ann->uid);
     if (ann->may_aliases)
       for (j = 0; j < ((may_aliases)->elements_used); j++)
  {
    tree var = ((may_aliases)->data.tree1[j]);
    bitmap_set_bit (vars_to_rename, var_ann (var)->uid);
  }
   }
      }
}
void
rewrite_into_ssa (unsigned char all)
{
  bitmap *dfs;
  basic_block bb;
  struct dom_walk_data walk_data;
  struct mark_def_sites_global_data mark_def_sites_global_data;
  bitmap old_vars_to_rename = vars_to_rename;
  unsigned i;
  timevar_push (TV_TREE_SSA_OTHER);
  if (all)
    vars_to_rename = ((void *)0);
  else
    {
      if (vars_to_rename == ((void *)0))
 fancy_abort ("gcc.c", 119712, "?");
      if (bitmap_first_set_bit (vars_to_rename) < 0)
 {
   timevar_pop (TV_TREE_SSA_OTHER);
   return;
 }
      invalidate_name_tags (vars_to_rename);
      remove_all_phi_nodes_for (vars_to_rename);
    }
  def_blocks = htab_create (((referenced_vars)->elements_used),
       def_blocks_hash, def_blocks_eq, def_blocks_free);
  dfs = (bitmap *) xmalloc (last_basic_block * sizeof (bitmap *));
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      edge e;
      int count = 0;
      for (e = bb->pred; e; e = e->pred_next)
 count++;
      bb_ann (bb)->num_preds = count;
      dfs[bb->index] = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
    }
  for (i = 0; i < ((referenced_vars)->elements_used); i++)
    set_current_def (((referenced_vars)->data.tree1[i]), (tree) ((void *)0));
  calculate_dominance_info (CDI_DOMINATORS);
  compute_dominance_frontiers (dfs);
  walk_data.walk_stmts_backward = 0;
  walk_data.dom_direction = CDI_DOMINATORS;
  walk_data.initialize_block_local_data = ((void *)0);
  walk_data.before_dom_children_before_stmts = mark_def_sites_initialize_block;
  walk_data.before_dom_children_walk_stmts = mark_def_sites;
  walk_data.before_dom_children_after_stmts = ((void *)0);
  walk_data.after_dom_children_before_stmts = ((void *)0);
  walk_data.after_dom_children_walk_stmts = ((void *)0);
  walk_data.after_dom_children_after_stmts = ((void *)0);
  mark_def_sites_global_data.kills = sbitmap_alloc (((referenced_vars)->elements_used));
  walk_data.global_data = &mark_def_sites_global_data;
  walk_data.block_local_data_size = 0;
  init_walk_dominator_tree (&walk_data);
  walk_dominator_tree (&walk_data, ENTRY_BLOCK_PTR);
  fini_walk_dominator_tree (&walk_data);
  free(mark_def_sites_global_data.kills);
  insert_phi_nodes (dfs, ((void *)0));
  timevar_push (TV_TREE_SSA_REWRITE_BLOCKS);
  walk_data.walk_stmts_backward = 0;
  walk_data.dom_direction = CDI_DOMINATORS;
  walk_data.initialize_block_local_data = rewrite_initialize_block_local_data;
  walk_data.before_dom_children_before_stmts = rewrite_initialize_block;
  walk_data.before_dom_children_walk_stmts = rewrite_stmt;
  walk_data.before_dom_children_after_stmts = rewrite_add_phi_arguments;
  walk_data.after_dom_children_before_stmts = ((void *)0);
  walk_data.after_dom_children_walk_stmts = ((void *)0);
  walk_data.after_dom_children_after_stmts = rewrite_finalize_block;
  walk_data.global_data = ((void *)0);
  walk_data.block_local_data_size = sizeof (struct rewrite_block_data);
  init_walk_dominator_tree (&walk_data);
  walk_dominator_tree (&walk_data, ENTRY_BLOCK_PTR);
  fini_walk_dominator_tree (&walk_data);
  timevar_pop (TV_TREE_SSA_REWRITE_BLOCKS);
  if (dump_file && (dump_flags & (1 << 4)))
    {
      dump_dfa_stats (dump_file);
      dump_tree_ssa_stats (dump_file);
    }
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    do { if (dfs[bb->index]) { bitmap_clear (dfs[bb->index]); free (dfs[bb->index]); (dfs[bb->index]) = 0; } } while (0);
  free (dfs);
  htab_delete (def_blocks);
  vars_to_rename = old_vars_to_rename;
  timevar_pop (TV_TREE_SSA_OTHER);
}
void
rewrite_ssa_into_ssa (bitmap names_to_rename)
{
  bitmap *dfs;
  basic_block bb;
  struct dom_walk_data walk_data;
  struct mark_def_sites_global_data mark_def_sites_global_data;
  unsigned i;
  sbitmap snames_to_rename;
  tree name;
  if (bitmap_first_set_bit (names_to_rename) < 0)
    return;
  timevar_push (TV_TREE_SSA_OTHER);
  def_blocks = htab_create (((ssa_names)->elements_used),
       def_blocks_hash, def_blocks_eq, def_blocks_free);
  dfs = (bitmap *) xmalloc (last_basic_block * sizeof (bitmap *));
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      edge e;
      int count = 0;
      for (e = bb->pred; e; e = e->pred_next)
 count++;
      bb_ann (bb)->num_preds = count;
      dfs[bb->index] = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
    }
  calculate_dominance_info (CDI_DOMINATORS);
  compute_dominance_frontiers (dfs);
  walk_data.walk_stmts_backward = 0;
  walk_data.dom_direction = CDI_DOMINATORS;
  walk_data.initialize_block_local_data = ((void *)0);
  walk_data.before_dom_children_before_stmts
   = ssa_mark_def_sites_initialize_block;
  walk_data.before_dom_children_walk_stmts = ssa_mark_def_sites;
  walk_data.before_dom_children_after_stmts = ssa_mark_phi_uses;
  walk_data.after_dom_children_before_stmts = ((void *)0);
  walk_data.after_dom_children_walk_stmts = ((void *)0);
  walk_data.after_dom_children_after_stmts = ((void *)0);
  snames_to_rename = sbitmap_alloc (((ssa_names)->elements_used));
  sbitmap_zero (snames_to_rename);
  do { bitmap_element *ptr_ = (names_to_rename)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (i) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); ((snames_to_rename)->elms [(i) / ((unsigned) (8 * 4))] |= (unsigned long) 1 << (i) % ((unsigned) (8 * 4))); if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
                                     ;
  mark_def_sites_global_data.kills = sbitmap_alloc (((ssa_names)->elements_used));
  mark_def_sites_global_data.names_to_rename = snames_to_rename;
  walk_data.global_data = &mark_def_sites_global_data;
  walk_data.block_local_data_size = 0;
  init_walk_dominator_tree (&walk_data);
  walk_dominator_tree (&walk_data, ENTRY_BLOCK_PTR);
  fini_walk_dominator_tree (&walk_data);
  free(mark_def_sites_global_data.kills);
  for (i = 0; i < ((ssa_names)->elements_used); i++)
    if (((ssa_names)->data.tree1[i]))
      set_current_def (((ssa_names)->data.tree1[i]), (tree) ((void *)0));
  insert_phi_nodes (dfs, names_to_rename);
  timevar_push (TV_TREE_SSA_REWRITE_BLOCKS);
  walk_data.walk_stmts_backward = 0;
  walk_data.dom_direction = CDI_DOMINATORS;
  walk_data.initialize_block_local_data
   = rewrite_initialize_block_local_data;
  walk_data.before_dom_children_before_stmts = ssa_rewrite_initialize_block;
  walk_data.before_dom_children_walk_stmts = ssa_rewrite_stmt;
  walk_data.before_dom_children_after_stmts = ssa_rewrite_phi_arguments;
  walk_data.after_dom_children_before_stmts = ((void *)0);
  walk_data.after_dom_children_walk_stmts = ((void *)0);
  walk_data.after_dom_children_after_stmts = ssa_rewrite_finalize_block;
  walk_data.global_data = snames_to_rename;
  walk_data.block_local_data_size = sizeof (struct rewrite_block_data);
  init_walk_dominator_tree (&walk_data);
  walk_dominator_tree (&walk_data, ENTRY_BLOCK_PTR);
  fini_walk_dominator_tree (&walk_data);
  free(snames_to_rename);
  timevar_pop (TV_TREE_SSA_REWRITE_BLOCKS);
  if (dump_file && (dump_flags & (1 << 4)))
    {
      dump_dfa_stats (dump_file);
      dump_tree_ssa_stats (dump_file);
    }
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    do { if (dfs[bb->index]) { bitmap_clear (dfs[bb->index]); free (dfs[bb->index]); (dfs[bb->index]) = 0; } } while (0);
  free (dfs);
  htab_delete (def_blocks);
  for (i = 0; i < ((ssa_names)->elements_used); i++)
    {
      name = ((ssa_names)->data.tree1[i]);
      if (!name
   || !(name)->ssa_name.aux)
 continue;
      free ((name)->ssa_name.aux);
      (name)->ssa_name.aux = ((void *)0);
    }
  timevar_pop (TV_TREE_SSA_OTHER);
}
static void
rewrite_all_into_ssa (void)
{
  rewrite_into_ssa (1);
}
struct tree_opt_pass pass_build_ssa =
{
  "ssa",
  ((void *)0),
  rewrite_all_into_ssa,
  ((void *)0),
  ((void *)0),
  0,
  0,
  (1 << 3) | (1 << 4),
  (1 << 6),
  0,
  0,
  (1 << 0) | (1 << 3)
};
typedef struct _var_map
{
  partition var_partition;
  int *partition_to_compact;
  int *compact_to_partition;
  tree *partition_to_var;
  unsigned int num_partitions;
  unsigned int partition_size;
  int *ref_count;
} *var_map;
extern var_map init_var_map (int);
extern void delete_var_map (var_map);
extern void dump_var_map (FILE *, var_map);
extern int var_union (var_map, tree, tree);
extern void change_partition_var (var_map, tree, int);
extern void compact_var_map (var_map, int);
extern void remove_ssa_form (FILE *, var_map, int);
extern void register_ssa_partitions_for_vars (bitmap vars, var_map map);
extern tree make_ssa_temp (tree);
static int num_var_partitions (var_map);
static tree var_to_partition_to_var (var_map, tree);
static tree partition_to_var (var_map, int);
static int var_to_partition (var_map, tree);
static tree version_to_var (var_map, int);
static int version_ref_count (var_map, tree);
static void register_ssa_partition (var_map, tree, unsigned char);
extern var_map create_ssa_var_map (int);
static int
num_var_partitions (var_map map)
{
  return map->num_partitions;
}
static int
version_ref_count (var_map map, tree ssa_var)
{
  int version = (ssa_var)->ssa_name.version;
  return map->ref_count[version];
}
static tree
partition_to_var (var_map map, int i)
{
  if (map->compact_to_partition)
    i = map->compact_to_partition[i];
  i = ((map->var_partition)->elements[(i)].class_element);
  return map->partition_to_var[i];
}
static tree version_to_var (var_map map, int version)
{
  int part;
  part = ((map->var_partition)->elements[(version)].class_element);
  if (map->partition_to_compact)
    part = map->partition_to_compact[part];
  if (part == -1)
    return (tree) ((void *)0);
  return partition_to_var (map, part);
}
static int
var_to_partition (var_map map, tree var)
{
  var_ann_t ann;
  int part;
  if (((enum tree_code) (var)->common.code) == SSA_NAME)
    {
      part = ((map->var_partition)->elements[((var)->ssa_name.version)].class_element);
      if (map->partition_to_compact)
 part = map->partition_to_compact[part];
    }
  else
    {
      ann = var_ann (var);
      if (ann->out_of_ssa_tag)
 part = (ann->partition1);
      else
        part = -1;
    }
  return part;
}
static tree
var_to_partition_to_var (var_map map, tree var)
{
  int part;
  part = var_to_partition (map, var);
  if (part == -1)
    return (tree) ((void *)0);
  return partition_to_var (map, part);
}
static void
register_ssa_partition (var_map map, tree ssa_var, unsigned char is_use)
{
  int version;
  version = (ssa_var)->ssa_name.version;
  if (is_use && map->ref_count)
    map->ref_count[version]++;
  if (map->partition_to_var[version] == (tree) ((void *)0))
    map->partition_to_var[(ssa_var)->ssa_name.version] = ssa_var;
}
typedef struct tree_live_info_d
{
  var_map map;
  bitmap global;
  bitmap *livein;
  int num_blocks;
  bitmap *liveout;
} *tree_live_info_p;
extern tree_live_info_p calculate_live_on_entry (var_map);
extern void calculate_live_on_exit (tree_live_info_p);
extern void delete_tree_live_info (tree_live_info_p);
extern void dump_live_info (FILE *, tree_live_info_p, int);
static int partition_is_global (tree_live_info_p, int);
static bitmap live_entry_blocks (tree_live_info_p, int);
static bitmap live_on_exit (tree_live_info_p, basic_block);
static var_map live_var_map (tree_live_info_p);
static void live_merge_and_clear (tree_live_info_p, int, int);
static void make_live_on_entry (tree_live_info_p, basic_block, int);
static int
partition_is_global (tree_live_info_p live, int p)
{
  if (!live->global)
    fancy_abort ("gcc.c", 120315, "?");
  return bitmap_bit_p (live->global, p);
}
static bitmap
live_entry_blocks (tree_live_info_p live, int p)
{
  if (!live->livein)
    fancy_abort ("gcc.c", 120328, "?");
  return live->livein[p];
}
static bitmap
live_on_exit (tree_live_info_p live, basic_block bb)
{
  if (!live->liveout)
    fancy_abort ("gcc.c", 120341, "?");
  if (bb == ENTRY_BLOCK_PTR || bb == EXIT_BLOCK_PTR)
    fancy_abort ("gcc.c", 120344, "?");
  return live->liveout[bb->index];
}
static var_map
live_var_map (tree_live_info_p live)
{
  return live->map;
}
static void
live_merge_and_clear (tree_live_info_p live, int p1, int p2)
{
  bitmap_operation (live->livein[p1], live->livein[p1], live->livein[p2], BITMAP_IOR);
  bitmap_clear (live->livein[p2]);
}
static void
make_live_on_entry (tree_live_info_p live, basic_block bb , int p)
{
  bitmap_set_bit (live->livein[p], bb->index);
  bitmap_set_bit (live->global, p);
}
typedef struct tree_partition_associator_d
{
  varray_type trees;
  varray_type first_partition;
  int *next_partition;
  int *partition_to_tree_map;
  int num_trees;
  int uncompressed_num;
  var_map map;
} *tpa_p;
static tree tpa_tree (tpa_p, int);
static int tpa_first_partition (tpa_p, int);
static int tpa_next_partition (tpa_p, int);
static int tpa_num_trees (tpa_p);
static int tpa_find_tree (tpa_p, int);
static void tpa_decompact (tpa_p);
extern tpa_p tpa_init (var_map);
extern void tpa_delete (tpa_p);
extern void tpa_dump (FILE *, tpa_p);
extern void tpa_remove_partition (tpa_p, int, int);
extern int tpa_compact (tpa_p);
static int
tpa_num_trees (tpa_p tpa)
{
  return tpa->num_trees;
}
static tree
tpa_tree (tpa_p tpa, int i)
{
  return ((tpa->trees)->data.tree1[i]);
}
static int
tpa_first_partition (tpa_p tpa, int i)
{
  return ((tpa->first_partition)->data.i[i]);
}
static int
tpa_next_partition (tpa_p tpa, int i)
{
  return tpa->next_partition[i];
}
static int
tpa_find_tree (tpa_p tpa, int i)
{
  int index;
  index = tpa->partition_to_tree_map[i];
  if (index != -1 && index >= tpa_num_trees (tpa))
    {
      index = -1;
    }
  return index;
}
static void
tpa_decompact(tpa_p tpa)
{
  tpa->num_trees = tpa->uncompressed_num;
}
typedef tpa_p root_var_p;
static tree root_var (root_var_p, int);
static int root_var_first_partition (root_var_p, int);
static int root_var_next_partition (root_var_p, int);
static int root_var_num (root_var_p);
static void root_var_dump (FILE *, root_var_p);
static void root_var_remove_partition (root_var_p, int, int);
static void root_var_delete (root_var_p);
static int root_var_find (root_var_p, int);
static int root_var_compact (root_var_p);
static void root_var_decompact (tpa_p);
extern root_var_p root_var_init (var_map);
static int
root_var_num (root_var_p rv)
{
  return tpa_num_trees (rv);
}
static tree
root_var (root_var_p rv, int i)
{
  return tpa_tree (rv, i);
}
static int
root_var_first_partition (root_var_p rv, int i)
{
  return tpa_first_partition (rv, i);
}
static int
root_var_next_partition (root_var_p rv, int i)
{
  return tpa_next_partition (rv, i);
}
static void
root_var_dump (FILE *f, root_var_p rv)
{
  fprintf (f, "\nRoot Var dump\n");
  tpa_dump (f, rv);
  fprintf (f, "\n");
}
static void
root_var_delete (root_var_p rv)
{
  tpa_delete (rv);
}
static void
root_var_remove_partition (root_var_p rv, int root_index, int partition_index)
{
  tpa_remove_partition (rv, root_index, partition_index);
}
static int
root_var_find (root_var_p rv, int i)
{
  return tpa_find_tree (rv, i);
}
static int
root_var_compact (root_var_p rv)
{
  return tpa_compact (rv);
}
static void
root_var_decompact (root_var_p rv)
{
  tpa_decompact (rv);
}
typedef tpa_p type_var_p;
static tree type_var (type_var_p, int);
static int type_var_first_partition (type_var_p, int);
static int type_var_next_partition (type_var_p, int);
static int type_var_num (type_var_p);
static void type_var_dump (FILE *, type_var_p);
static void type_var_remove_partition (type_var_p, int, int);
static void type_var_delete (type_var_p);
static int type_var_find (type_var_p, int);
static int type_var_compact (type_var_p);
static void type_var_decompact (type_var_p);
extern type_var_p type_var_init (var_map);
static int
type_var_num (type_var_p tv)
{
  return tpa_num_trees (tv);
}
static tree
type_var (type_var_p tv, int i)
{
  return tpa_tree (tv, i);
}
static int
type_var_first_partition (type_var_p tv, int i)
{
  return tpa_first_partition (tv, i);
}
static int
type_var_next_partition (type_var_p tv, int i)
{
  return tpa_next_partition (tv, i);
}
static void
type_var_dump (FILE *f, type_var_p tv)
{
  fprintf (f, "\nType Var dump\n");
  tpa_dump (f, tv);
  fprintf (f, "\n");
}
static void
type_var_delete (type_var_p tv)
{
  tpa_delete (tv);
}
static void
type_var_remove_partition (type_var_p tv, int type_index, int partition_index)
{
  tpa_remove_partition (tv, type_index, partition_index);
}
static int
type_var_find (type_var_p tv, int i)
{
  return tpa_find_tree (tv, i);
}
static int
type_var_compact (type_var_p tv)
{
  return tpa_compact (tv);
}
static void
type_var_decompact (type_var_p tv)
{
  tpa_decompact (tv);
}
typedef struct partition_pair_d
{
  int first_partition;
  int second_partition;
  int cost;
  struct partition_pair_d *next;
} *partition_pair_p;
typedef struct coalesce_list_d
{
  var_map map;
  partition_pair_p *list;
  unsigned char add_mode;
} *coalesce_list_p;
extern coalesce_list_p create_coalesce_list (var_map);
extern void add_coalesce (coalesce_list_p, int, int, int);
extern void sort_coalesce_list (coalesce_list_p);
extern void dump_coalesce_list (FILE *, coalesce_list_p);
extern void delete_coalesce_list (coalesce_list_p);
extern int pop_best_coalesce (coalesce_list_p, int *, int *);
extern conflict_graph build_tree_conflict_graph (tree_live_info_p, tpa_p,
       coalesce_list_p);
extern void coalesce_tpa_members (tpa_p tpa, conflict_graph graph, var_map map,
      coalesce_list_p cl, FILE *);
typedef struct _elim_graph {
  int size;
  varray_type nodes;
  varray_type edge_list;
  sbitmap visited;
  varray_type stack;
  var_map map;
  edge e;
  varray_type const_copies;
} *elim_graph;
static tree create_temp (tree);
static void insert_copy_on_edge (edge, tree, tree);
static elim_graph new_elim_graph (int);
static void delete_elim_graph (elim_graph);
static void clear_elim_graph (elim_graph);
static int elim_graph_size (elim_graph);
static void elim_graph_add_node (elim_graph, tree);
static void elim_graph_add_edge (elim_graph, int, int);
static int elim_graph_remove_succ_edge (elim_graph, int);
static void eliminate_name (elim_graph, tree);
static void eliminate_build (elim_graph, basic_block, int);
static void elim_forward (elim_graph, int);
static int elim_unvisited_predecessor (elim_graph, int);
static void elim_backward (elim_graph, int);
static void elim_create (elim_graph, int);
static void eliminate_phi (edge, int, elim_graph);
static tree_live_info_p coalesce_ssa_name (var_map, int);
static void assign_vars (var_map);
static unsigned char replace_use_variable (var_map, use_operand_p, tree *);
static unsigned char replace_def_variable (var_map, def_operand_p, tree *);
static void eliminate_virtual_phis (void);
static void coalesce_abnormal_edges (var_map, conflict_graph, root_var_p);
static void print_exprs (FILE *, const char *, tree, const char *, tree,
    const char *);
static void print_exprs_edge (FILE *, edge, const char *, tree, const char *,
         tree);
static tree
create_temp (tree t)
{
  tree tmp;
  const char *name = ((void *)0);
  tree type;
  if (((enum tree_code) (t)->common.code) == SSA_NAME)
    t = (t)->ssa_name.var;
  if (((enum tree_code) (t)->common.code) != VAR_DECL
      && ((enum tree_code) (t)->common.code) != PARM_DECL)
    fancy_abort ("gcc.c", 120872, "?");
  type = ((t)->common.type);
  tmp = ((t)->decl.name);
  if (tmp)
    name = ((const char *) (tmp)->identifier.id.str);
  if (name == ((void *)0))
    name = "temp";
  tmp = create_tmp_var (type, name);
  ((tmp)->decl.artificial_flag) = ((t)->decl.artificial_flag);
  add_referenced_tmp_var (tmp);
  var_ann (tmp)->type_mem_tag = var_ann (t)->type_mem_tag;
  if (is_call_clobbered (t))
    mark_call_clobbered (tmp);
  return tmp;
}
static void
insert_copy_on_edge (edge e, tree dest, tree src)
{
  tree copy;
  copy = build (MODIFY_EXPR, ((dest)->common.type), dest, src);
  set_is_used (dest);
  if (((enum tree_code) (src)->common.code) == ADDR_EXPR)
    src = ((src)->exp.operands[0]);
  if (((enum tree_code) (src)->common.code) == VAR_DECL || ((enum tree_code) (src)->common.code) == PARM_DECL)
    set_is_used (src);
  if (dump_file && (dump_flags & (1 << 3)))
    {
      fprintf (dump_file,
        "Inserting a copy on edge BB%d->BB%d :",
        e->src->index,
        e->dest->index);
      print_generic_expr (dump_file, copy, dump_flags);
      fprintf (dump_file, "\n");
    }
  bsi_insert_on_edge (e, copy);
}
static elim_graph
new_elim_graph (int size)
{
  elim_graph g = (elim_graph) xmalloc (sizeof (struct _elim_graph));
  g->nodes = varray_init (30, VARRAY_DATA_TREE, "Elimination Node List");
  g->const_copies = varray_init (20, VARRAY_DATA_TREE, "Elimination Constant Copies");
  g->edge_list = varray_init (20, VARRAY_DATA_I, "Elimination Edge List");
  g->stack = varray_init (30, VARRAY_DATA_I, " Elimination Stack");
  g->visited = sbitmap_alloc (size);
  return g;
}
static void
clear_elim_graph (elim_graph g)
{
  ((g->nodes)->elements_used = 0);
  ((g->edge_list)->elements_used = 0);
}
static void
delete_elim_graph (elim_graph g)
{
  free(g->visited);
  free (g);
}
static int
elim_graph_size (elim_graph g)
{
  return ((g->nodes)->elements_used);
}
static void
elim_graph_add_node (elim_graph g, tree node)
{
  int x;
  for (x = 0; x < elim_graph_size (g); x++)
    if (((g->nodes)->data.tree1[x]) == node)
      return;
  do { if ((g->nodes)->elements_used >= (g->nodes)->num_elements) (((g->nodes)) = varray_grow ((g->nodes), 2 * (g->nodes)->num_elements)); (g->nodes)->data.tree1[(g->nodes)->elements_used++] = (node); } while (0);
}
static void
elim_graph_add_edge (elim_graph g, int pred, int succ)
{
  do { if ((g->edge_list)->elements_used >= (g->edge_list)->num_elements) (((g->edge_list)) = varray_grow ((g->edge_list), 2 * (g->edge_list)->num_elements)); (g->edge_list)->data.i[(g->edge_list)->elements_used++] = (pred); } while (0);
  do { if ((g->edge_list)->elements_used >= (g->edge_list)->num_elements) (((g->edge_list)) = varray_grow ((g->edge_list), 2 * (g->edge_list)->num_elements)); (g->edge_list)->data.i[(g->edge_list)->elements_used++] = (succ); } while (0);
}
static int
elim_graph_remove_succ_edge (elim_graph g, int node)
{
  int y;
  unsigned x;
  for (x = 0; x < ((g->edge_list)->elements_used); x += 2)
    if (((g->edge_list)->data.i[x]) == node)
      {
        ((g->edge_list)->data.i[x]) = -1;
 y = ((g->edge_list)->data.i[x + 1]);
 ((g->edge_list)->data.i[x + 1]) = -1;
 return y;
      }
  return -1;
}
static void
eliminate_name (elim_graph g, tree T)
{
  elim_graph_add_node (g, T);
}
static void
eliminate_build (elim_graph g, basic_block B, int i)
{
  tree phi;
  tree T0, Ti;
  int p0, pi;
  clear_elim_graph (g);
  for (phi = phi_nodes (B); phi; phi = (((phi))->common.chain))
    {
      T0 = var_to_partition_to_var (g->map, get_def_from_ptr (get_phi_result_ptr (phi)));
      if (T0 == (tree) ((void *)0))
 continue;
      if (((phi)->phi.a[i]).e == g->e)
 Ti = get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((i))));
      else
        {
   pi = phi_arg_from_edge (phi, g->e);
   if (pi == -1)
     fancy_abort ("gcc.c", 121092, "?");
   Ti = get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((pi))));
 }
      if (!phi_ssa_name_p (Ti)
   || (((enum tree_code) (Ti)->common.code) == SSA_NAME
       && var_to_partition (g->map, Ti) == -1))
        {
   do { if ((g->const_copies)->elements_used >= (g->const_copies)->num_elements) (((g->const_copies)) = varray_grow ((g->const_copies), 2 * (g->const_copies)->num_elements)); (g->const_copies)->data.tree1[(g->const_copies)->elements_used++] = (T0); } while (0);
   do { if ((g->const_copies)->elements_used >= (g->const_copies)->num_elements) (((g->const_copies)) = varray_grow ((g->const_copies), 2 * (g->const_copies)->num_elements)); (g->const_copies)->data.tree1[(g->const_copies)->elements_used++] = (Ti); } while (0);
 }
      else
        {
   Ti = var_to_partition_to_var (g->map, Ti);
   if (T0 != Ti)
     {
       eliminate_name (g, T0);
       eliminate_name (g, Ti);
       p0 = var_to_partition (g->map, T0);
       pi = var_to_partition (g->map, Ti);
       elim_graph_add_edge (g, p0, pi);
     }
 }
    }
}
static void
elim_forward (elim_graph g, int T)
{
  int S;
  ((g->visited)->elms [(T) / ((unsigned) (8 * 4))] |= (unsigned long) 1 << (T) % ((unsigned) (8 * 4)));
  do { unsigned x_; int y_; for (x_ = 0; x_ < (((g)->edge_list)->elements_used); x_ += 2) { y_ = (((g)->edge_list)->data.i[x_]); if (y_ != (T)) continue; (S) = (((g)->edge_list)->data.i[x_ + 1]); { if (!((g->visited)->elms [(S) / ((unsigned) (8 * 4))] >> (S) % ((unsigned) (8 * 4)) & 1)) elim_forward (g, S); }; } } while (0)
      ;
  do { if ((g->stack)->elements_used >= (g->stack)->num_elements) (((g->stack)) = varray_grow ((g->stack), 2 * (g->stack)->num_elements)); (g->stack)->data.i[(g->stack)->elements_used++] = (T); } while (0);
}
static int
elim_unvisited_predecessor (elim_graph g, int T)
{
  int P;
  do { unsigned x_; int y_; for (x_ = 0; x_ < (((g)->edge_list)->elements_used); x_ += 2) { y_ = (((g)->edge_list)->data.i[x_ + 1]); if (y_ != (T)) continue; (P) = (((g)->edge_list)->data.i[x_]); { if (!((g->visited)->elms [(P) / ((unsigned) (8 * 4))] >> (P) % ((unsigned) (8 * 4)) & 1)) return 1; }; } } while (0)
      ;
  return 0;
}
static void
elim_backward (elim_graph g, int T)
{
  int P;
  ((g->visited)->elms [(T) / ((unsigned) (8 * 4))] |= (unsigned long) 1 << (T) % ((unsigned) (8 * 4)));
  do { unsigned x_; int y_; for (x_ = 0; x_ < (((g)->edge_list)->elements_used); x_ += 2) { y_ = (((g)->edge_list)->data.i[x_ + 1]); if (y_ != (T)) continue; (P) = (((g)->edge_list)->data.i[x_]); { if (!((g->visited)->elms [(P) / ((unsigned) (8 * 4))] >> (P) % ((unsigned) (8 * 4)) & 1)) { elim_backward (g, P); insert_copy_on_edge (g->e, partition_to_var (g->map, P), partition_to_var (g->map, T)); } }; } } while (0)
      ;
}
static void
elim_create (elim_graph g, int T)
{
  tree U;
  int P, S;
  if (elim_unvisited_predecessor (g, T))
    {
      U = create_temp (partition_to_var (g->map, T));
      insert_copy_on_edge (g->e, U, partition_to_var (g->map, T));
      do { unsigned x_; int y_; for (x_ = 0; x_ < (((g)->edge_list)->elements_used); x_ += 2) { y_ = (((g)->edge_list)->data.i[x_ + 1]); if (y_ != (T)) continue; (P) = (((g)->edge_list)->data.i[x_]); { if (!((g->visited)->elms [(P) / ((unsigned) (8 * 4))] >> (P) % ((unsigned) (8 * 4)) & 1)) { elim_backward (g, P); insert_copy_on_edge (g->e, partition_to_var (g->map, P), U); } }; } } while (0)
   ;
    }
  else
    {
      S = elim_graph_remove_succ_edge (g, T);
      if (S != -1)
 {
   ((g->visited)->elms [(T) / ((unsigned) (8 * 4))] |= (unsigned long) 1 << (T) % ((unsigned) (8 * 4)));
   insert_copy_on_edge (g->e,
          partition_to_var (g->map, T),
          partition_to_var (g->map, S));
 }
    }
}
static void
eliminate_phi (edge e, int i, elim_graph g)
{
  int num_nodes = 0;
  int x;
  basic_block B = e->dest;
  if (e->flags & 2)
    return;
  num_nodes = num_var_partitions (g->map);
  g->e = e;
  eliminate_build (g, B, i);
  if (elim_graph_size (g) != 0)
    {
      sbitmap_zero (g->visited);
      ((g->stack)->elements_used = 0);
      for (x = 0; x < elim_graph_size (g); x++)
        {
   tree var = ((g->nodes)->data.tree1[x]);
   int p = var_to_partition (g->map, var);
   if (!((g->visited)->elms [(p) / ((unsigned) (8 * 4))] >> (p) % ((unsigned) (8 * 4)) & 1))
     elim_forward (g, p);
 }
      sbitmap_zero (g->visited);
      while (((g->stack)->elements_used) > 0)
 {
   x = ((g->stack)->data.i[(g->stack)->elements_used - 1]);
   do { ((g->stack)->elements_used--); } while (0);
   if (!((g->visited)->elms [(x) / ((unsigned) (8 * 4))] >> (x) % ((unsigned) (8 * 4)) & 1))
     elim_create (g, x);
 }
    }
  while (((g->const_copies)->elements_used) > 0)
    {
      tree src, dest;
      src = ((g->const_copies)->data.tree1[(g->const_copies)->elements_used - 1]);
      do { ((g->const_copies)->elements_used--); } while (0);
      dest = ((g->const_copies)->data.tree1[(g->const_copies)->elements_used - 1]);
      do { ((g->const_copies)->elements_used--); } while (0);
      insert_copy_on_edge (e, dest, src);
    }
}
static void
print_exprs (FILE *f, const char *str1, tree expr1, const char *str2,
      tree expr2, const char *str3)
{
  fprintf (f, "%s", str1);
  print_generic_expr (f, expr1, (1 << 1));
  fprintf (f, "%s", str2);
  print_generic_expr (f, expr2, (1 << 1));
  fprintf (f, "%s", str3);
}
static void
print_exprs_edge (FILE *f, edge e, const char *str1, tree expr1,
    const char *str2, tree expr2)
{
  print_exprs (f, str1, expr1, str2, expr2, " across an abnormal edge");
  fprintf (f, " from BB%d->BB%d\n", e->src->index,
        e->dest->index);
}
static void
coalesce_abnormal_edges (var_map map, conflict_graph graph, root_var_p rv)
{
  basic_block bb;
  edge e;
  tree phi, var, tmp;
  int x, y;
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    for (e = bb->succ; e; e = e->succ_next)
      if (e->dest != EXIT_BLOCK_PTR && e->flags & 2)
 for (phi = phi_nodes (e->dest); phi; phi = (((phi))->common.chain))
   {
     var = get_def_from_ptr (get_phi_result_ptr (phi));
     x = var_to_partition (map, var);
     if (x == -1)
       continue;
     y = phi_arg_from_edge (phi, e);
     if (y == -1)
       fancy_abort ("gcc.c", 121333, "?");
     tmp = get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((y))));
     if (!phi_ssa_name_p (tmp))
       {
         print_exprs_edge (stderr, e,
      "\nConstant argument in PHI. Can't insert :",
      var, " = ", tmp);
  fancy_abort ("gcc.c", 121341, "?");
       }
     y = var_to_partition (map, tmp);
     if (x == -1 || y == -1)
       fancy_abort ("gcc.c", 121345, "?");
     if (root_var_find (rv, x) != root_var_find (rv, y))
       {
  print_exprs_edge (stderr, e, "\nDifferent root vars: ",
      root_var (rv, root_var_find (rv, x)),
      " and ",
      root_var (rv, root_var_find (rv, y)));
  fancy_abort ("gcc.c", 121352, "?");
       }
     if (x != y)
       {
  if (!conflict_graph_conflict_p (graph, x, y))
    {
      var = partition_to_var (map, x);
      tmp = partition_to_var (map, y);
      if (dump_file
   && (dump_flags & (1 << 3)))
        {
   print_exprs_edge (dump_file, e,
       "ABNORMAL: Coalescing ",
       var, " and ", tmp);
        }
      if (var_union (map, var, tmp) == -1)
        {
   print_exprs_edge (stderr, e, "\nUnable to coalesce",
       partition_to_var (map, x), " and ",
       partition_to_var (map, y));
   fancy_abort ("gcc.c", 121374, "?");
        }
      conflict_graph_merge_regs (graph, x, y);
    }
  else
    {
      print_exprs_edge (stderr, e, "\n Conflict ",
          partition_to_var (map, x),
          " and ", partition_to_var (map, y));
      fancy_abort ("gcc.c", 121383, "?");
    }
       }
   }
}
static tree_live_info_p
coalesce_ssa_name (var_map map, int flags)
{
  int num, x, i;
  sbitmap live;
  tree var, phi;
  root_var_p rv;
  tree_live_info_p liveinfo;
  var_ann_t ann;
  conflict_graph graph;
  basic_block bb;
  coalesce_list_p cl = ((void *)0);
  if (num_var_partitions (map) <= 1)
    return ((void *)0);
  if ((flags & (0x8 | 0x10)) == 0)
    flags |= 0x8;
  liveinfo = calculate_live_on_entry (map);
  calculate_live_on_exit (liveinfo);
  rv = root_var_init (map);
  root_var_compact (rv);
  if (flags & 0x10)
    {
      cl = create_coalesce_list (map);
      for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
 {
   for (phi = phi_nodes (bb); phi; phi = (((phi))->common.chain))
     {
       tree res = get_def_from_ptr (get_phi_result_ptr (phi));
       int p = var_to_partition (map, res);
       if (p == -1)
  continue;
       for (x = 0; x < (phi)->phi.num_args; x++)
  {
    tree arg = get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((x))));
    int p2;
    if (((enum tree_code) (arg)->common.code) != SSA_NAME)
      continue;
    if ((res)->ssa_name.var != (arg)->ssa_name.var)
      continue;
    p2 = var_to_partition (map, get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((x)))));
    if (p2 != -1)
      add_coalesce (cl, p, p2, 1);
  }
     }
 }
      var = (tree) ((void *)0);
      i = 0;
      for (x = 0; x < num_var_partitions (map); x++)
 {
   tree p = partition_to_var (map, x);
   if (((enum tree_code) ((p)->ssa_name.var)->common.code) == RESULT_DECL)
     {
       if (var == (tree) ((void *)0))
  {
    var = p;
    i = x;
  }
       else
  add_coalesce (cl, i, x, 1);
     }
 }
    }
  graph = build_tree_conflict_graph (liveinfo, rv, cl);
  if (cl)
    {
      if (dump_file && (dump_flags & (1 << 3)))
 {
   fprintf (dump_file, "Before sorting:\n");
   dump_coalesce_list (dump_file, cl);
 }
      sort_coalesce_list (cl);
      if (dump_file && (dump_flags & (1 << 3)))
 {
   fprintf (dump_file, "\nAfter sorting:\n");
   dump_coalesce_list (dump_file, cl);
 }
    }
  root_var_decompact (rv);
  live = sbitmap_alloc (num_var_partitions (map));
  sbitmap_zero (live);
  num = num_var_partitions (map);
  for (x = 0 ; x < num; x++)
    {
      var = partition_to_var (map, x);
      if (default_def ((var)->ssa_name.var) == var)
 ((live)->elms [(x) / ((unsigned) (8 * 4))] |= (unsigned long) 1 << (x) % ((unsigned) (8 * 4)));
    }
  if ((flags & 0x2) == 0)
    {
      delete_tree_live_info (liveinfo);
      liveinfo = ((void *)0);
    }
  do { unsigned int word_num_; unsigned int bit_num_ = (0) % (unsigned int) ((unsigned) (8 * 4)); unsigned int size_ = (live)->size; unsigned long *ptr_ = (live)->elms; for (word_num_ = (0) / (unsigned int) ((unsigned) (8 * 4)); word_num_ < size_; word_num_++, bit_num_ = 0) { unsigned long word_ = ptr_[word_num_]; if (word_ != 0) for (; bit_num_ < ((unsigned) (8 * 4)); bit_num_++) { unsigned long _mask = (unsigned long) 1 << bit_num_; if ((word_ & _mask) != 0) { word_ &= ~ _mask; (x) = word_num_ * ((unsigned) (8 * 4)) + bit_num_; { var = root_var (rv, root_var_find (rv, x)); ann = var_ann (var); if (partition_to_var (map, x) != var) { if (ann->out_of_ssa_tag) { fancy_abort ("gcc.c", 121540, "?"); } if (dump_file && (dump_flags & (1 << 3))) { print_exprs (dump_file, "Must coalesce ", partition_to_var (map, x), " with the root variable ", var, ".\n"); } change_partition_var (map, var, x); } }; if (word_ == 0) break; } } } } while (0)
      ;
  free(live);
  coalesce_abnormal_edges (map, graph, rv);
  if (dump_file && (dump_flags & (1 << 3)))
    dump_var_map (dump_file, map);
  if (flags & 0x10)
    coalesce_tpa_members (rv, graph, map, cl,
     ((dump_flags & (1 << 3)) ? dump_file
          : ((void *)0)));
  if (flags & 0x8)
    coalesce_tpa_members (rv, graph, map, ((void *)0),
     ((dump_flags & (1 << 3)) ? dump_file
          : ((void *)0)));
  if (cl)
    delete_coalesce_list (cl);
  root_var_delete (rv);
  conflict_graph_delete (graph);
  return liveinfo;
}
static void
assign_vars (var_map map)
{
  int x, i, num, rep;
  tree t, var;
  var_ann_t ann;
  root_var_p rv;
  rv = root_var_init (map);
  if (!rv)
    return;
  num = num_var_partitions (map);
  for (x = 0; x < num; x++)
    {
      var = partition_to_var (map, x);
      if (((enum tree_code) (var)->common.code) != SSA_NAME)
 {
   ann = var_ann (var);
   ann->out_of_ssa_tag = 1;
   if (dump_file && (dump_flags & (1 << 3)))
     {
       fprintf (dump_file, "partition %d has variable ", x);
       print_generic_expr (dump_file, var, (1 << 1));
       fprintf (dump_file, " assigned to it.\n");
     }
 }
    }
  num = root_var_num (rv);
  for (x = 0; x < num; x++)
    {
      var = root_var (rv, x);
      ann = var_ann (var);
      for (i = root_var_first_partition (rv, x);
    i != -1;
    i = root_var_next_partition (rv, i))
 {
   t = partition_to_var (map, i);
   if (t == var || ((enum tree_code) (t)->common.code) != SSA_NAME)
     continue;
   rep = var_to_partition (map, t);
   if (!ann->out_of_ssa_tag)
     {
       if (dump_file && (dump_flags & (1 << 3)))
  print_exprs (dump_file, "", t, "  --> ", var, "\n");
       change_partition_var (map, var, rep);
       continue;
     }
   if (dump_file && (dump_flags & (1 << 3)))
     print_exprs (dump_file, "", t, " not coalesced with ", var,
    "");
   var = create_temp (t);
   change_partition_var (map, var, rep);
   ann = var_ann (var);
   if (dump_file && (dump_flags & (1 << 3)))
     {
       fprintf (dump_file, " -->  New temp:  '");
       print_generic_expr (dump_file, var, (1 << 1));
       fprintf (dump_file, "'\n");
     }
 }
    }
  root_var_delete (rv);
}
static unsigned char
replace_use_variable (var_map map, use_operand_p p, tree *expr)
{
  tree new_var;
  tree var = get_use_from_ptr (p);
  if (expr)
    {
      int version = (var)->ssa_name.version;
      if (expr[version])
        {
   tree new_expr = ((expr[version])->exp.operands[1]);
   ((*((p).use)) = (new_expr));
   ((expr[version])->exp.operands[1]) = (tree) ((void *)0);
   return 1;
 }
    }
  new_var = var_to_partition_to_var (map, var);
  if (new_var)
    {
      ((*((p).use)) = (new_var));
      set_is_used (new_var);
      return 1;
    }
  return 0;
}
static unsigned char
replace_def_variable (var_map map, def_operand_p def_p, tree *expr)
{
  tree new_var;
  tree var = get_def_from_ptr (def_p);
  if (expr)
    {
      int version = (var)->ssa_name.version;
      if (expr[version])
        {
   tree new_expr = ((expr[version])->exp.operands[1]);
   ((*((def_p).def)) = (new_expr));
   ((expr[version])->exp.operands[1]) = (tree) ((void *)0);
   return 1;
 }
    }
  new_var = var_to_partition_to_var (map, var);
  if (new_var)
    {
      ((*((def_p).def)) = (new_var));
      set_is_used (new_var);
      return 1;
    }
  return 0;
}
static void
eliminate_virtual_phis (void)
{
  basic_block bb;
  tree phi, next;
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      for (phi = phi_nodes (bb); phi; phi = next)
        {
   next = (((phi))->common.chain);
   if (!is_gimple_reg ((get_def_from_ptr (get_phi_result_ptr (phi)))->ssa_name.var))
     {
       remove_phi_node (phi, (tree) ((void *)0), bb);
     }
 }
    }
}
static void
coalesce_vars (var_map map, tree_live_info_p liveinfo)
{
  basic_block bb;
  type_var_p tv;
  tree var;
  int x, p, p2;
  coalesce_list_p cl;
  conflict_graph graph;
  cl = create_coalesce_list (map);
  for (x = 0; x < num_var_partitions (map); x++)
    {
      var = partition_to_var (map, x);
      p = var_to_partition (map, var);
      if (p != x)
        live_merge_and_clear (liveinfo, p, x);
    }
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      tree phi, arg;
      int p;
      for (phi = phi_nodes (bb); phi; phi = (((phi))->common.chain))
 {
   p = var_to_partition (map, get_def_from_ptr (get_phi_result_ptr (phi)));
   if (p == -1)
     continue;
   make_live_on_entry (liveinfo, bb, p);
   for (x = 0; x < (phi)->phi.num_args; x++)
     {
       arg = get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((x))));
       if (!phi_ssa_name_p (arg))
         continue;
       p2 = var_to_partition (map, arg);
       if (p2 == -1)
  continue;
       if (p != p2)
         add_coalesce (cl, p, p2, 1);
     }
 }
   }
  calculate_live_on_exit (liveinfo);
  if (dump_file && (dump_flags & (1 << 3)))
    {
      fprintf (dump_file, "Live range info for variable memory coalescing.\n");
      dump_live_info (dump_file, liveinfo, (0x01 | 0x02));
      fprintf (dump_file, "Coalesce list from phi nodes:\n");
      dump_coalesce_list (dump_file, cl);
    }
  tv = type_var_init (map);
  if (dump_file)
    type_var_dump (dump_file, tv);
  type_var_compact (tv);
  if (dump_file)
    type_var_dump (dump_file, tv);
  graph = build_tree_conflict_graph (liveinfo, tv, cl);
  type_var_decompact (tv);
  if (dump_file && (dump_flags & (1 << 3)))
    {
      fprintf (dump_file, "type var list now looks like:n");
      type_var_dump (dump_file, tv);
      fprintf (dump_file, "Coalesce list after conflict graph build:\n");
      dump_coalesce_list (dump_file, cl);
    }
  sort_coalesce_list (cl);
  if (dump_file && (dump_flags & (1 << 3)))
    {
      fprintf (dump_file, "Coalesce list after sorting:\n");
      dump_coalesce_list (dump_file, cl);
    }
  coalesce_tpa_members (tv, graph, map, cl,
   ((dump_flags & (1 << 3)) ? dump_file : ((void *)0)));
  type_var_delete (tv);
  delete_coalesce_list (cl);
}
typedef struct value_expr_d
{
  int value1;
  struct value_expr_d *next;
} *value_expr_p;
typedef struct temp_expr_table_d
{
  var_map map;
  void **version_info;
  value_expr_p *partition_dep_list;
  bitmap replaceable;
  unsigned char saw_replaceable;
  int virtual_partition;
  bitmap partition_in_use;
  value_expr_p free_list;
  value_expr_p pending_dependence;
} *temp_expr_table_p;
static temp_expr_table_p new_temp_expr_table (var_map);
static tree *free_temp_expr_table (temp_expr_table_p);
static value_expr_p new_value_expr (temp_expr_table_p);
static void free_value_expr (temp_expr_table_p, value_expr_p);
static value_expr_p find_value_in_list (value_expr_p, int,
            value_expr_p *);
static void add_value_to_list (temp_expr_table_p, value_expr_p *, int);
static void add_info_to_list (temp_expr_table_p, value_expr_p *,
         value_expr_p);
static value_expr_p remove_value_from_list (value_expr_p *, int);
static void add_dependance (temp_expr_table_p, int, tree);
static unsigned char check_replaceable (temp_expr_table_p, tree);
static void finish_expr (temp_expr_table_p, int, unsigned char);
static void mark_replaceable (temp_expr_table_p, tree);
static void kill_expr (temp_expr_table_p, int, unsigned char);
static void kill_virtual_exprs (temp_expr_table_p, unsigned char);
static void find_replaceable_in_bb (temp_expr_table_p, basic_block);
static tree *find_replaceable_exprs (var_map);
static void dump_replaceable_exprs (FILE *, tree *);
static temp_expr_table_p
new_temp_expr_table (var_map map)
{
  temp_expr_table_p t;
  t = (temp_expr_table_p) xmalloc (sizeof (struct temp_expr_table_d));
  t->map = map;
  t->version_info = xcalloc (((ssa_names)->elements_used) + 1, sizeof (void *));
  t->partition_dep_list = xcalloc (num_var_partitions (map) + 1,
       sizeof (value_expr_p));
  t->replaceable = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
  t->partition_in_use = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
  t->saw_replaceable = 0;
  t->virtual_partition = num_var_partitions (map);
  t->free_list = ((void *)0);
  t->pending_dependence = ((void *)0);
  return t;
}
static tree *
free_temp_expr_table (temp_expr_table_p t)
{
  value_expr_p p;
  tree *ret = ((void *)0);
  while ((p = t->free_list))
    {
      t->free_list = p->next;
      free (p);
    }
  do { if (t->partition_in_use) { bitmap_clear (t->partition_in_use); free (t->partition_in_use); (t->partition_in_use) = 0; } } while (0);
  do { if (t->replaceable) { bitmap_clear (t->replaceable); free (t->replaceable); (t->replaceable) = 0; } } while (0);
  free (t->partition_dep_list);
  if (t->saw_replaceable)
    ret = (tree *)t->version_info;
  else
    free (t->version_info);
  free (t);
  return ret;
}
static value_expr_p
new_value_expr (temp_expr_table_p table)
{
  value_expr_p p;
  if (table->free_list)
    {
      p = table->free_list;
      table->free_list = p->next;
    }
  else
    p = (value_expr_p) xmalloc (sizeof (struct value_expr_d));
  return p;
}
static void
free_value_expr (temp_expr_table_p table, value_expr_p p)
{
  p->next = table->free_list;
  table->free_list = p;
}
static value_expr_p
find_value_in_list (value_expr_p list, int value1, value_expr_p *last_ptr)
{
  value_expr_p curr;
  value_expr_p last = ((void *)0);
  for (curr = list; curr; last = curr, curr = curr->next)
    {
      if (curr->value == value)
        break;
    }
  if (last_ptr)
    *last_ptr = last;
  return curr;
}
static void
add_value_to_list (temp_expr_table_p tab, value_expr_p *list, int value1)
{
  value_expr_p info;
  if (!find_value_in_list (*list, value, ((void *)0)))
    {
      info = new_value_expr (tab);
      info->value = value;
      info->next = *list;
      *list = info;
    }
}
static void
add_info_to_list (temp_expr_table_p tab, value_expr_p *list, value_expr_p info)
{
  if (find_value_in_list (*list, info->value, ((void *)0)))
    free_value_expr (tab, info);
  else
    {
      info->next = *list;
      *list = info;
    }
}
static value_expr_p
remove_value_from_list (value_expr_p *list, int value1)
{
  value_expr_p info, last;
  info = find_value_in_list (*list, value, &last);
  if (!info)
    return ((void *)0);
  if (!last)
    *list = info->next;
  else
    last->next = info->next;
  return info;
}
static void
add_dependance (temp_expr_table_p tab, int version, tree var)
{
  int i, x;
  value_expr_p info;
  i = (var)->ssa_name.version;
  if (bitmap_bit_p (tab->replaceable, i))
    {
      while ((info = tab->pending_dependence))
        {
   tab->pending_dependence = info->next;
   x = info->value;
   info->value = version;
   add_info_to_list (tab, &(tab->partition_dep_list[x]), info);
          add_value_to_list (tab,
        (value_expr_p *)&(tab->version_info[version]), x);
   bitmap_set_bit (tab->partition_in_use, x);
 }
    }
  else
    {
      i = var_to_partition (tab->map, var);
      add_value_to_list (tab, &(tab->partition_dep_list[i]), version);
      add_value_to_list (tab,
    (value_expr_p *)&(tab->version_info[version]), i);
      bitmap_set_bit (tab->partition_in_use, i);
    }
}
static unsigned char
check_replaceable (temp_expr_table_p tab, tree stmt)
{
  stmt_ann_t ann;
  vuse_optype vuseops;
  def_optype defs;
  use_optype uses;
  tree var, def;
  int num_use_ops, version, i;
  var_map map = tab->map;
  if (((enum tree_code) (stmt)->common.code) != MODIFY_EXPR)
    return 0;
  ann = stmt_ann (stmt);
  defs = get_def_ops (ann);
  if (((defs) ? (defs)->num_defs : 0) != 1)
    return 0;
  def = (get_def_from_ptr (get_def_op_ptr (((defs)), ((0)))));
  if (version_ref_count (map, def) != 1)
    return 0;
  if ((((def)->ssa_name.var)->decl.inline_flag))
    return 0;
  if (((get_v_may_def_ops (ann)) ? (get_v_may_def_ops (ann))->num_v_may_defs : 0) != 0)
    return 0;
  if (((get_v_must_def_ops (ann)) ? (get_v_must_def_ops (ann))->num_v_must_defs : 0) != 0)
    return 0;
  if (flag_float_store && ((((enum tree_code) (((((stmt)->exp.operands[1]))->common.type))->common.code) == REAL_TYPE) || (((enum tree_code) (((((stmt)->exp.operands[1]))->common.type))->common.code) == COMPLEX_TYPE && ((enum tree_code) (((((((stmt)->exp.operands[1]))->common.type))->common.type))->common.code) == REAL_TYPE)))
    return 0;
  uses = get_use_ops (ann);
  num_use_ops = ((uses) ? (uses)->num_uses : 0);
  vuseops = get_vuse_ops (ann);
  if (num_use_ops == 0 && ((vuseops) ? (vuseops)->num_vuses : 0) == 0)
    return 0;
  version = (def)->ssa_name.version;
  for (i = 0; i < num_use_ops; i++)
    {
      var = (get_use_from_ptr (get_use_op_ptr (((uses)), ((i)))));
      add_dependance (tab, version, var);
    }
  if (((vuseops) ? (vuseops)->num_vuses : 0) != 0)
    {
      add_value_to_list (tab, (value_expr_p *)&(tab->version_info[version]),
    (tab->virtual_partition));
      add_value_to_list (tab,
    &(tab->partition_dep_list[(tab->virtual_partition)]),
    version);
      bitmap_set_bit (tab->partition_in_use, (tab->virtual_partition));
    }
  return 1;
}
static void
finish_expr (temp_expr_table_p tab, int version, unsigned char replace)
{
  value_expr_p info, tmp;
  int partition1;
  for (info = (value_expr_p) tab->version_info[version]; info; info = tmp)
    {
      partition1 = info->value;
      tmp = remove_value_from_list (&(tab->partition_dep_list[partition1]),
        version);
      free_value_expr (tab, tmp);
      if (!(tab->partition_dep_list[partition1]) && replace)
        bitmap_clear_bit (tab->partition_in_use, partition1);
      tmp = info->next;
      if (!replace)
        free_value_expr (tab, info);
    }
  if (replace)
    {
      tab->saw_replaceable = 1;
      bitmap_set_bit (tab->replaceable, version);
    }
  else
    {
      tab->version_info[version] = ((void *)0);
    }
}
static void
mark_replaceable (temp_expr_table_p tab, tree var)
{
  value_expr_p info;
  int version = (var)->ssa_name.version;
  finish_expr (tab, version, 1);
  if (tab->version_info[version])
    {
      info = (value_expr_p) tab->version_info[version];
      for ( ; info->next; info = info->next)
 continue;
      info->next = tab->pending_dependence;
      tab->pending_dependence = (value_expr_p)tab->version_info[version];
    }
  tab->version_info[version] = (var)->common.chain;
}
static void
kill_expr (temp_expr_table_p tab, int partition1, unsigned char clear_bit)
{
  value_expr_p ptr;
  while ((ptr = tab->partition_dep_list[partition1]) != ((void *)0))
    finish_expr (tab, ptr->value, 0);
  if (clear_bit)
    bitmap_clear_bit (tab->partition_in_use, partition1);
}
static void
kill_virtual_exprs (temp_expr_table_p tab, unsigned char clear_bit)
{
  kill_expr (tab, (tab->virtual_partition), clear_bit);
}
static void
find_replaceable_in_bb (temp_expr_table_p tab, basic_block bb)
{
  block_stmt_iterator bsi;
  tree stmt, def;
  stmt_ann_t ann;
  int partition1, num, i;
  use_optype uses;
  def_optype defs;
  var_map map = tab->map;
  value_expr_p p;
  for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))
    {
      stmt = bsi_stmt (bsi);
      ann = stmt_ann (stmt);
      uses = get_use_ops (ann);
      num = ((uses) ? (uses)->num_uses : 0);
      for (i = 0; i < num; i++)
 {
   def = (get_use_from_ptr (get_use_op_ptr (((uses)), ((i)))));
   if (tab->version_info[(def)->ssa_name.version])
     {
       if (!ann->has_volatile_ops)
  mark_replaceable (tab, def);
       else
  finish_expr (tab, (def)->ssa_name.version, 0);
     }
 }
      defs = get_def_ops (ann);
      num = ((defs) ? (defs)->num_defs : 0);
      for (i = 0; i < num; i++)
 {
   def = (get_def_from_ptr (get_def_op_ptr (((defs)), ((i)))));
   partition1 = var_to_partition (map, def);
   if (partition1 != -1 && tab->partition_dep_list[partition1])
     kill_expr (tab, partition1, 1);
 }
      if (!ann->has_volatile_ops)
 check_replaceable (tab, stmt);
      while ((p = tab->pending_dependence))
 {
   tab->pending_dependence = p->next;
   free_value_expr (tab, p);
 }
      if (((get_v_may_def_ops (ann)) ? (get_v_may_def_ops (ann))->num_v_may_defs : 0) > 0)
        kill_virtual_exprs (tab, 1);
      if (((get_v_must_def_ops (ann)) ? (get_v_must_def_ops (ann))->num_v_must_defs : 0) > 0)
        kill_virtual_exprs (tab, 1);
    }
}
static tree *
find_replaceable_exprs (var_map map)
{
  basic_block bb;
  int i;
  temp_expr_table_p table;
  tree *ret;
  table = new_temp_expr_table (map);
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      find_replaceable_in_bb (table, bb);
      do { bitmap_element *ptr_ = ((table->partition_in_use))->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (i) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); { kill_expr (table, i, 0); }; if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
   ;
    }
  ret = free_temp_expr_table (table);
  return ret;
}
static void
dump_replaceable_exprs (FILE *f, tree *expr)
{
  tree stmt, var;
  int x;
  fprintf (f, "\nReplacing Expressions\n");
  for (x = 0; x < (int)((ssa_names)->elements_used) + 1; x++)
    if (expr[x])
      {
        stmt = expr[x];
 var = (get_def_from_ptr (get_def_op_ptr (((get_def_ops (stmt_ann (stmt)))), ((0)))));
 print_generic_expr (f, var, (1 << 1));
 fprintf (f, " replace with --> ");
 print_generic_expr (f, ((stmt)->exp.operands[1]), (1 << 1));
 fprintf (f, "\n");
      }
  fprintf (f, "\n");
}
static tree
discover_nonconstant_array_refs_r (tree * tp, int *walk_subtrees,
       void *data )
{
  tree t = *tp;
  if ((tree_code_type[(int) (((enum tree_code) (t)->common.code))] == 't') || (tree_code_type[(int) (((enum tree_code) (t)->common.code))] == 'd'))
    *walk_subtrees = 0;
  else if (((enum tree_code) (t)->common.code) == ARRAY_REF || ((enum tree_code) (t)->common.code) == ARRAY_RANGE_REF)
    {
      while (((((enum tree_code) (t)->common.code) == ARRAY_REF || ((enum tree_code) (t)->common.code) == ARRAY_RANGE_REF)
       && is_gimple_min_invariant (((t)->exp.operands[1]))
       && (!((t)->exp.operands[2])
    || is_gimple_min_invariant (((t)->exp.operands[2]))))
      || (((enum tree_code) (t)->common.code) == COMPONENT_REF
   && (!((t)->exp.operands[2])
       || is_gimple_min_invariant (((t)->exp.operands[2]))))
      || ((enum tree_code) (t)->common.code) == BIT_FIELD_REF
      || ((enum tree_code) (t)->common.code) == REALPART_EXPR
      || ((enum tree_code) (t)->common.code) == IMAGPART_EXPR
      || ((enum tree_code) (t)->common.code) == VIEW_CONVERT_EXPR
      || ((enum tree_code) (t)->common.code) == NOP_EXPR
      || ((enum tree_code) (t)->common.code) == CONVERT_EXPR)
 t = ((t)->exp.operands[0]);
      if (((enum tree_code) (t)->common.code) == ARRAY_REF || ((enum tree_code) (t)->common.code) == ARRAY_RANGE_REF)
 {
   t = get_base_address (t);
   if (t && (tree_code_type[(int) (((enum tree_code) (t)->common.code))] == 'd'))
     ((t)->common.addressable_flag) = 1;
 }
      *walk_subtrees = 0;
    }
  return (tree) ((void *)0);
}
static void
discover_nonconstant_array_refs (void)
{
  basic_block bb;
  block_stmt_iterator bsi;
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))
 walk_tree (bsi_stmt_ptr (bsi), discover_nonconstant_array_refs_r,
     ((void *)0) , ((void *)0));
    }
}
static void
rewrite_trees (var_map map, tree *values)
{
  elim_graph g;
  basic_block bb;
  block_stmt_iterator si;
  edge e;
  tree phi;
  unsigned char changed;
  g = new_elim_graph (map->num_partitions);
  g->map = map;
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      for (si = bsi_start (bb); !bsi_end_p (si); )
 {
   size_t i, num_uses, num_defs;
   use_optype uses;
   def_optype defs;
   tree stmt = bsi_stmt (si);
   use_operand_p use_p;
   int remove = 0, is_copy = 0;
   stmt_ann_t ann;
   get_stmt_operands (stmt);
   ann = stmt_ann (stmt);
   changed = 0;
   if (((enum tree_code) (stmt)->common.code) == MODIFY_EXPR
       && (((enum tree_code) (((stmt)->exp.operands[1]))->common.code) == SSA_NAME))
     is_copy = 1;
   uses = get_use_ops (ann);
   num_uses = ((uses) ? (uses)->num_uses : 0);
   for (i = 0; i < num_uses; i++)
     {
       use_p = get_use_op_ptr ((uses), (i));
       if (replace_use_variable (map, use_p, values))
         changed = 1;
     }
   defs = get_def_ops (ann);
   num_defs = ((defs) ? (defs)->num_defs : 0);
   if (values && num_defs == 1)
     {
       tree def = (get_def_from_ptr (get_def_op_ptr (((defs)), ((0)))));
       tree val;
       val = values[(def)->ssa_name.version];
       if (val)
  remove = 1;
     }
   if (!remove)
     {
       for (i = 0; i < num_defs; i++)
  {
    def_operand_p def_p = get_def_op_ptr ((defs), (i));
    if (replace_def_variable (map, def_p, ((void *)0)))
      changed = 1;
    if (is_copy
        && num_uses == 1
        && (get_def_from_ptr (def_p) == (get_use_from_ptr (get_use_op_ptr (((uses)), ((0)))))))
      remove = 1;
  }
       if (changed)
  modify_stmt (stmt);
     }
   if (remove)
     bsi_remove (&si);
   else
     bsi_next (&si);
 }
      phi = phi_nodes (bb);
      if (phi)
        {
   for (e = bb->pred; e; e = e->pred_next)
     eliminate_phi (e, phi_arg_from_edge (phi, e), g);
 }
    }
  delete_elim_graph (g);
  bsi_commit_edge_inserts (((void *)0));
}
void
remove_ssa_form (FILE *dump, var_map map, int flags)
{
  tree_live_info_p liveinfo;
  basic_block bb;
  tree phi, next;
  FILE *save;
  tree *values = ((void *)0);
  save = dump_file;
  dump_file = dump;
  if ((flags & 0x2) == 0)
    compact_var_map (map, 1);
  else
    compact_var_map (map, 0);
  if (dump_file && (dump_flags & (1 << 3)))
    dump_var_map (dump_file, map);
  liveinfo = coalesce_ssa_name (map, flags);
  if ((flags & 0x2) == 0)
    compact_var_map (map, 0);
  if (dump_file && (dump_flags & (1 << 3)))
    {
      fprintf (dump_file, "After Coalescing:\n");
      dump_var_map (dump_file, map);
    }
  if (flags & 0x1)
    {
      values = find_replaceable_exprs (map);
      if (values && dump_file && (dump_flags & (1 << 3)))
 dump_replaceable_exprs (dump_file, values);
    }
  assign_vars (map);
  if (dump_file && (dump_flags & (1 << 3)))
    {
      fprintf (dump_file, "After Root variable replacement:\n");
      dump_var_map (dump_file, map);
    }
  if ((flags & 0x2) && liveinfo)
    {
      coalesce_vars (map, liveinfo);
      if (dump_file && (dump_flags & (1 << 3)))
 {
   fprintf (dump_file, "After variable memory coalescing:\n");
   dump_var_map (dump_file, map);
 }
    }
  if (liveinfo)
    delete_tree_live_info (liveinfo);
  rewrite_trees (map, values);
  if (values)
    free (values);
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      for (phi = phi_nodes (bb); phi; phi = next)
 {
   next = (((phi))->common.chain);
   if ((flags & 0x4)
       || var_to_partition (map, get_def_from_ptr (get_phi_result_ptr (phi))) != -1)
     remove_phi_node (phi, (tree) ((void *)0), bb);
 }
    }
  dump_file = save;
}
void
rewrite_vars_out_of_ssa (bitmap vars)
{
  if (bitmap_first_set_bit (vars) >= 0)
    {
      var_map map;
      basic_block bb;
      tree phi;
      int i;
      int ssa_flags;
      for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
 {
   for (phi = phi_nodes (bb); phi; phi = (((phi))->common.chain))
     {
       tree result = (get_def_from_ptr (get_phi_result_ptr (phi)))->ssa_name.var;
       if (bitmap_bit_p (vars, var_ann (result)->uid))
  continue;
       for (i = 0; i < (phi)->phi.num_args; i++)
  {
    tree arg = get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((i))));
    if (((enum tree_code) (arg)->common.code) != SSA_NAME)
      continue;
    arg = (arg)->ssa_name.var;
    if (bitmap_bit_p (vars, var_ann (arg)->uid))
      {
        tree new_name, copy;
        new_name = make_ssa_name (result, phi);
        copy = build (MODIFY_EXPR, ((arg)->common.type),
        new_name, get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((i)))));
        (new_name)->common.chain = copy;
        ((*((get_phi_arg_def_ptr (((phi)), ((i)))).use)) = ((new_name)));
        bsi_insert_on_edge (((phi)->phi.a[i]).e, copy);
        modify_stmt (copy);
      }
  }
     }
 }
      bsi_commit_edge_inserts (((void *)0));
      map = init_var_map (((ssa_names)->elements_used) + 1);
      register_ssa_partitions_for_vars (vars, map);
      ssa_flags = 0x8;
      if (flag_tree_combine_temps)
 ssa_flags |= 0x2;
      remove_ssa_form (dump_file, map, ssa_flags);
      do { bitmap_element *ptr_ = (vars)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (i) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); { var_ann (((referenced_vars)->data.tree1[i]))->out_of_ssa_tag = 0; }; if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
   ;
     delete_var_map (map);
    }
}
static void
rewrite_out_of_ssa (void)
{
  var_map map;
  int var_flags = 0;
  int ssa_flags = (0x4 | 0x10);
  if (!flag_tree_live_range_split)
    ssa_flags |= 0x8;
  eliminate_virtual_phis ();
  if (dump_file && (dump_flags & (1 << 3)))
    dump_tree_cfg (dump_file, dump_flags & ~(1 << 3));
  if (flag_tree_ter && !flag_mudflap)
    var_flags = 0x01;
  map = create_ssa_var_map (var_flags);
  if (flag_tree_combine_temps)
    ssa_flags |= 0x2;
  if (flag_tree_ter && !flag_mudflap)
    ssa_flags |= 0x1;
  remove_ssa_form (dump_file, map, ssa_flags);
  if (dump_file && (dump_flags & (1 << 3)))
    dump_tree_cfg (dump_file, dump_flags & ~(1 << 3));
  cfg_remove_useless_stmts ();
  delete_var_map (map);
  discover_nonconstant_array_refs ();
}
struct tree_opt_pass pass_del_ssa =
{
  "optimized",
  ((void *)0),
  rewrite_out_of_ssa,
  ((void *)0),
  ((void *)0),
  0,
  TV_TREE_SSA_TO_NORMAL,
  (1 << 3) | (1 << 6),
  0,
  (1 << 6),
  (1 << 3) | (1 << 4)
    | (1 << 5),
  (1 << 0) | (1 << 2)
};
enum rid
{
  RID_STATIC = 0,
  RID_UNSIGNED, RID_LONG, RID_CONST, RID_EXTERN,
  RID_REGISTER, RID_TYPEDEF, RID_SHORT, RID_INLINE,
  RID_VOLATILE, RID_SIGNED, RID_AUTO, RID_RESTRICT,
  RID_COMPLEX, RID_THREAD,
  RID_FRIEND, RID_VIRTUAL, RID_EXPLICIT, RID_EXPORT, RID_MUTABLE,
  RID_IN, RID_OUT, RID_INOUT, RID_BYCOPY, RID_BYREF, RID_ONEWAY,
  RID_INT, RID_CHAR, RID_FLOAT, RID_DOUBLE, RID_VOID,
  RID_ENUM, RID_STRUCT, RID_UNION, RID_IF, RID_ELSE,
  RID_WHILE, RID_DO, RID_FOR, RID_SWITCH, RID_CASE,
  RID_DEFAULT, RID_BREAK, RID_CONTINUE, RID_RETURN, RID_GOTO,
  RID_SIZEOF,
  RID_ASM, RID_TYPEOF, RID_ALIGNOF, RID_ATTRIBUTE, RID_VA_ARG,
  RID_EXTENSION, RID_IMAGPART, RID_REALPART, RID_LABEL, RID_PTRBASE,
  RID_PTREXTENT, RID_PTRVALUE, RID_CHOOSE_EXPR, RID_TYPES_COMPATIBLE_P,
  RID_FUNCTION_NAME, RID_PRETTY_FUNCTION_NAME, RID_C99_FUNCTION_NAME,
  RID_BOOL, RID_WCHAR, RID_CLASS,
  RID_PUBLIC, RID_PRIVATE, RID_PROTECTED,
  RID_TEMPLATE, RID_NULL, RID_CATCH,
  RID_DELETE, RID_FALSE, RID_NAMESPACE,
  RID_NEW, RID_OFFSETOF, RID_OPERATOR,
  RID_THIS, RID_THROW, RID_TRUE,
  RID_TRY, RID_TYPENAME, RID_TYPEID,
  RID_USING,
  RID_CONSTCAST, RID_DYNCAST, RID_REINTCAST, RID_STATCAST,
  RID_ID, RID_AT_ENCODE, RID_AT_END,
  RID_AT_CLASS, RID_AT_ALIAS, RID_AT_DEFS,
  RID_AT_PRIVATE, RID_AT_PROTECTED, RID_AT_PUBLIC,
  RID_AT_PROTOCOL, RID_AT_SELECTOR,
  RID_AT_THROW, RID_AT_TRY, RID_AT_CATCH,
  RID_AT_FINALLY, RID_AT_SYNCHRONIZED,
  RID_AT_INTERFACE,
  RID_AT_IMPLEMENTATION,
  RID_MAX,
  RID_FIRST_MODIFIER = RID_STATIC,
  RID_LAST_MODIFIER = RID_ONEWAY,
  RID_FIRST_AT = RID_AT_ENCODE,
  RID_LAST_AT = RID_AT_IMPLEMENTATION,
  RID_FIRST_PQ = RID_IN,
  RID_LAST_PQ = RID_ONEWAY
};
extern tree *ridpointers;
enum c_tree_index
{
    CTI_WCHAR_TYPE,
    CTI_SIGNED_WCHAR_TYPE,
    CTI_UNSIGNED_WCHAR_TYPE,
    CTI_WINT_TYPE,
    CTI_SIGNED_SIZE_TYPE,
    CTI_UNSIGNED_PTRDIFF_TYPE,
    CTI_INTMAX_TYPE,
    CTI_UINTMAX_TYPE,
    CTI_WIDEST_INT_LIT_TYPE,
    CTI_WIDEST_UINT_LIT_TYPE,
    CTI_CHAR_ARRAY_TYPE,
    CTI_WCHAR_ARRAY_TYPE,
    CTI_INT_ARRAY_TYPE,
    CTI_STRING_TYPE,
    CTI_CONST_STRING_TYPE,
    CTI_TRUTHVALUE_TYPE,
    CTI_TRUTHVALUE_TRUE,
    CTI_TRUTHVALUE_FALSE,
    CTI_DEFAULT_FUNCTION_TYPE,
    CTI_FUNCTION_NAME_DECL,
    CTI_PRETTY_FUNCTION_NAME_DECL,
    CTI_C99_FUNCTION_NAME_DECL,
    CTI_SAVED_FUNCTION_NAME_DECLS,
    CTI_VOID_ZERO,
    C_TREE_IDX_MAX
};
struct c_common_identifier
{
  struct tree_common common;
  struct cpp_hashnode node;
};
extern tree c_global_trees[C_TREE_IDX_MAX];
struct sorted_fields_type
{
  int len;
  tree elts[1];
};
typedef enum c_language_kind
{
  clk_c = 0,
  clk_objc = 1,
  clk_cxx = 2,
  clk_objcxx = 3
}
c_language_kind;
extern c_language_kind c_language;
struct stmt_tree_s {
  tree x_cur_stmt_list;
  int stmts_are_full_exprs_p;
};
typedef struct stmt_tree_s *stmt_tree;
struct c_language_function {
  struct stmt_tree_s x_stmt_tree;
};
extern void (*lang_expand_function_end) (void);
extern int (*lang_missing_noreturn_ok_p) (tree);
extern void push_file_scope (void);
extern void pop_file_scope (void);
extern int yyparse (void);
extern stmt_tree current_stmt_tree (void);
extern tree push_stmt_list (void);
extern tree re_push_stmt_list (tree);
extern tree pop_stmt_list (tree);
extern tree add_stmt (tree);
extern void push_cleanup (tree, tree, unsigned char);
extern tree walk_stmt_tree (tree *, walk_tree_fn, void *);
extern int c_expand_decl (tree);
extern int field_decl_cmp (const void *, const void *);
extern void resort_sorted_fields (void *, void *, gt_pointer_operator,
                                  void *);
extern unsigned char has_c_linkage (tree decl);
extern int flag_preprocess_only;
extern int flag_nil_receivers;
extern int flag_objc_exceptions;
extern int flag_objc_sjlj_exceptions;
extern int flag_zero_link;
extern int flag_replace_objc_classes;
extern char flag_no_line_commands;
extern char flag_no_output;
extern char flag_dump_macros;
extern char flag_dump_includes;
extern unsigned char flag_pch_preprocess;
extern const char *pch_file;
extern int flag_iso;
extern int flag_undef;
extern int flag_no_builtin;
extern int flag_no_nonansi_builtin;
extern int flag_short_double;
extern int flag_short_wchar;
extern int flag_ms_extensions;
extern int flag_no_asm;
extern int flag_const_strings;
extern int flag_signed_bitfields;
extern int explicit_flag_signed_bitfields;
extern int warn_write_strings;
extern int warn_unknown_pragmas;
extern int warn_format;
extern int flag_cond_mismatch;
extern int flag_isoc94;
extern int flag_isoc99;
extern int flag_hosted;
extern int warn_main;
extern int flag_gen_declaration;
extern int flag_next_runtime;
extern int print_struct_values;
extern const char *constant_string_class_name;
extern int flag_no_gnu_keywords;
extern int flag_implement_inlines;
extern int flag_implicit_templates;
extern int flag_implicit_inline_templates;
extern int flag_use_repository;
extern int flag_optional_diags;
extern int flag_elide_constructors;
extern int flag_default_inline;
extern int flag_rtti;
extern int flag_conserve_space;
extern int flag_access_control;
extern int flag_check_new;
extern int flag_new_for_scope;
extern int flag_weak;
extern int flag_working_directory;
extern int flag_use_cxa_atexit;
extern int flag_permissive;
extern int flag_enforce_eh_specs;
extern int warn_implicit;
extern int max_tinst_depth;
extern int skip_evaluation;
extern const struct attribute_spec c_common_attribute_table[];
extern const struct attribute_spec c_common_format_attribute_table[];
extern tree (*make_fname_decl) (tree, int);
extern tree identifier_global_value (tree);
extern void record_builtin_type (enum rid, const char *, tree);
extern tree build_void_list_node (void);
extern void start_fname_decls (void);
extern void finish_fname_decls (void);
extern const char *fname_as_string (int);
extern tree fname_decl (unsigned, tree);
extern void check_function_arguments (tree, tree);
extern void check_function_arguments_recurse (void (*)
           (void *, tree,
            unsigned long),
           void *, tree,
           unsigned long);
extern void check_function_format (tree, tree);
extern void set_Wformat (int);
extern tree handle_format_attribute (tree *, tree, tree, int, unsigned char *);
extern tree handle_format_arg_attribute (tree *, tree, tree, int, unsigned char *);
extern int c_common_handle_option (size_t code, const char *arg, int value1);
extern unsigned char c_common_missing_argument (const char *opt, size_t code);
extern tree c_common_type_for_mode (enum machine_mode, int);
extern tree c_common_type_for_size (unsigned int, int);
extern tree c_common_unsigned_type (tree);
extern tree c_common_signed_type (tree);
extern tree c_common_signed_or_unsigned_type (int, tree);
extern tree c_common_truthvalue_conversion (tree);
extern void c_apply_type_quals_to_decl (int, tree);
extern tree c_sizeof_or_alignof_type (tree, enum tree_code, int);
extern tree c_alignof_expr (tree);
extern void binary_op_error (enum tree_code);
extern tree check_case_value (tree);
extern tree fix_string_type (tree);
struct varray_head_tag;
extern void constant_expression_warning (tree);
extern tree convert_and_check (tree, tree);
extern void overflow_warning (tree);
extern void unsigned_conversion_warning (tree, tree);
extern tree shorten_compare (tree *, tree *, tree *, enum tree_code *);
extern tree pointer_int_sum (enum tree_code, tree, tree);
extern unsigned int min_precision (tree, int);
extern tree c_build_qualified_type (tree, int);
extern void c_common_nodes_and_builtins (void);
extern void disable_builtin_function (const char *);
extern tree build_va_arg (tree, tree);
extern unsigned int c_common_init_options (unsigned int, const char **);
extern unsigned char c_common_post_options (const char **);
extern unsigned char c_common_init (void);
extern void c_common_finish (void);
extern void c_common_parse_file (int);
extern long c_common_get_alias_set (tree);
extern void c_register_builtin_type (tree, const char*);
extern unsigned char c_promoting_integer_type_p (tree);
extern int self_promoting_args_p (tree);
extern tree strip_array_types (tree);
extern tree strip_pointer_operator (tree);
extern void c_parse_file (void);
extern void finish_file (void);
enum c_tree_code {
  C_DUMMY_TREE_CODE = LAST_AND_UNUSED_TREE_CODE,
SIZEOF_EXPR,
ARROW_EXPR,
ALIGNOF_EXPR,
EXPR_STMT,
FOR_STMT,
WHILE_STMT,
DO_STMT,
BREAK_STMT,
CONTINUE_STMT,
SWITCH_STMT,
STMT_EXPR,
COMPOUND_LITERAL_EXPR,
  LAST_C_TREE_CODE
};
extern unsigned char statement_code_p[256];
extern int stmts_are_full_exprs_p (void);
extern int anon_aggr_type_p (tree);
extern void emit_local_var (tree);
extern void make_rtl_for_local_static (tree);
extern tree do_case (tree, tree);
extern tree build_stmt (enum tree_code, ...);
extern tree build_case_label (tree, tree, tree);
extern tree build_continue_stmt (void);
extern tree build_break_stmt (void);
extern void c_expand_asm_operands (tree, tree, tree, tree, int, location_t);
extern tree build_unary_op (enum tree_code, tree, int);
extern tree build_binary_op (enum tree_code, tree, tree, int);
extern int lvalue_p (tree);
extern tree default_conversion (tree);
extern tree common_type (tree, tree);
extern tree decl_constant_value (tree);
extern tree boolean_increment (enum tree_code, tree);
extern void extract_interface_info (void);
extern int case_compare (splay_tree_key, splay_tree_key);
extern tree c_add_case_label (splay_tree, tree, tree, tree);
extern void c_do_switch_warnings (splay_tree, tree);
extern tree build_function_call (tree, tree);
extern tree finish_label_address_expr (tree);
extern tree lookup_label (tree);
extern int vector_types_convertible_p (tree t1, tree t2);
extern rtx c_expand_expr (tree, rtx, enum machine_mode, int, rtx *);
extern int c_staticp (tree);
extern int c_common_unsafe_for_reeval (tree);
extern void init_c_lex (void);
extern void c_cpp_builtins (cpp_reader *);
extern int pending_lang_change;
struct c_fileinfo
{
  int time;
  short interface_only;
  short interface_unknown;
};
struct c_fileinfo *get_fileinfo (const char *);
extern void dump_time_statistics (void);
extern unsigned char c_dump_tree (void *, tree);
extern void c_warn_unused_result (tree *);
extern void verify_sequence_points (tree);
extern void c_genericize (tree);
extern int c_gimplify_expr (tree *, tree *, tree *);
extern tree c_build_bind_expr (tree, tree);
extern void pch_init (void);
extern int c_common_valid_pch (cpp_reader *pfile, const char *name, int fd);
extern void c_common_read_pch (cpp_reader *pfile, const char *name, int fd,
          const char *orig);
extern void c_common_write_pch (void);
extern void c_common_no_more_pch (void);
extern void c_common_pch_pragma (cpp_reader *pfile);
extern void builtin_define_with_value (const char *, const char *, int);
extern void c_stddef_cpp_builtins (void);
extern void fe_file_change (const struct line_map *);
extern void c_parse_error (const char *, enum cpp_ttype, tree);
extern tree lookup_interface (tree);
extern tree is_class_name (tree);
extern tree objc_is_object_ptr (tree);
extern void objc_check_decl (tree);
extern int objc_comptypes (tree, tree, int);
extern tree objc_message_selector (void);
extern tree lookup_objc_ivar (tree);
extern void *get_current_scope (void);
extern void objc_mark_locals_volatile (void *);
extern void objc_clear_super_receiver (void);
extern int objc_is_public (tree, tree);
extern void init_pp_output (FILE *);
extern void preprocess_file (cpp_reader *);
extern void pp_file_change (const struct line_map *);
extern void pp_dir_change (cpp_reader *, const char *);
struct lang_decl
{
  tree pending_sizes;
};
struct lang_type
{
  struct sorted_fields_type * s;
  tree enum_min;
  tree enum_max;
};
struct language_function
{
  struct c_language_function base;
  tree x_break_label;
  tree x_cont_label;
  struct c_switch * x_switch_stack;
  int returns_value;
  int returns_null;
  int returns_abnormally;
  int warn_about_return_type;
  int extern_inline;
};
extern void c_parse_init (void);
extern void gen_aux_info_record (tree, int, int, int);
extern tree c_break_label;
extern tree c_cont_label;
extern int global_bindings_p (void);
extern void push_scope (void);
extern tree pop_scope (void);
extern void insert_block (tree);
extern tree pushdecl (tree);
extern void c_expand_body (tree);
extern void c_init_decl_processing (void);
extern void c_dup_lang_specific_decl (tree);
extern void c_print_identifier (FILE *, tree, int);
extern tree build_array_declarator (tree, tree, int, int);
extern tree build_enumerator (tree, tree);
extern void check_for_loop_decls (void);
extern void mark_forward_parm_decls (void);
extern int complete_array_type (tree, tree, int);
extern void declare_parm_level (void);
extern void undeclared_variable (tree);
extern tree declare_label (tree);
extern tree define_label (location_t, tree);
extern void finish_decl (tree, tree, tree);
extern tree finish_enum (tree, tree, tree);
extern void finish_function (void);
extern tree finish_struct (tree, tree, tree);
extern tree get_parm_info (unsigned char);
extern tree grokfield (tree, tree, tree);
extern tree groktypename (tree);
extern tree groktypename_in_parm_context (tree);
extern tree implicitly_declare (tree);
extern void keep_next_level (void);
extern tree lookup_name (tree);
extern void pending_xref_error (void);
extern void c_push_function_context (struct function *);
extern void c_pop_function_context (struct function *);
extern void push_parm_decl (tree);
extern tree pushdecl_top_level (tree);
extern tree set_array_declarator_type (tree, tree, int);
extern void shadow_tag (tree);
extern void shadow_tag_warned (tree, int);
extern tree start_enum (tree);
extern int start_function (tree, tree, tree);
extern tree start_decl (tree, tree, int, tree);
extern tree start_struct (enum tree_code, tree);
extern void store_parm_decls (void);
extern tree xref_tag (enum tree_code, tree);
extern int c_expand_decl (tree);
extern tree make_pointer_declarator (tree, tree);
extern int c_disregard_inline_limits (tree);
extern int c_cannot_inline_tree_fn (tree *);
extern unsigned char c_objc_common_init (void);
extern unsigned char c_missing_noreturn_ok_p (tree);
extern tree c_objc_common_truthvalue_conversion (tree expr);
extern void c_objc_common_finish_file (void);
extern int defer_fn (tree);
extern unsigned char c_warn_unused_global_decl (tree);
extern void c_initialize_diagnostics (diagnostic_context *);
extern struct c_switch *c_switch_stack;
extern tree require_complete_type (tree);
extern int same_translation_unit_p (tree, tree);
extern int comptypes (tree, tree);
extern tree c_size_in_bytes (tree);
extern unsigned char c_mark_addressable (tree);
extern void c_incomplete_type_error (tree, tree);
extern tree c_type_promotes_to (tree);
extern tree composite_type (tree, tree);
extern tree build_component_ref (tree, tree);
extern tree build_indirect_ref (tree, const char *);
extern tree build_array_ref (tree, tree);
extern tree build_external_ref (tree, int);
extern tree parser_build_binary_op (enum tree_code, tree, tree);
extern void readonly_error (tree, const char *);
extern tree build_conditional_expr (tree, tree, tree);
extern tree build_compound_expr (tree);
extern tree c_cast_expr (tree, tree);
extern tree build_c_cast (tree, tree);
extern tree build_modify_expr (tree, enum tree_code, tree);
extern void store_init_value (tree, tree);
extern void error_init (const char *);
extern void pedwarn_init (const char *);
extern void start_init (tree, tree, int);
extern void finish_init (void);
extern void really_start_incremental_init (tree);
extern void push_init_level (int);
extern tree pop_init_level (int);
extern void set_init_index (tree, tree);
extern void set_init_label (tree);
extern void process_init_element (tree);
extern tree build_compound_literal (tree, tree);
extern void pedwarn_c90 (const char *, ...) ;
extern void pedwarn_c99 (const char *, ...) ;
extern tree c_start_case (tree);
extern void c_finish_case (tree);
extern tree build_asm_expr (tree, tree, tree, tree, unsigned char);
extern tree build_asm_stmt (tree, tree);
extern tree c_convert_parm_for_inlining (tree, tree, tree, int);
extern int c_types_compatible_p (tree, tree);
extern tree c_begin_compound_stmt (unsigned char);
extern tree c_end_compound_stmt (tree, unsigned char);
extern void c_finish_if_stmt (location_t, tree, tree, tree, unsigned char);
extern void c_finish_loop (location_t, tree, tree, tree, tree, tree, unsigned char);
extern tree c_begin_stmt_expr (void);
extern tree c_finish_stmt_expr (tree);
extern tree c_process_expr_stmt (tree);
extern tree c_finish_expr_stmt (tree);
extern tree c_finish_return (tree);
extern tree c_finish_bc_stmt (tree *, unsigned char);
extern tree c_finish_goto_label (tree);
extern tree c_finish_goto_ptr (tree);
extern tree build_offsetof (tree, tree);
extern int current_function_returns_value;
extern int current_function_returns_null;
extern int current_function_returns_abnormally;
extern int system_header_p;
extern unsigned char c_override_global_bindings_to_false;
extern unsigned char c_eh_initialized_p;
extern void c_finish_incomplete_decl (tree);
extern void *get_current_scope (void);
extern void objc_mark_locals_volatile (void *);
extern void c_write_global_declarations (void);
extern tree static_ctors;
extern tree static_dtors;
static varray_type alias_vars = ((void *)0);
struct tree_alias_ops *current_alias_ops;
static varray_type local_alias_vars;
static varray_type local_alias_varnums;
tree pta_global_var;
static bitmap addrargs;
static alias_var get_alias_var_decl (tree);
static alias_var get_alias_var (tree);
static void find_func_aliases (tree);
static void deal_with_call_aliasing (tree, alias_var);
static alias_var create_fun_alias_var_ptf (tree, tree);
static alias_var create_fun_alias_var (tree, int);
static alias_var create_alias_var (tree);
static void intra_function_call (varray_type);
static void get_values_from_constructor (tree, varray_type *, bitmap, int *);
static unsigned char call_may_clobber (tree);
static unsigned char call_may_return (tree);
static unsigned char
call_may_clobber (tree expr)
{
  int flags;
  if (((enum tree_code) (expr)->common.code) != CALL_EXPR)
    return 0;
  flags = call_expr_flags (expr);
  return (! (flags & (1 | 256 | 2)));
}
static unsigned char
call_may_return (tree expr)
{
  int flags;
  if (((enum tree_code) (expr)->common.code) != CALL_EXPR)
    return 0;
  flags = call_expr_flags (expr);
  return ! (flags & 2);
}
static alias_var
get_alias_var_decl (tree decl)
{
  alias_var newvar;
  if (((enum tree_code) (decl)->common.code) == FIELD_DECL)
    fancy_abort ("gcc.c", 124383, "?");
  if ((tree_code_type[(int) (((enum tree_code) (decl)->common.code))] == 'd'))
    {
      if (((decl)->decl.alias_var1))
 return ((decl)->decl.alias_var1);
    }
  if (((enum tree_code) (decl)->common.code) == FUNCTION_DECL)
    newvar = create_fun_alias_var (decl, 0);
  else
    {
      newvar = create_alias_var (decl);
      if ((((decl)->decl.context) == ((void *)0)
    || ((decl)->common.public_flag)
    || ((decl)->common.static_flag)
    || decl_function_context (decl) == ((void *)0))
   && decl != pta_global_var)
 {
   current_alias_ops->addr_assign (current_alias_ops,
       get_alias_var (pta_global_var),
       newvar);
   if (((decl)->decl.initial))
     find_func_aliases (decl);
 }
    }
  if (!current_alias_ops->ip)
    {
      if (!current_alias_ops->ip_partial
   || (((enum tree_code) (decl)->common.code) != FUNCTION_DECL
       && ((enum tree_code) (decl)->common.code) != PARM_DECL))
 {
   do { if ((local_alias_varnums)->elements_used >= (local_alias_varnums)->num_elements) (((local_alias_varnums)) = varray_grow ((local_alias_varnums), 2 * (local_alias_varnums)->num_elements)); (local_alias_varnums)->data.i[(local_alias_varnums)->elements_used++] = (((newvar)->common.varnum)); } while (0);
   do { if ((local_alias_vars)->elements_used >= (local_alias_vars)->num_elements) (((local_alias_vars)) = varray_grow ((local_alias_vars), 2 * (local_alias_vars)->num_elements)); (local_alias_vars)->data.tree1[(local_alias_vars)->elements_used++] = (decl); } while (0);
 }
    }
  return newvar;
}
static alias_var
get_alias_var (tree expr)
{
  if ((tree_code_type[(int) (((enum tree_code) (expr)->common.code))] == 'd'))
    return get_alias_var_decl (expr);
  if (tree_code_type[(int) (((enum tree_code) (expr)->common.code))] == 'c')
    return ((void *)0);
  switch (((enum tree_code) (expr)->common.code))
    {
    case ARRAY_REF:
    case ARRAY_RANGE_REF:
      {
 tree p;
 for (p = expr;
      ((enum tree_code) (p)->common.code) == ARRAY_REF || ((enum tree_code) (p)->common.code) == ARRAY_RANGE_REF;
      p = ((p)->exp.operands[0]))
   ;
 return get_alias_var (p);
      }
      break;
    case COMPONENT_REF:
      {
 tree p;
 for (p = expr; ((enum tree_code) (p)->common.code) == COMPONENT_REF;
      p = ((p)->exp.operands[0]));
 return get_alias_var (p);
      }
      break;
    case REALPART_EXPR:
    case IMAGPART_EXPR:
    case NOP_EXPR:
    case CONVERT_EXPR:
    case FIX_TRUNC_EXPR:
    case FIX_CEIL_EXPR:
    case FIX_FLOOR_EXPR:
    case FIX_ROUND_EXPR:
    case ADDR_EXPR:
    case INDIRECT_REF:
    case BIT_FIELD_REF:
      return get_alias_var (((expr)->exp.operands[0]));
      break;
    default:
      return ((void *)0);
    }
}
static void
intra_function_call (varray_type args)
{
  size_t l = ((args)->elements_used);
  size_t i;
  alias_var av = get_alias_var (pta_global_var);
  for (i = 0; i < l; i++)
    {
      alias_var argi = ((args)->data.generic[i]);
      size_t j;
      for (j = 0; j < l; j++)
 {
   alias_var argj;
   if (i == j)
     continue;
   argj = ((args)->data.generic[j]);
   if (!((((((argi)->common.decl))->common.type))->type.restrict_flag)
       || !((((((argj)->common.decl))->common.type))->type.restrict_flag))
     if (alias_sets_conflict_p (get_alias_set (((argi)->common.decl)),
           get_alias_set (((argj)->common.decl))))
       current_alias_ops->simple_assign (current_alias_ops, argi, argj);
 }
    }
  for (i = 0; i < l; i++)
    {
      alias_var argav = ((args)->data.generic[i]);
      if (!((((((argav)->common.decl))->common.type))->type.restrict_flag)
   || !((((((av)->common.decl))->common.type))->type.restrict_flag))
 {
   current_alias_ops->simple_assign (current_alias_ops, argav, av);
 }
    }
}
static void
get_values_from_constructor (tree constructor, varray_type *vals,
        bitmap addrargs, int *i)
{
  tree elt_list;
  switch (((enum tree_code) (constructor)->common.code))
    {
    case CONSTRUCTOR:
      {
 for (elt_list = ((constructor)->exp.operands[0]);
      elt_list;
      elt_list = ((elt_list)->common.chain))
   {
     tree value1 = ((elt_list)->list.value);
     if (((enum tree_code) (value)->common.code) == TREE_LIST
  || ((enum tree_code) (value)->common.code) == CONSTRUCTOR)
       {
  get_values_from_constructor (value, vals, addrargs, i); }
     else
       {
  alias_var aav;
  aav = get_alias_var (value);
  if (aav)
    do { if ((*vals)->elements_used >= (*vals)->num_elements) (((*vals)) = varray_grow ((*vals), 2 * (*vals)->num_elements)); (*vals)->data.generic[(*vals)->elements_used++] = (aav); } while (0);
  if (((enum tree_code) (value)->common.code) == ADDR_EXPR)
    bitmap_set_bit (addrargs, *i);
  *i = *i + 1;
       }
   }
      }
      break;
    case TREE_LIST:
      for (elt_list = constructor;
    elt_list;
    elt_list = ((elt_list)->common.chain))
 {
   get_values_from_constructor (((elt_list)->list.value), vals, addrargs, i);
 }
      break;
    default:
      fancy_abort ("gcc.c", 124608, "?");
    }
}
static void
deal_with_call_aliasing (tree callargs, alias_var lhsAV)
{
  tree arg, argp;
  for (argp = callargs;
       argp;
       argp = ((argp)->common.chain))
    {
      arg = ((argp)->list.value);
      if (((enum tree_code) (arg)->common.code) == ADDR_EXPR)
 current_alias_ops->addr_assign (current_alias_ops, lhsAV,
     get_alias_var (arg));
      else if ((((enum tree_code) (((arg)->common.type))->common.code) == POINTER_TYPE || ((enum tree_code) (((arg)->common.type))->common.code) == REFERENCE_TYPE))
 {
   alias_var argtv = get_alias_var (arg);
   if (argtv)
     current_alias_ops->simple_assign (current_alias_ops, lhsAV,
           argtv);
 }
    }
}
static tree
find_op_of_decl (tree cref)
{
  while (!(tree_code_type[(int) (((enum tree_code) (((cref)->exp.operands[0]))->common.code))] == 'd'))
    {
      cref = ((cref)->exp.operands[0]);
    }
  return cref;
}
static void
find_func_aliases (tree stp)
{
  if (((enum tree_code) (stp)->common.code) == RETURN_EXPR)
    {
      stp = ((stp)->exp.operands[0]);
      if (!stp)
 return;
    }
  if (((enum tree_code) (stp)->common.code) == MODIFY_EXPR
      || ((tree_code_type[(int) (((enum tree_code) (stp)->common.code))] == 'd') && ((stp)->decl.initial) != (tree) ((void *)0) ))
    {
      tree op0, op1;
      alias_var lhsAV = ((void *)0);
      alias_var rhsAV = ((void *)0);
      if ((tree_code_type[(int) (((enum tree_code) (stp)->common.code))] == 'd'))
 {
   op0 = stp;
   op1 = ((stp)->decl.initial);
 }
      else
 {
   op0 = ((stp)->exp.operands[0]);
   op1 = ((stp)->exp.operands[1]);
 }
      lhsAV = get_alias_var (op0);
      if (!lhsAV)
 return;
      rhsAV = get_alias_var (op1);
      while (((enum tree_code) (op1)->common.code) == COMPONENT_REF
      && ((enum tree_code) (((op1)->exp.operands[0]))->common.code) == COMPONENT_REF)
 {
   op1 = ((op1)->exp.operands[0]);
 }
      while (((enum tree_code) (op1)->common.code) == BIT_FIELD_REF)
 {
   op1 = ((op1)->exp.operands[0]);
 }
      if (((enum tree_code) (op1)->common.code) == COMPONENT_REF)
 op1 = find_op_of_decl (op1);
      if (is_gimple_variable (op0))
 {
   if (is_gimple_variable (op1))
     {
       if (rhsAV != ((void *)0))
  current_alias_ops->simple_assign (current_alias_ops, lhsAV,
        rhsAV);
     }
   else if (((enum tree_code) (op1)->common.code) == COMPONENT_REF
     && (tree_code_type[(int) (((enum tree_code) (((op1)->exp.operands[0]))->common.code))] == 'd'))
     {
          if (rhsAV != ((void *)0))
  current_alias_ops->simple_assign (current_alias_ops, lhsAV,
        rhsAV);
     }
   else if (is_gimple_cast (op1))
     {
       tree stripped_op1 = op1;
       while ((((enum tree_code) (stripped_op1)->common.code) == NOP_EXPR || ((enum tree_code) (stripped_op1)->common.code) == CONVERT_EXPR || ((enum tree_code) (stripped_op1)->common.code) == NON_LVALUE_EXPR) && ((stripped_op1)->exp.operands[0]) != global_trees[TI_ERROR_MARK] && (((((stripped_op1)->common.type))->type.mode) == ((((((stripped_op1)->exp.operands[0]))->common.type))->type.mode))) (stripped_op1) = ((stripped_op1)->exp.operands[0]);
       if (rhsAV != ((void *)0))
  {
    if (((enum tree_code) (stripped_op1)->common.code) == ADDR_EXPR)
      current_alias_ops->addr_assign (current_alias_ops, lhsAV,
          rhsAV);
    else
      current_alias_ops->simple_assign (current_alias_ops, lhsAV,
            rhsAV);
  }
     }
   else if (((enum tree_code) (op1)->common.code) == INDIRECT_REF
     || ((enum tree_code) (op1)->common.code) == ARRAY_REF
     || (((enum tree_code) (op1)->common.code) == COMPONENT_REF
         && ((enum tree_code) (((op1)->exp.operands[0]))->common.code) == INDIRECT_REF))
     {
       if (rhsAV != ((void *)0))
  current_alias_ops->ptr_assign (current_alias_ops, lhsAV,
            rhsAV);
     }
   else if (((enum tree_code) (op1)->common.code) == ADDR_EXPR)
     {
       if (rhsAV != ((void *)0))
  current_alias_ops->addr_assign (current_alias_ops, lhsAV,
      rhsAV);
     }
   else if (((enum tree_code) (op1)->common.code) == CALL_EXPR)
     {
       if (0)
  {}
       else
  {
    if (call_may_return (op1))
      {
        varray_type args;
        tree arg;
        tree callop0, callop1;
        int argnum;
        args = varray_init (1, VARRAY_DATA_GENERIC, "Arguments");
        bitmap_clear (addrargs);
        callop1 = ((op1)->exp.operands[1]);
        callop0 = ((op1)->exp.operands[0]);
        for (arg = callop1, argnum = 0;
      arg;
      arg = ((arg)->common.chain), argnum++)
   {
     alias_var aav = get_alias_var (((arg)->list.value));
     if (aav)
       {
         do { if ((args)->elements_used >= (args)->num_elements) (((args)) = varray_grow ((args), 2 * (args)->num_elements)); (args)->data.generic[(args)->elements_used++] = (aav); } while (0);
         if (((enum tree_code) (((arg)->list.value))->common.code) == ADDR_EXPR)
    bitmap_set_bit (addrargs, argnum);
       }
   }
        if (current_alias_ops->function_call (current_alias_ops, lhsAV,
           get_alias_var (callop0),
           args, addrargs))
   {
     if (call_may_clobber (op1)
         && !current_alias_ops->ip
                              && flag_argument_noalias != 2)
       {
         intra_function_call (args);
       }
     if ((((enum tree_code) (((op0)->common.type))->common.code) == POINTER_TYPE || ((enum tree_code) (((op0)->common.type))->common.code) == REFERENCE_TYPE))
       deal_with_call_aliasing (callop1, lhsAV);
   }
      }
  }
     }
   else
     {
       bitmap_clear (addrargs);
       if (((enum tree_code) (op1)->common.code) == CONSTRUCTOR)
         {
    varray_type ops;
    int i = 0;
    ops = varray_init (1, VARRAY_DATA_GENERIC, "Operands");
    get_values_from_constructor (op1, &ops, addrargs, &i);
    current_alias_ops->op_assign (current_alias_ops, lhsAV,
      ops, op1, addrargs);
  }
       else
  switch (tree_code_type[(int) (((enum tree_code) (op1)->common.code))])
    {
    case 'e':
    case 's':
    case '<':
    case '1':
    case 'r':
    case '2':
      {
        tree op;
        varray_type ops;
        int i;
        ops = varray_init (1, VARRAY_DATA_GENERIC, "Operands");
        for (i = 0; i < tree_code_length[(int) (((enum tree_code) (op1)->common.code))]; i++)
   {
     alias_var aav;
     op = ((op1)->exp.operands[i]);
     aav = get_alias_var (op);
     if (aav)
       do { if ((ops)->elements_used >= (ops)->num_elements) (((ops)) = varray_grow ((ops), 2 * (ops)->num_elements)); (ops)->data.generic[(ops)->elements_used++] = (aav); } while (0);
     if (((enum tree_code) (op)->common.code) == ADDR_EXPR)
       bitmap_set_bit (addrargs, i);
   }
        current_alias_ops->op_assign (current_alias_ops, lhsAV,
          ops, op1, addrargs);
      }
      break;
    default:
      break;
    }
     }
 }
      else
 {
   if ((((enum tree_code) (op0)->common.code) == COMPONENT_REF
        || ((enum tree_code) (op0)->common.code) == BIT_FIELD_REF)
       && is_gimple_variable (op1))
     {
       if (rhsAV != ((void *)0))
  current_alias_ops->simple_assign (current_alias_ops, lhsAV,
        rhsAV);
     }
   else if (((enum tree_code) (op0)->common.code) == COMPONENT_REF
     && ((enum tree_code) (op1)->common.code) == ADDR_EXPR)
     {
       if (rhsAV != ((void *)0))
  current_alias_ops->addr_assign (current_alias_ops, lhsAV,
      rhsAV);
     }
   else if ((((enum tree_code) (op0)->common.code) == INDIRECT_REF
      || ((enum tree_code) (op0)->common.code) == ARRAY_REF)
     && ((enum tree_code) (((op0)->exp.operands[0]))->common.code) == COMPONENT_REF
     && is_gimple_variable (op1))
     {
       if (rhsAV != ((void *)0))
  current_alias_ops->assign_ptr (current_alias_ops, lhsAV,
            rhsAV);
     }
   else if ((((enum tree_code) (op0)->common.code) == INDIRECT_REF
      || ((enum tree_code) (op0)->common.code) == ARRAY_REF)
     && ((enum tree_code) (op1)->common.code) == ADDR_EXPR)
     {
       alias_var tempvar;
       tree temp = create_tmp_var_raw (global_trees[TI_VOID_TYPE], "aliastmp");
       tempvar = current_alias_ops->add_var (current_alias_ops, temp);
       current_alias_ops->addr_assign (current_alias_ops, tempvar,
           rhsAV);
       current_alias_ops->assign_ptr (current_alias_ops, lhsAV,
          tempvar);
     }
   else if ((((enum tree_code) (op0)->common.code) == INDIRECT_REF
      || ((enum tree_code) (op0)->common.code) == ARRAY_REF)
     && (((enum tree_code) (op1)->common.code) == INDIRECT_REF
         || ((enum tree_code) (op1)->common.code) == ARRAY_REF))
     {
       alias_var tempvar;
       tree temp;
       temp = create_tmp_var_raw (global_trees[TI_VOID_TYPE], "aliastmp");
       tempvar = current_alias_ops->add_var (current_alias_ops, temp);
       current_alias_ops->ptr_assign (current_alias_ops, tempvar,
          rhsAV);
       current_alias_ops->assign_ptr (current_alias_ops, lhsAV,
          tempvar);
     }
   else if ((((enum tree_code) (op0)->common.code) == INDIRECT_REF
      || ((enum tree_code) (op0)->common.code) == ARRAY_REF)
     && is_gimple_cast (op1))
     {
       if (rhsAV != ((void *)0))
  {
    alias_var tempvar;
    tree temp;
    temp = create_tmp_var_raw (global_trees[TI_VOID_TYPE], "aliastmp");
    tempvar = current_alias_ops->add_var (current_alias_ops,
       temp);
    current_alias_ops->simple_assign (current_alias_ops,
          tempvar, rhsAV);
    current_alias_ops->assign_ptr (current_alias_ops, lhsAV,
       tempvar);
  }
     }
   else
     {
       if (rhsAV != ((void *)0))
  current_alias_ops->assign_ptr (current_alias_ops, lhsAV,
            rhsAV);
     }
 }
    }
  else if (((enum tree_code) (stp)->common.code) == CALL_EXPR)
    {
      alias_var callvar;
      varray_type args;
      tree arg;
      callvar = get_alias_var (((stp)->exp.operands[0]));
      if (callvar != ((void *)0))
 {
   if (call_may_clobber (stp))
     {
       int argnum;
       args = varray_init (1, VARRAY_DATA_GENERIC, "Arguments");
       bitmap_clear (addrargs);
       for (arg = ((stp)->exp.operands[1]), argnum=0;
     arg;
     arg = ((arg)->common.chain), argnum++)
  {
    alias_var aav = get_alias_var (((arg)->list.value));
    if (aav)
      {
        do { if ((args)->elements_used >= (args)->num_elements) (((args)) = varray_grow ((args), 2 * (args)->num_elements)); (args)->data.generic[(args)->elements_used++] = (aav); } while (0);
        if (((enum tree_code) (((arg)->list.value))->common.code) == ADDR_EXPR)
   bitmap_set_bit (addrargs, argnum);
      }
  }
       if (current_alias_ops->function_call (current_alias_ops, ((void *)0),
          callvar, args, addrargs))
  if (!current_alias_ops->ip && flag_argument_noalias != 2)
    intra_function_call (args);
     }
 }
  }
}
static alias_var
create_fun_alias_var (tree decl, int force)
{
  alias_var avar, retvar;
  tree rdecl;
  varray_type params = ((void *)0);
  if (!force)
    {
      if (((decl)->decl.alias_var1))
        return ((decl)->decl.alias_var1);
    }
  params = varray_init (1, VARRAY_DATA_GENERIC, "Arguments");
  if (((decl)->decl.arguments) != ((void *)0))
    {
      tree arg;
      for (arg = ((decl)->decl.arguments); arg; arg = ((arg)->common.chain))
 {
   alias_var var = get_alias_var (arg);
   do { if ((params)->elements_used >= (params)->num_elements) (((params)) = varray_grow ((params), 2 * (params)->num_elements)); (params)->data.generic[(params)->elements_used++] = (var); } while (0);
   if ((((enum tree_code) (((arg)->common.type))->common.code) == POINTER_TYPE || ((enum tree_code) (((arg)->common.type))->common.code) == REFERENCE_TYPE)
       && !current_alias_ops->ip
       && (!current_alias_ops->ip_partial
    || !cgraph_local_info (decl)->local))
     current_alias_ops->simple_assign (current_alias_ops, var,
           get_alias_var (pta_global_var));
 }
    }
  else if (((((decl)->common.type))->type.values) != ((void *)0))
    {
      tree arg;
      for (arg = ((((decl)->common.type))->type.values);
    arg && ((arg)->list.value) != global_trees[TI_VOID_TYPE];
    arg = ((arg)->common.chain))
 {
   tree fakedecl = create_tmp_var_raw (((arg)->list.value), "normarg");
   alias_var var;
   ((fakedecl)->decl.context) = current_function_decl;
   var = get_alias_var (fakedecl);
   do { if ((params)->elements_used >= (params)->num_elements) (((params)) = varray_grow ((params), 2 * (params)->num_elements)); (params)->data.generic[(params)->elements_used++] = (var); } while (0);
   if ((((enum tree_code) (((fakedecl)->common.type))->common.code) == POINTER_TYPE || ((enum tree_code) (((fakedecl)->common.type))->common.code) == REFERENCE_TYPE)
       && !current_alias_ops->ip
       && (!current_alias_ops->ip_partial
    || !((decl)->common.static_flag)
    || ((decl)->common.public_flag)))
     current_alias_ops->simple_assign (current_alias_ops, var,
           get_alias_var (pta_global_var));
 }
    }
  else
    {
      tree fakedecl = create_tmp_var_raw (global_trees[TI_VOID_TYPE], "fakearg");
      alias_var fakevar;
      ((fakedecl)->decl.context) = current_function_decl;
      fakevar = get_alias_var (fakedecl);
      do { if ((params)->elements_used >= (params)->num_elements) (((params)) = varray_grow ((params), 2 * (params)->num_elements)); (params)->data.generic[(params)->elements_used++] = (fakevar); } while (0);
    }
  if (!((decl)->decl.result))
    {
      rdecl = create_tmp_var_raw (((((decl)->common.type))->common.type), "_rv_");
      retvar = current_alias_ops->add_var (current_alias_ops, rdecl);
      ((rdecl)->decl.alias_var1) = retvar;
    }
  else
    {
      retvar = current_alias_ops->add_var (current_alias_ops,
        ((decl)->decl.result));
      ((((decl)->decl.result))->decl.alias_var1) = retvar;
    }
  do { if ((alias_vars)->elements_used >= (alias_vars)->num_elements) (((alias_vars)) = varray_grow ((alias_vars), 2 * (alias_vars)->num_elements)); (alias_vars)->data.generic[(alias_vars)->elements_used++] = (retvar); } while (0);
  ((retvar)->common.varnum) = ((alias_vars)->elements_used) - 1;
  avar = current_alias_ops->add_var (current_alias_ops, decl);
  do { if ((alias_vars)->elements_used >= (alias_vars)->num_elements) (((alias_vars)) = varray_grow ((alias_vars), 2 * (alias_vars)->num_elements)); (alias_vars)->data.generic[(alias_vars)->elements_used++] = (avar); } while (0);
  ((avar)->common.varnum) = ((alias_vars)->elements_used) - 1;
  current_alias_ops->function_def (current_alias_ops, avar, params, retvar);
  ((decl)->decl.alias_var1) = avar;
  return avar;
}
static alias_var
create_fun_alias_var_ptf (tree decl, tree type)
{
  alias_var avar, retvar;
  tree rdecl;
  varray_type params = ((void *)0);
  if (((decl)->decl.alias_var1))
    return ((decl)->decl.alias_var1);
  params = varray_init (1, VARRAY_DATA_GENERIC, "Arguments");
  if (((type)->type.values) != ((void *)0))
    {
      tree arg;
      for (arg = ((type)->type.values);
    arg && ((arg)->list.value) != global_trees[TI_VOID_TYPE];
    arg = ((arg)->common.chain))
 {
   tree fakedecl = create_tmp_var_raw (((arg)->list.value), "ptfarg");
   alias_var var;
   ((fakedecl)->decl.context) = ((decl)->decl.context);
   var = get_alias_var (fakedecl);
   do { if ((params)->elements_used >= (params)->num_elements) (((params)) = varray_grow ((params), 2 * (params)->num_elements)); (params)->data.generic[(params)->elements_used++] = (var); } while (0);
 }
    }
  else
    {
      tree fakedecl = create_tmp_var_raw (global_trees[TI_VOID_TYPE], "fakearg");
      alias_var fakevar;
      ((fakedecl)->decl.context) = ((decl)->decl.context);
      fakevar = get_alias_var (fakedecl);
      do { if ((params)->elements_used >= (params)->num_elements) (((params)) = varray_grow ((params), 2 * (params)->num_elements)); (params)->data.generic[(params)->elements_used++] = (fakevar); } while (0);
    }
  rdecl = create_tmp_var_raw (((type)->common.type), "_rv_");
  retvar = current_alias_ops->add_var (current_alias_ops, rdecl);
  do { if ((alias_vars)->elements_used >= (alias_vars)->num_elements) (((alias_vars)) = varray_grow ((alias_vars), 2 * (alias_vars)->num_elements)); (alias_vars)->data.generic[(alias_vars)->elements_used++] = (retvar); } while (0);
  ((retvar)->common.varnum) = ((alias_vars)->elements_used) - 1;
  avar = current_alias_ops->add_var (current_alias_ops, decl);
  do { if ((alias_vars)->elements_used >= (alias_vars)->num_elements) (((alias_vars)) = varray_grow ((alias_vars), 2 * (alias_vars)->num_elements)); (alias_vars)->data.generic[(alias_vars)->elements_used++] = (avar); } while (0);
  ((avar)->common.varnum) = ((alias_vars)->elements_used) - 1;
  current_alias_ops->function_def (current_alias_ops, avar, params, retvar);
  ((decl)->decl.alias_var1) = avar;
  return avar;
}
static alias_var
create_alias_var (tree decl)
{
  alias_var avar;
  if (!(tree_code_type[(int) (((enum tree_code) (decl)->common.code))] == 'd'))
    fancy_abort ("gcc.c", 125189, "?");
  if ((tree_code_type[(int) (((enum tree_code) (decl)->common.code))] == 'd'))
    {
      if (((decl)->decl.alias_var1))
 return ((decl)->decl.alias_var1);
    }
  if ((((enum tree_code) (((decl)->common.type))->common.code) == POINTER_TYPE || ((enum tree_code) (((decl)->common.type))->common.code) == REFERENCE_TYPE)
      && ((enum tree_code) (((((decl)->common.type))->common.type))->common.code) == FUNCTION_TYPE)
    {
      avar = create_fun_alias_var_ptf (decl, ((((decl)->common.type))->common.type));
    }
  else
    avar = current_alias_ops->add_var (current_alias_ops, decl);
  if ((tree_code_type[(int) (((enum tree_code) (decl)->common.code))] == 'd'))
    {
      ((decl)->decl.alias_var1) = avar;
    }
  do { if ((alias_vars)->elements_used >= (alias_vars)->num_elements) (((alias_vars)) = varray_grow ((alias_vars), 2 * (alias_vars)->num_elements)); (alias_vars)->data.generic[(alias_vars)->elements_used++] = (avar); } while (0);
  ((avar)->common.varnum) = ((alias_vars)->elements_used) - 1;
  return avar;
}
static void
create_alias_vars (void)
{
  basic_block bb;
   {
     current_alias_ops = ((void *)0);
     flag_tree_points_to = PTA_NONE;
     return;
   }
  pta_global_var = build_decl_stat (VAR_DECL,get_identifier (".pta_global_var"),global_trees[TI_SIZE_TYPE] )
                         ;
  ((pta_global_var)->decl.artificial_flag) = 1;
  ((pta_global_var)->common.readonly_flag) = 1;
  ((pta_global_var)->decl.external_flag) = 0;
  ((pta_global_var)->common.static_flag) = 1;
  ((pta_global_var)->common.used_flag) = 1;
  ((pta_global_var)->decl.context) = current_function_decl;
  ((pta_global_var)->common.volatile_flag) = 1;
  ((pta_global_var)->common.addressable_flag) = 0;
  init_alias_vars ();
  ((current_function_decl)->decl.alias_var1) = ((void *)0);
  get_alias_var (current_function_decl);
  if (cfun->unexpanded_var_list)
    {
      tree vars, var;
      for (vars = cfun->unexpanded_var_list; vars; vars = ((vars)->common.chain))
 {
   var = ((vars)->list.value);
   if (((enum tree_code) (var)->common.code) != LABEL_DECL
       && decl_function_context (var) == ((void *)0)
       && ((var)->decl.initial))
     find_func_aliases (var);
 }
    }
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      block_stmt_iterator bsi;
      for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))
 find_func_aliases (bsi_stmt (bsi));
    }
  pta_global_var = (tree) ((void *)0);
}
struct tree_opt_pass pass_build_pta =
{
  "pta",
  ((void *)0),
  create_alias_vars,
  ((void *)0),
  ((void *)0),
  0,
  TV_TREE_PTA,
  (1 << 3),
  (1 << 5),
  0,
  0,
  0
};
static void
delete_alias_vars (void)
{
  size_t i;
  if (flag_tree_points_to != PTA_ANDERSEN)
    return;
  for (i = 0; i < ((local_alias_vars)->elements_used); i++)
    {
      tree key = ((local_alias_vars)->data.tree1[i]);
      if ((tree_code_type[(int) (((enum tree_code) (key)->common.code))] == 'd'))
 ((key)->decl.alias_var1) = ((void *)0);
      else
 fancy_abort ("gcc.c", 125306, "?");
    }
  for (i = 0; i < ((local_alias_varnums)->elements_used); i ++)
    ((alias_vars)->data.generic[((local_alias_varnums)->data.i[i])]) = ((void *)0);
  if (!current_alias_ops->ip && !current_alias_ops->ip_partial)
    {
      varray_clear(local_alias_vars);
      varray_clear(local_alias_varnums);
    }
  do { if (addrargs) { bitmap_clear (addrargs); free (addrargs); (addrargs) = 0; } } while (0);
  current_alias_ops->cleanup (current_alias_ops);
}
struct tree_opt_pass pass_del_pta =
{
  "pta",
  ((void *)0),
  delete_alias_vars,
  ((void *)0),
  ((void *)0),
  0,
  TV_TREE_PTA,
  (1 << 5),
  0,
  (1 << 5),
  0,
  0
};
void
init_alias_vars (void)
{
  current_alias_ops->init (current_alias_ops);
  addrargs = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
  local_alias_vars = varray_init (10, VARRAY_DATA_TREE, "Local alias vars");
  local_alias_varnums = varray_init (10, VARRAY_DATA_I, "Local alias varnums");
  if ((!current_alias_ops->ip && !current_alias_ops->ip_partial)
      || alias_vars == ((void *)0))
    alias_vars = varray_init (10, VARRAY_DATA_GENERIC, "Alias vars");
}
unsigned char
empty_points_to_set (tree ptr)
{
 alias_var ptrtv;
  if ((tree_code_type[(int) (((enum tree_code) (ptr)->common.code))] == 'd'))
    {
      ptrtv = ((ptr)->decl.alias_var1);
      if (!ptrtv)
 return 1;
    }
  else
    fancy_abort ("gcc.c", 125372, "?");
  return current_alias_ops->empty_points_to_set (current_alias_ops, ptrtv);
}
unsigned char
same_points_to_set (tree ptr, tree var)
{
  alias_var ptrtv, vartv;
  if (ptr == var)
    return 1;
  if ((tree_code_type[(int) (((enum tree_code) (ptr)->common.code))] == 'd'))
    {
      ptrtv = ((ptr)->decl.alias_var1);
      if (!ptrtv)
 return 0;
    }
  else
    fancy_abort ("gcc.c", 125402, "?");
  if ((tree_code_type[(int) (((enum tree_code) (var)->common.code))] == 'd'))
    {
      vartv = ((var)->decl.alias_var1);
      if (!vartv)
 return 0;
    }
  else
    fancy_abort ("gcc.c", 125411, "?");
  return current_alias_ops->same_points_to_set (current_alias_ops, vartv, ptrtv);
}
unsigned char
ptr_may_alias_var (tree ptr, tree var)
{
  alias_var ptrtv, vartv;
  if (ptr == var)
    return 1;
  if ((tree_code_type[(int) (((enum tree_code) (ptr)->common.code))] == 'd'))
    {
      ptrtv = ((ptr)->decl.alias_var1);
      if (!ptrtv)
 return 0;
    }
  else
    fancy_abort ("gcc.c", 125442, "?");
  if ((tree_code_type[(int) (((enum tree_code) (var)->common.code))] == 'd'))
    {
      vartv = ((var)->decl.alias_var1);
      if (!vartv)
 return 0;
    }
  else
    fancy_abort ("gcc.c", 125451, "?");
  return current_alias_ops->may_alias (current_alias_ops, ptrtv, vartv);
}
const char *
alias_get_name (tree t)
{
  const char *name;
    {
      if (((enum tree_code) (t)->common.code) == FUNCTION_DECL)
 name = ((const char *) (((t)->decl.name))->identifier.id.str);
      else if (((enum tree_code) (t)->common.code) == RESULT_DECL)
 name = "<return value>";
      else
 name = get_name (t);
    }
  if (!name)
    {
      char *namep;
      namep = ggc_alloc_stat (2 + 4 + 2 + 1 );
      sprintf (namep, "<UV%x>", ((unsigned)((unsigned long)(t) & 0xffff)));
      return namep;
    }
  return name;
}
const struct ggc_root_tab gt_ggc_r_gt_tree_alias_common_h[] = {
  {
    &local_alias_varnums,
    1,
    sizeof (local_alias_varnums),
    &gt_ggc_mx_varray_head_tag,
    &gt_pch_nx_varray_head_tag
  },
  {
    &local_alias_vars,
    1,
    sizeof (local_alias_vars),
    &gt_ggc_mx_varray_head_tag,
    &gt_pch_nx_varray_head_tag
  },
  {
    &alias_vars,
    1,
    sizeof (alias_vars),
    &gt_ggc_m_P13alias_var_def15varray_head_tag,
    &gt_pch_n_P13alias_var_def15varray_head_tag
  },
  { ((void *)0), 0, 0, ((void *)0), ((void *)0) }
};
typedef enum
{
  UNINITIALIZED = 0,
  UNDEFINED,
  CONSTANT,
  VARYING
} latticevalue;
typedef struct
{
  latticevalue lattice_val;
  tree const_val;
} value;
static sbitmap executable_blocks;
static varray_type cfg_blocks = ((void *)0);
static unsigned int cfg_blocks_num = 0;
static int cfg_blocks_tail;
static int cfg_blocks_head;
static sbitmap bb_in_list;
static value *value_vector;
static varray_type ssa_edges;
static varray_type varying_ssa_edges;
static void initialize (void);
static void finalize_ssa (void);
static void visit_phi_node (tree);
static tree ccp_fold (tree);
static value cp_lattice_meet (value, value);
static void visit_stmt (tree);
static void visit_cond_stmt (tree);
static void visit_assignment (tree);
static void add_var_to_ssa_edges_worklist (tree, value);
static void add_outgoing_control_edges (basic_block);
static void add_control_edge (edge);
static void def_to_varying (tree);
static void set_lattice_value (tree, value);
static void simulate_block (basic_block);
static void simulate_stmt (tree);
static void substitute_and_fold (void);
static value evaluate_stmt (tree);
static void dump_lattice_value (FILE *, const char *, value);
static unsigned char replace_uses_in (tree, unsigned char *);
static latticevalue likely_value (tree);
static tree get_rhs (tree);
static unsigned char set_rhs (tree *, tree);
static value *get_value (tree);
static value get_default_value (tree);
static tree ccp_fold_builtin (tree, tree);
static unsigned char get_strlen (tree, tree *, bitmap);
static unsigned char cfg_blocks_empty_p (void);
static void cfg_blocks_add (basic_block);
static basic_block cfg_blocks_get (void);
static unsigned char need_imm_uses_for_ccp (tree var);
static void
process_ssa_edge_worklist (varray_type *worklist)
{
  while (((*worklist)->elements_used) > 0)
    {
      tree stmt = ((*worklist)->data.tree1[(*worklist)->elements_used - 1]);
      stmt_ann_t ann = stmt_ann (stmt);
      do { ((*worklist)->elements_used--); } while (0);
      if (ann->in_ccp_worklist)
 {
   ann->in_ccp_worklist = 0;
   simulate_stmt (stmt);
 }
    }
}
static void
tree_ssa_ccp (void)
{
  initialize ();
  while (!cfg_blocks_empty_p ()
  || ((ssa_edges)->elements_used) > 0
  || ((varying_ssa_edges)->elements_used) > 0)
    {
      if (!cfg_blocks_empty_p ())
 {
   basic_block dest_block = cfg_blocks_get ();
   simulate_block (dest_block);
 }
      process_ssa_edge_worklist (&varying_ssa_edges);
      process_ssa_edge_worklist (&ssa_edges);
    }
  substitute_and_fold ();
  cleanup_tree_cfg ();
  finalize_ssa ();
  if (dump_file && (dump_flags & (1 << 3)))
    {
      dump_referenced_vars (dump_file);
      fprintf (dump_file, "\n\n");
    }
}
static unsigned char
gate_ccp (void)
{
  return flag_tree_ccp != 0;
}
struct tree_opt_pass pass_ccp =
{
  "ccp",
  gate_ccp,
  tree_ssa_ccp,
  ((void *)0),
  ((void *)0),
  0,
  TV_TREE_CCP,
  (1 << 3) | (1 << 6),
  0,
  0,
  0,
  (1 << 0) | (1 << 1)
    | (1 << 2) | (1 << 3)
    | (1 << 5)
};
static value *
get_value (tree var)
{
  value *val;
  val = &value_vector[(var)->ssa_name.version];
  if (val->lattice_val == UNINITIALIZED)
    *val = get_default_value (var);
  return val;
}
static void
simulate_block (basic_block block)
{
  tree phi;
  if (block == EXIT_BLOCK_PTR)
    return;
  if (dump_file && (dump_flags & (1 << 3)))
    fprintf (dump_file, "\nSimulating block %d\n", block->index);
  for (phi = phi_nodes (block); phi; phi = (((phi))->common.chain))
    visit_phi_node (phi);
  if (!((executable_blocks)->elms [(block->index) / ((unsigned) (8 * 4))] >> (block->index) % ((unsigned) (8 * 4)) & 1))
    {
      block_stmt_iterator j;
      unsigned int normal_edge_count;
      edge e, normal_edge;
      ((executable_blocks)->elms [(block->index) / ((unsigned) (8 * 4))] |= (unsigned long) 1 << (block->index) % ((unsigned) (8 * 4)));
      for (j = bsi_start (block); !bsi_end_p (j); bsi_next (&j))
 visit_stmt (bsi_stmt (j));
      normal_edge_count = 0;
      normal_edge = ((void *)0);
      for (e = block->succ; e; e = e->succ_next)
        {
   if (e->flags & 2)
     {
       add_control_edge (e);
     }
   else
     {
       normal_edge_count++;
       normal_edge = e;
     }
        }
        if (normal_edge_count == 1)
   add_control_edge (normal_edge);
    }
}
static void
simulate_stmt (tree use_stmt)
{
  basic_block use_bb = bb_for_stmt (use_stmt);
  if (dump_file && (dump_flags & (1 << 3)))
    {
      fprintf (dump_file, "\nSimulating statement (from ssa_edges): ");
      print_generic_stmt (dump_file, use_stmt, dump_flags);
    }
  if (((enum tree_code) (use_stmt)->common.code) == PHI_NODE)
    {
      visit_phi_node (use_stmt);
    }
  else if (((executable_blocks)->elms [(use_bb->index) / ((unsigned) (8 * 4))] >> (use_bb->index) % ((unsigned) (8 * 4)) & 1))
    {
      visit_stmt (use_stmt);
    }
}
static void
substitute_and_fold (void)
{
  basic_block bb;
  if (dump_file && (dump_flags & (1 << 3)))
    fprintf (dump_file,
      "\nSubstituing constants and folding statements\n\n");
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      block_stmt_iterator i;
      tree phi;
      for (phi = phi_nodes (bb); phi; phi = (((phi))->common.chain))
 {
   int i;
   for (i = 0; i < (phi)->phi.num_args; i++)
     {
       value *new_val;
       use_operand_p orig_p = get_phi_arg_def_ptr ((phi), (i));
       tree orig = get_use_from_ptr (orig_p);
       if (! (((enum tree_code) (orig)->common.code) == VAR_DECL || ((enum tree_code) (orig)->common.code) == PARM_DECL || ((enum tree_code) (orig)->common.code) == RESULT_DECL || (((enum tree_code) (orig)->common.code) == SSA_NAME && (((enum tree_code) ((orig)->ssa_name.var)->common.code) == VAR_DECL || ((enum tree_code) ((orig)->ssa_name.var)->common.code) == PARM_DECL || ((enum tree_code) ((orig)->ssa_name.var)->common.code) == RESULT_DECL))))
  break;
       new_val = get_value (orig);
       if (new_val->lattice_val == CONSTANT
    && may_propagate_copy (orig, new_val->const_val))
  ((*((orig_p).use)) = (new_val->const_val));
     }
 }
      for (i = bsi_start (bb); !bsi_end_p (i); bsi_next (&i))
 {
          unsigned char replaced_address;
   tree stmt = bsi_stmt (i);
   if (stmt_modified_p (stmt) || !is_exec_stmt (stmt))
     continue;
   if (dump_file && (dump_flags & (1 << 3)))
     {
       fprintf (dump_file, "Line %d: replaced ", get_lineno (stmt));
       print_generic_stmt (dump_file, stmt, (1 << 1));
     }
   if (replace_uses_in (stmt, &replaced_address))
     {
       unsigned char changed = fold_stmt (bsi_stmt_ptr (i));
       stmt = bsi_stmt(i);
       modify_stmt (stmt);
       if (replaced_address || changed)
  {
    mark_new_vars_to_rename (stmt, vars_to_rename);
    if (maybe_clean_eh_stmt (stmt))
      tree_purge_dead_eh_edges (bb);
  }
     }
   if (dump_file && (dump_flags & (1 << 3)))
     {
       fprintf (dump_file, " with ");
       print_generic_stmt (dump_file, stmt, (1 << 1));
       fprintf (dump_file, "\n");
     }
 }
    }
}
static void
visit_phi_node (tree phi)
{
  unsigned char short_circuit = 0;
  value phi_val, *curr_val;
  int i;
  if (((phi)->common.visited))
    return;
  if (dump_file && (dump_flags & (1 << 3)))
    {
      fprintf (dump_file, "\nVisiting PHI node: ");
      print_generic_expr (dump_file, phi, dump_flags);
    }
  curr_val = get_value (get_def_from_ptr (get_phi_result_ptr (phi)));
  switch (curr_val->lattice_val)
    {
    case VARYING:
      if (dump_file && (dump_flags & (1 << 3)))
 fprintf (dump_file, "\n   Shortcircuit. Default of VARYING.");
      short_circuit = 1;
      break;
    case CONSTANT:
      phi_val = *curr_val;
      break;
    case UNDEFINED:
    case UNINITIALIZED:
      phi_val.lattice_val = UNDEFINED;
      phi_val.const_val = (tree) ((void *)0);
      break;
    default:
      fancy_abort ("gcc.c", 126029, "?");
    }
  if (short_circuit || (((get_def_from_ptr (get_phi_result_ptr (phi)))->ssa_name.var)->common.volatile_flag))
    {
      phi_val.lattice_val = VARYING;
      phi_val.const_val = ((void *)0);
    }
  else
    for (i = 0; i < (phi)->phi.num_args; i++)
      {
 edge e = ((phi)->phi.a[i]).e;
 if (dump_file && (dump_flags & (1 << 3)))
   {
     fprintf (dump_file,
       "\n    Argument #%d (%d -> %d %sexecutable)\n",
       i, e->src->index, e->dest->index,
       (e->flags & 4096) ? "" : "not ");
   }
 if (e->flags & 4096)
   {
     tree rdef = get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((i))));
     value *rdef_val, val;
     if (is_gimple_min_invariant (rdef))
       {
  val.lattice_val = CONSTANT;
  val.const_val = rdef;
  rdef_val = &val;
       }
     else
       rdef_val = get_value (rdef);
     phi_val = cp_lattice_meet (phi_val, *rdef_val);
     if (dump_file && (dump_flags & (1 << 3)))
       {
  fprintf (dump_file, "\t");
  print_generic_expr (dump_file, rdef, dump_flags);
  dump_lattice_value (dump_file, "\tValue: ", *rdef_val);
  fprintf (dump_file, "\n");
       }
     if (phi_val.lattice_val == VARYING)
       break;
   }
      }
  if (dump_file && (dump_flags & (1 << 3)))
    {
      dump_lattice_value (dump_file, "\n    PHI node value: ", phi_val);
      fprintf (dump_file, "\n\n");
    }
  set_lattice_value (get_def_from_ptr (get_phi_result_ptr (phi)), phi_val);
  if (phi_val.lattice_val == VARYING)
    ((phi)->common.visited) = 1;
}
static value
cp_lattice_meet (value val1, value val2)
{
  value result;
  if (val1.lattice_val == UNDEFINED)
    return val2;
  else if (val2.lattice_val == UNDEFINED)
    return val1;
  if (val1.lattice_val == VARYING || val2.lattice_val == VARYING)
    {
      result.lattice_val = VARYING;
      result.const_val = (tree) ((void *)0);
      return result;
    }
  if (simple_cst_equal (val1.const_val, val2.const_val) == 1)
    {
      result.lattice_val = CONSTANT;
      result.const_val = val1.const_val;
    }
  else
    {
      result.lattice_val = VARYING;
      result.const_val = (tree) ((void *)0);
    }
  return result;
}
static void
visit_stmt (tree stmt)
{
  size_t i;
  stmt_ann_t ann;
  def_optype defs;
  v_may_def_optype v_may_defs;
  v_must_def_optype v_must_defs;
  if (((stmt)->common.visited))
    return;
  if (dump_file && (dump_flags & (1 << 3)))
    {
      fprintf (dump_file, "\nVisiting statement: ");
      print_generic_stmt (dump_file, stmt, (1 << 1));
      fprintf (dump_file, "\n");
    }
  ann = stmt_ann (stmt);
  if (ann->in_ccp_worklist)
    ann->in_ccp_worklist = 0;
  if (((enum tree_code) (stmt)->common.code) == MODIFY_EXPR
      && ((enum tree_code) (((stmt)->exp.operands[0]))->common.code) == SSA_NAME)
    visit_assignment (stmt);
  else if (((defs = get_def_ops (ann)) ? (defs = get_def_ops (ann))->num_defs : 0) != 0)
    {
      ((stmt)->common.visited) = 1;
      for (i = 0; i < ((defs) ? (defs)->num_defs : 0); i++)
 {
   tree def = (get_def_from_ptr (get_def_op_ptr (((defs)), ((i)))));
   def_to_varying (def);
 }
    }
  else if (((enum tree_code) (stmt)->common.code) == COND_EXPR || ((enum tree_code) (stmt)->common.code) == SWITCH_EXPR)
    visit_cond_stmt (stmt);
  else
    {
      ((stmt)->common.visited) = 1;
      if (computed_goto_p (stmt))
 add_outgoing_control_edges (bb_for_stmt (stmt));
    }
  v_may_defs = get_v_may_def_ops (ann);
  for (i = 0; i < ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0); i++)
    def_to_varying ((get_def_from_ptr (get_v_may_def_result_ptr (((v_may_defs)), ((i))))));
  v_must_defs = get_v_must_def_ops (ann);
  for (i = 0; i < ((v_must_defs) ? (v_must_defs)->num_v_must_defs : 0); i++)
    def_to_varying ((get_def_from_ptr (get_v_must_def_op_ptr (((v_must_defs)), ((i))))));
}
static void
visit_assignment (tree stmt)
{
  value val;
  tree lhs, rhs;
  lhs = ((stmt)->exp.operands[0]);
  rhs = ((stmt)->exp.operands[1]);
  if ((((lhs)->ssa_name.var)->common.volatile_flag))
    {
      val.lattice_val = VARYING;
      val.const_val = (tree) ((void *)0);
    }
  else if (((enum tree_code) (rhs)->common.code) == SSA_NAME)
    {
      value *nval = get_value (rhs);
      val = *nval;
    }
  else
    {
      val = evaluate_stmt (stmt);
    }
  {
    tree lhs = ((stmt)->exp.operands[0]);
    if (val.lattice_val == CONSTANT
 && ((enum tree_code) (lhs)->common.code) == COMPONENT_REF
 && ((((lhs)->exp.operands[1]))->decl.bit_field_flag))
      {
 tree w = widen_bitfield (val.const_val, ((lhs)->exp.operands[1]), lhs);
 if (w && is_gimple_min_invariant (w))
   val.const_val = w;
 else
   {
     val.lattice_val = VARYING;
     val.const_val = ((void *)0);
   }
      }
  }
  set_lattice_value (lhs, val);
  if (val.lattice_val == VARYING)
    ((stmt)->common.visited) = 1;
}
static void
visit_cond_stmt (tree stmt)
{
  edge e;
  value val;
  basic_block block;
  block = bb_for_stmt (stmt);
  val = evaluate_stmt (stmt);
  e = find_taken_edge (block, val.const_val);
  if (e)
    add_control_edge (e);
  else
    {
      ((stmt)->common.visited) = 1;
      add_outgoing_control_edges (block);
    }
}
static void
add_outgoing_control_edges (basic_block bb)
{
  edge e;
  for (e = bb->succ; e; e = e->succ_next)
    add_control_edge (e);
}
static void
add_control_edge (edge e)
{
  basic_block bb = e->dest;
  if (bb == EXIT_BLOCK_PTR)
    return;
  if (e->flags & 4096)
      return;
  e->flags |= 4096;
  if (((bb_in_list)->elms [(bb->index) / ((unsigned) (8 * 4))] >> (bb->index) % ((unsigned) (8 * 4)) & 1))
    return;
  cfg_blocks_add (bb);
  if (dump_file && (dump_flags & (1 << 3)))
    fprintf (dump_file, "Adding Destination of edge (%d -> %d) to worklist\n\n",
      e->src->index, e->dest->index);
}
static tree
ccp_fold (tree stmt)
{
  tree rhs = get_rhs (stmt);
  enum tree_code code = ((enum tree_code) (rhs)->common.code);
  int kind = tree_code_type[(int) (code)];
  tree retval = (tree) ((void *)0);
  if (((enum tree_code) (rhs)->common.code) == SSA_NAME)
    return get_value (rhs)->const_val;
  if (kind == '1')
    {
      tree op0 = ((rhs)->exp.operands[0]);
      if (((enum tree_code) (op0)->common.code) == SSA_NAME)
 {
   value *val = get_value (op0);
   if (val->lattice_val == CONSTANT)
     op0 = get_value (op0)->const_val;
 }
      retval = nondestructive_fold_unary_to_constant (code,
                 ((rhs)->common.type),
            op0);
      if (retval && ! is_gimple_min_invariant (retval))
 return ((void *)0);
      if (! retval && is_gimple_min_invariant (op0))
 return build1_stat (code,((rhs)->common.type),op0 );
    }
  else if (kind == '2'
           || kind == '<'
           || code == TRUTH_AND_EXPR
           || code == TRUTH_OR_EXPR
           || code == TRUTH_XOR_EXPR)
    {
      tree op0 = ((rhs)->exp.operands[0]);
      tree op1 = ((rhs)->exp.operands[1]);
      if (((enum tree_code) (op0)->common.code) == SSA_NAME)
 {
   value *val = get_value (op0);
   if (val->lattice_val == CONSTANT)
     op0 = val->const_val;
 }
      if (((enum tree_code) (op1)->common.code) == SSA_NAME)
 {
   value *val = get_value (op1);
   if (val->lattice_val == CONSTANT)
     op1 = val->const_val;
 }
      retval = nondestructive_fold_binary_to_constant (code,
                  ((rhs)->common.type),
             op0, op1);
      if (retval && ! is_gimple_min_invariant (retval))
 return ((void *)0);
      if (! retval
   && is_gimple_min_invariant (op0)
   && is_gimple_min_invariant (op1))
 return build (code, ((rhs)->common.type), op0, op1);
    }
  else if (code == CALL_EXPR
    && ((enum tree_code) (((rhs)->exp.operands[0]))->common.code) == ADDR_EXPR
    && (((enum tree_code) (((((rhs)->exp.operands[0]))->exp.operands[0]))->common.code)
        == FUNCTION_DECL)
    && (((((((rhs)->exp.operands[0]))->exp.operands[0]))->decl.built_in_class) != NOT_BUILT_IN))
    {
      use_optype uses = get_use_ops (stmt_ann (stmt));
      if (((uses) ? (uses)->num_uses : 0) != 0)
 {
   tree *orig;
   size_t i;
   orig = xmalloc (sizeof (tree) * ((uses) ? (uses)->num_uses : 0));
   for (i = 0; i < ((uses) ? (uses)->num_uses : 0); i++)
     orig[i] = (get_use_from_ptr (get_use_op_ptr (((uses)), ((i)))));
   replace_uses_in (stmt, ((void *)0));
   retval = fold_builtin (rhs);
   for (i = 0; i < ((uses) ? (uses)->num_uses : 0); i++)
     (((*((get_use_op_ptr (((uses)), ((i)))).use)) = ((orig[i]))));
   free (orig);
 }
    }
  else
    return rhs;
  if (retval)
    {
      if (((retval)->common.type) != ((rhs)->common.type))
 retval = fold_convert (((rhs)->common.type), retval);
      if (((retval)->common.type) == ((rhs)->common.type))
 return retval;
    }
  return rhs;
}
static value
evaluate_stmt (tree stmt)
{
  value val;
  tree simplified;
  latticevalue likelyvalue = likely_value (stmt);
  if (likelyvalue == CONSTANT)
    simplified = ccp_fold (stmt);
  else if (likelyvalue == VARYING)
    simplified = get_rhs (stmt);
  else
    simplified = (tree) ((void *)0);
  if (simplified && is_gimple_min_invariant (simplified))
    {
      val.lattice_val = CONSTANT;
      val.const_val = simplified;
    }
  else
    {
      val.lattice_val = (likelyvalue == UNDEFINED ? UNDEFINED : VARYING);
      val.const_val = (tree) ((void *)0);
    }
  return val;
}
static void
dump_lattice_value (FILE *outf, const char *prefix, value val)
{
  switch (val.lattice_val)
    {
    case UNDEFINED:
      fprintf (outf, "%sUNDEFINED", prefix);
      break;
    case VARYING:
      fprintf (outf, "%sVARYING", prefix);
      break;
    case CONSTANT:
      fprintf (outf, "%sCONSTANT ", prefix);
      print_generic_expr (outf, val.const_val, dump_flags);
      break;
    default:
      fancy_abort ("gcc.c", 126575, "?");
    }
}
tree
widen_bitfield (tree val, tree field, tree var)
{
  unsigned long var_size, field_size;
  tree wide_val;
  unsigned long mask;
  unsigned int i;
  if (!host_integerp (((((var)->common.type))->type.size), 1)
      || !host_integerp (((field)->decl.size), 1)
      || !host_integerp (val, 0))
    return (tree) ((void *)0);
  var_size = tree_low_cst (((((var)->common.type))->type.size), 1);
  field_size = tree_low_cst (((field)->decl.size), 1);
  if (field_size > (8 * 4) || var_size > (8 * 4))
    return (tree) ((void *)0);
  if (((field)->common.unsigned_flag)
      || !(tree_low_cst (val, 0) & (((long)1) << (field_size - 1))))
    {
      for (i = 0, mask = 0; i < field_size; i++)
 mask |= ((long) 1) << i;
      wide_val = build (BIT_AND_EXPR, ((var)->common.type), val,
   fold_convert (((var)->common.type), build_int_2_wide ((unsigned long) (mask), (long) (0))));
    }
  else
    {
      for (i = 0, mask = 0; i < (var_size - field_size); i++)
 mask |= ((long) 1) << (var_size - i - 1);
      wide_val = build (BIT_IOR_EXPR, ((var)->common.type), val,
   fold_convert (((var)->common.type), build_int_2_wide ((unsigned long) (mask), (long) (0))));
    }
  return fold (wide_val);
}
static unsigned char
need_imm_uses_for_ccp (tree var)
{
  return get_value (var)->lattice_val != VARYING;
}
static void
initialize (void)
{
  edge e;
  basic_block bb;
  sbitmap virtual_var;
  ssa_edges = varray_init (20, VARRAY_DATA_TREE, "ssa_edges");
  varying_ssa_edges = varray_init (20, VARRAY_DATA_TREE, "varying_ssa_edges");
  executable_blocks = sbitmap_alloc (last_basic_block);
  sbitmap_zero (executable_blocks);
  bb_in_list = sbitmap_alloc (last_basic_block);
  sbitmap_zero (bb_in_list);
  value_vector = (value *) xmalloc (((ssa_names)->elements_used) * sizeof (value));
  memset (value_vector, 0, ((ssa_names)->elements_used) * sizeof (value));
  virtual_var = sbitmap_alloc (((ssa_names)->elements_used));
  sbitmap_zero (virtual_var);
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      block_stmt_iterator i;
      tree stmt;
      stmt_ann_t ann;
      def_optype defs;
      v_may_def_optype v_may_defs;
      v_must_def_optype v_must_defs;
      size_t x;
      int vary;
      for (i = bsi_start (bb); !bsi_end_p (i); bsi_next (&i))
        {
   vary = 0;
   stmt = bsi_stmt (i);
   get_stmt_operands (stmt);
   ann = stmt_ann (stmt);
   defs = get_def_ops (ann);
   for (x = 0; x < ((defs) ? (defs)->num_defs : 0); x++)
     {
       tree def = (get_def_from_ptr (get_def_op_ptr (((defs)), ((x)))));
       if (get_value (def)->lattice_val == VARYING)
  vary = 1;
     }
   ((stmt)->common.visited) = vary;
   v_may_defs = get_v_may_def_ops (ann);
   for (x = 0; x < ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0); x++)
     {
       tree res = (get_def_from_ptr (get_v_may_def_result_ptr (((v_may_defs)), ((x)))));
       get_value (res)->lattice_val = VARYING;
       ((virtual_var)->elms [((res)->ssa_name.version) / ((unsigned) (8 * 4))] |= (unsigned long) 1 << ((res)->ssa_name.version) % ((unsigned) (8 * 4)));
     }
   v_must_defs = get_v_must_def_ops (ann);
   for (x = 0; x < ((v_must_defs) ? (v_must_defs)->num_v_must_defs : 0); x++)
     {
       tree v_must_def = (get_def_from_ptr (get_v_must_def_op_ptr (((v_must_defs)), ((x)))));
       get_value (v_must_def)->lattice_val = VARYING;
       ((virtual_var)->elms [((v_must_def)->ssa_name.version) / ((unsigned) (8 * 4))] |= (unsigned long) 1 << ((v_must_def)->ssa_name.version) % ((unsigned) (8 * 4)));
     }
 }
      for (e = bb->succ; e; e = e->succ_next)
 e->flags &= ~4096;
    }
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      tree phi, var;
      int x;
      for (phi = phi_nodes (bb); phi; phi = (((phi))->common.chain))
        {
   value *val;
   val = get_value (get_def_from_ptr (get_phi_result_ptr (phi)));
   if (val->lattice_val != VARYING)
     {
       for (x = 0; x < (phi)->phi.num_args; x++)
         {
    var = get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((x))));
    if (((enum tree_code) (var)->common.code) == SSA_NAME)
      {
        if (((virtual_var)->elms [((var)->ssa_name.version) / ((unsigned) (8 * 4))] >> ((var)->ssa_name.version) % ((unsigned) (8 * 4)) & 1))
          {
     val->lattice_val = VARYING;
     ((virtual_var)->elms [((get_def_from_ptr (get_phi_result_ptr (phi)))->ssa_name.version) / ((unsigned) (8 * 4))] |= (unsigned long) 1 << ((get_def_from_ptr (get_phi_result_ptr (phi)))->ssa_name.version) % ((unsigned) (8 * 4)))
                                           ;
     break;
   }
      }
 }
     }
   ((phi)->common.visited) = ((val->lattice_val == VARYING) ? 1 : 0);
 }
    }
  free(virtual_var);
  compute_immediate_uses (1 << 0, need_imm_uses_for_ccp);
  if (dump_file && (dump_flags & (1 << 3)))
    dump_immediate_uses (dump_file);
  cfg_blocks = varray_init (20, VARRAY_DATA_BB, "cfg_blocks");
  for (e = ENTRY_BLOCK_PTR->succ; e; e = e->succ_next)
    {
      if (e->dest != EXIT_BLOCK_PTR)
        {
   e->flags |= 4096;
   cfg_blocks_add (e->dest);
 }
    }
}
static void
finalize_ssa (void)
{
  ssa_edges = ((void *)0);
  varying_ssa_edges = ((void *)0);
  cfg_blocks = ((void *)0);
  free (value_vector);
  free(bb_in_list);
  free(executable_blocks);
  free_df ();
}
static unsigned char
cfg_blocks_empty_p (void)
{
  return (cfg_blocks_num == 0);
}
static void
cfg_blocks_add (basic_block bb)
{
   if (bb == ENTRY_BLOCK_PTR || bb == EXIT_BLOCK_PTR)
     return;
   if (((bb_in_list)->elms [(bb->index) / ((unsigned) (8 * 4))] >> (bb->index) % ((unsigned) (8 * 4)) & 1))
     return;
    if (cfg_blocks_empty_p ())
      {
 cfg_blocks_tail = cfg_blocks_head = 0;
 cfg_blocks_num = 1;
      }
    else
      {
 cfg_blocks_num++;
 if (cfg_blocks_num > ((cfg_blocks)->num_elements))
   {
     cfg_blocks_tail = ((cfg_blocks)->num_elements);
     cfg_blocks_head = 0;
     ((cfg_blocks) = varray_grow (cfg_blocks, 2 * ((cfg_blocks)->num_elements)));
   }
 else
   cfg_blocks_tail = (cfg_blocks_tail + 1) % ((cfg_blocks)->num_elements);
      }
    ((cfg_blocks)->data.bb[cfg_blocks_tail]) = bb;
    ((bb_in_list)->elms [(bb->index) / ((unsigned) (8 * 4))] |= (unsigned long) 1 << (bb->index) % ((unsigned) (8 * 4)));
}
static basic_block
cfg_blocks_get (void)
{
  basic_block bb;
  bb = ((cfg_blocks)->data.bb[cfg_blocks_head]);
  cfg_blocks_head = (cfg_blocks_head + 1) % ((cfg_blocks)->num_elements);
  --cfg_blocks_num;
  ((bb_in_list)->elms [(bb->index) / ((unsigned) (8 * 4))] &= ~((unsigned long) 1 << (bb->index) % ((unsigned) (8 * 4))));
  return bb;
}
static void
add_var_to_ssa_edges_worklist (tree var, value val)
{
  tree stmt = (var)->common.chain;
  dataflow_t df = get_immediate_uses (stmt);
  int num_uses = num_immediate_uses (df);
  int i;
  for (i = 0; i < num_uses; i++)
    {
      tree use = immediate_use (df, i);
      if (!((use)->common.visited))
 {
   stmt_ann_t ann = stmt_ann (use);
   if (ann->in_ccp_worklist == 0)
     {
       ann->in_ccp_worklist = 1;
       if (val.lattice_val == VARYING)
  do { if ((varying_ssa_edges)->elements_used >= (varying_ssa_edges)->num_elements) (((varying_ssa_edges)) = varray_grow ((varying_ssa_edges), 2 * (varying_ssa_edges)->num_elements)); (varying_ssa_edges)->data.tree1[(varying_ssa_edges)->elements_used++] = (use); } while (0);
       else
  do { if ((ssa_edges)->elements_used >= (ssa_edges)->num_elements) (((ssa_edges)) = varray_grow ((ssa_edges), 2 * (ssa_edges)->num_elements)); (ssa_edges)->data.tree1[(ssa_edges)->elements_used++] = (use); } while (0);
     }
 }
    }
}
static void
def_to_varying (tree var)
{
  value val;
  val.lattice_val = VARYING;
  val.const_val = (tree) ((void *)0);
  set_lattice_value (var, val);
}
static void
set_lattice_value (tree var, value val)
{
  value *old = get_value (var);
  if (old->lattice_val == CONSTANT && val.lattice_val == CONSTANT
      && !simple_cst_equal (old->const_val, val.const_val))
    {
      val.lattice_val = VARYING;
      val.const_val = (tree) ((void *)0);
    }
  if (old->lattice_val != val.lattice_val)
    {
      if (dump_file && (dump_flags & (1 << 3)))
 {
   dump_lattice_value (dump_file,
         "Lattice value changed to ", val);
   fprintf (dump_file, ".  Adding definition to SSA edges.\n");
 }
      add_var_to_ssa_edges_worklist (var, val);
      *old = val;
    }
}
static unsigned char
replace_uses_in (tree stmt, unsigned char *replaced_addresses_p)
{
  unsigned char replaced = 0;
  use_optype uses;
  size_t i;
  if (replaced_addresses_p)
    *replaced_addresses_p = 0;
  get_stmt_operands (stmt);
  uses = get_use_ops (stmt_ann (stmt));
  for (i = 0; i < ((uses) ? (uses)->num_uses : 0); i++)
    {
      use_operand_p use = get_use_op_ptr ((uses), (i));
      value *val = get_value (get_use_from_ptr (use));
      if (val->lattice_val == CONSTANT)
 {
   ((*((use).use)) = (val->const_val));
   replaced = 1;
   if ((((enum tree_code) (((get_use_from_ptr (use))->common.type))->common.code) == POINTER_TYPE || ((enum tree_code) (((get_use_from_ptr (use))->common.type))->common.code) == REFERENCE_TYPE)
       && replaced_addresses_p)
     *replaced_addresses_p = 1;
 }
    }
  return replaced;
}
static latticevalue
likely_value (tree stmt)
{
  use_optype uses;
  size_t i;
  int found_constant = 0;
  stmt_ann_t ann;
  ann = stmt_ann (stmt);
  if (ann->makes_aliased_loads || ann->has_volatile_ops)
    return VARYING;
  if (get_call_expr_in (stmt) != (tree) ((void *)0))
    return VARYING;
  get_stmt_operands (stmt);
  uses = get_use_ops (ann);
  for (i = 0; i < ((uses) ? (uses)->num_uses : 0); i++)
    {
      tree use = (get_use_from_ptr (get_use_op_ptr (((uses)), ((i)))));
      value *val = get_value (use);
      if (val->lattice_val == UNDEFINED)
 return UNDEFINED;
      if (val->lattice_val == CONSTANT)
 found_constant = 1;
    }
  return ((found_constant || !uses) ? CONSTANT : VARYING);
}
static tree
maybe_fold_offset_to_array_ref (tree base, tree offset, tree orig_type)
{
  tree min_idx, idx, elt_offset = global_trees[TI_INTEGER_ZERO];
  tree array_type, elt_type, elt_size;
  if (((enum tree_code) (base)->common.code) == ARRAY_REF)
    {
      tree low_bound = array_ref_low_bound (base);
      elt_offset = ((base)->exp.operands[1]);
      if (((enum tree_code) (low_bound)->common.code) != INTEGER_CST
   || ((enum tree_code) (elt_offset)->common.code) != INTEGER_CST)
 return (tree) ((void *)0);
      elt_offset = int_const_binop (MINUS_EXPR, elt_offset, low_bound, 0);
      base = ((base)->exp.operands[0]);
    }
  array_type = ((base)->common.type);
  if (((enum tree_code) (array_type)->common.code) != ARRAY_TYPE)
    return (tree) ((void *)0);
  elt_type = ((array_type)->common.type);
  if (!lang_hooks.types_compatible_p (orig_type, elt_type))
    return (tree) ((void *)0);
  elt_size = ((elt_type)->type.size_unit);
  if (integer_zerop (offset))
    {
      if (((enum tree_code) (elt_size)->common.code) != INTEGER_CST)
 elt_size = size_int_wide ((long) (((elt_type)->type.align)), SIZETYPE);
      idx = global_trees[TI_INTEGER_ZERO];
    }
  else
    {
      unsigned long lquo, lrem;
      long hquo, hrem;
      if (((enum tree_code) (elt_size)->common.code) != INTEGER_CST
   || div_and_round_double (TRUNC_DIV_EXPR, 1,
       (((offset)->int_cst.int_cst).low),
       (((offset)->int_cst.int_cst).high),
       (((elt_size)->int_cst.int_cst).low),
       (((elt_size)->int_cst.int_cst).high),
       &lquo, &hquo, &lrem, &hrem)
   || lrem || hrem)
 return (tree) ((void *)0);
      idx = build_int_2_wide (lquo, hquo);
    }
  min_idx = global_trees[TI_INTEGER_ZERO];
  if (((array_type)->type.values))
    {
      if (((((array_type)->type.values))->type.minval))
 min_idx = ((((array_type)->type.values))->type.minval);
      else
 min_idx = fold_convert (((array_type)->type.values), min_idx);
      if (((enum tree_code) (min_idx)->common.code) != INTEGER_CST)
 return (tree) ((void *)0);
      idx = fold_convert (((array_type)->type.values), idx);
      elt_offset = fold_convert (((array_type)->type.values), elt_offset);
    }
  if (!integer_zerop (min_idx))
    idx = int_const_binop (PLUS_EXPR, idx, min_idx, 0);
  if (!integer_zerop (elt_offset))
    idx = int_const_binop (PLUS_EXPR, idx, elt_offset, 0);
  return build (ARRAY_REF, orig_type, base, idx, min_idx,
  size_int_wide ((long) (tree_low_cst (elt_size, 1) / (((elt_type)->type.align) / 8)), SIZETYPE)
                                               );
}
static tree
maybe_fold_offset_to_component_ref (tree record_type, tree base, tree offset,
        tree orig_type, unsigned char base_is_ptr)
{
  tree f, t, field_type, tail_array_field;
  if (((enum tree_code) (record_type)->common.code) != RECORD_TYPE
      && ((enum tree_code) (record_type)->common.code) != UNION_TYPE
      && ((enum tree_code) (record_type)->common.code) != QUAL_UNION_TYPE)
    return (tree) ((void *)0);
  if (lang_hooks.types_compatible_p (record_type, orig_type))
    return (tree) ((void *)0);
  tail_array_field = (tree) ((void *)0);
  for (f = ((record_type)->type.values); f ; f = ((f)->common.chain))
    {
      int cmp;
      if (((enum tree_code) (f)->common.code) != FIELD_DECL)
 continue;
      if (((f)->decl.bit_field_flag))
 continue;
      if (((enum tree_code) (((f)->decl.arguments))->common.code) != INTEGER_CST)
 continue;
      if (!((f)->decl.context))
 continue;
      tail_array_field = (tree) ((void *)0);
      cmp = tree_int_cst_compare (((f)->decl.arguments), offset);
      if (cmp > 0)
 continue;
      field_type = ((f)->common.type);
      if (cmp < 0)
 {
   if (!(((enum tree_code) (field_type)->common.code) == ARRAY_TYPE || ((enum tree_code) (field_type)->common.code) == RECORD_TYPE || ((enum tree_code) (field_type)->common.code) == UNION_TYPE || ((enum tree_code) (field_type)->common.code) == QUAL_UNION_TYPE || ((enum tree_code) (field_type)->common.code) == SET_TYPE))
     continue;
   if (((enum tree_code) (field_type)->common.code) == ARRAY_TYPE)
     tail_array_field = f;
   if (!((f)->decl.size_unit)
       || ((enum tree_code) (((f)->decl.size_unit))->common.code) != INTEGER_CST)
     continue;
   t = int_const_binop (MINUS_EXPR, offset, ((f)->decl.arguments), 1);
   if (!tree_int_cst_lt (t, ((f)->decl.size_unit)))
     continue;
   offset = t;
 }
      else if (lang_hooks.types_compatible_p (orig_type, field_type))
 {
   if (base_is_ptr)
     base = build1_stat (INDIRECT_REF,record_type,base );
   t = build (COMPONENT_REF, field_type, base, f, (tree) ((void *)0));
   return t;
 }
      else if (!(((enum tree_code) (field_type)->common.code) == ARRAY_TYPE || ((enum tree_code) (field_type)->common.code) == RECORD_TYPE || ((enum tree_code) (field_type)->common.code) == UNION_TYPE || ((enum tree_code) (field_type)->common.code) == QUAL_UNION_TYPE || ((enum tree_code) (field_type)->common.code) == SET_TYPE))
 return (tree) ((void *)0);
      goto found;
    }
  if (!tail_array_field)
    return (tree) ((void *)0);
  f = tail_array_field;
  field_type = ((f)->common.type);
 found:
  if (base_is_ptr)
    base = build1_stat (INDIRECT_REF,record_type,base );
  base = build (COMPONENT_REF, field_type, base, f, (tree) ((void *)0));
  t = maybe_fold_offset_to_array_ref (base, offset, orig_type);
  if (t)
    return t;
  return maybe_fold_offset_to_component_ref (field_type, base, offset,
          orig_type, 0);
}
static tree
maybe_fold_stmt_indirect (tree expr, tree base, tree offset)
{
  tree t;
  base = fold (base);
  while ((((enum tree_code) (base)->common.code) == NOP_EXPR || ((enum tree_code) (base)->common.code) == CONVERT_EXPR || ((enum tree_code) (base)->common.code) == NON_LVALUE_EXPR) && ((base)->exp.operands[0]) != global_trees[TI_ERROR_MARK] && (((((base)->common.type))->type.mode) == ((((((base)->exp.operands[0]))->common.type))->type.mode))) (base) = ((base)->exp.operands[0]);
  ((expr)->exp.operands[0]) = base;
  t = fold_read_from_constant_string (expr);
  if (t)
    return t;
  if (((enum tree_code) (base)->common.code) == PLUS_EXPR)
    {
      tree offset2;
      offset2 = ((base)->exp.operands[1]);
      if (((enum tree_code) (offset2)->common.code) != INTEGER_CST)
 return (tree) ((void *)0);
      base = ((base)->exp.operands[0]);
      offset = int_const_binop (PLUS_EXPR, offset, offset2, 1);
    }
  if (((enum tree_code) (base)->common.code) == ADDR_EXPR)
    {
      base = ((base)->exp.operands[0]);
      t = maybe_fold_offset_to_array_ref (base, offset, ((expr)->common.type));
      if (t)
 return t;
      t = maybe_fold_offset_to_component_ref (((base)->common.type), base, offset,
           ((expr)->common.type), 0);
      if (t)
 return t;
      if (integer_zerop (offset)
   && lang_hooks.types_compatible_p (((base)->common.type),
         ((expr)->common.type)))
 return base;
    }
  else
    {
      t = base;
      while ((((enum tree_code) (t)->common.code) == NOP_EXPR || ((enum tree_code) (t)->common.code) == CONVERT_EXPR || ((enum tree_code) (t)->common.code) == NON_LVALUE_EXPR) && ((t)->exp.operands[0]) != global_trees[TI_ERROR_MARK] && (((((t)->common.type))->type.mode) == ((((((t)->exp.operands[0]))->common.type))->type.mode))) (t) = ((t)->exp.operands[0]);
      if (((enum tree_code) (t)->common.code) == ADDR_EXPR
   && ((enum tree_code) (((t)->exp.operands[0]))->common.code) == STRING_CST)
 {
   return global_trees[TI_INTEGER_ZERO];
 }
      if ((((enum tree_code) (((base)->common.type))->common.code) == POINTER_TYPE || ((enum tree_code) (((base)->common.type))->common.code) == REFERENCE_TYPE))
 {
          t = maybe_fold_offset_to_component_ref (((((base)->common.type))->common.type),
        base, offset,
        ((expr)->common.type), 1);
   if (t)
     return t;
 }
    }
  return (tree) ((void *)0);
}
static tree
maybe_fold_stmt_addition (tree expr)
{
  tree op0 = ((expr)->exp.operands[0]);
  tree op1 = ((expr)->exp.operands[1]);
  tree ptr_type = ((expr)->common.type);
  tree ptd_type;
  tree t;
  unsigned char subtract = (((enum tree_code) (expr)->common.code) == MINUS_EXPR);
  if (!(((enum tree_code) (ptr_type)->common.code) == POINTER_TYPE || ((enum tree_code) (ptr_type)->common.code) == REFERENCE_TYPE))
    return (tree) ((void *)0);
  if ((((enum tree_code) (((op0)->common.type))->common.code) == INTEGER_TYPE || ((enum tree_code) (((op0)->common.type))->common.code) == ENUMERAL_TYPE || ((enum tree_code) (((op0)->common.type))->common.code) == BOOLEAN_TYPE || ((enum tree_code) (((op0)->common.type))->common.code) == CHAR_TYPE))
    {
      if (subtract)
 return (tree) ((void *)0);
      t = op0, op0 = op1, op1 = t;
    }
  if (((enum tree_code) (op1)->common.code) != INTEGER_CST)
    return (tree) ((void *)0);
  if (((enum tree_code) (op0)->common.code) != ADDR_EXPR)
    return (tree) ((void *)0);
  op0 = ((op0)->exp.operands[0]);
  while (((enum tree_code) (op0)->common.code) == ARRAY_REF)
    {
      tree array_obj = ((op0)->exp.operands[0]);
      tree array_idx = ((op0)->exp.operands[1]);
      tree elt_type = ((op0)->common.type);
      tree elt_size = ((elt_type)->type.size_unit);
      tree min_idx;
      if (((enum tree_code) (array_idx)->common.code) != INTEGER_CST)
 break;
      if (((enum tree_code) (elt_size)->common.code) != INTEGER_CST)
 break;
      min_idx = ((((array_obj)->common.type))->type.values);
      if (min_idx)
 {
   min_idx = ((min_idx)->type.minval);
   if (min_idx)
     {
       if (((enum tree_code) (min_idx)->common.code) != INTEGER_CST)
  break;
       array_idx = convert (((min_idx)->common.type), array_idx);
       if (!integer_zerop (min_idx))
  array_idx = int_const_binop (MINUS_EXPR, array_idx,
          min_idx, 0);
     }
 }
      array_idx = convert (sizetype_tab[(int) SIZETYPE], array_idx);
      array_idx = int_const_binop (MULT_EXPR, array_idx, elt_size, 0);
      if (subtract
   && ((((op1)->common.type))->common.unsigned_flag)
   && tree_int_cst_lt (array_idx, op1))
 return ((void *)0);
      op1 = int_const_binop (subtract ? MINUS_EXPR : PLUS_EXPR,
        array_idx, op1, 0);
      subtract = 0;
      op0 = array_obj;
    }
  if (subtract)
    {
      if (((((op1)->common.type))->common.unsigned_flag))
 return ((void *)0);
      op1 = fold (build1_stat (NEGATE_EXPR,((op1)->common.type),op1 ));
      if (((enum tree_code) (op1)->common.code) != INTEGER_CST)
 return ((void *)0);
    }
  ptd_type = ((ptr_type)->common.type);
  t = maybe_fold_offset_to_array_ref (op0, op1, ptd_type);
  if (!t)
    t = maybe_fold_offset_to_component_ref (((op0)->common.type), op0, op1,
         ptd_type, 0);
  if (t)
    t = build1_stat (ADDR_EXPR,ptr_type,t );
  return t;
}
static tree
fold_stmt_r (tree *expr_p, int *walk_subtrees, void *data)
{
  unsigned char *changed_p = data;
  tree expr = *expr_p, t;
  switch (((enum tree_code) (expr)->common.code))
    {
    case INDIRECT_REF:
      t = walk_tree (&((expr)->exp.operands[0]), fold_stmt_r, data, ((void *)0));
      if (t)
 return t;
      *walk_subtrees = 0;
      t = maybe_fold_stmt_indirect (expr, ((expr)->exp.operands[0]),
        global_trees[TI_INTEGER_ZERO]);
      break;
    case ADDR_EXPR:
      t = walk_tree (&((expr)->exp.operands[0]), fold_stmt_r, data, ((void *)0));
      if (t)
 return t;
      *walk_subtrees = 0;
      if (*changed_p)
        recompute_tree_invarant_for_addr_expr (expr);
      return (tree) ((void *)0);
    case PLUS_EXPR:
    case MINUS_EXPR:
      t = walk_tree (&((expr)->exp.operands[0]), fold_stmt_r, data, ((void *)0));
      if (t)
 return t;
      t = walk_tree (&((expr)->exp.operands[1]), fold_stmt_r, data, ((void *)0));
      if (t)
 return t;
      *walk_subtrees = 0;
      t = maybe_fold_stmt_addition (expr);
      break;
    case COMPONENT_REF:
      t = walk_tree (&((expr)->exp.operands[0]), fold_stmt_r, data, ((void *)0));
      if (t)
        return t;
      *walk_subtrees = 0;
      if ((current_file_decl && ((current_file_decl)->common.chain))
        && (((((expr)->exp.operands[1]))->decl.context) !=
            ((((expr)->exp.operands[0]))->common.type)))
        {
          tree f;
          tree orig_field = ((expr)->exp.operands[1]);
          tree orig_type = ((orig_field)->common.type);
          for (f = ((((((expr)->exp.operands[0]))->common.type))->type.values);
              f; f = ((f)->common.chain))
            {
              if (lang_hooks.types_compatible_p (((f)->common.type), orig_type)
                  && tree_int_cst_compare (((f)->decl.u2.t),
                                          ((orig_field)->decl.u2.t))
                      == 0
                  && tree_int_cst_compare (((f)->decl.arguments),
                                          ((orig_field)->decl.arguments))
                      == 0)
                {
                  ((expr)->exp.operands[1]) = f;
                  break;
                }
            }
        }
      break;
    default:
      return (tree) ((void *)0);
    }
  if (t)
    {
      *expr_p = t;
      *changed_p = 1;
    }
  return (tree) ((void *)0);
}
unsigned char
fold_stmt (tree *stmt_p)
{
  tree rhs, result, stmt;
  unsigned char changed = 0;
  stmt = *stmt_p;
  if (walk_tree (stmt_p, fold_stmt_r, &changed, ((void *)0)))
    {
      *stmt_p
 = build_function_call_expr (implicit_built_in_decls[BUILT_IN_TRAP],
        ((void *)0));
      return 1;
    }
  rhs = get_rhs (stmt);
  if (!rhs)
    return changed;
  result = (tree) ((void *)0);
  if (((enum tree_code) (rhs)->common.code) == CALL_EXPR)
    {
      tree callee;
      callee = get_callee_fndecl (rhs);
      if (callee && (((callee)->decl.built_in_class) != NOT_BUILT_IN))
 result = ccp_fold_builtin (stmt, rhs);
      else
 {
   callee = ((rhs)->exp.operands[0]);
   if (((enum tree_code) (callee)->common.code) == OBJ_TYPE_REF
       && lang_hooks.fold_obj_type_ref
       && ((enum tree_code) ((((callee))->exp.operands[1]))->common.code) == ADDR_EXPR
       && (tree_code_type[(int) (((enum tree_code) ((((((callee))->exp.operands[1]))->exp.operands[0]))->common.code))] == 'd'))
     {
       tree t;
       t = (((((((callee))->exp.operands[1]))->exp.operands[0]))->common.type);
       t = lang_hooks.fold_obj_type_ref (callee, t);
       if (t)
  {
    ((rhs)->exp.operands[0]) = t;
    changed = 1;
  }
     }
 }
    }
  if (result == (tree) ((void *)0))
    result = fold (rhs);
  while (tree_ssa_useless_type_conversion (result)) result = ((result)->exp.operands[0]);
  if (result != rhs)
    changed |= set_rhs (stmt_p, result);
  return changed;
}
static tree
get_rhs (tree stmt)
{
  enum tree_code code = ((enum tree_code) (stmt)->common.code);
  if (code == MODIFY_EXPR)
    return ((stmt)->exp.operands[1]);
  if (code == COND_EXPR)
    return ((((stmt))->exp.operands[0]));
  else if (code == SWITCH_EXPR)
    return (((stmt))->exp.operands[0]);
  else if (code == RETURN_EXPR)
    {
      if (!((stmt)->exp.operands[0]))
 return (tree) ((void *)0);
      if (((enum tree_code) (((stmt)->exp.operands[0]))->common.code) == MODIFY_EXPR)
 return ((((stmt)->exp.operands[0]))->exp.operands[1]);
      else
 return ((stmt)->exp.operands[0]);
    }
  else if (code == GOTO_EXPR)
    return (((stmt))->exp.operands[0]);
  else if (code == LABEL_EXPR)
    return (((stmt))->exp.operands[0]);
  else
    return stmt;
}
static unsigned char
set_rhs (tree *stmt_p, tree expr)
{
  tree stmt = *stmt_p;
  enum tree_code code = ((enum tree_code) (expr)->common.code);
  if (tree_code_type[(int) (code)] == '2')
    {
      if (!is_gimple_val (((expr)->exp.operands[0]))
   || !is_gimple_val (((expr)->exp.operands[1])))
 return 0;
    }
  else if (tree_code_type[(int) (code)] == '1')
    {
      if (!is_gimple_val (((expr)->exp.operands[0])))
 return 0;
    }
  code = ((enum tree_code) (stmt)->common.code);
  if (code == MODIFY_EXPR)
    ((stmt)->exp.operands[1]) = expr;
  else if (code == COND_EXPR)
    ((((stmt))->exp.operands[0])) = expr;
  else if (code == SWITCH_EXPR)
    (((stmt))->exp.operands[0]) = expr;
  else if (code == RETURN_EXPR)
    {
      if (((stmt)->exp.operands[0])
   && ((enum tree_code) (((stmt)->exp.operands[0]))->common.code) == MODIFY_EXPR)
 ((((stmt)->exp.operands[0]))->exp.operands[1]) = expr;
      else
 ((stmt)->exp.operands[0]) = expr;
    }
  else if (code == GOTO_EXPR)
    (((stmt))->exp.operands[0]) = expr;
  else if (code == LABEL_EXPR)
    (((stmt))->exp.operands[0]) = expr;
  else
    {
      stmt_ann_t ann = stmt_ann (stmt);
      *stmt_p = ((expr)->common.side_effects_flag) ? expr : build_empty_stmt ();
      (*stmt_p)->common.ann = (tree_ann_t) ann;
      if (((expr)->common.side_effects_flag))
 {
   def_optype defs;
   v_may_def_optype v_may_defs;
   v_must_def_optype v_must_defs;
   size_t i;
   defs = get_def_ops (ann);
   for (i = 0; i < ((defs) ? (defs)->num_defs : 0); i++)
     {
       tree var = (get_def_from_ptr (get_def_op_ptr (((defs)), ((i)))));
       if (((enum tree_code) (var)->common.code) == SSA_NAME)
  (var)->common.chain = *stmt_p;
     }
   v_may_defs = get_v_may_def_ops (ann);
   for (i = 0; i < ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0); i++)
     {
       tree var = (get_def_from_ptr (get_v_may_def_result_ptr (((v_may_defs)), ((i)))));
       if (((enum tree_code) (var)->common.code) == SSA_NAME)
  (var)->common.chain = *stmt_p;
     }
   v_must_defs = get_v_must_def_ops (ann);
   for (i = 0; i < ((v_must_defs) ? (v_must_defs)->num_v_must_defs : 0); i++)
     {
       tree var = (get_def_from_ptr (get_v_must_def_op_ptr (((v_must_defs)), ((i)))));
       if (((enum tree_code) (var)->common.code) == SSA_NAME)
  (var)->common.chain = *stmt_p;
     }
 }
    }
  return 1;
}
static value
get_default_value (tree var)
{
  value val;
  tree sym;
  if (((enum tree_code) (var)->common.code) == SSA_NAME)
    sym = (var)->ssa_name.var;
  else
    {
      sym = var;
    }
  val.lattice_val = UNDEFINED;
  val.const_val = (tree) ((void *)0);
  if (((enum tree_code) (sym)->common.code) == PARM_DECL || ((sym)->common.volatile_flag))
    {
      val.lattice_val = VARYING;
    }
  else if (decl_function_context (sym) != current_function_decl
           || ((sym)->common.static_flag))
    {
      val.lattice_val = VARYING;
      if (((sym)->common.readonly_flag)
   && ((sym)->decl.initial)
   && is_gimple_min_invariant (((sym)->decl.initial)))
 {
   val.lattice_val = CONSTANT;
   val.const_val = ((sym)->decl.initial);
 }
    }
  else
    {
      enum tree_code code;
      tree stmt = (var)->common.chain;
      if (!(((enum tree_code) (stmt)->common.code) == NOP_EXPR && (((enum tree_code) (((stmt)->common.type))->common.code) == VOID_TYPE) && integer_zerop (((stmt)->exp.operands[0]))))
        {
   code = ((enum tree_code) (stmt)->common.code);
   if (code != MODIFY_EXPR && code != PHI_NODE)
     val.lattice_val = VARYING;
 }
    }
  return val;
}
static tree
ccp_fold_builtin (tree stmt, tree fn)
{
  tree result, strlen_val[2];
  tree arglist = ((fn)->exp.operands[1]), a;
  tree callee = get_callee_fndecl (fn);
  bitmap visited;
  int strlen_arg, i;
  if (((callee)->decl.built_in_class) == BUILT_IN_MD)
    return (tree) ((void *)0);
  result = fold_builtin (fn);
  if (result)
    return result;
  if (!arglist)
    return (tree) ((void *)0);
  switch (((callee)->decl.u1.f))
    {
    case BUILT_IN_STRLEN:
    case BUILT_IN_FPUTS:
    case BUILT_IN_FPUTS_UNLOCKED:
      strlen_arg = 1;
      break;
    case BUILT_IN_STRCPY:
    case BUILT_IN_STRNCPY:
      strlen_arg = 2;
      break;
    default:
      return (tree) ((void *)0);
    }
  visited = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
  memset (strlen_val, 0, sizeof (strlen_val));
  for (i = 0, a = arglist;
       strlen_arg;
       i++, strlen_arg >>= 1, a = ((a)->common.chain))
    if (strlen_arg & 1)
      {
 bitmap_clear (visited);
 if (!get_strlen (((a)->list.value1), &strlen_val[i], visited))
   strlen_val[i] = (tree) ((void *)0);
      }
  do { if (visited) { bitmap_clear (visited); free (visited); (visited) = 0; } } while (0);
  switch (((callee)->decl.u1.f))
    {
    case BUILT_IN_STRLEN:
      if (strlen_val[0]
   && global_trees[TI_SIZE_TYPE])
 {
   tree new = convert (global_trees[TI_SIZE_TYPE], strlen_val[0]);
   if (is_gimple_val (new)
       || (is_gimple_cast (new)
    && is_gimple_val (((new)->exp.operands[0]))))
     return new;
   else
     return (tree) ((void *)0);
 }
      return strlen_val[0];
    case BUILT_IN_STRCPY:
      if (strlen_val[1]
   && is_gimple_val (strlen_val[1]))
      return simplify_builtin_strcpy (arglist, strlen_val[1]);
    case BUILT_IN_STRNCPY:
      if (strlen_val[1]
   && is_gimple_val (strlen_val[1]))
      return simplify_builtin_strncpy (arglist, strlen_val[1]);
    case BUILT_IN_FPUTS:
      return simplify_builtin_fputs (arglist,
         ((enum tree_code) (stmt)->common.code) != MODIFY_EXPR, 0,
         strlen_val[0]);
    case BUILT_IN_FPUTS_UNLOCKED:
      return simplify_builtin_fputs (arglist,
         ((enum tree_code) (stmt)->common.code) != MODIFY_EXPR, 1,
         strlen_val[0]);
    default:
      fancy_abort ("gcc.c", 127919, "?");
    }
  return (tree) ((void *)0);
}
static unsigned char
get_strlen (tree arg, tree *length, bitmap visited)
{
  tree var, def_stmt, val;
  if (((enum tree_code) (arg)->common.code) != SSA_NAME)
    {
      val = c_strlen (arg, 1);
      if (!val)
 return 0;
      if (*length && simple_cst_equal (val, *length) != 1)
 return 0;
      *length = val;
      return 1;
    }
  if (bitmap_bit_p (visited, (arg)->ssa_name.version))
    return 1;
  bitmap_set_bit (visited, (arg)->ssa_name.version);
  var = arg;
  def_stmt = (var)->common.chain;
  switch (((enum tree_code) (def_stmt)->common.code))
    {
      case MODIFY_EXPR:
 {
   tree len, rhs;
   rhs = ((def_stmt)->exp.operands[1]);
   while ((((enum tree_code) (rhs)->common.code) == NOP_EXPR || ((enum tree_code) (rhs)->common.code) == CONVERT_EXPR || ((enum tree_code) (rhs)->common.code) == NON_LVALUE_EXPR) && ((rhs)->exp.operands[0]) != global_trees[TI_ERROR_MARK] && (((((rhs)->common.type))->type.mode) == ((((((rhs)->exp.operands[0]))->common.type))->type.mode))) (rhs) = ((rhs)->exp.operands[0]);
   if (((enum tree_code) (rhs)->common.code) == SSA_NAME)
     return get_strlen (rhs, length, visited);
   len = c_strlen (rhs, 1);
   if (len)
     {
       if (*length && simple_cst_equal (len, *length) != 1)
  return 0;
       *length = len;
       return 1;
     }
   break;
 }
      case PHI_NODE:
 {
   int i;
   for (i = 0; i < (def_stmt)->phi.num_args; i++)
     {
       tree arg = get_use_from_ptr (get_phi_arg_def_ptr (((def_stmt)), ((i))));
       if (arg == get_def_from_ptr (get_phi_result_ptr (def_stmt)))
  continue;
       if (!get_strlen (arg, length, visited))
  return 0;
     }
   return 1;
 }
      default:
 break;
    }
  return 0;
}
static void
execute_fold_all_builtins (void)
{
  basic_block bb;
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      block_stmt_iterator i;
      for (i = bsi_start (bb); !bsi_end_p (i); bsi_next (&i))
 {
   tree *stmtp = bsi_stmt_ptr (i);
   tree call = get_rhs (*stmtp);
   tree callee, result;
   if (!call || ((enum tree_code) (call)->common.code) != CALL_EXPR)
     continue;
   callee = get_callee_fndecl (call);
   if (!callee || ((callee)->decl.built_in_class) != BUILT_IN_NORMAL)
     continue;
   result = ccp_fold_builtin (*stmtp, call);
   if (!result)
     switch (((callee)->decl.u1.f))
       {
       case BUILT_IN_CONSTANT_P:
  result = global_trees[TI_INTEGER_ZERO];
  break;
       default:
  continue;
       }
   if (dump_file && (dump_flags & (1 << 3)))
     {
       fprintf (dump_file, "Simplified\n  ");
       print_generic_stmt (dump_file, *stmtp, dump_flags);
     }
   if (set_rhs (stmtp, result))
     modify_stmt (*stmtp);
   if (dump_file && (dump_flags & (1 << 3)))
     {
       fprintf (dump_file, "to\n  ");
       print_generic_stmt (dump_file, *stmtp, dump_flags);
       fprintf (dump_file, "\n");
     }
 }
    }
}
struct tree_opt_pass pass_fold_builtins =
{
  "fab",
  ((void *)0),
  execute_fold_all_builtins,
  ((void *)0),
  ((void *)0),
  0,
  0,
  (1 << 3) | (1 << 6),
  0,
  0,
  0,
  (1 << 0) | (1 << 3)
};
const struct ggc_root_tab gt_ggc_r_gt_tree_ssa_ccp_h[] = {
  {
    &varying_ssa_edges,
    1,
    sizeof (varying_ssa_edges),
    &gt_ggc_mx_varray_head_tag,
    &gt_pch_nx_varray_head_tag
  },
  {
    &ssa_edges,
    1,
    sizeof (ssa_edges),
    &gt_ggc_mx_varray_head_tag,
    &gt_pch_nx_varray_head_tag
  },
  {
    &cfg_blocks,
    1,
    sizeof (cfg_blocks),
    &gt_ggc_mx_varray_head_tag,
    &gt_pch_nx_varray_head_tag
  },
  { ((void *)0), 0, 0, ((void *)0), ((void *)0) }
};
static htab_t value_table;
typedef struct val_expr_pair_d
{
  tree v;
  tree e;
  vuse_optype vuses;
  hashval_t hashcode;
} *val_expr_pair_t;
static void set_value_handle (tree e, tree v);
static tree
make_value_handle (tree type)
{
  static unsigned int id = 0;
  tree vh;
  vh = build0_stat (VALUE_HANDLE,type );
  ((vh)->value_handle.id) = id++;
  return vh;
}
hashval_t
vn_compute (tree expr, hashval_t val, vuse_optype vuses)
{
  size_t i;
  val = iterative_hash_expr (expr, val);
  for (i = 0; i < ((vuses) ? (vuses)->num_vuses : 0); i++)
    val = iterative_hash_expr ((get_use_from_ptr (get_vuse_op_ptr (((vuses)), ((i))))), val);
  return val;
}
unsigned char
expressions_equal_p (tree e1, tree e2)
{
  tree te1, te2;
  if (e1 == e2)
    return 1;
  te1 = ((e1)->common.type);
  te2 = ((e2)->common.type);
  if (((enum tree_code) (e1)->common.code) == ((enum tree_code) (e2)->common.code)
      && (te1 == te2 || lang_hooks.types_compatible_p (te1, te2))
      && operand_equal_p (e1, e2, OEP_PURE_SAME))
    return 1;
  return 0;
}
static hashval_t
val_expr_pair_hash (const void *p)
{
  const val_expr_pair_t ve = (val_expr_pair_t) p;
  return ve->hashcode;
}
static int
val_expr_pair_expr_eq (const void *p1, const void *p2)
{
  const val_expr_pair_t ve1 = (val_expr_pair_t) p1;
  const val_expr_pair_t ve2 = (val_expr_pair_t) p2;
  if (expressions_equal_p (ve1->e, ve2->e))
    return 1;
  return 0;
}
static void
set_value_handle (tree e, tree v)
{
  if (((enum tree_code) (e)->common.code) == SSA_NAME)
    (e)->ssa_name.value_handle = v;
  else if ((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (e)->common.code))])) != 0) || (tree_code_type[(int) (((enum tree_code) (e)->common.code))] == 'd'))
    get_tree_ann (e)->common.value_handle = v;
  else if (is_gimple_min_invariant (e))
    ;
  else
    fancy_abort ("gcc.c", 128304, "?");
}
void
vn_add (tree expr, tree val, vuse_optype vuses)
{
  void **slot;
  val_expr_pair_t new_pair;
  new_pair = xmalloc (sizeof (struct val_expr_pair_d));
  new_pair->e = expr;
  new_pair->v = val;
  new_pair->vuses = vuses;
  new_pair->hashcode = vn_compute (expr, 0, vuses);
  slot = htab_find_slot_with_hash (value_table, new_pair, new_pair->hashcode,
       INSERT);
  if (*slot)
    free (*slot);
  *slot = (void *) new_pair;
  set_value_handle (expr, val);
  add_to_value (val, expr);
}
tree
vn_lookup (tree expr, vuse_optype vuses)
{
  void **slot;
  struct val_expr_pair_d vep = {((void *)0), ((void *)0), ((void *)0), 0};
  if (is_gimple_min_invariant (expr))
    return expr;
  vep.e = expr;
  vep.vuses = vuses;
  vep.hashcode = vn_compute (expr, 0, vuses);
  slot = htab_find_slot_with_hash (value_table, &vep, vep.hashcode, NO_INSERT);
  if (!slot)
    return (tree) ((void *)0);
  else
    return ((val_expr_pair_t) *slot)->v;
}
tree
vn_lookup_or_add (tree expr, vuse_optype vuses)
{
  tree v = vn_lookup (expr, vuses);
  if (v == (tree) ((void *)0))
    {
      v = make_value_handle (((expr)->common.type));
      if (dump_file && (dump_flags & (1 << 3)))
 {
   fprintf (dump_file, "Created value ");
   print_generic_expr (dump_file, v, dump_flags);
   fprintf (dump_file, " for ");
   print_generic_expr (dump_file, expr, dump_flags);
   fprintf (dump_file, "\n");
 }
      vn_add (expr, v, vuses);
    }
  set_value_handle (expr, v);
  return v;
}
tree
get_value_handle (tree expr)
{
  if (((enum tree_code) (expr)->common.code) == SSA_NAME)
    return (expr)->ssa_name.value_handle;
  else if ((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (expr)->common.code))])) != 0) || (tree_code_type[(int) (((enum tree_code) (expr)->common.code))] == 'd'))
    {
      tree_ann_t ann = tree_ann (expr);
      return ((ann) ? ann->common.value_handle : (tree) ((void *)0));
    }
  else if (is_gimple_min_invariant (expr))
    return expr;
  fancy_abort ("gcc.c", 128410, "?");
}
void
vn_init (void)
{
  value_table = htab_create (511, val_expr_pair_hash,
        val_expr_pair_expr_eq, free);
}
void
vn_delete (void)
{
  htab_delete (value_table);
  value_table = ((void *)0);
}
static struct stmt_stats
{
  int total;
  int total_phis;
  int removed;
  int removed_phis;
} stats;
static varray_type worklist;
static sbitmap processed;
static sbitmap last_stmt_necessary;
bitmap *control_dependence_map;
static void set_control_dependence_map_bit (basic_block, int);
static void clear_control_dependence_bitmap (basic_block);
static void find_all_control_dependences (struct edge_list *);
static void find_control_dependence (struct edge_list *, int);
static basic_block find_pdom (basic_block);
static void mark_stmt_necessary (tree, unsigned char);
static void mark_operand_necessary (tree);
static unsigned char need_to_preserve_store (tree);
static void mark_stmt_if_obviously_necessary (tree, unsigned char);
static void find_obviously_necessary_stmts (struct edge_list *);
static void mark_control_dependent_edges_necessary (basic_block, struct edge_list *);
static void propagate_necessity (struct edge_list *);
static void eliminate_unnecessary_stmts (void);
static void remove_dead_phis (basic_block);
static void remove_dead_stmt (block_stmt_iterator *, basic_block);
static void print_stats (void);
static void tree_dce_init (unsigned char);
static void tree_dce_done (unsigned char);
static void
set_control_dependence_map_bit (basic_block bb, int edge_index)
{
  if (bb == ENTRY_BLOCK_PTR)
    return;
  if (bb == EXIT_BLOCK_PTR)
    fancy_abort ("gcc.c", 128545, "?");
  bitmap_set_bit (control_dependence_map[bb->index], edge_index);
}
static
void clear_control_dependence_bitmap (basic_block bb)
{
  bitmap_clear (control_dependence_map[bb->index]);
}
static void
find_all_control_dependences (struct edge_list *el)
{
  int i;
  for (i = 0; i < ((el)->num_edges); ++i)
    find_control_dependence (el, i);
}
static void
find_control_dependence (struct edge_list *el, int edge_index)
{
  basic_block current_block;
  basic_block ending_block;
  if (((el)->index_to_edge[(edge_index)]->src) == ENTRY_BLOCK_PTR)
    ending_block = ENTRY_BLOCK_PTR->next_bb;
  else
    ending_block = find_pdom (((el)->index_to_edge[(edge_index)]->src));
  for (current_block = ((el)->index_to_edge[(edge_index)]->dest);
       current_block != ending_block && current_block != EXIT_BLOCK_PTR;
       current_block = find_pdom (current_block))
    {
      edge e = ((el)->index_to_edge[(edge_index)]);
      if (e->flags & 2)
 continue;
      set_control_dependence_map_bit (current_block, edge_index);
    }
}
static basic_block
find_pdom (basic_block block)
{
  if (block == ENTRY_BLOCK_PTR)
    fancy_abort ("gcc.c", 128610, "?");
  else if (block == EXIT_BLOCK_PTR)
    return EXIT_BLOCK_PTR;
  else
    {
      basic_block bb = get_immediate_dominator (CDI_POST_DOMINATORS, block);
      if (! bb)
 return EXIT_BLOCK_PTR;
      return bb;
    }
}
static void
mark_stmt_necessary (tree stmt, unsigned char add_to_worklist)
{
  if (stmt->common.asm_written_flag)
    return;
  if (dump_file && (dump_flags & (1 << 3)))
    {
      fprintf (dump_file, "Marking useful stmt: ");
      print_generic_stmt (dump_file, stmt, (1 << 1));
      fprintf (dump_file, "\n");
    }
  stmt->common.asm_written_flag = 1;
  if (add_to_worklist)
    do { if ((worklist)->elements_used >= (worklist)->num_elements) (((worklist)) = varray_grow ((worklist), 2 * (worklist)->num_elements)); (worklist)->data.tree1[(worklist)->elements_used++] = (stmt); } while (0);
}
static void
mark_operand_necessary (tree op)
{
  tree stmt;
  int ver;
  ver = (op)->ssa_name.version;
  if (((processed)->elms [(ver) / ((unsigned) (8 * 4))] >> (ver) % ((unsigned) (8 * 4)) & 1))
    return;
  ((processed)->elms [(ver) / ((unsigned) (8 * 4))] |= (unsigned long) 1 << (ver) % ((unsigned) (8 * 4)));
  stmt = (op)->common.chain;
  if (stmt->common.asm_written_flag
      || (((enum tree_code) (stmt)->common.code) == NOP_EXPR && (((enum tree_code) (((stmt)->common.type))->common.code) == VOID_TYPE) && integer_zerop (((stmt)->exp.operands[0]))))
    return;
  stmt->common.asm_written_flag = 1;
  do { if ((worklist)->elements_used >= (worklist)->num_elements) (((worklist)) = varray_grow ((worklist), 2 * (worklist)->num_elements)); (worklist)->data.tree1[(worklist)->elements_used++] = (stmt); } while (0);
}
static unsigned char
need_to_preserve_store (tree ssa_name)
{
  return (needs_to_live_in_memory ((ssa_name)->ssa_name.var));
}
static void
mark_stmt_if_obviously_necessary (tree stmt, unsigned char aggressive)
{
  def_optype defs;
  v_may_def_optype v_may_defs;
  v_must_def_optype v_must_defs;
  stmt_ann_t ann;
  size_t i;
  switch (((enum tree_code) (stmt)->common.code))
    {
    case BIND_EXPR:
    case LABEL_EXPR:
    case CASE_LABEL_EXPR:
      mark_stmt_necessary (stmt, 0);
      return;
    case ASM_EXPR:
    case RESX_EXPR:
    case RETURN_EXPR:
      mark_stmt_necessary (stmt, 1);
      return;
    case CALL_EXPR:
      if (((stmt)->common.side_effects_flag))
 mark_stmt_necessary (stmt, 1);
      return;
    case MODIFY_EXPR:
      if (((enum tree_code) (((stmt)->exp.operands[1]))->common.code) == CALL_EXPR
   && ((((stmt)->exp.operands[1]))->common.side_effects_flag))
 {
   mark_stmt_necessary (stmt, 1);
   return;
 }
      if (((enum tree_code) (((stmt)->exp.operands[0]))->common.code) == EXC_PTR_EXPR
   || ((enum tree_code) (((stmt)->exp.operands[0]))->common.code) == FILTER_EXPR)
 {
   mark_stmt_necessary (stmt, 1);
   return;
 }
      break;
    case GOTO_EXPR:
      if (! simple_goto_p (stmt))
 mark_stmt_necessary (stmt, 1);
      return;
    case COND_EXPR:
      if ((((((((stmt))->exp.operands[1]))))->exp.operands[0])
   == (((((((stmt))->exp.operands[2]))))->exp.operands[0]))
 {
   ((((stmt))->exp.operands[0])) = global_trees[TI_INTEGER_ZERO];
   modify_stmt (stmt);
   return;
 }
    case SWITCH_EXPR:
      if (! aggressive)
 mark_stmt_necessary (stmt, 1);
      break;
    default:
      break;
    }
  ann = stmt_ann (stmt);
  if (ann->has_volatile_ops
      || is_ctrl_altering_stmt (stmt))
    {
      mark_stmt_necessary (stmt, 1);
      return;
    }
  get_stmt_operands (stmt);
  defs = get_def_ops (ann);
  for (i = 0; i < ((defs) ? (defs)->num_defs : 0); i++)
    {
      tree def = (get_def_from_ptr (get_def_op_ptr (((defs)), ((i)))));
      if (need_to_preserve_store (def))
 {
   mark_stmt_necessary (stmt, 1);
   return;
        }
    }
  v_may_defs = get_v_may_def_ops (ann);
  for (i = 0; i < ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0); i++)
    {
      tree v_may_def = (get_def_from_ptr (get_v_may_def_result_ptr (((v_may_defs)), ((i)))));
      if (need_to_preserve_store (v_may_def))
 {
   mark_stmt_necessary (stmt, 1);
   return;
        }
    }
  v_must_defs = get_v_must_def_ops (ann);
  for (i = 0; i < ((v_must_defs) ? (v_must_defs)->num_v_must_defs : 0); i++)
    {
      tree v_must_def = (get_def_from_ptr (get_v_must_def_op_ptr (((v_must_defs)), ((i)))));
      if (need_to_preserve_store (v_must_def))
 {
   mark_stmt_necessary (stmt, 1);
   return;
        }
    }
  return;
}
static void
find_obviously_necessary_stmts (struct edge_list *el)
{
  basic_block bb;
  block_stmt_iterator i;
  edge e;
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      tree phi;
      for (phi = phi_nodes (bb); phi; phi = (((phi))->common.chain))
 {
   phi->common.asm_written_flag = 0;
   if (is_gimple_reg (get_def_from_ptr (get_phi_result_ptr (phi)))
       && need_to_preserve_store (get_def_from_ptr (get_phi_result_ptr (phi))))
     mark_stmt_necessary (phi, 1);
        }
      for (i = bsi_start (bb); ! bsi_end_p (i); bsi_next (&i))
 {
   tree stmt = bsi_stmt (i);
   stmt->common.asm_written_flag = 0;
   mark_stmt_if_obviously_necessary (stmt, el != ((void *)0));
 }
      bb->flags &= ~8;
    }
  if (el)
    {
      for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
 {
   for (e = bb->succ; e; e = e->succ_next)
     if (e->flags & 32)
       mark_control_dependent_edges_necessary (e->dest, el);
 }
    }
}
static void
mark_control_dependent_edges_necessary (basic_block bb, struct edge_list *el)
{
  int edge_number;
  if (bb == ENTRY_BLOCK_PTR)
    return;
  do { bitmap_element *ptr_ = (control_dependence_map[bb->index])->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (edge_number) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); { tree t; basic_block cd_bb = ((el)->index_to_edge[(edge_number)]->src); if (((last_stmt_necessary)->elms [(cd_bb->index) / ((unsigned) (8 * 4))] >> (cd_bb->index) % ((unsigned) (8 * 4)) & 1)) continue; ((last_stmt_necessary)->elms [(cd_bb->index) / ((unsigned) (8 * 4))] |= (unsigned long) 1 << (cd_bb->index) % ((unsigned) (8 * 4))); t = last_stmt (cd_bb); if (t && is_ctrl_stmt (t)) mark_stmt_necessary (t, 1); }; if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
      ;
}
static void
propagate_necessity (struct edge_list *el)
{
  tree i;
  unsigned char aggressive = (el ? 1 : 0);
  if (dump_file && (dump_flags & (1 << 3)))
    fprintf (dump_file, "\nProcessing worklist:\n");
  while (((worklist)->elements_used) > 0)
    {
      i = ((worklist)->data.tree1[(worklist)->elements_used - 1]);
      do { ((worklist)->elements_used--); } while (0);
      if (dump_file && (dump_flags & (1 << 3)))
 {
   fprintf (dump_file, "processing: ");
   print_generic_stmt (dump_file, i, (1 << 1));
   fprintf (dump_file, "\n");
 }
      if (aggressive)
 {
   basic_block bb = bb_for_stmt (i);
   if (! (bb->flags & 8))
     {
       bb->flags |= 8;
       mark_control_dependent_edges_necessary (bb, el);
     }
 }
      if (((enum tree_code) (i)->common.code) == PHI_NODE)
 {
   int k;
   for (k = 0; k < (i)->phi.num_args; k++)
            {
       tree arg = get_use_from_ptr (get_phi_arg_def_ptr (((i)), ((k))));
       if (((enum tree_code) (arg)->common.code) == SSA_NAME)
  mark_operand_necessary (arg);
     }
   if (aggressive)
     {
       for (k = 0; k < (i)->phi.num_args; k++)
  {
    basic_block arg_bb = ((i)->phi.a[k]).e->src;
    if (! (arg_bb->flags & 8))
      {
        arg_bb->flags |= 8;
        mark_control_dependent_edges_necessary (arg_bb, el);
      }
  }
     }
 }
      else
 {
   vuse_optype vuses;
   v_may_def_optype v_may_defs;
   use_optype uses;
   stmt_ann_t ann;
   size_t k;
   get_stmt_operands (i);
   ann = stmt_ann (i);
   uses = get_use_ops (ann);
   for (k = 0; k < ((uses) ? (uses)->num_uses : 0); k++)
     mark_operand_necessary ((get_use_from_ptr (get_use_op_ptr (((uses)), ((k))))));
   vuses = get_vuse_ops (ann);
   for (k = 0; k < ((vuses) ? (vuses)->num_vuses : 0); k++)
     mark_operand_necessary ((get_use_from_ptr (get_vuse_op_ptr (((vuses)), ((k))))));
   v_may_defs = get_v_may_def_ops (ann);
   for (k = 0; k < ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0); k++)
     mark_operand_necessary ((get_use_from_ptr (get_v_may_def_op_ptr (((v_may_defs)), ((k))))));
 }
    }
}
static void
eliminate_unnecessary_stmts (void)
{
  basic_block bb;
  block_stmt_iterator i;
  if (dump_file && (dump_flags & (1 << 3)))
    fprintf (dump_file, "\nEliminating unnecessary statements:\n");
  clear_special_calls ();
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      remove_dead_phis (bb);
      for (i = bsi_start (bb); ! bsi_end_p (i) ; )
 {
   tree t = bsi_stmt (i);
   stats.total++;
   if (! t->common.asm_written_flag)
     remove_dead_stmt (&i, bb);
   else
     {
       if (((enum tree_code) (t)->common.code) == CALL_EXPR)
  notice_special_calls (t);
       else if (((enum tree_code) (t)->common.code) == MODIFY_EXPR
         && ((enum tree_code) (((t)->exp.operands[1]))->common.code) == CALL_EXPR)
  notice_special_calls (((t)->exp.operands[1]));
       bsi_next (&i);
     }
 }
    }
}
static void
remove_dead_phis (basic_block bb)
{
  tree prev, phi;
  prev = (tree) ((void *)0);
  phi = phi_nodes (bb);
  while (phi)
    {
      stats.total_phis++;
      if (! phi->common.asm_written_flag)
 {
   tree next = (((phi))->common.chain);
   if (dump_file && (dump_flags & (1 << 3)))
     {
       fprintf (dump_file, "Deleting : ");
       print_generic_stmt (dump_file, phi, (1 << 1));
       fprintf (dump_file, "\n");
     }
   remove_phi_node (phi, prev, bb);
   stats.removed_phis++;
   phi = next;
 }
      else
 {
   prev = phi;
   phi = (((phi))->common.chain);
 }
    }
}
static void
remove_dead_stmt (block_stmt_iterator *i, basic_block bb)
{
  tree t = bsi_stmt (*i);
  if (dump_file && (dump_flags & (1 << 3)))
    {
      fprintf (dump_file, "Deleting : ");
      print_generic_stmt (dump_file, t, (1 << 1));
      fprintf (dump_file, "\n");
    }
  stats.removed++;
  if (is_ctrl_stmt (t))
    {
      basic_block post_dom_bb;
      edge e;
      post_dom_bb = get_immediate_dominator (CDI_POST_DOMINATORS, bb);
      if (! post_dom_bb)
 {
   bsi_next (i);
   return;
 }
      redirect_edge_and_branch (bb->succ, post_dom_bb);
      ((bb->succ)->insns.t) = ((void *)0);
      bb->succ->flags &= ~(1024 | 2048);
      if (post_dom_bb != EXIT_BLOCK_PTR)
 bb->succ->flags |= 1;
      else
 bb->succ->flags &= ~1;
      for (e = bb->succ->succ_next; e != ((void *)0);)
 {
   edge tmp = e;
   e = e->succ_next;
   remove_edge (tmp);
 }
    }
  bsi_remove (i);
}
static void
print_stats (void)
{
  if (dump_file && (dump_flags & ((1 << 4)|(1 << 3))))
    {
      float percg;
      percg = ((float) stats.removed / (float) stats.total) * 100;
      fprintf (dump_file, "Removed %d of %d statements (%d%%)\n",
        stats.removed, stats.total, (int) percg);
      if (stats.total_phis == 0)
 percg = 0;
      else
 percg = ((float) stats.removed_phis / (float) stats.total_phis) * 100;
      fprintf (dump_file, "Removed %d of %d PHI nodes (%d%%)\n",
        stats.removed_phis, stats.total_phis, (int) percg);
    }
}
static void
tree_dce_init (unsigned char aggressive)
{
  memset ((void *) &stats, 0, sizeof (stats));
  if (aggressive)
    {
      int i;
      control_dependence_map
 = xmalloc (last_basic_block * sizeof (bitmap));
      for (i = 0; i < last_basic_block; ++i)
 control_dependence_map[i] = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
      last_stmt_necessary = sbitmap_alloc (last_basic_block);
      sbitmap_zero (last_stmt_necessary);
    }
  processed = sbitmap_alloc (((ssa_names)->elements_used) + 1);
  sbitmap_zero (processed);
  worklist = varray_init (64, VARRAY_DATA_TREE, "work list");
}
static void
tree_dce_done (unsigned char aggressive)
{
  if (aggressive)
    {
      int i;
      for (i = 0; i < last_basic_block; ++i)
 do { if (control_dependence_map[i]) { bitmap_clear (control_dependence_map[i]); free (control_dependence_map[i]); (control_dependence_map[i]) = 0; } } while (0);
      free (control_dependence_map);
      free(last_stmt_necessary);
    }
  free(processed);
}
static void
perform_tree_ssa_dce (unsigned char aggressive)
{
  struct edge_list *el = ((void *)0);
  tree_dce_init (aggressive);
  if (aggressive)
    {
      timevar_push (TV_CONTROL_DEPENDENCES);
      calculate_dominance_info (CDI_POST_DOMINATORS);
      el = create_edge_list ();
      find_all_control_dependences (el);
      timevar_pop (TV_CONTROL_DEPENDENCES);
      mark_dfs_back_edges ();
    }
  find_obviously_necessary_stmts (el);
  propagate_necessity (el);
  eliminate_unnecessary_stmts ();
  if (aggressive)
    free_dominance_info (CDI_POST_DOMINATORS);
  cleanup_tree_cfg ();
  if (dump_file)
    {
      dump_function_to_file (current_function_decl, dump_file, dump_flags);
      print_stats ();
    }
  tree_dce_done (aggressive);
  free_edge_list (el);
}
static void
tree_ssa_dce (void)
{
  perform_tree_ssa_dce ( 0);
}
static void
tree_ssa_cd_dce (void)
{
  perform_tree_ssa_dce ( optimize >= 2);
}
static unsigned char
gate_dce (void)
{
  return flag_tree_dce != 0;
}
struct tree_opt_pass pass_dce =
{
  "dce",
  gate_dce,
  tree_ssa_dce,
  ((void *)0),
  ((void *)0),
  0,
  TV_TREE_DCE,
  (1 << 3) | (1 << 6),
  0,
  0,
  0,
  (1 << 2) | (1 << 3)
};
struct tree_opt_pass pass_cd_dce =
{
  "cddce",
  gate_dce,
  tree_ssa_cd_dce,
  ((void *)0),
  ((void *)0),
  0,
  TV_TREE_CD_DCE,
  (1 << 3) | (1 << 6),
  0,
  0,
  0,
  (1 << 2) | (1 << 3) | (1 << 4)
};
static void
replace_ssa_names_ann (tree op,
     tree var,
     unsigned char for_propagation )
{
  if ((((enum tree_code) (((op)->common.type))->common.code) == POINTER_TYPE || ((enum tree_code) (((op)->common.type))->common.code) == REFERENCE_TYPE))
    {
      var_ann_t new_ann = var_ann ((var)->ssa_name.var);
      var_ann_t orig_ann = var_ann ((op)->ssa_name.var);
      if (new_ann->type_mem_tag == (tree) ((void *)0))
 new_ann->type_mem_tag = orig_ann->type_mem_tag;
      else if (orig_ann->type_mem_tag == (tree) ((void *)0))
 orig_ann->type_mem_tag = new_ann->type_mem_tag;
      else if (new_ann->type_mem_tag != orig_ann->type_mem_tag)
 fancy_abort ("gcc.c", 129417, "?");
    }
}
static void
replace_exp_1 (use_operand_p op_p, tree val, unsigned char for_propagation)
{
  if (((enum tree_code) (val)->common.code) == SSA_NAME)
    {
      if (((enum tree_code) (get_use_from_ptr (op_p))->common.code) == SSA_NAME)
 replace_ssa_names_ann (get_use_from_ptr (op_p), val, for_propagation);
      ((*((op_p).use)) = (val));
    }
  else
    ((*((op_p).use)) = (lhd_unsave_expr_now (val)));
}
void
propagate_value (use_operand_p op_p, tree val)
{
  replace_exp_1 (op_p, val, 1);
}
void
propagate_tree_value (tree *op_p, tree val)
{
  if (((enum tree_code) (val)->common.code) == SSA_NAME)
    {
      if (((enum tree_code) (*op_p)->common.code) == SSA_NAME)
 replace_ssa_names_ann (*op_p, val, 1);
      *op_p = val;
    }
  else
    *op_p = lhd_unsave_expr_now (val);
}
void
replace_exp (use_operand_p op_p, tree val)
{
  replace_exp_1 (op_p, val, 0);
}
struct nrv_data
{
  tree var;
  tree result;
};
static tree finalize_nrv_r (tree *, int *, void *);
static tree
finalize_nrv_r (tree *tp, int *walk_subtrees, void *data)
{
  struct nrv_data *dp = (struct nrv_data *)data;
  if ((tree_code_type[(int) (((enum tree_code) (*tp)->common.code))] == 't'))
    *walk_subtrees = 0;
  else if (((enum tree_code) (*tp)->common.code) == RETURN_EXPR)
    ((*tp)->exp.operands[0]) = dp->result;
  else if (*tp == dp->var)
    *tp = dp->result;
  return (tree) ((void *)0);
}
static void
tree_nrv (void)
{
  tree result = ((current_function_decl)->decl.result);
  tree result_type = ((result)->common.type);
  tree found = ((void *)0);
  basic_block bb;
  struct nrv_data data;
  if (!aggregate_value_p (result, current_function_decl))
    return;
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      tree stmt = last_stmt (bb);
      if (stmt && ((enum tree_code) (stmt)->common.code) == RETURN_EXPR)
 {
   tree ret_expr = ((stmt)->exp.operands[0]);
   if (!ret_expr
       || ((enum tree_code) (ret_expr)->common.code) != MODIFY_EXPR
       || ((enum tree_code) (((ret_expr)->exp.operands[0]))->common.code) != RESULT_DECL)
     return;
   if (found != ((void *)0))
     {
       if (found != ((ret_expr)->exp.operands[1]))
  return;
     }
   else
     found = ((ret_expr)->exp.operands[1]);
   if (((enum tree_code) (found)->common.code) != VAR_DECL
       || ((found)->decl.context) != current_function_decl
       || ((found)->common.static_flag)
       || ((found)->common.addressable_flag)
       || ((found)->decl.u1.a.align) > ((result)->decl.u1.a.align)
              || !lang_hooks.types_compatible_p (((found)->common.type),
    result_type))
     return;
 }
    }
  if (!found)
    return;
  if (dump_file && (dump_flags & (1 << 3)))
    {
      fprintf (dump_file, "NRV Replaced: ");
      print_generic_expr (dump_file, found, dump_flags);
      fprintf (dump_file, "  with: ");
      print_generic_expr (dump_file, result, dump_flags);
      fprintf (dump_file, "\n");
    }
  ((result)->decl.name) = ((found)->decl.name);
  ((result)->decl.locus) = ((found)->decl.locus);
  ((result)->decl.abstract_origin) = ((found)->decl.abstract_origin);
  ((result)->common.addressable_flag) = ((found)->common.addressable_flag);
  data.var = found;
  data.result = result;
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      block_stmt_iterator bsi;
      for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))
 walk_tree (bsi_stmt_ptr (bsi), finalize_nrv_r, &data, 0);
    }
  var_ann (found)->used = 0;
}
struct tree_opt_pass pass_nrv =
{
  "nrv",
  ((void *)0),
  tree_nrv,
  ((void *)0),
  ((void *)0),
  0,
  TV_TREE_NRV,
  (1 << 3),
  0,
  0,
  0,
  (1 << 0) | (1 << 2)
};
extern void rename_ssa_copies (void);
static void
copy_rename_partition_coalesce (var_map map, tree var1, tree var2, FILE *debug)
{
  int p1, p2, p3;
  tree root1, root2;
  var_ann_t ann1, ann2, ann3;
  unsigned char gimp1, gimp2;
  register_ssa_partition (map, var1, 0);
  register_ssa_partition (map, var2, 1);
  p1 = ((map->var_partition)->elements[((var1)->ssa_name.version)].class_element);
  p2 = ((map->var_partition)->elements[((var2)->ssa_name.version)].class_element);
  if (debug)
    {
      fprintf (debug, "Try : ");
      print_generic_expr (debug, var1, (1 << 1));
      fprintf (debug, "(P%d) & ", p1);
      print_generic_expr (debug, var2, (1 << 1));
      fprintf (debug, "(P%d)", p2);
    }
  root1 = (partition_to_var (map, p1))->ssa_name.var;
  root2 = (partition_to_var (map, p2))->ssa_name.var;
  if (((root1)->decl.inline_flag) || ((root2)->decl.inline_flag))
    {
      if (debug)
        {
   if (((root1)->decl.inline_flag))
     print_generic_expr (debug, var1, (1 << 1));
   else
     print_generic_expr (debug, var2, (1 << 1));
   fprintf (debug, " is a hardware register.  No Coalescing.\n");
 }
      return;
    }
  ann1 = var_ann (root1);
  ann2 = var_ann (root2);
  if (p1 == p2)
    {
      if (debug)
 fprintf (debug, " : Already coalesced.\n");
      return;
    }
  if (root1 == root2)
    {
      p1 = partition_union (map->var_partition, p1, p2);
      if (debug)
 fprintf (debug, " : Same root, coalesced --> P%d.\n", p1);
      return;
    }
  if (((enum tree_code) (root1)->common.code) == PARM_DECL && ((enum tree_code) (root2)->common.code) == PARM_DECL)
    {
      if (debug)
        fprintf (debug, " : 2 different PARM_DECLS. No coalesce.\n");
      return;
    }
  if ((((enum tree_code) (root1)->common.code) == RESULT_DECL) != (((enum tree_code) (root2)->common.code) == RESULT_DECL))
    {
      if (debug)
        fprintf (debug, " : One root a RESULT_DECL. No coalesce.\n");
      return;
    }
  gimp1 = is_gimple_tmp_var (root1);
  gimp2 = is_gimple_tmp_var (root2);
  if (!gimp1 && !gimp2)
    {
      if ((((root2)->decl.abstract_origin) != (tree) ((void *)0) && ((root2)->decl.abstract_origin) != (root2)))
        gimp2 = 1;
      else
        if ((((root1)->decl.abstract_origin) != (tree) ((void *)0) && ((root1)->decl.abstract_origin) != (root1)))
   gimp1 = 1;
 else
   {
     if (debug)
       fprintf (debug, " : 2 different USER vars. No coalesce.\n");
     return;
   }
    }
  if (ann1->type_mem_tag && ann2->type_mem_tag
      && ann1->type_mem_tag != ann2->type_mem_tag)
    {
      if (debug)
 fprintf (debug, " : 2 memory tags. No coalesce.\n");
      return;
    }
  if (default_def (root1))
    {
      if (default_def (root2))
 {
   if (debug)
     fprintf (debug, " : 2 default defs. No coalesce.\n");
   return;
 }
      else
        {
   gimp2 = 1;
   gimp1 = 0;
 }
    }
  else
    if (default_def (root2))
      {
 gimp1 = 1;
 gimp2 = 0;
      }
  p3 = partition_union (map->var_partition, p1, p2);
  if (!gimp2)
    (partition_to_var (map, p3))->ssa_name.var = root2;
  else
    if (!gimp1)
      (partition_to_var (map, p3))->ssa_name.var = root1;
  ann3 = var_ann ((partition_to_var (map, p3))->ssa_name.var);
  if (ann1->type_mem_tag)
    ann3->type_mem_tag = ann1->type_mem_tag;
  else
    ann3->type_mem_tag = ann2->type_mem_tag;
  if (debug)
    {
      fprintf (debug, " --> P%d ", p3);
      print_generic_expr (debug, (partition_to_var (map, p3))->ssa_name.var,
     (1 << 1));
      fprintf (debug, "\n");
    }
}
void
rename_ssa_copies (void)
{
  var_map map;
  basic_block bb;
  block_stmt_iterator bsi;
  tree phi, stmt, var, part_var;
  unsigned x;
  FILE *debug;
  if (dump_file && (dump_flags & (1 << 3)))
    debug = dump_file;
  else
    debug = ((void *)0);
  map = init_var_map (((ssa_names)->elements_used) + 1);
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))
 {
   stmt = bsi_stmt (bsi);
   if (((enum tree_code) (stmt)->common.code) == MODIFY_EXPR)
     {
       tree lhs = ((stmt)->exp.operands[0]);
       tree rhs = ((stmt)->exp.operands[1]);
              if (((enum tree_code) (lhs)->common.code) == SSA_NAME
    && !has_hidden_use ((lhs)->ssa_name.var)
    && ((enum tree_code) (rhs)->common.code) == SSA_NAME)
  copy_rename_partition_coalesce (map, lhs, rhs, debug);
     }
 }
    }
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      for (phi = phi_nodes (bb); phi; phi = (((phi))->common.chain))
        {
          int i;
   tree res = get_def_from_ptr (get_phi_result_ptr (phi));
   if (!is_gimple_reg ((res)->ssa_name.var)
       || has_hidden_use ((res)->ssa_name.var))
     continue;
          for (i = 0; i < (phi)->phi.num_args; i++)
            {
              tree arg = get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((i))));
              if (((enum tree_code) (arg)->common.code) == SSA_NAME)
  copy_rename_partition_coalesce (map, res, arg, debug);
            }
        }
    }
  if (debug)
    dump_var_map (debug, map);
  for (x = 1; x <= ((ssa_names)->elements_used); x++)
    {
      part_var = partition_to_var (map, x);
      if (!part_var)
        continue;
      var = map->partition_to_var[x];
      if (debug)
        {
   if ((var)->ssa_name.var != (part_var)->ssa_name.var)
     {
       fprintf (debug, "Coalesced ");
       print_generic_expr (debug, var, (1 << 1));
       fprintf (debug, " to ");
       print_generic_expr (debug, part_var, (1 << 1));
       fprintf (debug, "\n");
     }
 }
      (var)->ssa_name.var = (part_var)->ssa_name.var;
    }
  delete_var_map (map);
}
static unsigned char
gate_copyrename (void)
{
  return flag_tree_copyrename != 0;
}
struct tree_opt_pass pass_rename_ssa_copies =
{
  "copyrename",
  gate_copyrename,
  rename_ssa_copies,
  ((void *)0),
  ((void *)0),
  0,
  TV_TREE_COPY_RENAME,
  (1 << 3) | (1 << 6),
  0,
  0,
  0,
  (1 << 0) | (1 << 3)
};
typedef unsigned long ALLOC_POOL_ID_TYPE;
typedef struct alloc_pool_list_def
{
  struct alloc_pool_list_def *next;
}
 *alloc_pool_list;
typedef struct alloc_pool_def
{
  const char *name;
  size_t elts_per_block;
  alloc_pool_list free_list;
  size_t elts_allocated;
  size_t elts_free;
  size_t blocks_allocated;
  alloc_pool_list block_list;
  size_t block_size;
  size_t elt_size;
}
 *alloc_pool;
extern alloc_pool create_alloc_pool (const char *, size_t, size_t);
extern void free_alloc_pool (alloc_pool);
extern void *pool_alloc (alloc_pool);
extern void pool_free (alloc_pool, void *);
extern void dump_alloc_pool_statistics (void);
typedef struct value_set_node
{
  tree expr;
  struct value_set_node *next;
} *value_set_node_t;
typedef struct value_set
{
  value_set_node_t head;
  value_set_node_t tail;
  size_t length;
  unsigned char indexed;
  bitmap values;
} *value_set_t;
typedef struct bitmap_set
{
  bitmap expressions;
  bitmap values;
} *bitmap_set_t;
typedef struct bb_value_sets
{
  value_set_t exp_gen;
  bitmap_set_t phi_gen;
  bitmap_set_t tmp_gen;
  bitmap_set_t avail_out;
  value_set_t antic_in;
  bitmap_set_t new_sets;
} *bb_value_sets_t;
static struct
{
  int eliminations;
  int insertions;
  int phis;
} pre_stats;
static tree bitmap_find_leader (bitmap_set_t, tree);
static tree find_leader (value_set_t, tree);
static void value_insert_into_set (value_set_t, tree);
static void bitmap_value_insert_into_set (bitmap_set_t, tree);
static void bitmap_value_replace_in_set (bitmap_set_t, tree);
static void insert_into_set (value_set_t, tree);
static void bitmap_set_copy (bitmap_set_t, bitmap_set_t);
static unsigned char bitmap_set_contains_value (bitmap_set_t, tree);
static bitmap_set_t bitmap_set_new (void);
static value_set_t set_new (unsigned char);
static unsigned char is_undefined_value (tree);
static tree create_expression_by_pieces (basic_block, tree, tree);
static alloc_pool value_set_pool;
static alloc_pool bitmap_set_pool;
static alloc_pool value_set_node_pool;
static alloc_pool binary_node_pool;
static alloc_pool unary_node_pool;
static htab_t phi_translate_table;
typedef struct expr_pred_trans_d
{
  tree e;
  basic_block pred;
  tree v;
  hashval_t hashcode;
} *expr_pred_trans_t;
static hashval_t
expr_pred_trans_hash (const void *p)
{
  const expr_pred_trans_t ve = (expr_pred_trans_t) p;
  return ve->hashcode;
}
static int
expr_pred_trans_eq (const void *p1, const void *p2)
{
  const expr_pred_trans_t ve1 = (expr_pred_trans_t) p1;
  const expr_pred_trans_t ve2 = (expr_pred_trans_t) p2;
  basic_block b1 = ve1->pred;
  basic_block b2 = ve2->pred;
  if (b1 != b2)
    return 0;
  if (expressions_equal_p (ve1->e, ve2->e))
    return 1;
  return 0;
}
static tree
phi_trans_lookup (tree e, basic_block pred)
{
  void **slot;
  struct expr_pred_trans_d ept;
  ept.e = e;
  ept.pred = pred;
  ept.hashcode = vn_compute (e, (unsigned long) pred, ((void *)0));
  slot = htab_find_slot_with_hash (phi_translate_table, &ept, ept.hashcode,
       NO_INSERT);
  if (!slot)
    return ((void *)0);
  else
    return ((expr_pred_trans_t) *slot)->v;
}
static void
phi_trans_add (tree e, tree v, basic_block pred)
{
  void **slot;
  expr_pred_trans_t new_pair = xmalloc (sizeof (*new_pair));
  new_pair->e = e;
  new_pair->pred = pred;
  new_pair->v = v;
  new_pair->hashcode = vn_compute (e, (unsigned long) pred, ((void *)0));
  slot = htab_find_slot_with_hash (phi_translate_table, new_pair,
       new_pair->hashcode, INSERT);
  if (*slot)
    free (*slot);
  *slot = (void *) new_pair;
}
void
add_to_value (tree v, tree e)
{
  if (is_gimple_min_invariant (v))
    return;
  if (((v)->value_handle.expr_set) == ((void *)0))
    ((v)->value_handle.expr_set) = set_new (0);
  insert_into_set (((v)->value_handle.expr_set), e);
}
static unsigned char
value_exists_in_set_bitmap (value_set_t set, tree v)
{
  if (!set->values)
    return 0;
  return bitmap_bit_p (set->values, ((v)->value_handle.id));
}
static void
value_remove_from_set_bitmap (value_set_t set, tree v)
{
  if (!set->values)
    return;
  bitmap_clear_bit (set->values, ((v)->value_handle.id));
}
static void
value_insert_into_set_bitmap (value_set_t set, tree v)
{
  if (set->values == ((void *)0))
    {
      set->values = bitmap_initialize (((void *)0), 0);
      bitmap_clear (set->values);
    }
  bitmap_set_bit (set->values, ((v)->value_handle.id));
}
static bitmap_set_t
bitmap_set_new (void)
{
  bitmap_set_t ret = pool_alloc (bitmap_set_pool);
  ret->expressions = bitmap_initialize (((void *)0), 0);
  ret->values = bitmap_initialize (((void *)0), 0);
  bitmap_clear (ret->expressions);
  bitmap_clear (ret->values);
  return ret;
}
static value_set_t
set_new (unsigned char indexed)
{
  value_set_t ret;
  ret = pool_alloc (value_set_pool);
  ret->head = ret->tail = ((void *)0);
  ret->length = 0;
  ret->indexed = indexed;
  ret->values = ((void *)0);
  return ret;
}
static void
bitmap_insert_into_set (bitmap_set_t set, tree expr)
{
  tree val;
  if (((enum tree_code) (expr)->common.code) != SSA_NAME)
    fancy_abort ("gcc.c", 130606, "?");
  val = get_value_handle (expr);
  if (val == ((void *)0))
    fancy_abort ("gcc.c", 130610, "?");
  if (!is_gimple_min_invariant (val))
    bitmap_set_bit (set->values, ((val)->value_handle.id));
  bitmap_set_bit (set->expressions, (expr)->ssa_name.version);
}
static void
insert_into_set (value_set_t set, tree expr)
{
  value_set_node_t newnode = pool_alloc (value_set_node_pool);
  tree val = get_value_handle (expr);
  if (val == ((void *)0))
    fancy_abort ("gcc.c", 130625, "?");
  if (set->indexed)
    value_insert_into_set_bitmap (set, val);
  newnode->next = ((void *)0);
  newnode->expr = expr;
  set->length ++;
  if (set->head == ((void *)0))
    {
      set->head = set->tail = newnode;
    }
  else
    {
      set->tail->next = newnode;
      set->tail = newnode;
    }
}
static void
bitmap_set_copy (bitmap_set_t dest, bitmap_set_t orig)
{
  bitmap_copy (dest->expressions, orig->expressions);
  bitmap_copy (dest->values, orig->values);
}
static void
set_copy (value_set_t dest, value_set_t orig)
{
  value_set_node_t node;
  if (!orig || !orig->head)
    return;
  for (node = orig->head;
       node;
       node = node->next)
    {
      insert_into_set (dest, node->expr);
    }
}
static void
set_remove (value_set_t set, tree expr)
{
  value_set_node_t node, prev;
  value_remove_from_set_bitmap (set, get_value_handle (expr));
  set->length--;
  prev = ((void *)0);
  for (node = set->head;
       node != ((void *)0);
       prev = node, node = node->next)
    {
      if (node->expr == expr)
 {
   if (prev == ((void *)0))
     set->head = node->next;
   else
     prev->next= node->next;
   if (node == set->tail)
     set->tail = prev;
   pool_free (value_set_node_pool, node);
   return;
 }
    }
}
static unsigned char
set_contains_value (value_set_t set, tree val)
{
  if (is_gimple_min_invariant (val))
    return 1;
  if (set->length == 0)
    return 0;
  return value_exists_in_set_bitmap (set, val);
}
static unsigned char
bitmap_set_contains (bitmap_set_t set, tree expr)
{
  if (((enum tree_code) (expr)->common.code) != SSA_NAME)
    return 0;
  return bitmap_bit_p (set->expressions, (expr)->ssa_name.version);
}
static unsigned char
bitmap_set_contains_value (bitmap_set_t set, tree val)
{
  if (is_gimple_min_invariant (val))
    return 1;
  return bitmap_bit_p (set->values, ((val)->value_handle.id));
}
static void
bitmap_set_replace_value (bitmap_set_t set, tree lookfor, tree expr)
{
  value_set_t exprset;
  value_set_node_t node;
  if (is_gimple_min_invariant (lookfor))
    return;
  if (!bitmap_set_contains_value (set, lookfor))
    return;
  exprset = ((lookfor)->value_handle.expr_set);
  for (node = exprset->head; node; node = node->next)
    {
      if (((enum tree_code) (node->expr)->common.code) == SSA_NAME)
 {
   if (bitmap_bit_p (set->expressions, (node->expr)->ssa_name.version))
     {
       bitmap_clear_bit (set->expressions, (node->expr)->ssa_name.version);
       bitmap_set_bit (set->expressions, (expr)->ssa_name.version);
       return;
     }
 }
    }
}
static value_set_t
bitmap_set_subtract_from_value_set (value_set_t a, bitmap_set_t b,
        unsigned char indexed)
{
  value_set_t ret = set_new (indexed);
  value_set_node_t node;
  for (node = a->head;
       node;
       node = node->next)
    {
      if (!bitmap_set_contains (b, node->expr))
 insert_into_set (ret, node->expr);
    }
  return ret;
}
static unsigned char
set_equal (value_set_t a, value_set_t b)
{
  value_set_node_t node;
  if (a->length != b->length)
    return 0;
  for (node = a->head;
       node;
       node = node->next)
    {
      if (!set_contains_value (b, get_value_handle (node->expr)))
 return 0;
    }
  return 1;
}
static void
bitmap_value_replace_in_set (bitmap_set_t set, tree expr)
{
  tree val = get_value_handle (expr);
  bitmap_set_replace_value (set, val, expr);
}
static void
bitmap_value_insert_into_set (bitmap_set_t set, tree expr)
{
  tree val = get_value_handle (expr);
  if (is_gimple_min_invariant (val))
    return;
  if (!bitmap_set_contains_value (set, val))
    bitmap_insert_into_set (set, expr);
}
static void
value_insert_into_set (value_set_t set, tree expr)
{
  tree val = get_value_handle (expr);
  if (is_gimple_min_invariant (val))
    return;
  if (!set_contains_value (set, val))
    insert_into_set (set, expr);
}
static void
bitmap_print_value_set (FILE *outfile, bitmap_set_t set,
   const char *setname, int blockindex)
{
  fprintf (outfile, "%s[%d] := { ", setname, blockindex);
  if (set)
    {
      int i;
      do { bitmap_element *ptr_ = (set->expressions)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (i) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); { print_generic_expr (outfile, ((ssa_names)->data.tree1[i]), 0); fprintf (outfile, " ("); print_generic_expr (outfile, get_value_handle (((ssa_names)->data.tree1[i])), 0); fprintf (outfile, ") "); if (bitmap_last_set_bit (set->expressions) != i) fprintf (outfile, ", "); }; if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
        ;
    }
  fprintf (outfile, " }\n");
}
static void
print_value_set (FILE *outfile, value_set_t set,
   const char *setname, int blockindex)
{
  value_set_node_t node;
  fprintf (outfile, "%s[%d] := { ", setname, blockindex);
  if (set)
    {
      for (node = set->head;
    node;
    node = node->next)
 {
   print_generic_expr (outfile, node->expr, 0);
   fprintf (outfile, " (");
   print_generic_expr (outfile, get_value_handle (node->expr), 0);
   fprintf (outfile, ") ");
   if (node->next)
     fprintf (outfile, ", ");
 }
    }
  fprintf (outfile, " }\n");
}
void
print_value_expressions (FILE *outfile, tree val)
{
  if (((val)->value_handle.expr_set))
    {
      char s[10];
      sprintf (s, "VH.%04d", ((val)->value_handle.id));
      print_value_set (outfile, ((val)->value_handle.expr_set), s, 0);
    }
}
void
debug_value_expressions (tree val)
{
  print_value_expressions (stderr, val);
}
void debug_value_set (value_set_t, const char *, int);
void
debug_value_set (value_set_t set, const char *setname, int blockindex)
{
  print_value_set (stderr, set, setname, blockindex);
}
static tree
phi_translate (tree expr, value_set_t set, basic_block pred,
        basic_block phiblock)
{
  tree phitrans = ((void *)0);
  tree oldexpr = expr;
  if (expr == ((void *)0))
    return ((void *)0);
  phitrans = phi_trans_lookup (expr, pred);
  if (phitrans)
    return phitrans;
  switch (tree_code_type[(int) (((enum tree_code) (expr)->common.code))])
    {
    case '2':
      {
 tree oldop1 = ((expr)->exp.operands[0]);
 tree oldop2 = ((expr)->exp.operands[1]);
 tree newop1;
 tree newop2;
 tree newexpr;
 newop1 = phi_translate (find_leader (set, oldop1),
    set, pred, phiblock);
 if (newop1 == ((void *)0))
   return ((void *)0);
 newop2 = phi_translate (find_leader (set, oldop2),
    set, pred, phiblock);
 if (newop2 == ((void *)0))
   return ((void *)0);
 if (newop1 != oldop1 || newop2 != oldop2)
   {
     newexpr = pool_alloc (binary_node_pool);
     memcpy (newexpr, expr, tree_size (expr));
     create_tree_ann (newexpr);
     ((newexpr)->exp.operands[0]) = newop1 == oldop1 ? oldop1 : get_value_handle (newop1);
     ((newexpr)->exp.operands[1]) = newop2 == oldop2 ? oldop2 : get_value_handle (newop2);
     vn_lookup_or_add (newexpr, ((void *)0));
     expr = newexpr;
     phi_trans_add (oldexpr, newexpr, pred);
   }
      }
      break;
    case 'r':
      return ((void *)0);
      break;
    case '1':
      {
 tree oldop1 = ((expr)->exp.operands[0]);
 tree newop1;
 tree newexpr;
 newop1 = phi_translate (find_leader (set, oldop1),
    set, pred, phiblock);
 if (newop1 == ((void *)0))
   return ((void *)0);
 if (newop1 != oldop1)
   {
     newexpr = pool_alloc (unary_node_pool);
     memcpy (newexpr, expr, tree_size (expr));
     create_tree_ann (newexpr);
     ((newexpr)->exp.operands[0]) = get_value_handle (newop1);
     vn_lookup_or_add (newexpr, ((void *)0));
     expr = newexpr;
     phi_trans_add (oldexpr, newexpr, pred);
   }
      }
      break;
    case 'd':
      fancy_abort ("gcc.c", 131012, "?");
    case 'x':
      {
 tree phi = ((void *)0);
 int i;
 if (((enum tree_code) (expr)->common.code) != SSA_NAME)
   fancy_abort ("gcc.c", 131018, "?");
 if (((enum tree_code) ((expr)->common.chain)->common.code) == PHI_NODE)
   phi = (expr)->common.chain;
 else
   return expr;
 for (i = 0; i < (phi)->phi.num_args; i++)
   if (((phi)->phi.a[i]).e->src == pred)
     {
       tree val;
       if (is_undefined_value (get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((i))))))
  return ((void *)0);
       val = vn_lookup_or_add (get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((i)))), ((void *)0));
       return get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((i))));
     }
      }
      break;
    }
  return expr;
}
static void
phi_translate_set (value_set_t dest, value_set_t set, basic_block pred,
     basic_block phiblock)
{
  value_set_node_t node;
  for (node = set->head;
       node;
       node = node->next)
    {
      tree translated;
      translated = phi_translate (node->expr, set, pred, phiblock);
      phi_trans_add (node->expr, translated, pred);
      if (translated != ((void *)0))
 value_insert_into_set (dest, translated);
    }
}
static tree
bitmap_find_leader (bitmap_set_t set, tree val)
{
  if (val == ((void *)0))
    return ((void *)0);
  if (is_gimple_min_invariant (val))
    return val;
  if (bitmap_set_contains_value (set, val))
    {
      value_set_t exprset;
      value_set_node_t node;
      exprset = ((val)->value_handle.expr_set);
      for (node = exprset->head; node; node = node->next)
 {
   if (((enum tree_code) (node->expr)->common.code) == SSA_NAME)
     {
       if (bitmap_bit_p (set->expressions,
    (node->expr)->ssa_name.version))
  return node->expr;
     }
 }
    }
  return ((void *)0);
}
static tree
find_leader (value_set_t set, tree val)
{
  value_set_node_t node;
  if (val == ((void *)0))
    return ((void *)0);
  if (is_gimple_min_invariant (val))
    return val;
  if (set->length == 0)
    return ((void *)0);
  if (value_exists_in_set_bitmap (set, val))
    {
      for (node = set->head;
    node;
    node = node->next)
 {
   if (get_value_handle (node->expr) == val)
     return node->expr;
 }
    }
  return ((void *)0);
}
static unsigned char
valid_in_set (value_set_t set, tree expr)
{
  switch (tree_code_type[(int) (((enum tree_code) (expr)->common.code))])
    {
    case '2':
      {
 tree op1 = ((expr)->exp.operands[0]);
 tree op2 = ((expr)->exp.operands[1]);
 return set_contains_value (set, op1) && set_contains_value (set, op2);
      }
      break;
    case '1':
      {
 tree op1 = ((expr)->exp.operands[0]);
 return set_contains_value (set, op1);
      }
      break;
    case 'r':
      {
 return 0;
      }
    case 'x':
      {
 if (((enum tree_code) (expr)->common.code) == SSA_NAME)
   return 1;
 fancy_abort ("gcc.c", 131169, "?");
      }
    case 'c':
      fancy_abort ("gcc.c", 131172, "?");
    }
  return 0;
}
static void
clean (value_set_t set)
{
  value_set_node_t node;
  value_set_node_t next;
  node = set->head;
  while (node)
    {
      next = node->next;
      if (!valid_in_set (set, node->expr))
 set_remove (set, node->expr);
      node = next;
    }
}
static unsigned char
compute_antic_aux (basic_block block)
{
  basic_block son;
  edge e;
  unsigned char changed = 0;
  value_set_t S, old, ANTIC_OUT;
  value_set_node_t node;
  ANTIC_OUT = S = ((void *)0);
  if (! (block->flags & 8))
    {
      for (e = block->pred; e; e = e->pred_next)
  if (e->flags & 2)
    {
      block->flags |= 8;
      break;
    }
    }
  if (block->flags & 8)
    {
      S = ((void *)0);
      goto visit_sons;
    }
  old = set_new (0);
  set_copy (old, ((bb_value_sets_t) ((block)->aux))->antic_in);
  ANTIC_OUT = set_new (1);
  if (block->succ == ((void *)0));
  else if (block->succ->succ_next == ((void *)0))
    {
      phi_translate_set (ANTIC_OUT, ((bb_value_sets_t) ((block->succ->dest)->aux))->antic_in,
    block, block->succ->dest);
    }
  else
    {
      varray_type worklist;
      edge e;
      size_t i;
      basic_block bprime, first;
      worklist = varray_init (1, VARRAY_DATA_BB, "succ");
      e = block->succ;
      while (e)
 {
   do { if ((worklist)->elements_used >= (worklist)->num_elements) (((worklist)) = varray_grow ((worklist), 2 * (worklist)->num_elements)); (worklist)->data.bb[(worklist)->elements_used++] = (e->dest); } while (0);
   e = e->succ_next;
 }
      first = ((worklist)->data.bb[0]);
      set_copy (ANTIC_OUT, ((bb_value_sets_t) ((first)->aux))->antic_in);
      for (i = 1; i < ((worklist)->elements_used); i++)
 {
   bprime = ((worklist)->data.bb[i]);
   node = ANTIC_OUT->head;
   while (node)
     {
       tree val;
       value_set_node_t next = node->next;
       val = get_value_handle (node->expr);
       if (!set_contains_value (((bb_value_sets_t) ((bprime)->aux))->antic_in, val))
  set_remove (ANTIC_OUT, node->expr);
       node = next;
     }
 }
      varray_clear(worklist);
    }
  S = bitmap_set_subtract_from_value_set (ANTIC_OUT, ((bb_value_sets_t) ((block)->aux))->tmp_gen, 0);
  ((bb_value_sets_t) ((block)->aux))->antic_in = bitmap_set_subtract_from_value_set (((bb_value_sets_t) ((block)->aux))->exp_gen,
        ((bb_value_sets_t) ((block)->aux))->tmp_gen,
        1);
  for (node = S->head;
       node;
       node = node->next)
    {
      value_insert_into_set (((bb_value_sets_t) ((block)->aux))->antic_in, node->expr);
    }
  clean (((bb_value_sets_t) ((block)->aux))->antic_in);
  if (!set_equal (old, ((bb_value_sets_t) ((block)->aux))->antic_in))
    changed = 1;
 visit_sons:
  if (dump_file && (dump_flags & (1 << 3)))
    {
      if (ANTIC_OUT)
 print_value_set (dump_file, ANTIC_OUT, "ANTIC_OUT", block->index);
      print_value_set (dump_file, ((bb_value_sets_t) ((block)->aux))->antic_in, "ANTIC_IN", block->index);
      if (S)
 print_value_set (dump_file, S, "S", block->index);
    }
  for (son = first_dom_son (CDI_POST_DOMINATORS, block);
       son;
       son = next_dom_son (CDI_POST_DOMINATORS, son))
    {
      changed |= compute_antic_aux (son);
    }
  return changed;
}
static void
compute_antic (void)
{
  unsigned char changed = 1;
  basic_block bb;
  int num_iterations = 0;
  for (bb = ENTRY_BLOCK_PTR; bb; bb = bb->next_bb)
    {
      ((bb_value_sets_t) ((bb)->aux))->antic_in = set_new (1);
      if (bb->flags & 8)
 fancy_abort ("gcc.c", 131348, "?");
    }
  while (changed)
    {
      num_iterations++;
      changed = 0;
      changed = compute_antic_aux (EXIT_BLOCK_PTR);
    }
  for (bb = ENTRY_BLOCK_PTR; bb; bb = bb->next_bb)
    {
      bb->flags &= ~8;
    }
  if (num_iterations > 2 && dump_file && (dump_flags & (1 << 4)))
    fprintf (dump_file, "compute_antic required %d iterations\n", num_iterations);
}
static tree
find_or_generate_expression (basic_block block, tree expr, tree stmts)
{
  tree genop;
  genop = bitmap_find_leader (((bb_value_sets_t) ((block)->aux))->avail_out, expr);
  if (genop == ((void *)0))
    genop = bitmap_find_leader (((bb_value_sets_t) ((block)->aux))->new_sets, expr);
  if (genop == ((void *)0))
    {
      genop = ((expr)->value_handle.expr_set)->head->expr;
      if (tree_code_type[(int) (((enum tree_code) (genop)->common.code))] != '1'
   && tree_code_type[(int) (((enum tree_code) (genop)->common.code))] != '2')
 fancy_abort ("gcc.c", 131395, "?");
      genop = create_expression_by_pieces (block, genop, stmts);
    }
  return genop;
}
static tree
create_expression_by_pieces (basic_block block, tree expr, tree stmts)
{
  tree name = (tree) ((void *)0);
  tree newexpr = (tree) ((void *)0);
  tree v;
  switch (tree_code_type[(int) (((enum tree_code) (expr)->common.code))])
    {
    case '2':
      {
 tree_stmt_iterator tsi;
 tree genop1, genop2;
 tree temp;
 tree op1 = ((expr)->exp.operands[0]);
 tree op2 = ((expr)->exp.operands[1]);
 genop1 = find_or_generate_expression (block, op1, stmts);
 genop2 = find_or_generate_expression (block, op2, stmts);
 temp = create_tmp_var (((expr)->common.type), "pretmp");
 add_referenced_tmp_var (temp);
 newexpr = build (((enum tree_code) (expr)->common.code), ((expr)->common.type),
    genop1, genop2);
 newexpr = build (MODIFY_EXPR, ((expr)->common.type),
    temp, newexpr);
 name = make_ssa_name (temp, newexpr);
 ((newexpr)->exp.operands[0]) = name;
 tsi = tsi_last (stmts);
 tsi_link_after (&tsi, newexpr, TSI_CONTINUE_LINKING);
 pre_stats.insertions++;
 break;
      }
    case '1':
      {
 tree_stmt_iterator tsi;
 tree genop1;
 tree temp;
 tree op1 = ((expr)->exp.operands[0]);
 genop1 = find_or_generate_expression (block, op1, stmts);
 temp = create_tmp_var (((expr)->common.type), "pretmp");
 add_referenced_tmp_var (temp);
 newexpr = build (((enum tree_code) (expr)->common.code), ((expr)->common.type),
    genop1);
 newexpr = build (MODIFY_EXPR, ((expr)->common.type),
    temp, newexpr);
 name = make_ssa_name (temp, newexpr);
 ((newexpr)->exp.operands[0]) = name;
 tsi = tsi_last (stmts);
 tsi_link_after (&tsi, newexpr, TSI_CONTINUE_LINKING);
 pre_stats.insertions++;
 break;
      }
    default:
      fancy_abort ("gcc.c", 131469, "?");
    }
  v = get_value_handle (expr);
  vn_add (name, v, ((void *)0));
  bitmap_insert_into_set (((bb_value_sets_t) ((block)->aux))->new_sets, name);
  bitmap_value_insert_into_set (((bb_value_sets_t) ((block)->aux))->avail_out, name);
  if (dump_file && (dump_flags & (1 << 3)))
    {
      fprintf (dump_file, "Inserted ");
      print_generic_expr (dump_file, newexpr, 0);
      fprintf (dump_file, " in predecessor %d\n", block->index);
    }
  return name;
}
static unsigned char
insert_aux (basic_block block)
{
  basic_block son;
  unsigned char new_stuff = 0;
  if (block)
    {
      basic_block dom;
      dom = get_immediate_dominator (CDI_DOMINATORS, block);
      if (dom)
 {
   int i;
   bitmap_set_t newset = ((bb_value_sets_t) ((dom)->aux))->new_sets;
   do { bitmap_element *ptr_ = (newset->expressions)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (i) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); { bitmap_insert_into_set (((bb_value_sets_t) ((block)->aux))->new_sets, ((ssa_names)->data.tree1[i])); bitmap_value_replace_in_set (((bb_value_sets_t) ((block)->aux))->avail_out, ((ssa_names)->data.tree1[i])); }; if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
     ;
   if (block->pred->pred_next)
     {
       value_set_node_t node;
       for (node = ((bb_value_sets_t) ((block)->aux))->antic_in->head;
     node;
     node = node->next)
  {
    if (tree_code_type[(int) (((enum tree_code) (node->expr)->common.code))] == '2'
        || tree_code_type[(int) (((enum tree_code) (node->expr)->common.code))] == '1')
      {
        tree *avail;
        tree val;
        unsigned char by_some = 0;
        unsigned char cant_insert = 0;
        unsigned char all_same = 1;
        tree first_s = ((void *)0);
        edge pred;
        basic_block bprime;
        tree eprime;
        val = get_value_handle (node->expr);
        if (bitmap_set_contains_value (((bb_value_sets_t) ((block)->aux))->phi_gen, val))
   continue;
        if (bitmap_set_contains_value (((bb_value_sets_t) ((dom)->aux))->avail_out, val))
   {
     if (dump_file && (dump_flags & (1 << 3)))
       fprintf (dump_file, "Found fully redundant value\n");
     continue;
   }
        avail = xcalloc (last_basic_block, sizeof (tree));
        for (pred = block->pred;
      pred;
      pred = pred->pred_next)
   {
     tree vprime;
     tree edoubleprime;
     bprime = pred->src;
     eprime = phi_translate (node->expr,
        ((bb_value_sets_t) ((block)->aux))->antic_in,
        bprime, block);
     if (eprime == ((void *)0))
       {
         cant_insert = 1;
         break;
       }
     vprime = get_value_handle (eprime);
     if (!vprime)
       fancy_abort ("gcc.c", 131577, "?");
     edoubleprime = bitmap_find_leader (((bb_value_sets_t) ((bprime)->aux))->avail_out,
            vprime);
     if (edoubleprime == ((void *)0))
       {
         avail[bprime->index] = eprime;
         all_same = 0;
       }
     else
       {
         avail[bprime->index] = edoubleprime;
         by_some = 1;
         if (first_s == ((void *)0))
    first_s = edoubleprime;
         else if (first_s != edoubleprime)
    all_same = 0;
         if (first_s != edoubleprime
      && operand_equal_p (first_s, edoubleprime, 0))
    fancy_abort ("gcc.c", 131595, "?");
       }
   }
        if (!cant_insert && !all_same && by_some)
   {
     tree type = ((avail[block->pred->src->index])->common.type);
     tree temp;
     if (dump_file && (dump_flags & (1 << 3)))
       {
         fprintf (dump_file, "Found partial redundancy for expression ");
         print_generic_expr (dump_file, node->expr, 0);
         fprintf (dump_file, "\n");
       }
     for (pred = block->pred;
          pred;
          pred = pred->pred_next)
       {
         tree stmts = alloc_stmt_list ();
         tree builtexpr;
         bprime = pred->src;
         eprime = avail[bprime->index];
         if (tree_code_type[(int) (((enum tree_code) (eprime)->common.code))] == '2'
      || tree_code_type[(int) (((enum tree_code) (eprime)->common.code))] == '1')
    {
      builtexpr = create_expression_by_pieces (bprime,
            eprime,
            stmts);
      bsi_insert_on_edge (pred, stmts);
      bsi_commit_edge_inserts (((void *)0));
      avail[bprime->index] = builtexpr;
    }
       }
     temp = create_tmp_var (type, "prephitmp");
     add_referenced_tmp_var (temp);
     temp = create_phi_node (temp, block);
     vn_add (get_def_from_ptr (get_phi_result_ptr (temp)), val, ((void *)0));
       bitmap_value_replace_in_set (((bb_value_sets_t) ((block)->aux))->avail_out,
        get_def_from_ptr (get_phi_result_ptr (temp)));
     for (pred = block->pred;
          pred;
          pred = pred->pred_next)
       {
         add_phi_arg (&temp, avail[pred->src->index],
        pred);
       }
     if (dump_file && (dump_flags & (1 << 3)))
       {
         fprintf (dump_file, "Created phi ");
         print_generic_expr (dump_file, temp, 0);
         fprintf (dump_file, " in block %d\n", block->index);
       }
     pre_stats.phis++;
     new_stuff = 1;
     bitmap_insert_into_set (((bb_value_sets_t) ((block)->aux))->new_sets,
        get_def_from_ptr (get_phi_result_ptr (temp)));
     bitmap_insert_into_set (((bb_value_sets_t) ((block)->aux))->phi_gen,
        get_def_from_ptr (get_phi_result_ptr (temp)));
   }
        free (avail);
      }
  }
     }
 }
    }
  for (son = first_dom_son (CDI_DOMINATORS, block);
       son;
       son = next_dom_son (CDI_DOMINATORS, son))
    {
      new_stuff |= insert_aux (son);
    }
  return new_stuff;
}
static void
insert_pre (void)
{
  unsigned char new_stuff = 1;
  basic_block bb;
  int num_iterations = 0;
  for (bb = ENTRY_BLOCK_PTR; bb; bb = bb->next_bb)
    ((bb_value_sets_t) ((bb)->aux))->new_sets = bitmap_set_new ();
  while (new_stuff)
    {
      num_iterations++;
      new_stuff = 0;
      new_stuff = insert_aux (ENTRY_BLOCK_PTR);
    }
  if (num_iterations > 2 && dump_file && (dump_flags & (1 << 4)))
    fprintf (dump_file, "insert required %d iterations\n", num_iterations);
}
static unsigned char
is_undefined_value (tree expr)
{
  return (((enum tree_code) (expr)->common.code) == SSA_NAME
          && (((enum tree_code) ((expr)->common.chain)->common.code) == NOP_EXPR && (((enum tree_code) ((((expr)->common.chain)->common.type))->common.code) == VOID_TYPE) && integer_zerop ((((expr)->common.chain)->exp.operands[0])))
   && ((enum tree_code) ((expr)->ssa_name.var)->common.code) != PARM_DECL
   && !(((expr)->ssa_name.var)->decl.inline_flag));
}
static void
add_to_sets (tree var, tree expr, vuse_optype vuses, bitmap_set_t s1,
      bitmap_set_t s2)
{
  tree val = vn_lookup_or_add (expr, vuses);
  if (var != expr)
    vn_add (var, val, vuses);
  bitmap_insert_into_set (s1, var);
  bitmap_value_insert_into_set (s2, var);
}
static tree
create_value_expr_from (tree expr, basic_block block, vuse_optype vuses)
{
  int i;
  enum tree_code code = ((enum tree_code) (expr)->common.code);
  tree vexpr;
  if (tree_code_type[(int) (code)] == '1')
    vexpr = pool_alloc (unary_node_pool);
  else
    vexpr = pool_alloc (binary_node_pool);
  memcpy (vexpr, expr, tree_size (expr));
  for (i = 0; i < tree_code_length[(int) (code)]; i++)
    {
      tree op = ((expr)->exp.operands[i]);
      if (op != ((void *)0))
 {
   tree val = vn_lookup_or_add (op, vuses);
   if (!is_undefined_value (op))
     value_insert_into_set (((bb_value_sets_t) ((block)->aux))->exp_gen, op);
   ((val)->common.type) = ((((vexpr)->exp.operands[i]))->common.type);
   ((vexpr)->exp.operands[i]) = val;
 }
    }
  return vexpr;
}
static void
compute_avail (basic_block block)
{
  basic_block son;
  if (block == ENTRY_BLOCK_PTR)
    {
      tree param;
      for (param = ((current_function_decl)->decl.arguments);
    param;
    param = ((param)->common.chain))
 {
   if (default_def (param) != ((void *)0))
     {
       tree val;
       tree def = default_def (param);
       val = vn_lookup_or_add (def, ((void *)0));
       bitmap_insert_into_set (((bb_value_sets_t) ((block)->aux))->tmp_gen, def);
       bitmap_value_insert_into_set (((bb_value_sets_t) ((block)->aux))->avail_out, def);
     }
 }
    }
  else if (block)
    {
      block_stmt_iterator bsi;
      tree stmt, phi;
      basic_block dom;
      dom = get_immediate_dominator (CDI_DOMINATORS, block);
      if (dom)
 bitmap_set_copy (((bb_value_sets_t) ((block)->aux))->avail_out, ((bb_value_sets_t) ((dom)->aux))->avail_out);
      for (phi = phi_nodes (block); phi; phi = (((phi))->common.chain))
 if (is_gimple_reg (get_def_from_ptr (get_phi_result_ptr (phi))))
   add_to_sets (get_def_from_ptr (get_phi_result_ptr (phi)), get_def_from_ptr (get_phi_result_ptr (phi)), ((void *)0),
         ((bb_value_sets_t) ((block)->aux))->phi_gen, ((bb_value_sets_t) ((block)->aux))->avail_out);
      for (bsi = bsi_start (block); !bsi_end_p (bsi); bsi_next (&bsi))
 {
   stmt_ann_t ann;
   size_t j;
   stmt = bsi_stmt (bsi);
   ann = stmt_ann (stmt);
   get_stmt_operands (stmt);
   if (((enum tree_code) (stmt)->common.code) == MODIFY_EXPR
       && !ann->has_volatile_ops
       && ((enum tree_code) (((stmt)->exp.operands[0]))->common.code) == SSA_NAME
       && !(((stmt)->exp.operands[0]))->common.asm_written_flag)
     {
       tree lhs = ((stmt)->exp.operands[0]);
       tree rhs = ((stmt)->exp.operands[1]);
       vuse_optype vuses = get_vuse_ops (stmt_ann(stmt));
       while (tree_ssa_useless_type_conversion (rhs)) rhs = ((rhs)->exp.operands[0]);
       if (tree_code_type[(int) (((enum tree_code) (rhs)->common.code))] == '1'
    || tree_code_type[(int) (((enum tree_code) (rhs)->common.code))] == '2')
  {
    tree newt = create_value_expr_from (rhs, block, vuses);
    add_to_sets (lhs, newt, vuses, ((bb_value_sets_t) ((block)->aux))->tmp_gen,
          ((bb_value_sets_t) ((block)->aux))->avail_out);
    value_insert_into_set (((bb_value_sets_t) ((block)->aux))->exp_gen, newt);
    continue;
  }
       else if (((enum tree_code) (rhs)->common.code) == SSA_NAME
         || is_gimple_min_invariant (rhs))
  {
    add_to_sets (lhs, rhs, vuses, ((bb_value_sets_t) ((block)->aux))->tmp_gen,
          ((bb_value_sets_t) ((block)->aux))->avail_out);
    if (((enum tree_code) (rhs)->common.code) == SSA_NAME
        && !is_undefined_value (rhs))
      value_insert_into_set (((bb_value_sets_t) ((block)->aux))->exp_gen, rhs);
    continue;
  }
     }
   for (j = 0; j < ((get_def_ops (stmt_ann (stmt))) ? (get_def_ops (stmt_ann (stmt)))->num_defs : 0); j++)
     {
       tree def = (get_def_from_ptr (get_def_op_ptr (((get_def_ops (stmt_ann (stmt)))), ((j)))));
       add_to_sets (def, def, ((void *)0), ((bb_value_sets_t) ((block)->aux))->tmp_gen,
       ((bb_value_sets_t) ((block)->aux))->avail_out);
     }
   for (j = 0; j < ((get_use_ops (stmt_ann (stmt))) ? (get_use_ops (stmt_ann (stmt)))->num_uses : 0); j++)
     {
       tree use = (get_use_from_ptr (get_use_op_ptr (((get_use_ops (stmt_ann (stmt)))), ((j)))));
       add_to_sets (use, use, ((void *)0), ((bb_value_sets_t) ((block)->aux))->tmp_gen,
       ((bb_value_sets_t) ((block)->aux))->avail_out);
     }
 }
    }
  for (son = first_dom_son (CDI_DOMINATORS, block);
       son;
       son = next_dom_son (CDI_DOMINATORS, son))
    compute_avail (son);
}
static void
eliminate (void)
{
  basic_block b;
  for (b = ENTRY_BLOCK_PTR->next_bb; b != EXIT_BLOCK_PTR; b = b->next_bb)
    {
      block_stmt_iterator i;
      for (i = bsi_start (b); !bsi_end_p (i); bsi_next (&i))
        {
          tree stmt = bsi_stmt (i);
   if (((enum tree_code) (stmt)->common.code) == MODIFY_EXPR
       && ((enum tree_code) (((stmt)->exp.operands[0]))->common.code) == SSA_NAME
       && ((enum tree_code) (((stmt)->exp.operands[1]))->common.code) != SSA_NAME
       && !is_gimple_min_invariant (((stmt)->exp.operands[1]))
       && !stmt_ann (stmt)->has_volatile_ops)
     {
       tree lhs = ((stmt)->exp.operands[0]);
       tree *rhs_p = &((stmt)->exp.operands[1]);
       tree sprime;
       vuse_optype vuses = get_vuse_ops (stmt_ann(stmt));
       sprime = bitmap_find_leader (((bb_value_sets_t) ((b)->aux))->avail_out, vn_lookup (lhs, vuses));
       if (sprime
    && sprime != lhs
    && (((enum tree_code) (*rhs_p)->common.code) != SSA_NAME
        || may_propagate_copy (*rhs_p, sprime)))
  {
    if (sprime == *rhs_p)
      fancy_abort ("gcc.c", 131963, "?");
    if (dump_file && (dump_flags & (1 << 3)))
      {
        fprintf (dump_file, "Replaced ");
        print_generic_expr (dump_file, *rhs_p, 0);
        fprintf (dump_file, " with ");
        print_generic_expr (dump_file, sprime, 0);
        fprintf (dump_file, " in ");
        print_generic_stmt (dump_file, stmt, 0);
      }
    pre_stats.eliminations++;
    propagate_tree_value (rhs_p, sprime);
    modify_stmt (stmt);
  }
     }
        }
    }
}
static void
init_pre (void)
{
  size_t tsize;
  basic_block bb;
  vn_init ();
  memset (&pre_stats, 0, sizeof (pre_stats));
  for (bb = ENTRY_BLOCK_PTR; bb; bb = bb->next_bb)
    bb->aux = xcalloc (1, sizeof (struct bb_value_sets));
  phi_translate_table = htab_create (511, expr_pred_trans_hash,
         expr_pred_trans_eq, free);
  value_set_pool = create_alloc_pool ("Value sets",
          sizeof (struct value_set), 30);
  bitmap_set_pool = create_alloc_pool ("Bitmap sets",
           sizeof (struct bitmap_set), 30);
  value_set_node_pool = create_alloc_pool ("Value set nodes",
               sizeof (struct value_set_node), 30);
  calculate_dominance_info (CDI_POST_DOMINATORS);
  calculate_dominance_info (CDI_DOMINATORS);
  tsize = tree_size (build (PLUS_EXPR, global_trees[TI_VOID_TYPE], (tree) ((void *)0), (tree) ((void *)0)));
  binary_node_pool = create_alloc_pool ("Binary tree nodes", tsize, 30);
  tsize = tree_size (build1_stat (NEGATE_EXPR,global_trees[TI_VOID_TYPE],(tree) ((void *)0) ));
  unary_node_pool = create_alloc_pool ("Unary tree nodes", tsize, 30);
  for (bb = ENTRY_BLOCK_PTR; bb; bb = bb->next_bb)
    {
      ((bb_value_sets_t) ((bb)->aux))->exp_gen = set_new (1);
      ((bb_value_sets_t) ((bb)->aux))->phi_gen = bitmap_set_new ();
      ((bb_value_sets_t) ((bb)->aux))->tmp_gen = bitmap_set_new ();
      ((bb_value_sets_t) ((bb)->aux))->avail_out = bitmap_set_new ();
    }
}
static void
fini_pre (void)
{
  basic_block bb;
  free_alloc_pool (value_set_pool);
  free_alloc_pool (bitmap_set_pool);
  free_alloc_pool (value_set_node_pool);
  free_alloc_pool (binary_node_pool);
  free_alloc_pool (unary_node_pool);
  htab_delete (phi_translate_table);
  for (bb = ENTRY_BLOCK_PTR; bb; bb = bb->next_bb)
    {
      free (bb->aux);
      bb->aux = ((void *)0);
    }
  free_dominance_info (CDI_POST_DOMINATORS);
  vn_delete ();
}
static void
execute_pre (unsigned char do_fre)
{
  init_pre ();
  compute_avail (ENTRY_BLOCK_PTR);
  if (dump_file && (dump_flags & (1 << 3)))
    {
      basic_block bb;
      for (bb = ENTRY_BLOCK_PTR; bb; bb = bb->next_bb)
 {
   print_value_set (dump_file, ((bb_value_sets_t) ((bb)->aux))->exp_gen, "exp_gen", bb->index);
   bitmap_print_value_set (dump_file, ((bb_value_sets_t) ((bb)->aux))->tmp_gen, "tmp_gen",
      bb->index);
   bitmap_print_value_set (dump_file, ((bb_value_sets_t) ((bb)->aux))->avail_out, "avail_out",
      bb->index);
 }
    }
  if (!do_fre && n_basic_blocks < 4000)
    {
      compute_antic ();
      insert_pre ();
    }
  eliminate ();
  if (dump_file && (dump_flags & (1 << 4)))
    {
      fprintf (dump_file, "Insertions:%d\n", pre_stats.insertions);
      fprintf (dump_file, "New PHIs:%d\n", pre_stats.phis);
      fprintf (dump_file, "Eliminated:%d\n", pre_stats.eliminations);
    }
  fini_pre ();
}
static void
do_pre (void)
{
  execute_pre (0);
}
static unsigned char
gate_pre (void)
{
  return flag_tree_pre != 0;
}
struct tree_opt_pass pass_pre =
{
  "pre",
  gate_pre,
  do_pre,
  ((void *)0),
  ((void *)0),
  0,
  TV_TREE_PRE,
  (1 << 7) | (1 << 3) | (1 << 6),
  0,
  0,
  0,
  (1 << 0) | (1 << 2) | (1 << 3)
};
static void
do_fre (void)
{
  execute_pre (1);
}
static unsigned char
gate_fre (void)
{
  return flag_tree_fre != 0;
}
struct tree_opt_pass pass_fre =
{
  "fre",
  gate_fre,
  do_fre,
  ((void *)0),
  ((void *)0),
  0,
  TV_TREE_FRE,
  (1 << 7) | (1 << 3) | (1 << 6),
  0,
  0,
  0,
  (1 << 0) | (1 << 2) | (1 << 3)
};
static void live_worklist (tree_live_info_p, varray_type, int);
static tree_live_info_p new_tree_live_info (var_map);
static void set_if_valid (var_map, bitmap, tree);
static void add_livein_if_notdef (tree_live_info_p, bitmap,
      tree, basic_block);
static void register_ssa_partition (var_map, tree, unsigned char);
static void add_conflicts_if_valid (tpa_p, conflict_graph,
        var_map, bitmap, tree);
static partition_pair_p find_partition_pair (coalesce_list_p, int, int, unsigned char);
var_map
init_var_map (int size)
{
  var_map map;
  map = (var_map) xmalloc (sizeof (struct _var_map));
  map->var_partition = partition_new (size);
  map->partition_to_var
       = (tree *)xmalloc (size * sizeof (tree));
  memset (map->partition_to_var, 0, size * sizeof (tree));
  map->partition_to_compact = ((void *)0);
  map->compact_to_partition = ((void *)0);
  map->num_partitions = size;
  map->partition_size = size;
  map->ref_count = ((void *)0);
  return map;
}
void
delete_var_map (var_map map)
{
  free (map->partition_to_var);
  partition_delete (map->var_partition);
  if (map->partition_to_compact)
    free (map->partition_to_compact);
  if (map->compact_to_partition)
    free (map->compact_to_partition);
  if (map->ref_count)
    free (map->ref_count);
  free (map);
}
int
var_union (var_map map, tree var1, tree var2)
{
  int p1, p2, p3;
  tree root_var = (tree) ((void *)0);
  tree other_var = (tree) ((void *)0);
  if (((enum tree_code) (var1)->common.code) == SSA_NAME)
    p1 = ((map->var_partition)->elements[((var1)->ssa_name.version)].class_element);
  else
    {
      p1 = var_to_partition (map, var1);
      if (map->compact_to_partition)
        p1 = map->compact_to_partition[p1];
      root_var = var1;
    }
  if (((enum tree_code) (var2)->common.code) == SSA_NAME)
    p2 = ((map->var_partition)->elements[((var2)->ssa_name.version)].class_element);
  else
    {
      p2 = var_to_partition (map, var2);
      if (map->compact_to_partition)
        p2 = map->compact_to_partition[p2];
      if (!root_var || is_gimple_tmp_var (root_var))
        {
   other_var = root_var;
   root_var = var2;
 }
      else
 other_var = var2;
    }
  if (p1 == -1 || p2 == -1)
    fancy_abort ("gcc.c", 132285, "?");
  if (p1 == p2)
    p3 = p1;
  else
    p3 = partition_union (map->var_partition, p1, p2);
  if (map->partition_to_compact)
    p3 = map->partition_to_compact[p3];
  if (root_var)
    change_partition_var (map, root_var, p3);
  if (other_var)
    change_partition_var (map, other_var, p3);
  return p3;
}
void
compact_var_map (var_map map, int flags)
{
  sbitmap used;
  int x, limit, count, tmp, root, root_i;
  tree var;
  root_var_p rv = ((void *)0);
  limit = map->partition_size;
  used = sbitmap_alloc (limit);
  sbitmap_zero (used);
  if (map->partition_to_compact)
    {
      free (map->partition_to_compact);
      map->partition_to_compact = ((void *)0);
    }
  if (map->compact_to_partition)
    {
      free (map->compact_to_partition);
      map->compact_to_partition = ((void *)0);
    }
  map->num_partitions = map->partition_size;
  if (flags & 1)
    rv = root_var_init (map);
  map->partition_to_compact = (int *)xmalloc (limit * sizeof (int));
  memset (map->partition_to_compact, 0xff, (limit * sizeof (int)));
  count = 0;
  for (x = 0; x < limit; x++)
    {
      tmp = ((map->var_partition)->elements[(x)].class_element);
      if (!((used)->elms [(tmp) / ((unsigned) (8 * 4))] >> (tmp) % ((unsigned) (8 * 4)) & 1) && map->partition_to_var[tmp] != (tree) ((void *)0))
        {
   if (rv)
     {
       root = root_var_find (rv, tmp);
       root_i = root_var_first_partition (rv, root);
       if (root_var_next_partition (rv, root_i) == -1)
         continue;
     }
   ((used)->elms [(tmp) / ((unsigned) (8 * 4))] |= (unsigned long) 1 << (tmp) % ((unsigned) (8 * 4)));
   count++;
 }
    }
  if (count != limit)
    {
      map->compact_to_partition = (int *)xmalloc (count * sizeof (int));
      count = 0;
      do { unsigned int word_num_; unsigned int bit_num_ = (1) % (unsigned int) ((unsigned) (8 * 4)); unsigned int size_ = (used)->size; unsigned long *ptr_ = (used)->elms; for (word_num_ = (1) / (unsigned int) ((unsigned) (8 * 4)); word_num_ < size_; word_num_++, bit_num_ = 0) { unsigned long word_ = ptr_[word_num_]; if (word_ != 0) for (; bit_num_ < ((unsigned) (8 * 4)); bit_num_++) { unsigned long _mask = (unsigned long) 1 << bit_num_; if ((word_ & _mask) != 0) { word_ &= ~ _mask; (x) = word_num_ * ((unsigned) (8 * 4)) + bit_num_; { map->partition_to_compact[x] = count; map->compact_to_partition[count] = x; var = map->partition_to_var[x]; if (((enum tree_code) (var)->common.code) != SSA_NAME) change_partition_var (map, var, count); count++; }; if (word_ == 0) break; } } } } while (0)
   ;
    }
  else
    {
      free (map->partition_to_compact);
      map->partition_to_compact = ((void *)0);
    }
  map->num_partitions = count;
  if (rv)
    root_var_delete (rv);
  free(used);
}
void
change_partition_var (var_map map, tree var, int part)
{
  var_ann_t ann;
  if (((enum tree_code) (var)->common.code) == SSA_NAME)
    fancy_abort ("gcc.c", 132415, "?");
  ann = var_ann (var);
  ann->out_of_ssa_tag = 1;
  (ann->partition1) = part;
  if (map->compact_to_partition)
    map->partition_to_var[map->compact_to_partition[part]] = var;
}
var_map
create_ssa_var_map (int flags)
{
  block_stmt_iterator bsi;
  basic_block bb;
  tree dest, use;
  tree stmt;
  stmt_ann_t ann;
  vuse_optype vuses;
  v_may_def_optype v_may_defs;
  v_must_def_optype v_must_defs;
  use_optype uses;
  def_optype defs;
  unsigned x;
  var_map map;
  map = init_var_map (((ssa_names)->elements_used) + 1);
  if (flags & 0x01)
    {
      map->ref_count
 = (int *)xmalloc (((((ssa_names)->elements_used) + 1) * sizeof (int)));
      memset (map->ref_count, 0, (((ssa_names)->elements_used) + 1) * sizeof (int));
    }
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      tree phi, arg;
      for (phi = phi_nodes (bb); phi; phi = (((phi))->common.chain))
 {
   int i;
   register_ssa_partition (map, get_def_from_ptr (get_phi_result_ptr (phi)), 0);
   for (i = 0; i < (phi)->phi.num_args; i++)
     {
       arg = get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((i))));
       if (((enum tree_code) (arg)->common.code) == SSA_NAME)
  register_ssa_partition (map, arg, 1);
     }
 }
      for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))
        {
   stmt = bsi_stmt (bsi);
   get_stmt_operands (stmt);
   ann = stmt_ann (stmt);
   uses = get_use_ops (ann);
   for (x = 0; x < ((uses) ? (uses)->num_uses : 0); x++)
     {
       use = (get_use_from_ptr (get_use_op_ptr (((uses)), ((x)))));
       register_ssa_partition (map, use, 1);
     }
   defs = get_def_ops (ann);
   for (x = 0; x < ((defs) ? (defs)->num_defs : 0); x++)
     {
       dest = (get_def_from_ptr (get_def_op_ptr (((defs)), ((x)))));
       register_ssa_partition (map, dest, 0);
     }
   vuses = get_vuse_ops (ann);
   for (x = 0; x < ((vuses) ? (vuses)->num_vuses : 0); x++)
     {
       tree var = (get_use_from_ptr (get_vuse_op_ptr (((vuses)), ((x)))));
       set_is_used (var);
     }
   v_may_defs = get_v_may_def_ops (ann);
   for (x = 0; x < ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0); x++)
     {
       tree var = (get_use_from_ptr (get_v_may_def_op_ptr (((v_may_defs)), ((x)))));
       set_is_used (var);
     }
   v_must_defs = get_v_must_def_ops (ann);
   for (x = 0; x < ((v_must_defs) ? (v_must_defs)->num_v_must_defs : 0); x++)
     {
       tree var = (get_def_from_ptr (get_v_must_def_op_ptr (((v_must_defs)), ((x)))));
       set_is_used (var);
     }
 }
    }
  return map;
}
static tree_live_info_p
new_tree_live_info (var_map map)
{
  tree_live_info_p live;
  int x;
  live = (tree_live_info_p) xmalloc (sizeof (struct tree_live_info_d));
  live->map = map;
  live->num_blocks = last_basic_block;
  live->global = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
  live->livein = (bitmap *)xmalloc (num_var_partitions (map) * sizeof (bitmap));
  for (x = 0; x < num_var_partitions (map); x++)
    live->livein[x] = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
  live->liveout = ((void *)0);
  return live;
}
void
delete_tree_live_info (tree_live_info_p live)
{
  int x;
  if (live->liveout)
    {
      for (x = live->num_blocks - 1; x >= 0; x--)
        do { if (live->liveout[x]) { bitmap_clear (live->liveout[x]); free (live->liveout[x]); (live->liveout[x]) = 0; } } while (0);
      free (live->liveout);
    }
  if (live->livein)
    {
      for (x = num_var_partitions (live->map) - 1; x >= 0; x--)
        do { if (live->livein[x]) { bitmap_clear (live->livein[x]); free (live->livein[x]); (live->livein[x]) = 0; } } while (0);
      free (live->livein);
    }
  if (live->global)
    do { if (live->global) { bitmap_clear (live->global); free (live->global); (live->global) = 0; } } while (0);
  free (live);
}
static void
live_worklist (tree_live_info_p live, varray_type stack, int i)
{
  int b;
  tree var;
  basic_block def_bb = ((void *)0);
  edge e;
  var_map map = live->map;
  var = partition_to_var (map, i);
  if ((var)->common.chain)
    def_bb = bb_for_stmt ((var)->common.chain);
  do { bitmap_element *ptr_ = (live->livein[i])->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (b) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); { do { if ((stack)->elements_used >= (stack)->num_elements) (((stack)) = varray_grow ((stack), 2 * (stack)->num_elements)); (stack)->data.i[(stack)->elements_used++] = (b); } while (0); }; if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
      ;
  while (((stack)->elements_used) > 0)
    {
      b = ((stack)->data.i[(stack)->elements_used - 1]);
      do { ((stack)->elements_used--); } while (0);
      for (e = (((basic_block_info)->data.bb[(b)]))->pred; e; e = e->pred_next)
        if (e->src != ENTRY_BLOCK_PTR)
   {
     if (e->src == def_bb)
       continue;
     if (!bitmap_bit_p (live->livein[i], e->src->index))
       {
         bitmap_set_bit (live->livein[i], e->src->index);
  do { if ((stack)->elements_used >= (stack)->num_elements) (((stack)) = varray_grow ((stack), 2 * (stack)->num_elements)); (stack)->data.i[(stack)->elements_used++] = (e->src->index); } while (0);
       }
   }
    }
}
static void
set_if_valid (var_map map, bitmap vec, tree var)
{
  int p = var_to_partition (map, var);
  if (p != -1)
    bitmap_set_bit (vec, p);
}
static void
add_livein_if_notdef (tree_live_info_p live, bitmap def_vec,
        tree var, basic_block bb)
{
  int p = var_to_partition (live->map, var);
  if (p == -1 || bb == ENTRY_BLOCK_PTR)
    return;
  if (!bitmap_bit_p (def_vec, p))
    {
      bitmap_set_bit (live->livein[p], bb->index);
      bitmap_set_bit (live->global, p);
    }
}
tree_live_info_p
calculate_live_on_entry (var_map map)
{
  tree_live_info_p live;
  int num, i;
  basic_block bb;
  bitmap saw_def;
  tree phi, var, stmt;
  tree op;
  edge e;
  varray_type stack;
  block_stmt_iterator bsi;
  use_optype uses;
  def_optype defs;
  stmt_ann_t ann;
  saw_def = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
  live = new_tree_live_info (map);
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      bitmap_clear (saw_def);
      for (phi = phi_nodes (bb); phi; phi = (((phi))->common.chain))
 {
   for (i = 0; i < (phi)->phi.num_args; i++)
     {
       var = get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((i))));
       if (!phi_ssa_name_p (var))
         continue;
       stmt = (var)->common.chain;
       e = ((phi)->phi.a[i]).e;
       if (!stmt || e->src != bb_for_stmt (stmt))
  add_livein_if_notdef (live, saw_def, var, e->src);
     }
        }
      for (phi = phi_nodes (bb); phi; phi = (((phi))->common.chain))
        {
   var = get_def_from_ptr (get_phi_result_ptr (phi));
   set_if_valid (map, saw_def, var);
 }
      for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))
        {
   stmt = bsi_stmt (bsi);
   get_stmt_operands (stmt);
   ann = stmt_ann (stmt);
   uses = get_use_ops (ann);
   num = ((uses) ? (uses)->num_uses : 0);
   for (i = 0; i < num; i++)
     {
       op = (get_use_from_ptr (get_use_op_ptr (((uses)), ((i)))));
       add_livein_if_notdef (live, saw_def, op, bb);
     }
   defs = get_def_ops (ann);
   num = ((defs) ? (defs)->num_defs : 0);
   for (i = 0; i < num; i++)
     {
       op = (get_def_from_ptr (get_def_op_ptr (((defs)), ((i)))));
       set_if_valid (map, saw_def, op);
     }
 }
    }
  stack = varray_init (last_basic_block, VARRAY_DATA_I, "stack");
  do { bitmap_element *ptr_ = (live->global)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (i) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); { live_worklist (live, stack, i); }; if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
      ;
  do { if (saw_def) { bitmap_clear (saw_def); free (saw_def); (saw_def) = 0; } } while (0);
  return live;
}
void
calculate_live_on_exit (tree_live_info_p liveinfo)
{
  unsigned b;
  int i, x;
  bitmap *on_exit;
  basic_block bb;
  edge e;
  tree t, phi;
  bitmap on_entry;
  var_map map = liveinfo->map;
  on_exit = (bitmap *)xmalloc (last_basic_block * sizeof (bitmap));
  for (x = 0; x < last_basic_block; x++)
    on_exit[x] = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      for (phi = phi_nodes (bb); phi; phi = (((phi))->common.chain))
 for (i = 0; i < (phi)->phi.num_args; i++)
   {
     t = get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((i))));
     e = ((phi)->phi.a[i]).e;
     if (!phi_ssa_name_p (t) || e->src == ENTRY_BLOCK_PTR)
       continue;
     set_if_valid (map, on_exit[e->src->index], t);
   }
    }
  for (i = 0; i < num_var_partitions (map); i++)
    {
      on_entry = live_entry_blocks (liveinfo, i);
      do { bitmap_element *ptr_ = (on_entry)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (b) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); { for (e = (((basic_block_info)->data.bb[(b)]))->pred; e; e = e->pred_next) if (e->src != ENTRY_BLOCK_PTR) bitmap_set_bit (on_exit[e->src->index], i); }; if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
   ;
    }
  liveinfo->liveout = on_exit;
}
tpa_p
tpa_init (var_map map)
{
  tpa_p tpa;
  int num_partitions = num_var_partitions (map);
  int x;
  if (num_partitions == 0)
    return ((void *)0);
  tpa = (tpa_p) xmalloc (sizeof (struct tree_partition_associator_d));
  tpa->num_trees = 0;
  tpa->uncompressed_num = -1;
  tpa->map = map;
  tpa->next_partition = (int *)xmalloc (num_partitions * sizeof (int));
  memset (tpa->next_partition, -1, num_partitions * sizeof (int));
  tpa->partition_to_tree_map = (int *)xmalloc (num_partitions * sizeof (int));
  memset (tpa->partition_to_tree_map, -1, num_partitions * sizeof (int));
  x = ((40) > ((num_partitions / 20)) ? (40) : ((num_partitions / 20)));
  tpa->trees = varray_init (x, VARRAY_DATA_TREE, "trees");
  tpa->first_partition = varray_init (x, VARRAY_DATA_I, "first_partition");
  return tpa;
}
void
tpa_remove_partition (tpa_p tpa, int tree_index, int partition_index)
{
  int i;
  i = tpa_first_partition (tpa, tree_index);
  if (i == partition_index)
    {
      ((tpa->first_partition)->data.i[tree_index]) = tpa->next_partition[i];
    }
  else
    {
      for ( ; i != -1; i = tpa_next_partition (tpa, i))
        {
   if (tpa->next_partition[i] == partition_index)
     {
       tpa->next_partition[i] = tpa->next_partition[partition_index];
       break;
     }
 }
    }
}
void
tpa_delete (tpa_p tpa)
{
  if (!tpa)
    return;
  free (tpa->partition_to_tree_map);
  free (tpa->next_partition);
  free (tpa);
}
int
tpa_compact (tpa_p tpa)
{
  int last, x, y, first, swap_i;
  tree swap_t;
  for (last = tpa->num_trees - 1; last > 0; last--)
    {
      first = tpa_first_partition (tpa, last);
      if (tpa_next_partition (tpa, first) != -1)
        break;
    }
  x = 0;
  while (x < last)
    {
      first = tpa_first_partition (tpa, x);
      if (tpa_next_partition (tpa, first) == -1)
        {
   swap_t = ((tpa->trees)->data.tree1[last]);
   swap_i = ((tpa->first_partition)->data.i[last]);
   ((tpa->trees)->data.tree1[last]) = ((tpa->trees)->data.tree1[x]);
   ((tpa->first_partition)->data.i[last])
     = ((tpa->first_partition)->data.i[x]);
   tpa->partition_to_tree_map[tpa_first_partition (tpa, last)] = last;
   ((tpa->trees)->data.tree1[x]) = swap_t;
   ((tpa->first_partition)->data.i[x]) = swap_i;
   for (y = tpa_first_partition (tpa, x);
        y != -1;
        y = tpa_next_partition (tpa, y))
     tpa->partition_to_tree_map[y] = x;
   last--;
   for (; last > x; last--)
     {
       first = tpa_first_partition (tpa, last);
       if (tpa_next_partition (tpa, first) != -1)
  break;
     }
 }
      x++;
    }
  first = tpa_first_partition (tpa, x);
  if (tpa_next_partition (tpa, first) != -1)
    x++;
  tpa->uncompressed_num = tpa->num_trees;
  tpa->num_trees = x;
  return last;
}
root_var_p
root_var_init (var_map map)
{
  root_var_p rv;
  int num_partitions = num_var_partitions (map);
  int x, p;
  tree t;
  var_ann_t ann;
  sbitmap seen;
  rv = tpa_init (map);
  if (!rv)
    return ((void *)0);
  seen = sbitmap_alloc (num_partitions);
  sbitmap_zero (seen);
  for (x = num_partitions - 1; x >= 0; x--)
    {
      t = partition_to_var (map, x);
      if (!t)
        continue;
      p = var_to_partition (map, t);
      if (((seen)->elms [(p) / ((unsigned) (8 * 4))] >> (p) % ((unsigned) (8 * 4)) & 1))
        continue;
      ((seen)->elms [(p) / ((unsigned) (8 * 4))] |= (unsigned long) 1 << (p) % ((unsigned) (8 * 4)));
      if (((enum tree_code) (t)->common.code) == SSA_NAME)
 t = (t)->ssa_name.var;
      ann = var_ann (t);
      if (ann->root_var_processed)
        {
   rv->next_partition[p] = ((rv->first_partition)->data.i[(ann->root_index)])
                                    ;
   ((rv->first_partition)->data.i[(ann->root_index)]) = p;
 }
      else
        {
   ann->root_var_processed = 1;
   (ann->root_index) = rv->num_trees++;
   do { if ((rv->trees)->elements_used >= (rv->trees)->num_elements) (((rv->trees)) = varray_grow ((rv->trees), 2 * (rv->trees)->num_elements)); (rv->trees)->data.tree1[(rv->trees)->elements_used++] = (t); } while (0);
   do { if ((rv->first_partition)->elements_used >= (rv->first_partition)->num_elements) (((rv->first_partition)) = varray_grow ((rv->first_partition), 2 * (rv->first_partition)->num_elements)); (rv->first_partition)->data.i[(rv->first_partition)->elements_used++] = (p); } while (0);
 }
      rv->partition_to_tree_map[p] = (ann->root_index);
    }
  for (x = 0; x < rv->num_trees; x++)
    {
      t = ((rv->trees)->data.tree1[x]);
      var_ann (t)->root_var_processed = 0;
    }
  free(seen);
  return rv;
}
type_var_p
type_var_init (var_map map)
{
  type_var_p tv;
  int x, y, p;
  int num_partitions = num_var_partitions (map);
  tree t;
  sbitmap seen;
  seen = sbitmap_alloc (num_partitions);
  sbitmap_zero (seen);
  tv = tpa_init (map);
  if (!tv)
    return ((void *)0);
  for (x = num_partitions - 1; x >= 0; x--)
    {
      t = partition_to_var (map, x);
      if (!t
   || ((t)->common.volatile_flag)
   || ((enum tree_code) (t)->common.code) == RESULT_DECL
         || ((enum tree_code) (t)->common.code) == PARM_DECL
   || ((tree_code_type[(int) (((enum tree_code) (t)->common.code))] == 'd')
       && (((t)->decl.regdecl_flag)
    || !((t)->decl.artificial_flag)
    || ((t)->decl.rtl != ((void *)0)))))
        continue;
      p = var_to_partition (map, t);
      if (((seen)->elms [(p) / ((unsigned) (8 * 4))] >> (p) % ((unsigned) (8 * 4)) & 1))
        continue;
      ((seen)->elms [(p) / ((unsigned) (8 * 4))] |= (unsigned long) 1 << (p) % ((unsigned) (8 * 4)));
      t = ((t)->common.type);
      for (y = 0; y < tv->num_trees; y++)
        if (t == ((tv->trees)->data.tree1[y]))
   break;
      if (y == tv->num_trees)
        {
   tv->num_trees++;
   do { if ((tv->trees)->elements_used >= (tv->trees)->num_elements) (((tv->trees)) = varray_grow ((tv->trees), 2 * (tv->trees)->num_elements)); (tv->trees)->data.tree1[(tv->trees)->elements_used++] = (t); } while (0);
   do { if ((tv->first_partition)->elements_used >= (tv->first_partition)->num_elements) (((tv->first_partition)) = varray_grow ((tv->first_partition), 2 * (tv->first_partition)->num_elements)); (tv->first_partition)->data.i[(tv->first_partition)->elements_used++] = (p); } while (0);
 }
      else
        {
   tv->next_partition[p] = ((tv->first_partition)->data.i[y]);
   ((tv->first_partition)->data.i[y]) = p;
 }
      tv->partition_to_tree_map[p] = y;
    }
  free(seen);
  return tv;
}
coalesce_list_p
create_coalesce_list (var_map map)
{
  coalesce_list_p list;
  list = (coalesce_list_p) xmalloc (sizeof (struct coalesce_list_d));
  list->map = map;
  list->add_mode = 1;
  list->list = (partition_pair_p *) xcalloc (num_var_partitions (map),
          sizeof (struct partition_pair_d));
  return list;
}
void
delete_coalesce_list (coalesce_list_p cl)
{
  free (cl->list);
  free (cl);
}
static partition_pair_p
find_partition_pair (coalesce_list_p cl, int p1, int p2, unsigned char create)
{
  partition_pair_p node, tmp;
  int s;
  if (p2 < p1)
    {
      s = p1;
      p1 = p2;
      p2 = s;
    }
  tmp = ((void *)0);
  for (node = cl->list[p1]; node; node = node->next)
    {
      if (node->second_partition == p2)
        return node;
      else
        if (node->second_partition > p2)
   break;
     tmp = node;
    }
  if (!create)
    return ((void *)0);
  node = (partition_pair_p) xmalloc (sizeof (struct partition_pair_d));
  node->first_partition = p1;
  node->second_partition = p2;
  node->cost = 0;
  if (tmp != ((void *)0))
    {
      node->next = tmp->next;
      tmp->next = node;
    }
  else
    {
      node->next = cl->list[p1];
      cl->list[p1] = node;
    }
  return node;
}
void
add_coalesce (coalesce_list_p cl, int p1, int p2, int value1)
{
  partition_pair_p node;
  if (p1 == p2)
    return;
  node = find_partition_pair (cl, p1, p2, 1);
  node->cost += value1;
}
static
int compare_pairs (const void *p1, const void *p2)
{
  return (*(partition_pair_p *)p2)->cost - (*(partition_pair_p *)p1)->cost;
}
void
sort_coalesce_list (coalesce_list_p cl)
{
  int x, num, count;
  partition_pair_p chain, p;
  partition_pair_p *list;
  if (!cl->add_mode)
    fancy_abort ("gcc.c", 133323, "?");
  cl->add_mode = 0;
  num = 0;
  chain = ((void *)0);
  for (x = 0; x < num_var_partitions (cl->map); x++)
    if (cl->list[x] != ((void *)0))
      {
        for (p = cl->list[x]; p->next != ((void *)0); p = p->next)
   num++;
 num++;
 p->next = chain;
 chain = cl->list[x];
 cl->list[x] = ((void *)0);
      }
  if (num > 2)
    {
      list = xmalloc (sizeof (partition_pair_p) * num);
      count = 0;
      for (p = chain; p != ((void *)0); p = p->next)
 list[count++] = p;
      qsort (list, count, sizeof (partition_pair_p), compare_pairs);
      p = list[0];
      for (x = 1; x < num; x++)
 {
   p->next = list[x];
   p = list[x];
 }
      p->next = ((void *)0);
      cl->list[0] = list[0];
      free (list);
    }
  else
    {
      cl->list[0] = chain;
      if (num == 2)
 {
   if (chain->cost < chain->next->cost)
     {
       cl->list[0] = chain->next;
       cl->list[0]->next = chain;
       chain->next = ((void *)0);
     }
 }
    }
}
int
pop_best_coalesce (coalesce_list_p cl, int *p1, int *p2)
{
  partition_pair_p node;
  int ret;
  if (cl->add_mode)
    fancy_abort ("gcc.c", 133394, "?");
  node = cl->list[0];
  if (!node)
    return -1;
  cl->list[0] = node->next;
  *p1 = node->first_partition;
  *p2 = node->second_partition;
  ret = node->cost;
  free (node);
  return ret;
}
static void
add_conflicts_if_valid (tpa_p tpa, conflict_graph graph,
   var_map map, bitmap vec, tree var)
{
  int p, y, first;
  p = var_to_partition (map, var);
  if (p != -1)
    {
      bitmap_clear_bit (vec, p);
      first = tpa_find_tree (tpa, p);
      if (first == -1)
        return;
      for (y = tpa_first_partition (tpa, first);
    y != -1;
    y = tpa_next_partition (tpa, y))
 {
   if (bitmap_bit_p (vec, y))
     conflict_graph_add (graph, p, y);
 }
    }
}
conflict_graph
build_tree_conflict_graph (tree_live_info_p liveinfo, tpa_p tpa,
      coalesce_list_p cl)
{
  conflict_graph graph;
  var_map map;
  bitmap live;
  int num, x, y, i;
  basic_block bb;
  varray_type partition_link, tpa_to_clear, tpa_nodes;
  def_optype defs;
  use_optype uses;
  unsigned l;
  map = live_var_map (liveinfo);
  graph = conflict_graph_new (num_var_partitions (map));
  if (tpa_num_trees (tpa) == 0)
    return graph;
  live = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
  partition_link = varray_init (num_var_partitions (map) + 1, VARRAY_DATA_I, "part_link");
  tpa_nodes = varray_init (tpa_num_trees (tpa), VARRAY_DATA_I, "tpa nodes");
  tpa_to_clear = varray_init (50, VARRAY_DATA_I, "tpa to clear");
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      block_stmt_iterator bsi;
      tree phi;
      bitmap_copy (live, live_on_exit (liveinfo, bb));
      for (bsi = bsi_last (bb); !bsi_end_p (bsi); bsi_prev (&bsi))
        {
   unsigned char is_a_copy = 0;
   tree stmt = bsi_stmt (bsi);
   stmt_ann_t ann;
   get_stmt_operands (stmt);
   ann = stmt_ann (stmt);
   if (((enum tree_code) (stmt)->common.code) == MODIFY_EXPR)
     {
       tree lhs = ((stmt)->exp.operands[0]);
       tree rhs = ((stmt)->exp.operands[1]);
       int p1, p2;
       int bit;
       if ((tree_code_type[(int) (((enum tree_code) (lhs)->common.code))] == 'd') || ((enum tree_code) (lhs)->common.code) == SSA_NAME)
  p1 = var_to_partition (map, lhs);
       else
  p1 = -1;
       if ((tree_code_type[(int) (((enum tree_code) (rhs)->common.code))] == 'd') || ((enum tree_code) (rhs)->common.code) == SSA_NAME)
  p2 = var_to_partition (map, rhs);
       else
  p2 = -1;
       if (p1 != -1 && p2 != -1)
  {
    is_a_copy = 1;
    bit = bitmap_bit_p (live, p2);
    if (bit)
      bitmap_clear_bit (live, p2);
    add_conflicts_if_valid (tpa, graph, map, live, lhs);
    if (bit)
      bitmap_set_bit (live, p2);
    if (cl)
      add_coalesce (cl, p1, p2, 1);
    set_if_valid (map, live, rhs);
  }
     }
   if (!is_a_copy)
     {
       tree var;
       defs = get_def_ops (ann);
       num = ((defs) ? (defs)->num_defs : 0);
       for (x = 0; x < num; x++)
  {
    var = (get_def_from_ptr (get_def_op_ptr (((defs)), ((x)))));
    add_conflicts_if_valid (tpa, graph, map, live, var);
  }
       uses = get_use_ops (ann);
       num = ((uses) ? (uses)->num_uses : 0);
       for (x = 0; x < num; x++)
  {
    var = (get_use_from_ptr (get_use_op_ptr (((uses)), ((x)))));
    set_if_valid (map, live, var);
  }
     }
 }
      for (phi = phi_nodes (bb); phi; phi = (((phi))->common.chain))
 {
   tree result = get_def_from_ptr (get_phi_result_ptr (phi));
   int p = var_to_partition (map, result);
   if (p != -1 && ! bitmap_bit_p (live, p))
     add_conflicts_if_valid (tpa, graph, map, live, result);
 }
      do { bitmap_element *ptr_ = (live)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (x) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); { i = tpa_find_tree (tpa, x); if (i != -1) { int start = ((tpa_nodes)->data.i[i]); if (!start) do { if ((tpa_to_clear)->elements_used >= (tpa_to_clear)->num_elements) (((tpa_to_clear)) = varray_grow ((tpa_to_clear), 2 * (tpa_to_clear)->num_elements)); (tpa_to_clear)->data.i[(tpa_to_clear)->elements_used++] = (i); } while (0); for (y = start; y != 0; y = ((partition_link)->data.i[y])) conflict_graph_add (graph, x, y - 1); ((tpa_nodes)->data.i[i]) = x + 1; ((partition_link)->data.i[x + 1]) = start; } }; if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
   ;
 for (l = 0; l < ((tpa_to_clear)->elements_used); l++)
   ((tpa_nodes)->data.i[((tpa_to_clear)->data.i[l])]) = 0;
 ((tpa_to_clear)->elements_used = 0);
    }
  do { if (live) { bitmap_clear (live); free (live); (live) = 0; } } while (0);
  return graph;
}
void
coalesce_tpa_members (tpa_p tpa, conflict_graph graph, var_map map,
        coalesce_list_p cl, FILE *debug)
{
  int x, y, z, w;
  tree var, tmp;
  if (cl)
    {
      while (pop_best_coalesce (cl, &x, &y) != -1)
        {
   if (debug)
     {
       fprintf (debug, "Coalesce list: (%d)", x);
       print_generic_expr (debug, partition_to_var (map, x), (1 << 1));
       fprintf (debug, " & (%d)", y);
       print_generic_expr (debug, partition_to_var (map, y), (1 << 1));
     }
   w = tpa_find_tree (tpa, x);
   z = tpa_find_tree (tpa, y);
   if (w != z || w == -1 || z == -1)
     {
       if (debug)
  {
    if (w != z)
      fprintf (debug, ": Fail, Non-matching TPA's\n");
    if (w == -1)
      fprintf (debug, ": Fail %d non TPA.\n", x);
    else
      fprintf (debug, ": Fail %d non TPA.\n", y);
  }
       continue;
     }
   var = partition_to_var (map, x);
   tmp = partition_to_var (map, y);
   x = var_to_partition (map, var);
   y = var_to_partition (map, tmp);
   if (debug)
     fprintf (debug, " [map: %d, %d] ", x, y);
   if (x == y)
     {
       if (debug)
  fprintf (debug, ": Already Coalesced.\n");
       continue;
     }
   if (!conflict_graph_conflict_p (graph, x, y))
     {
       z = var_union (map, var, tmp);
       if (z == -1)
         {
    if (debug)
      fprintf (debug, ": Unable to perform partition union.\n");
    continue;
  }
       if (z == x)
         {
    conflict_graph_merge_regs (graph, x, y);
    w = tpa_find_tree (tpa, y);
    tpa_remove_partition (tpa, w, y);
  }
       else
         {
    conflict_graph_merge_regs (graph, y, x);
    w = tpa_find_tree (tpa, x);
    tpa_remove_partition (tpa, w, x);
  }
       if (debug)
  fprintf (debug, ": Success -> %d\n", z);
     }
   else
     if (debug)
       fprintf (debug, ": Fail due to conflict\n");
 }
      return;
    }
  for (x = 0; x < tpa_num_trees (tpa); x++)
    {
      while (tpa_first_partition (tpa, x) != -1)
        {
   int p1, p2;
   y = tpa_first_partition (tpa, x);
   tpa_remove_partition (tpa, x, y);
   var = partition_to_var (map, y);
   p1 = var_to_partition (map, var);
   for (z = tpa_next_partition (tpa, y);
        z != -1;
        z = tpa_next_partition (tpa, z))
     {
       tmp = partition_to_var (map, z);
       p2 = var_to_partition (map, tmp);
       if (debug)
  {
    fprintf (debug, "Coalesce : ");
    print_generic_expr (debug, var, (1 << 1));
    fprintf (debug, " &");
    print_generic_expr (debug, tmp, (1 << 1));
    fprintf (debug, "  (%d ,%d)", p1, p2);
  }
       if (tmp == var)
         {
    tpa_remove_partition (tpa, x, z);
    if (debug)
      fprintf (debug, ": Already coalesced\n");
  }
       else
  if (!conflict_graph_conflict_p (graph, p1, p2))
    {
      int v;
      if (tpa_find_tree (tpa, y) == -1
   || tpa_find_tree (tpa, z) == -1)
        {
   if (debug)
     fprintf (debug, ": Fail non-TPA member\n");
   continue;
        }
      if ((v = var_union (map, var, tmp)) == -1)
        {
   if (debug)
     fprintf (debug, ": Fail cannot combine partitions\n");
   continue;
        }
      tpa_remove_partition (tpa, x, z);
      if (v == p1)
        conflict_graph_merge_regs (graph, v, z);
      else
        {
   conflict_graph_merge_regs (graph, v, y);
   p1 = v;
        }
      var = partition_to_var (map, p1);
      if (debug)
        fprintf (debug, ": Success -> %d\n", v);
    }
  else
    if (debug)
      fprintf (debug, ": Fail, Conflict\n");
     }
 }
    }
}
void
dump_coalesce_list (FILE *f, coalesce_list_p cl)
{
  partition_pair_p node;
  int x, num;
  tree var;
  if (cl->add_mode)
    {
      fprintf (f, "Coalesce List:\n");
      num = num_var_partitions (cl->map);
      for (x = 0; x < num; x++)
        {
   node = cl->list[x];
   if (node)
     {
       fprintf (f, "[");
       print_generic_expr (f, partition_to_var (cl->map, x), (1 << 1));
       fprintf (f, "] - ");
       for ( ; node; node = node->next)
         {
    var = partition_to_var (cl->map, node->second_partition);
    print_generic_expr (f, var, (1 << 1));
    fprintf (f, "(%1d), ", node->cost);
  }
       fprintf (f, "\n");
     }
 }
    }
  else
    {
      fprintf (f, "Sorted Coalesce list:\n");
      for (node = cl->list[0]; node; node = node->next)
        {
   fprintf (f, "(%d) ", node->cost);
   var = partition_to_var (cl->map, node->first_partition);
   print_generic_expr (f, var, (1 << 1));
   fprintf (f, " : ");
   var = partition_to_var (cl->map, node->second_partition);
   print_generic_expr (f, var, (1 << 1));
   fprintf (f, "\n");
 }
    }
}
void
tpa_dump (FILE *f, tpa_p tpa)
{
  int x, i;
  if (!tpa)
    return;
  for (x = 0; x < tpa_num_trees (tpa); x++)
    {
      print_generic_expr (f, tpa_tree (tpa, x), (1 << 1));
      fprintf (f, " : (");
      for (i = tpa_first_partition (tpa, x);
    i != -1;
    i = tpa_next_partition (tpa, i))
 {
   fprintf (f, "(%d)",i);
   print_generic_expr (f, partition_to_var (tpa->map, i), (1 << 1));
   fprintf (f, " ");
 }
      fprintf (f, ")\n");
    }
  fflush (f);
}
void
dump_var_map (FILE *f, var_map map)
{
  int t;
  unsigned x, y;
  int p;
  fprintf (f, "\nPartition map \n\n");
  for (x = 0; x < map->num_partitions; x++)
    {
      if (map->compact_to_partition != ((void *)0))
 p = map->compact_to_partition[x];
      else
 p = x;
      if (map->partition_to_var[p] == (tree) ((void *)0))
        continue;
      t = 0;
      for (y = 1; y < ((ssa_names)->elements_used); y++)
        {
   p = ((map->var_partition)->elements[(y)].class_element);
   if (map->partition_to_compact)
     p = map->partition_to_compact[p];
   if (p == (int)x)
     {
       if (t++ == 0)
         {
    fprintf(f, "Partition %d (", x);
    print_generic_expr (f, partition_to_var (map, p), (1 << 1));
    fprintf (f, " - ");
  }
       fprintf (f, "%d ", y);
     }
 }
      if (t != 0)
 fprintf (f, ")\n");
    }
  fprintf (f, "\n");
}
void
dump_live_info (FILE *f, tree_live_info_p live, int flag)
{
  basic_block bb;
  int i;
  var_map map = live->map;
  if ((flag & 0x01) && live->livein)
    {
      for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
 {
   fprintf (f, "\nLive on entry to BB%d : ", bb->index);
   for (i = 0; i < num_var_partitions (map); i++)
     {
       if (bitmap_bit_p (live_entry_blocks (live, i), bb->index))
         {
    print_generic_expr (f, partition_to_var (map, i), (1 << 1));
    fprintf (f, "  ");
  }
     }
   fprintf (f, "\n");
 }
    }
  if ((flag & 0x02) && live->liveout)
    {
      for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
 {
   fprintf (f, "\nLive on exit from BB%d : ", bb->index);
   do { bitmap_element *ptr_ = (live->liveout[bb->index])->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (i) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); { print_generic_expr (f, partition_to_var (map, i), (1 << 1)); fprintf (f, "  "); }; if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
       ;
   fprintf (f, "\n");
 }
    }
}
void
register_ssa_partitions_for_vars (bitmap vars, var_map map)
{
  basic_block bb;
  if (bitmap_first_set_bit (vars) >= 0)
    {
      for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
 {
   block_stmt_iterator bsi;
   tree next;
   tree phi;
   for (phi = phi_nodes (bb); phi; phi = next)
     {
       tree result = (get_def_from_ptr (get_phi_result_ptr (phi)))->ssa_name.var;
       next = (((phi))->common.chain);
       if (bitmap_bit_p (vars, var_ann (result)->uid))
  {
    if (! is_gimple_reg (result))
      remove_phi_node (phi, (tree) ((void *)0), bb);
    else
      {
        int i;
        register_ssa_partition (map, get_def_from_ptr (get_phi_result_ptr (phi)), 0);
        for (i = 0; i < (phi)->phi.num_args; i++)
   {
     tree arg = get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((i))));
     if (((enum tree_code) (arg)->common.code) != SSA_NAME)
       continue;
     if (!bitmap_bit_p (vars,
          var_ann ((arg)->ssa_name.var)->uid))
       continue;
     register_ssa_partition (map, arg, 1);
          }
      }
  }
     }
   for (bsi = bsi_start (bb); ! bsi_end_p (bsi); bsi_next (&bsi))
     {
       stmt_ann_t ann = stmt_ann (bsi_stmt (bsi));
       use_optype uses = get_use_ops (ann);
       def_optype defs = get_def_ops (ann);
       unsigned int i;
       for (i = 0; i < ((uses) ? (uses)->num_uses : 0); i++)
  {
    tree op = (get_use_from_ptr (get_use_op_ptr (((uses)), ((i)))));
    if (((enum tree_code) (op)->common.code) == SSA_NAME
        && bitmap_bit_p (vars, var_ann ((op)->ssa_name.var)->uid))
      register_ssa_partition (map, op, 1);
  }
       for (i = 0; i < ((defs) ? (defs)->num_defs : 0); i++)
  {
    tree op = (get_def_from_ptr (get_def_op_ptr (((defs)), ((i)))));
    if (((enum tree_code) (op)->common.code) == SSA_NAME
     && bitmap_bit_p (vars,
        var_ann ((op)->ssa_name.var)->uid))
      register_ssa_partition (map, op, 0);
  }
     }
 }
    }
}
static varray_type build_defs;
static varray_type build_uses;
static varray_type build_v_may_defs;
static varray_type build_vuses;
static varray_type build_v_must_defs;
typedef struct voperands_d
{
  v_may_def_optype v_may_def_ops;
  vuse_optype vuse_ops;
  v_must_def_optype v_must_def_ops;
} *voperands_t;
static void note_addressable (tree, stmt_ann_t);
static void get_expr_operands (tree, tree *, int, voperands_t);
static void append_def (tree *, tree);
static void append_use (tree *, tree);
static void append_v_may_def (tree, tree, voperands_t);
static void append_v_must_def (tree, tree, voperands_t);
static void add_call_clobber_ops (tree, voperands_t);
static void add_call_read_ops (tree, voperands_t);
static void add_stmt_operand (tree *, tree, int, voperands_t);
static def_optype
allocate_def_optype (unsigned num)
{
  def_optype def_ops;
  unsigned size;
  size = sizeof (struct def_optype_d) + sizeof (tree *) * (num - 1);
  def_ops = ggc_alloc_stat (size );
  def_ops->num_defs = num;
  return def_ops;
}
static use_optype
allocate_use_optype (unsigned num)
{
  use_optype use_ops;
  unsigned size;
  size = sizeof (struct use_optype_d) + sizeof (tree *) * (num - 1);
  use_ops = ggc_alloc_stat (size );
  use_ops->num_uses = num;
  return use_ops;
}
static v_may_def_optype
allocate_v_may_def_optype (unsigned num)
{
  v_may_def_optype v_may_def_ops;
  unsigned size;
  size = sizeof (struct v_may_def_optype_d) + sizeof (tree) * ((num * 2) - 1);
  v_may_def_ops = ggc_alloc_stat (size );
  v_may_def_ops->num_v_may_defs = num;
  return v_may_def_ops;
}
static vuse_optype
allocate_vuse_optype (unsigned num)
{
  vuse_optype vuse_ops;
  unsigned size;
  size = sizeof (struct vuse_optype_d) + sizeof (tree) * (num - 1);
  vuse_ops = ggc_alloc_stat (size );
  vuse_ops->num_vuses = num;
  return vuse_ops;
}
static v_must_def_optype
allocate_v_must_def_optype (unsigned num)
{
  v_must_def_optype v_must_def_ops;
  unsigned size;
  size = sizeof (struct v_must_def_optype_d) + sizeof (tree *) * (num - 1);
  v_must_def_ops = ggc_alloc_stat (size );
  v_must_def_ops->num_v_must_defs = num;
  return v_must_def_ops;
}
static void
free_uses (use_optype *uses, unsigned char dealloc)
{
  if (*uses)
    {
      if (dealloc)
 ggc_free (*uses);
      *uses = ((void *)0);
    }
}
static void
free_defs (def_optype *defs, unsigned char dealloc)
{
  if (*defs)
    {
      if (dealloc)
 ggc_free (*defs);
      *defs = ((void *)0);
    }
}
static void
free_vuses (vuse_optype *vuses, unsigned char dealloc)
{
  if (*vuses)
    {
      if (dealloc)
 ggc_free (*vuses);
      *vuses = ((void *)0);
    }
}
static void
free_v_may_defs (v_may_def_optype *v_may_defs, unsigned char dealloc)
{
  if (*v_may_defs)
    {
      if (dealloc)
 ggc_free (*v_may_defs);
      *v_may_defs = ((void *)0);
    }
}
static void
free_v_must_defs (v_must_def_optype *v_must_defs, unsigned char dealloc)
{
  if (*v_must_defs)
    {
      if (dealloc)
 ggc_free (*v_must_defs);
      *v_must_defs = ((void *)0);
    }
}
void
remove_vuses (tree stmt)
{
  stmt_ann_t ann;
  ann = stmt_ann (stmt);
  if (ann)
    free_vuses (&(ann->vuse_ops), 1);
}
void
remove_v_may_defs (tree stmt)
{
  stmt_ann_t ann;
  ann = stmt_ann (stmt);
  if (ann)
    free_v_may_defs (&(ann->v_may_def_ops), 1);
}
void
remove_v_must_defs (tree stmt)
{
  stmt_ann_t ann;
  ann = stmt_ann (stmt);
  if (ann)
    free_v_must_defs (&(ann->v_must_def_ops), 1);
}
void
init_ssa_operands (void)
{
  build_defs = varray_init (5, VARRAY_DATA_TREE_PTR, "build defs");
  build_uses = varray_init (10, VARRAY_DATA_TREE_PTR, "build uses");
  build_v_may_defs = varray_init (10, VARRAY_DATA_TREE, "build v_may_defs");
  build_vuses = varray_init (10, VARRAY_DATA_TREE, "build vuses");
  build_v_must_defs = varray_init (10, VARRAY_DATA_TREE, "build v_must_defs");
}
void
fini_ssa_operands (void)
{
}
static void
finalize_ssa_defs (tree stmt)
{
  unsigned num, x;
  stmt_ann_t ann;
  def_optype def_ops;
  num = ((build_defs)->elements_used);
  if (num == 0)
    return;
  def_ops = allocate_def_optype (num);
  for (x = 0; x < num ; x++)
    def_ops->defs[x].def = ((build_defs)->data.tp[x]);
  ((build_defs)->elements_used = 0);
  ann = stmt_ann (stmt);
  ann->def_ops = def_ops;
}
static void
finalize_ssa_uses (tree stmt)
{
  unsigned num, x;
  use_optype use_ops;
  stmt_ann_t ann;
  num = ((build_uses)->elements_used);
  if (num == 0)
    return;
  use_ops = allocate_use_optype (num);
  for (x = 0; x < num ; x++)
    use_ops->uses[x].use = ((build_uses)->data.tp[x]);
  ((build_uses)->elements_used = 0);
  ann = stmt_ann (stmt);
  ann->use_ops = use_ops;
}
static void
finalize_ssa_v_may_defs (tree stmt)
{
  unsigned num, x;
  v_may_def_optype v_may_def_ops;
  stmt_ann_t ann;
  num = ((build_v_may_defs)->elements_used);
  if (num == 0)
    return;
  v_may_def_ops = allocate_v_may_def_optype (num / 2);
  for (x = 0; x < num; x++)
    v_may_def_ops->v_may_defs[x] = ((build_v_may_defs)->data.tree1[x]);
  varray_clear(build_v_may_defs);
  ann = stmt_ann (stmt);
  ann->v_may_def_ops = v_may_def_ops;
}
static void
finalize_ssa_vuses (tree stmt)
{
  unsigned num, x;
  stmt_ann_t ann;
  vuse_optype vuse_ops;
  v_may_def_optype v_may_defs;
  num = ((build_vuses)->elements_used);
  if (num == 0)
    return;
  ann = stmt_ann (stmt);
  v_may_defs = get_v_may_def_ops (ann);
  if (((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0) > 0)
    {
      size_t i, j;
      for (i = 0; i < ((build_vuses)->elements_used); i++)
 {
   unsigned char found = 0;
   for (j = 0; j < ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0); j++)
     {
       tree vuse_var, v_may_def_var;
       tree vuse = ((build_vuses)->data.tree1[i]);
       tree v_may_def = (get_use_from_ptr (get_v_may_def_op_ptr (((v_may_defs)), ((j)))));
       if (((enum tree_code) (vuse)->common.code) == SSA_NAME)
  vuse_var = (vuse)->ssa_name.var;
       else
  vuse_var = vuse;
       if (((enum tree_code) (v_may_def)->common.code) == SSA_NAME)
  v_may_def_var = (v_may_def)->ssa_name.var;
       else
  v_may_def_var = v_may_def;
     if (vuse_var == v_may_def_var)
       {
  found = 1;
  break;
       }
     }
   if (found)
     {
       if (i != ((build_vuses)->elements_used) - 1)
  {
    ((build_vuses)->data.tree1[i])
      = ((build_vuses)->data.tree1[((build_vuses)->elements_used) - 1])
                                            ;
  }
       do { ((build_vuses)->elements_used--); } while (0);
       i--;
     }
 }
    }
  num = ((build_vuses)->elements_used);
  if (num == 0)
    return;
  vuse_ops = allocate_vuse_optype (num);
  for (x = 0; x < num; x++)
    vuse_ops->vuses[x] = ((build_vuses)->data.tree1[x]);
  varray_clear(build_vuses);
  ann->vuse_ops = vuse_ops;
}
static void
finalize_ssa_v_must_defs (tree stmt)
{
  unsigned num, x;
  stmt_ann_t ann;
  v_must_def_optype v_must_def_ops;
  num = ((build_v_must_defs)->elements_used);
  if (num == 0)
    return;
  v_must_def_ops = allocate_v_must_def_optype (num);
  for (x = 0; x < num ; x++)
    v_must_def_ops->v_must_defs[x] = ((build_v_must_defs)->data.tree1[x]);
  ((build_v_must_defs)->elements_used = 0);
  ann = stmt_ann (stmt);
  ann->v_must_def_ops = v_must_def_ops;
}
extern void
finalize_ssa_stmt_operands (tree stmt)
{
  finalize_ssa_defs (stmt);
  finalize_ssa_uses (stmt);
  finalize_ssa_v_must_defs (stmt);
  finalize_ssa_v_may_defs (stmt);
  finalize_ssa_vuses (stmt);
}
extern void
verify_start_operands (tree stmt )
{
}
static void
append_def (tree *def_p, tree stmt )
{
  do { if ((build_defs)->elements_used >= (build_defs)->num_elements) (((build_defs)) = varray_grow ((build_defs), 2 * (build_defs)->num_elements)); (build_defs)->data.tp[(build_defs)->elements_used++] = (def_p); } while (0);
}
static void
append_use (tree *use_p, tree stmt )
{
  do { if ((build_uses)->elements_used >= (build_uses)->num_elements) (((build_uses)) = varray_grow ((build_uses), 2 * (build_uses)->num_elements)); (build_uses)->data.tp[(build_uses)->elements_used++] = (use_p); } while (0);
}
static void
append_v_may_def (tree var, tree stmt, voperands_t prev_vops)
{
  stmt_ann_t ann;
  size_t i;
  tree result, source;
  ann = stmt_ann (stmt);
  for (i = 0; i < ((build_v_may_defs)->elements_used); i += 2)
    {
      tree result = ((build_v_may_defs)->data.tree1[i]);
      if (var == result
   || (((enum tree_code) (result)->common.code) == SSA_NAME
       && var == (result)->ssa_name.var))
 return;
    }
  result = (tree) ((void *)0);
  source = (tree) ((void *)0);
  if (prev_vops)
    for (i = 0; i < ((prev_vops->v_may_def_ops) ? (prev_vops->v_may_def_ops)->num_v_may_defs : 0); i++)
      {
 result = (get_def_from_ptr (get_v_may_def_result_ptr (((prev_vops->v_may_def_ops)), ((i)))));
 if (result == var
     || (((enum tree_code) (result)->common.code) == SSA_NAME
  && (result)->ssa_name.var == var))
   {
     source = (get_use_from_ptr (get_v_may_def_op_ptr (((prev_vops->v_may_def_ops)), ((i)))));
     break;
   }
      }
  if (source == (tree) ((void *)0))
    {
      result = var;
      source = var;
    }
  do { if ((build_v_may_defs)->elements_used >= (build_v_may_defs)->num_elements) (((build_v_may_defs)) = varray_grow ((build_v_may_defs), 2 * (build_v_may_defs)->num_elements)); (build_v_may_defs)->data.tree1[(build_v_may_defs)->elements_used++] = (result); } while (0);
  do { if ((build_v_may_defs)->elements_used >= (build_v_may_defs)->num_elements) (((build_v_may_defs)) = varray_grow ((build_v_may_defs), 2 * (build_v_may_defs)->num_elements)); (build_v_may_defs)->data.tree1[(build_v_may_defs)->elements_used++] = (source); } while (0);
}
static void
append_vuse (tree var, tree stmt, voperands_t prev_vops)
{
  stmt_ann_t ann;
  size_t i;
  unsigned char found;
  tree vuse;
  ann = stmt_ann (stmt);
  for (i = 0; i < ((build_vuses)->elements_used); i++)
    {
      tree vuse_var = ((build_vuses)->data.tree1[i]);
      if (var == vuse_var
   || (((enum tree_code) (vuse_var)->common.code) == SSA_NAME
       && var == (vuse_var)->ssa_name.var))
 return;
    }
  found = 0;
  vuse = (tree) ((void *)0);
  if (prev_vops)
    for (i = 0; i < ((prev_vops->vuse_ops) ? (prev_vops->vuse_ops)->num_vuses : 0); i++)
      {
 vuse = (get_use_from_ptr (get_vuse_op_ptr (((prev_vops->vuse_ops)), ((i)))));
 if (vuse == var
     || (((enum tree_code) (vuse)->common.code) == SSA_NAME
  && (vuse)->ssa_name.var == var))
   {
     found = 1;
     break;
   }
      }
  if (found)
    var = vuse;
  do { if ((build_vuses)->elements_used >= (build_vuses)->num_elements) (((build_vuses)) = varray_grow ((build_vuses), 2 * (build_vuses)->num_elements)); (build_vuses)->data.tree1[(build_vuses)->elements_used++] = (var); } while (0);
}
static void
append_v_must_def (tree var, tree stmt, voperands_t prev_vops)
{
  stmt_ann_t ann;
  size_t i;
  unsigned char found;
  tree v_must_def;
  ann = stmt_ann (stmt);
  for (i = 0; i < ((build_v_must_defs)->elements_used); i++)
    {
      tree v_must_def_var = ((build_v_must_defs)->data.tree1[i]);
      if (var == v_must_def_var
   || (((enum tree_code) (v_must_def_var)->common.code) == SSA_NAME
       && var == (v_must_def_var)->ssa_name.var))
 return;
    }
  found = 0;
  v_must_def = (tree) ((void *)0);
  if (prev_vops)
    for (i = 0; i < ((prev_vops->v_must_def_ops) ? (prev_vops->v_must_def_ops)->num_v_must_defs : 0); i++)
      {
 v_must_def = (get_def_from_ptr (get_v_must_def_op_ptr (((prev_vops->v_must_def_ops)), ((i)))));
 if (v_must_def == var
     || (((enum tree_code) (v_must_def)->common.code) == SSA_NAME
  && (v_must_def)->ssa_name.var == var))
   {
     found = 1;
     break;
   }
      }
  if (found)
    var = v_must_def;
  do { if ((build_v_must_defs)->elements_used >= (build_v_must_defs)->num_elements) (((build_v_must_defs)) = varray_grow ((build_v_must_defs), 2 * (build_v_must_defs)->num_elements)); (build_v_must_defs)->data.tree1[(build_v_must_defs)->elements_used++] = (var); } while (0);
}
void
add_vuse (tree var, tree stmt)
{
  append_vuse (var, stmt, ((void *)0));
}
void
get_stmt_operands (tree stmt)
{
  enum tree_code code;
  stmt_ann_t ann;
  struct voperands_d prev_vops;
  if (((enum tree_code) (stmt)->common.code) == ERROR_MARK)
    return;
  ann = get_stmt_ann (stmt);
  if (!ann->modified)
    return;
  timevar_push (TV_TREE_OPS);
  ann->has_volatile_ops = 0;
  ann->makes_aliased_stores = 0;
  ann->makes_aliased_loads = 0;
  free_defs (&(ann->def_ops), 1);
  free_uses (&(ann->use_ops), 1);
  prev_vops.v_may_def_ops = get_v_may_def_ops (ann);
  prev_vops.vuse_ops = get_vuse_ops (ann);
  prev_vops.v_must_def_ops = get_v_must_def_ops (ann);
  free_v_may_defs (&(ann->v_may_def_ops), 0);
  free_vuses (&(ann->vuse_ops), 0);
  free_v_must_defs (&(ann->v_must_def_ops), 0);
  start_ssa_stmt_operands (stmt);
  code = ((enum tree_code) (stmt)->common.code);
  switch (code)
    {
    case MODIFY_EXPR:
      get_expr_operands (stmt, &((stmt)->exp.operands[1]), 0, &prev_vops);
      if (((enum tree_code) (((stmt)->exp.operands[0]))->common.code) == ARRAY_REF
          || ((enum tree_code) (((stmt)->exp.operands[0]))->common.code) == COMPONENT_REF
   || ((enum tree_code) (((stmt)->exp.operands[0]))->common.code) == REALPART_EXPR
   || ((enum tree_code) (((stmt)->exp.operands[0]))->common.code) == IMAGPART_EXPR
   || tree_could_throw_p (((stmt)->exp.operands[1])))
        get_expr_operands (stmt, &((stmt)->exp.operands[0]), (1 << 0),
                    &prev_vops);
      else
        get_expr_operands (stmt, &((stmt)->exp.operands[0]),
                    (1 << 0) | (1 << 2), &prev_vops);
      break;
    case COND_EXPR:
      get_expr_operands (stmt, &((((stmt))->exp.operands[0])), 0, &prev_vops);
      break;
    case SWITCH_EXPR:
      get_expr_operands (stmt, &(((stmt))->exp.operands[0]), 0, &prev_vops);
      break;
    case ASM_EXPR:
      {
 int noutputs = list_length ((((stmt))->exp.operands[1]));
 const char **oconstraints
   = (const char **) C_alloca((noutputs) * sizeof (const char *));
 int i;
 tree link;
 const char *constraint;
 unsigned char allows_mem, allows_reg, is_inout;
 for (i=0, link = (((stmt))->exp.operands[1]); link;
      ++i, link = ((link)->common.chain))
   {
     oconstraints[i] = constraint
       = ((((((link)->list.purpose))->list.value1))->string1.pointer);
     parse_output_constraint (&constraint, i, 0, 0,
         &allows_mem, &allows_reg, &is_inout);
     if (allows_reg && is_inout)
       fancy_abort ("gcc.c", 134822, "?");
     if (!allows_reg && allows_mem)
       {
  tree t = get_base_address (((link)->list.value1));
  if (t && (tree_code_type[(int) (((enum tree_code) (t)->common.code))] == 'd'))
    mark_call_clobbered (t);
       }
     get_expr_operands (stmt, &((link)->list.value1), (1 << 0),
          &prev_vops);
   }
 for (link = (((stmt))->exp.operands[2]); link; link = ((link)->common.chain))
   {
     constraint
       = ((((((link)->list.purpose))->list.value1))->string1.pointer);
     parse_input_constraint (&constraint, 0, 0, noutputs, 0,
        oconstraints, &allows_mem, &allows_reg);
     if (!allows_reg && allows_mem)
       {
  tree t = get_base_address (((link)->list.value1));
  if (t && (tree_code_type[(int) (((enum tree_code) (t)->common.code))] == 'd'))
    mark_call_clobbered (t);
       }
     get_expr_operands (stmt, &((link)->list.value1), 0, &prev_vops);
   }
 for (link = (((stmt))->exp.operands[3]); link; link = ((link)->common.chain))
   if (!strcmp (((((link)->list.value1))->string1.pointer), "memory"))
     add_call_clobber_ops (stmt, &prev_vops);
      }
      break;
    case RETURN_EXPR:
      get_expr_operands (stmt, &((stmt)->exp.operands[0]), 0, &prev_vops);
      break;
    case GOTO_EXPR:
      get_expr_operands (stmt, &(((stmt))->exp.operands[0]), 0, &prev_vops);
      break;
    case LABEL_EXPR:
      get_expr_operands (stmt, &(((stmt))->exp.operands[0]), 0, &prev_vops);
      break;
    case BIND_EXPR:
    case CASE_LABEL_EXPR:
    case TRY_CATCH_EXPR:
    case TRY_FINALLY_EXPR:
    case EH_FILTER_EXPR:
    case CATCH_EXPR:
    case RESX_EXPR:
      break;
    default:
      get_expr_operands (stmt, &stmt, 0, &prev_vops);
      break;
    }
  finalize_ssa_stmt_operands (stmt);
  free_v_may_defs (&(prev_vops.v_may_def_ops), 1);
  free_vuses (&(prev_vops.vuse_ops), 1);
  free_v_must_defs (&(prev_vops.v_must_def_ops), 1);
  ann->modified = 0;
  timevar_pop (TV_TREE_OPS);
}
static void
get_expr_operands (tree stmt, tree *expr_p, int flags, voperands_t prev_vops)
{
  enum tree_code code;
  char class;
  tree expr = *expr_p;
  if (expr == ((void *)0) || expr == global_trees[TI_ERROR_MARK])
    return;
  code = ((enum tree_code) (expr)->common.code);
  class = tree_code_type[(int) (code)];
  if (code == ADDR_EXPR)
    {
      add_stmt_operand (expr_p, stmt, 0, ((void *)0));
      if (((expr)->common.constant_flag))
 return;
      flags |= (1 << 1);
      expr_p = &((expr)->exp.operands[0]);
      expr = *expr_p;
      code = ((enum tree_code) (expr)->common.code);
      class = tree_code_type[(int) (code)];
    }
  if (class == 'c'
      || class == 't'
      || code == BLOCK
      || code == FUNCTION_DECL
      || code == EXC_PTR_EXPR
      || code == FILTER_EXPR
      || code == LABEL_DECL)
    return;
  if ((((enum tree_code) (expr)->common.code) == VAR_DECL || ((enum tree_code) (expr)->common.code) == PARM_DECL || ((enum tree_code) (expr)->common.code) == RESULT_DECL || (((enum tree_code) (expr)->common.code) == SSA_NAME && (((enum tree_code) ((expr)->ssa_name.var)->common.code) == VAR_DECL || ((enum tree_code) ((expr)->ssa_name.var)->common.code) == PARM_DECL || ((enum tree_code) ((expr)->ssa_name.var)->common.code) == RESULT_DECL))))
    {
      add_stmt_operand (expr_p, stmt, flags, prev_vops);
      return;
    }
  if (code == INDIRECT_REF)
    {
      tree *pptr = &((expr)->exp.operands[0]);
      tree ptr = *pptr;
      if ((((enum tree_code) (ptr)->common.code) == VAR_DECL || ((enum tree_code) (ptr)->common.code) == PARM_DECL || ((enum tree_code) (ptr)->common.code) == RESULT_DECL || (((enum tree_code) (ptr)->common.code) == SSA_NAME && (((enum tree_code) ((ptr)->ssa_name.var)->common.code) == VAR_DECL || ((enum tree_code) ((ptr)->ssa_name.var)->common.code) == PARM_DECL || ((enum tree_code) ((ptr)->ssa_name.var)->common.code) == RESULT_DECL))))
 {
   if (!aliases_computed_p)
     {
       stmt_ann (stmt)->has_volatile_ops = 1;
     }
   else
     {
       struct ptr_info_def *pi = ((void *)0);
       if (((enum tree_code) (ptr)->common.code) == SSA_NAME
    && (pi = (ptr)->ssa_name.ptr_info) != ((void *)0)
    && pi->name_mem_tag)
  {
    add_stmt_operand (&pi->name_mem_tag, stmt, flags,
                      prev_vops);
  }
       else
  {
    var_ann_t ann;
    if (dump_file
        && ((enum tree_code) (ptr)->common.code) == SSA_NAME
        && pi == ((void *)0))
      {
        fprintf (dump_file,
     "NOTE: no flow-sensitive alias info for ");
        print_generic_expr (dump_file, ptr, dump_flags);
        fprintf (dump_file, " in ");
        print_generic_stmt (dump_file, stmt, dump_flags);
      }
    if (((enum tree_code) (ptr)->common.code) == SSA_NAME)
      ptr = (ptr)->ssa_name.var;
    ann = var_ann (ptr);
    add_stmt_operand (&ann->type_mem_tag, stmt, flags, prev_vops);
  }
     }
 }
      else if (((enum tree_code) (ptr)->common.code) == INTEGER_CST)
 {
   stmt_ann (stmt)->has_volatile_ops = 1;
   return;
 }
      else if ((((enum tree_code) (ptr)->common.code) == PLUS_EXPR || ((enum tree_code) (ptr)->common.code) == MINUS_EXPR)
        && ((enum tree_code) (((ptr)->exp.operands[0]))->common.code) == ADDR_EXPR
        && ((enum tree_code) (((ptr)->exp.operands[1]))->common.code) == INTEGER_CST)
 {
   pptr = &((ptr)->exp.operands[0]);
          add_stmt_operand (pptr, stmt, 0, ((void *)0));
   pptr = &((*pptr)->exp.operands[0]);
   get_expr_operands (stmt, pptr, flags, prev_vops);
   return;
 }
      else
 fancy_abort ("gcc.c", 135058, "?");
      get_expr_operands (stmt, pptr, 0, prev_vops);
      return;
    }
  if (code == ARRAY_REF || code == ARRAY_RANGE_REF)
    {
      if ((((enum tree_code) (((expr)->exp.operands[0]))->common.code) == VAR_DECL || ((enum tree_code) (((expr)->exp.operands[0]))->common.code) == PARM_DECL || ((enum tree_code) (((expr)->exp.operands[0]))->common.code) == RESULT_DECL || (((enum tree_code) (((expr)->exp.operands[0]))->common.code) == SSA_NAME && (((enum tree_code) ((((expr)->exp.operands[0]))->ssa_name.var)->common.code) == VAR_DECL || ((enum tree_code) ((((expr)->exp.operands[0]))->ssa_name.var)->common.code) == PARM_DECL || ((enum tree_code) ((((expr)->exp.operands[0]))->ssa_name.var)->common.code) == RESULT_DECL))))
 add_stmt_operand (expr_p, stmt, flags, prev_vops);
      else
 get_expr_operands (stmt, &((expr)->exp.operands[0]), flags, prev_vops);
      get_expr_operands (stmt, &((expr)->exp.operands[1]), 0, prev_vops);
      get_expr_operands (stmt, &((expr)->exp.operands[2]), 0, prev_vops);
      get_expr_operands (stmt, &((expr)->exp.operands[3]), 0, prev_vops);
      return;
    }
  if (code == IMAGPART_EXPR || code == REALPART_EXPR || code == COMPONENT_REF)
    {
      if ((((enum tree_code) (((expr)->exp.operands[0]))->common.code) == VAR_DECL || ((enum tree_code) (((expr)->exp.operands[0]))->common.code) == PARM_DECL || ((enum tree_code) (((expr)->exp.operands[0]))->common.code) == RESULT_DECL || (((enum tree_code) (((expr)->exp.operands[0]))->common.code) == SSA_NAME && (((enum tree_code) ((((expr)->exp.operands[0]))->ssa_name.var)->common.code) == VAR_DECL || ((enum tree_code) ((((expr)->exp.operands[0]))->ssa_name.var)->common.code) == PARM_DECL || ((enum tree_code) ((((expr)->exp.operands[0]))->ssa_name.var)->common.code) == RESULT_DECL))))
 add_stmt_operand (expr_p, stmt, flags, prev_vops);
      else
 get_expr_operands (stmt, &((expr)->exp.operands[0]), flags, prev_vops);
      if (code == COMPONENT_REF)
 get_expr_operands (stmt, &((expr)->exp.operands[2]), 0, prev_vops);
      return;
    }
  if (code == CALL_EXPR)
    {
      tree op;
      int call_flags = call_expr_flags (expr);
      get_expr_operands (stmt, &((expr)->exp.operands[0]), 0, prev_vops);
      for (op = ((expr)->exp.operands[1]); op; op = ((op)->common.chain))
        get_expr_operands (stmt, &((op)->list.value1), 0, prev_vops);
      get_expr_operands (stmt, &((expr)->exp.operands[2]), 0, prev_vops);
      if (bitmap_first_set_bit (call_clobbered_vars) >= 0)
 {
   if (!(call_flags
  & (256 | 1 | 2)))
     add_call_clobber_ops (stmt, prev_vops);
   else if (!(call_flags & (1 | 2)))
     add_call_read_ops (stmt, prev_vops);
 }
      else if (!aliases_computed_p)
 stmt_ann (stmt)->has_volatile_ops = 1;
      return;
    }
  if (code == TREE_LIST)
    {
      tree op;
      for (op = expr; op; op = ((op)->common.chain))
        get_expr_operands (stmt, &((op)->list.value1), flags, prev_vops);
      return;
    }
  if (code == MODIFY_EXPR)
    {
      get_expr_operands (stmt, &((expr)->exp.operands[1]), 0, prev_vops);
      if (((enum tree_code) (((expr)->exp.operands[0]))->common.code) == ARRAY_REF
          || ((enum tree_code) (((expr)->exp.operands[0]))->common.code) == COMPONENT_REF
   || ((enum tree_code) (((expr)->exp.operands[0]))->common.code) == REALPART_EXPR
   || ((enum tree_code) (((expr)->exp.operands[0]))->common.code) == IMAGPART_EXPR)
        get_expr_operands (stmt, &((expr)->exp.operands[0]), (1 << 0),
                    prev_vops);
      else
        get_expr_operands (stmt, &((expr)->exp.operands[0]),
                    (1 << 0) | (1 << 2), prev_vops);
      return;
    }
  if (code == VA_ARG_EXPR)
    {
      stmt_ann (stmt)->has_volatile_ops = 1;
      return;
    }
  if (class == '1'
      || code == TRUTH_NOT_EXPR
      || code == BIT_FIELD_REF
      || code == CONSTRUCTOR)
    {
      get_expr_operands (stmt, &((expr)->exp.operands[0]), flags, prev_vops);
      return;
    }
  if (class == '2'
      || class == '<'
      || code == TRUTH_AND_EXPR
      || code == TRUTH_OR_EXPR
      || code == TRUTH_XOR_EXPR
      || code == COMPOUND_EXPR
      || code == OBJ_TYPE_REF)
    {
      tree op0 = ((expr)->exp.operands[0]);
      tree op1 = ((expr)->exp.operands[1]);
      if (tree_swap_operands_p (op0, op1, 0))
 {
   if (code == LT_EXPR
       || code == GT_EXPR
       || code == LE_EXPR
       || code == GE_EXPR)
     {
       ((expr)->common.code = (swap_tree_comparison (code)));
       ((expr)->exp.operands[0]) = op1;
       ((expr)->exp.operands[1]) = op0;
     }
   if (commutative_tree_code (code))
     {
       ((expr)->exp.operands[0]) = op1;
       ((expr)->exp.operands[1]) = op0;
     }
 }
      get_expr_operands (stmt, &((expr)->exp.operands[0]), flags, prev_vops);
      get_expr_operands (stmt, &((expr)->exp.operands[1]), flags, prev_vops);
      return;
    }
  fprintf (stderr, "unhandled expression in get_expr_operands():\n");
  debug_tree (expr);
  fputs_unlocked ("\n", stderr);
  fancy_abort ("gcc.c", 135239, "?");
}
static void
add_stmt_operand (tree *var_p, tree stmt, int flags, voperands_t prev_vops)
{
  unsigned char is_real_op;
  tree var, sym;
  stmt_ann_t s_ann;
  var_ann_t v_ann;
  var = *var_p;
  while ((((enum tree_code) (var)->common.code) == NOP_EXPR || ((enum tree_code) (var)->common.code) == CONVERT_EXPR || ((enum tree_code) (var)->common.code) == NON_LVALUE_EXPR) && ((var)->exp.operands[0]) != global_trees[TI_ERROR_MARK] && (((((var)->common.type))->type.mode) == ((((((var)->exp.operands[0]))->common.type))->type.mode))) (var) = ((var)->exp.operands[0]);
  s_ann = stmt_ann (stmt);
  if (((enum tree_code) (var)->common.code) == ADDR_EXPR)
    {
      note_addressable (((var)->exp.operands[0]), s_ann);
      return;
    }
  is_real_op = is_gimple_reg (var);
  if (!is_real_op && !(tree_code_type[(int) (((enum tree_code) (var)->common.code))] == 'd'))
    var = get_virtual_var (var);
  if (var == (tree) ((void *)0) || !(((enum tree_code) (var)->common.code) == VAR_DECL || ((enum tree_code) (var)->common.code) == PARM_DECL || ((enum tree_code) (var)->common.code) == RESULT_DECL || (((enum tree_code) (var)->common.code) == SSA_NAME && (((enum tree_code) ((var)->ssa_name.var)->common.code) == VAR_DECL || ((enum tree_code) ((var)->ssa_name.var)->common.code) == PARM_DECL || ((enum tree_code) ((var)->ssa_name.var)->common.code) == RESULT_DECL))))
    return;
  sym = (((enum tree_code) (var)->common.code) == SSA_NAME ? (var)->ssa_name.var : var);
  v_ann = var_ann (sym);
  if (v_ann->has_hidden_use)
    {
      s_ann->has_volatile_ops = 1;
      return;
    }
  if (((sym)->common.volatile_flag))
    {
      s_ann->has_volatile_ops = 1;
      return;
    }
  if (is_real_op)
    {
      if (flags & (1 << 0))
 append_def (var_p, stmt);
      else
 append_use (var_p, stmt);
    }
  else
    {
      varray_type aliases;
      if (flags & (1 << 1))
 return;
      aliases = v_ann->may_aliases;
      if (!aliases_computed_p && may_be_aliased (var))
 s_ann->has_volatile_ops = 1;
      if (aliases == ((void *)0))
 {
   if (flags & (1 << 0))
     {
       if (v_ann->is_alias_tag)
         {
    s_ann->makes_aliased_stores = 1;
    append_v_may_def (var, stmt, prev_vops);
  }
       else if ((flags & (1 << 2))
                 && v_ann->mem_tag_kind == NOT_A_TAG)
         append_v_must_def (var, stmt, prev_vops);
       else
  append_v_may_def (var, stmt, prev_vops);
     }
   else
     {
       append_vuse (var, stmt, prev_vops);
       if (v_ann->is_alias_tag)
  s_ann->makes_aliased_loads = 1;
     }
 }
      else
 {
   size_t i;
   if (((aliases)->elements_used) == 0)
     fancy_abort ("gcc.c", 135368, "?");
   if (flags & (1 << 0))
     {
       if (v_ann->is_alias_tag)
  append_v_may_def (var, stmt, prev_vops);
       for (i = 0; i < ((aliases)->elements_used); i++)
  append_v_may_def (((aliases)->data.tree1[i]), stmt, prev_vops);
       s_ann->makes_aliased_stores = 1;
     }
   else
     {
       if (v_ann->is_alias_tag)
  append_vuse (var, stmt, prev_vops);
       for (i = 0; i < ((aliases)->elements_used); i++)
  append_vuse (((aliases)->data.tree1[i]), stmt, prev_vops);
       s_ann->makes_aliased_loads = 1;
     }
 }
    }
}
static void
note_addressable (tree var, stmt_ann_t s_ann)
{
  var = get_base_address (var);
  if (var && (((enum tree_code) (var)->common.code) == VAR_DECL || ((enum tree_code) (var)->common.code) == PARM_DECL || ((enum tree_code) (var)->common.code) == RESULT_DECL || (((enum tree_code) (var)->common.code) == SSA_NAME && (((enum tree_code) ((var)->ssa_name.var)->common.code) == VAR_DECL || ((enum tree_code) ((var)->ssa_name.var)->common.code) == PARM_DECL || ((enum tree_code) ((var)->ssa_name.var)->common.code) == RESULT_DECL))))
    {
      if (s_ann->addresses_taken == ((void *)0))
 s_ann->addresses_taken = bitmap_initialize (((void *)0), 0);
      bitmap_set_bit (s_ann->addresses_taken, var_ann (var)->uid);
    }
}
static void
add_call_clobber_ops (tree stmt, voperands_t prev_vops)
{
  stmt_ann (stmt)->makes_clobbering_call = 1;
  if (global_var)
    add_stmt_operand (&global_var, stmt, (1 << 0), prev_vops);
  else
    {
      size_t i;
      do { bitmap_element *ptr_ = (call_clobbered_vars)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (i) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); { tree var = ((referenced_vars)->data.tree1[i]); if (!((var)->common.readonly_flag)) add_stmt_operand (&var, stmt, (1 << 0), prev_vops); else add_stmt_operand (&var, stmt, 0, prev_vops); }; if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
   ;
    }
}
static void
add_call_read_ops (tree stmt, voperands_t prev_vops)
{
  if (global_var)
    add_stmt_operand (&global_var, stmt, 0, prev_vops);
  else
    {
      size_t i;
      do { bitmap_element *ptr_ = (call_clobbered_vars)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (i) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); { tree var = ((referenced_vars)->data.tree1[i]); add_stmt_operand (&var, stmt, 0, prev_vops); }; if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
   ;
    }
}
void
copy_virtual_operands (tree dst, tree src)
{
  vuse_optype vuses = get_vuse_ops (stmt_ann(src));
  v_may_def_optype v_may_defs = get_v_may_def_ops (stmt_ann(src));
  v_must_def_optype v_must_defs = get_v_must_def_ops (stmt_ann (src));
  vuse_optype *vuses_new = &stmt_ann (dst)->vuse_ops;
  v_may_def_optype *v_may_defs_new = &stmt_ann (dst)->v_may_def_ops;
  v_must_def_optype *v_must_defs_new = &stmt_ann (dst)->v_must_def_ops;
  unsigned i;
  if (vuses)
    {
      *vuses_new = allocate_vuse_optype (((vuses) ? (vuses)->num_vuses : 0));
      for (i = 0; i < ((vuses) ? (vuses)->num_vuses : 0); i++)
 (((*((get_vuse_op_ptr (((*vuses_new)), ((i)))).use)) = (((get_use_from_ptr (get_vuse_op_ptr (((vuses)), ((i)))))))));
    }
  if (v_may_defs)
    {
      *v_may_defs_new = allocate_v_may_def_optype (((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0));
      for (i = 0; i < ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0); i++)
 {
   (((*((get_v_may_def_op_ptr (((*v_may_defs_new)), ((i)))).use)) = (((get_use_from_ptr (get_v_may_def_op_ptr (((v_may_defs)), ((i)))))))));
   (((*((get_v_may_def_result_ptr (((*v_may_defs_new)), ((i)))).def)) = (((get_def_from_ptr (get_v_may_def_result_ptr (((v_may_defs)), ((i)))))))))
                                     ;
 }
    }
  if (v_must_defs)
    {
      *v_must_defs_new = allocate_v_must_def_optype (((v_must_defs) ? (v_must_defs)->num_v_must_defs : 0));
      for (i = 0; i < ((v_must_defs) ? (v_must_defs)->num_v_must_defs : 0); i++)
 (((*((get_v_must_def_op_ptr (((*v_must_defs_new)), ((i)))).def)) = (((get_def_from_ptr (get_v_must_def_op_ptr (((v_must_defs)), ((i)))))))));
    }
}
const struct ggc_root_tab gt_ggc_r_gt_tree_ssa_operands_h[] = {
  {
    &build_v_must_defs,
    1,
    sizeof (build_v_must_defs),
    &gt_ggc_mx_varray_head_tag,
    &gt_pch_nx_varray_head_tag
  },
  {
    &build_vuses,
    1,
    sizeof (build_vuses),
    &gt_ggc_mx_varray_head_tag,
    &gt_pch_nx_varray_head_tag
  },
  {
    &build_v_may_defs,
    1,
    sizeof (build_v_may_defs),
    &gt_ggc_mx_varray_head_tag,
    &gt_pch_nx_varray_head_tag
  },
  {
    &build_uses,
    1,
    sizeof (build_uses),
    &gt_ggc_mx_varray_head_tag,
    &gt_pch_nx_varray_head_tag
  },
  {
    &build_defs,
    1,
    sizeof (build_defs),
    &gt_ggc_mx_varray_head_tag,
    &gt_pch_nx_varray_head_tag
  },
  { ((void *)0), 0, 0, ((void *)0), ((void *)0) }
};
struct alias_map_d
{
  tree var;
  long set;
  long total_alias_vops;
  unsigned int grouped_p : 1;
  sbitmap may_aliases;
};
struct alias_info
{
  bitmap ssa_names_visited;
  varray_type processed_ptrs;
  bitmap addresses_needed;
  struct alias_map_d **addressable_vars;
  size_t num_addressable_vars;
  struct alias_map_d **pointers;
  size_t num_pointers;
  size_t num_calls_found;
  varray_type num_references;
  long total_alias_vops;
  bitmap written_vars;
  bitmap dereferenced_ptrs_store;
  bitmap dereferenced_ptrs_load;
};
struct alias_stats_d
{
  unsigned int alias_queries;
  unsigned int alias_mayalias;
  unsigned int alias_noalias;
  unsigned int simple_queries;
  unsigned int simple_resolved;
  unsigned int tbaa_queries;
  unsigned int tbaa_resolved;
  unsigned int pta_queries;
  unsigned int pta_resolved;
};
static struct alias_stats_d alias_stats;
static void compute_flow_insensitive_aliasing (struct alias_info *);
static void dump_alias_stats (FILE *);
static unsigned char may_alias_p (tree, long, tree, long);
static tree create_memory_tag (tree type, unsigned char is_type_tag);
static tree get_tmt_for (tree, struct alias_info *);
static tree get_nmt_for (tree);
static void add_may_alias (tree, tree);
static struct alias_info *init_alias_info (void);
static void delete_alias_info (struct alias_info *);
static void compute_points_to_and_addr_escape (struct alias_info *);
static void compute_flow_sensitive_aliasing (struct alias_info *);
static void setup_pointers_and_addressables (struct alias_info *);
static unsigned char collect_points_to_info_r (tree, tree, void *);
static unsigned char is_escape_site (tree, size_t *);
static void add_pointed_to_var (struct alias_info *, tree, tree);
static void add_pointed_to_expr (tree, tree);
static void create_global_var (void);
static void collect_points_to_info_for (struct alias_info *, tree);
static unsigned char ptr_is_dereferenced_by (tree, tree, unsigned char *);
static void maybe_create_global_var (struct alias_info *ai);
static void group_aliases (struct alias_info *);
static struct ptr_info_def *get_ptr_info (tree t);
bitmap call_clobbered_vars;
unsigned char aliases_computed_p;
tree global_var;
static void
compute_may_aliases (void)
{
  struct alias_info *ai;
  memset (&alias_stats, 0, sizeof (alias_stats));
  ai = init_alias_info ();
  compute_points_to_and_addr_escape (ai);
  setup_pointers_and_addressables (ai);
  compute_flow_sensitive_aliasing (ai);
  compute_flow_insensitive_aliasing (ai);
  maybe_create_global_var (ai);
  if (dump_file)
    {
      dump_referenced_vars (dump_file);
      if (dump_flags & (1 << 4))
 dump_alias_stats (dump_file);
      dump_points_to_info (dump_file);
      dump_alias_info (dump_file);
    }
  delete_alias_info (ai);
  aliases_computed_p = 1;
}
struct tree_opt_pass pass_may_alias =
{
  "alias",
  ((void *)0),
  compute_may_aliases,
  ((void *)0),
  ((void *)0),
  0,
  TV_TREE_MAY_ALIAS,
  (1 << 3) | (1 << 6) | (1 << 5),
  0,
  0,
  0,
  (1 << 0) | (1 << 1)
    | (1 << 2) | (1 << 3)
};
static struct alias_info *
init_alias_info (void)
{
  struct alias_info *ai;
  ai = xcalloc (1, sizeof (struct alias_info));
  ai->ssa_names_visited = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
  ai->processed_ptrs = varray_init (50, VARRAY_DATA_TREE, "processed_ptrs");
  ai->addresses_needed = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
  ai->num_references = varray_init (((referenced_vars)->elements_used), VARRAY_DATA_U, "num_references");
  ai->written_vars = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
  ai->dereferenced_ptrs_store = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
  ai->dereferenced_ptrs_load = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
  return ai;
}
static void
delete_alias_info (struct alias_info *ai)
{
  size_t i;
  do { if (ai->ssa_names_visited) { bitmap_clear (ai->ssa_names_visited); free (ai->ssa_names_visited); (ai->ssa_names_visited) = 0; } } while (0);
  ai->processed_ptrs = ((void *)0);
  do { if (ai->addresses_needed) { bitmap_clear (ai->addresses_needed); free (ai->addresses_needed); (ai->addresses_needed) = 0; } } while (0);
  for (i = 0; i < ai->num_addressable_vars; i++)
    {
      free(ai->addressable_vars[i]->may_aliases);
      free (ai->addressable_vars[i]);
    }
  free (ai->addressable_vars);
  for (i = 0; i < ai->num_pointers; i++)
    {
      free(ai->pointers[i]->may_aliases);
      free (ai->pointers[i]);
    }
  free (ai->pointers);
  ai->num_references = ((void *)0);
  do { if (ai->written_vars) { bitmap_clear (ai->written_vars); free (ai->written_vars); (ai->written_vars) = 0; } } while (0);
  do { if (ai->dereferenced_ptrs_store) { bitmap_clear (ai->dereferenced_ptrs_store); free (ai->dereferenced_ptrs_store); (ai->dereferenced_ptrs_store) = 0; } } while (0);
  do { if (ai->dereferenced_ptrs_load) { bitmap_clear (ai->dereferenced_ptrs_load); free (ai->dereferenced_ptrs_load); (ai->dereferenced_ptrs_load) = 0; } } while (0);
  free (ai);
}
static void
collect_points_to_info_for (struct alias_info *ai, tree ptr)
{
  if (!bitmap_bit_p (ai->ssa_names_visited, (ptr)->ssa_name.version))
    {
      struct ptr_info_def *pi;
      bitmap_set_bit (ai->ssa_names_visited, (ptr)->ssa_name.version);
      walk_use_def_chains (ptr, collect_points_to_info_r, ai);
      do { if ((ai->processed_ptrs)->elements_used >= (ai->processed_ptrs)->num_elements) (((ai->processed_ptrs)) = varray_grow ((ai->processed_ptrs), 2 * (ai->processed_ptrs)->num_elements)); (ai->processed_ptrs)->data.tree1[(ai->processed_ptrs)->elements_used++] = (ptr); } while (0);
      pi = (ptr)->ssa_name.ptr_info;
      if (pi->pt_anything)
 {
   pi->pt_malloc = 0;
   pi->pt_vars = ((void *)0);
 }
    }
}
static tree
find_ptr_dereference (tree *tp, int *walk_subtrees , void *data)
{
  tree ptr = (tree) data;
  if (((enum tree_code) (*tp)->common.code) == INDIRECT_REF
      && ((*tp)->exp.operands[0]) == ptr)
    return *tp;
  return (tree) ((void *)0);
}
static unsigned char
ptr_is_dereferenced_by (tree ptr, tree stmt, unsigned char *is_store)
{
  *is_store = 0;
  if (((enum tree_code) (stmt)->common.code) == MODIFY_EXPR
      || (((enum tree_code) (stmt)->common.code) == RETURN_EXPR
   && ((enum tree_code) (((stmt)->exp.operands[0]))->common.code) == MODIFY_EXPR))
    {
      tree e, lhs, rhs;
      e = (((enum tree_code) (stmt)->common.code) == RETURN_EXPR) ? ((stmt)->exp.operands[0]) : stmt;
      lhs = ((e)->exp.operands[0]);
      rhs = ((e)->exp.operands[1]);
      if ((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (lhs)->common.code))])) != 0)
   && walk_tree (&lhs, find_ptr_dereference, ptr, ((void *)0)))
 {
   *is_store = 1;
   return 1;
 }
      else if ((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (rhs)->common.code))])) != 0)
        && walk_tree (&rhs, find_ptr_dereference, ptr, ((void *)0)))
 {
   return 1;
 }
    }
  else if (((enum tree_code) (stmt)->common.code) == ASM_EXPR)
    {
      if (walk_tree (&(((stmt))->exp.operands[1]), find_ptr_dereference, ptr, ((void *)0))
   || walk_tree (&(((stmt))->exp.operands[3]), find_ptr_dereference, ptr, ((void *)0)))
 {
   *is_store = 1;
   return 1;
 }
      else if (walk_tree (&(((stmt))->exp.operands[2]), find_ptr_dereference, ptr, ((void *)0)))
 {
   return 1;
 }
    }
  return 0;
}
static void
compute_points_to_and_addr_escape (struct alias_info *ai)
{
  basic_block bb;
  size_t i;
  timevar_push (TV_TREE_PTA);
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      bb_ann_t block_ann = bb_ann (bb);
      block_stmt_iterator si;
      for (si = bsi_start (bb); !bsi_end_p (si); bsi_next (&si))
 {
   use_optype uses;
   def_optype defs;
   v_may_def_optype v_may_defs;
   v_must_def_optype v_must_defs;
   stmt_ann_t ann;
   bitmap addr_taken;
   tree stmt = bsi_stmt (si);
   unsigned char stmt_escapes_p = is_escape_site (stmt, &ai->num_calls_found);
   get_stmt_operands (stmt);
   addr_taken = addresses_taken (stmt);
   if (addr_taken)
     do { bitmap_element *ptr_ = (addr_taken)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (i) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); { tree var = ((referenced_vars)->data.tree1[i]); bitmap_set_bit (ai->addresses_needed, var_ann (var)->uid); if (stmt_escapes_p) mark_call_clobbered (var); }; if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
    ;
   if (stmt_escapes_p)
     block_ann->has_escape_site = 1;
   if (addr_taken
       && ((enum tree_code) (stmt)->common.code) == MODIFY_EXPR
       && !(((enum tree_code) (((((stmt)->exp.operands[0]))->common.type))->common.code) == POINTER_TYPE || ((enum tree_code) (((((stmt)->exp.operands[0]))->common.type))->common.code) == REFERENCE_TYPE))
     do { bitmap_element *ptr_ = (addr_taken)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (i) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); { tree var = ((referenced_vars)->data.tree1[i]); mark_call_clobbered (var); }; if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
    ;
   ann = stmt_ann (stmt);
   uses = get_use_ops (ann);
   for (i = 0; i < ((uses) ? (uses)->num_uses : 0); i++)
     {
       tree op = (get_use_from_ptr (get_use_op_ptr (((uses)), ((i)))));
       var_ann_t v_ann = var_ann ((op)->ssa_name.var);
       struct ptr_info_def *pi;
       unsigned char is_store;
       if (may_be_aliased ((op)->ssa_name.var))
  (((ai->num_references)->data.u[v_ann->uid]))++;
       if (!(((enum tree_code) (((op)->common.type))->common.code) == POINTER_TYPE || ((enum tree_code) (((op)->common.type))->common.code) == REFERENCE_TYPE))
  continue;
       collect_points_to_info_for (ai, op);
       pi = (op)->ssa_name.ptr_info;
       if (ptr_is_dereferenced_by (op, stmt, &is_store))
  {
    if (pi->pt_malloc || pi->pt_vars)
      pi->name_mem_tag = get_nmt_for (op);
    (((ai->num_references)->data.u[v_ann->uid]))++;
    if (is_store)
      bitmap_set_bit (ai->dereferenced_ptrs_store, v_ann->uid);
    else
      bitmap_set_bit (ai->dereferenced_ptrs_load, v_ann->uid);
  }
       else if (stmt_escapes_p)
  {
    pi->value_escapes_p = 1;
    if (get_call_expr_in (stmt))
      bitmap_set_bit (ai->dereferenced_ptrs_store, v_ann->uid);
  }
     }
   defs = get_def_ops (ann);
   for (i = 0; i < ((defs) ? (defs)->num_defs : 0); i++)
     {
       tree op = (get_def_from_ptr (get_def_op_ptr (((defs)), ((i)))));
       tree var = (op)->ssa_name.var;
       var_ann_t ann = var_ann (var);
       bitmap_set_bit (ai->written_vars, ann->uid);
       if (may_be_aliased (var))
  (((ai->num_references)->data.u[ann->uid]))++;
     }
   v_may_defs = get_v_may_def_ops (ann);
   for (i = 0; i < ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0); i++)
     {
       tree op = (get_use_from_ptr (get_v_may_def_op_ptr (((v_may_defs)), ((i)))));
       tree var = (op)->ssa_name.var;
       var_ann_t ann = var_ann (var);
       bitmap_set_bit (ai->written_vars, ann->uid);
     }
   v_must_defs = get_v_must_def_ops (ann);
   for (i = 0; i < ((v_must_defs) ? (v_must_defs)->num_v_must_defs : 0); i++)
     {
       tree op = (get_def_from_ptr (get_v_must_def_op_ptr (((v_must_defs)), ((i)))));
       tree var = (op)->ssa_name.var;
       var_ann_t ann = var_ann (var);
       bitmap_set_bit (ai->written_vars, ann->uid);
     }
   modify_stmt (stmt);
 }
    }
  timevar_pop (TV_TREE_PTA);
}
static void
compute_flow_sensitive_aliasing (struct alias_info *ai)
{
  size_t i;
  for (i = 0; i < ((ai->processed_ptrs)->elements_used); i++)
    {
      size_t j;
      tree ptr = ((ai->processed_ptrs)->data.tree1[i]);
      struct ptr_info_def *pi = (ptr)->ssa_name.ptr_info;
      var_ann_t v_ann = var_ann ((ptr)->ssa_name.var);
      if (pi->value_escapes_p || pi->pt_anything)
 {
   if (pi->name_mem_tag)
     mark_call_clobbered (pi->name_mem_tag);
   if (v_ann->type_mem_tag)
     mark_call_clobbered (v_ann->type_mem_tag);
   if (pi->pt_anything)
     {
       long ptr_set;
       ptr_set = get_alias_set (((((ptr)->common.type))->common.type));
       for (j = 0; j < ai->num_addressable_vars; j++)
  {
    struct alias_map_d *alias_map = ai->addressable_vars[j];
    if (alias_map->set == ptr_set)
      mark_call_clobbered (alias_map->var);
  }
     }
   if (pi->value_escapes_p
       && pi->name_mem_tag == (tree) ((void *)0)
       && pi->pt_vars)
     do { bitmap_element *ptr_ = (pi->pt_vars)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (j) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); mark_call_clobbered (((referenced_vars)->data.tree1[j])); if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
                                           ;
 }
      if (pi->name_mem_tag && pi->pt_vars)
 do { bitmap_element *ptr_ = (pi->pt_vars)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (j) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); add_may_alias (pi->name_mem_tag, ((referenced_vars)->data.tree1[j])); if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
                                                          ;
      if (pi->name_mem_tag
   && v_ann->type_mem_tag
   && is_call_clobbered (pi->name_mem_tag))
 mark_call_clobbered (v_ann->type_mem_tag);
    }
}
static void
compute_flow_insensitive_aliasing (struct alias_info *ai)
{
  size_t i;
  ai->total_alias_vops = 0;
  for (i = 0; i < ai->num_pointers; i++)
    {
      size_t j;
      struct alias_map_d *p_map = ai->pointers[i];
      tree tag = var_ann (p_map->var)->type_mem_tag;
      var_ann_t tag_ann = var_ann (tag);
      p_map->total_alias_vops = 0;
      p_map->may_aliases = sbitmap_alloc (((referenced_vars)->elements_used));
      sbitmap_zero (p_map->may_aliases);
      for (j = 0; j < ai->num_addressable_vars; j++)
 {
   struct alias_map_d *v_map;
   var_ann_t v_ann;
   tree var;
   unsigned char tag_stored_p, var_stored_p;
   v_map = ai->addressable_vars[j];
   var = v_map->var;
   v_ann = var_ann (var);
   tag_stored_p = bitmap_bit_p (ai->written_vars, tag_ann->uid)
    || is_call_clobbered (tag);
   var_stored_p = bitmap_bit_p (ai->written_vars, v_ann->uid)
    || is_call_clobbered (var);
   if (!tag_stored_p && !var_stored_p)
     continue;
   if (may_alias_p (p_map->var, p_map->set, var, v_map->set))
     {
       size_t num_tag_refs, num_var_refs;
       num_tag_refs = ((ai->num_references)->data.u[tag_ann->uid]);
       num_var_refs = ((ai->num_references)->data.u[v_ann->uid]);
       add_may_alias (tag, var);
       ai->total_alias_vops += (num_var_refs + num_tag_refs);
       p_map->total_alias_vops += (num_var_refs + num_tag_refs);
       ((p_map->may_aliases)->elms [(var_ann (var)->uid) / ((unsigned) (8 * 4))] |= (unsigned long) 1 << (var_ann (var)->uid) % ((unsigned) (8 * 4)));
     }
 }
    }
  if (dump_file)
    fprintf (dump_file, "%s: Total number of aliased vops: %ld\n",
      get_name (current_function_decl),
      ai->total_alias_vops);
  if (ai->total_alias_vops >= (compiler_params[(int) PARAM_MAX_ALIASED_VOPS].value1))
    group_aliases (ai);
}
static int
total_alias_vops_cmp (const void *p, const void *q)
{
  const struct alias_map_d **p1 = (const struct alias_map_d **)p;
  const struct alias_map_d **p2 = (const struct alias_map_d **)q;
  long n1 = (*p1)->total_alias_vops;
  long n2 = (*p2)->total_alias_vops;
  return (n1 > n2 ? -1 : (n1 == n2) ? 0 : 1);
}
static void
group_aliases_into (tree tag, sbitmap tag_aliases, struct alias_info *ai)
{
  size_t i;
  var_ann_t tag_ann = var_ann (tag);
  size_t num_tag_refs = ((ai->num_references)->data.u[tag_ann->uid]);
  do { unsigned int word_num_; unsigned int bit_num_ = (0) % (unsigned int) ((unsigned) (8 * 4)); unsigned int size_ = (tag_aliases)->size; unsigned long *ptr_ = (tag_aliases)->elms; for (word_num_ = (0) / (unsigned int) ((unsigned) (8 * 4)); word_num_ < size_; word_num_++, bit_num_ = 0) { unsigned long word_ = ptr_[word_num_]; if (word_ != 0) for (; bit_num_ < ((unsigned) (8 * 4)); bit_num_++) { unsigned long _mask = (unsigned long) 1 << bit_num_; if ((word_ & _mask) != 0) { word_ &= ~ _mask; (i) = word_num_ * ((unsigned) (8 * 4)) + bit_num_; { tree var = ((referenced_vars)->data.tree1[i]); var_ann_t ann = var_ann (var); ann->is_alias_tag = 0; ann->may_aliases = ((void *)0); if (var != tag) add_may_alias (var, tag); ai->total_alias_vops -= num_tag_refs; }; if (word_ == 0) break; } } } } while (0)
      ;
  ai->total_alias_vops += num_tag_refs;
  tag_ann->may_aliases = ((void *)0);
}
static void
group_aliases (struct alias_info *ai)
{
  size_t i;
  sbitmap res;
  qsort (ai->pointers, ai->num_pointers, sizeof (struct alias_map_d *),
         total_alias_vops_cmp);
  res = sbitmap_alloc (((referenced_vars)->elements_used));
  for (i = 0; i < ai->num_pointers; i++)
    {
      size_t j;
      tree tag1 = var_ann (ai->pointers[i]->var)->type_mem_tag;
      sbitmap tag1_aliases = ai->pointers[i]->may_aliases;
      if (ai->pointers[i]->grouped_p)
 continue;
      for (j = i + 1; j < ai->num_pointers; j++)
 {
   sbitmap tag2_aliases = ai->pointers[j]->may_aliases;
   sbitmap_a_and_b (res, tag1_aliases, tag2_aliases);
   if (sbitmap_first_set_bit (res) >= 0)
     {
       tree tag2 = var_ann (ai->pointers[j]->var)->type_mem_tag;
       sbitmap_a_or_b (tag1_aliases, tag1_aliases, tag2_aliases);
       sbitmap_zero (tag2_aliases);
       var_ann (tag2)->may_aliases = ((void *)0);
       add_may_alias (tag2, tag1);
       ai->pointers[j]->grouped_p = 1;
     }
 }
      group_aliases_into (tag1, tag1_aliases, ai);
      if (ai->total_alias_vops < (compiler_params[(int) PARAM_MAX_ALIASED_VOPS].value1))
 break;
    }
  for (i = 0; i < ((ai->processed_ptrs)->elements_used); i++)
    {
      size_t j;
      tree ptr = ((ai->processed_ptrs)->data.tree1[i]);
      tree name_tag = (ptr)->ssa_name.ptr_info->name_mem_tag;
      varray_type aliases;
      if (name_tag == (tree) ((void *)0))
 continue;
      aliases = var_ann (name_tag)->may_aliases;
      for (j = 0; aliases && j < ((aliases)->elements_used); j++)
 {
   tree alias = ((aliases)->data.tree1[j]);
   var_ann_t ann = var_ann (alias);
   if (ann->may_aliases)
     {
       ((aliases)->data.tree1[j]) = ((ann->may_aliases)->data.tree1[0]);
     }
 }
    }
  free(res);
  if (dump_file)
    fprintf (dump_file,
      "%s: Total number of aliased vops after grouping: %ld%s\n",
      get_name (current_function_decl),
      ai->total_alias_vops,
      (ai->total_alias_vops < 0) ? " (negative values are OK)" : "");
}
static void
create_alias_map_for (tree var, struct alias_info *ai)
{
  struct alias_map_d *alias_map;
  alias_map = xcalloc (1, sizeof (*alias_map));
  alias_map->var = var;
  if (((enum tree_code) (((var)->common.type))->common.code) == ARRAY_TYPE)
    alias_map->set = get_alias_set (((((var)->common.type))->common.type));
  else
    alias_map->set = get_alias_set (var);
  ai->addressable_vars[ai->num_addressable_vars++] = alias_map;
}
static void
setup_pointers_and_addressables (struct alias_info *ai)
{
  size_t i, n_vars, num_addressable_vars, num_pointers;
  num_addressable_vars = num_pointers = 0;
  for (i = 0; i < ((referenced_vars)->elements_used); i++)
    {
      tree var = ((referenced_vars)->data.tree1[i]);
      if (may_be_aliased (var))
 num_addressable_vars++;
      if ((((enum tree_code) (((var)->common.type))->common.code) == POINTER_TYPE || ((enum tree_code) (((var)->common.type))->common.code) == REFERENCE_TYPE))
 {
   var_ann_t ann = var_ann (var);
   if (((var)->common.volatile_flag) || ann->has_hidden_use)
     bitmap_set_bit (ai->dereferenced_ptrs_store, ann->uid);
   num_pointers++;
 }
    }
  ai->addressable_vars = xcalloc (num_addressable_vars,
      sizeof (struct alias_map_d *));
  ai->pointers = xcalloc (num_pointers, sizeof (struct alias_map_d *));
  ai->num_addressable_vars = 0;
  ai->num_pointers = 0;
  n_vars = ((referenced_vars)->elements_used);
  for (i = 0; i < n_vars; i++)
    {
      tree var = ((referenced_vars)->data.tree1[i]);
      var_ann_t v_ann = var_ann (var);
      if (v_ann->mem_tag_kind != NOT_A_TAG)
 continue;
      if (((var)->common.addressable_flag))
 {
   if (!bitmap_bit_p (ai->addresses_needed, v_ann->uid)
       && !v_ann->has_hidden_use
       && v_ann->mem_tag_kind == NOT_A_TAG
       && !needs_to_live_in_memory (var))
     {
       mark_non_addressable (var);
       bitmap_set_bit (vars_to_rename, v_ann->uid);
     }
 }
      if (may_be_aliased (var))
 {
   create_alias_map_for (var, ai);
   bitmap_set_bit (vars_to_rename, var_ann (var)->uid);
 }
      if ((((enum tree_code) (((var)->common.type))->common.code) == POINTER_TYPE || ((enum tree_code) (((var)->common.type))->common.code) == REFERENCE_TYPE)
   && (bitmap_bit_p (ai->dereferenced_ptrs_store, v_ann->uid)
       || bitmap_bit_p (ai->dereferenced_ptrs_load, v_ann->uid)))
 {
   tree tag = v_ann->type_mem_tag;
   var_ann_t t_ann;
   if (tag == (tree) ((void *)0))
     tag = get_tmt_for (var, ai);
   t_ann = var_ann (tag);
   v_ann->type_mem_tag = tag;
   if (bitmap_bit_p (ai->dereferenced_ptrs_store, v_ann->uid))
     bitmap_set_bit (ai->written_vars, t_ann->uid);
   if (((enum tree_code) (var)->common.code) == PARM_DECL || needs_to_live_in_memory (var))
     mark_call_clobbered (tag);
   if (t_ann->uid >= ((ai->num_references)->num_elements))
     ((ai->num_references) = varray_grow (ai->num_references, t_ann->uid + 10));
   ((ai->num_references)->data.u[t_ann->uid])
       += ((ai->num_references)->data.u[v_ann->uid]);
 }
    }
  if (ai->num_addressable_vars == 0
      && ai->num_pointers > 1)
    {
      free (ai->addressable_vars);
      ai->addressable_vars = xcalloc (ai->num_pointers,
          sizeof (struct alias_map_d *));
      ai->num_addressable_vars = 0;
      for (i = 0; i < ai->num_pointers; i++)
 {
   struct alias_map_d *p = ai->pointers[i];
   tree tag = var_ann (p->var)->type_mem_tag;
   create_alias_map_for (tag, ai);
 }
    }
}
static void
maybe_create_global_var (struct alias_info *ai)
{
  size_t i, n_clobbered;
  n_clobbered = 0;
  do { bitmap_element *ptr_ = (call_clobbered_vars)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (i) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); n_clobbered++; if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0);
  if (n_clobbered == 0
      || ai->num_calls_found * n_clobbered >= (size_t) (compiler_params[(int) PARAM_GLOBAL_VAR_THRESHOLD].value1))
    create_global_var ();
  if (global_var)
    do { bitmap_element *ptr_ = (call_clobbered_vars)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (i) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); { tree var = ((referenced_vars)->data.tree1[i]); if (var != global_var) { add_may_alias (var, global_var); bitmap_set_bit (vars_to_rename, var_ann (var)->uid); } }; if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
        ;
}
static unsigned char
may_alias_p (tree ptr, long mem_alias_set,
      tree var, long var_alias_set)
{
  tree mem;
  var_ann_t v_ann, m_ann;
  alias_stats.alias_queries++;
  alias_stats.simple_queries++;
  mem = var_ann (ptr)->type_mem_tag;
  if (mem == var)
    {
      alias_stats.alias_noalias++;
      alias_stats.simple_resolved++;
      return 0;
    }
  v_ann = var_ann (var);
  m_ann = var_ann (mem);
  alias_stats.tbaa_queries++;
  if ((((enum tree_code) (((var)->common.type))->common.code) == POINTER_TYPE || ((enum tree_code) (((var)->common.type))->common.code) == REFERENCE_TYPE)
      && var_alias_set != 0)
    {
      long ptr_alias_set = get_alias_set (ptr);
      if (ptr_alias_set == var_alias_set)
 {
   alias_stats.alias_noalias++;
   alias_stats.tbaa_resolved++;
   return 0;
 }
    }
  if (!alias_sets_conflict_p (mem_alias_set, var_alias_set))
    {
      if ((((enum tree_code) (((mem)->common.type))->common.code) == ARRAY_TYPE || ((enum tree_code) (((mem)->common.type))->common.code) == RECORD_TYPE || ((enum tree_code) (((mem)->common.type))->common.code) == UNION_TYPE || ((enum tree_code) (((mem)->common.type))->common.code) == QUAL_UNION_TYPE || ((enum tree_code) (((mem)->common.type))->common.code) == SET_TYPE)
   || (((enum tree_code) (((var)->common.type))->common.code) == ARRAY_TYPE || ((enum tree_code) (((var)->common.type))->common.code) == RECORD_TYPE || ((enum tree_code) (((var)->common.type))->common.code) == UNION_TYPE || ((enum tree_code) (((var)->common.type))->common.code) == QUAL_UNION_TYPE || ((enum tree_code) (((var)->common.type))->common.code) == SET_TYPE))
 {
   tree ptr_to_var;
   if (((enum tree_code) (((var)->common.type))->common.code) == ARRAY_TYPE)
     ptr_to_var = ((((((var)->common.type))->common.type))->type.pointer_to);
   else
     ptr_to_var = ((((var)->common.type))->type.pointer_to);
   if (ptr_to_var == (tree) ((void *)0))
     {
       alias_stats.alias_noalias++;
       alias_stats.tbaa_resolved++;
       return 0;
     }
   if (!alias_sets_conflict_p (mem_alias_set, get_alias_set (ptr_to_var))
       && !alias_sets_conflict_p (var_alias_set, get_alias_set (ptr)))
     {
       alias_stats.alias_noalias++;
       alias_stats.tbaa_resolved++;
       return 0;
     }
 }
      else
 {
   alias_stats.alias_noalias++;
   alias_stats.tbaa_resolved++;
   return 0;
 }
    }
  if (flag_tree_points_to != PTA_NONE)
      alias_stats.pta_queries++;
  if (flag_tree_points_to == PTA_ANDERSEN
      && !ptr_may_alias_var (ptr, var))
    {
      alias_stats.alias_noalias++;
      alias_stats.pta_resolved++;
      return 0;
    }
  alias_stats.alias_mayalias++;
  return 1;
}
static void
add_may_alias (tree var, tree alias)
{
  size_t i;
  var_ann_t v_ann = get_var_ann (var);
  var_ann_t a_ann = get_var_ann (alias);
  if (v_ann->may_aliases == ((void *)0))
    v_ann->may_aliases = varray_init (2, VARRAY_DATA_TREE, "aliases");
  for (i = 0; i < ((v_ann->may_aliases)->elements_used); i++)
    if (alias == ((v_ann->may_aliases)->data.tree1[i]))
      return;
  if (is_call_clobbered (var))
    mark_call_clobbered (alias);
  else if (is_call_clobbered (alias))
    mark_call_clobbered (var);
  do { if ((v_ann->may_aliases)->elements_used >= (v_ann->may_aliases)->num_elements) (((v_ann->may_aliases)) = varray_grow ((v_ann->may_aliases), 2 * (v_ann->may_aliases)->num_elements)); (v_ann->may_aliases)->data.tree1[(v_ann->may_aliases)->elements_used++] = (alias); } while (0);
  a_ann->is_alias_tag = 1;
}
static void
merge_pointed_to_info (struct alias_info *ai, tree dest, tree orig)
{
  struct ptr_info_def *dest_pi, *orig_pi;
  collect_points_to_info_for (ai, orig);
  dest_pi = get_ptr_info (dest);
  orig_pi = (orig)->ssa_name.ptr_info;
  if (orig_pi)
    {
      dest_pi->pt_anything |= orig_pi->pt_anything;
      dest_pi->pt_malloc |= orig_pi->pt_malloc;
      if (orig_pi->pt_vars)
 {
   if (dest_pi->pt_vars == ((void *)0))
     {
       dest_pi->pt_vars = bitmap_initialize (((void *)0), 0);
       bitmap_copy (dest_pi->pt_vars, orig_pi->pt_vars);
     }
   else
     bitmap_operation (dest_pi->pt_vars, dest_pi->pt_vars, orig_pi->pt_vars, BITMAP_IOR)
                       ;
      }
    }
}
static void
add_pointed_to_expr (tree ptr, tree value1)
{
  struct ptr_info_def *pi;
  pi = get_ptr_info (ptr);
  if (((enum tree_code) (value1)->common.code) == CALL_EXPR
      && (call_expr_flags (value1) & (4 | 8)))
    pi->pt_malloc = 1;
  else
    pi->pt_anything = 1;
  if (dump_file)
    {
      fprintf (dump_file, "Pointer ");
      print_generic_expr (dump_file, ptr, dump_flags);
      fprintf (dump_file, " points to ");
      if (pi->pt_malloc)
 fprintf (dump_file, "malloc space: ");
      else
 fprintf (dump_file, "an arbitrary address: ");
      print_generic_expr (dump_file, value1, dump_flags);
      fprintf (dump_file, "\n");
    }
}
static void
add_pointed_to_var (struct alias_info *ai, tree ptr, tree value1)
{
  if (((enum tree_code) (value1)->common.code) == ADDR_EXPR)
    {
      tree pt_var;
      struct ptr_info_def *pi;
      size_t uid;
      pt_var = ((value1)->exp.operands[0]);
      if (tree_code_type[(int) (((enum tree_code) (pt_var)->common.code))] == 'r')
 pt_var = get_base_address (pt_var);
      if (pt_var && (((enum tree_code) (pt_var)->common.code) == VAR_DECL || ((enum tree_code) (pt_var)->common.code) == PARM_DECL || ((enum tree_code) (pt_var)->common.code) == RESULT_DECL || (((enum tree_code) (pt_var)->common.code) == SSA_NAME && (((enum tree_code) ((pt_var)->ssa_name.var)->common.code) == VAR_DECL || ((enum tree_code) ((pt_var)->ssa_name.var)->common.code) == PARM_DECL || ((enum tree_code) ((pt_var)->ssa_name.var)->common.code) == RESULT_DECL))))
 {
   pi = get_ptr_info (ptr);
   uid = var_ann (pt_var)->uid;
   if (pi->pt_vars == ((void *)0))
     pi->pt_vars = bitmap_initialize (((void *)0), 0);
   bitmap_set_bit (pi->pt_vars, uid);
   bitmap_set_bit (ai->addresses_needed, uid);
 }
      else
 add_pointed_to_expr (ptr, value1);
    }
  else
    add_pointed_to_expr (ptr, value1);
}
static unsigned char
collect_points_to_info_r (tree var, tree stmt, void *data)
{
  struct alias_info *ai = (struct alias_info *) data;
  if (dump_file && (dump_flags & (1 << 3)))
    {
      fprintf (dump_file, "Visiting use-def links for ");
      print_generic_expr (dump_file, var, dump_flags);
      fprintf (dump_file, "\n");
    }
  if (((enum tree_code) (stmt)->common.code) == MODIFY_EXPR)
    {
      tree rhs = ((stmt)->exp.operands[1]);
      while ((((enum tree_code) (rhs)->common.code) == NOP_EXPR || ((enum tree_code) (rhs)->common.code) == CONVERT_EXPR || ((enum tree_code) (rhs)->common.code) == NON_LVALUE_EXPR) && ((rhs)->exp.operands[0]) != global_trees[TI_ERROR_MARK] && (((((rhs)->common.type))->type.mode) == ((((((rhs)->exp.operands[0]))->common.type))->type.mode))) (rhs) = ((rhs)->exp.operands[0]);
      if (is_gimple_min_invariant (rhs))
 add_pointed_to_var (ai, var, rhs);
      else if (((enum tree_code) (rhs)->common.code) == SSA_NAME
        && (((enum tree_code) (((rhs)->common.type))->common.code) == POINTER_TYPE || ((enum tree_code) (((rhs)->common.type))->common.code) == REFERENCE_TYPE))
 merge_pointed_to_info (ai, var, rhs);
      else if (((enum tree_code) (rhs)->common.code) == PLUS_EXPR
        || ((enum tree_code) (rhs)->common.code) == MINUS_EXPR)
 {
   tree op0 = ((rhs)->exp.operands[0]);
   tree op1 = ((rhs)->exp.operands[1]);
   if (((enum tree_code) (op0)->common.code) == SSA_NAME
       && (((enum tree_code) (((op0)->common.type))->common.code) == POINTER_TYPE || ((enum tree_code) (((op0)->common.type))->common.code) == REFERENCE_TYPE))
     merge_pointed_to_info (ai, var, op0);
   else if (((enum tree_code) (op1)->common.code) == SSA_NAME
     && (((enum tree_code) (((op1)->common.type))->common.code) == POINTER_TYPE || ((enum tree_code) (((op1)->common.type))->common.code) == REFERENCE_TYPE))
     merge_pointed_to_info (ai, var, op1);
   else if (is_gimple_min_invariant (op0))
     add_pointed_to_var (ai, var, op0);
   else if (is_gimple_min_invariant (op1))
     add_pointed_to_var (ai, var, op1);
   else
     add_pointed_to_expr (var, rhs);
 }
      else
 add_pointed_to_expr (var, rhs);
    }
  else if (((enum tree_code) (stmt)->common.code) == ASM_EXPR)
    {
      get_ptr_info (var)->pt_anything = 1;
    }
  else if ((((enum tree_code) (stmt)->common.code) == NOP_EXPR && (((enum tree_code) (((stmt)->common.type))->common.code) == VOID_TYPE) && integer_zerop (((stmt)->exp.operands[0]))))
    {
      tree decl = (var)->ssa_name.var;
      if (((enum tree_code) (decl)->common.code) == PARM_DECL)
 add_pointed_to_expr (var, decl);
      else if (((decl)->decl.initial))
 add_pointed_to_var (ai, var, ((decl)->decl.initial));
      else
 add_pointed_to_expr (var, decl);
    }
  else if (((enum tree_code) (stmt)->common.code) == PHI_NODE)
    {
      tree lhs = get_def_from_ptr (get_phi_result_ptr (stmt));
      if (is_gimple_min_invariant (var))
 add_pointed_to_var (ai, lhs, var);
      else if (((enum tree_code) (var)->common.code) == SSA_NAME)
 merge_pointed_to_info (ai, lhs, var);
      else
 fancy_abort ("gcc.c", 137266, "?");
    }
  else
    fancy_abort ("gcc.c", 137269, "?");
  return 0;
}
static unsigned char
is_escape_site (tree stmt, size_t *num_calls_p)
{
  if (get_call_expr_in (stmt) != (tree) ((void *)0))
    {
      if (num_calls_p)
 (*num_calls_p)++;
      return 1;
    }
  else if (((enum tree_code) (stmt)->common.code) == ASM_EXPR)
    return 1;
  else if (((enum tree_code) (stmt)->common.code) == MODIFY_EXPR)
    {
      tree lhs = ((stmt)->exp.operands[0]);
      if (((enum tree_code) (lhs)->common.code) != SSA_NAME)
 lhs = get_base_address (lhs);
      if (lhs == (tree) ((void *)0))
 return 1;
      if (((enum tree_code) (lhs)->common.code) == SSA_NAME)
 return 0;
      return 1;
    }
  else if (((enum tree_code) (stmt)->common.code) == RETURN_EXPR)
    return 1;
  return 0;
}
static tree
create_memory_tag (tree type, unsigned char is_type_tag)
{
  var_ann_t ann;
  tree tag = create_tmp_var_raw (type, (is_type_tag) ? "TMT" : "NMT");
  ((tag)->decl.context) = current_function_decl;
  ((tag)->common.volatile_flag) = ((type)->common.volatile_flag);
  ((tag)->common.addressable_flag) = 1;
  ann = get_var_ann (tag);
  ann->mem_tag_kind = (is_type_tag) ? TYPE_TAG : NAME_TAG;
  ann->type_mem_tag = (tree) ((void *)0);
  add_referenced_tmp_var (tag);
  bitmap_set_bit (vars_to_rename, ann->uid);
  return tag;
}
static tree
get_nmt_for (tree ptr)
{
  struct ptr_info_def *pi = get_ptr_info (ptr);
  tree tag = pi->name_mem_tag;
  if (tag == (tree) ((void *)0))
    {
      tag = create_memory_tag (((((ptr)->common.type))->common.type), 0);
      if (((enum tree_code) ((ptr)->ssa_name.var)->common.code) == PARM_DECL)
 mark_call_clobbered (tag);
      if (pi->pt_malloc)
 mark_call_clobbered (tag);
    }
  return tag;
}
static tree
get_tmt_for (tree ptr, struct alias_info *ai)
{
  size_t i;
  tree tag;
  tree tag_type = ((((ptr)->common.type))->common.type);
  long tag_set = get_alias_set (tag_type);
  for (i = 0, tag = (tree) ((void *)0); i < ai->num_pointers; i++)
    {
      struct alias_map_d *curr = ai->pointers[i];
      if (tag_set == curr->set
   && (flag_tree_points_to == PTA_NONE
       || same_points_to_set (curr->var, ptr)))
 {
   tag = var_ann (curr->var)->type_mem_tag;
   break;
 }
    }
  if (tag == (tree) ((void *)0))
    {
      struct alias_map_d *alias_map;
      tag = create_memory_tag (tag_type, 1);
      alias_map = xcalloc (1, sizeof (*alias_map));
      alias_map->var = ptr;
      alias_map->set = tag_set;
      ai->pointers[ai->num_pointers++] = alias_map;
    }
  return tag;
}
static void
create_global_var (void)
{
  global_var = build_decl_stat (VAR_DECL,get_identifier (".GLOBAL_VAR"),global_trees[TI_SIZE_TYPE] )
                                          ;
  ((global_var)->decl.artificial_flag) = 1;
  ((global_var)->common.readonly_flag) = 0;
  ((global_var)->decl.external_flag) = 0;
  ((global_var)->common.static_flag) = 1;
  ((global_var)->common.used_flag) = 1;
  ((global_var)->decl.context) = (tree) ((void *)0);
  ((global_var)->common.volatile_flag) = 0;
  ((global_var)->common.addressable_flag) = 0;
  add_referenced_tmp_var (global_var);
  bitmap_set_bit (vars_to_rename, var_ann (global_var)->uid);
}
static void
dump_alias_stats (FILE *file)
{
  const char *funcname
    = lang_hooks.decl_printable_name (current_function_decl, 2);
  fprintf (file, "\nAlias statistics for %s\n\n", funcname);
  fprintf (file, "Total alias queries:\t%u\n", alias_stats.alias_queries);
  fprintf (file, "Total alias mayalias results:\t%u\n",
    alias_stats.alias_mayalias);
  fprintf (file, "Total alias noalias results:\t%u\n",
    alias_stats.alias_noalias);
  fprintf (file, "Total simple queries:\t%u\n",
    alias_stats.simple_queries);
  fprintf (file, "Total simple resolved:\t%u\n",
    alias_stats.simple_resolved);
  fprintf (file, "Total TBAA queries:\t%u\n",
    alias_stats.tbaa_queries);
  fprintf (file, "Total TBAA resolved:\t%u\n",
    alias_stats.tbaa_resolved);
  fprintf (file, "Total PTA queries:\t%u\n",
    alias_stats.pta_queries);
  fprintf (file, "Total PTA resolved:\t%u\n",
    alias_stats.pta_resolved);
}
void
dump_alias_info (FILE *file)
{
  size_t i;
  const char *funcname
    = lang_hooks.decl_printable_name (current_function_decl, 2);
  fprintf (file, "\nAlias information for %s\n\n", funcname);
  for (i = 0; i < ((referenced_vars)->elements_used); i++)
    {
      tree var = ((referenced_vars)->data.tree1[i]);
      var_ann_t ann = var_ann (var);
      if (ann->may_aliases
   || ann->type_mem_tag
   || ann->is_alias_tag
   || ann->mem_tag_kind != NOT_A_TAG)
 dump_variable_dfa (file, var);
    }
  fprintf (file, "\n");
}
void
debug_alias_info (void)
{
  dump_alias_info (stderr);
}
static struct ptr_info_def *
get_ptr_info (tree t)
{
  struct ptr_info_def *pi;
  pi = (t)->ssa_name.ptr_info;
  if (pi == ((void *)0))
    {
      pi = ggc_alloc_stat (sizeof (*pi) );
      memset ((void *)pi, 0, sizeof (*pi));
      (t)->ssa_name.ptr_info = pi;
    }
  return pi;
}
static void
dump_points_to_info_for (FILE *file, tree ptr)
{
  struct ptr_info_def *pi = (ptr)->ssa_name.ptr_info;
  fprintf (file, "Pointer ");
  print_generic_expr (file, ptr, dump_flags);
  if (pi == ((void *)0))
    return;
  if (pi->name_mem_tag)
    {
      fprintf (file, ", name memory tag: ");
      print_generic_expr (file, pi->name_mem_tag, dump_flags);
    }
  if (pi->value_escapes_p)
    fprintf (file, ", its value escapes");
  if (pi->pt_anything)
    fprintf (file, ", points-to anything");
  if (pi->pt_malloc)
    fprintf (file, ", points-to malloc");
  if (pi->pt_vars)
    {
      unsigned ix;
      fprintf (file, ", points-to vars: { ");
      do { bitmap_element *ptr_ = (pi->pt_vars)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (ix) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); { print_generic_expr (file, ((referenced_vars)->data.tree1[ix]), dump_flags); fprintf (file, " "); }; if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
     ;
      fprintf (file, "}");
    }
  fprintf (file, "\n");
}
void
dump_points_to_info (FILE *file)
{
  basic_block bb;
  block_stmt_iterator si;
  size_t i;
  const char *fname =
    lang_hooks.decl_printable_name (current_function_decl, 2);
  fprintf (file, "\n\nPointed-to sets for pointers in %s\n\n", fname);
  for (i = 0; i < ((referenced_vars)->elements_used); i++)
    {
      tree var = ((referenced_vars)->data.tree1[i]);
      if ((((enum tree_code) (((var)->common.type))->common.code) == POINTER_TYPE || ((enum tree_code) (((var)->common.type))->common.code) == REFERENCE_TYPE))
 {
   var_ann_t ann = var_ann (var);
   if (ann->default_def)
     dump_points_to_info_for (file, ann->default_def);
 }
    }
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      tree phi;
      for (phi = phi_nodes (bb); phi; phi = (((phi))->common.chain))
 {
   tree ptr = get_def_from_ptr (get_phi_result_ptr (phi));
   if ((((enum tree_code) (((ptr)->common.type))->common.code) == POINTER_TYPE || ((enum tree_code) (((ptr)->common.type))->common.code) == REFERENCE_TYPE))
     dump_points_to_info_for (file, ptr);
 }
 for (si = bsi_start (bb); !bsi_end_p (si); bsi_next (&si))
   {
     stmt_ann_t ann = stmt_ann (bsi_stmt (si));
     def_optype defs = get_def_ops (ann);
     if (defs)
       for (i = 0; i < ((defs) ? (defs)->num_defs : 0); i++)
  if ((((enum tree_code) ((((get_def_from_ptr (get_def_op_ptr (((defs)), ((i))))))->common.type))->common.code) == POINTER_TYPE || ((enum tree_code) ((((get_def_from_ptr (get_def_op_ptr (((defs)), ((i))))))->common.type))->common.code) == REFERENCE_TYPE))
    dump_points_to_info_for (file, (get_def_from_ptr (get_def_op_ptr (((defs)), ((i))))));
   }
    }
  fprintf (file, "\n");
}
void
debug_points_to_info (void)
{
  dump_points_to_info (stderr);
}
void
dump_may_aliases_for (FILE *file, tree var)
{
  varray_type aliases;
  if (((enum tree_code) (var)->common.code) == SSA_NAME)
    var = (var)->ssa_name.var;
  aliases = var_ann (var)->may_aliases;
  if (aliases)
    {
      size_t i;
      fprintf (file, "{ ");
      for (i = 0; i < ((aliases)->elements_used); i++)
 {
   print_generic_expr (file, ((aliases)->data.tree1[i]), dump_flags);
   fprintf (file, " ");
 }
      fprintf (file, "}");
    }
}
void
debug_may_aliases_for (tree var)
{
  dump_may_aliases_for (stderr, var);
}
static void tree_ssa_phiopt (void);
static unsigned char conditional_replacement (basic_block, tree, tree, tree);
static unsigned char value_replacement (basic_block, tree, tree, tree);
static unsigned char abs_replacement (basic_block, tree, tree, tree);
static void replace_phi_with_stmt (block_stmt_iterator, basic_block,
       basic_block, tree, tree);
static unsigned char candidate_bb_for_phi_optimization (basic_block,
            basic_block *,
            basic_block *);
static unsigned char empty_block_p (basic_block);
static void
tree_ssa_phiopt (void)
{
  basic_block bb;
  unsigned char removed_phis = 0;
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      tree arg0, arg1, phi;
      phi = phi_nodes (bb);
      if (phi && (((phi))->common.chain) == ((void *)0)
   && (phi)->phi.num_args == 2)
 {
   arg0 = get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((0))));
   arg1 = get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((1))));
     if (conditional_replacement (bb, phi, arg0, arg1)
  || value_replacement (bb, phi, arg0, arg1)
  || abs_replacement (bb, phi, arg0, arg1))
       {
  removed_phis = 1;
       }
 }
    }
  if (removed_phis)
    cleanup_tree_cfg ();
}
static unsigned char
empty_block_p (basic_block bb)
{
  block_stmt_iterator bsi;
  bsi = bsi_start (bb);
  while (!bsi_end_p (bsi)
   && (((enum tree_code) (bsi_stmt (bsi))->common.code) == LABEL_EXPR
       || (((enum tree_code) (bsi_stmt (bsi))->common.code) == NOP_EXPR && (((enum tree_code) (((bsi_stmt (bsi))->common.type))->common.code) == VOID_TYPE) && integer_zerop (((bsi_stmt (bsi))->exp.operands[0])))))
    bsi_next (&bsi);
  if (!bsi_end_p (bsi))
    return 0;
  return 1;
}
static unsigned char
candidate_bb_for_phi_optimization (basic_block bb,
       basic_block *cond_block_p,
       basic_block *other_block_p)
{
  tree last0, last1;
  basic_block cond_block, other_block;
  last0 = last_stmt (bb->pred->src);
  last1 = last_stmt (bb->pred->pred_next->src);
  if (last0 && ((enum tree_code) (last0)->common.code) == COND_EXPR)
    {
      cond_block = bb->pred->src;
      other_block = bb->pred->pred_next->src;
    }
  else if (last1 && ((enum tree_code) (last1)->common.code) == COND_EXPR)
    {
      other_block = bb->pred->src;
      cond_block = bb->pred->pred_next->src;
    }
  else
    return 0;
  if (!cond_block->succ
      || !cond_block->succ->succ_next
      || cond_block->succ->succ_next->succ_next
      || (cond_block->succ->flags & 2) != 0
      || (cond_block->succ->succ_next->flags & 2) != 0)
    return 0;
  if (!other_block->pred
      || other_block->pred->src != cond_block
      || other_block->pred->pred_next
      || !other_block->succ
      || other_block->succ->dest != bb
      || other_block->succ->succ_next
      || phi_nodes (other_block))
    return 0;
  *cond_block_p = cond_block;
  *other_block_p = other_block;
  return 1;
}
static void
replace_phi_with_stmt (block_stmt_iterator bsi, basic_block bb,
         basic_block cond_block, tree phi, tree new)
{
  bsi_insert_after (&bsi, new, BSI_NEW_STMT);
  (get_def_from_ptr (get_phi_result_ptr (phi)))->common.chain = new;
  release_phi_node (phi);
  bb_ann (bb)->phi_nodes = ((void *)0);
  if (cond_block->succ->dest == bb)
    {
      cond_block->succ->flags |= 1;
      cond_block->succ->flags &= ~(1024 | 2048);
      ssa_remove_edge (cond_block->succ->succ_next);
    }
  else
    {
      cond_block->succ->succ_next->flags |= 1;
      cond_block->succ->succ_next->flags
 &= ~(1024 | 2048);
      ssa_remove_edge (cond_block->succ);
    }
  bsi = bsi_last (cond_block);
  bsi_remove (&bsi);
  if (dump_file && (dump_flags & (1 << 3)))
    fprintf (dump_file,
       "COND_EXPR in block %d and PHI in block %d converted to straightline code.\n",
       cond_block->index,
       bb->index);
}
static unsigned char
conditional_replacement (basic_block bb, tree phi, tree arg0, tree arg1)
{
  tree result;
  tree old_result = ((void *)0);
  basic_block other_block = ((void *)0);
  basic_block cond_block = ((void *)0);
  tree new, cond;
  block_stmt_iterator bsi;
  edge true_edge, false_edge;
  tree new_var = ((void *)0);
  if ((integer_zerop (arg0) && integer_onep (arg1))
      || (integer_zerop (arg1) && integer_onep (arg0)))
    ;
  else
    return 0;
  if (!candidate_bb_for_phi_optimization (bb, &cond_block, &other_block)
      || !empty_block_p (other_block))
    return 0;
  cond = ((((last_stmt (cond_block)))->exp.operands[0]));
  result = get_def_from_ptr (get_phi_result_ptr (phi));
  if (((enum tree_code) (cond)->common.code) != SSA_NAME
      && !lang_hooks.types_compatible_p (((cond)->common.type), ((result)->common.type)))
    {
      new_var = make_rename_temp (((cond)->common.type), ((void *)0));
      old_result = cond;
      cond = new_var;
    }
  if (!lang_hooks.types_compatible_p (((cond)->common.type), ((result)->common.type)))
    cond = fold_convert (((result)->common.type), cond);
  extract_true_false_edges_from_block (cond_block, &true_edge, &false_edge);
  bsi = bsi_start (bb);
  if (old_result)
    {
      tree new1;
      if (tree_code_type[(int) (((enum tree_code) (old_result)->common.code))] != '<')
 return 0;
      new1 = build (((enum tree_code) (old_result)->common.code), ((result)->common.type),
      ((old_result)->exp.operands[0]),
      ((old_result)->exp.operands[1]));
      new1 = build (MODIFY_EXPR, ((result)->common.type), new_var, new1);
      bsi_insert_after (&bsi, new1, BSI_NEW_STMT);
    }
  if ((((phi)->phi.a[0]).e == true_edge && integer_onep (arg0))
      || (((phi)->phi.a[0]).e == false_edge && integer_zerop (arg0))
      || (((phi)->phi.a[1]).e == true_edge && integer_onep (arg1))
      || (((phi)->phi.a[1]).e == false_edge && integer_zerop (arg1)))
    {
      new = build (MODIFY_EXPR, ((get_def_from_ptr (get_phi_result_ptr (phi)))->common.type),
      get_def_from_ptr (get_phi_result_ptr (phi)), cond);
    }
  else
    {
      tree cond1 = invert_truthvalue (cond);
      cond = cond1;
      if (((enum tree_code) (cond)->common.code) == COND_EXPR)
 return 0;
      if (is_gimple_cast (cond)
   && !is_gimple_val (((cond)->exp.operands[0])))
 {
   tree temp = ((cond)->exp.operands[0]);
   tree new_var_1 = make_rename_temp (((temp)->common.type), ((void *)0));
   new = build (MODIFY_EXPR, ((new_var_1)->common.type), new_var_1, temp);
   bsi_insert_after (&bsi, new, BSI_NEW_STMT);
   cond = fold_convert (((result)->common.type), new_var_1);
 }
      if (((enum tree_code) (cond)->common.code) == TRUTH_NOT_EXPR
   && !is_gimple_val (((cond)->exp.operands[0])))
 return 0;
      new = build (MODIFY_EXPR, ((get_def_from_ptr (get_phi_result_ptr (phi)))->common.type),
      get_def_from_ptr (get_phi_result_ptr (phi)), cond);
    }
  replace_phi_with_stmt (bsi, bb, cond_block, phi, new);
  return 1;
}
static unsigned char
value_replacement (basic_block bb, tree phi, tree arg0, tree arg1)
{
  tree result;
  basic_block other_block = ((void *)0);
  basic_block cond_block = ((void *)0);
  tree new, cond;
  edge true_edge, false_edge;
  if ((((mode_class[((((arg1)->common.type))->type.mode)] == MODE_FLOAT || mode_class[((((arg1)->common.type))->type.mode)] == MODE_COMPLEX_FLOAT || mode_class[((((arg1)->common.type))->type.mode)] == MODE_VECTOR_FLOAT) && 1 == 1) && !flag_unsafe_math_optimizations))
    return 0;
  if (!candidate_bb_for_phi_optimization (bb, &cond_block, &other_block)
      || !empty_block_p (other_block))
    return 0;
  cond = ((((last_stmt (cond_block)))->exp.operands[0]));
  result = get_def_from_ptr (get_phi_result_ptr (phi));
  if (((enum tree_code) (cond)->common.code) != NE_EXPR && ((enum tree_code) (cond)->common.code) != EQ_EXPR)
    return 0;
  extract_true_false_edges_from_block (cond_block, &true_edge, &false_edge);
  if ((operand_equal_p (arg0, ((cond)->exp.operands[0]), 0)
       && operand_equal_p (arg1, ((cond)->exp.operands[1]), 0))
      || (operand_equal_p (arg1, ((cond)->exp.operands[0]), 0)
   && operand_equal_p (arg0, ((cond)->exp.operands[1]), 0)))
    {
      edge e;
      tree arg;
      e = (((enum tree_code) (cond)->common.code) == NE_EXPR ? true_edge : false_edge);
      if (e->dest == other_block)
 e = e->dest->succ;
      if (((phi)->phi.a[0]).e == e)
 arg = arg0;
      else
 arg = arg1;
      new = build (MODIFY_EXPR, ((result)->common.type), result, arg);
      replace_phi_with_stmt (bsi_start (bb), bb, cond_block, phi, new);
      return 1;
    }
  return 0;
}
static unsigned char
abs_replacement (basic_block bb, tree phi, tree arg0, tree arg1)
{
  tree result;
  basic_block other_block = ((void *)0);
  basic_block cond_block = ((void *)0);
  tree new, cond;
  block_stmt_iterator bsi;
  edge true_edge, false_edge;
  tree assign = ((void *)0);
  edge e;
  tree rhs = ((void *)0), lhs = ((void *)0);
  unsigned char negate;
  enum tree_code cond_code;
  if ((((mode_class[((((arg1)->common.type))->type.mode)] == MODE_FLOAT || mode_class[((((arg1)->common.type))->type.mode)] == MODE_COMPLEX_FLOAT || mode_class[((((arg1)->common.type))->type.mode)] == MODE_VECTOR_FLOAT) && 1 == 1) && !flag_unsafe_math_optimizations))
    return 0;
  if (!candidate_bb_for_phi_optimization (bb, &cond_block, &other_block))
    return 0;
  bsi = bsi_start (other_block);
  while (!bsi_end_p (bsi))
    {
      tree stmt = bsi_stmt (bsi);
      if (((enum tree_code) (stmt)->common.code) == LABEL_EXPR
          || (((enum tree_code) (stmt)->common.code) == NOP_EXPR && (((enum tree_code) (((stmt)->common.type))->common.code) == VOID_TYPE) && integer_zerop (((stmt)->exp.operands[0]))))
        {
          bsi_next (&bsi);
          continue;
        }
      if (assign)
 return 0;
      if (((enum tree_code) (stmt)->common.code) == MODIFY_EXPR)
        {
          lhs = ((stmt)->exp.operands[0]);
          rhs = ((stmt)->exp.operands[1]);
          if (((enum tree_code) (rhs)->common.code) == NEGATE_EXPR)
            {
              rhs = ((rhs)->exp.operands[0]);
              if ((lhs == arg0 && rhs == arg1)
    || (lhs == arg1 && rhs == arg0))
  {
    assign = stmt;
    bsi_next (&bsi);
  }
       else
  return 0;
            }
   else
     return 0;
        }
      else
 return 0;
    }
  if (assign == ((void *)0))
    return 0;
  cond = ((((last_stmt (cond_block)))->exp.operands[0]));
  result = get_def_from_ptr (get_phi_result_ptr (phi));
  cond_code = ((enum tree_code) (cond)->common.code);
  if (cond_code != GT_EXPR && cond_code != GE_EXPR
      && cond_code != LT_EXPR && cond_code != LE_EXPR)
    return 0;
  if (((cond)->exp.operands[0]) != rhs)
    return 0;
  if (((((enum tree_code) (((((cond)->exp.operands[1]))->common.type))->common.code) == REAL_TYPE) || (((enum tree_code) (((((cond)->exp.operands[1]))->common.type))->common.code) == COMPLEX_TYPE && ((enum tree_code) (((((((cond)->exp.operands[1]))->common.type))->common.type))->common.code) == REAL_TYPE))
        ? real_zerop (((cond)->exp.operands[1]))
        : integer_zerop (((cond)->exp.operands[1])))
    ;
  else
    return 0;
  extract_true_false_edges_from_block (cond_block, &true_edge, &false_edge);
  if (cond_code == GT_EXPR || cond_code == GE_EXPR)
    e = true_edge;
  else
    e = false_edge;
  if (e->dest == other_block)
    negate = 1;
  else
    negate = 0;
  if (negate)
    lhs = make_rename_temp (((result)->common.type), ((void *)0));
  else
    lhs = result;
  new = build (MODIFY_EXPR, ((lhs)->common.type),
               lhs, build1_stat (ABS_EXPR,((lhs)->common.type),rhs ));
  replace_phi_with_stmt (bsi_start (bb), bb, cond_block, phi, new);
  if (negate)
    {
      bsi = bsi_start (bb);
      bsi_next (&bsi);
      new = build (MODIFY_EXPR, ((result)->common.type),
                   result, build1_stat (NEGATE_EXPR,((lhs)->common.type),lhs ));
      bsi_insert_after (&bsi, new, BSI_NEW_STMT);
      (result)->common.chain = new;
    }
  return 1;
}
static unsigned char
gate_phiopt (void)
{
  return 1;
}
struct tree_opt_pass pass_phiopt =
{
  "phiopt",
  gate_phiopt,
  tree_ssa_phiopt,
  ((void *)0),
  ((void *)0),
  0,
  TV_TREE_PHIOPT,
  (1 << 3) | (1 << 6),
  0,
  0,
  0,
  (1 << 0) | (1 << 2)
    | (1 << 3) | (1 << 1)
    | (1 << 4)
};
static bitmap vars;
static unsigned char need_imm_uses_for_forwprop (tree);
static void tree_ssa_forward_propagate_single_use_vars (void);
static void record_single_argument_cond_exprs (varray_type,
            varray_type *,
            bitmap);
static void substitute_single_use_vars (varray_type *, varray_type);
static unsigned char
need_imm_uses_for_forwprop (tree var)
{
  return bitmap_bit_p (vars, (var)->ssa_name.version);
}
static void
record_single_argument_cond_exprs (varray_type cond_worklist,
       varray_type *vars_worklist,
       bitmap vars)
{
  while (((cond_worklist)->elements_used) > 0)
    {
      tree last = ((cond_worklist)->data.tree1[(cond_worklist)->elements_used - 1]);
      do { ((cond_worklist)->elements_used--); } while (0);
      if (last && ((enum tree_code) (last)->common.code) == COND_EXPR)
 {
   tree cond = ((((last))->exp.operands[0]));
   enum tree_code cond_code = ((enum tree_code) (cond)->common.code);
   if (cond_code == SSA_NAME
       || ((cond_code == EQ_EXPR || cond_code == NE_EXPR)
    && ((enum tree_code) (((cond)->exp.operands[0]))->common.code) == SSA_NAME
    && tree_code_type[(int) (((enum tree_code) (((cond)->exp.operands[1]))->common.code))] == 'c'
    && (((enum tree_code) (((((cond)->exp.operands[1]))->common.type))->common.code) == INTEGER_TYPE || ((enum tree_code) (((((cond)->exp.operands[1]))->common.type))->common.code) == ENUMERAL_TYPE || ((enum tree_code) (((((cond)->exp.operands[1]))->common.type))->common.code) == BOOLEAN_TYPE || ((enum tree_code) (((((cond)->exp.operands[1]))->common.type))->common.code) == CHAR_TYPE)))
     {
       tree def;
       tree test_var;
       if (cond_code == SSA_NAME)
  test_var = cond;
       else
  test_var = ((cond)->exp.operands[0]);
       if (bitmap_bit_p (vars, (test_var)->ssa_name.version))
  continue;
       def = (test_var)->common.chain;
       if (((enum tree_code) (def)->common.code) == MODIFY_EXPR)
  {
    tree def_rhs = ((def)->exp.operands[1]);
    if (((enum tree_code) (def_rhs)->common.code) == PLUS_EXPR
    || ((enum tree_code) (def_rhs)->common.code) == MINUS_EXPR)
      {
        tree op0 = ((def_rhs)->exp.operands[0]);
        tree op1 = ((def_rhs)->exp.operands[1]);
        if (((enum tree_code) (op0)->common.code) != SSA_NAME
     || tree_code_type[(int) (((enum tree_code) (op1)->common.code))] != 'c'
     || !(((enum tree_code) (((op1)->common.type))->common.code) == INTEGER_TYPE || ((enum tree_code) (((op1)->common.type))->common.code) == ENUMERAL_TYPE || ((enum tree_code) (((op1)->common.type))->common.code) == BOOLEAN_TYPE || ((enum tree_code) (((op1)->common.type))->common.code) == CHAR_TYPE))
   continue;
      }
    else if (((enum tree_code) (cond)->common.code) == SSA_NAME
      || integer_zerop (((cond)->exp.operands[1]))
      || integer_onep (((cond)->exp.operands[1])))
      {
        if (tree_code_type[(int) (((enum tree_code) (def_rhs)->common.code))] == '<')
   {
     tree op0 = ((def_rhs)->exp.operands[0]);
     tree op1 = ((def_rhs)->exp.operands[1]);
     if ((((enum tree_code) (op0)->common.code) != SSA_NAME
          && !is_gimple_min_invariant (op0))
         || (((enum tree_code) (op1)->common.code) != SSA_NAME
      && !is_gimple_min_invariant (op1)))
       continue;
          }
        else if (((enum tree_code) (def_rhs)->common.code) == TRUTH_NOT_EXPR)
   {
     def_rhs = ((def_rhs)->exp.operands[0]);
     if (((enum tree_code) (def_rhs)->common.code) != SSA_NAME
         && !is_gimple_min_invariant (def_rhs))
       continue;
   }
        else if (((enum tree_code) (def_rhs)->common.code) == NOP_EXPR
          || ((enum tree_code) (def_rhs)->common.code) == CONVERT_EXPR)
   {
     tree outer_type;
     tree inner_type;
     outer_type = ((def_rhs)->common.type);
     inner_type = ((((def_rhs)->exp.operands[0]))->common.type);
     if ((((enum tree_code) (outer_type)->common.code) == BOOLEAN_TYPE
          && (((enum tree_code) (inner_type)->common.code) == INTEGER_TYPE || ((enum tree_code) (inner_type)->common.code) == ENUMERAL_TYPE || ((enum tree_code) (inner_type)->common.code) == BOOLEAN_TYPE || ((enum tree_code) (inner_type)->common.code) == CHAR_TYPE))
         || (((enum tree_code) (inner_type)->common.code) == BOOLEAN_TYPE
      && (((enum tree_code) (outer_type)->common.code) == INTEGER_TYPE || ((enum tree_code) (outer_type)->common.code) == ENUMERAL_TYPE || ((enum tree_code) (outer_type)->common.code) == BOOLEAN_TYPE || ((enum tree_code) (outer_type)->common.code) == CHAR_TYPE)))
       ;
     else
       continue;
   }
        else
   continue;
      }
    else
      continue;
    do { if ((*vars_worklist)->elements_used >= (*vars_worklist)->num_elements) (((*vars_worklist)) = varray_grow ((*vars_worklist), 2 * (*vars_worklist)->num_elements)); (*vars_worklist)->data.tree1[(*vars_worklist)->elements_used++] = (test_var); } while (0);
    bitmap_set_bit (vars, (test_var)->ssa_name.version);
  }
     }
 }
    }
}
static void
substitute_single_use_vars (varray_type *cond_worklist,
       varray_type vars_worklist)
{
  while (((vars_worklist)->elements_used) > 0)
    {
      tree test_var = ((vars_worklist)->data.tree1[(vars_worklist)->elements_used - 1]);
      tree def = (test_var)->common.chain;
      dataflow_t df;
      int j, num_uses, propagated_uses;
      block_stmt_iterator bsi;
      do { ((vars_worklist)->elements_used--); } while (0);
      df = get_immediate_uses (def);
      num_uses = num_immediate_uses (df);
      propagated_uses = 0;
      if (num_uses == 1
   || (((enum tree_code) (((test_var)->common.type))->common.code) == BOOLEAN_TYPE
       && ((enum tree_code) (((def)->exp.operands[1]))->common.code) == TRUTH_NOT_EXPR
       && (((enum tree_code) (((((def)->exp.operands[1]))->exp.operands[0]))->common.code)
    == SSA_NAME)))
 ;
      else
 continue;
      for (j = 0; j < num_uses; j++)
 {
   tree cond_stmt;
   tree cond;
   enum tree_code cond_code;
   tree def_rhs;
   enum tree_code def_rhs_code;
   tree new_cond;
   cond_stmt = immediate_use (df, j);
   if (((enum tree_code) (cond_stmt)->common.code) != COND_EXPR)
     continue;
   cond = ((((cond_stmt))->exp.operands[0]));
   cond_code = ((enum tree_code) (cond)->common.code);
   def_rhs = ((def)->exp.operands[1]);
   def_rhs_code = ((enum tree_code) (def_rhs)->common.code);
   if (def_rhs_code == PLUS_EXPR || def_rhs_code == MINUS_EXPR)
     {
       tree op0 = ((def_rhs)->exp.operands[0]);
       tree op1 = ((def_rhs)->exp.operands[1]);
       enum tree_code new_code;
       tree t;
       new_code = def_rhs_code == PLUS_EXPR ? MINUS_EXPR : PLUS_EXPR;
       t = int_const_binop (new_code, ((cond)->exp.operands[1]), op1, 0);
       if (!is_gimple_val (t))
  continue;
       new_cond = build (cond_code, global_trees[TI_BOOLEAN_TYPE], op0, t);
     }
   else if (tree_code_type[(int) (def_rhs_code)] == '<')
     {
       tree op0 = ((def_rhs)->exp.operands[0]);
       tree op1 = ((def_rhs)->exp.operands[1]);
       new_cond = build (def_rhs_code, global_trees[TI_BOOLEAN_TYPE], op0, op1);
       if ((cond_code == EQ_EXPR
     && integer_zerop (((cond)->exp.operands[1])))
    || (cond_code == NE_EXPR
        && integer_onep (((cond)->exp.operands[1]))))
  {
    new_cond = invert_truthvalue (new_cond);
    if (tree_code_type[(int) (((enum tree_code) (new_cond)->common.code))] != '<'
        && ((enum tree_code) (new_cond)->common.code) != SSA_NAME)
      continue;
  }
     }
   else
     {
       unsigned char invert = 0;
       enum tree_code new_code;
       if (def_rhs_code == TRUTH_NOT_EXPR)
  invert = 1;
       if (cond_code == SSA_NAME
    || (cond_code == NE_EXPR
        && integer_zerop (((cond)->exp.operands[1])))
    || (cond_code == EQ_EXPR
        && integer_onep (((cond)->exp.operands[1]))))
  new_code = NE_EXPR;
       else
  new_code = EQ_EXPR;
       if (invert)
  new_code = (new_code == EQ_EXPR ? NE_EXPR : EQ_EXPR);
       new_cond = build (new_code,
    global_trees[TI_BOOLEAN_TYPE],
    ((def_rhs)->exp.operands[0]),
    convert (((def_rhs)->common.type),
      global_trees[TI_INTEGER_ZERO]));
     }
   if (dump_file && (dump_flags & (1 << 3)))
     {
       fprintf (dump_file, "  Replaced '");
       print_generic_expr (dump_file, cond, dump_flags);
       fprintf (dump_file, "' with '");
       print_generic_expr (dump_file, new_cond, dump_flags);
       fprintf (dump_file, "'\n");
     }
   ((((cond_stmt))->exp.operands[0])) = new_cond;
   modify_stmt (cond_stmt);
   propagated_uses++;
   do { if ((*cond_worklist)->elements_used >= (*cond_worklist)->num_elements) (((*cond_worklist)) = varray_grow ((*cond_worklist), 2 * (*cond_worklist)->num_elements)); (*cond_worklist)->data.tree1[(*cond_worklist)->elements_used++] = (cond_stmt); } while (0);
 }
      if (num_uses && num_uses == propagated_uses)
 for (bsi = bsi_start (bb_for_stmt (def));
      !bsi_end_p (bsi);
      bsi_next (&bsi))
   {
     if (def == bsi_stmt (bsi))
       {
  bsi_remove (&bsi);
  break;
       }
   }
    }
}
static void
tree_ssa_forward_propagate_single_use_vars (void)
{
  basic_block bb;
  varray_type vars_worklist, cond_worklist;
  vars = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
  vars_worklist = varray_init (10, VARRAY_DATA_TREE, "VARS worklist");
  cond_worklist = varray_init (10, VARRAY_DATA_TREE, "COND worklist");
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      tree last = last_stmt (bb);
      if (last && ((enum tree_code) (last)->common.code) == COND_EXPR)
 do { if ((cond_worklist)->elements_used >= (cond_worklist)->num_elements) (((cond_worklist)) = varray_grow ((cond_worklist), 2 * (cond_worklist)->num_elements)); (cond_worklist)->data.tree1[(cond_worklist)->elements_used++] = (last); } while (0);
    }
  while (((cond_worklist)->elements_used) > 0)
    {
      record_single_argument_cond_exprs (cond_worklist, &vars_worklist, vars);
      if (((vars_worklist)->elements_used) > 0)
 {
   compute_immediate_uses (1 << 0, need_imm_uses_for_forwprop);
   bitmap_clear (vars);
   substitute_single_use_vars (&cond_worklist, vars_worklist);
   free_df ();
 }
    }
  do { if (vars) { bitmap_clear (vars); free (vars); (vars) = 0; } } while (0);
}
static unsigned char
gate_forwprop (void)
{
  return 1;
}
struct tree_opt_pass pass_forwprop = {
  "forwprop",
  gate_forwprop,
  tree_ssa_forward_propagate_single_use_vars,
  ((void *)0),
  ((void *)0),
  0,
  TV_TREE_FORWPROP,
  (1 << 3) | (1 << 6),
  0,
  0,
  0,
  (1 << 0) | (1 << 2)
  | (1 << 3)
};
struct var_map_elt
{
  tree old;
  tree new;
};
struct nesting_info
{
  struct nesting_info *outer;
  struct nesting_info *inner;
  struct nesting_info *next;
  htab_t var_map1;
  tree context;
  tree new_local_var_chain;
  tree frame_type;
  tree frame_decl;
  tree chain_field;
  tree chain_decl;
  tree nl_goto_field;
  unsigned char any_parm_remapped;
  unsigned char any_tramp_created;
};
static hashval_t
var_map_hash (const void *x)
{
  const struct var_map_elt *a = x;
  return htab_hash_pointer (a->old);
}
static int
var_map_eq (const void *x, const void *y)
{
  const struct var_map_elt *a = x;
  const struct var_map_elt *b = y;
  return a->old == b->old;
}
static tree
create_tmp_var_for (struct nesting_info *info, tree type, const char *prefix)
{
  tree tmp_var;
  tmp_var = create_tmp_var_raw (type, prefix);
  ((tmp_var)->decl.context) = info->context;
  ((tmp_var)->common.chain) = info->new_local_var_chain;
  ((tmp_var)->decl.seen_in_bind_expr) = 1;
  info->new_local_var_chain = tmp_var;
  return tmp_var;
}
static tree
build_addr (tree exp)
{
  tree base = exp;
  while (((enum tree_code) (base)->common.code) == REALPART_EXPR || ((enum tree_code) (base)->common.code) == IMAGPART_EXPR
  || handled_component_p (base))
    base = ((base)->exp.operands[0]);
  if ((tree_code_type[(int) (((enum tree_code) (base)->common.code))] == 'd'))
    ((base)->common.addressable_flag) = 1;
  return build1_stat (ADDR_EXPR,build_pointer_type (((exp)->common.type)),exp );
}
static void
insert_field_into_struct (tree type, tree field)
{
  tree *p;
  ((field)->decl.context) = type;
  for (p = &((type)->type.value1s); *p ; p = &((*p)->common.chain))
    if (((field)->decl.u1.a.align) >= ((*p)->decl.u1.a.align))
      break;
  ((field)->common.chain) = *p;
  *p = field;
}
static tree
get_frame_type (struct nesting_info *info)
{
  tree type = info->frame_type;
  if (!type)
    {
      char *name;
      type = make_node_stat (RECORD_TYPE );
      name = concat ("FRAME.",
       ((const char *) (((info->context)->decl.name))->identifier.id.str),
       ((void *)0));
      ((type)->type.name) = get_identifier (name);
      free (name);
      info->frame_type = type;
      info->frame_decl = create_tmp_var_for (info, type, "FRAME");
    }
  return type;
}
static unsigned char
use_pointer_in_frame (tree decl)
{
  if (((enum tree_code) (decl)->common.code) == PARM_DECL)
    {
      return (((enum tree_code) (((decl)->common.type))->common.code) == ARRAY_TYPE || ((enum tree_code) (((decl)->common.type))->common.code) == RECORD_TYPE || ((enum tree_code) (((decl)->common.type))->common.code) == UNION_TYPE || ((enum tree_code) (((decl)->common.type))->common.code) == QUAL_UNION_TYPE || ((enum tree_code) (((decl)->common.type))->common.code) == SET_TYPE);
    }
  else
    {
      return ((decl)->decl.size) == ((void *)0) || !((((decl)->decl.size))->common.constant_flag);
    }
}
static tree
lookup_field_for_decl (struct nesting_info *info, tree decl,
         enum insert_option insert)
{
  struct var_map_elt *elt, dummy;
  void **slot;
  tree field;
  dummy.old = decl;
  slot = htab_find_slot (info->var_map1, &dummy, insert);
  if (!slot)
    {
      if (insert == INSERT)
 fancy_abort ("gcc.c", 139115, "?");
      return ((void *)0);
    }
  elt = *slot;
  if (!elt && insert == INSERT)
    {
      field = make_node_stat (FIELD_DECL );
      ((field)->decl.name) = ((decl)->decl.name);
      if (use_pointer_in_frame (decl))
 {
   ((field)->common.type) = build_pointer_type (((decl)->common.type));
   ((field)->decl.u1.a.align) = ((((field)->common.type))->type.align);
   ((field)->decl.non_addressable) = 1;
 }
      else
 {
          ((field)->common.type) = ((decl)->common.type);
          ((field)->decl.locus) = ((decl)->decl.locus);
          ((field)->decl.u1.a.align) = ((decl)->decl.u1.a.align);
          ((field)->decl.user_align) = ((decl)->decl.user_align);
          ((field)->common.addressable_flag) = ((decl)->common.addressable_flag);
          ((field)->decl.non_addressable) = !((decl)->common.addressable_flag);
          ((field)->common.volatile_flag) = ((decl)->common.volatile_flag);
 }
      insert_field_into_struct (get_frame_type (info), field);
      elt = xmalloc (sizeof (*elt));
      elt->old = decl;
      elt->new = field;
      *slot = elt;
      if (((enum tree_code) (decl)->common.code) == PARM_DECL)
 info->any_parm_remapped = 1;
    }
  else
    field = elt ? elt->new : ((void *)0);
  return field;
}
static tree
get_chain_decl (struct nesting_info *info)
{
  tree decl = info->chain_decl;
  if (!decl)
    {
      tree type;
      type = get_frame_type (info->outer);
      type = build_pointer_type (type);
      decl = build_decl_stat (PARM_DECL,create_tmp_var_name ("CHAIN"),type );
      ((decl)->decl.artificial_flag) = 1;
      ((decl)->decl.ignored_flag) = 1;
      ((decl)->common.used_flag) = 1;
      ((decl)->decl.context) = info->context;
      ((decl)->decl.initial) = type;
      ((decl)->common.readonly_flag) = 1;
      info->chain_decl = decl;
    }
  return decl;
}
static tree
get_chain_field (struct nesting_info *info)
{
  tree field = info->chain_field;
  if (!field)
    {
      tree type = build_pointer_type (get_frame_type (info->outer));
      field = make_node_stat (FIELD_DECL );
      ((field)->decl.name) = get_identifier ("__chain");
      ((field)->common.type) = type;
      ((field)->decl.u1.a.align) = ((type)->type.align);
      ((field)->decl.non_addressable) = 1;
      insert_field_into_struct (get_frame_type (info), field);
      info->chain_field = field;
    }
  return field;
}
static tree
init_tmp_var (struct nesting_info *info, tree exp, tree_stmt_iterator *tsi)
{
  tree t, stmt;
  t = create_tmp_var_for (info, ((exp)->common.type), ((void *)0));
  stmt = build (MODIFY_EXPR, ((t)->common.type), t, exp);
  ((stmt)->exp.locus = (((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (tsi_stmt (*tsi))->common.code))])) != 0) ? (tsi_stmt (*tsi))->exp.locus : (location_t *)((void *)0))));
  tsi_link_before (tsi, stmt, TSI_SAME_STMT);
  return t;
}
static tree
gimplify_val_nested (struct nesting_info *info, tree exp, tree_stmt_iterator *tsi)
{
  if (is_gimple_val (exp))
    return exp;
  else
    return init_tmp_var (info, exp, tsi);
}
static tree trampoline_type;
static tree
get_trampoline_type (void)
{
  tree record, t;
  unsigned align, size;
  if (trampoline_type)
    return trampoline_type;
  align = 8;
  size = (0 ? 23 : 10);
  if (align > (8 * (0 ? 8 : 4)))
    {
      size += ((align/8) - 1) & -((8 * (0 ? 8 : 4))/8);
      align = (8 * (0 ? 8 : 4));
    }
  t = build_index_type (build_int_2_wide ((unsigned long) (size - 1), (long) (0)));
  t = build_array_type (integer_types[itk_char], t);
  t = build_decl_stat (FIELD_DECL,get_identifier ("__data"),t );
  ((t)->decl.u1.a.align) = align;
  ((t)->decl.user_align) = 1;
  record = make_node_stat (RECORD_TYPE );
  ((record)->type.name) = get_identifier ("__builtin_trampoline");
  ((record)->type.value1s) = t;
  layout_type (record);
  return record;
}
static tree
lookup_tramp_for_decl (struct nesting_info *info, tree decl,
         enum insert_option insert)
{
  struct var_map_elt *elt, dummy;
  void **slot;
  tree field;
  dummy.old = decl;
  slot = htab_find_slot (info->var_map1, &dummy, insert);
  if (!slot)
    {
      if (insert == INSERT)
 fancy_abort ("gcc.c", 139300, "?");
      return ((void *)0);
    }
  elt = *slot;
  if (!elt && insert == INSERT)
    {
      field = make_node_stat (FIELD_DECL );
      ((field)->decl.name) = ((decl)->decl.name);
      ((field)->common.type) = get_trampoline_type ();
      ((field)->common.addressable_flag) = 1;
      insert_field_into_struct (get_frame_type (info), field);
      elt = xmalloc (sizeof (*elt));
      elt->old = decl;
      elt->new = field;
      *slot = elt;
      info->any_tramp_created = 1;
    }
  else
    field = elt ? elt->new : ((void *)0);
  return field;
}
static tree
get_nl_goto_field (struct nesting_info *info)
{
  tree field = info->nl_goto_field;
  if (!field)
    {
      unsigned size;
      tree type;
      if ((0 ? DImode : SImode) == ptr_mode)
 type = global_trees[TI_PTR_TYPE];
      else
 type = lang_hooks.types.type_for_mode ((0 ? DImode : SImode), 1);
      size = ((unsigned short) mode_size[(0 ? DImode : SImode)]);
      size = size / ((unsigned short) mode_size[(0 ? DImode : SImode)]);
      size = size + 1;
      type = build_array_type (type, build_index_type (build_int_2_wide ((unsigned long) (size), (long) (0))));
      field = make_node_stat (FIELD_DECL );
      ((field)->decl.name) = get_identifier ("__nl_goto_buf");
      ((field)->common.type) = type;
      ((field)->decl.u1.a.align) = ((type)->type.align);
      ((field)->common.addressable_flag) = 1;
      insert_field_into_struct (get_frame_type (info), field);
      info->nl_goto_field = field;
    }
  return field;
}
struct walk_stmt_info
{
  walk_tree_fn callback;
  tree_stmt_iterator tsi;
  struct nesting_info *info;
  unsigned char val_only;
};
static void
walk_stmts (struct walk_stmt_info *wi, tree *tp)
{
  tree t = *tp;
  if (!t)
    return;
  switch (((enum tree_code) (t)->common.code))
    {
    case STATEMENT_LIST:
      {
 tree_stmt_iterator i;
 for (i = tsi_start (t); !tsi_end_p (i); tsi_next (&i))
   {
     wi->tsi = i;
     walk_stmts (wi, tsi_stmt_ptr (i));
   }
      }
      break;
    case COND_EXPR:
      walk_tree (&((((t))->exp.operands[0])), wi->callback, wi, ((void *)0));
      walk_stmts (wi, &((((t))->exp.operands[1])));
      walk_stmts (wi, &((((t))->exp.operands[2])));
      break;
    case CATCH_EXPR:
      walk_stmts (wi, &(((t))->exp.operands[1]));
      break;
    case EH_FILTER_EXPR:
      walk_stmts (wi, &(((t))->exp.operands[1]));
      break;
    case TRY_CATCH_EXPR:
    case TRY_FINALLY_EXPR:
      walk_stmts (wi, &((t)->exp.operands[0]));
      walk_stmts (wi, &((t)->exp.operands[1]));
      break;
    case BIND_EXPR:
      walk_stmts (wi, &((((t))->exp.operands[1])));
      break;
    case RETURN_EXPR:
      walk_stmts (wi, &((t)->exp.operands[0]));
      break;
    case MODIFY_EXPR:
      wi->val_only = 0;
      walk_tree (&((t)->exp.operands[0]), wi->callback, wi, ((void *)0));
      wi->val_only = 0;
      walk_tree (&((t)->exp.operands[1]), wi->callback, wi, ((void *)0));
      wi->val_only = 1;
      break;
    default:
      wi->val_only = 1;
      walk_tree (tp, wi->callback, wi, ((void *)0));
      break;
    }
}
static void
walk_function (walk_tree_fn callback, struct nesting_info *info)
{
  struct walk_stmt_info wi;
  memset (&wi, 0, sizeof (wi));
  wi.callback = callback;
  wi.info = info;
  wi.val_only = 1;
  walk_stmts (&wi, &((info->context)->decl.saved_tree));
}
static void
walk_all_functions (walk_tree_fn callback, struct nesting_info *root)
{
  do
    {
      if (root->inner)
 walk_all_functions (callback, root->inner);
      walk_function (callback, root);
      root = root->next;
    }
  while (root);
}
static struct nesting_info *
create_nesting_tree (struct cgraph_node *cgn)
{
  struct nesting_info *info = xcalloc (1, sizeof (*info));
  info->var_map1 = htab_create (7, var_map_hash, var_map_eq, free);
  info->context = cgn->decl;
  for (cgn = cgn->nested; cgn ; cgn = cgn->next_nested)
    {
      struct nesting_info *sub = create_nesting_tree (cgn);
      sub->outer = info;
      sub->next = info->inner;
      info->inner = sub;
    }
  return info;
}
static tree
get_static_chain (struct nesting_info *info, tree target_context,
    tree_stmt_iterator *tsi)
{
  struct nesting_info *i;
  tree x;
  if (info->context == target_context)
    {
      x = build_addr (info->frame_decl);
    }
  else
    {
      x = get_chain_decl (info);
      for (i = info->outer; i->context != target_context; i = i->outer)
 {
   tree field = get_chain_field (i);
   x = build1_stat (INDIRECT_REF,((((x)->common.type))->common.type),x );
   x = build (COMPONENT_REF, ((field)->common.type), x, field, (tree) ((void *)0));
   x = init_tmp_var (info, x, tsi);
 }
    }
  return x;
}
static tree
get_frame_field (struct nesting_info *info, tree target_context,
   tree field, tree_stmt_iterator *tsi)
{
  struct nesting_info *i;
  tree x;
  if (info->context == target_context)
    {
      (void) get_frame_type (info);
      x = info->frame_decl;
    }
  else
    {
      x = get_chain_decl (info);
      for (i = info->outer; i->context != target_context; i = i->outer)
 {
   tree field = get_chain_field (i);
   x = build1_stat (INDIRECT_REF,((((x)->common.type))->common.type),x );
   x = build (COMPONENT_REF, ((field)->common.type), x, field, (tree) ((void *)0));
   x = init_tmp_var (info, x, tsi);
 }
      x = build1_stat (INDIRECT_REF,((((x)->common.type))->common.type),x );
    }
  x = build (COMPONENT_REF, ((field)->common.type), x, field, (tree) ((void *)0));
  return x;
}
static tree
convert_nonlocal_reference (tree *tp, int *walk_subtrees, void *data)
{
  struct walk_stmt_info *wi = data;
  struct nesting_info *info = wi->info;
  tree t = *tp;
  *walk_subtrees = 0;
  switch (((enum tree_code) (t)->common.code))
    {
    case VAR_DECL:
      if (((t)->common.static_flag) || ((t)->decl.external_flag))
 break;
    case PARM_DECL:
      if (decl_function_context (t) != info->context)
 {
   tree target_context = decl_function_context (t);
   struct nesting_info *i;
   tree x;
   for (i = info->outer; i->context != target_context; i = i->outer)
     continue;
   x = lookup_field_for_decl (i, t, INSERT);
   x = get_frame_field (info, target_context, x, &wi->tsi);
   if (use_pointer_in_frame (t))
     {
       x = init_tmp_var (info, x, &wi->tsi);
       x = build1_stat (INDIRECT_REF,((((x)->common.type))->common.type),x );
     }
   if (wi->val_only)
     x = init_tmp_var (info, x, &wi->tsi);
   *tp = x;
 }
      break;
    case GOTO_EXPR:
      if (((enum tree_code) ((((t))->exp.operands[0]))->common.code) != LABEL_DECL)
 {
   *walk_subtrees = 1;
   wi->val_only = 1;
 }
      break;
    case LABEL_DECL:
      if (decl_function_context (t) != info->context)
        ((t)->common.side_effects_flag) = 1;
      break;
    case ADDR_EXPR:
      {
 unsigned char save_val_only = wi->val_only;
 tree save_sub = ((t)->exp.operands[0]);
 wi->val_only = 0;
 walk_tree (&((t)->exp.operands[0]), convert_nonlocal_reference, wi, ((void *)0));
 wi->val_only = 1;
 if (save_sub != ((t)->exp.operands[0]))
   {
     ((t)->common.invariant_flag) = 0;
     if (save_val_only)
       *tp = gimplify_val_nested (wi->info, t, &wi->tsi);
   }
      }
      break;
    case REALPART_EXPR:
    case IMAGPART_EXPR:
    case COMPONENT_REF:
    case ARRAY_REF:
    case ARRAY_RANGE_REF:
    case BIT_FIELD_REF:
      wi->val_only = 1;
      for (; handled_component_p (t)
    || ((enum tree_code) (t)->common.code) == REALPART_EXPR || ((enum tree_code) (t)->common.code) == IMAGPART_EXPR;
    tp = &((t)->exp.operands[0]), t = *tp)
 {
   if (((enum tree_code) (t)->common.code) == COMPONENT_REF)
     walk_tree (&((t)->exp.operands[2]), convert_nonlocal_reference, wi,
         ((void *)0));
   else if (((enum tree_code) (t)->common.code) == ARRAY_REF
     || ((enum tree_code) (t)->common.code) == ARRAY_RANGE_REF)
     {
       walk_tree (&((t)->exp.operands[1]), convert_nonlocal_reference, wi,
    ((void *)0));
       walk_tree (&((t)->exp.operands[2]), convert_nonlocal_reference, wi,
    ((void *)0));
       walk_tree (&((t)->exp.operands[3]), convert_nonlocal_reference, wi,
    ((void *)0));
     }
   else if (((enum tree_code) (t)->common.code) == BIT_FIELD_REF)
     {
       walk_tree (&((t)->exp.operands[1]), convert_nonlocal_reference, wi,
    ((void *)0));
       walk_tree (&((t)->exp.operands[2]), convert_nonlocal_reference, wi,
    ((void *)0));
     }
 }
      wi->val_only = 0;
      walk_tree (tp, convert_nonlocal_reference, wi, ((void *)0));
      break;
    default:
      if (!(tree_code_type[(int) (((enum tree_code) (t)->common.code))] == 'd') && !(tree_code_type[(int) (((enum tree_code) (t)->common.code))] == 't'))
 {
   *walk_subtrees = 1;
          wi->val_only = 1;
 }
      break;
    }
  return (tree) ((void *)0);
}
static tree
convert_local_reference (tree *tp, int *walk_subtrees, void *data)
{
  struct walk_stmt_info *wi = data;
  struct nesting_info *info = wi->info;
  tree t = *tp, field, x, y;
  switch (((enum tree_code) (t)->common.code))
    {
    case VAR_DECL:
      if (((t)->common.static_flag) || ((t)->decl.external_flag))
 break;
    case PARM_DECL:
      if (decl_function_context (t) == info->context)
 {
   if (use_pointer_in_frame (t))
     break;
   field = lookup_field_for_decl (info, t, NO_INSERT);
   if (!field)
     break;
   x = get_frame_field (info, info->context, field, &wi->tsi);
   if (wi->val_only)
     x = init_tmp_var (info, x, &wi->tsi);
   *tp = x;
 }
      break;
    case ADDR_EXPR:
      {
 unsigned char save_val_only = wi->val_only;
 tree save_sub = ((t)->exp.operands[0]);
 wi->val_only = 0;
 walk_tree (&((t)->exp.operands[0]), convert_local_reference, wi, ((void *)0));
 wi->val_only = save_val_only;
 if (((t)->exp.operands[0]) != save_sub)
   {
     ((info->frame_decl)->common.addressable_flag) = 1;
     if (save_val_only)
       *tp = gimplify_val_nested (wi->info, t, &wi->tsi);
   }
      }
      break;
    case CALL_EXPR:
      *walk_subtrees = 1;
      x = get_callee_fndecl (t);
      if (!x || ((x)->decl.built_in_class) != BUILT_IN_NORMAL)
 break;
      if (((x)->decl.u1.f) != BUILT_IN_STACK_ALLOC)
 break;
      t = ((((t)->exp.operands[1]))->list.value1);
      if (((enum tree_code) (t)->common.code) != ADDR_EXPR)
 fancy_abort ("gcc.c", 139791, "?");
      t = ((t)->exp.operands[0]);
      if (((enum tree_code) (t)->common.code) != VAR_DECL)
 fancy_abort ("gcc.c", 139794, "?");
      field = lookup_field_for_decl (info, t, NO_INSERT);
      if (!field)
 break;
      if (!use_pointer_in_frame (t))
 fancy_abort ("gcc.c", 139799, "?");
      x = build_addr (t);
      y = get_frame_field (info, info->context, field, &wi->tsi);
      x = build (MODIFY_EXPR, global_trees[TI_VOID_TYPE], y, x);
      ((x)->exp.locus = (((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (tsi_stmt (wi->tsi))->common.code))])) != 0) ? (tsi_stmt (wi->tsi))->exp.locus : (location_t *)((void *)0))));
      tsi_link_after (&wi->tsi, x, TSI_SAME_STMT);
      break;
    case REALPART_EXPR:
    case IMAGPART_EXPR:
    case COMPONENT_REF:
    case ARRAY_REF:
    case ARRAY_RANGE_REF:
    case BIT_FIELD_REF:
      wi->val_only = 1;
      for (; handled_component_p (t)
    || ((enum tree_code) (t)->common.code) == REALPART_EXPR || ((enum tree_code) (t)->common.code) == IMAGPART_EXPR;
    tp = &((t)->exp.operands[0]), t = *tp)
 {
   if (((enum tree_code) (t)->common.code) == COMPONENT_REF)
     walk_tree (&((t)->exp.operands[2]), convert_local_reference, wi,
         ((void *)0));
   else if (((enum tree_code) (t)->common.code) == ARRAY_REF
     || ((enum tree_code) (t)->common.code) == ARRAY_RANGE_REF)
     {
       walk_tree (&((t)->exp.operands[1]), convert_local_reference, wi,
    ((void *)0));
       walk_tree (&((t)->exp.operands[2]), convert_local_reference, wi,
    ((void *)0));
       walk_tree (&((t)->exp.operands[3]), convert_local_reference, wi,
    ((void *)0));
     }
   else if (((enum tree_code) (t)->common.code) == BIT_FIELD_REF)
     {
       walk_tree (&((t)->exp.operands[1]), convert_local_reference, wi,
    ((void *)0));
       walk_tree (&((t)->exp.operands[2]), convert_local_reference, wi,
    ((void *)0));
     }
 }
      wi->val_only = 0;
      walk_tree (tp, convert_local_reference, wi, ((void *)0));
      break;
    default:
      if (!(tree_code_type[(int) (((enum tree_code) (t)->common.code))] == 'd') && !(tree_code_type[(int) (((enum tree_code) (t)->common.code))] == 't'))
 {
   *walk_subtrees = 1;
   wi->val_only = 1;
 }
      break;
    }
  return (tree) ((void *)0);
}
static tree
convert_nl_goto_reference (tree *tp, int *walk_subtrees, void *data)
{
  struct walk_stmt_info *wi = data;
  struct nesting_info *info = wi->info, *i;
  tree t = *tp, label, new_label, target_context, x, arg, field;
  struct var_map_elt *elt;
  void **slot;
  *walk_subtrees = 0;
  if (((enum tree_code) (t)->common.code) != GOTO_EXPR)
    return (tree) ((void *)0);
  label = (((t))->exp.operands[0]);
  if (((enum tree_code) (label)->common.code) != LABEL_DECL)
    return (tree) ((void *)0);
  target_context = decl_function_context (label);
  if (target_context == info->context)
    return (tree) ((void *)0);
  for (i = info->outer; target_context != i->context; i = i->outer)
    continue;
  new_label = create_artificial_label ();
  ((new_label)->decl.nonlocal_flag) = 1;
  elt = xmalloc (sizeof (*elt));
  elt->old = label;
  elt->new = new_label;
  slot = htab_find_slot (i->var_map1, elt, INSERT);
  *slot = elt;
  field = get_nl_goto_field (i);
  x = get_frame_field (info, target_context, field, &wi->tsi);
  x = build_addr (x);
  x = gimplify_val_nested (info, x, &wi->tsi);
  arg = tree_cons_stat (((void *)0),x,((void *)0) );
  x = build_addr (new_label);
  arg = tree_cons_stat (((void *)0),x,arg );
  x = implicit_built_in_decls[BUILT_IN_NONLOCAL_GOTO];
  x = build_function_call_expr (x, arg);
  ((x)->exp.locus = (((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (tsi_stmt (wi->tsi))->common.code))])) != 0) ? (tsi_stmt (wi->tsi))->exp.locus : (location_t *)((void *)0))));
  *tsi_stmt_ptr (wi->tsi) = x;
  return (tree) ((void *)0);
}
static tree
convert_nl_goto_receiver (tree *tp, int *walk_subtrees, void *data)
{
  struct walk_stmt_info *wi = data;
  struct nesting_info *info = wi->info;
  tree t = *tp, label, new_label, x;
  struct var_map_elt *elt, dummy;
  tree_stmt_iterator tmp_tsi;
  *walk_subtrees = 0;
  if (((enum tree_code) (t)->common.code) != LABEL_EXPR)
    return (tree) ((void *)0);
  label = (((t))->exp.operands[0]);
  dummy.old = label;
  elt = htab_find (info->var_map1, &dummy);
  if (!elt)
    return (tree) ((void *)0);
  new_label = elt->new;
  tmp_tsi = wi->tsi;
  tsi_prev (&tmp_tsi);
  if (tsi_end_p (tmp_tsi) || block_may_fallthru (tsi_stmt (tmp_tsi)))
    {
      x = build1_stat (GOTO_EXPR,global_trees[TI_VOID_TYPE],label );
      tsi_link_before (&wi->tsi, x, TSI_SAME_STMT);
    }
  x = build1_stat (LABEL_EXPR,global_trees[TI_VOID_TYPE],new_label );
  tsi_link_before (&wi->tsi, x, TSI_SAME_STMT);
  return (tree) ((void *)0);
}
static tree
convert_tramp_reference (tree *tp, int *walk_subtrees, void *data)
{
  struct walk_stmt_info *wi = data;
  struct nesting_info *info = wi->info, *i;
  tree t = *tp, decl, target_context, x, arg;
  *walk_subtrees = 0;
  switch (((enum tree_code) (t)->common.code))
    {
    case ADDR_EXPR:
      decl = ((t)->exp.operands[0]);
      if (((enum tree_code) (decl)->common.code) != FUNCTION_DECL)
 break;
      target_context = decl_function_context (decl);
      if (!target_context)
 break;
      if (((decl)->decl.regdecl_flag))
 break;
      for (i = info; i->context != target_context; i = i->outer)
 continue;
      x = lookup_tramp_for_decl (i, decl, INSERT);
      x = get_frame_field (info, target_context, x, &wi->tsi);
      x = build_addr (x);
      x = gimplify_val_nested (info, x, &wi->tsi);
      arg = tree_cons_stat (((void *)0),x,((void *)0) );
      x = implicit_built_in_decls[BUILT_IN_ADJUST_TRAMPOLINE];
      x = build_function_call_expr (x, arg);
      x = init_tmp_var (info, x, &wi->tsi);
      x = build1_stat (NOP_EXPR,((t)->common.type),x );
      x = init_tmp_var (info, x, &wi->tsi);
      *tp = x;
      break;
    case CALL_EXPR:
      walk_tree (&((t)->exp.operands[1]), convert_tramp_reference, wi, ((void *)0));
      break;
    default:
      if (!(tree_code_type[(int) (((enum tree_code) (t)->common.code))] == 'd') && !(tree_code_type[(int) (((enum tree_code) (t)->common.code))] == 't'))
 *walk_subtrees = 1;
      break;
    }
  return (tree) ((void *)0);
}
static tree
convert_call_expr (tree *tp, int *walk_subtrees, void *data)
{
  struct walk_stmt_info *wi = data;
  struct nesting_info *info = wi->info;
  tree t = *tp, decl, target_context;
  *walk_subtrees = 0;
  switch (((enum tree_code) (t)->common.code))
    {
    case CALL_EXPR:
      decl = get_callee_fndecl (t);
      if (!decl)
 break;
      target_context = decl_function_context (decl);
      if (target_context && !((decl)->decl.regdecl_flag))
 ((t)->exp.operands[2])
   = get_static_chain (info, target_context, &wi->tsi);
      break;
    case RETURN_EXPR:
    case MODIFY_EXPR:
      *walk_subtrees = 1;
      break;
    default:
      break;
    }
  return (tree) ((void *)0);
}
static void
convert_all_function_calls (struct nesting_info *root)
{
  do
    {
      if (root->inner)
 convert_all_function_calls (root->inner);
      walk_function (convert_tramp_reference, root);
      walk_function (convert_call_expr, root);
      if (root->outer && !root->chain_decl && !root->chain_field)
 ((root->context)->decl.regdecl_flag) = 1;
      else
 {
 }
      root = root->next;
    }
  while (root);
}
static void
finalize_nesting_tree_1 (struct nesting_info *root)
{
  tree stmt_list = ((void *)0);
  tree context = root->context;
  struct function *sf;
  if (root->frame_type)
    {
      layout_type (root->frame_type);
      layout_decl (root->frame_decl, 0);
    }
  if (root->any_parm_remapped)
    {
      tree p;
      for (p = ((context)->decl.arguments); p ; p = ((p)->common.chain))
 {
   tree field, x, y;
   field = lookup_field_for_decl (root, p, NO_INSERT);
   if (!field)
     continue;
   if (use_pointer_in_frame (p))
     x = build_addr (p);
   else
     x = p;
   y = build (COMPONENT_REF, ((field)->common.type),
       root->frame_decl, field, (tree) ((void *)0));
   x = build (MODIFY_EXPR, ((field)->common.type), y, x);
   append_to_statement_list (x, &stmt_list);
 }
    }
  if (root->chain_field)
    {
      tree x = build (COMPONENT_REF, ((root->chain_field)->common.type),
        root->frame_decl, root->chain_field, (tree) ((void *)0));
      x = build (MODIFY_EXPR, ((x)->common.type), x, get_chain_decl (root));
      append_to_statement_list (x, &stmt_list);
    }
  if (root->any_tramp_created)
    {
      struct nesting_info *i;
      for (i = root->inner; i ; i = i->next)
 {
   tree arg, x, field;
   field = lookup_tramp_for_decl (root, i->context, NO_INSERT);
   if (!field)
     continue;
   if (((i->context)->decl.regdecl_flag))
     x = global_trees[TI_NULL_POINTER];
   else
     x = build_addr (root->frame_decl);
   arg = tree_cons_stat (((void *)0),x,((void *)0) );
   x = build_addr (i->context);
   arg = tree_cons_stat (((void *)0),x,arg );
   x = build (COMPONENT_REF, ((field)->common.type),
       root->frame_decl, field, (tree) ((void *)0));
   x = build_addr (x);
   arg = tree_cons_stat (((void *)0),x,arg );
   x = implicit_built_in_decls[BUILT_IN_INIT_TRAMPOLINE];
   x = build_function_call_expr (x, arg);
   append_to_statement_list (x, &stmt_list);
 }
    }
  if (stmt_list)
    {
      annotate_all_with_locus (&stmt_list,
          ((context)->decl.locus));
      append_to_statement_list (((((((context)->decl.saved_tree)))->exp.operands[1])),
    &stmt_list);
      ((((((context)->decl.saved_tree)))->exp.operands[1])) = stmt_list;
    }
  sf = ((root->context)->decl.u2.f);
  sf->static_chain_decl = root->chain_decl;
  if (root->nl_goto_field)
    {
      sf->nonlocal_goto_save_area
 = get_frame_field (root, context, root->nl_goto_field, ((void *)0));
      sf->has_nonlocal_label = 1;
    }
  if (root->new_local_var_chain)
    declare_tmp_vars (root->new_local_var_chain,
        ((root->context)->decl.saved_tree));
  dump_function (TDI_nested, root->context);
}
static void
finalize_nesting_tree (struct nesting_info *root)
{
  do
    {
      if (root->inner)
 finalize_nesting_tree (root->inner);
      finalize_nesting_tree_1 (root);
      root = root->next;
    }
  while (root);
}
static void
free_nesting_tree (struct nesting_info *root)
{
  struct nesting_info *next;
  do
    {
      if (root->inner)
 free_nesting_tree (root->inner);
      htab_delete (root->var_map1);
      next = root->next;
      free (root);
      root = next;
    }
  while (root);
}
void
lower_nested_functions (tree fndecl)
{
  struct nesting_info *root;
  struct cgraph_node *cgn;
  cgn = cgraph_node (fndecl);
  if (!cgn->nested)
    return;
  root = create_nesting_tree (cgn);
  walk_all_functions (convert_nonlocal_reference, root);
  walk_all_functions (convert_local_reference, root);
  walk_all_functions (convert_nl_goto_reference, root);
  walk_all_functions (convert_nl_goto_receiver, root);
  convert_all_function_calls (root);
  finalize_nesting_tree (root);
  free_nesting_tree (root);
}
const struct ggc_root_tab gt_ggc_r_gt_tree_nested_h[] = {
  {
    &trampoline_type,
    1,
    sizeof (trampoline_type),
    &gt_ggc_mx_lang_tree_node,
    &gt_pch_nx_lang_tree_node
  },
  { ((void *)0), 0, 0, ((void *)0), ((void *)0) }
};
struct dse_global_data
{
  bitmap stores;
};
struct dse_block_local_data
{
  bitmap stores;
};
static unsigned char gate_dse (void);
static void tree_ssa_dse (void);
static void dse_initialize_block_local_data (struct dom_walk_data *,
          basic_block,
          unsigned char);
static void dse_optimize_stmt (struct dom_walk_data *,
          basic_block,
          block_stmt_iterator);
static void dse_record_phis (struct dom_walk_data *, basic_block);
static void dse_finalize_block (struct dom_walk_data *, basic_block);
static void fix_phi_uses (tree, tree);
static void fix_stmt_v_may_defs (tree, tree);
static void record_voperand_set (bitmap, bitmap *, unsigned int);
static unsigned char
need_imm_uses_for_dse (tree var)
{
  return !is_gimple_reg (var);
}
static void
fix_phi_uses (tree phi, tree stmt)
{
  stmt_ann_t ann = stmt_ann (stmt);
  v_may_def_optype v_may_defs;
  unsigned int i;
  int j;
  get_stmt_operands (stmt);
  v_may_defs = get_v_may_def_ops (ann);
  for (i = 0; i < ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0); i++)
    {
      tree v_may_def = (get_def_from_ptr (get_v_may_def_result_ptr (((v_may_defs)), ((i)))));
      for (j = 0; j < (phi)->phi.num_args; j++)
 if (v_may_def == get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((j)))))
   ((*((get_phi_arg_def_ptr (((phi)), ((j)))).use)) = (((get_use_from_ptr (get_v_may_def_op_ptr (((v_may_defs)), ((i))))))));
    }
}
static void
fix_stmt_v_may_defs (tree stmt1, tree stmt2)
{
  stmt_ann_t ann1 = stmt_ann (stmt1);
  stmt_ann_t ann2 = stmt_ann (stmt2);
  v_may_def_optype v_may_defs1;
  v_may_def_optype v_may_defs2;
  unsigned int i, j;
  get_stmt_operands (stmt1);
  get_stmt_operands (stmt2);
  v_may_defs1 = get_v_may_def_ops (ann1);
  v_may_defs2 = get_v_may_def_ops (ann2);
  for (i = 0; i < ((v_may_defs1) ? (v_may_defs1)->num_v_may_defs : 0); i++)
    {
      tree v_may_def1 = (get_use_from_ptr (get_v_may_def_op_ptr (((v_may_defs1)), ((i)))));
      for (j = 0; j < ((v_may_defs2) ? (v_may_defs2)->num_v_may_defs : 0); j++)
 {
   if (v_may_def1 == (get_def_from_ptr (get_v_may_def_result_ptr (((v_may_defs2)), ((j))))))
     {
       (((*((get_v_may_def_op_ptr (((v_may_defs1)), ((i)))).use)) = (((get_use_from_ptr (get_v_may_def_op_ptr (((v_may_defs2)), ((j)))))))));
       break;
     }
 }
    }
}
static void
record_voperand_set (bitmap global, bitmap *local, unsigned int uid)
{
  if (*local == ((void *)0))
    *local = bitmap_initialize (((void *)0), 0);
  bitmap_set_bit (*local, uid);
  bitmap_set_bit (global, uid);
}
static void
dse_initialize_block_local_data (struct dom_walk_data *walk_data,
     basic_block bb ,
     unsigned char recycled)
{
  struct dse_block_local_data *bd
    = ((walk_data->block_data_stack)->data.generic[(walk_data->block_data_stack)->elements_used - 1]);
  if (recycled)
    {
      if (bd->stores)
 bitmap_clear (bd->stores);
    }
}
static void
dse_optimize_stmt (struct dom_walk_data *walk_data,
     basic_block bb ,
     block_stmt_iterator bsi)
{
  struct dse_block_local_data *bd
    = ((walk_data->block_data_stack)->data.generic[(walk_data->block_data_stack)->elements_used - 1]);
  struct dse_global_data *dse_gd = walk_data->global_data;
  tree stmt = bsi_stmt (bsi);
  stmt_ann_t ann = stmt_ann (stmt);
  v_may_def_optype v_may_defs;
  get_stmt_operands (stmt);
  v_may_defs = get_v_may_def_ops (ann);
  if (((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0) == 0)
    return;
  if (((enum tree_code) (stmt)->common.code) == MODIFY_EXPR
      && ((enum tree_code) (((stmt)->exp.operands[1]))->common.code) != CALL_EXPR)
    {
      dataflow_t df = get_immediate_uses (stmt);
      unsigned int num_uses = num_immediate_uses (df);
      tree use;
      tree skipped_phi;
      if (num_uses == 0)
 {
   record_voperand_set (dse_gd->stores, &bd->stores, ann->uid);
   return;
 }
      use = immediate_use (df, 0);
      skipped_phi = ((void *)0);
      while (num_uses == 1
      && ((enum tree_code) (use)->common.code) == PHI_NODE
      && bitmap_bit_p (dse_gd->stores, stmt_ann (use)->uid))
 {
   if (!skipped_phi)
     skipped_phi = use;
   df = get_immediate_uses (use);
   num_uses = num_immediate_uses (df);
   use = immediate_use (df, 0);
 }
      if (num_uses == 1
   && bitmap_bit_p (dse_gd->stores, stmt_ann (use)->uid)
   && operand_equal_p (((stmt)->exp.operands[0]),
         ((use)->exp.operands[0]), 0))
 {
   if (skipped_phi)
     fix_phi_uses (skipped_phi, stmt);
   else
     fix_stmt_v_may_defs (use, stmt);
   if (dump_file && (dump_flags & (1 << 3)))
            {
              fprintf (dump_file, "  Deleted dead store '");
              print_generic_expr (dump_file, bsi_stmt (bsi), dump_flags);
              fprintf (dump_file, "'\n");
            }
   redirect_immediate_uses (stmt, skipped_phi ? skipped_phi : use);
   bsi_remove (&bsi);
 }
      record_voperand_set (dse_gd->stores, &bd->stores, ann->uid);
    }
}
static void
dse_record_phis (struct dom_walk_data *walk_data, basic_block bb)
{
  struct dse_block_local_data *bd
    = ((walk_data->block_data_stack)->data.generic[(walk_data->block_data_stack)->elements_used - 1]);
  struct dse_global_data *dse_gd = walk_data->global_data;
  tree phi;
  for (phi = phi_nodes (bb); phi; phi = (((phi))->common.chain))
    if (need_imm_uses_for_dse (get_def_from_ptr (get_phi_result_ptr (phi))))
      record_voperand_set (dse_gd->stores,
      &bd->stores,
      get_stmt_ann (phi)->uid);
}
static void
dse_finalize_block (struct dom_walk_data *walk_data,
      basic_block bb )
{
  struct dse_block_local_data *bd
    = ((walk_data->block_data_stack)->data.generic[(walk_data->block_data_stack)->elements_used - 1]);
  struct dse_global_data *dse_gd = walk_data->global_data;
  bitmap stores = dse_gd->stores;
  unsigned int i;
  if (bd->stores)
    do { bitmap_element *ptr_ = (bd->stores)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (i) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); bitmap_clear_bit (stores, i);; if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0);
}
static void
tree_ssa_dse (void)
{
  struct dom_walk_data walk_data;
  struct dse_global_data dse_gd;
  unsigned int uid = 0;
  basic_block bb;
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      block_stmt_iterator bsi;
      tree phi;
      for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))
 stmt_ann (bsi_stmt (bsi))->uid = uid++;
      for (phi = phi_nodes (bb); phi; phi = (((phi))->common.chain))
 stmt_ann (phi)->uid = uid++;
    }
  calculate_dominance_info (CDI_POST_DOMINATORS);
  compute_immediate_uses (1 << 1, need_imm_uses_for_dse);
  walk_data.walk_stmts_backward = 1;
  walk_data.dom_direction = CDI_POST_DOMINATORS;
  walk_data.initialize_block_local_data = dse_initialize_block_local_data;
  walk_data.before_dom_children_before_stmts = ((void *)0);
  walk_data.before_dom_children_walk_stmts = dse_optimize_stmt;
  walk_data.before_dom_children_after_stmts = dse_record_phis;
  walk_data.after_dom_children_before_stmts = ((void *)0);
  walk_data.after_dom_children_walk_stmts = ((void *)0);
  walk_data.after_dom_children_after_stmts = dse_finalize_block;
  walk_data.block_local_data_size = sizeof (struct dse_block_local_data);
  dse_gd.stores = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
  walk_data.global_data = &dse_gd;
  init_walk_dominator_tree (&walk_data);
  walk_dominator_tree (&walk_data, EXIT_BLOCK_PTR);
  fini_walk_dominator_tree (&walk_data);
  do { if (dse_gd.stores) { bitmap_clear (dse_gd.stores); free (dse_gd.stores); (dse_gd.stores) = 0; } } while (0);
  free_df ();
  free_dominance_info (CDI_POST_DOMINATORS);
}
static unsigned char
gate_dse (void)
{
  return flag_tree_dse != 0;
}
struct tree_opt_pass pass_dse = {
  "dse",
  gate_dse,
  tree_ssa_dse,
  ((void *)0),
  ((void *)0),
  0,
  TV_TREE_DSE,
  (1 << 3) | (1 << 6),
  0,
  0,
  0,
  (1 << 0) | (1 << 2)
  | (1 << 3)
};
static htab_t avail_exprs;
struct expr_hash_elt
{
  tree lhs;
  tree rhs;
  stmt_ann_t ann;
  hashval_t hash;
};
static varray_type const_and_copies;
static bitmap nonzero_vars;
static unsigned char cfg_altered;
static bitmap need_eh_cleanup;
struct opt_stats_d
{
  long num_stmts;
  long num_exprs_considered;
  long num_re;
};
struct vrp_element
{
  tree low;
  tree high;
  tree cond;
  basic_block bb;
};
static struct opt_stats_d opt_stats;
static varray_type redirection_edges;
static varray_type vrp_data;
struct dom_walk_block_data
{
  varray_type avail_exprs;
  varray_type const_and_copies;
  varray_type nonzero_vars;
  varray_type stmts_to_rescan;
  varray_type vrp_variables;
  varray_type block_defs;
};
struct eq_expr_value
{
  tree src;
  tree dst;
};
static void optimize_stmt (struct dom_walk_data *,
      basic_block bb,
      block_stmt_iterator);
static tree get_value_for (tree, varray_type table);
static void set_value_for (tree, tree, varray_type table);
static tree lookup_avail_expr (tree, varray_type *, unsigned char);
static struct eq_expr_value get_eq_expr_value (tree, int, varray_type *,
            basic_block, varray_type *);
static hashval_t avail_expr_hash (const void *);
static hashval_t real_avail_expr_hash (const void *);
static int avail_expr_eq (const void *, const void *);
static void htab_statistics2 (FILE *, htab_t);
static void record_cond (tree, tree, varray_type *);
static void record_dominating_conditions (tree, varray_type *);
static void record_const_or_copy (tree, tree, varray_type *);
static void record_equality (tree, tree, varray_type *);
static tree update_rhs_and_lookup_avail_expr (tree, tree, varray_type *,
           stmt_ann_t, unsigned char);
static tree simplify_rhs_and_lookup_avail_expr (struct dom_walk_data *,
      tree, stmt_ann_t, int);
static tree simplify_cond_and_lookup_avail_expr (tree, varray_type *,
       stmt_ann_t, int);
static tree simplify_switch_and_lookup_avail_expr (tree, varray_type *,
         stmt_ann_t, int);
static tree find_equivalent_equality_comparison (tree);
static void record_range (tree, basic_block, varray_type *);
static unsigned char extract_range_from_cond (tree, tree *, tree *, int *);
static void record_equivalences_from_phis (struct dom_walk_data *, basic_block);
static void record_equivalences_from_incoming_edge (struct dom_walk_data *,
          basic_block);
static unsigned char eliminate_redundant_computations (struct dom_walk_data *,
           tree, stmt_ann_t);
static void record_equivalences_from_stmt (tree, varray_type *, varray_type *,
        int, stmt_ann_t);
static void thread_across_edge (struct dom_walk_data *, edge);
static void dom_opt_finalize_block (struct dom_walk_data *, basic_block);
static void dom_opt_initialize_block_local_data (struct dom_walk_data *,
       basic_block, unsigned char);
static void dom_opt_initialize_block (struct dom_walk_data *, basic_block);
static void cprop_into_phis (struct dom_walk_data *, basic_block);
static void remove_local_expressions_from_table (varray_type locals,
       unsigned limit,
       htab_t table);
static void restore_vars_to_original_value (varray_type locals,
         unsigned limit,
         varray_type table);
static void restore_currdefs_to_original_value (varray_type locals,
      unsigned limit);
static void register_definitions_for_stmt (stmt_ann_t, varray_type *);
static void redirect_edges_and_update_ssa_graph (varray_type);
static tree
local_fold (tree t)
{
  t = fold (t);
  while (tree_ssa_useless_type_conversion (t)) t = ((t)->exp.operands[0]);
  return t;
}
static tree
get_value_for (tree var, varray_type table)
{
  return ((table)->data.tree1[(var)->ssa_name.version]);
}
static void
set_value_for (tree var, tree value1, varray_type table)
{
  ((table)->data.tree1[(var)->ssa_name.version]) = value1;
}
static void
redirect_edges_and_update_ssa_graph (varray_type redirection_edges)
{
  basic_block tgt, bb;
  tree phi;
  unsigned int i;
  size_t old_num_referenced_vars = ((referenced_vars)->elements_used);
  bitmap virtuals_to_rename = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
  for (i = 0; i < ((redirection_edges)->elements_used); i += 2)
    {
      block_stmt_iterator bsi;
      edge e;
      basic_block tgt;
      tree phi;
      e = ((redirection_edges)->data.e[i]);
      tgt = ((redirection_edges)->data.e[i + 1])->dest;
      for (phi = phi_nodes (e->dest); phi; phi = (((phi))->common.chain))
 {
   tree result = (get_def_from_ptr (get_phi_result_ptr (phi)))->ssa_name.var;
   if (is_gimple_reg (get_def_from_ptr (get_phi_result_ptr (phi))))
     bitmap_set_bit (vars_to_rename, var_ann (result)->uid);
   else
     bitmap_set_bit (virtuals_to_rename, var_ann (result)->uid);
        }
      for (bsi = bsi_start (e->dest); ! bsi_end_p (bsi); bsi_next (&bsi))
 {
   unsigned int j;
   def_optype defs;
   v_may_def_optype v_may_defs;
   v_must_def_optype v_must_defs;
   tree stmt = bsi_stmt (bsi);
   stmt_ann_t ann = stmt_ann (stmt);
   if (((enum tree_code) (stmt)->common.code) == COND_EXPR)
     break;
   get_stmt_operands (stmt);
   defs = get_def_ops (ann);
   for (j = 0; j < ((defs) ? (defs)->num_defs : 0); j++)
     {
       tree op = ((get_def_from_ptr (get_def_op_ptr (((defs)), ((j))))))->ssa_name.var;
       bitmap_set_bit (vars_to_rename, var_ann (op)->uid);
     }
   v_may_defs = get_v_may_def_ops (stmt_ann(stmt));
   for (j = 0; j < ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0); j++)
     {
       tree op = (get_def_from_ptr (get_v_may_def_result_ptr (((v_may_defs)), ((j)))));
       bitmap_set_bit (vars_to_rename, var_ann (op)->uid);
     }
   v_must_defs = get_v_must_def_ops (stmt_ann (stmt));
   for (j = 0; j < ((v_must_defs) ? (v_must_defs)->num_v_must_defs : 0); j++)
     {
       tree op = (get_def_from_ptr (get_v_must_def_op_ptr (((v_must_defs)), ((j)))));
       bitmap_set_bit (vars_to_rename, var_ann (op)->uid);
     }
 }
      for (phi = phi_nodes (tgt); phi; phi = (((phi))->common.chain))
 {
   tree result = (get_def_from_ptr (get_phi_result_ptr (phi)))->ssa_name.var;
   if (is_gimple_reg (get_def_from_ptr (get_phi_result_ptr (phi))))
     bitmap_set_bit (vars_to_rename, var_ann (result)->uid);
   else
     bitmap_set_bit (virtuals_to_rename, var_ann (result)->uid);
        }
    }
  if (bitmap_first_set_bit (vars_to_rename) >= 0)
    rewrite_vars_out_of_ssa (vars_to_rename);
  for (i = 0; i < ((redirection_edges)->elements_used); i += 2)
    {
      edge e = ((redirection_edges)->data.e[i]);
      tree last = last_stmt (e->dest);
      if (last
   && ((enum tree_code) (last)->common.code) != COND_EXPR
   && ((enum tree_code) (last)->common.code) != SWITCH_EXPR)
 {
   e = e->dest->succ;
   ((redirection_edges)->data.e[i]) = e;
 }
    }
  if (((referenced_vars)->elements_used) != old_num_referenced_vars)
    {
      for (i = 0; i < ((redirection_edges)->elements_used); i += 2)
 {
   block_stmt_iterator bsi;
   edge e;
   e = ((redirection_edges)->data.e[i]);
   for (bsi = bsi_start (e->dest); ! bsi_end_p (bsi); bsi_next (&bsi))
     {
       tree stmt = bsi_stmt (bsi);
       if ((((enum tree_code) (stmt)->common.code) == NOP_EXPR && (((enum tree_code) (((stmt)->common.type))->common.code) == VOID_TYPE) && integer_zerop (((stmt)->exp.operands[0])))
    || ((enum tree_code) (stmt)->common.code) == LABEL_EXPR)
  continue;
       if (((enum tree_code) (stmt)->common.code) == COND_EXPR)
  break;
       ((redirection_edges)->data.e[i]) = ((void *)0);
       ((redirection_edges)->data.e[i + 1]) = ((void *)0);
       break;
     }
 }
    }
  for (i = 0; i < ((redirection_edges)->elements_used); i += 2)
    {
      basic_block src;
      edge e;
      e = ((redirection_edges)->data.e[i]);
      if (!e)
 continue;
      tgt = ((redirection_edges)->data.e[i + 1])->dest;
      if (dump_file && (dump_flags & (1 << 3)))
 fprintf (dump_file, "  Threaded jump %d --> %d to %d\n",
   e->src->index, e->dest->index, tgt->index);
      src = e->src;
      e = redirect_edge_and_branch (e, tgt);
      ((e)->insns.t) = (tree) ((void *)0);
      free_dominance_info (CDI_DOMINATORS);
      if ((dump_file && (dump_flags & (1 << 3)))
   && e->src != src)
 fprintf (dump_file, "    basic block %d created\n",
   e->src->index);
      cfg_altered = 1;
    }
  varray_clear(redirection_edges);
  for (i = old_num_referenced_vars; i < ((referenced_vars)->elements_used); i++)
    {
      bitmap_set_bit (vars_to_rename, i);
      var_ann (((referenced_vars)->data.tree1[i]))->out_of_ssa_tag = 0;
    }
  bitmap_operation (vars_to_rename, vars_to_rename, virtuals_to_rename, BITMAP_IOR);
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      tree next;
      for (phi = phi_nodes (bb); phi; phi = next)
 {
   tree result = get_def_from_ptr (get_phi_result_ptr (phi));
   next = (((phi))->common.chain);
   if (bitmap_bit_p (virtuals_to_rename,
       var_ann ((result)->ssa_name.var)->uid))
     remove_phi_node (phi, ((void *)0), bb);
 }
    }
  do { if (virtuals_to_rename) { bitmap_clear (virtuals_to_rename); free (virtuals_to_rename); (virtuals_to_rename) = 0; } } while (0);
}
static void
tree_ssa_dominator_optimize (void)
{
  basic_block bb;
  struct dom_walk_data walk_data;
  unsigned int i;
  for (i = 0; i < ((referenced_vars)->elements_used); i++)
    var_ann (((referenced_vars)->data.tree1[i]))->current_def = ((void *)0);
  mark_dfs_back_edges ();
  avail_exprs = htab_create (1024, real_avail_expr_hash, avail_expr_eq, free);
  const_and_copies = varray_init (((ssa_names)->elements_used), VARRAY_DATA_TREE, "const_and_copies");
  nonzero_vars = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
  redirection_edges = varray_init (20, VARRAY_DATA_EDGE, "redirection_edges");
  vrp_data = varray_init (((ssa_names)->elements_used), VARRAY_DATA_GENERIC, "vrp_data");
  need_eh_cleanup = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
  walk_data.walk_stmts_backward = 0;
  walk_data.dom_direction = CDI_DOMINATORS;
  walk_data.initialize_block_local_data = dom_opt_initialize_block_local_data;
  walk_data.before_dom_children_before_stmts = dom_opt_initialize_block;
  walk_data.before_dom_children_walk_stmts = optimize_stmt;
  walk_data.before_dom_children_after_stmts = cprop_into_phis;
  walk_data.after_dom_children_before_stmts = ((void *)0);
  walk_data.after_dom_children_walk_stmts = ((void *)0);
  walk_data.after_dom_children_after_stmts = dom_opt_finalize_block;
  walk_data.global_data = ((void *)0);
  walk_data.block_local_data_size = sizeof (struct dom_walk_block_data);
  init_walk_dominator_tree (&walk_data);
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    bb_ann (bb)->forwardable = 1;
  calculate_dominance_info (CDI_DOMINATORS);
  do
    {
      cfg_altered = 0;
      walk_dominator_tree (&walk_data, ENTRY_BLOCK_PTR);
      if (((redirection_edges)->elements_used) > 0)
 redirect_edges_and_update_ssa_graph (redirection_edges);
      if (bitmap_first_set_bit (need_eh_cleanup) >= 0)
 {
   cfg_altered = tree_purge_all_dead_eh_edges (need_eh_cleanup);
   bitmap_clear (need_eh_cleanup);
 }
      cfg_altered |= delete_unreachable_blocks ();
      if (cfg_altered)
 {
          free_dominance_info (CDI_DOMINATORS);
   cleanup_tree_cfg ();
   calculate_dominance_info (CDI_DOMINATORS);
 }
      if (cfg_altered
   && bitmap_first_set_bit (vars_to_rename) >= 0)
 {
   rewrite_into_ssa (0);
   bitmap_clear (vars_to_rename);
   ((const_and_copies) = varray_grow (const_and_copies, ((ssa_names)->elements_used)));
   ((vrp_data) = varray_grow (vrp_data, ((ssa_names)->elements_used)));
 }
      bitmap_clear (nonzero_vars);
      htab_empty (avail_exprs);
      varray_clear(const_and_copies);
      varray_clear(vrp_data);
      for (i = 0; i < ((referenced_vars)->elements_used); i++)
 var_ann (((referenced_vars)->data.tree1[i]))->current_def = ((void *)0);
    }
  while (cfg_altered);
  cleanup_tree_cfg ();
  if (dump_file && (dump_flags & (1 << 4)))
    dump_dominator_optimization_stats (dump_file);
  htab_delete (avail_exprs);
  fini_walk_dominator_tree (&walk_data);
  do { if (nonzero_vars) { bitmap_clear (nonzero_vars); free (nonzero_vars); (nonzero_vars) = 0; } } while (0);
  do { if (need_eh_cleanup) { bitmap_clear (need_eh_cleanup); free (need_eh_cleanup); (need_eh_cleanup) = 0; } } while (0);
}
static unsigned char
gate_dominator (void)
{
  return flag_tree_dom != 0;
}
struct tree_opt_pass pass_dominator =
{
  "dom",
  gate_dominator,
  tree_ssa_dominator_optimize,
  ((void *)0),
  ((void *)0),
  0,
  TV_TREE_SSA_DOMINATOR_OPTS,
  (1 << 3) | (1 << 6),
  0,
  0,
  0,
  (1 << 0) | (1 << 1)
    | (1 << 3)
};
static void
thread_across_edge (struct dom_walk_data *walk_data, edge e)
{
  struct dom_walk_block_data *bd
    = ((walk_data->block_data_stack)->data.generic[(walk_data->block_data_stack)->elements_used - 1]);
  block_stmt_iterator bsi;
  tree stmt = ((void *)0);
  tree phi;
  for (phi = phi_nodes (e->dest); phi; phi = (((phi))->common.chain))
    {
      tree src = get_use_from_ptr (get_phi_arg_def_ptr ((((phi))), ((phi_arg_from_edge ((phi),(e))))));
      tree dst = get_def_from_ptr (get_phi_result_ptr (phi));
      record_const_or_copy (dst, src, &bd->const_and_copies);
      register_new_def (dst, &bd->block_defs);
    }
  for (bsi = bsi_start (e->dest); ! bsi_end_p (bsi); bsi_next (&bsi))
    {
      tree lhs, cached_lhs;
      stmt = bsi_stmt (bsi);
      if ((((enum tree_code) (stmt)->common.code) == NOP_EXPR && (((enum tree_code) (((stmt)->common.type))->common.code) == VOID_TYPE) && integer_zerop (((stmt)->exp.operands[0]))) || ((enum tree_code) (stmt)->common.code) == LABEL_EXPR)
 continue;
      if (((enum tree_code) (stmt)->common.code) != MODIFY_EXPR
   || ((enum tree_code) (((stmt)->exp.operands[0]))->common.code) != SSA_NAME)
 break;
      if (((enum tree_code) (((stmt)->exp.operands[1]))->common.code) == SSA_NAME)
 cached_lhs = ((stmt)->exp.operands[1]);
      else
 cached_lhs = lookup_avail_expr (stmt, ((void *)0), 0);
      lhs = ((stmt)->exp.operands[0]);
      if (lhs == cached_lhs)
 break;
      if (!cached_lhs)
 {
   stmt_ann_t ann = stmt_ann (stmt);
   use_optype uses = get_use_ops (ann);
   vuse_optype vuses = get_vuse_ops (ann);
   tree *uses_copy = xcalloc (((uses) ? (uses)->num_uses : 0), sizeof (tree));
   tree *vuses_copy = xcalloc (((vuses) ? (vuses)->num_vuses : 0), sizeof (tree));
   unsigned int i;
   for (i = 0; i < ((uses) ? (uses)->num_uses : 0); i++)
     {
       tree tmp = ((void *)0);
       uses_copy[i] = (get_use_from_ptr (get_use_op_ptr (((uses)), ((i)))));
       if (((enum tree_code) ((get_use_from_ptr (get_use_op_ptr (((uses)), ((i))))))->common.code) == SSA_NAME)
  tmp = get_value_for ((get_use_from_ptr (get_use_op_ptr (((uses)), ((i))))), const_and_copies);
       if (tmp)
  (((*((get_use_op_ptr (((uses)), ((i)))).use)) = ((tmp))));
     }
   for (i = 0; i < ((vuses) ? (vuses)->num_vuses : 0); i++)
     {
       tree tmp = ((void *)0);
       vuses_copy[i] = (get_use_from_ptr (get_vuse_op_ptr (((vuses)), ((i)))));
       if (((enum tree_code) ((get_use_from_ptr (get_vuse_op_ptr (((vuses)), ((i))))))->common.code) == SSA_NAME)
  tmp = get_value_for ((get_use_from_ptr (get_vuse_op_ptr (((vuses)), ((i))))), const_and_copies);
       if (tmp)
  (((*((get_vuse_op_ptr (((vuses)), ((i)))).use)) = ((tmp))));
     }
   cached_lhs = lookup_avail_expr (stmt, ((void *)0), 0);
   for (i = 0; i < ((uses) ? (uses)->num_uses : 0); i++)
     (((*((get_use_op_ptr (((uses)), ((i)))).use)) = ((uses_copy[i]))));
   for (i = 0; i < ((vuses) ? (vuses)->num_vuses : 0); i++)
     (((*((get_vuse_op_ptr (((vuses)), ((i)))).use)) = ((vuses_copy[i]))));
   free (uses_copy);
   free (vuses_copy);
   if (! cached_lhs)
     break;
 }
      if (((enum tree_code) (cached_lhs)->common.code) != SSA_NAME)
 break;
      if ((cached_lhs)->ssa_name.var != (lhs)->ssa_name.var)
 break;
      if (var_ann ((lhs)->ssa_name.var)->current_def != cached_lhs)
 break;
      record_const_or_copy (lhs, cached_lhs, &bd->const_and_copies);
      register_new_def (lhs, &bd->block_defs);
    }
  if (stmt
      && (((enum tree_code) (stmt)->common.code) == COND_EXPR
   || ((enum tree_code) (stmt)->common.code) == SWITCH_EXPR))
    {
      tree cond, cached_lhs;
      edge e1;
      if (!e->flags & 32)
 {
   for (e1 = e->dest->pred; e; e = e->pred_next)
     if (e1->flags & 32)
       break;
   if (e1)
     return;
 }
      if (((enum tree_code) (stmt)->common.code) == COND_EXPR)
 cond = ((((stmt))->exp.operands[0]));
      else
 cond = (((stmt))->exp.operands[0]);
      if (tree_code_type[(int) (((enum tree_code) (cond)->common.code))] == '<')
 {
   tree dummy_cond, op0, op1;
   enum tree_code cond_code;
   op0 = ((cond)->exp.operands[0]);
   op1 = ((cond)->exp.operands[1]);
   cond_code = ((enum tree_code) (cond)->common.code);
   if (((enum tree_code) (op0)->common.code) == SSA_NAME)
     {
       tree tmp = get_value_for (op0, const_and_copies);
       if (tmp)
  op0 = tmp;
     }
   if (((enum tree_code) (op1)->common.code) == SSA_NAME)
     {
       tree tmp = get_value_for (op1, const_and_copies);
       if (tmp)
  op1 = tmp;
     }
   dummy_cond = walk_data->global_data;
   if (! dummy_cond)
     {
       dummy_cond = build (cond_code, global_trees[TI_BOOLEAN_TYPE], op0, op1);
       dummy_cond = build (COND_EXPR, global_trees[TI_VOID_TYPE],
      dummy_cond, ((void *)0), ((void *)0));
       walk_data->global_data = dummy_cond;
     }
   else
     {
       ((((dummy_cond)->exp.operands[0]))->common.code = (cond_code));
       ((((dummy_cond)->exp.operands[0]))->exp.operands[0]) = op0;
       ((((dummy_cond)->exp.operands[0]))->exp.operands[1]) = op1;
     }
   cached_lhs = local_fold (((((dummy_cond))->exp.operands[0])));
   if (! is_gimple_min_invariant (cached_lhs))
     cached_lhs = lookup_avail_expr (dummy_cond, ((void *)0), 0);
    if (!cached_lhs || ! is_gimple_min_invariant (cached_lhs))
     {
       stmt_ann_t ann = get_stmt_ann (dummy_cond);
       cached_lhs = simplify_cond_and_lookup_avail_expr (dummy_cond,
        ((void *)0),
        ann,
        0);
     }
 }
      else if (((enum tree_code) (cond)->common.code) == SSA_NAME)
 {
   cached_lhs = cond;
   cached_lhs = get_value_for (cached_lhs, const_and_copies);
   if (cached_lhs && ! is_gimple_min_invariant (cached_lhs))
     cached_lhs = 0;
 }
      else
 cached_lhs = lookup_avail_expr (stmt, ((void *)0), 0);
      if (cached_lhs)
 {
   edge taken_edge = find_taken_edge (e->dest, cached_lhs);
   basic_block dest = (taken_edge ? taken_edge->dest : ((void *)0));
   if (dest == e->dest)
     return;
   if (dest)
     {
       int saved_forwardable = bb_ann (e->src)->forwardable;
       edge tmp_edge;
       bb_ann (e->src)->forwardable = 0;
       tmp_edge = tree_block_forwards_to (dest);
       taken_edge = (tmp_edge ? tmp_edge : taken_edge);
       bb_ann (e->src)->forwardable = saved_forwardable;
       do { if ((redirection_edges)->elements_used >= (redirection_edges)->num_elements) (((redirection_edges)) = varray_grow ((redirection_edges), 2 * (redirection_edges)->num_elements)); (redirection_edges)->data.e[(redirection_edges)->elements_used++] = (e); } while (0);
       do { if ((redirection_edges)->elements_used >= (redirection_edges)->num_elements) (((redirection_edges)) = varray_grow ((redirection_edges), 2 * (redirection_edges)->num_elements)); (redirection_edges)->data.e[(redirection_edges)->elements_used++] = (taken_edge); } while (0);
     }
 }
    }
}
static void
dom_opt_initialize_block_local_data (struct dom_walk_data *walk_data ,
         basic_block bb ,
         unsigned char recycled )
{
}
static void
dom_opt_initialize_block (struct dom_walk_data *walk_data, basic_block bb)
{
  if (dump_file && (dump_flags & (1 << 3)))
    fprintf (dump_file, "\n\nOptimizing block #%d\n\n", bb->index);
  record_equivalences_from_incoming_edge (walk_data, bb);
  record_equivalences_from_phis (walk_data, bb);
}
static void
initialize_hash_element (tree expr, tree lhs, struct expr_hash_elt *element)
{
  if (tree_code_type[(int) (((enum tree_code) (expr)->common.code))] == '<'
      || ((enum tree_code) (expr)->common.code) == TRUTH_NOT_EXPR)
    {
      element->ann = ((void *)0);
      element->rhs = expr;
    }
  else if (((enum tree_code) (expr)->common.code) == COND_EXPR)
    {
      element->ann = stmt_ann (expr);
      element->rhs = ((((expr))->exp.operands[0]));
    }
  else if (((enum tree_code) (expr)->common.code) == SWITCH_EXPR)
    {
      element->ann = stmt_ann (expr);
      element->rhs = (((expr))->exp.operands[0]);
    }
  else if (((enum tree_code) (expr)->common.code) == RETURN_EXPR && ((expr)->exp.operands[0]))
    {
      element->ann = stmt_ann (expr);
      element->rhs = ((((expr)->exp.operands[0]))->exp.operands[1]);
    }
  else
    {
      element->ann = stmt_ann (expr);
      element->rhs = ((expr)->exp.operands[1]);
    }
  element->lhs = lhs;
  element->hash = avail_expr_hash (element);
}
static void
remove_local_expressions_from_table (varray_type locals,
         unsigned limit,
         htab_t table)
{
  if (! locals)
    return;
  while (((locals)->elements_used) > limit)
    {
      struct expr_hash_elt element;
      tree expr = ((locals)->data.tree1[(locals)->elements_used - 1]);
      do { ((locals)->elements_used--); } while (0);
      initialize_hash_element (expr, ((void *)0), &element);
      htab_remove_elt_with_hash (table, &element, element.hash);
    }
}
static void
restore_nonzero_vars_to_original_value (varray_type locals,
     unsigned limit,
     bitmap table)
{
  if (!locals)
    return;
  while (((locals)->elements_used) > limit)
    {
      tree name = ((locals)->data.tree1[(locals)->elements_used - 1]);
      do { ((locals)->elements_used--); } while (0);
      bitmap_clear_bit (table, (name)->ssa_name.version);
    }
}
static void
restore_vars_to_original_value (varray_type locals,
    unsigned limit,
    varray_type table)
{
  if (! locals)
    return;
  while (((locals)->elements_used) > limit)
    {
      tree prev_value, dest;
      prev_value = ((locals)->data.tree1[(locals)->elements_used - 1]);
      do { ((locals)->elements_used--); } while (0);
      dest = ((locals)->data.tree1[(locals)->elements_used - 1]);
      do { ((locals)->elements_used--); } while (0);
      set_value_for (dest, prev_value, table);
    }
}
static void
restore_currdefs_to_original_value (varray_type locals, unsigned limit)
{
  if (!locals)
    return;
  while (((locals)->elements_used) > limit)
    {
      tree tmp = ((locals)->data.tree1[(locals)->elements_used - 1]);
      tree saved_def, var;
      do { ((locals)->elements_used--); } while (0);
      if (((enum tree_code) (tmp)->common.code) == SSA_NAME)
 {
   saved_def = tmp;
   var = (saved_def)->ssa_name.var;
 }
      else
 {
   saved_def = ((void *)0);
   var = tmp;
 }
      var_ann (var)->current_def = saved_def;
    }
}
static void
dom_opt_finalize_block (struct dom_walk_data *walk_data, basic_block bb)
{
  struct dom_walk_block_data *bd
    = ((walk_data->block_data_stack)->data.generic[(walk_data->block_data_stack)->elements_used - 1]);
  tree last;
  if (bb->succ
      && ! bb->succ->succ_next
      && (bb->succ->flags & 2) == 0
      && (get_immediate_dominator (CDI_DOMINATORS, bb->succ->dest) != bb
   || phi_nodes (bb->succ->dest)))
    {
      thread_across_edge (walk_data, bb->succ);
    }
  else if ((last = last_stmt (bb))
    && ((enum tree_code) (last)->common.code) == COND_EXPR
    && (tree_code_type[(int) (((enum tree_code) (((((last))->exp.operands[0])))->common.code))] == '<'
        || ((enum tree_code) (((((last))->exp.operands[0])))->common.code) == SSA_NAME)
    && bb->succ
    && (bb->succ->flags & 2) == 0
    && bb->succ->succ_next
    && (bb->succ->succ_next->flags & 2) == 0
    && ! bb->succ->succ_next->succ_next)
    {
      edge true_edge, false_edge;
      tree cond, inverted = ((void *)0);
      enum tree_code cond_code;
      extract_true_false_edges_from_block (bb, &true_edge, &false_edge);
      cond = ((((last))->exp.operands[0]));
      cond_code = ((enum tree_code) (cond)->common.code);
      if (tree_code_type[(int) (cond_code)] == '<')
 inverted = invert_truthvalue (cond);
      if (get_immediate_dominator (CDI_DOMINATORS, true_edge->dest) != bb
   || phi_nodes (true_edge->dest))
 {
   unsigned avail_expr_limit;
   unsigned const_and_copies_limit;
   unsigned currdefs_limit;
   avail_expr_limit
     = bd->avail_exprs ? ((bd->avail_exprs)->elements_used) : 0;
   const_and_copies_limit
     = bd->const_and_copies ? ((bd->const_and_copies)->elements_used)
       : 0;
   currdefs_limit
     = bd->block_defs ? ((bd->block_defs)->elements_used) : 0;
   if (tree_code_type[(int) (cond_code)] == '<')
     {
       record_cond (cond, global_trees[TI_BOOLEAN_TRUE], &bd->avail_exprs);
       record_dominating_conditions (cond, &bd->avail_exprs);
       record_cond (inverted, global_trees[TI_BOOLEAN_FALSE], &bd->avail_exprs);
     }
   else if (cond_code == SSA_NAME)
     record_const_or_copy (cond, global_trees[TI_BOOLEAN_TRUE],
      &bd->const_and_copies);
   thread_across_edge (walk_data, true_edge);
   remove_local_expressions_from_table (bd->avail_exprs,
            avail_expr_limit,
            avail_exprs);
   restore_vars_to_original_value (bd->const_and_copies,
       const_and_copies_limit,
       const_and_copies);
   restore_currdefs_to_original_value (bd->block_defs, currdefs_limit);
 }
      if (get_immediate_dominator (CDI_DOMINATORS, false_edge->dest) != bb
   || phi_nodes (false_edge->dest))
 {
   if (tree_code_type[(int) (cond_code)] == '<')
     {
       record_cond (cond, global_trees[TI_BOOLEAN_FALSE], &bd->avail_exprs);
       record_cond (inverted, global_trees[TI_BOOLEAN_TRUE], &bd->avail_exprs);
       record_dominating_conditions (inverted, &bd->avail_exprs);
     }
   else if (cond_code == SSA_NAME)
     record_const_or_copy (cond, global_trees[TI_BOOLEAN_FALSE],
      &bd->const_and_copies);
   thread_across_edge (walk_data, false_edge);
 }
    }
  remove_local_expressions_from_table (bd->avail_exprs, 0, avail_exprs);
  restore_nonzero_vars_to_original_value (bd->nonzero_vars, 0, nonzero_vars);
  restore_vars_to_original_value (bd->const_and_copies, 0, const_and_copies);
  restore_currdefs_to_original_value (bd->block_defs, 0);
  while (bd->vrp_variables && ((bd->vrp_variables)->elements_used) > 0)
    {
      tree var = ((bd->vrp_variables)->data.tree1[(bd->vrp_variables)->elements_used - 1]);
      varray_type var_vrp_records = ((vrp_data)->data.generic[(var)->ssa_name.version])
                              ;
      while (((var_vrp_records)->elements_used) > 0)
 {
   struct vrp_element *element
     = (struct vrp_element *)((var_vrp_records)->data.generic[(var_vrp_records)->elements_used - 1]);
   if (element->bb != bb)
     break;
   do { ((var_vrp_records)->elements_used--); } while (0);
 }
      do { ((bd->vrp_variables)->elements_used--); } while (0);
    }
  while (bd->stmts_to_rescan && ((bd->stmts_to_rescan)->elements_used) > 0)
    {
      tree stmt = ((bd->stmts_to_rescan)->data.tree1[(bd->stmts_to_rescan)->elements_used - 1]);
      do { ((bd->stmts_to_rescan)->elements_used--); } while (0);
      mark_new_vars_to_rename (stmt, vars_to_rename);
    }
}
static void
record_equivalences_from_phis (struct dom_walk_data *walk_data, basic_block bb)
{
  struct dom_walk_block_data *bd
    = ((walk_data->block_data_stack)->data.generic[(walk_data->block_data_stack)->elements_used - 1]);
  tree phi;
  for (phi = phi_nodes (bb); phi; phi = (((phi))->common.chain))
    {
      tree lhs = get_def_from_ptr (get_phi_result_ptr (phi));
      tree rhs = ((void *)0);
      int i;
      for (i = 0; i < (phi)->phi.num_args; i++)
 {
   tree t = get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((i))));
   if (((enum tree_code) (t)->common.code) == SSA_NAME || is_gimple_min_invariant (t))
     {
       if (operand_equal_p (lhs, t, 0))
  continue;
       if (rhs == ((void *)0))
  rhs = t;
       else if (! operand_equal_p (rhs, t, 0))
  break;
     }
   else
     break;
 }
      if (!rhs)
 rhs = lhs;
      if (i == (phi)->phi.num_args
   && may_propagate_copy (lhs, rhs))
 set_value_for (lhs, rhs, const_and_copies);
      for (i = 0; i < (phi)->phi.num_args; i++)
 {
   if (!((phi)->phi.a[i]).nonzero)
     break;
 }
      if (i == (phi)->phi.num_args)
 bitmap_set_bit (nonzero_vars, (get_def_from_ptr (get_phi_result_ptr (phi)))->ssa_name.version);
      register_new_def (lhs, &bd->block_defs);
    }
}
static void
record_equivalences_from_incoming_edge (struct dom_walk_data *walk_data,
     basic_block bb)
{
  int edge_flags;
  basic_block parent;
  struct eq_expr_value eq_expr_value;
  tree parent_block_last_stmt = ((void *)0);
  struct dom_walk_block_data *bd
    = ((walk_data->block_data_stack)->data.generic[(walk_data->block_data_stack)->elements_used - 1]);
  parent = get_immediate_dominator (CDI_DOMINATORS, bb);
  if (parent)
    {
      parent_block_last_stmt = last_stmt (parent);
      if (parent_block_last_stmt && !is_ctrl_stmt (parent_block_last_stmt))
 parent_block_last_stmt = ((void *)0);
    }
  eq_expr_value.src = ((void *)0);
  eq_expr_value.dst = ((void *)0);
  if (bb->pred
      && ! bb->pred->pred_next
      && parent_block_last_stmt
      && bb_for_stmt (parent_block_last_stmt) == bb->pred->src)
    {
      edge_flags = bb->pred->flags;
    }
  else
    {
      edge_flags = 0;
      parent_block_last_stmt = ((void *)0);
    }
  if (parent_block_last_stmt
      && bb->pred->pred_next == ((void *)0)
      && ((enum tree_code) (parent_block_last_stmt)->common.code) == COND_EXPR
      && (edge_flags & (1024 | 2048)))
    eq_expr_value = get_eq_expr_value (parent_block_last_stmt,
           (edge_flags & 1024) != 0,
           &bd->avail_exprs,
           bb,
           &bd->vrp_variables);
  else if (parent_block_last_stmt
    && bb->pred->pred_next == ((void *)0)
    && bb->pred->src == parent
    && ((enum tree_code) (parent_block_last_stmt)->common.code) == SWITCH_EXPR)
    {
      tree switch_cond = (((parent_block_last_stmt))->exp.operands[0]);
      if (((enum tree_code) (switch_cond)->common.code) == SSA_NAME)
 {
   tree switch_vec = (((parent_block_last_stmt))->exp.operands[2]);
   size_t i, n = ((switch_vec)->vec.length);
   int case_count = 0;
   tree match_case = (tree) ((void *)0);
   for (i = 0; i < n; ++i)
     {
       tree elt = ((switch_vec)->vec.a[i]);
       if (label_to_block ((((elt))->exp.operands[2])) == bb)
  {
    if (++case_count > 1 || (((elt))->exp.operands[1]))
      break;
    match_case = elt;
  }
     }
   if (case_count == 1
       && match_case
       && (((match_case))->exp.operands[0])
       && !(((match_case))->exp.operands[1]))
     {
       eq_expr_value.dst = switch_cond;
       eq_expr_value.src = (((match_case))->exp.operands[0]);
     }
 }
    }
  if (eq_expr_value.src && eq_expr_value.dst)
    record_equality (eq_expr_value.dst, eq_expr_value.src,
       &bd->const_and_copies);
}
void
dump_dominator_optimization_stats (FILE *file)
{
  long n_exprs;
  fprintf (file, "Total number of statements:                   %6ld\n\n",
    opt_stats.num_stmts);
  fprintf (file, "Exprs considered for dominator optimizations: %6ld\n",
           opt_stats.num_exprs_considered);
  n_exprs = opt_stats.num_exprs_considered;
  if (n_exprs == 0)
    n_exprs = 1;
  fprintf (file, "    Redundant expressions eliminated:         %6ld (%.0f%%)\n",
    opt_stats.num_re, ((float)(opt_stats.num_re) * 100.0 / (float)(n_exprs))
                  );
  fprintf (file, "\nHash table statistics:\n");
  fprintf (file, "    avail_exprs: ");
  htab_statistics2 (file, avail_exprs);
}
void
debug_dominator_optimization_stats (void)
{
  dump_dominator_optimization_stats (stderr);
}
static void
htab_statistics2 (FILE *file, htab_t htab)
{
  fprintf (file, "size %ld, %ld elements, %f collision/search ratio\n",
    (long) htab_size (htab),
    (long) htab_elements (htab),
    htab_collisions (htab));
}
static void
record_var_is_nonzero (tree var, varray_type *block_nonzero_vars_p)
{
  int indx = (var)->ssa_name.version;
  if (bitmap_bit_p (nonzero_vars, indx))
    return;
  bitmap_set_bit (nonzero_vars, indx);
  if (! *block_nonzero_vars_p)
    *block_nonzero_vars_p = varray_init (2, VARRAY_DATA_TREE, "block_nonzero_vars");
  do { if ((*block_nonzero_vars_p)->elements_used >= (*block_nonzero_vars_p)->num_elements) (((*block_nonzero_vars_p)) = varray_grow ((*block_nonzero_vars_p), 2 * (*block_nonzero_vars_p)->num_elements)); (*block_nonzero_vars_p)->data.tree1[(*block_nonzero_vars_p)->elements_used++] = (var); } while (0);
}
static void
record_cond (tree cond, tree value1, varray_type *block_avail_exprs_p)
{
  struct expr_hash_elt *element = xmalloc (sizeof (struct expr_hash_elt));
  void **slot;
  initialize_hash_element (cond, value1, element);
  slot = htab_find_slot_with_hash (avail_exprs, (void *)element,
       element->hash, 1);
  if (*slot == ((void *)0))
    {
      *slot = (void *) element;
      if (! *block_avail_exprs_p)
 *block_avail_exprs_p = varray_init (20, VARRAY_DATA_TREE, "block_avail_exprs");
      do { if ((*block_avail_exprs_p)->elements_used >= (*block_avail_exprs_p)->num_elements) (((*block_avail_exprs_p)) = varray_grow ((*block_avail_exprs_p), 2 * (*block_avail_exprs_p)->num_elements)); (*block_avail_exprs_p)->data.tree1[(*block_avail_exprs_p)->elements_used++] = (cond); } while (0);
    }
  else
    free (element);
}
static void
record_dominating_conditions (tree cond, varray_type *block_avail_exprs_p)
{
  switch (((enum tree_code) (cond)->common.code))
    {
    case LT_EXPR:
      record_cond (build2_stat (LE_EXPR,global_trees[TI_BOOLEAN_TYPE],((cond)->exp.operands[0]),((cond)->exp.operands[1]) )
                             ,
     global_trees[TI_BOOLEAN_TRUE],
     block_avail_exprs_p);
      record_cond (build2_stat (ORDERED_EXPR,global_trees[TI_BOOLEAN_TYPE],((cond)->exp.operands[0]),((cond)->exp.operands[1]) )
                             ,
     global_trees[TI_BOOLEAN_TRUE],
     block_avail_exprs_p);
      record_cond (build2_stat (NE_EXPR,global_trees[TI_BOOLEAN_TYPE],((cond)->exp.operands[0]),((cond)->exp.operands[1]) )
                             ,
     global_trees[TI_BOOLEAN_TRUE],
     block_avail_exprs_p);
      record_cond (build2_stat (LTGT_EXPR,global_trees[TI_BOOLEAN_TYPE],((cond)->exp.operands[0]),((cond)->exp.operands[1]) )
                             ,
     global_trees[TI_BOOLEAN_TRUE],
     block_avail_exprs_p);
      break;
    case GT_EXPR:
      record_cond (build2_stat (GE_EXPR,global_trees[TI_BOOLEAN_TYPE],((cond)->exp.operands[0]),((cond)->exp.operands[1]) )
                             ,
     global_trees[TI_BOOLEAN_TRUE],
     block_avail_exprs_p);
      record_cond (build2_stat (ORDERED_EXPR,global_trees[TI_BOOLEAN_TYPE],((cond)->exp.operands[0]),((cond)->exp.operands[1]) )
                             ,
     global_trees[TI_BOOLEAN_TRUE],
     block_avail_exprs_p);
      record_cond (build2_stat (NE_EXPR,global_trees[TI_BOOLEAN_TYPE],((cond)->exp.operands[0]),((cond)->exp.operands[1]) )
                             ,
     global_trees[TI_BOOLEAN_TRUE],
     block_avail_exprs_p);
      record_cond (build2_stat (LTGT_EXPR,global_trees[TI_BOOLEAN_TYPE],((cond)->exp.operands[0]),((cond)->exp.operands[1]) )
                             ,
     global_trees[TI_BOOLEAN_TRUE],
     block_avail_exprs_p);
      break;
    case GE_EXPR:
    case LE_EXPR:
      record_cond (build2_stat (ORDERED_EXPR,global_trees[TI_BOOLEAN_TYPE],((cond)->exp.operands[0]),((cond)->exp.operands[1]) )
                             ,
     global_trees[TI_BOOLEAN_TRUE],
     block_avail_exprs_p);
      break;
    case EQ_EXPR:
      record_cond (build2_stat (ORDERED_EXPR,global_trees[TI_BOOLEAN_TYPE],((cond)->exp.operands[0]),((cond)->exp.operands[1]) )
                             ,
     global_trees[TI_BOOLEAN_TRUE],
     block_avail_exprs_p);
      record_cond (build2_stat (LE_EXPR,global_trees[TI_BOOLEAN_TYPE],((cond)->exp.operands[0]),((cond)->exp.operands[1]) )
                             ,
     global_trees[TI_BOOLEAN_TRUE],
     block_avail_exprs_p);
      record_cond (build2_stat (GE_EXPR,global_trees[TI_BOOLEAN_TYPE],((cond)->exp.operands[0]),((cond)->exp.operands[1]) )
                             ,
     global_trees[TI_BOOLEAN_TRUE],
     block_avail_exprs_p);
      break;
    case UNORDERED_EXPR:
      record_cond (build2_stat (NE_EXPR,global_trees[TI_BOOLEAN_TYPE],((cond)->exp.operands[0]),((cond)->exp.operands[1]) )
                             ,
     global_trees[TI_BOOLEAN_TRUE],
     block_avail_exprs_p);
      record_cond (build2_stat (UNLE_EXPR,global_trees[TI_BOOLEAN_TYPE],((cond)->exp.operands[0]),((cond)->exp.operands[1]) )
                             ,
     global_trees[TI_BOOLEAN_TRUE],
     block_avail_exprs_p);
      record_cond (build2_stat (UNGE_EXPR,global_trees[TI_BOOLEAN_TYPE],((cond)->exp.operands[0]),((cond)->exp.operands[1]) )
                             ,
     global_trees[TI_BOOLEAN_TRUE],
     block_avail_exprs_p);
      record_cond (build2_stat (UNEQ_EXPR,global_trees[TI_BOOLEAN_TYPE],((cond)->exp.operands[0]),((cond)->exp.operands[1]) )
                             ,
     global_trees[TI_BOOLEAN_TRUE],
     block_avail_exprs_p);
      record_cond (build2_stat (UNLT_EXPR,global_trees[TI_BOOLEAN_TYPE],((cond)->exp.operands[0]),((cond)->exp.operands[1]) )
                             ,
     global_trees[TI_BOOLEAN_TRUE],
     block_avail_exprs_p);
      record_cond (build2_stat (UNGT_EXPR,global_trees[TI_BOOLEAN_TYPE],((cond)->exp.operands[0]),((cond)->exp.operands[1]) )
                             ,
     global_trees[TI_BOOLEAN_TRUE],
     block_avail_exprs_p);
      break;
    case UNLT_EXPR:
      record_cond (build2_stat (UNLE_EXPR,global_trees[TI_BOOLEAN_TYPE],((cond)->exp.operands[0]),((cond)->exp.operands[1]) )
                             ,
     global_trees[TI_BOOLEAN_TRUE],
     block_avail_exprs_p);
      record_cond (build2_stat (NE_EXPR,global_trees[TI_BOOLEAN_TYPE],((cond)->exp.operands[0]),((cond)->exp.operands[1]) )
                             ,
     global_trees[TI_BOOLEAN_TRUE],
     block_avail_exprs_p);
      break;
    case UNGT_EXPR:
      record_cond (build2_stat (UNGE_EXPR,global_trees[TI_BOOLEAN_TYPE],((cond)->exp.operands[0]),((cond)->exp.operands[1]) )
                             ,
     global_trees[TI_BOOLEAN_TRUE],
     block_avail_exprs_p);
      record_cond (build2_stat (NE_EXPR,global_trees[TI_BOOLEAN_TYPE],((cond)->exp.operands[0]),((cond)->exp.operands[1]) )
                             ,
     global_trees[TI_BOOLEAN_TRUE],
     block_avail_exprs_p);
      break;
    case UNEQ_EXPR:
      record_cond (build2_stat (UNLE_EXPR,global_trees[TI_BOOLEAN_TYPE],((cond)->exp.operands[0]),((cond)->exp.operands[1]) )
                             ,
     global_trees[TI_BOOLEAN_TRUE],
     block_avail_exprs_p);
      record_cond (build2_stat (UNGE_EXPR,global_trees[TI_BOOLEAN_TYPE],((cond)->exp.operands[0]),((cond)->exp.operands[1]) )
                             ,
     global_trees[TI_BOOLEAN_TRUE],
     block_avail_exprs_p);
      break;
    case LTGT_EXPR:
      record_cond (build2_stat (NE_EXPR,global_trees[TI_BOOLEAN_TYPE],((cond)->exp.operands[0]),((cond)->exp.operands[1]) )
                             ,
     global_trees[TI_BOOLEAN_TRUE],
     block_avail_exprs_p);
      record_cond (build2_stat (ORDERED_EXPR,global_trees[TI_BOOLEAN_TYPE],((cond)->exp.operands[0]),((cond)->exp.operands[1]) )
                             ,
     global_trees[TI_BOOLEAN_TRUE],
     block_avail_exprs_p);
    default:
      break;
    }
}
static void
record_const_or_copy_1 (tree x, tree y, tree prev_x,
   varray_type *block_const_and_copies_p)
{
  set_value_for (x, y, const_and_copies);
  if (!*block_const_and_copies_p)
    *block_const_and_copies_p = varray_init (2, VARRAY_DATA_TREE, "block_const_and_copies");
  do { if ((*block_const_and_copies_p)->elements_used >= (*block_const_and_copies_p)->num_elements) (((*block_const_and_copies_p)) = varray_grow ((*block_const_and_copies_p), 2 * (*block_const_and_copies_p)->num_elements)); (*block_const_and_copies_p)->data.tree1[(*block_const_and_copies_p)->elements_used++] = (x); } while (0);
  do { if ((*block_const_and_copies_p)->elements_used >= (*block_const_and_copies_p)->num_elements) (((*block_const_and_copies_p)) = varray_grow ((*block_const_and_copies_p), 2 * (*block_const_and_copies_p)->num_elements)); (*block_const_and_copies_p)->data.tree1[(*block_const_and_copies_p)->elements_used++] = (prev_x); } while (0);
}
static void
record_const_or_copy (tree x, tree y, varray_type *block_const_and_copies_p)
{
  tree prev_x = get_value_for (x, const_and_copies);
  if (((enum tree_code) (y)->common.code) == SSA_NAME)
    {
      tree tmp = get_value_for (y, const_and_copies);
      if (tmp)
 y = tmp;
    }
  record_const_or_copy_1 (x, y, prev_x, block_const_and_copies_p);
}
static void
record_equality (tree x, tree y, varray_type *block_const_and_copies_p)
{
  tree prev_x = ((void *)0), prev_y = ((void *)0);
  if (((enum tree_code) (x)->common.code) == SSA_NAME)
    prev_x = get_value_for (x, const_and_copies);
  if (((enum tree_code) (y)->common.code) == SSA_NAME)
    prev_y = get_value_for (y, const_and_copies);
  if (((y)->common.invariant_flag))
    ;
  else if (((x)->common.invariant_flag))
    prev_x = x, x = y, y = prev_x, prev_x = prev_y;
  else if (prev_x && ((prev_x)->common.invariant_flag))
    x = y, y = prev_x, prev_x = prev_y;
  else if (prev_y)
    y = prev_y;
  if (((enum tree_code) (x)->common.code) != SSA_NAME)
    return;
  if ((((mode_class[((((x)->common.type))->type.mode)] == MODE_FLOAT || mode_class[((((x)->common.type))->type.mode)] == MODE_COMPLEX_FLOAT || mode_class[((((x)->common.type))->type.mode)] == MODE_VECTOR_FLOAT) && 1 == 1) && !flag_unsafe_math_optimizations)
      && (((enum tree_code) (y)->common.code) != REAL_CST
   || real_compare (EQ_EXPR, &(dconst0), &((*((y)->real_cst.real_cst_ptr))))))
    return;
  record_const_or_copy_1 (x, y, prev_x, block_const_and_copies_p);
}
static tree
simplify_rhs_and_lookup_avail_expr (struct dom_walk_data *walk_data,
        tree stmt,
        stmt_ann_t ann,
        int insert)
{
  tree rhs = ((stmt)->exp.operands[1]);
  enum tree_code rhs_code = ((enum tree_code) (rhs)->common.code);
  tree result = ((void *)0);
  struct dom_walk_block_data *bd
    = ((walk_data->block_data_stack)->data.generic[(walk_data->block_data_stack)->elements_used - 1]);
  if ((rhs_code == BIT_NOT_EXPR || rhs_code == NEGATE_EXPR)
      && ((enum tree_code) (((rhs)->exp.operands[0]))->common.code) == SSA_NAME)
    {
      tree rhs_def_stmt = (((rhs)->exp.operands[0]))->common.chain;
      if (((enum tree_code) (rhs_def_stmt)->common.code) == MODIFY_EXPR
   && ((enum tree_code) (((rhs_def_stmt)->exp.operands[1]))->common.code) == rhs_code)
 {
   tree rhs_def_operand;
   rhs_def_operand = ((((rhs_def_stmt)->exp.operands[1]))->exp.operands[0]);
   if (((enum tree_code) (rhs_def_operand)->common.code) == SSA_NAME
       && ! (rhs_def_operand)->common.asm_written_flag)
     result = update_rhs_and_lookup_avail_expr (stmt,
             rhs_def_operand,
             &bd->avail_exprs,
             ann,
             insert);
 }
    }
  if ((associative_tree_code (rhs_code) || rhs_code == MINUS_EXPR)
      && ((enum tree_code) (((rhs)->exp.operands[0]))->common.code) == SSA_NAME
      && is_gimple_min_invariant (((rhs)->exp.operands[1])))
    {
      tree rhs_def_stmt = (((rhs)->exp.operands[0]))->common.chain;
      if (((enum tree_code) (rhs_def_stmt)->common.code) == MODIFY_EXPR)
 {
   tree rhs_def_rhs = ((rhs_def_stmt)->exp.operands[1]);
   enum tree_code rhs_def_code = ((enum tree_code) (rhs_def_rhs)->common.code);
   if (rhs_code == rhs_def_code
       || (rhs_code == PLUS_EXPR && rhs_def_code == MINUS_EXPR)
       || (rhs_code == MINUS_EXPR && rhs_def_code == PLUS_EXPR))
     {
       tree def_stmt_op0 = ((rhs_def_rhs)->exp.operands[0]);
       tree def_stmt_op1 = ((rhs_def_rhs)->exp.operands[1]);
       if (((enum tree_code) (def_stmt_op0)->common.code) == SSA_NAME
    && ! (def_stmt_op0)->common.asm_written_flag
    && is_gimple_min_invariant (def_stmt_op1))
  {
    tree outer_const = ((rhs)->exp.operands[1]);
    tree type = ((((stmt)->exp.operands[0]))->common.type);
    tree t;
    if (((((enum tree_code) (type)->common.code) == REAL_TYPE) || (((enum tree_code) (type)->common.code) == COMPLEX_TYPE && ((enum tree_code) (((type)->common.type))->common.code) == REAL_TYPE))
        && !flag_unsafe_math_optimizations
        && (rhs_def_code == PLUS_EXPR
     || rhs_def_code == MINUS_EXPR))
      {
        unsigned char neg = 0;
        neg ^= (rhs_code == MINUS_EXPR);
        neg ^= (rhs_def_code == MINUS_EXPR);
        neg ^= real_isneg (((outer_const)->real_cst.real_cst_ptr));
        neg ^= real_isneg (((def_stmt_op1)->real_cst.real_cst_ptr));
        if (neg)
   goto dont_fold_assoc;
      }
    if (rhs_def_code != rhs_code)
      {
        if (rhs_def_code == MINUS_EXPR)
          t = build (MINUS_EXPR, type, outer_const, def_stmt_op1);
        else
          t = build (MINUS_EXPR, type, def_stmt_op1, outer_const);
        rhs_code = PLUS_EXPR;
      }
    else if (rhs_def_code == MINUS_EXPR)
      t = build (PLUS_EXPR, type, def_stmt_op1, outer_const);
    else
      t = build (rhs_def_code, type, def_stmt_op1, outer_const);
    t = local_fold (t);
    t = build (rhs_code, type, def_stmt_op0, t);
    t = local_fold (t);
    if (((enum tree_code) (t)->common.code) == SSA_NAME
        || (tree_code_type[(int) (((enum tree_code) (t)->common.code))] == '1'
     && ((enum tree_code) (((t)->exp.operands[0]))->common.code) == SSA_NAME)
        || ((tree_code_type[(int) (((enum tree_code) (t)->common.code))] == '2'
      || tree_code_type[(int) (((enum tree_code) (t)->common.code))] == '<')
     && ((enum tree_code) (((t)->exp.operands[0]))->common.code) == SSA_NAME
     && is_gimple_val (((t)->exp.operands[1]))))
      result = update_rhs_and_lookup_avail_expr
        (stmt, t, &bd->avail_exprs, ann, insert);
  }
     }
 }
 dont_fold_assoc:;
    }
  if ((rhs_code == TRUNC_DIV_EXPR || rhs_code == TRUNC_MOD_EXPR)
      && (((enum tree_code) (((((rhs)->exp.operands[0]))->common.type))->common.code) == INTEGER_TYPE || ((enum tree_code) (((((rhs)->exp.operands[0]))->common.type))->common.code) == ENUMERAL_TYPE || ((enum tree_code) (((((rhs)->exp.operands[0]))->common.type))->common.code) == BOOLEAN_TYPE || ((enum tree_code) (((((rhs)->exp.operands[0]))->common.type))->common.code) == CHAR_TYPE)
      && integer_pow2p (((rhs)->exp.operands[1])))
    {
      tree val;
      tree op = ((rhs)->exp.operands[0]);
      if (((((op)->common.type))->common.unsigned_flag))
 {
   val = global_trees[TI_INTEGER_ONE];
 }
      else
 {
   tree dummy_cond = walk_data->global_data;
   if (! dummy_cond)
     {
       dummy_cond = build (GT_EXPR, global_trees[TI_BOOLEAN_TYPE],
      op, global_trees[TI_INTEGER_ZERO]);
       dummy_cond = build (COND_EXPR, global_trees[TI_VOID_TYPE],
      dummy_cond, ((void *)0), ((void *)0));
       walk_data->global_data = dummy_cond;
     }
          else
     {
       ((((dummy_cond)->exp.operands[0]))->common.code = (GT_EXPR));
       ((((dummy_cond)->exp.operands[0]))->exp.operands[0]) = op;
       ((((dummy_cond)->exp.operands[0]))->exp.operands[1])
  = global_trees[TI_INTEGER_ZERO];
     }
   val = simplify_cond_and_lookup_avail_expr (dummy_cond,
           &bd->avail_exprs,
           ((void *)0), 0);
 }
      if (val && integer_onep (val))
 {
   tree t;
   tree op0 = ((rhs)->exp.operands[0]);
   tree op1 = ((rhs)->exp.operands[1]);
   if (rhs_code == TRUNC_DIV_EXPR)
     t = build (RSHIFT_EXPR, ((op0)->common.type), op0,
         build_int_2_wide ((unsigned long) (tree_log2 (op1)), (long) (0)));
   else
     t = build (BIT_AND_EXPR, ((op0)->common.type), op0,
         local_fold (build (MINUS_EXPR, ((op1)->common.type),
       op1, global_trees[TI_INTEGER_ONE])));
   result = update_rhs_and_lookup_avail_expr (stmt, t,
           &bd->avail_exprs,
           ann, insert);
 }
    }
  if (rhs_code == ABS_EXPR
      && (((enum tree_code) (((((rhs)->exp.operands[0]))->common.type))->common.code) == INTEGER_TYPE || ((enum tree_code) (((((rhs)->exp.operands[0]))->common.type))->common.code) == ENUMERAL_TYPE || ((enum tree_code) (((((rhs)->exp.operands[0]))->common.type))->common.code) == BOOLEAN_TYPE || ((enum tree_code) (((((rhs)->exp.operands[0]))->common.type))->common.code) == CHAR_TYPE))
    {
      tree val;
      tree op = ((rhs)->exp.operands[0]);
      tree type = ((op)->common.type);
      if (((type)->common.unsigned_flag))
 {
   val = global_trees[TI_INTEGER_ZERO];
 }
      else
 {
   tree dummy_cond = walk_data->global_data;
   if (! dummy_cond)
     {
       dummy_cond = build (LE_EXPR, global_trees[TI_BOOLEAN_TYPE],
      op, global_trees[TI_INTEGER_ZERO]);
       dummy_cond = build (COND_EXPR, global_trees[TI_VOID_TYPE],
      dummy_cond, ((void *)0), ((void *)0));
       walk_data->global_data = dummy_cond;
     }
   else
     {
       ((((dummy_cond)->exp.operands[0]))->common.code = (LE_EXPR));
       ((((dummy_cond)->exp.operands[0]))->exp.operands[0]) = op;
       ((((dummy_cond)->exp.operands[0]))->exp.operands[1])
  = fold_convert (type, global_trees[TI_INTEGER_ZERO]);
     }
   val = simplify_cond_and_lookup_avail_expr (dummy_cond,
           &bd->avail_exprs,
           ((void *)0), 0);
   if (!val)
     {
       ((((dummy_cond)->exp.operands[0]))->common.code = (GE_EXPR));
       ((((dummy_cond)->exp.operands[0]))->exp.operands[0]) = op;
       ((((dummy_cond)->exp.operands[0]))->exp.operands[1])
  = fold_convert (type, global_trees[TI_INTEGER_ZERO]);
       val = simplify_cond_and_lookup_avail_expr (dummy_cond,
        &bd->avail_exprs,
        ((void *)0), 0);
       if (val)
  {
    if (integer_zerop (val))
      val = global_trees[TI_INTEGER_ONE];
    else if (integer_onep (val))
      val = global_trees[TI_INTEGER_ZERO];
  }
     }
 }
      if (val
   && (integer_onep (val) || integer_zerop (val)))
 {
   tree t;
   if (integer_onep (val))
     t = build1_stat (NEGATE_EXPR,((op)->common.type),op );
   else
     t = op;
   result = update_rhs_and_lookup_avail_expr (stmt, t,
           &bd->avail_exprs,
           ann, insert);
 }
    }
  if (((enum tree_code) (rhs)->common.code) == INDIRECT_REF || ((enum tree_code) (rhs)->common.code) == ARRAY_REF)
    {
      tree t = fold_read_from_constant_string (rhs);
      if (t)
        result = update_rhs_and_lookup_avail_expr (stmt, t,
         &bd->avail_exprs,
         ann, insert);
    }
  return result;
}
static tree
find_equivalent_equality_comparison (tree cond)
{
  tree op0 = ((cond)->exp.operands[0]);
  tree op1 = ((cond)->exp.operands[1]);
  tree def_stmt = (op0)->common.chain;
  if (def_stmt && ((enum tree_code) (def_stmt)->common.code) == MODIFY_EXPR)
    {
      tree def_rhs = ((def_stmt)->exp.operands[1]);
      if ((((enum tree_code) (def_rhs)->common.code) == NOP_EXPR
    || ((enum tree_code) (def_rhs)->common.code) == CONVERT_EXPR)
   && ((enum tree_code) (((def_rhs)->exp.operands[0]))->common.code) == SSA_NAME)
 {
   tree def_rhs_inner = ((def_rhs)->exp.operands[0]);
   tree def_rhs_inner_type = ((def_rhs_inner)->common.type);
   tree new;
   if (((def_rhs_inner_type)->type.precision)
       > ((((def_rhs)->common.type))->type.precision))
     return ((void *)0);
   new = build1_stat (((enum tree_code) (def_rhs)->common.code),def_rhs_inner_type,op1 );
   new = local_fold (new);
   if (is_gimple_val (new) && tree_int_cst_equal (new, op1))
     return build (((enum tree_code) (cond)->common.code), ((cond)->common.type),
     def_rhs_inner, new);
 }
    }
  return ((void *)0);
}
static tree
simplify_cond_and_lookup_avail_expr (tree stmt,
         varray_type *block_avail_exprs_p,
         stmt_ann_t ann,
         int insert)
{
  tree cond = ((((stmt))->exp.operands[0]));
  if (tree_code_type[(int) (((enum tree_code) (cond)->common.code))] == '<')
    {
      tree op0 = ((cond)->exp.operands[0]);
      tree op1 = ((cond)->exp.operands[1]);
      if (((enum tree_code) (op0)->common.code) == SSA_NAME && is_gimple_min_invariant (op1))
 {
   int limit;
   tree low, high, cond_low, cond_high;
   int lowequal, highequal, swapped, no_overlap, subset, cond_inverted;
   varray_type vrp_records;
   struct vrp_element *element;
   if (((enum tree_code) (cond)->common.code) == EQ_EXPR || ((enum tree_code) (cond)->common.code) == NE_EXPR)
     {
       tree new_cond = find_equivalent_equality_comparison (cond);
       if (new_cond)
  {
    ((((stmt))->exp.operands[0])) = new_cond;
    ann->modified = 1;
    new_cond = lookup_avail_expr (stmt, block_avail_exprs_p,
      insert);
    if (new_cond)
      return new_cond;
    op0 = ((cond)->exp.operands[0]);
    op1 = ((cond)->exp.operands[1]);
  }
     }
   vrp_records = ((vrp_data)->data.generic[(op0)->ssa_name.version]);
   if (vrp_records == ((void *)0))
     return ((void *)0);
   limit = ((vrp_records)->elements_used);
   if (limit == 0
       || ! extract_range_from_cond (cond, &cond_high,
         &cond_low, &cond_inverted))
     return ((void *)0);
    element
      = (struct vrp_element *)((vrp_records)->data.generic[limit - 1]);
   if (element->high && element->low)
     {
       low = element->low;
       high = element->high;
     }
   else
     {
       tree tmp_high, tmp_low;
       int dummy;
       extract_range_from_cond (element->cond, &tmp_high,
           &tmp_low, &dummy);
       if (limit == 1)
  {
    low = tmp_low;
    high = tmp_high;
  }
       else
  {
    struct vrp_element *prev
      = (struct vrp_element *)((vrp_records)->data.generic[limit - 2])
                  ;
    low = prev->low;
    high = prev->high;
    low = (tree_int_cst_compare (low, tmp_low) == 1
    ? low : tmp_low);
    high = (tree_int_cst_compare (high, tmp_high) == -1
     ? high : tmp_high);
  }
       element->low = low;
       element->high = high;
     }
   lowequal = tree_int_cst_equal (low, cond_low);
   highequal = tree_int_cst_equal (high, cond_high);
   if (lowequal && highequal)
     return (cond_inverted ? global_trees[TI_BOOLEAN_FALSE] : global_trees[TI_BOOLEAN_TRUE]);
   swapped = 0;
   if (tree_int_cst_compare (low, cond_low) == 1
       || (lowequal
    && tree_int_cst_compare (cond_high, high) == 1))
     {
       tree temp;
       swapped = 1;
       temp = low;
       low = cond_low;
       cond_low = temp;
       temp = high;
       high = cond_high;
       cond_high = temp;
     }
   no_overlap = tree_int_cst_lt (high, cond_low);
   subset = tree_int_cst_compare (cond_high, high) != 1;
   if (no_overlap)
     return (cond_inverted ? global_trees[TI_BOOLEAN_TRUE] : global_trees[TI_BOOLEAN_FALSE]);
   if (subset && swapped)
     return (cond_inverted ? global_trees[TI_BOOLEAN_FALSE] : global_trees[TI_BOOLEAN_TRUE]);
   low = tree_int_cst_compare (low, cond_low) == 1 ? low : cond_low;
   high = tree_int_cst_compare (high, cond_high) == -1 ? high : cond_high;
   if (((enum tree_code) (cond)->common.code) != EQ_EXPR
       && ((enum tree_code) (cond)->common.code) != NE_EXPR
       && tree_int_cst_equal (low, high))
     {
       ((cond)->common.code = (EQ_EXPR));
       ((cond)->exp.operands[1]) = high;
     }
 }
    }
  return 0;
}
static tree
simplify_switch_and_lookup_avail_expr (tree stmt,
           varray_type *block_avail_exprs_p,
           stmt_ann_t ann,
           int insert)
{
  tree cond = (((stmt))->exp.operands[0]);
  tree def, to, ti;
  if (((enum tree_code) (cond)->common.code) == SSA_NAME)
    {
      def = (cond)->common.chain;
      if (((enum tree_code) (def)->common.code) == MODIFY_EXPR)
 {
   def = ((def)->exp.operands[1]);
   if (((enum tree_code) (def)->common.code) == NOP_EXPR)
     {
       def = ((def)->exp.operands[0]);
       to = ((cond)->common.type);
       ti = ((def)->common.type);
       if (((to)->common.unsigned_flag) == ((ti)->common.unsigned_flag)
    && ((to)->type.precision) >= ((ti)->type.precision)
           && is_gimple_val (def))
  {
    (((stmt))->exp.operands[0]) = def;
    ann->modified = 1;
    return lookup_avail_expr (stmt, block_avail_exprs_p, insert);
  }
     }
 }
    }
  return 0;
}
static void
cprop_into_successor_phis (basic_block bb,
      varray_type const_and_copies,
      bitmap nonzero_vars)
{
  edge e;
  for (e = bb->succ; e; e = e->succ_next)
    {
      tree phi;
      int phi_num_args;
      int hint;
      if (e->flags & 2)
 continue;
      phi = phi_nodes (e->dest);
      if (! phi)
 continue;
      phi_num_args = (phi)->phi.num_args;
      hint = phi_num_args;
      for ( ; phi; phi = (((phi))->common.chain))
 {
   int i;
   tree new;
   use_operand_p orig_p;
   tree orig;
   if (hint != phi_num_args && ((phi)->phi.a[hint]).e == e)
     ;
   else
     {
       for (i = 0; i < phi_num_args; i++)
  if (((phi)->phi.a[i]).e == e)
    break;
       hint = i;
     }
   orig_p = get_phi_arg_def_ptr ((phi), (hint));
   orig = get_use_from_ptr (orig_p);
   if (((enum tree_code) (orig)->common.code) != SSA_NAME)
     continue;
   if (bitmap_bit_p (nonzero_vars, (orig)->ssa_name.version))
     ((phi)->phi.a[hint]).nonzero = 1;
   new = ((const_and_copies)->data.tree1[(orig)->ssa_name.version]);
   if (new
       && (((enum tree_code) (new)->common.code) == SSA_NAME
    || is_gimple_min_invariant (new))
       && may_propagate_copy (orig, new))
     {
       propagate_value (orig_p, new);
     }
 }
    }
}
static void
cprop_into_phis (struct dom_walk_data *walk_data ,
   basic_block bb)
{
  cprop_into_successor_phis (bb, const_and_copies, nonzero_vars);
}
static unsigned char
eliminate_redundant_computations (struct dom_walk_data *walk_data,
      tree stmt, stmt_ann_t ann)
{
  v_may_def_optype v_may_defs = get_v_may_def_ops (ann);
  tree *expr_p, def = (tree) ((void *)0);
  unsigned char insert = 1;
  tree cached_lhs;
  unsigned char retval = 0;
  struct dom_walk_block_data *bd
    = ((walk_data->block_data_stack)->data.generic[(walk_data->block_data_stack)->elements_used - 1]);
  if (((enum tree_code) (stmt)->common.code) == MODIFY_EXPR)
    def = ((stmt)->exp.operands[0]);
  if (ann->makes_aliased_stores
      || ! def
      || ((enum tree_code) (def)->common.code) != SSA_NAME
      || (def)->common.asm_written_flag
      || ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0) != 0)
    insert = 0;
  cached_lhs = lookup_avail_expr (stmt, &bd->avail_exprs, insert);
  if (! cached_lhs && ((enum tree_code) (stmt)->common.code) == MODIFY_EXPR)
    cached_lhs = simplify_rhs_and_lookup_avail_expr (walk_data,
           stmt,
           ann,
           insert);
  else if (! cached_lhs && ((enum tree_code) (stmt)->common.code) == COND_EXPR)
    cached_lhs = simplify_cond_and_lookup_avail_expr (stmt,
            &bd->avail_exprs,
            ann,
            insert);
  else if (!cached_lhs && ((enum tree_code) (stmt)->common.code) == SWITCH_EXPR)
    cached_lhs = simplify_switch_and_lookup_avail_expr (stmt,
              &bd->avail_exprs,
              ann,
              insert);
  opt_stats.num_exprs_considered++;
  if (((enum tree_code) (stmt)->common.code) == COND_EXPR)
    expr_p = &((((stmt))->exp.operands[0]));
  else if (((enum tree_code) (stmt)->common.code) == SWITCH_EXPR)
    expr_p = &(((stmt))->exp.operands[0]);
  else if (((enum tree_code) (stmt)->common.code) == RETURN_EXPR && ((stmt)->exp.operands[0]))
    expr_p = &((((stmt)->exp.operands[0]))->exp.operands[1]);
  else
    expr_p = &((stmt)->exp.operands[1]);
  if (cached_lhs
      && (((enum tree_code) (cached_lhs)->common.code) != SSA_NAME
   || may_propagate_copy (*expr_p, cached_lhs)))
    {
      if (dump_file && (dump_flags & (1 << 3)))
 {
   fprintf (dump_file, "  Replaced redundant expr '");
   print_generic_expr (dump_file, *expr_p, dump_flags);
   fprintf (dump_file, "' with '");
   print_generic_expr (dump_file, cached_lhs, dump_flags);
    fprintf (dump_file, "'\n");
 }
      opt_stats.num_re++;
      if (((enum tree_code) (cached_lhs)->common.code) == ADDR_EXPR
   || ((((enum tree_code) (((*expr_p)->common.type))->common.code) == POINTER_TYPE || ((enum tree_code) (((*expr_p)->common.type))->common.code) == REFERENCE_TYPE)
       && is_gimple_min_invariant (cached_lhs)))
 retval = 1;
      propagate_tree_value (expr_p, cached_lhs);
      ann->modified = 1;
    }
  return retval;
}
static void
record_equivalences_from_stmt (tree stmt,
          varray_type *block_avail_exprs_p,
          varray_type *block_nonzero_vars_p,
          int may_optimize_p,
          stmt_ann_t ann)
{
  tree lhs = ((stmt)->exp.operands[0]);
  enum tree_code lhs_code = ((enum tree_code) (lhs)->common.code);
  int i;
  if (lhs_code == SSA_NAME)
    {
      tree rhs = ((stmt)->exp.operands[1]);
      while (tree_ssa_useless_type_conversion (rhs)) rhs = ((rhs)->exp.operands[0]);
      if (may_optimize_p
   && (((enum tree_code) (rhs)->common.code) == SSA_NAME
       || is_gimple_min_invariant (rhs)))
 set_value_for (lhs, rhs, const_and_copies);
      while (((enum tree_code) (rhs)->common.code) == NOP_EXPR
      || ((enum tree_code) (rhs)->common.code) == CONVERT_EXPR)
        rhs = ((rhs)->exp.operands[0]);
      if (alloca_call_p (rhs)
          || (((enum tree_code) (rhs)->common.code) == ADDR_EXPR
       && (tree_code_type[(int) (((enum tree_code) (((rhs)->exp.operands[0]))->common.code))] == 'd')
       && ! ((((rhs)->exp.operands[0]))->decl.weak_flag)))
 record_var_is_nonzero (lhs, block_nonzero_vars_p);
      if (((enum tree_code) (rhs)->common.code) == BIT_IOR_EXPR
   && integer_nonzerop (((rhs)->exp.operands[1])))
 record_var_is_nonzero (lhs, block_nonzero_vars_p);
    }
  if (flag_delete_null_pointer_checks)
    for (i = 0; i < 2; i++)
      {
 tree t = ((stmt)->exp.operands[i]);
 while (((enum tree_code) (t)->common.code) == COMPONENT_REF)
   t = ((t)->exp.operands[0]);
 if (((enum tree_code) (t)->common.code) == INDIRECT_REF)
          {
     tree op = ((t)->exp.operands[0]);
     while (((enum tree_code) (op)->common.code) == SSA_NAME)
       {
  tree def = (op)->common.chain;
  record_var_is_nonzero (op, block_nonzero_vars_p);
  if (def
      && ((enum tree_code) (def)->common.code) == MODIFY_EXPR
      && ((enum tree_code) (((def)->exp.operands[1]))->common.code) == NOP_EXPR)
    op = ((((def)->exp.operands[1]))->exp.operands[0]);
  else
    break;
       }
   }
      }
  if (!ann->has_volatile_ops
      && (((enum tree_code) (((stmt)->exp.operands[1]))->common.code) == SSA_NAME
   || is_gimple_min_invariant (((stmt)->exp.operands[1])))
      && !is_gimple_reg (lhs))
    {
      tree rhs = ((stmt)->exp.operands[1]);
      tree new;
      size_t j;
      if (lhs_code == COMPONENT_REF
   && ((((lhs)->exp.operands[1]))->decl.bit_field_flag))
 {
   if (((rhs)->common.constant_flag))
     rhs = widen_bitfield (rhs, ((lhs)->exp.operands[1]), lhs);
   else
     rhs = ((void *)0);
   if (rhs && ! is_gimple_min_invariant (rhs))
     rhs = ((void *)0);
 }
      if (rhs)
 {
   v_may_def_optype v_may_defs = get_v_may_def_ops (ann);
   v_must_def_optype v_must_defs = get_v_must_def_ops (ann);
   new = build (MODIFY_EXPR, ((stmt)->common.type), rhs, lhs);
   get_stmt_ann (new);
   get_stmt_operands (new);
   remove_vuses (new);
   remove_v_may_defs (new);
   remove_v_must_defs (new);
   start_ssa_stmt_operands (new);
   for (j = 0; j < ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0); j++)
     {
       tree op = (get_def_from_ptr (get_v_may_def_result_ptr (((v_may_defs)), ((j)))));
       add_vuse (op, new);
     }
   for (j = 0; j < ((v_must_defs) ? (v_must_defs)->num_v_must_defs : 0); j++)
     {
       tree op = (get_def_from_ptr (get_v_must_def_op_ptr (((v_must_defs)), ((j)))));
       add_vuse (op, new);
     }
   finalize_ssa_stmt_operands (new);
   lookup_avail_expr (new, block_avail_exprs_p, 1);
 }
    }
}
static unsigned char
cprop_operand (stmt_ann_t ann, use_operand_p op_p, varray_type const_and_copies)
{
  unsigned char may_have_exposed_new_symbols = 0;
  tree val;
  tree op = get_use_from_ptr (op_p);
  val = ((const_and_copies)->data.tree1[(op)->ssa_name.version]);
  if (val)
    {
      tree op_type, val_type;
      if (!is_gimple_reg (op)
   && (get_virtual_var (val) != get_virtual_var (op)
       || ((enum tree_code) (val)->common.code) != SSA_NAME))
 return 0;
      op_type = ((op)->common.type);
      val_type = ((val)->common.type);
      while ((((enum tree_code) (op_type)->common.code) == POINTER_TYPE || ((enum tree_code) (op_type)->common.code) == REFERENCE_TYPE) && (((enum tree_code) (val_type)->common.code) == POINTER_TYPE || ((enum tree_code) (val_type)->common.code) == REFERENCE_TYPE))
 {
   op_type = ((op_type)->common.type);
   val_type = ((val_type)->common.type);
 }
     if (!lang_hooks.types_compatible_p (op_type, val_type)
           && ((enum tree_code) (val)->common.code) != SSA_NAME)
 {
   val = fold_convert (((op)->common.type), val);
   if (!is_gimple_min_invariant (val)
       && ((enum tree_code) (val)->common.code) != SSA_NAME)
     return 0;
 }
      if (((enum tree_code) (val)->common.code) == SSA_NAME
   && !may_propagate_copy (op, val))
 return 0;
      if (dump_file && (dump_flags & (1 << 3)))
 {
   fprintf (dump_file, "  Replaced '");
   print_generic_expr (dump_file, op, dump_flags);
   fprintf (dump_file, "' with %s '",
     (((enum tree_code) (val)->common.code) != SSA_NAME ? "constant" : "variable"));
   print_generic_expr (dump_file, val, dump_flags);
   fprintf (dump_file, "'\n");
 }
      if (((enum tree_code) (val)->common.code) == ADDR_EXPR
   || ((((enum tree_code) (((op)->common.type))->common.code) == POINTER_TYPE || ((enum tree_code) (((op)->common.type))->common.code) == REFERENCE_TYPE)
       && is_gimple_min_invariant (val)))
 may_have_exposed_new_symbols = 1;
      propagate_value (op_p, val);
      ann->modified = 1;
    }
  return may_have_exposed_new_symbols;
}
static unsigned char
cprop_into_stmt (tree stmt, varray_type const_and_copies)
{
  unsigned char may_have_exposed_new_symbols = 0;
  stmt_ann_t ann = stmt_ann (stmt);
  size_t i, num_uses, num_vuses, num_v_may_defs;
  vuse_optype vuses;
  v_may_def_optype v_may_defs;
  use_optype uses;
  uses = get_use_ops (ann);
  num_uses = ((uses) ? (uses)->num_uses : 0);
  for (i = 0; i < num_uses; i++)
    {
      use_operand_p op_p = get_use_op_ptr ((uses), (i));
      if (((enum tree_code) (get_use_from_ptr (op_p))->common.code) == SSA_NAME)
 may_have_exposed_new_symbols
   |= cprop_operand (ann, op_p, const_and_copies);
    }
  vuses = get_vuse_ops (ann);
  num_vuses = ((vuses) ? (vuses)->num_vuses : 0);
  for (i = 0; i < num_vuses; i++)
    {
      use_operand_p op_p = get_vuse_op_ptr ((vuses), (i));
      if (((enum tree_code) (get_use_from_ptr (op_p))->common.code) == SSA_NAME)
 may_have_exposed_new_symbols
   |= cprop_operand (ann, op_p, const_and_copies);
    }
  v_may_defs = get_v_may_def_ops (ann);
  num_v_may_defs = ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0);
  for (i = 0; i < num_v_may_defs; i++)
    {
      use_operand_p op_p = get_v_may_def_op_ptr ((v_may_defs), (i));
      if (((enum tree_code) (get_use_from_ptr (op_p))->common.code) == SSA_NAME)
 may_have_exposed_new_symbols
   |= cprop_operand (ann, op_p, const_and_copies);
    }
  return may_have_exposed_new_symbols;
}
static void
optimize_stmt (struct dom_walk_data *walk_data, basic_block bb,
        block_stmt_iterator si)
{
  stmt_ann_t ann;
  tree stmt;
  unsigned char may_optimize_p;
  unsigned char may_have_exposed_new_symbols = 0;
  struct dom_walk_block_data *bd
    = ((walk_data->block_data_stack)->data.generic[(walk_data->block_data_stack)->elements_used - 1]);
  stmt = bsi_stmt (si);
  get_stmt_operands (stmt);
  ann = stmt_ann (stmt);
  opt_stats.num_stmts++;
  may_have_exposed_new_symbols = 0;
  if (dump_file && (dump_flags & (1 << 3)))
    {
      fprintf (dump_file, "Optimizing statement ");
      print_generic_stmt (dump_file, stmt, (1 << 1));
    }
  may_have_exposed_new_symbols = cprop_into_stmt (stmt, const_and_copies);
  if (ann->modified)
    {
      if (fold_stmt (bsi_stmt_ptr (si)))
 {
   stmt = bsi_stmt (si);
   ann = stmt_ann (stmt);
   if (dump_file && (dump_flags & (1 << 3)))
     {
       fprintf (dump_file, "  Folded to: ");
       print_generic_stmt (dump_file, stmt, (1 << 1));
     }
 }
      may_have_exposed_new_symbols = 1;
    }
  may_optimize_p = (!ann->has_volatile_ops
      && ((((enum tree_code) (stmt)->common.code) == RETURN_EXPR
    && ((stmt)->exp.operands[0])
    && ((enum tree_code) (((stmt)->exp.operands[0]))->common.code) == MODIFY_EXPR
    && ! (((((((stmt)->exp.operands[0]))->exp.operands[1]))->common.side_effects_flag)
                                                    ))
   || (((enum tree_code) (stmt)->common.code) == MODIFY_EXPR
       && ! ((((stmt)->exp.operands[1]))->common.side_effects_flag))
   || ((enum tree_code) (stmt)->common.code) == COND_EXPR
   || ((enum tree_code) (stmt)->common.code) == SWITCH_EXPR));
  if (may_optimize_p)
    may_have_exposed_new_symbols
      |= eliminate_redundant_computations (walk_data, stmt, ann);
  if (((enum tree_code) (stmt)->common.code) == MODIFY_EXPR)
    record_equivalences_from_stmt (stmt,
       &bd->avail_exprs,
       &bd->nonzero_vars,
       may_optimize_p,
       ann);
  register_definitions_for_stmt (ann, &bd->block_defs);
  if (ann->modified)
    {
      tree val = ((void *)0);
      if (((enum tree_code) (stmt)->common.code) == COND_EXPR)
 val = ((((stmt))->exp.operands[0]));
      else if (((enum tree_code) (stmt)->common.code) == SWITCH_EXPR)
 val = (((stmt))->exp.operands[0]);
      if (val && ((enum tree_code) (val)->common.code) == INTEGER_CST && find_taken_edge (bb, val))
 cfg_altered = 1;
      if (maybe_clean_eh_stmt (stmt))
 {
   bitmap_set_bit (need_eh_cleanup, bb->index);
   if (dump_file && (dump_flags & (1 << 3)))
     fprintf (dump_file, "  Flagged to clear EH edges.\n");
 }
    }
  if (may_have_exposed_new_symbols)
    {
      if (! bd->stmts_to_rescan)
 bd->stmts_to_rescan = varray_init (20, VARRAY_DATA_TREE, "stmts_to_rescan");
      do { if ((bd->stmts_to_rescan)->elements_used >= (bd->stmts_to_rescan)->num_elements) (((bd->stmts_to_rescan)) = varray_grow ((bd->stmts_to_rescan), 2 * (bd->stmts_to_rescan)->num_elements)); (bd->stmts_to_rescan)->data.tree1[(bd->stmts_to_rescan)->elements_used++] = (bsi_stmt (si)); } while (0);
    }
}
static tree
update_rhs_and_lookup_avail_expr (tree stmt, tree new_rhs,
      varray_type *block_avail_exprs_p,
      stmt_ann_t ann,
      unsigned char insert)
{
  tree cached_lhs = ((void *)0);
  if (insert)
    {
      struct expr_hash_elt element;
      initialize_hash_element (stmt, ((void *)0), &element);
      htab_remove_elt_with_hash (avail_exprs, &element, element.hash);
    }
  ((stmt)->exp.operands[1]) = new_rhs;
  cached_lhs = lookup_avail_expr (stmt, block_avail_exprs_p, insert);
  if (insert)
    do { ((*block_avail_exprs_p)->elements_used--); } while (0);
  ann->modified = 1;
  return cached_lhs;
}
static tree
lookup_avail_expr (tree stmt, varray_type *block_avail_exprs_p, unsigned char insert)
{
  void **slot;
  tree lhs;
  tree temp;
  struct expr_hash_elt *element = xcalloc (sizeof (struct expr_hash_elt), 1);
  lhs = ((enum tree_code) (stmt)->common.code) == MODIFY_EXPR ? ((stmt)->exp.operands[0]) : ((void *)0);
  initialize_hash_element (stmt, lhs, element);
  if (((enum tree_code) (element->rhs)->common.code) == SSA_NAME
      || is_gimple_min_invariant (element->rhs))
    {
      free (element);
      return (tree) ((void *)0);
    }
  if ((((enum tree_code) (element->rhs)->common.code) == EQ_EXPR
       || ((enum tree_code) (element->rhs)->common.code) == NE_EXPR)
      && ((enum tree_code) (((element->rhs)->exp.operands[0]))->common.code) == SSA_NAME
      && integer_zerop (((element->rhs)->exp.operands[1])))
    {
      int indx = (((element->rhs)->exp.operands[0]))->ssa_name.version;
      if (bitmap_bit_p (nonzero_vars, indx))
 {
   tree t = element->rhs;
   free (element);
   if (((enum tree_code) (t)->common.code) == EQ_EXPR)
     return global_trees[TI_BOOLEAN_FALSE];
   else
     return global_trees[TI_BOOLEAN_TRUE];
 }
    }
  slot = htab_find_slot_with_hash (avail_exprs, element, element->hash,
       (insert ? INSERT : NO_INSERT));
  if (slot == ((void *)0))
    {
      free (element);
      return (tree) ((void *)0);
    }
  if (*slot == ((void *)0))
    {
      *slot = (void *) element;
      if (! *block_avail_exprs_p)
        *block_avail_exprs_p = varray_init (20, VARRAY_DATA_TREE, "block_avail_exprs");
      do { if ((*block_avail_exprs_p)->elements_used >= (*block_avail_exprs_p)->num_elements) (((*block_avail_exprs_p)) = varray_grow ((*block_avail_exprs_p), 2 * (*block_avail_exprs_p)->num_elements)); (*block_avail_exprs_p)->data.tree1[(*block_avail_exprs_p)->elements_used++] = (stmt ? stmt : element->rhs); } while (0);
      return (tree) ((void *)0);
    }
  lhs = ((struct expr_hash_elt *)*slot)->lhs;
  if (((enum tree_code) (lhs)->common.code) == SSA_NAME)
    {
      temp = get_value_for (lhs, const_and_copies);
      if (temp)
 lhs = temp;
    }
  free (element);
  return lhs;
}
static unsigned char
extract_range_from_cond (tree cond, tree *hi_p, tree *lo_p, int *inverted_p)
{
  tree op1 = ((cond)->exp.operands[1]);
  tree high, low, type;
  int inverted;
  if (((enum tree_code) (((op1)->common.type))->common.code) != INTEGER_TYPE)
    return 0;
  type = ((op1)->common.type);
  switch (((enum tree_code) (cond)->common.code))
    {
    case EQ_EXPR:
      high = low = op1;
      inverted = 0;
      break;
    case NE_EXPR:
      high = low = op1;
      inverted = 1;
      break;
    case GE_EXPR:
      low = op1;
      high = ((type)->type.maxval);
      inverted = 0;
      break;
    case GT_EXPR:
      low = int_const_binop (PLUS_EXPR, op1, global_trees[TI_INTEGER_ONE], 1);
      high = ((type)->type.maxval);
      inverted = 0;
      break;
    case LE_EXPR:
      high = op1;
      low = ((type)->type.minval);
      inverted = 0;
      break;
    case LT_EXPR:
      high = int_const_binop (MINUS_EXPR, op1, global_trees[TI_INTEGER_ONE], 1);
      low = ((type)->type.minval);
      inverted = 0;
      break;
    default:
      return 0;
    }
  *hi_p = high;
  *lo_p = low;
  *inverted_p = inverted;
  return 1;
}
static void
record_range (tree cond, basic_block bb, varray_type *vrp_variables_p)
{
  if (tree_code_type[(int) (((enum tree_code) (cond)->common.code))] == '<'
      && ((enum tree_code) (cond)->common.code) != NE_EXPR
      && ((enum tree_code) (((((cond)->exp.operands[1]))->common.type))->common.code) == INTEGER_TYPE)
    {
      struct vrp_element *element = ggc_alloc_stat (sizeof (struct vrp_element) );
      int ssa_version = (((cond)->exp.operands[0]))->ssa_name.version;
      varray_type *vrp_records_p
 = (varray_type *)&((vrp_data)->data.generic[ssa_version]);
      element->low = ((void *)0);
      element->high = ((void *)0);
      element->cond = cond;
      element->bb = bb;
      if (*vrp_records_p == ((void *)0))
 {
   *vrp_records_p = varray_init (2, VARRAY_DATA_GENERIC, "vrp records");
   ((vrp_data)->data.generic[ssa_version]) = *vrp_records_p;
 }
      do { if ((*vrp_records_p)->elements_used >= (*vrp_records_p)->num_elements) (((*vrp_records_p)) = varray_grow ((*vrp_records_p), 2 * (*vrp_records_p)->num_elements)); (*vrp_records_p)->data.generic[(*vrp_records_p)->elements_used++] = (element); } while (0);
      if (! *vrp_variables_p)
 *vrp_variables_p = varray_init (2, VARRAY_DATA_TREE, "vrp_variables");
      do { if ((*vrp_variables_p)->elements_used >= (*vrp_variables_p)->num_elements) (((*vrp_variables_p)) = varray_grow ((*vrp_variables_p), 2 * (*vrp_variables_p)->num_elements)); (*vrp_variables_p)->data.tree1[(*vrp_variables_p)->elements_used++] = (((cond)->exp.operands[0])); } while (0);
    }
}
static struct eq_expr_value
get_eq_expr_value (tree if_stmt,
     int true_arm,
     varray_type *block_avail_exprs_p,
     basic_block bb,
     varray_type *vrp_variables_p)
{
  tree cond;
  struct eq_expr_value retval;
  cond = ((((if_stmt))->exp.operands[0]));
  retval.src = ((void *)0);
  retval.dst = ((void *)0);
  if (((enum tree_code) (cond)->common.code) == SSA_NAME)
    {
      retval.dst = cond;
      retval.src = (true_arm ? global_trees[TI_INTEGER_ONE] : global_trees[TI_INTEGER_ZERO]);
      return retval;
    }
  if (tree_code_type[(int) (((enum tree_code) (cond)->common.code))] == '<')
    {
      tree op0 = ((cond)->exp.operands[0]);
      tree op1 = ((cond)->exp.operands[1]);
      if ((((enum tree_code) (cond)->common.code) == EQ_EXPR || ((enum tree_code) (cond)->common.code) == NE_EXPR)
   && ((enum tree_code) (op0)->common.code) == SSA_NAME
   && ((enum tree_code) (((op0)->common.type))->common.code) == BOOLEAN_TYPE
   && is_gimple_min_invariant (op1))
 {
   if ((((enum tree_code) (cond)->common.code) == EQ_EXPR && true_arm)
       || (((enum tree_code) (cond)->common.code) == NE_EXPR && ! true_arm))
     {
       retval.src = op1;
     }
   else
     {
       if (integer_zerop (op1))
  retval.src = global_trees[TI_BOOLEAN_TRUE];
       else
  retval.src = global_trees[TI_BOOLEAN_FALSE];
     }
   retval.dst = op0;
   return retval;
 }
      if (((enum tree_code) (op0)->common.code) == SSA_NAME
   && (is_gimple_min_invariant (op1) || ((enum tree_code) (op1)->common.code) == SSA_NAME))
 {
   tree inverted = invert_truthvalue (cond);
   if (true_arm)
     {
       record_cond (cond, global_trees[TI_BOOLEAN_TRUE], block_avail_exprs_p);
       record_dominating_conditions (cond, block_avail_exprs_p);
       record_cond (inverted, global_trees[TI_BOOLEAN_FALSE], block_avail_exprs_p);
       if (((op1)->common.constant_flag))
  record_range (cond, bb, vrp_variables_p);
       if (((enum tree_code) (cond)->common.code) == EQ_EXPR)
  {
    retval.dst = op0;
    retval.src = op1;
    return retval;
  }
     }
   else
     {
       record_cond (inverted, global_trees[TI_BOOLEAN_TRUE], block_avail_exprs_p);
       record_dominating_conditions (inverted, block_avail_exprs_p);
       record_cond (cond, global_trees[TI_BOOLEAN_FALSE], block_avail_exprs_p);
       if (((op1)->common.constant_flag))
  record_range (inverted, bb, vrp_variables_p);
       if (((enum tree_code) (cond)->common.code) == NE_EXPR)
  {
    retval.dst = op0;
    retval.src = op1;
    return retval;
  }
     }
 }
    }
  return retval;
}
static hashval_t
avail_expr_hash (const void *p)
{
  stmt_ann_t ann = ((struct expr_hash_elt *)p)->ann;
  tree rhs = ((struct expr_hash_elt *)p)->rhs;
  hashval_t val = 0;
  size_t i;
  vuse_optype vuses;
  val = iterative_hash_expr (rhs, val);
  if (!ann)
    return val;
  vuses = get_vuse_ops (ann);
  for (i = 0; i < ((vuses) ? (vuses)->num_vuses : 0); i++)
    val = iterative_hash_expr ((get_use_from_ptr (get_vuse_op_ptr (((vuses)), ((i))))), val);
  return val;
}
static hashval_t
real_avail_expr_hash (const void *p)
{
  return ((const struct expr_hash_elt *)p)->hash;
}
static int
avail_expr_eq (const void *p1, const void *p2)
{
  stmt_ann_t ann1 = ((struct expr_hash_elt *)p1)->ann;
  tree rhs1 = ((struct expr_hash_elt *)p1)->rhs;
  stmt_ann_t ann2 = ((struct expr_hash_elt *)p2)->ann;
  tree rhs2 = ((struct expr_hash_elt *)p2)->rhs;
  if (rhs1 == rhs2 && ann1 == ann2)
    return 1;
  if (((enum tree_code) (rhs1)->common.code) != ((enum tree_code) (rhs2)->common.code))
    return 0;
  if ((((rhs1)->common.type) == ((rhs2)->common.type)
       || lang_hooks.types_compatible_p (((rhs1)->common.type), ((rhs2)->common.type)))
      && operand_equal_p (rhs1, rhs2, OEP_PURE_SAME))
    {
      vuse_optype ops1 = ((void *)0);
      vuse_optype ops2 = ((void *)0);
      size_t num_ops1 = 0;
      size_t num_ops2 = 0;
      size_t i;
      if (ann1)
 {
   ops1 = get_vuse_ops (ann1);
   num_ops1 = ((ops1) ? (ops1)->num_vuses : 0);
 }
      if (ann2)
 {
   ops2 = get_vuse_ops (ann2);
   num_ops2 = ((ops2) ? (ops2)->num_vuses : 0);
 }
      if (num_ops1 != num_ops2)
 return 0;
      for (i = 0; i < num_ops1; i++)
 if ((get_use_from_ptr (get_vuse_op_ptr (((ops1)), ((i))))) != (get_use_from_ptr (get_vuse_op_ptr (((ops2)), ((i))))))
   return 0;
      return 1;
    }
  return 0;
}
static void
register_definitions_for_stmt (stmt_ann_t ann, varray_type *block_defs_p)
{
  def_optype defs;
  v_may_def_optype v_may_defs;
  v_must_def_optype v_must_defs;
  unsigned int i;
  defs = get_def_ops (ann);
  for (i = 0; i < ((defs) ? (defs)->num_defs : 0); i++)
    {
      tree def = (get_def_from_ptr (get_def_op_ptr (((defs)), ((i)))));
      register_new_def (def, block_defs_p);
    }
  v_may_defs = get_v_may_def_ops (ann);
  for (i = 0; i < ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0); i++)
    {
      register_new_def ((get_def_from_ptr (get_v_may_def_result_ptr (((v_may_defs)), ((i))))), block_defs_p);
    }
  v_must_defs = get_v_must_def_ops (ann);
  for (i = 0; i < ((v_must_defs) ? (v_must_defs)->num_v_must_defs : 0); i++)
    {
      register_new_def ((get_def_from_ptr (get_v_must_def_op_ptr (((v_must_defs)), ((i))))), block_defs_p);
    }
}
void
walk_dominator_tree (struct dom_walk_data *walk_data, basic_block bb)
{
  void *bd = ((void *)0);
  basic_block dest;
  block_stmt_iterator bsi;
  if (walk_data->initialize_block_local_data)
    {
      unsigned char recycled;
      if (((walk_data->free_block_data)->elements_used) > 0)
 {
   bd = ((walk_data->free_block_data)->data.generic[(walk_data->free_block_data)->elements_used - 1]);
   do { ((walk_data->free_block_data)->elements_used--); } while (0);
   recycled = 1;
 }
      else
 {
   bd = xcalloc (1, walk_data->block_local_data_size);
   recycled = 0;
 }
      do { if ((walk_data->block_data_stack)->elements_used >= (walk_data->block_data_stack)->num_elements) (((walk_data->block_data_stack)) = varray_grow ((walk_data->block_data_stack), 2 * (walk_data->block_data_stack)->num_elements)); (walk_data->block_data_stack)->data.generic[(walk_data->block_data_stack)->elements_used++] = (bd); } while (0);
      walk_data->initialize_block_local_data (walk_data, bb, recycled);
    }
  if (walk_data->before_dom_children_before_stmts)
    (*walk_data->before_dom_children_before_stmts) (walk_data, bb);
  if (walk_data->before_dom_children_walk_stmts)
    {
      if (walk_data->walk_stmts_backward)
 for (bsi = bsi_last (bb); !bsi_end_p (bsi); bsi_prev (&bsi))
   (*walk_data->before_dom_children_walk_stmts) (walk_data, bb, bsi);
      else
 for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))
   (*walk_data->before_dom_children_walk_stmts) (walk_data, bb, bsi);
    }
  if (walk_data->before_dom_children_after_stmts)
    (*walk_data->before_dom_children_after_stmts) (walk_data, bb);
  for (dest = first_dom_son (walk_data->dom_direction, bb);
       dest;
       dest = next_dom_son (walk_data->dom_direction, dest))
    {
      if (dest->pred)
 walk_dominator_tree (walk_data, dest);
    }
  if (walk_data->after_dom_children_before_stmts)
    (*walk_data->after_dom_children_before_stmts) (walk_data, bb);
  if (walk_data->after_dom_children_walk_stmts)
    {
      if (walk_data->walk_stmts_backward)
 for (bsi = bsi_last (bb); !bsi_end_p (bsi); bsi_prev (&bsi))
   (*walk_data->after_dom_children_walk_stmts) (walk_data, bb, bsi);
      else
 for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))
   (*walk_data->after_dom_children_walk_stmts) (walk_data, bb, bsi);
    }
  if (walk_data->after_dom_children_after_stmts)
    (*walk_data->after_dom_children_after_stmts) (walk_data, bb);
  if (walk_data->initialize_block_local_data)
    {
      do { if ((walk_data->free_block_data)->elements_used >= (walk_data->free_block_data)->num_elements) (((walk_data->free_block_data)) = varray_grow ((walk_data->free_block_data), 2 * (walk_data->free_block_data)->num_elements)); (walk_data->free_block_data)->data.generic[(walk_data->free_block_data)->elements_used++] = (bd); } while (0);
      do { ((walk_data->block_data_stack)->elements_used--); } while (0);
    }
}
void
init_walk_dominator_tree (struct dom_walk_data *walk_data)
{
  if (walk_data->initialize_block_local_data)
    {
      walk_data->free_block_data = varray_init (2, VARRAY_DATA_GENERIC, "freelist ");
      walk_data->block_data_stack = varray_init (2, VARRAY_DATA_GENERIC, "block_data");
    }
  else
    {
      walk_data->free_block_data = ((void *)0);
      walk_data->block_data_stack = ((void *)0);
    }
}
void
fini_walk_dominator_tree (struct dom_walk_data *walk_data)
{
  if (walk_data->initialize_block_local_data)
    {
      while (((walk_data->free_block_data)->elements_used) > 0)
 {
   free (((walk_data->free_block_data)->data.generic[(walk_data->free_block_data)->elements_used - 1]));
   do { ((walk_data->free_block_data)->elements_used--); } while (0);
 }
    }
}
struct tailcall
{
  basic_block call_block;
  block_stmt_iterator call_bsi;
  unsigned char tail_recursion;
  tree mult, add;
  struct tailcall *next;
};
static tree m_acc, a_acc;
static unsigned char suitable_for_tail_opt_p (void);
static unsigned char optimize_tail_call (struct tailcall *, unsigned char);
static void eliminate_tail_call (struct tailcall *);
static void find_tail_calls (basic_block, struct tailcall **);
static unsigned char
suitable_for_tail_opt_p (void)
{
  int i;
  if ((cfun->stdarg))
    return 0;
  for (i = 0; i < (int) ((referenced_vars)->elements_used); i++)
    {
      tree var = ((referenced_vars)->data.tree1[i]);
      if (decl_function_context (var) == current_function_decl
   && !((var)->common.static_flag)
   && var_ann (var)->mem_tag_kind == NOT_A_TAG
   && is_call_clobbered (var))
 return 0;
    }
  return 1;
}
static unsigned char
suitable_for_tail_call_opt_p (void)
{
  if ((cfun->calls_alloca))
    return 0;
  if (0 && current_function_has_exception_handlers ())
    return 0;
  if ((cfun->calls_setjmp))
    return 0;
  return 1;
}
static tree
independent_of_stmt_p (tree expr, tree at, block_stmt_iterator bsi)
{
  basic_block bb, call_bb, at_bb;
  edge e;
  if (is_gimple_min_invariant (expr))
    return expr;
  if (((enum tree_code) (expr)->common.code) != SSA_NAME)
    return (tree) ((void *)0);
  at_bb = bb_for_stmt (at);
  call_bb = bb_for_stmt (bsi_stmt (bsi));
  for (bb = call_bb; bb != at_bb; bb = bb->succ->dest)
    bb->aux = &bb->aux;
  bb->aux = &bb->aux;
  while (1)
    {
      at = (expr)->common.chain;
      bb = bb_for_stmt (at);
      if (!bb || !bb->aux)
 break;
      if (bb == call_bb)
 {
   for (; !bsi_end_p (bsi); bsi_next (&bsi))
     if (bsi_stmt (bsi) == at)
       break;
   if (!bsi_end_p (bsi))
     expr = (tree) ((void *)0);
   break;
 }
      if (((enum tree_code) (at)->common.code) != PHI_NODE)
 {
   expr = (tree) ((void *)0);
   break;
 }
      for (e = bb->pred; e; e = e->pred_next)
 if (e->src->aux)
   break;
      if (!e)
 fancy_abort ("gcc.c", 144878, "?");
      expr = get_use_from_ptr (get_phi_arg_def_ptr ((((at))), ((phi_arg_from_edge ((at),(e))))));
    }
  for (bb = call_bb; bb != at_bb; bb = bb->succ->dest)
    bb->aux = ((void *)0);
  bb->aux = ((void *)0);
  return expr;
}
static unsigned char
process_assignment (tree ass, tree stmt, block_stmt_iterator call, tree *m,
      tree *a, tree *ass_var)
{
  tree op0, op1, non_ass_var;
  tree dest = ((ass)->exp.operands[0]);
  tree src = ((ass)->exp.operands[1]);
  enum tree_code code = ((enum tree_code) (src)->common.code);
  tree src_var = src;
  while ((((enum tree_code) (src_var)->common.code) == NOP_EXPR || ((enum tree_code) (src_var)->common.code) == CONVERT_EXPR || ((enum tree_code) (src_var)->common.code) == NON_LVALUE_EXPR) && ((src_var)->exp.operands[0]) != global_trees[TI_ERROR_MARK] && (((((src_var)->common.type))->type.mode) == ((((((src_var)->exp.operands[0]))->common.type))->type.mode))) (src_var) = ((src_var)->exp.operands[0]);
  if (((enum tree_code) (src_var)->common.code) == SSA_NAME)
    {
      if (src_var != *ass_var)
 return 0;
      *ass_var = dest;
      return 1;
    }
  if (tree_code_type[(int) (code)] != '2')
    return 0;
  op0 = ((src)->exp.operands[0]);
  op1 = ((src)->exp.operands[1]);
  if (op0 == *ass_var
      && (non_ass_var = independent_of_stmt_p (op1, stmt, call)))
    ;
  else if (op1 == *ass_var
    && (non_ass_var = independent_of_stmt_p (op0, stmt, call)))
    ;
  else
    return 0;
  switch (code)
    {
    case PLUS_EXPR:
      if (*a)
 return 0;
      *a = non_ass_var;
      *ass_var = dest;
      return 1;
    case MULT_EXPR:
      if (*a || *m)
 return 0;
      *m = non_ass_var;
      *ass_var = dest;
      return 1;
    default:
      return 0;
    }
}
static tree
propagate_through_phis (tree var, edge e)
{
  basic_block dest = e->dest;
  tree phi;
  for (phi = phi_nodes (dest); phi; phi = (((phi))->common.chain))
    if (get_use_from_ptr (get_phi_arg_def_ptr ((((phi))), ((phi_arg_from_edge ((phi),(e)))))) == var)
      return get_def_from_ptr (get_phi_result_ptr (phi));
  return var;
}
static void
find_tail_calls (basic_block bb, struct tailcall **ret)
{
  tree ass_var, ret_var, stmt, func, param, args, call = (tree) ((void *)0);
  block_stmt_iterator bsi, absi;
  unsigned char tail_recursion;
  struct tailcall *nw;
  edge e;
  tree m, a;
  basic_block abb;
  stmt_ann_t ann;
  if (bb->succ->succ_next)
    return;
  for (bsi = bsi_last (bb); !bsi_end_p (bsi); bsi_prev (&bsi))
    {
      stmt = bsi_stmt (bsi);
      if (((enum tree_code) (stmt)->common.code) == LABEL_EXPR)
 continue;
      get_stmt_operands (stmt);
      if (((enum tree_code) (stmt)->common.code) == MODIFY_EXPR)
 {
   ass_var = ((stmt)->exp.operands[0]);
   call = ((stmt)->exp.operands[1]);
 }
      else
 {
   ass_var = (tree) ((void *)0);
   call = stmt;
 }
      if (((enum tree_code) (call)->common.code) == CALL_EXPR)
 break;
      ann = stmt_ann (stmt);
      if (((get_v_may_def_ops (ann)) ? (get_v_may_def_ops (ann))->num_v_may_defs : 0)
          || ((get_v_must_def_ops (ann)) ? (get_v_must_def_ops (ann))->num_v_must_defs : 0)
   || ((get_vuse_ops (ann)) ? (get_vuse_ops (ann))->num_vuses : 0))
 return;
    }
  if (bsi_end_p (bsi))
    {
      for (e = bb->pred; e; e = e->pred_next)
 find_tail_calls (e->src, ret);
      return;
    }
  tail_recursion = 0;
  func = get_callee_fndecl (call);
  if (func == current_function_decl)
    {
      for (param = ((func)->decl.arguments), args = ((call)->exp.operands[1]);
    param && args;
    param = ((param)->common.chain), args = ((args)->common.chain))
 {
   tree arg = ((args)->list.value1);
   if (param != arg
       && (!is_gimple_reg_type (((param)->common.type))
    || !lang_hooks.types_compatible_p (((param)->common.type),
           ((arg)->common.type))))
     break;
 }
      if (!args && !param)
 tail_recursion = 1;
    }
  m = (tree) ((void *)0);
  a = (tree) ((void *)0);
  abb = bb;
  absi = bsi;
  while (1)
    {
      bsi_next (&absi);
      while (bsi_end_p (absi))
 {
   ass_var = propagate_through_phis (ass_var, abb->succ);
   abb = abb->succ->dest;
   absi = bsi_start (abb);
 }
      stmt = bsi_stmt (absi);
      if (((enum tree_code) (stmt)->common.code) == LABEL_EXPR)
 continue;
      if (((enum tree_code) (stmt)->common.code) == RETURN_EXPR)
 break;
      if (((enum tree_code) (stmt)->common.code) != MODIFY_EXPR)
 return;
      if (!process_assignment (stmt, stmt, bsi, &m, &a, &ass_var))
 return;
    }
  ret_var = ((stmt)->exp.operands[0]);
  if (ret_var
      && ((enum tree_code) (ret_var)->common.code) == MODIFY_EXPR)
    {
      tree ret_op = ((ret_var)->exp.operands[1]);
      while ((((enum tree_code) (ret_op)->common.code) == NOP_EXPR || ((enum tree_code) (ret_op)->common.code) == CONVERT_EXPR || ((enum tree_code) (ret_op)->common.code) == NON_LVALUE_EXPR) && ((ret_op)->exp.operands[0]) != global_trees[TI_ERROR_MARK] && (((((ret_op)->common.type))->type.mode) == ((((((ret_op)->exp.operands[0]))->common.type))->type.mode))) (ret_op) = ((ret_op)->exp.operands[0]);
      if (!tail_recursion
   && ((enum tree_code) (ret_op)->common.code) != SSA_NAME)
 return;
      if (!process_assignment (ret_var, stmt, bsi, &m, &a, &ass_var))
 return;
      ret_var = ((ret_var)->exp.operands[0]);
    }
  if (ret_var
      && (ret_var != ass_var))
    return;
  if (!tail_recursion && (m || a))
    return;
  nw = xmalloc (sizeof (struct tailcall));
  nw->call_block = bb;
  nw->call_bsi = bsi;
  nw->tail_recursion = tail_recursion;
  nw->mult = m;
  nw->add = a;
  nw->next = *ret;
  *ret = nw;
}
static void
adjust_accumulator_values (block_stmt_iterator bsi, tree m, tree a, edge back)
{
  tree stmt, var, phi, tmp;
  tree ret_type = ((((current_function_decl)->decl.result))->common.type);
  tree a_acc_arg = a_acc, m_acc_arg = m_acc;
  if (a)
    {
      if (m_acc)
 {
   if (integer_onep (a))
     var = m_acc;
   else
     {
       stmt = build (MODIFY_EXPR, ret_type, (tree) ((void *)0),
       build (MULT_EXPR, ret_type, m_acc, a));
       tmp = create_tmp_var (ret_type, "acc_tmp");
       add_referenced_tmp_var (tmp);
       var = make_ssa_name (tmp, stmt);
       ((stmt)->exp.operands[0]) = var;
       bsi_insert_after (&bsi, stmt, BSI_NEW_STMT);
     }
 }
      else
 var = a;
      stmt = build (MODIFY_EXPR, ret_type, (tree) ((void *)0),
      build (PLUS_EXPR, ret_type, a_acc, var));
      var = make_ssa_name ((a_acc)->ssa_name.var, stmt);
      ((stmt)->exp.operands[0]) = var;
      bsi_insert_after (&bsi, stmt, BSI_NEW_STMT);
      a_acc_arg = var;
    }
  if (m)
    {
      stmt = build (MODIFY_EXPR, ret_type, (tree) ((void *)0),
      build (MULT_EXPR, ret_type, m_acc, m));
      var = make_ssa_name ((m_acc)->ssa_name.var, stmt);
      ((stmt)->exp.operands[0]) = var;
      bsi_insert_after (&bsi, stmt, BSI_NEW_STMT);
      m_acc_arg = var;
    }
  if (a_acc)
    {
      for (phi = phi_nodes (back->dest); phi; phi = (((phi))->common.chain))
 if (get_def_from_ptr (get_phi_result_ptr (phi)) == a_acc)
   break;
      add_phi_arg (&phi, a_acc_arg, back);
    }
  if (m_acc)
    {
      for (phi = phi_nodes (back->dest); phi; phi = (((phi))->common.chain))
 if (get_def_from_ptr (get_phi_result_ptr (phi)) == m_acc)
   break;
      add_phi_arg (&phi, m_acc_arg, back);
    }
}
static void
adjust_return_value (basic_block bb, tree m, tree a)
{
  tree ret_stmt = last_stmt (bb), ret_var, var, stmt, tmp;
  tree ret_type = ((((current_function_decl)->decl.result))->common.type);
  block_stmt_iterator bsi = bsi_last (bb);
  if (((enum tree_code) (ret_stmt)->common.code) != RETURN_EXPR)
    fancy_abort ("gcc.c", 145229, "?");
  ret_var = ((ret_stmt)->exp.operands[0]);
  if (!ret_var)
    return;
  if (((enum tree_code) (ret_var)->common.code) == MODIFY_EXPR)
    {
      ret_var->common.ann = (tree_ann_t) stmt_ann (ret_stmt);
      bsi_replace (&bsi, ret_var, 1);
      (((ret_var)->exp.operands[0]))->common.chain = ret_var;
      ret_var = ((ret_var)->exp.operands[0]);
      ret_stmt = build1_stat (RETURN_EXPR,((ret_stmt)->common.type),ret_var );
      bsi_insert_after (&bsi, ret_stmt, BSI_NEW_STMT);
    }
  if (m)
    {
      stmt = build (MODIFY_EXPR, ret_type, (tree) ((void *)0),
      build (MULT_EXPR, ret_type, m_acc, ret_var));
      tmp = create_tmp_var (ret_type, "acc_tmp");
      add_referenced_tmp_var (tmp);
      var = make_ssa_name (tmp, stmt);
      ((stmt)->exp.operands[0]) = var;
      bsi_insert_before (&bsi, stmt, BSI_NEW_STMT);
    }
  else
    var = ret_var;
  if (a)
    {
      stmt = build (MODIFY_EXPR, ret_type, (tree) ((void *)0),
      build (PLUS_EXPR, ret_type, a_acc, var));
      tmp = create_tmp_var (ret_type, "acc_tmp");
      add_referenced_tmp_var (tmp);
      var = make_ssa_name (tmp, stmt);
      ((stmt)->exp.operands[0]) = var;
      bsi_insert_before (&bsi, stmt, BSI_NEW_STMT);
    }
  ((ret_stmt)->exp.operands[0]) = var;
  modify_stmt (ret_stmt);
}
static void
eliminate_tail_call (struct tailcall *t)
{
  tree param, stmt, args, rslt, call;
  basic_block bb, first;
  edge e;
  tree phi;
  stmt_ann_t ann;
  v_may_def_optype v_may_defs;
  unsigned i;
  stmt = bsi_stmt (t->call_bsi);
  get_stmt_operands (stmt);
  ann = stmt_ann (stmt);
  bb = t->call_block;
  if (dump_file && (dump_flags & (1 << 3)))
    {
      fprintf (dump_file, "Eliminated tail recursion in bb %d : ",
        bb->index);
      print_generic_stmt (dump_file, stmt, (1 << 1));
      fprintf (dump_file, "\n");
    }
  if (((enum tree_code) (stmt)->common.code) == MODIFY_EXPR)
    stmt = ((stmt)->exp.operands[1]);
  first = ENTRY_BLOCK_PTR->succ->dest;
  e = redirect_edge_and_branch (t->call_block->succ, first);
  if (!e)
    fancy_abort ("gcc.c", 145312, "?");
  ((e)->insns.t) = (tree) ((void *)0);
  for (param = ((current_function_decl)->decl.arguments),
       args = ((stmt)->exp.operands[1]);
       param;
       param = ((param)->common.chain),
       args = ((args)->common.chain))
    {
      for (phi = phi_nodes (first); phi; phi = (((phi))->common.chain))
 if (param == (get_def_from_ptr (get_phi_result_ptr (phi)))->ssa_name.var)
   break;
      if (!phi)
 continue;
      add_phi_arg (&phi, ((args)->list.value1), e);
    }
  v_may_defs = get_v_may_def_ops (ann);
  for (i = 0; i < ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0); i++)
    {
      param = ((get_def_from_ptr (get_v_may_def_result_ptr (((v_may_defs)), ((i))))))->ssa_name.var;
      for (phi = phi_nodes (first); phi; phi = (((phi))->common.chain))
 if (param == (get_def_from_ptr (get_phi_result_ptr (phi)))->ssa_name.var)
   break;
      if (!phi)
 {
   tree name = var_ann (param)->default_def;
   tree new_name = make_ssa_name (param, (name)->common.chain);
   var_ann (param)->default_def = new_name;
   phi = create_phi_node (name, first);
   (name)->common.chain = phi;
   add_phi_arg (&phi, new_name, ENTRY_BLOCK_PTR->succ);
   if (first->pred->pred_next->pred_next)
     fancy_abort ("gcc.c", 145362, "?");
 }
      add_phi_arg (&phi, (get_use_from_ptr (get_v_may_def_op_ptr (((v_may_defs)), ((i))))), e);
    }
  adjust_accumulator_values (t->call_bsi, t->mult, t->add, e);
  call = bsi_stmt (t->call_bsi);
  if (((enum tree_code) (call)->common.code) == MODIFY_EXPR)
    {
      rslt = ((call)->exp.operands[0]);
      (rslt)->common.chain = build_empty_stmt ();
    }
  bsi_remove (&t->call_bsi);
}
static unsigned char
optimize_tail_call (struct tailcall *t, unsigned char opt_tailcalls)
{
  if (t->tail_recursion)
    {
      eliminate_tail_call (t);
      return 1;
    }
  if (opt_tailcalls)
    {
      tree stmt = bsi_stmt (t->call_bsi);
      if (((enum tree_code) (stmt)->common.code) == MODIFY_EXPR)
 stmt = ((stmt)->exp.operands[1]);
      if (((enum tree_code) (stmt)->common.code) != CALL_EXPR)
 fancy_abort ("gcc.c", 145403, "?");
      ((stmt)->common.addressable_flag) = 1;
      if (dump_file && (dump_flags & (1 << 3)))
        {
   fprintf (dump_file, "Found tail call ");
   print_generic_expr (dump_file, stmt, dump_flags);
   fprintf (dump_file, " in bb %i\n", t->call_block->index);
 }
    }
  return 0;
}
static void
tree_optimize_tail_calls_1 (unsigned char opt_tailcalls)
{
  edge e;
  unsigned char phis_constructed = 0;
  struct tailcall *tailcalls = ((void *)0), *act, *next;
  unsigned char changed = 0;
  basic_block first = ENTRY_BLOCK_PTR->succ->dest;
  tree stmt, param, ret_type, tmp, phi;
  if (!suitable_for_tail_opt_p ())
    return;
  if (opt_tailcalls)
    opt_tailcalls = suitable_for_tail_call_opt_p ();
  for (e = EXIT_BLOCK_PTR->pred; e; e = e->pred_next)
    {
      stmt = last_stmt (e->src);
      if (stmt
   && ((enum tree_code) (stmt)->common.code) == RETURN_EXPR)
 find_tail_calls (e->src, &tailcalls);
    }
  a_acc = m_acc = (tree) ((void *)0);
  for (act = tailcalls; act; act = act->next)
    {
      if (!act->tail_recursion)
 continue;
      if (!phis_constructed)
 {
   if (first->pred->pred_next)
     first = split_edge (ENTRY_BLOCK_PTR->succ);
   for (param = ((current_function_decl)->decl.arguments);
        param;
        param = ((param)->common.chain))
     if (var_ann (param)
  && (var_ann (param)->default_def
      && ((enum tree_code) (var_ann (param)->default_def)->common.code) == SSA_NAME))
     {
       tree name = var_ann (param)->default_def;
       tree new_name = make_ssa_name (param, (name)->common.chain);
       tree phi;
       var_ann (param)->default_def = new_name;
       phi = create_phi_node (name, first);
       (name)->common.chain = phi;
       add_phi_arg (&phi, new_name, first->pred);
     }
   phis_constructed = 1;
 }
      if (act->add && !a_acc)
 {
   ret_type = ((((current_function_decl)->decl.result))->common.type);
   tmp = create_tmp_var (ret_type, "add_acc");
   add_referenced_tmp_var (tmp);
   phi = create_phi_node (tmp, first);
   add_phi_arg (&phi, fold_convert (ret_type, global_trees[TI_INTEGER_ZERO]),
         first->pred);
   a_acc = get_def_from_ptr (get_phi_result_ptr (phi));
 }
      if (act->mult && !m_acc)
 {
   ret_type = ((((current_function_decl)->decl.result))->common.type);
   tmp = create_tmp_var (ret_type, "mult_acc");
   add_referenced_tmp_var (tmp);
   phi = create_phi_node (tmp, first);
   add_phi_arg (&phi, fold_convert (ret_type, global_trees[TI_INTEGER_ONE]),
         first->pred);
   m_acc = get_def_from_ptr (get_phi_result_ptr (phi));
 }
    }
  for (; tailcalls; tailcalls = next)
    {
      next = tailcalls->next;
      changed |= optimize_tail_call (tailcalls, opt_tailcalls);
      free (tailcalls);
    }
  if (a_acc || m_acc)
    {
      for (e = EXIT_BLOCK_PTR->pred; e; e = e->pred_next)
 {
   stmt = last_stmt (e->src);
   if (stmt
       && ((enum tree_code) (stmt)->common.code) == RETURN_EXPR)
     adjust_return_value (e->src, m_acc, a_acc);
 }
    }
  if (changed)
    {
      free_dominance_info (CDI_DOMINATORS);
      cleanup_tree_cfg ();
    }
}
static void
execute_tail_recursion (void)
{
  tree_optimize_tail_calls_1 (0);
}
static unsigned char
gate_tail_calls (void)
{
  return flag_optimize_sibling_calls != 0;
}
static void
execute_tail_calls (void)
{
  tree_optimize_tail_calls_1 (1);
}
struct tree_opt_pass pass_tail_recursion =
{
  "tailr",
  ((void *)0),
  execute_tail_recursion,
  ((void *)0),
  ((void *)0),
  0,
  0,
  (1 << 3) | (1 << 6),
  0,
  0,
  0,
  (1 << 0) | (1 << 3)
};
struct tree_opt_pass pass_tail_calls =
{
  "tailc",
  gate_tail_calls,
  execute_tail_calls,
  ((void *)0),
  ((void *)0),
  0,
  0,
  (1 << 3) | (1 << 6),
  0,
  0,
  0,
  (1 << 0) | (1 << 3)
};
struct lower_data
{
  tree block;
  tree return_statements;
};
static void lower_stmt (tree_stmt_iterator *, struct lower_data *);
static void lower_bind_expr (tree_stmt_iterator *, struct lower_data *);
static void lower_cond_expr (tree_stmt_iterator *, struct lower_data *);
static void lower_return_expr (tree_stmt_iterator *, struct lower_data *);
static unsigned char expand_var_p (tree);
static void
lower_function_body (void)
{
  struct lower_data data;
  tree *body_p = &((current_function_decl)->decl.saved_tree);
  tree bind = *body_p;
  tree_stmt_iterator i;
  tree t, x;
  if (((enum tree_code) (bind)->common.code) != BIND_EXPR)
    fancy_abort ("gcc.c", 145633, "?");
  data.block = ((current_function_decl)->decl.initial);
  ((data.block)->block.subblocks) = (tree) ((void *)0);
  (((data.block))->common.chain) = (tree) ((void *)0);
  ((data.block)->common.asm_written_flag) = 1;
  data.return_statements = (tree) ((void *)0);
  *body_p = alloc_stmt_list ();
  i = tsi_start (*body_p);
  tsi_link_after (&i, bind, TSI_NEW_STMT);
  lower_bind_expr (&i, &data);
  i = tsi_last (*body_p);
  if (block_may_fallthru (*body_p)
      && (data.return_statements == ((void *)0)
          || ((((data.return_statements)->list.value1))->exp.operands[0]) != ((void *)0)))
    {
      x = build (RETURN_EXPR, global_trees[TI_VOID_TYPE], ((void *)0));
      annotate_with_locus (x, cfun->function_end_locus);
      tsi_link_after (&i, x, TSI_CONTINUE_LINKING);
    }
  for (t = data.return_statements ; t ; t = ((t)->common.chain))
    {
      x = build (LABEL_EXPR, global_trees[TI_VOID_TYPE], ((t)->list.purpose));
      tsi_link_after (&i, x, TSI_CONTINUE_LINKING);
      x = ((t)->list.value1);
      ((x)->exp.locus = (((void *)0)));
      tsi_link_after (&i, x, TSI_CONTINUE_LINKING);
    }
  if (data.block != ((current_function_decl)->decl.initial))
    fancy_abort ("gcc.c", 145681, "?");
  ((data.block)->block.subblocks)
    = blocks_nreverse (((data.block)->block.subblocks));
  clear_block_marks (data.block);
}
struct tree_opt_pass pass_lower_cf =
{
  "lower",
  ((void *)0),
  lower_function_body,
  ((void *)0),
  ((void *)0),
  0,
  0,
  (1 << 0),
  (1 << 1),
  (1 << 0),
  0,
  (1 << 0)
};
void
lower_stmt_body (tree expr, struct lower_data *data)
{
  tree_stmt_iterator tsi;
  for (tsi = tsi_start (expr); !tsi_end_p (tsi); )
    lower_stmt (&tsi, data);
}
static void
lower_stmt (tree_stmt_iterator *tsi, struct lower_data *data)
{
  tree stmt = tsi_stmt (*tsi);
  if ((((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (stmt)->common.code))])) != 0) ? (stmt)->exp.locus : (location_t *)((void *)0)) != ((void *)0)) && data)
    ((stmt)->exp.block) = data->block;
  switch (((enum tree_code) (stmt)->common.code))
    {
    case BIND_EXPR:
      lower_bind_expr (tsi, data);
      return;
    case COND_EXPR:
      lower_cond_expr (tsi, data);
      return;
    case RETURN_EXPR:
      lower_return_expr (tsi, data);
      return;
    case TRY_FINALLY_EXPR:
    case TRY_CATCH_EXPR:
      lower_stmt_body (((stmt)->exp.operands[0]), data);
      lower_stmt_body (((stmt)->exp.operands[1]), data);
      break;
    case CATCH_EXPR:
      lower_stmt_body ((((stmt))->exp.operands[1]), data);
      break;
    case EH_FILTER_EXPR:
      lower_stmt_body ((((stmt))->exp.operands[1]), data);
      break;
    case NOP_EXPR:
    case ASM_EXPR:
    case MODIFY_EXPR:
    case CALL_EXPR:
    case GOTO_EXPR:
    case LABEL_EXPR:
    case VA_ARG_EXPR:
    case SWITCH_EXPR:
      break;
    default:
      print_node_brief (stderr, "", stmt, 0);
    case COMPOUND_EXPR:
      fancy_abort ("gcc.c", 145765, "?");
    }
  tsi_next (tsi);
}
static void
lower_bind_expr (tree_stmt_iterator *tsi, struct lower_data *data)
{
  tree old_block = data->block;
  tree stmt = tsi_stmt (*tsi);
  tree new_block = ((((stmt))->exp.operands[2]));
  if (new_block)
    {
      if (new_block == old_block)
 {
   if (new_block != ((current_function_decl)->decl.initial))
     fancy_abort ("gcc.c", 145788, "?");
   new_block = ((void *)0);
 }
      else
 {
   if (((new_block)->common.asm_written_flag))
     fancy_abort ("gcc.c", 145795, "?");
   ((new_block)->common.asm_written_flag) = 1;
   (((new_block))->common.chain) = ((old_block)->block.subblocks);
   ((old_block)->block.subblocks) = new_block;
   ((new_block)->block.subblocks) = (tree) ((void *)0);
   ((new_block)->block.supercontext) = old_block;
   data->block = new_block;
 }
    }
  record_vars (((((stmt))->exp.operands[0])));
  lower_stmt_body (((((stmt))->exp.operands[1])), data);
  if (new_block)
    {
      if (data->block != new_block)
 fancy_abort ("gcc.c", 145816, "?");
      ((new_block)->block.subblocks)
 = blocks_nreverse (((new_block)->block.subblocks));
      data->block = old_block;
    }
  tsi_link_before (tsi, ((((stmt))->exp.operands[1])), TSI_SAME_STMT);
  tsi_delink (tsi);
}
unsigned char
block_may_fallthru (tree block)
{
  tree stmt = expr_last (block);
  switch (stmt ? ((enum tree_code) (stmt)->common.code) : ERROR_MARK)
    {
    case GOTO_EXPR:
    case RETURN_EXPR:
    case RESX_EXPR:
    case SWITCH_EXPR:
      return 0;
    case COND_EXPR:
      if (block_may_fallthru (((((stmt))->exp.operands[1]))))
 return 1;
      return block_may_fallthru (((((stmt))->exp.operands[2])));
    case BIND_EXPR:
      return block_may_fallthru (((((stmt))->exp.operands[1])));
    case TRY_FINALLY_EXPR:
      return block_may_fallthru (((stmt)->exp.operands[1]));
    case MODIFY_EXPR:
      if (((enum tree_code) (((stmt)->exp.operands[1]))->common.code) == CALL_EXPR)
 stmt = ((stmt)->exp.operands[1]);
      else
 return 1;
    case CALL_EXPR:
      return (call_expr_flags (stmt) & 2) == 0;
    default:
      return 1;
    }
}
static void
lower_cond_expr (tree_stmt_iterator *tsi, struct lower_data *data)
{
  tree stmt = tsi_stmt (*tsi);
  unsigned char then_is_goto, else_is_goto;
  tree then_branch, else_branch;
  tree then_goto, else_goto;
  then_branch = ((((stmt))->exp.operands[1]));
  else_branch = ((((stmt))->exp.operands[2]));
  lower_stmt_body (then_branch, data);
  lower_stmt_body (else_branch, data);
  then_goto = expr_only (then_branch);
  then_is_goto = then_goto && simple_goto_p (then_goto);
  else_goto = expr_only (else_branch);
  else_is_goto = else_goto && simple_goto_p (else_goto);
  if (!then_is_goto || !else_is_goto)
    {
      tree then_label, else_label, end_label, t;
      then_label = (tree) ((void *)0);
      else_label = (tree) ((void *)0);
      end_label = (tree) ((void *)0);
      if (!then_is_goto)
 {
   t = build1_stat (LABEL_EXPR,global_trees[TI_VOID_TYPE],(tree) ((void *)0) );
   if (((then_branch)->common.side_effects_flag))
     then_label = t;
   else
     end_label = t;
   then_goto = build_and_jump (&(((t))->exp.operands[0]));
 }
      if (!else_is_goto)
 {
   t = build1_stat (LABEL_EXPR,global_trees[TI_VOID_TYPE],(tree) ((void *)0) );
   if (((else_branch)->common.side_effects_flag))
     else_label = t;
   else
     {
       if (end_label)
  {
    tsi_delink (tsi);
    return;
  }
       else
  end_label = t;
     }
   else_goto = build_and_jump (&(((t))->exp.operands[0]));
 }
      if (then_label)
 {
   unsigned char may_fallthru = block_may_fallthru (then_branch);
   tsi_link_after (tsi, then_label, TSI_CONTINUE_LINKING);
   tsi_link_after (tsi, then_branch, TSI_CONTINUE_LINKING);
   if (else_label && may_fallthru)
     {
       end_label = build1_stat (LABEL_EXPR,global_trees[TI_VOID_TYPE],(tree) ((void *)0) );
       t = build_and_jump (&(((end_label))->exp.operands[0]));
       tsi_link_after (tsi, t, TSI_CONTINUE_LINKING);
     }
 }
      if (else_label)
 {
   tsi_link_after (tsi, else_label, TSI_CONTINUE_LINKING);
   tsi_link_after (tsi, else_branch, TSI_CONTINUE_LINKING);
 }
      if (end_label)
 tsi_link_after (tsi, end_label, TSI_CONTINUE_LINKING);
    }
  ((((stmt))->exp.operands[1])) = then_goto;
  ((((stmt))->exp.operands[2])) = else_goto;
  tsi_next (tsi);
}
static void
lower_return_expr (tree_stmt_iterator *tsi, struct lower_data *data)
{
  tree stmt = tsi_stmt (*tsi);
  tree value1, t, label;
  value1 = ((stmt)->exp.operands[0]);
  if (value1 && ((enum tree_code) (value1)->common.code) == MODIFY_EXPR)
    value1 = ((value1)->exp.operands[1]);
  for (t = data->return_statements; t ; t = ((t)->common.chain))
    {
      tree tvalue = ((((t)->list.value1))->exp.operands[0]);
      if (tvalue && ((enum tree_code) (tvalue)->common.code) == MODIFY_EXPR)
 tvalue = ((tvalue)->exp.operands[1]);
      if (value1 == tvalue)
 {
   label = ((t)->list.purpose);
   goto found;
 }
    }
  label = create_artificial_label ();
  data->return_statements = tree_cons_stat (label,stmt,data->return_statements );
 found:
  t = build (GOTO_EXPR, global_trees[TI_VOID_TYPE], label);
  ((t)->exp.locus = (((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (stmt)->common.code))])) != 0) ? (stmt)->exp.locus : (location_t *)((void *)0))));
  tsi_link_before (tsi, t, TSI_SAME_STMT);
  tsi_delink (tsi);
}
void
record_vars (tree vars)
{
  for (; vars; vars = ((vars)->common.chain))
    {
      tree var = vars;
      if (((var)->decl.external_flag))
 continue;
      if (((enum tree_code) (var)->common.code) == FUNCTION_DECL)
 continue;
      cfun->unexpanded_var_list = tree_cons_stat ((tree) ((void *)0),var,cfun->unexpanded_var_list )
                                    ;
    }
}
static unsigned char
expand_var_p (tree var)
{
  struct var_ann_d *ann;
  if (((enum tree_code) (var)->common.code) != VAR_DECL)
    return 1;
  ann = var_ann (var);
  if (ann
      && ! ann->may_aliases
      && ! ann->used
      && ! ann->has_hidden_use
      && ! ((var)->common.addressable_flag)
      && ! ((var)->common.volatile_flag)
      && (((var)->decl.artificial_flag) || optimize >= 2))
    return 0;
  return 1;
}
static void
remove_useless_vars (void)
{
  tree var, *cell;
  for (cell = &cfun->unexpanded_var_list; *cell; )
    {
      var = ((*cell)->list.value1);
      if (!expand_var_p (var))
 {
   *cell = ((*cell)->common.chain);
   continue;
 }
      cell = &((*cell)->common.chain);
    }
}
void
expand_used_vars (void)
{
  tree cell;
  cfun->unexpanded_var_list = nreverse (cfun->unexpanded_var_list);
  for (cell = cfun->unexpanded_var_list; cell; cell = ((cell)->common.chain))
    expand_var (((cell)->list.value1));
  cfun->unexpanded_var_list = (tree) ((void *)0);
}
struct tree_opt_pass pass_remove_useless_vars =
{
  "vars",
  ((void *)0),
  remove_useless_vars,
  ((void *)0),
  ((void *)0),
  0,
  0,
  0,
  0,
  0,
  0,
  (1 << 0)
};
static tree stmt_list_cache;
tree
alloc_stmt_list (void)
{
  tree list = stmt_list_cache;
  if (list)
    {
      stmt_list_cache = ((list)->common.chain);
      memset (list, 0, sizeof(struct tree_common));
      ((list)->common.code = (STATEMENT_LIST));
    }
  else
    list = make_node_stat (STATEMENT_LIST );
  ((list)->common.type) = global_trees[TI_VOID_TYPE];
  return list;
}
void
free_stmt_list (tree t)
{
  ((t)->common.chain) = stmt_list_cache;
  stmt_list_cache = t;
}
void
tsi_link_before (tree_stmt_iterator *i, tree t, enum tsi_iterator_update mode)
{
  struct tree_statement_list_node *head, *tail, *cur;
  if (t == i->container)
    fancy_abort ("gcc.c", 146169, "?");
  if (((enum tree_code) (t)->common.code) == STATEMENT_LIST)
    {
      head = ((t)->stmt_list.head);
      tail = ((t)->stmt_list.tail);
      ((t)->stmt_list.head) = ((void *)0);
      ((t)->stmt_list.tail) = ((void *)0);
      free_stmt_list (t);
      if (!head || !tail)
 {
   if (head != tail)
     fancy_abort ("gcc.c", 146184, "?");
   return;
 }
    }
  else
    {
      head = ggc_alloc_stat (sizeof (*head) );
      head->prev = ((void *)0);
      head->next = ((void *)0);
      head->stmt = t;
      tail = head;
    }
  ((i->container)->common.side_effects_flag) = 1;
  cur = i->ptr;
  if (cur)
    {
      head->prev = cur->prev;
      if (head->prev)
 head->prev->next = head;
      else
 ((i->container)->stmt_list.head) = head;
      tail->next = cur;
      cur->prev = tail;
    }
  else
    {
      if (((i->container)->stmt_list.tail))
 fancy_abort ("gcc.c", 146215, "?");
      ((i->container)->stmt_list.head) = head;
      ((i->container)->stmt_list.tail) = tail;
    }
  switch (mode)
    {
    case TSI_NEW_STMT:
    case TSI_CONTINUE_LINKING:
    case TSI_CHAIN_START:
      i->ptr = head;
      break;
    case TSI_CHAIN_END:
      i->ptr = tail;
      break;
    case TSI_SAME_STMT:
      if (!cur)
 fancy_abort ("gcc.c", 146233, "?");
      break;
    }
}
void
tsi_link_after (tree_stmt_iterator *i, tree t, enum tsi_iterator_update mode)
{
  struct tree_statement_list_node *head, *tail, *cur;
  if (t == i->container)
    fancy_abort ("gcc.c", 146247, "?");
  if (((enum tree_code) (t)->common.code) == STATEMENT_LIST)
    {
      head = ((t)->stmt_list.head);
      tail = ((t)->stmt_list.tail);
      ((t)->stmt_list.head) = ((void *)0);
      ((t)->stmt_list.tail) = ((void *)0);
      free_stmt_list (t);
      if (!head || !tail)
 {
   if (head != tail)
     fancy_abort ("gcc.c", 146262, "?");
   return;
 }
    }
  else
    {
      head = ggc_alloc_stat (sizeof (*head) );
      head->prev = ((void *)0);
      head->next = ((void *)0);
      head->stmt = t;
      tail = head;
    }
  ((i->container)->common.side_effects_flag) = 1;
  cur = i->ptr;
  if (cur)
    {
      tail->next = cur->next;
      if (tail->next)
 tail->next->prev = tail;
      else
 ((i->container)->stmt_list.tail) = tail;
      head->prev = cur;
      cur->next = head;
    }
  else
    {
      if (((i->container)->stmt_list.tail))
 fancy_abort ("gcc.c", 146293, "?");
      ((i->container)->stmt_list.head) = head;
      ((i->container)->stmt_list.tail) = tail;
    }
  switch (mode)
    {
    case TSI_NEW_STMT:
    case TSI_CHAIN_START:
      i->ptr = head;
      break;
    case TSI_CONTINUE_LINKING:
    case TSI_CHAIN_END:
      i->ptr = tail;
      break;
    case TSI_SAME_STMT:
      if (!cur)
        fancy_abort ("gcc.c", 146311, "?");
      break;
    }
}
void
tsi_delink (tree_stmt_iterator *i)
{
  struct tree_statement_list_node *cur, *next, *prev;
  cur = i->ptr;
  next = cur->next;
  prev = cur->prev;
  if (prev)
    prev->next = next;
  else
    ((i->container)->stmt_list.head) = next;
  if (next)
    next->prev = prev;
  else
    ((i->container)->stmt_list.tail) = prev;
  if (!next && !prev)
    ((i->container)->common.side_effects_flag) = 0;
  i->ptr = next;
}
tree
tsi_split_statement_list_after (const tree_stmt_iterator *i)
{
  struct tree_statement_list_node *cur, *next;
  tree old_sl, new_sl;
  cur = i->ptr;
  if (cur == ((void *)0))
    fancy_abort ("gcc.c", 146355, "?");
  next = cur->next;
  old_sl = i->container;
  new_sl = alloc_stmt_list ();
  ((new_sl)->common.side_effects_flag) = 1;
  ((new_sl)->stmt_list.head) = next;
  ((new_sl)->stmt_list.tail) = ((old_sl)->stmt_list.tail);
  ((old_sl)->stmt_list.tail) = cur;
  cur->next = ((void *)0);
  next->prev = ((void *)0);
  return new_sl;
}
tree
tsi_split_statement_list_before (tree_stmt_iterator *i)
{
  struct tree_statement_list_node *cur, *prev;
  tree old_sl, new_sl;
  cur = i->ptr;
  if (cur == ((void *)0))
    fancy_abort ("gcc.c", 146383, "?");
  prev = cur->prev;
  old_sl = i->container;
  new_sl = alloc_stmt_list ();
  ((new_sl)->common.side_effects_flag) = 1;
  i->container = new_sl;
  ((new_sl)->stmt_list.head) = cur;
  ((new_sl)->stmt_list.tail) = ((old_sl)->stmt_list.tail);
  ((old_sl)->stmt_list.tail) = prev;
  cur->prev = ((void *)0);
  prev->next = ((void *)0);
  return new_sl;
}
tree
expr_first (tree expr)
{
  if (expr == (tree) ((void *)0))
    return expr;
  if (((enum tree_code) (expr)->common.code) == STATEMENT_LIST)
    {
      struct tree_statement_list_node *n = ((expr)->stmt_list.head);
      return n ? n->stmt : (tree) ((void *)0);
    }
  while (((enum tree_code) (expr)->common.code) == COMPOUND_EXPR)
    expr = ((expr)->exp.operands[0]);
  return expr;
}
tree
expr_last (tree expr)
{
  if (expr == (tree) ((void *)0))
    return expr;
  if (((enum tree_code) (expr)->common.code) == STATEMENT_LIST)
    {
      struct tree_statement_list_node *n = ((expr)->stmt_list.tail);
      return n ? n->stmt : (tree) ((void *)0);
    }
  while (((enum tree_code) (expr)->common.code) == COMPOUND_EXPR)
    expr = ((expr)->exp.operands[1]);
  return expr;
}
tree
expr_only (tree expr)
{
  if (expr == (tree) ((void *)0))
    return (tree) ((void *)0);
  if (((enum tree_code) (expr)->common.code) == STATEMENT_LIST)
    {
      struct tree_statement_list_node *n = ((expr)->stmt_list.tail);
      if (n && ((expr)->stmt_list.head) == n)
 return n->stmt;
      else
 return (tree) ((void *)0);
    }
  if (((enum tree_code) (expr)->common.code) == COMPOUND_EXPR)
    return (tree) ((void *)0);
  return expr;
}
const struct ggc_root_tab gt_ggc_rd_gt_tree_iterator_h[] = {
  { &stmt_list_cache, 1, sizeof (stmt_list_cache), ((void *)0), ((void *)0) },
  { ((void *)0), 0, 0, ((void *)0), ((void *)0) }
};
static tree free_phinodes[10 - 2];
static unsigned long free_phinode_count;
static int ideal_phi_node_len (int);
static void resize_phi_node (tree *, int);
void
init_phinodes (void)
{
  int i;
  for (i = 0; i < 10 - 2; i++)
    free_phinodes[i] = ((void *)0);
  free_phinode_count = 0;
}
void
fini_phinodes (void)
{
  int i;
  for (i = 0; i < 10 - 2; i++)
    free_phinodes[i] = ((void *)0);
  free_phinode_count = 0;
}
static int
ideal_phi_node_len (int len)
{
  size_t size, new_size;
  int log2, new_len;
  if (len < 2)
    len = 2;
  size = sizeof (struct tree_phi_node) + (len - 1) * sizeof (struct phi_arg_d);
  log2 = ceil_log2 (size);
  new_size = 1 << log2;
  new_len = len + (new_size - size) / sizeof (struct phi_arg_d);
  return new_len;
}
tree
make_phi_node (tree var, int len)
{
  tree phi;
  int size;
  int bucket = 10 - 2;
  len = ideal_phi_node_len (len);
  size = sizeof (struct tree_phi_node) + (len - 1) * sizeof (struct phi_arg_d);
  if (free_phinode_count)
    for (bucket = len - 2; bucket < 10 - 2; bucket++)
      if (free_phinodes[bucket])
 break;
  if (bucket < 10 - 2
      && (free_phinodes[bucket])->phi.capacity >= len)
    {
      free_phinode_count--;
      phi = free_phinodes[bucket];
      free_phinodes[bucket] = (((free_phinodes[bucket]))->common.chain);
    }
  else
    {
      phi = ggc_alloc_stat (size );
    }
  memset (phi, 0, size);
  ((phi)->common.code = (PHI_NODE));
  (phi)->phi.capacity = len;
  if (((enum tree_code) (var)->common.code) == SSA_NAME)
    ((*((get_phi_result_ptr (phi)).def)) = ((var)));
  else
    ((*((get_phi_result_ptr (phi)).def)) = ((make_ssa_name (var, phi))));
  return phi;
}
void
release_phi_node (tree phi)
{
  int bucket;
  int len = (phi)->phi.capacity;
  bucket = len > 10 - 1 ? 10 - 1 : len;
  bucket -= 2;
  (((phi))->common.chain) = free_phinodes[bucket];
  free_phinodes[bucket] = phi;
  free_phinode_count++;
}
static void
resize_phi_node (tree *phi, int len)
{
  int size, old_size;
  tree new_phi;
  int i, old_len, bucket = 10 - 2;
  old_size = (sizeof (struct tree_phi_node)
      + ((*phi)->phi.capacity - 1) * sizeof (struct phi_arg_d));
  size = sizeof (struct tree_phi_node) + (len - 1) * sizeof (struct phi_arg_d);
  if (free_phinode_count)
    for (bucket = len - 2; bucket < 10 - 2; bucket++)
      if (free_phinodes[bucket])
 break;
  if (bucket < 10 - 2
      && (free_phinodes[bucket])->phi.capacity >= len)
    {
      free_phinode_count--;
      new_phi = free_phinodes[bucket];
      free_phinodes[bucket] = (((free_phinodes[bucket]))->common.chain);
    }
  else
    {
      new_phi = ggc_alloc_stat (size );
    }
  memcpy (new_phi, *phi, old_size);
  old_len = (new_phi)->phi.capacity;
  (new_phi)->phi.capacity = len;
  for (i = old_len; i < len; i++)
    {
      ((*((get_phi_arg_def_ptr (((new_phi)), ((i)))).use)) = (((tree) ((void *)0))));
      ((new_phi)->phi.a[i]).e = ((void *)0);
      ((new_phi)->phi.a[i]).nonzero = 0;
    }
  *phi = new_phi;
}
tree
create_phi_node (tree var, basic_block bb)
{
  tree phi;
  phi = make_phi_node (var, bb_ann (bb)->num_preds);
  (phi)->phi.rewritten = 0;
  (((phi))->common.chain) = phi_nodes (bb);
  bb_ann (bb)->phi_nodes = phi;
  set_bb_for_stmt (phi, bb);
  return phi;
}
void
add_phi_arg (tree *phi, tree def, edge e)
{
  int i = (*phi)->phi.num_args;
  if (i >= (*phi)->phi.capacity)
    {
      tree old_phi = *phi;
      resize_phi_node (phi, ideal_phi_node_len (i + 4));
      (get_def_from_ptr (get_phi_result_ptr (*phi)))->common.chain = *phi;
      if (*phi != old_phi)
 {
   release_phi_node (old_phi);
   if (phi_nodes (e->dest) == old_phi)
     bb_ann (e->dest)->phi_nodes = *phi;
   else
     {
       tree p;
       for (p = phi_nodes (e->dest);
     p && (((p))->common.chain) != old_phi;
     p = (((p))->common.chain))
  ;
       if (!p)
  fancy_abort ("gcc.c", 146834, "?");
       (((p))->common.chain) = *phi;
     }
 }
    }
  if (e->flags & 2)
    {
      (def)->common.asm_written_flag = 1;
      (get_def_from_ptr (get_phi_result_ptr (*phi)))->common.asm_written_flag = 1;
    }
  ((*((get_phi_arg_def_ptr (((*phi)), ((i)))).use)) = ((def)));
  ((*phi)->phi.a[i]).e = e;
  ((*phi)->phi.a[i]).nonzero = 0;
  (*phi)->phi.num_args++;
}
void
remove_phi_arg (tree phi, basic_block block)
{
  int i, num_elem = (phi)->phi.num_args;
  for (i = 0; i < num_elem; i++)
    {
      basic_block src_bb;
      src_bb = ((phi)->phi.a[i]).e->src;
      if (src_bb == block)
 {
   remove_phi_arg_num (phi, i);
   return;
 }
    }
}
void
remove_phi_arg_num (tree phi, int i)
{
  int num_elem = (phi)->phi.num_args;
  if (i != num_elem - 1)
    {
      ((*((get_phi_arg_def_ptr (((phi)), ((i)))).use)) = ((get_use_from_ptr (get_phi_arg_def_ptr (((phi)), ((num_elem - 1)))))));
      ((phi)->phi.a[i]).e = ((phi)->phi.a[num_elem - 1]).e;
      ((phi)->phi.a[i]).nonzero = ((phi)->phi.a[num_elem - 1]).nonzero;
    }
  ((*((get_phi_arg_def_ptr (((phi)), ((num_elem - 1)))).use)) = (((tree) ((void *)0))));
  ((phi)->phi.a[num_elem - 1]).e = ((void *)0);
  ((phi)->phi.a[num_elem - 1]).nonzero = 0;
  (phi)->phi.num_args--;
  if ((phi)->phi.num_args == 0)
    remove_phi_node (phi, ((void *)0), bb_for_stmt (phi));
}
void
remove_phi_node (tree phi, tree prev, basic_block bb)
{
  if (prev)
    {
      (((prev))->common.chain) = (((phi))->common.chain);
      release_ssa_name (get_def_from_ptr (get_phi_result_ptr (phi)));
      release_phi_node (phi);
    }
  else if (phi == phi_nodes (bb))
    {
      bb_ann (bb)->phi_nodes = (((phi))->common.chain);
      release_ssa_name (get_def_from_ptr (get_phi_result_ptr (phi)));
      release_phi_node (phi);
    }
  else
    {
      tree prev, t;
      prev = (tree) ((void *)0);
      for (t = phi_nodes (bb); t && t != phi; t = (((t))->common.chain))
 prev = t;
      if (t)
 remove_phi_node (t, prev, bb);
    }
}
void
remove_all_phi_nodes_for (bitmap vars)
{
  basic_block bb;
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      tree phi, new_phi_list, last_phi, next;
      last_phi = new_phi_list = (tree) ((void *)0);
      for (phi = phi_nodes (bb), next = ((void *)0); phi; phi = next)
 {
   tree var = (get_def_from_ptr (get_phi_result_ptr (phi)))->ssa_name.var;
   next = (((phi))->common.chain);
   if (!bitmap_bit_p (vars, var_ann (var)->uid))
     {
       (phi)->phi.rewritten = 1;
       if (new_phi_list == (tree) ((void *)0))
  new_phi_list = last_phi = phi;
       else
  {
    (((last_phi))->common.chain) = phi;
    last_phi = phi;
  }
     }
   else
     {
       release_ssa_name (get_def_from_ptr (get_phi_result_ptr (phi)));
       release_phi_node (phi);
     }
 }
      if (last_phi)
 (((last_phi))->common.chain) = (tree) ((void *)0);
      bb_ann (bb)->phi_nodes = new_phi_list;
    }
}
const struct ggc_root_tab gt_ggc_rd_gt_tree_phinodes_h[] = {
  { &free_phinodes, 1, sizeof (free_phinodes), ((void *)0), ((void *)0) },
  { ((void *)0), 0, 0, ((void *)0), ((void *)0) }
};
varray_type ssa_names;
static tree free_ssanames;
void
init_ssanames (void)
{
  ssa_names = varray_init (50, VARRAY_DATA_TREE, "ssa_names table");
  do { if ((ssa_names)->elements_used >= (ssa_names)->num_elements) (((ssa_names)) = varray_grow ((ssa_names), 2 * (ssa_names)->num_elements)); (ssa_names)->data.tree1[(ssa_names)->elements_used++] = ((tree) ((void *)0)); } while (0);
  free_ssanames = ((void *)0);
}
void
fini_ssanames (void)
{
  free_ssanames = ((void *)0);
}
tree
make_ssa_name (tree var, tree stmt)
{
  tree t;
  if (free_ssanames)
    {
      unsigned int save_version;
      t = free_ssanames;
      free_ssanames = ((free_ssanames)->common.chain);
      save_version = (t)->ssa_name.version;
      memset (t, 0, tree_size (t));
      ((t)->common.code = (SSA_NAME));
      (t)->ssa_name.version = save_version;
    }
  else
    {
      t = make_node_stat (SSA_NAME );
      (t)->ssa_name.version = ((ssa_names)->elements_used);
      do { if ((ssa_names)->elements_used >= (ssa_names)->num_elements) (((ssa_names)) = varray_grow ((ssa_names), 2 * (ssa_names)->num_elements)); (ssa_names)->data.tree1[(ssa_names)->elements_used++] = (t); } while (0);
    }
  ((t)->common.type) = ((var)->common.type);
  (t)->ssa_name.var = var;
  (t)->common.chain = stmt;
  (t)->ssa_name.ptr_info = ((void *)0);
  return t;
}
void
release_ssa_name (tree var)
{
  if (! (var)->common.nothrow_flag)
    {
      (var)->common.nothrow_flag = 1;
      ((var)->common.chain) = free_ssanames;
      free_ssanames = var;
    }
}
tree
duplicate_ssa_name (tree name, tree stmt)
{
  tree new_name = make_ssa_name ((name)->ssa_name.var, stmt);
  struct ptr_info_def *old_ptr_info = (name)->ssa_name.ptr_info;
  struct ptr_info_def *new_ptr_info;
  if (!old_ptr_info)
    return new_name;
  new_ptr_info = ggc_alloc_stat (sizeof (struct ptr_info_def) );
  *new_ptr_info = *old_ptr_info;
  if (old_ptr_info->pt_vars)
    {
      new_ptr_info->pt_vars = bitmap_initialize (((void *)0), 0);
      bitmap_copy (new_ptr_info->pt_vars, old_ptr_info->pt_vars);
    }
  (new_name)->ssa_name.ptr_info = new_ptr_info;
  return new_name;
}
const struct ggc_root_tab gt_ggc_r_gt_tree_ssanames_h[] = {
  {
    &free_ssanames,
    1,
    sizeof (free_ssanames),
    &gt_ggc_mx_lang_tree_node,
    &gt_pch_nx_lang_tree_node
  },
  { ((void *)0), 0, 0, ((void *)0), ((void *)0) }
};
static bitmap sra_candidates;
static bitmap needs_copy_in;
static bitmap sra_type_decomp_cache;
static bitmap sra_type_inst_cache;
struct sra_elt
{
  struct sra_elt *parent;
  struct sra_elt *children;
  struct sra_elt *sibling;
  tree element;
  tree type;
  tree replacement;
  unsigned int n_uses;
  unsigned int n_copies;
  unsigned char is_scalar;
  unsigned char cannot_scalarize;
  unsigned char use_block_copy;
  unsigned char visited;
};
static htab_t sra_map;
static struct obstack sra_obstack;
static void dump_sra_elt_name (FILE *, struct sra_elt *);
extern void debug_sra_elt_name (struct sra_elt *);
static unsigned char
is_sra_candidate_decl (tree decl)
{
  return (tree_code_type[(int) (((enum tree_code) (decl)->common.code))] == 'd') && bitmap_bit_p (sra_candidates, var_ann (decl)->uid);
}
static unsigned char
is_sra_scalar_type (tree type)
{
  enum tree_code code = ((enum tree_code) (type)->common.code);
  return (code == INTEGER_TYPE || code == REAL_TYPE || code == VECTOR_TYPE
   || code == ENUMERAL_TYPE || code == BOOLEAN_TYPE
   || code == CHAR_TYPE || code == POINTER_TYPE || code == OFFSET_TYPE
   || code == REFERENCE_TYPE);
}
static unsigned char
type_can_be_decomposed_p (tree type)
{
  unsigned int cache = ((((type)->type.main_variant))->type.uid) * 2;
  tree t;
  if (bitmap_bit_p (sra_type_decomp_cache, cache+0))
    return 1;
  if (bitmap_bit_p (sra_type_decomp_cache, cache+1))
    return 0;
  if (((type)->type.size) == ((void *)0) || integer_zerop (((type)->type.size)))
    goto fail;
  switch (((enum tree_code) (type)->common.code))
    {
    case RECORD_TYPE:
      {
 unsigned char saw_one_field = 0;
 for (t = ((type)->type.value1s); t ; t = ((t)->common.chain))
   if (((enum tree_code) (t)->common.code) == FIELD_DECL)
     {
       if (((t)->decl.bit_field_flag)
    && (tree_low_cst (((t)->decl.size), 1)
        != ((((t)->common.type))->type.precision)))
  goto fail;
       saw_one_field = 1;
     }
 if (!saw_one_field)
   goto fail;
      }
      break;
    case ARRAY_TYPE:
      t = ((type)->type.value1s);
      if (t == ((void *)0))
 goto fail;
      if (((t)->type.minval) == ((void *)0) || !((((t)->type.minval))->common.constant_flag))
 goto fail;
      if (((t)->type.maxval) == ((void *)0) || !((((t)->type.maxval))->common.constant_flag))
 goto fail;
      break;
    case COMPLEX_TYPE:
      break;
    default:
      goto fail;
    }
  bitmap_set_bit (sra_type_decomp_cache, cache+0);
  return 1;
 fail:
  bitmap_set_bit (sra_type_decomp_cache, cache+1);
  return 0;
}
static unsigned char
decl_can_be_decomposed_p (tree var)
{
  if (is_sra_scalar_type (((var)->common.type)))
    return 0;
  if (!is_gimple_non_addressable (var))
    {
      if (dump_file && (dump_flags & (1 << 3)))
 {
   fprintf (dump_file, "Cannot scalarize variable ");
   print_generic_expr (dump_file, var, dump_flags);
   fprintf (dump_file, " because it must live in memory\n");
 }
      return 0;
    }
  if (((var)->common.volatile_flag))
    {
      if (dump_file && (dump_flags & (1 << 3)))
 {
   fprintf (dump_file, "Cannot scalarize variable ");
   print_generic_expr (dump_file, var, dump_flags);
   fprintf (dump_file, " because it is declared volatile\n");
 }
      return 0;
    }
  if (!type_can_be_decomposed_p (((var)->common.type)))
    {
      if (dump_file && (dump_flags & (1 << 3)))
 {
   fprintf (dump_file, "Cannot scalarize variable ");
   print_generic_expr (dump_file, var, dump_flags);
   fprintf (dump_file, " because its type cannot be decomposed\n");
 }
      return 0;
    }
  return 1;
}
static unsigned char
type_can_instantiate_all_elements (tree type)
{
  if (is_sra_scalar_type (type))
    return 1;
  if (!type_can_be_decomposed_p (type))
    return 0;
  switch (((enum tree_code) (type)->common.code))
    {
    case RECORD_TYPE:
      {
 unsigned int cache = ((((type)->type.main_variant))->type.uid) * 2;
 tree f;
 if (bitmap_bit_p (sra_type_inst_cache, cache+0))
   return 1;
 if (bitmap_bit_p (sra_type_inst_cache, cache+1))
   return 0;
 for (f = ((type)->type.value1s); f ; f = ((f)->common.chain))
   if (((enum tree_code) (f)->common.code) == FIELD_DECL)
     {
       if (!type_can_instantiate_all_elements (((f)->common.type)))
  {
    bitmap_set_bit (sra_type_inst_cache, cache+1);
    return 0;
  }
     }
 bitmap_set_bit (sra_type_inst_cache, cache+0);
 return 1;
      }
    case ARRAY_TYPE:
      return type_can_instantiate_all_elements (((type)->common.type));
    case COMPLEX_TYPE:
      return 1;
    default:
      fancy_abort ("gcc.c", 147590, "?");
    }
}
static unsigned char
can_completely_scalarize_p (struct sra_elt *elt)
{
  struct sra_elt *c;
  if (elt->cannot_scalarize)
    return 0;
  for (c = elt->children; c ; c = c->sibling)
    if (!can_completely_scalarize_p (c))
      return 0;
  return 1;
}
static hashval_t
sra_hash_tree (tree t)
{
  switch (((enum tree_code) (t)->common.code))
    {
    case VAR_DECL:
    case PARM_DECL:
    case RESULT_DECL:
    case FIELD_DECL:
      return ((t)->decl.uid);
    case INTEGER_CST:
      return (((t)->int_cst.int_cst).low) ^ (((t)->int_cst.int_cst).high);
    default:
      fancy_abort ("gcc.c", 147628, "?");
    }
}
static hashval_t
sra_elt_hash (const void *x)
{
  const struct sra_elt *e = x;
  const struct sra_elt *p;
  hashval_t h;
  h = sra_hash_tree (e->element);
  for (p = e->parent; p ; p = p->parent)
    h = (h * 65521) ^ sra_hash_tree (p->element);
  return h;
}
static int
sra_elt_eq (const void *x, const void *y)
{
  const struct sra_elt *a = x;
  const struct sra_elt *b = y;
  if (a->parent != b->parent)
    return 0;
  if (a->element == b->element)
    return 1;
  if (((enum tree_code) (a->element)->common.code) == INTEGER_CST
      && ((enum tree_code) (b->element)->common.code) == INTEGER_CST)
    return tree_int_cst_equal (a->element, b->element);
  else
    return 0;
}
static struct sra_elt *
lookup_element (struct sra_elt *parent, tree child, tree type,
  enum insert_option insert)
{
  struct sra_elt dummy;
  struct sra_elt **slot;
  struct sra_elt *elt;
  dummy.parent = parent;
  dummy.element = child;
  slot = (struct sra_elt **) htab_find_slot (sra_map, &dummy, insert);
  if (!slot && insert == NO_INSERT)
    return ((void *)0);
  elt = *slot;
  if (!elt && insert == INSERT)
    {
      *slot = elt = (( ((&sra_obstack))->temp = ((sizeof (*elt))), ((((&sra_obstack))->chunk_limit - ((&sra_obstack))->next_free < ((&sra_obstack))->temp) ? (_obstack_newchunk (((&sra_obstack)), ((&sra_obstack))->temp), 0) : 0), (((&sra_obstack))->next_free += (((&sra_obstack))->temp))), ( (((&sra_obstack))->next_free == ((&sra_obstack))->object_base ? ((((&sra_obstack))->maybe_empty_object = 1), 0) : 0), ((&sra_obstack))->temp = ((((&sra_obstack))->object_base) - (char *) 0), ((&sra_obstack))->next_free = (((((((&sra_obstack))->next_free) - (char *) 0)+((&sra_obstack))->alignment_mask) & ~ (((&sra_obstack))->alignment_mask)) + (char *) 0), ((((&sra_obstack))->next_free - (char *) ((&sra_obstack))->chunk > ((&sra_obstack))->chunk_limit - (char *) ((&sra_obstack))->chunk) ? (((&sra_obstack))->next_free = ((&sra_obstack))->chunk_limit) : 0), ((&sra_obstack))->object_base = ((&sra_obstack))->next_free, ((((&sra_obstack))->temp) + (char *) 0)));
      memset (elt, 0, sizeof (*elt));
      elt->parent = parent;
      elt->element = child;
      elt->type = type;
      elt->is_scalar = is_sra_scalar_type (type);
      if (parent)
 {
   elt->sibling = parent->children;
   parent->children = elt;
 }
      if (((enum tree_code) (child)->common.code) == PARM_DECL)
 {
   elt->n_copies = 1;
   bitmap_set_bit (needs_copy_in, var_ann (child)->uid);
 }
    }
  return elt;
}
static unsigned char
is_valid_const_index (tree expr)
{
  tree dom, t, index = ((expr)->exp.operands[1]);
  if (((enum tree_code) (index)->common.code) != INTEGER_CST)
    return 0;
  dom = ((((((expr)->exp.operands[0]))->common.type))->type.value1s);
  if (dom == ((void *)0))
    return 0;
  t = ((dom)->type.minval);
  if (!t || ((enum tree_code) (t)->common.code) != INTEGER_CST)
    return 0;
  if (tree_int_cst_lt (index, t))
    return 0;
  t = ((dom)->type.maxval);
  if (!t || ((enum tree_code) (t)->common.code) != INTEGER_CST)
    return 0;
  if (tree_int_cst_lt (t, index))
    return 0;
  return 1;
}
static struct sra_elt *
maybe_lookup_element_for_expr (tree expr)
{
  struct sra_elt *elt;
  tree child;
  switch (((enum tree_code) (expr)->common.code))
    {
    case VAR_DECL:
    case PARM_DECL:
    case RESULT_DECL:
      if (is_sra_candidate_decl (expr))
 return lookup_element (((void *)0), expr, ((expr)->common.type), INSERT);
      return ((void *)0);
    case ARRAY_REF:
      if (is_valid_const_index (expr))
        child = ((expr)->exp.operands[1]);
      else
 return ((void *)0);
      break;
    case COMPONENT_REF:
      if (((enum tree_code) (((((expr)->exp.operands[0]))->common.type))->common.code) != RECORD_TYPE)
 return ((void *)0);
      child = ((expr)->exp.operands[1]);
      break;
    case REALPART_EXPR:
      child = global_trees[TI_INTEGER_ZERO];
      break;
    case IMAGPART_EXPR:
      child = global_trees[TI_INTEGER_ONE];
      break;
    default:
      return ((void *)0);
    }
  elt = maybe_lookup_element_for_expr (((expr)->exp.operands[0]));
  if (elt)
    return lookup_element (elt, child, ((expr)->common.type), INSERT);
  return ((void *)0);
}
struct sra_walk_fns
{
  void (*use) (struct sra_elt *elt, tree *expr_p,
        block_stmt_iterator *bsi, unsigned char is_output);
  void (*copy) (struct sra_elt *lhs_elt, struct sra_elt *rhs_elt,
  block_stmt_iterator *bsi);
  unsigned char (*init) (struct sra_elt *elt, tree value1, block_stmt_iterator *bsi);
  void (*ldst) (struct sra_elt *elt, tree other,
  block_stmt_iterator *bsi, unsigned char is_output);
  unsigned char initial_scan;
};
static void
sra_walk_expr (tree *expr_p, block_stmt_iterator *bsi, unsigned char is_output,
        const struct sra_walk_fns *fns)
{
  tree expr = *expr_p;
  tree inner = expr;
  unsigned char disable_scalarization = 0;
  while (1)
    switch (((enum tree_code) (inner)->common.code))
      {
      case VAR_DECL:
      case PARM_DECL:
      case RESULT_DECL:
 if (is_sra_candidate_decl (inner))
   {
     struct sra_elt *elt = maybe_lookup_element_for_expr (expr);
     if (disable_scalarization)
       elt->cannot_scalarize = 1;
     else
       fns->use (elt, expr_p, bsi, is_output);
   }
 return;
      case ARRAY_REF:
 if (!is_valid_const_index (inner))
   {
     disable_scalarization = 1;
     goto use_all;
   }
 if (((inner)->exp.operands[2]) || ((inner)->exp.operands[3]))
   goto use_all;
 inner = ((inner)->exp.operands[0]);
 break;
      case COMPONENT_REF:
 if (((enum tree_code) (((((inner)->exp.operands[0]))->common.type))->common.code) != RECORD_TYPE)
   goto use_all;
 if (((inner)->exp.operands[2]))
   goto use_all;
 inner = ((inner)->exp.operands[0]);
 break;
      case REALPART_EXPR:
      case IMAGPART_EXPR:
 inner = ((inner)->exp.operands[0]);
 break;
      case BIT_FIELD_REF:
 goto use_all;
      case ARRAY_RANGE_REF:
 goto use_all;
      case VIEW_CONVERT_EXPR:
      case NOP_EXPR:
 goto use_all;
      use_all:
        expr_p = &((inner)->exp.operands[0]);
 inner = expr = *expr_p;
 break;
      default:
 return;
      }
}
static void
sra_walk_tree_list (tree list, block_stmt_iterator *bsi, unsigned char is_output,
      const struct sra_walk_fns *fns)
{
  tree op;
  for (op = list; op ; op = ((op)->common.chain))
    sra_walk_expr (&((op)->list.value1), bsi, is_output, fns);
}
static void
sra_walk_call_expr (tree expr, block_stmt_iterator *bsi,
      const struct sra_walk_fns *fns)
{
  sra_walk_tree_list (((expr)->exp.operands[1]), bsi, 0, fns);
}
static void
sra_walk_asm_expr (tree expr, block_stmt_iterator *bsi,
     const struct sra_walk_fns *fns)
{
  sra_walk_tree_list ((((expr))->exp.operands[2]), bsi, 0, fns);
  sra_walk_tree_list ((((expr))->exp.operands[1]), bsi, 1, fns);
}
static void
sra_walk_modify_expr (tree expr, block_stmt_iterator *bsi,
        const struct sra_walk_fns *fns)
{
  struct sra_elt *lhs_elt, *rhs_elt;
  tree lhs, rhs;
  lhs = ((expr)->exp.operands[0]);
  rhs = ((expr)->exp.operands[1]);
  lhs_elt = maybe_lookup_element_for_expr (lhs);
  rhs_elt = maybe_lookup_element_for_expr (rhs);
  if (lhs_elt && rhs_elt)
    {
      fns->copy (lhs_elt, rhs_elt, bsi);
      return;
    }
  if (lhs_elt)
    {
      if ((((enum tree_code) (rhs)->common.code) == COMPLEX_EXPR
    || ((enum tree_code) (rhs)->common.code) == COMPLEX_CST
    || ((enum tree_code) (rhs)->common.code) == CONSTRUCTOR)
   && fns->init (lhs_elt, rhs, bsi))
 ;
      else if (((enum tree_code) (rhs)->common.code) == VAR_DECL
        && ((rhs)->common.static_flag)
        && ((rhs)->common.readonly_flag)
        && targetm.binds_local_p (rhs)
        && ((rhs)->decl.initial)
        && fns->init (lhs_elt, ((rhs)->decl.initial), bsi))
 ;
      else if (!lhs_elt->is_scalar && is_gimple_addr_expr_arg (rhs))
 fns->ldst (lhs_elt, rhs, bsi, 1);
      else
 fns->use (lhs_elt, &((expr)->exp.operands[0]), bsi, 1);
    }
  else
    {
      sra_walk_expr (&((expr)->exp.operands[0]), bsi, 1, fns);
    }
  if (rhs_elt)
    {
      if (!rhs_elt->is_scalar)
 fns->ldst (rhs_elt, lhs, bsi, 0);
      else
 fns->use (rhs_elt, &((expr)->exp.operands[1]), bsi, 0);
    }
  else if (((enum tree_code) (rhs)->common.code) == CALL_EXPR)
    sra_walk_call_expr (rhs, bsi, fns);
  else
    sra_walk_expr (&((expr)->exp.operands[1]), bsi, 0, fns);
}
static void
sra_walk_function (const struct sra_walk_fns *fns)
{
  basic_block bb;
  block_stmt_iterator si, ni;
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    for (si = bsi_start (bb); !bsi_end_p (si); si = ni)
      {
 tree stmt, t;
 stmt_ann_t ann;
 stmt = bsi_stmt (si);
 ann = stmt_ann (stmt);
 ni = si;
 bsi_next (&ni);
 if (((get_v_may_def_ops (ann)) ? (get_v_may_def_ops (ann))->num_v_may_defs : 0) == 0
     && ((get_vuse_ops (ann)) ? (get_vuse_ops (ann))->num_vuses : 0) == 0
     && ((get_v_must_def_ops (ann)) ? (get_v_must_def_ops (ann))->num_v_must_defs : 0) == 0)
   continue;
 switch (((enum tree_code) (stmt)->common.code))
   {
   case RETURN_EXPR:
     t = ((stmt)->exp.operands[0]);
     if (((enum tree_code) (t)->common.code) == MODIFY_EXPR)
       sra_walk_expr (&((t)->exp.operands[1]), &si, 0, fns);
     else
       sra_walk_expr (&((stmt)->exp.operands[0]), &si, 0, fns);
     break;
   case MODIFY_EXPR:
     sra_walk_modify_expr (stmt, &si, fns);
     break;
   case CALL_EXPR:
     sra_walk_call_expr (stmt, &si, fns);
     break;
   case ASM_EXPR:
     sra_walk_asm_expr (stmt, &si, fns);
     break;
   default:
     break;
   }
      }
}
static unsigned char
find_candidates_for_sra (void)
{
  size_t i;
  unsigned char any_set = 0;
  for (i = 0; i < ((referenced_vars)->elements_used); i++)
    {
      tree var = ((referenced_vars)->data.tree1[i]);
      if (decl_can_be_decomposed_p (var))
        {
          bitmap_set_bit (sra_candidates, var_ann (var)->uid);
          any_set = 1;
        }
    }
  return any_set;
}
static void
scan_use (struct sra_elt *elt, tree *expr_p ,
   block_stmt_iterator *bsi ,
   unsigned char is_output )
{
  elt->n_uses += 1;
}
static void
scan_copy (struct sra_elt *lhs_elt, struct sra_elt *rhs_elt,
    block_stmt_iterator *bsi )
{
  lhs_elt->n_copies += 1;
  rhs_elt->n_copies += 1;
}
static unsigned char
scan_init (struct sra_elt *lhs_elt, tree rhs ,
    block_stmt_iterator *bsi )
{
  lhs_elt->n_copies += 1;
  return 1;
}
static void
scan_ldst (struct sra_elt *elt, tree other ,
    block_stmt_iterator *bsi ,
    unsigned char is_output )
{
  elt->n_copies += 1;
}
static void
scan_dump (struct sra_elt *elt)
{
  struct sra_elt *c;
  dump_sra_elt_name (dump_file, elt);
  fprintf (dump_file, ": n_uses=%u n_copies=%u\n", elt->n_uses, elt->n_copies);
  for (c = elt->children; c ; c = c->sibling)
    scan_dump (c);
}
static void
scan_function (void)
{
  static const struct sra_walk_fns fns = {
    scan_use, scan_copy, scan_init, scan_ldst, 1
  };
  sra_walk_function (&fns);
  if (dump_file && (dump_flags & (1 << 3)))
    {
      size_t i;
      fputs_unlocked ("\nScan results:\n", dump_file);
      do { bitmap_element *ptr_ = (sra_candidates)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (i) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); { tree var = ((referenced_vars)->data.tree1[i]); struct sra_elt *elt = lookup_element (((void *)0), var, ((void *)0), NO_INSERT); if (elt) scan_dump (elt); }; if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
   ;
      fputc_unlocked ('\n', dump_file);
    }
}
static void
build_element_name_1 (struct sra_elt *elt)
{
  tree t;
  char buffer[32];
  if (elt->parent)
    {
      build_element_name_1 (elt->parent);
      ( (((&sra_obstack)->next_free + 1 > (&sra_obstack)->chunk_limit) ? (_obstack_newchunk ((&sra_obstack), 1), 0) : 0), (*((&sra_obstack)->next_free)++ = ('$')));
      if (((enum tree_code) (elt->parent->type)->common.code) == COMPLEX_TYPE)
 {
   if (elt->element == global_trees[TI_INTEGER_ZERO])
     ( (&sra_obstack)->temp = (4), (((&sra_obstack)->next_free + (&sra_obstack)->temp > (&sra_obstack)->chunk_limit) ? (_obstack_newchunk ((&sra_obstack), (&sra_obstack)->temp), 0) : 0), memcpy (((&sra_obstack)->next_free), (("real")), ((&sra_obstack)->temp)), (&sra_obstack)->next_free += (&sra_obstack)->temp);
   else
     ( (&sra_obstack)->temp = (4), (((&sra_obstack)->next_free + (&sra_obstack)->temp > (&sra_obstack)->chunk_limit) ? (_obstack_newchunk ((&sra_obstack), (&sra_obstack)->temp), 0) : 0), memcpy (((&sra_obstack)->next_free), (("imag")), ((&sra_obstack)->temp)), (&sra_obstack)->next_free += (&sra_obstack)->temp);
   return;
 }
    }
  t = elt->element;
  if (((enum tree_code) (t)->common.code) == INTEGER_CST)
    {
      sprintf (buffer, "%ld", (((t)->int_cst.int_cst).low));
      ( (&sra_obstack)->temp = (strlen (buffer)), (((&sra_obstack)->next_free + (&sra_obstack)->temp > (&sra_obstack)->chunk_limit) ? (_obstack_newchunk ((&sra_obstack), (&sra_obstack)->temp), 0) : 0), memcpy (((&sra_obstack)->next_free), ((buffer)), ((&sra_obstack)->temp)), (&sra_obstack)->next_free += (&sra_obstack)->temp);
    }
  else
    {
      tree name = ((t)->decl.name);
      if (name)
 ( (&sra_obstack)->temp = (((name)->identifier.id.len)), (((&sra_obstack)->next_free + (&sra_obstack)->temp > (&sra_obstack)->chunk_limit) ? (_obstack_newchunk ((&sra_obstack), (&sra_obstack)->temp), 0) : 0), memcpy (((&sra_obstack)->next_free), ((((const char *) (name)->identifier.id.str))), ((&sra_obstack)->temp)), (&sra_obstack)->next_free += (&sra_obstack)->temp)
                                 ;
      else
 {
   sprintf (buffer, "D%u", ((t)->decl.uid));
   ( (&sra_obstack)->temp = (strlen (buffer)), (((&sra_obstack)->next_free + (&sra_obstack)->temp > (&sra_obstack)->chunk_limit) ? (_obstack_newchunk ((&sra_obstack), (&sra_obstack)->temp), 0) : 0), memcpy (((&sra_obstack)->next_free), ((buffer)), ((&sra_obstack)->temp)), (&sra_obstack)->next_free += (&sra_obstack)->temp);
 }
    }
}
static char *
build_element_name (struct sra_elt *elt)
{
  build_element_name_1 (elt);
  ( (((&sra_obstack)->next_free + 1 > (&sra_obstack)->chunk_limit) ? (_obstack_newchunk ((&sra_obstack), 1), 0) : 0), (*((&sra_obstack)->next_free)++ = ('\0')));
  return ( ((&sra_obstack)->next_free == (&sra_obstack)->object_base ? (((&sra_obstack)->maybe_empty_object = 1), 0) : 0), (&sra_obstack)->temp = (((&sra_obstack)->object_base) - (char *) 0), (&sra_obstack)->next_free = ((((((&sra_obstack)->next_free) - (char *) 0)+(&sra_obstack)->alignment_mask) & ~ ((&sra_obstack)->alignment_mask)) + (char *) 0), (((&sra_obstack)->next_free - (char *) (&sra_obstack)->chunk > (&sra_obstack)->chunk_limit - (char *) (&sra_obstack)->chunk) ? ((&sra_obstack)->next_free = (&sra_obstack)->chunk_limit) : 0), (&sra_obstack)->object_base = (&sra_obstack)->next_free, (((&sra_obstack)->temp) + (char *) 0));
}
static void
instantiate_element (struct sra_elt *elt)
{
  struct sra_elt *base_elt;
  tree var, base;
  for (base_elt = elt; base_elt->parent; base_elt = base_elt->parent)
    continue;
  base = base_elt->element;
  elt->replacement = var = make_rename_temp (elt->type, "SR");
  ((var)->decl.locus) = ((base)->decl.locus);
  ((var)->common.nowarning_flag) = ((base)->common.nowarning_flag);
  ((var)->decl.artificial_flag) = ((base)->decl.artificial_flag);
  if (((base)->decl.name) && !((base)->decl.ignored_flag))
    {
      char *pretty_name = build_element_name (elt);
      ((var)->decl.name) = get_identifier (pretty_name);
      ( (&sra_obstack)->temp = (char *) (pretty_name) - (char *) (&sra_obstack)->chunk, (((&sra_obstack)->temp > 0 && (&sra_obstack)->temp < (&sra_obstack)->chunk_limit - (char *) (&sra_obstack)->chunk) ? (int) ((&sra_obstack)->next_free = (&sra_obstack)->object_base = (&sra_obstack)->temp + (char *) (&sra_obstack)->chunk) : (((obstack_free) ((&sra_obstack), (&sra_obstack)->temp + (char *) (&sra_obstack)->chunk), 0), 0)));
    }
  if (dump_file)
    {
      fputs_unlocked ("  ", dump_file);
      dump_sra_elt_name (dump_file, elt);
      fputs_unlocked (" -> ", dump_file);
      print_generic_expr (dump_file, var, dump_flags);
      fputc_unlocked ('\n', dump_file);
    }
}
static void
decide_instantiation_1 (struct sra_elt *elt, unsigned int parent_uses,
   unsigned int parent_copies)
{
  if (dump_file && !elt->parent)
    {
      fputs_unlocked ("Initial instantiation for ", dump_file);
      dump_sra_elt_name (dump_file, elt);
      fputc_unlocked ('\n', dump_file);
    }
  if (elt->cannot_scalarize)
    return;
  if (elt->is_scalar)
    {
      if (elt->n_uses + elt->n_copies + parent_copies > parent_uses)
 instantiate_element (elt);
    }
  else
    {
      struct sra_elt *c;
      unsigned int this_uses = elt->n_uses + parent_uses;
      unsigned int this_copies = elt->n_copies + parent_copies;
      for (c = elt->children; c ; c = c->sibling)
 decide_instantiation_1 (c, this_uses, this_copies);
    }
}
static unsigned int
sum_instantiated_sizes (struct sra_elt *elt, unsigned long *sizep)
{
  if (elt->replacement)
    {
      *sizep += (((((elt->type)->type.size_unit))->int_cst.int_cst).low);
      return 1;
    }
  else
    {
      struct sra_elt *c;
      unsigned int count = 0;
      for (c = elt->children; c ; c = c->sibling)
 count += sum_instantiated_sizes (c, sizep);
      return count;
    }
}
static void instantiate_missing_elements (struct sra_elt *elt);
static void
instantiate_missing_elements_1 (struct sra_elt *elt, tree child, tree type)
{
  struct sra_elt *sub = lookup_element (elt, child, type, INSERT);
  if (sub->is_scalar)
    {
      if (sub->replacement == ((void *)0))
 instantiate_element (sub);
    }
  else
    instantiate_missing_elements (sub);
}
static void
instantiate_missing_elements (struct sra_elt *elt)
{
  tree type = elt->type;
  switch (((enum tree_code) (type)->common.code))
    {
    case RECORD_TYPE:
      {
 tree f;
 for (f = ((type)->type.value1s); f ; f = ((f)->common.chain))
   if (((enum tree_code) (f)->common.code) == FIELD_DECL)
     instantiate_missing_elements_1 (elt, f, ((f)->common.type));
 break;
      }
    case ARRAY_TYPE:
      {
 tree i, max, subtype;
 i = ((((type)->type.value1s))->type.minval);
 max = ((((type)->type.value1s))->type.maxval);
 subtype = ((type)->common.type);
 while (1)
   {
     instantiate_missing_elements_1 (elt, i, subtype);
     if (tree_int_cst_equal (i, max))
       break;
     i = int_const_binop (PLUS_EXPR, i, global_trees[TI_INTEGER_ONE], 1);
   }
 break;
      }
    case COMPLEX_TYPE:
      type = ((type)->common.type);
      instantiate_missing_elements_1 (elt, global_trees[TI_INTEGER_ZERO], type);
      instantiate_missing_elements_1 (elt, global_trees[TI_INTEGER_ONE], type);
      break;
    default:
      fancy_abort ("gcc.c", 148468, "?");
    }
}
static unsigned char
decide_block_copy (struct sra_elt *elt)
{
  struct sra_elt *c;
  unsigned char any_inst;
  if (elt->cannot_scalarize)
    {
      elt->use_block_copy = 1;
      if (dump_file)
 {
   fputs_unlocked ("Scalarization disabled for ", dump_file);
   dump_sra_elt_name (dump_file, elt);
   fputc_unlocked ('\n', dump_file);
 }
      return 0;
    }
  if (elt->n_uses == 0 && elt->n_copies == 0)
    ;
  else if (!elt->is_scalar)
    {
      tree size_tree = ((elt->type)->type.size_unit);
      unsigned char use_block_copy = 1;
      if (host_integerp (size_tree, 1))
 {
   unsigned long full_size, inst_size = 0;
   unsigned int inst_count;
   full_size = tree_low_cst (size_tree, 1);
   if (full_size <= (unsigned) (optimize_size ? 3 : ix86_cost->move_ratio) * (0 ? 8 : 4)
       && elt->n_copies > elt->n_uses)
     use_block_copy = 0;
   else
     {
       inst_count = sum_instantiated_sizes (elt, &inst_size);
       if (inst_size * 4 >= full_size * 3)
  use_block_copy = 0;
     }
   if (!use_block_copy
       && (!can_completely_scalarize_p (elt)
    || !type_can_instantiate_all_elements (elt->type)))
     use_block_copy = 1;
 }
      elt->use_block_copy = use_block_copy;
      if (dump_file)
 {
   fprintf (dump_file, "Using %s for ",
     use_block_copy ? "block-copy" : "element-copy");
   dump_sra_elt_name (dump_file, elt);
   fputc_unlocked ('\n', dump_file);
 }
      if (!use_block_copy)
 {
   instantiate_missing_elements (elt);
   return 1;
 }
    }
  any_inst = elt->replacement != ((void *)0);
  for (c = elt->children; c ; c = c->sibling)
    any_inst |= decide_block_copy (c);
  return any_inst;
}
static void
decide_instantiations (void)
{
  unsigned int i;
  unsigned char cleared_any;
  struct bitmap_head_def done_head;
  bitmap_initialize (&done_head, 1);
  cleared_any = 0;
  do { bitmap_element *ptr_ = (sra_candidates)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (i) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); { tree var = ((referenced_vars)->data.tree1[i]); struct sra_elt *elt = lookup_element (((void *)0), var, ((void *)0), NO_INSERT); if (elt) { decide_instantiation_1 (elt, 0, 0); if (!decide_block_copy (elt)) elt = ((void *)0); } if (!elt) { bitmap_set_bit (&done_head, i); cleared_any = 1; } }; if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
      ;
  if (cleared_any)
    {
      bitmap_operation (sra_candidates, sra_candidates, &done_head,
   BITMAP_AND_COMPL);
      bitmap_operation (needs_copy_in, needs_copy_in, &done_head,
   BITMAP_AND_COMPL);
    }
  bitmap_clear (&done_head);
  if (dump_file)
    fputc_unlocked ('\n', dump_file);
}
static void
mark_all_v_defs (tree stmt)
{
  v_may_def_optype v_may_defs;
  v_must_def_optype v_must_defs;
  size_t i, n;
  get_stmt_operands (stmt);
  v_may_defs = get_v_may_def_ops (stmt_ann (stmt));
  n = ((v_may_defs) ? (v_may_defs)->num_v_may_defs : 0);
  for (i = 0; i < n; i++)
    {
      tree sym = (get_def_from_ptr (get_v_may_def_result_ptr (((v_may_defs)), ((i)))));
      if (((enum tree_code) (sym)->common.code) == SSA_NAME)
 sym = (sym)->ssa_name.var;
      bitmap_set_bit (vars_to_rename, var_ann (sym)->uid);
    }
  v_must_defs = get_v_must_def_ops (stmt_ann (stmt));
  n = ((v_must_defs) ? (v_must_defs)->num_v_must_defs : 0);
  for (i = 0; i < n; i++)
    {
      tree sym = (get_def_from_ptr (get_v_must_def_op_ptr (((v_must_defs)), ((i)))));
      if (((enum tree_code) (sym)->common.code) == SSA_NAME)
 sym = (sym)->ssa_name.var;
      bitmap_set_bit (vars_to_rename, var_ann (sym)->uid);
    }
}
static tree
generate_one_element_ref (struct sra_elt *elt, tree base)
{
  switch (((enum tree_code) (((base)->common.type))->common.code))
    {
    case RECORD_TYPE:
      return build (COMPONENT_REF, elt->type, base, elt->element, ((void *)0));
    case ARRAY_TYPE:
      return build (ARRAY_REF, elt->type, base, elt->element, ((void *)0), ((void *)0));
    case COMPLEX_TYPE:
      if (elt->element == global_trees[TI_INTEGER_ZERO])
 return build (REALPART_EXPR, elt->type, base);
      else
 return build (IMAGPART_EXPR, elt->type, base);
    default:
      fancy_abort ("gcc.c", 148666, "?");
    }
}
static tree
generate_element_ref (struct sra_elt *elt)
{
  if (elt->parent)
    return generate_one_element_ref (elt, generate_element_ref (elt->parent));
  else
    return elt->element;
}
static void
generate_copy_inout (struct sra_elt *elt, unsigned char copy_out, tree expr,
       tree *list_p)
{
  struct sra_elt *c;
  tree t;
  if (elt->replacement)
    {
      if (copy_out)
 t = build (MODIFY_EXPR, global_trees[TI_VOID_TYPE], elt->replacement, expr);
      else
 t = build (MODIFY_EXPR, global_trees[TI_VOID_TYPE], expr, elt->replacement);
      append_to_statement_list (t, list_p);
    }
  else
    {
      for (c = elt->children; c ; c = c->sibling)
 {
   t = generate_one_element_ref (c, unshare_expr (expr));
   generate_copy_inout (c, copy_out, t, list_p);
 }
    }
}
static void
generate_element_copy (struct sra_elt *dst, struct sra_elt *src, tree *list_p)
{
  struct sra_elt *dc, *sc;
  for (dc = dst->children; dc ; dc = dc->sibling)
    {
      sc = lookup_element (src, dc->element, ((void *)0), NO_INSERT);
      if (sc == ((void *)0))
 fancy_abort ("gcc.c", 148724, "?");
      generate_element_copy (dc, sc, list_p);
    }
  if (dst->replacement)
    {
      tree t;
      if (src->replacement == ((void *)0))
 fancy_abort ("gcc.c", 148733, "?");
      t = build (MODIFY_EXPR, global_trees[TI_VOID_TYPE], dst->replacement,
   src->replacement);
      append_to_statement_list (t, list_p);
    }
}
static void
generate_element_zero (struct sra_elt *elt, tree *list_p)
{
  struct sra_elt *c;
  for (c = elt->children; c ; c = c->sibling)
    generate_element_zero (c, list_p);
  if (elt->visited)
    elt->visited = 0;
  else if (elt->replacement)
    {
      tree t;
      if (elt->is_scalar)
 t = fold_convert (elt->type, global_trees[TI_INTEGER_ZERO]);
      else
 fancy_abort ("gcc.c", 148764, "?");
      t = build (MODIFY_EXPR, global_trees[TI_VOID_TYPE], elt->replacement, t);
      append_to_statement_list (t, list_p);
    }
}
static unsigned char
generate_element_init (struct sra_elt *elt, tree init, tree *list_p)
{
  unsigned char result = 1;
  enum tree_code init_code;
  struct sra_elt *sub;
  tree t;
  while (tree_ssa_useless_type_conversion (init)) init = ((init)->exp.operands[0]);
  init_code = ((enum tree_code) (init)->common.code);
  if (elt->is_scalar)
    {
      if (elt->replacement)
 {
   t = build (MODIFY_EXPR, global_trees[TI_VOID_TYPE], elt->replacement, init);
   append_to_statement_list (t, list_p);
   elt->visited = 1;
 }
      return result;
    }
  switch (init_code)
    {
    case COMPLEX_CST:
    case COMPLEX_EXPR:
      for (sub = elt->children; sub ; sub = sub->sibling)
 {
   if (sub->element == global_trees[TI_INTEGER_ZERO])
     t = (init_code == COMPLEX_EXPR
   ? ((init)->exp.operands[0]) : ((init)->complex.real));
   else
     t = (init_code == COMPLEX_EXPR
   ? ((init)->exp.operands[1]) : ((init)->complex.imag));
   result &= generate_element_init (sub, t, list_p);
 }
      break;
    case CONSTRUCTOR:
      for (t = ((init)->exp.operands[0]); t ; t = ((t)->common.chain))
 {
   sub = lookup_element (elt, ((t)->list.purpose), ((void *)0), NO_INSERT);
   if (sub == ((void *)0))
     continue;
   result &= generate_element_init (sub, ((t)->list.value1), list_p);
 }
      break;
    default:
      result = 0;
    }
  return result;
}
void
insert_edge_copies (tree stmt, basic_block bb)
{
  edge e;
  unsigned char first_copy;
  first_copy = 1;
  for (e = bb->succ; e; e = e->succ_next)
    {
      if (!(e->flags & 2))
 {
   if (first_copy)
     {
       bsi_insert_on_edge (e, stmt);
       first_copy = 0;
     }
   else
     bsi_insert_on_edge (e, lhd_unsave_expr_now (stmt));
 }
    }
}
static void
sra_insert_before (block_stmt_iterator *bsi, tree list)
{
  tree stmt = bsi_stmt (*bsi);
  if ((((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (stmt)->common.code))])) != 0) ? (stmt)->exp.locus : (location_t *)((void *)0)) != ((void *)0)))
    annotate_all_with_locus (&list, ((((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (stmt)->common.code))])) != 0) ? (stmt)->exp.locus : (location_t *)((void *)0)) != ((void *)0)) ? *(stmt)->exp.locus : unknown_location));
  bsi_insert_before (bsi, list, BSI_SAME_STMT);
}
static void
sra_insert_after (block_stmt_iterator *bsi, tree list)
{
  tree stmt = bsi_stmt (*bsi);
  if ((((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (stmt)->common.code))])) != 0) ? (stmt)->exp.locus : (location_t *)((void *)0)) != ((void *)0)))
    annotate_all_with_locus (&list, ((((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (stmt)->common.code))])) != 0) ? (stmt)->exp.locus : (location_t *)((void *)0)) != ((void *)0)) ? *(stmt)->exp.locus : unknown_location));
  if (stmt_ends_bb_p (stmt))
    insert_edge_copies (list, bsi->bb);
  else
    bsi_insert_after (bsi, list, BSI_SAME_STMT);
}
static void
sra_replace (block_stmt_iterator *bsi, tree list)
{
  sra_insert_before (bsi, list);
  bsi_remove (bsi);
  if (bsi_end_p (*bsi))
    *bsi = bsi_last (bsi->bb);
  else
    bsi_prev (bsi);
}
static void
scalarize_use (struct sra_elt *elt, tree *expr_p, block_stmt_iterator *bsi,
        unsigned char is_output)
{
  tree list = ((void *)0), stmt = bsi_stmt (*bsi);
  if (elt->replacement)
    {
      if (is_output)
 mark_all_v_defs (stmt);
      *expr_p = elt->replacement;
      modify_stmt (stmt);
    }
  else
    {
      generate_copy_inout (elt, is_output, generate_element_ref (elt), &list);
      if (list == ((void *)0))
 return;
      if (is_output)
 {
   mark_all_v_defs (expr_first (list));
   sra_insert_after (bsi, list);
 }
      else
 sra_insert_before (bsi, list);
    }
}
static void
scalarize_copy (struct sra_elt *lhs_elt, struct sra_elt *rhs_elt,
  block_stmt_iterator *bsi)
{
  tree list, stmt;
  if (lhs_elt->replacement && rhs_elt->replacement)
    {
      stmt = bsi_stmt (*bsi);
      ((stmt)->exp.operands[0]) = lhs_elt->replacement;
      ((stmt)->exp.operands[1]) = rhs_elt->replacement;
      modify_stmt (stmt);
    }
  else if (lhs_elt->use_block_copy || rhs_elt->use_block_copy)
    {
      list = ((void *)0);
      generate_copy_inout (rhs_elt, 0,
      generate_element_ref (rhs_elt), &list);
      if (list)
 {
   mark_all_v_defs (expr_first (list));
   sra_insert_before (bsi, list);
 }
      list = ((void *)0);
      generate_copy_inout (lhs_elt, 1,
      generate_element_ref (lhs_elt), &list);
      if (list)
 sra_insert_after (bsi, list);
    }
  else
    {
      stmt = bsi_stmt (*bsi);
      mark_all_v_defs (stmt);
      list = ((void *)0);
      generate_element_copy (lhs_elt, rhs_elt, &list);
      if (list == ((void *)0))
 fancy_abort ("gcc.c", 149013, "?");
      sra_replace (bsi, list);
    }
}
static unsigned char
scalarize_init (struct sra_elt *lhs_elt, tree rhs, block_stmt_iterator *bsi)
{
  unsigned char result = 1;
  tree list = ((void *)0);
  if (rhs)
    result = generate_element_init (lhs_elt, rhs, &list);
  generate_element_zero (lhs_elt, &list);
  if (!result || list == ((void *)0))
    return result;
  if (lhs_elt->use_block_copy)
    {
      mark_all_v_defs (expr_first (list));
      sra_insert_after (bsi, list);
    }
  else
    {
      mark_all_v_defs (bsi_stmt (*bsi));
      sra_replace (bsi, list);
    }
  return 1;
}
static tree
mark_notrap (tree *tp, int *walk_subtrees, void *data )
{
  tree t = *tp;
  if (((enum tree_code) (t)->common.code) == INDIRECT_REF)
    {
      ((t)->common.nothrow_flag) = 1;
      *walk_subtrees = 0;
    }
  else if ((tree_code_type[(int) (((enum tree_code) (t)->common.code))] == 'd') || (tree_code_type[(int) (((enum tree_code) (t)->common.code))] == 't'))
    *walk_subtrees = 0;
  return ((void *)0);
}
static void
scalarize_ldst (struct sra_elt *elt, tree other,
  block_stmt_iterator *bsi, unsigned char is_output)
{
  if (elt->replacement)
    fancy_abort ("gcc.c", 149090, "?");
  if (elt->use_block_copy)
    {
      scalarize_use (elt, ((void *)0), bsi, is_output);
    }
  else
    {
      tree list = ((void *)0), stmt = bsi_stmt (*bsi);
      mark_all_v_defs (stmt);
      generate_copy_inout (elt, is_output, other, &list);
      if (list == ((void *)0))
 fancy_abort ("gcc.c", 149109, "?");
      if (stmt_ends_bb_p (stmt))
 {
   tree_stmt_iterator tsi;
   tree first;
   tsi = tsi_start (list);
   first = tsi_stmt (tsi);
   tsi_delink (&tsi);
   bsi_replace (bsi, first, 1);
   if (!tsi_end_p (tsi))
     {
       do
  {
    walk_tree (tsi_stmt_ptr (tsi), mark_notrap, ((void *)0), ((void *)0));
    tsi_next (&tsi);
  }
       while (!tsi_end_p (tsi));
       insert_edge_copies (list, bsi->bb);
     }
 }
      else
 sra_replace (bsi, list);
    }
}
static void
scalarize_parms (void)
{
  tree list = ((void *)0);
  size_t i;
  do { bitmap_element *ptr_ = (needs_copy_in)->first; unsigned int indx_ = (0) / ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))); unsigned bit_num_ = (0) % (unsigned) (8 * 4); unsigned word_num_ = (0) / (unsigned) (8 * 4) % ((128 + (8 * 4) - 1) / (8 * 4)); while (ptr_ != 0 && ptr_->indx < indx_) ptr_ = ptr_->next; if (ptr_ != 0 && ptr_->indx != indx_) { bit_num_ = 0; word_num_ = 0; } for (; ptr_ != 0; ptr_ = ptr_->next) { for (; word_num_ < ((128 + (8 * 4) - 1) / (8 * 4)); word_num_++) { BITMAP_WORD word_ = ptr_->bits[word_num_]; if (word_ != 0) { for (; bit_num_ < (unsigned) (8 * 4); bit_num_++) { BITMAP_WORD mask_ = ((BITMAP_WORD) 1) << bit_num_; if ((word_ & mask_) != 0) { word_ &= ~ mask_; (i) = (ptr_->indx * ((unsigned) (((128 + (8 * 4) - 1) / (8 * 4)) * (unsigned) (8 * 4))) + word_num_ * (unsigned) (8 * 4) + bit_num_); { tree var = ((referenced_vars)->data.tree1[i]); struct sra_elt *elt = lookup_element (((void *)0), var, ((void *)0), NO_INSERT); generate_copy_inout (elt, 1, var, &list); }; if (word_ == 0) break; } } } bit_num_ = 0; } word_num_ = 0; } } while (0)
      ;
  if (list)
    insert_edge_copies (list, ENTRY_BLOCK_PTR);
}
static void
scalarize_function (void)
{
  static const struct sra_walk_fns fns = {
    scalarize_use, scalarize_copy, scalarize_init, scalarize_ldst, 0
  };
  sra_walk_function (&fns);
  scalarize_parms ();
  bsi_commit_edge_inserts (((void *)0));
}
static void
dump_sra_elt_name (FILE *f, struct sra_elt *elt)
{
  if (elt->parent && ((enum tree_code) (elt->parent->type)->common.code) == COMPLEX_TYPE)
    {
      fputs_unlocked (elt->element == global_trees[TI_INTEGER_ZERO] ? "__real__ " : "__imag__ ", f);
      dump_sra_elt_name (f, elt->parent);
    }
  else
    {
      if (elt->parent)
        dump_sra_elt_name (f, elt->parent);
      if ((tree_code_type[(int) (((enum tree_code) (elt->element)->common.code))] == 'd'))
 {
   if (((enum tree_code) (elt->element)->common.code) == FIELD_DECL)
     fputc_unlocked ('.', f);
   print_generic_expr (f, elt->element, dump_flags);
 }
      else
 fprintf (f, "[%ld]",
   (((elt->element)->int_cst.int_cst).low));
    }
}
void
debug_sra_elt_name (struct sra_elt *elt)
{
  dump_sra_elt_name (stderr, elt);
  fputc_unlocked ('\n', stderr);
}
static void
tree_sra (void)
{
  _obstack_begin ((&sra_obstack), 0, 0, ((void *(*) (long)) xmalloc), ((void (*) (void *)) free));
  sra_candidates = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
  needs_copy_in = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
  sra_type_decomp_cache = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
  sra_type_inst_cache = bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1);
  sra_map = htab_create (101, sra_elt_hash, sra_elt_eq, ((void *)0));
  if (find_candidates_for_sra ())
    {
      scan_function ();
      decide_instantiations ();
      scalarize_function ();
    }
  htab_delete (sra_map);
  sra_map = ((void *)0);
  do { if (sra_candidates) { bitmap_clear (sra_candidates); free (sra_candidates); (sra_candidates) = 0; } } while (0);
  do { if (needs_copy_in) { bitmap_clear (needs_copy_in); free (needs_copy_in); (needs_copy_in) = 0; } } while (0);
  do { if (sra_type_decomp_cache) { bitmap_clear (sra_type_decomp_cache); free (sra_type_decomp_cache); (sra_type_decomp_cache) = 0; } } while (0);
  do { if (sra_type_inst_cache) { bitmap_clear (sra_type_inst_cache); free (sra_type_inst_cache); (sra_type_inst_cache) = 0; } } while (0);
  ( (&sra_obstack)->temp = (char *) (((void *)0)) - (char *) (&sra_obstack)->chunk, (((&sra_obstack)->temp > 0 && (&sra_obstack)->temp < (&sra_obstack)->chunk_limit - (char *) (&sra_obstack)->chunk) ? (int) ((&sra_obstack)->next_free = (&sra_obstack)->object_base = (&sra_obstack)->temp + (char *) (&sra_obstack)->chunk) : (((obstack_free) ((&sra_obstack), (&sra_obstack)->temp + (char *) (&sra_obstack)->chunk), 0), 0)));
}
static unsigned char
gate_sra (void)
{
  return flag_tree_sra != 0;
}
struct tree_opt_pass pass_sra =
{
  "sra",
  gate_sra,
  tree_sra,
  ((void *)0),
  ((void *)0),
  0,
  TV_TREE_SRA,
  (1 << 3) | (1 << 6),
  0,
  0,
  0,
  (1 << 0) | (1 << 1)
    | (1 << 2) | (1 << 3)
};
static tree
gimplify_val_complex (block_stmt_iterator *bsi, tree type, tree exp)
{
  tree t, new_stmt, orig_stmt;
  if (is_gimple_val (exp))
    return exp;
  t = make_rename_temp (type, ((void *)0));
  new_stmt = build (MODIFY_EXPR, type, t, exp);
  orig_stmt = bsi_stmt (*bsi);
  ((new_stmt)->exp.locus = (((strchr ("<12ers", (tree_code_type[(int) (((enum tree_code) (orig_stmt)->common.code))])) != 0) ? (orig_stmt)->exp.locus : (location_t *)((void *)0))));
  ((new_stmt)->exp.block) = ((orig_stmt)->exp.block);
  bsi_insert_before (bsi, new_stmt, BSI_SAME_STMT);
  return t;
}
static tree
extract_component (block_stmt_iterator *bsi, tree t, unsigned char imagpart_p)
{
  tree ret, inner_type;
  inner_type = ((((t)->common.type))->common.type);
  switch (((enum tree_code) (t)->common.code))
    {
    case COMPLEX_CST:
      ret = (imagpart_p ? ((t)->complex.imag) : ((t)->complex.real));
      break;
    case COMPLEX_EXPR:
      ret = ((t)->exp.operands[imagpart_p]);
      break;
    case VAR_DECL:
    case PARM_DECL:
      ret = build1_stat ((imagpart_p ? IMAGPART_EXPR : REALPART_EXPR),inner_type,t )
                    ;
      break;
    default:
      fancy_abort ("gcc.c", 149340, "?");
    }
  return gimplify_val_complex (bsi, inner_type, ret);
}
static tree
do_binop (block_stmt_iterator *bsi, enum tree_code code,
   tree type, tree a, tree b)
{
  tree ret;
  ret = fold (build (code, type, a, b));
  while ((((enum tree_code) (ret)->common.code) == NOP_EXPR || ((enum tree_code) (ret)->common.code) == CONVERT_EXPR || ((enum tree_code) (ret)->common.code) == NON_LVALUE_EXPR) && ((ret)->exp.operands[0]) != global_trees[TI_ERROR_MARK] && (((((ret)->common.type))->type.mode) == ((((((ret)->exp.operands[0]))->common.type))->type.mode))) (ret) = ((ret)->exp.operands[0]);
  return gimplify_val_complex (bsi, type, ret);
}
static tree
do_unop (block_stmt_iterator *bsi, enum tree_code code, tree type, tree a)
{
  tree ret;
  ret = fold (build1_stat (code,type,a ));
  while ((((enum tree_code) (ret)->common.code) == NOP_EXPR || ((enum tree_code) (ret)->common.code) == CONVERT_EXPR || ((enum tree_code) (ret)->common.code) == NON_LVALUE_EXPR) && ((ret)->exp.operands[0]) != global_trees[TI_ERROR_MARK] && (((((ret)->common.type))->type.mode) == ((((((ret)->exp.operands[0]))->common.type))->type.mode))) (ret) = ((ret)->exp.operands[0]);
  return gimplify_val_complex (bsi, type, ret);
}
static void
update_complex_assignment (block_stmt_iterator *bsi, tree r, tree i)
{
  tree stmt = bsi_stmt (*bsi);
  tree type;
  modify_stmt (stmt);
  if (((enum tree_code) (stmt)->common.code) == RETURN_EXPR)
    stmt = ((stmt)->exp.operands[0]);
  type = ((((stmt)->exp.operands[1]))->common.type);
  ((stmt)->exp.operands[1]) = build (COMPLEX_EXPR, type, r, i);
}
static void
expand_complex_addition (block_stmt_iterator *bsi, tree inner_type,
    tree ar, tree ai, tree br, tree bi,
    enum tree_code code)
{
  tree rr, ri;
  rr = do_binop (bsi, code, inner_type, ar, br);
  ri = do_binop (bsi, code, inner_type, ai, bi);
  update_complex_assignment (bsi, rr, ri);
}
static void
expand_complex_multiplication (block_stmt_iterator *bsi, tree inner_type,
          tree ar, tree ai, tree br, tree bi)
{
  tree t1, t2, t3, t4, rr, ri;
  t1 = do_binop (bsi, MULT_EXPR, inner_type, ar, br);
  t2 = do_binop (bsi, MULT_EXPR, inner_type, ai, bi);
  t3 = do_binop (bsi, MULT_EXPR, inner_type, ar, bi);
  if (ar == br && ai == bi)
    t4 = t3;
  else
    t4 = do_binop (bsi, MULT_EXPR, inner_type, ai, br);
  rr = do_binop (bsi, MINUS_EXPR, inner_type, t1, t2);
  ri = do_binop (bsi, PLUS_EXPR, inner_type, t3, t4);
  update_complex_assignment (bsi, rr, ri);
}
static void
expand_complex_div_straight (block_stmt_iterator *bsi, tree inner_type,
        tree ar, tree ai, tree br, tree bi,
        enum tree_code code)
{
  tree rr, ri, div, t1, t2, t3;
  t1 = do_binop (bsi, MULT_EXPR, inner_type, br, br);
  t2 = do_binop (bsi, MULT_EXPR, inner_type, bi, bi);
  div = do_binop (bsi, PLUS_EXPR, inner_type, t1, t2);
  t1 = do_binop (bsi, MULT_EXPR, inner_type, ar, br);
  t2 = do_binop (bsi, MULT_EXPR, inner_type, ai, bi);
  t3 = do_binop (bsi, PLUS_EXPR, inner_type, t1, t2);
  rr = do_binop (bsi, code, inner_type, t3, div);
  t1 = do_binop (bsi, MULT_EXPR, inner_type, ai, br);
  t2 = do_binop (bsi, MULT_EXPR, inner_type, ar, bi);
  t3 = do_binop (bsi, MINUS_EXPR, inner_type, t1, t2);
  ri = do_binop (bsi, code, inner_type, t3, div);
  update_complex_assignment (bsi, rr, ri);
}
static void
expand_complex_div_wide (block_stmt_iterator *bsi, tree inner_type,
    tree ar, tree ai, tree br, tree bi,
    enum tree_code code)
{
  tree rr, ri, ratio, div, t1, t2, min, max, cond;
  t1 = do_unop (bsi, ABS_EXPR, inner_type, br);
  t2 = do_unop (bsi, ABS_EXPR, inner_type, bi);
  cond = fold (build (LT_EXPR, global_trees[TI_BOOLEAN_TYPE], t1, t2));
  while ((((enum tree_code) (cond)->common.code) == NOP_EXPR || ((enum tree_code) (cond)->common.code) == CONVERT_EXPR || ((enum tree_code) (cond)->common.code) == NON_LVALUE_EXPR) && ((cond)->exp.operands[0]) != global_trees[TI_ERROR_MARK] && (((((cond)->common.type))->type.mode) == ((((((cond)->exp.operands[0]))->common.type))->type.mode))) (cond) = ((cond)->exp.operands[0]);
  if (((cond)->common.constant_flag))
    {
      if (integer_zerop (cond))
 min = bi, max = br;
      else
 min = br, max = bi;
    }
  else
    {
      basic_block bb_cond, bb_true, bb_false, bb_join;
      tree l1, l2, l3;
      edge e;
      l1 = create_artificial_label ();
      t1 = build (GOTO_EXPR, global_trees[TI_VOID_TYPE], l1);
      l2 = create_artificial_label ();
      t2 = build (GOTO_EXPR, global_trees[TI_VOID_TYPE], l2);
      cond = build (COND_EXPR, global_trees[TI_VOID_TYPE], cond, t1, t2);
      bsi_insert_before (bsi, cond, BSI_SAME_STMT);
      min = make_rename_temp (inner_type, ((void *)0));
      max = make_rename_temp (inner_type, ((void *)0));
      l3 = create_artificial_label ();
      e = split_block (bsi->bb, cond);
      bb_cond = e->src;
      bb_join = e->dest;
      bb_true = create_empty_bb (bb_cond);
      bb_false = create_empty_bb (bb_true);
      e->flags = 1024;
      redirect_edge_succ (e, bb_true);
      make_edge (bb_cond, bb_false, 2048);
      make_edge (bb_true, bb_join, 0);
      make_edge (bb_false, bb_join, 0);
      if (dom_computed[CDI_DOMINATORS] >= DOM_CONS_OK)
        {
          set_immediate_dominator (CDI_DOMINATORS, bb_true, bb_cond);
          set_immediate_dominator (CDI_DOMINATORS, bb_false, bb_cond);
        }
      *bsi = bsi_start (bb_true);
      t1 = build (LABEL_EXPR, global_trees[TI_VOID_TYPE], l1);
      bsi_insert_after (bsi, t1, BSI_NEW_STMT);
      t1 = build (MODIFY_EXPR, inner_type, min, br);
      bsi_insert_after (bsi, t1, BSI_NEW_STMT);
      t1 = build (MODIFY_EXPR, inner_type, max, bi);
      bsi_insert_after (bsi, t1, BSI_NEW_STMT);
      *bsi = bsi_start (bb_false);
      t1 = build (LABEL_EXPR, global_trees[TI_VOID_TYPE], l2);
      bsi_insert_after (bsi, t1, BSI_NEW_STMT);
      t1 = build (MODIFY_EXPR, inner_type, min, bi);
      bsi_insert_after (bsi, t1, BSI_NEW_STMT);
      t1 = build (MODIFY_EXPR, inner_type, max, br);
      bsi_insert_after (bsi, t1, BSI_NEW_STMT);
      *bsi = bsi_start (bb_join);
      t1 = build (LABEL_EXPR, global_trees[TI_VOID_TYPE], l3);
      bsi_insert_before (bsi, t1, BSI_SAME_STMT);
    }
  ratio = do_binop (bsi, code, inner_type, min, max);
  t1 = do_binop (bsi, MULT_EXPR, inner_type, min, ratio);
  div = do_binop (bsi, PLUS_EXPR, inner_type, t1, max);
  t1 = do_binop (bsi, MULT_EXPR, inner_type, ai, ratio);
  t2 = do_binop (bsi, PLUS_EXPR, inner_type, ar, t1);
  rr = do_binop (bsi, code, inner_type, t2, div);
  t1 = do_binop (bsi, MULT_EXPR, inner_type, ar, ratio);
  t2 = do_binop (bsi, MINUS_EXPR, inner_type, ai, t1);
  ri = do_binop (bsi, code, inner_type, t2, div);
  update_complex_assignment (bsi, rr, ri);
}
static void
expand_complex_division (block_stmt_iterator *bsi, tree inner_type,
    tree ar, tree ai, tree br, tree bi,
    enum tree_code code)
{
  switch (flag_complex_divide_method)
    {
    case 0:
      expand_complex_div_straight (bsi, inner_type, ar, ai, br, bi, code);
      break;
    case 1:
      expand_complex_div_wide (bsi, inner_type, ar, ai, br, bi, code);
      break;
    default:
      fancy_abort ("gcc.c", 149590, "?");
    }
}
static void
expand_complex_negation (block_stmt_iterator *bsi, tree inner_type,
    tree ar, tree ai)
{
  tree rr, ri;
  rr = do_unop (bsi, NEGATE_EXPR, inner_type, ar);
  ri = do_unop (bsi, NEGATE_EXPR, inner_type, ai);
  update_complex_assignment (bsi, rr, ri);
}
static void
expand_complex_conjugate (block_stmt_iterator *bsi, tree inner_type,
     tree ar, tree ai)
{
  tree ri;
  ri = do_unop (bsi, NEGATE_EXPR, inner_type, ai);
  update_complex_assignment (bsi, ar, ri);
}
static void
expand_complex_comparison (block_stmt_iterator *bsi, tree ar, tree ai,
      tree br, tree bi, enum tree_code code)
{
  tree cr, ci, cc, stmt, type;
  cr = do_binop (bsi, code, global_trees[TI_BOOLEAN_TYPE], ar, br);
  ci = do_binop (bsi, code, global_trees[TI_BOOLEAN_TYPE], ai, bi);
  cc = do_binop (bsi, (code == EQ_EXPR ? TRUTH_AND_EXPR : TRUTH_OR_EXPR),
   global_trees[TI_BOOLEAN_TYPE], cr, ci);
  stmt = bsi_stmt (*bsi);
  modify_stmt (stmt);
  switch (((enum tree_code) (stmt)->common.code))
    {
    case RETURN_EXPR:
      stmt = ((stmt)->exp.operands[0]);
    case MODIFY_EXPR:
      type = ((((stmt)->exp.operands[1]))->common.type);
      ((stmt)->exp.operands[1]) = fold_convert (type, cc);
      break;
    case COND_EXPR:
      ((stmt)->exp.operands[0]) = cc;
      break;
    default:
      fancy_abort ("gcc.c", 149654, "?");
    }
}
static void
expand_complex_operations_1 (block_stmt_iterator *bsi)
{
  tree stmt = bsi_stmt (*bsi);
  tree rhs, type, inner_type;
  tree ac, ar, ai, bc, br, bi;
  enum tree_code code;
  switch (((enum tree_code) (stmt)->common.code))
    {
    case RETURN_EXPR:
      stmt = ((stmt)->exp.operands[0]);
      if (!stmt)
 return;
      if (((enum tree_code) (stmt)->common.code) != MODIFY_EXPR)
 return;
    case MODIFY_EXPR:
      rhs = ((stmt)->exp.operands[1]);
      break;
    case COND_EXPR:
      rhs = ((stmt)->exp.operands[0]);
      break;
    default:
      return;
    }
  type = ((rhs)->common.type);
  code = ((enum tree_code) (rhs)->common.code);
  switch (code)
    {
    case PLUS_EXPR:
    case MINUS_EXPR:
    case MULT_EXPR:
    case TRUNC_DIV_EXPR:
    case CEIL_DIV_EXPR:
    case FLOOR_DIV_EXPR:
    case ROUND_DIV_EXPR:
    case RDIV_EXPR:
    case NEGATE_EXPR:
    case CONJ_EXPR:
      if (((enum tree_code) (type)->common.code) != COMPLEX_TYPE)
 return;
      inner_type = ((type)->common.type);
      break;
    case EQ_EXPR:
    case NE_EXPR:
      inner_type = ((((rhs)->exp.operands[1]))->common.type);
      if (((enum tree_code) (inner_type)->common.code) != COMPLEX_TYPE)
 return;
      break;
    default:
      return;
    }
  ac = ((rhs)->exp.operands[0]);
  ar = extract_component (bsi, ac, 0);
  ai = extract_component (bsi, ac, 1);
  if (tree_code_type[(int) (code)] == '1')
    bc = br = bi = ((void *)0);
  else
    {
      bc = ((rhs)->exp.operands[1]);
      if (ac == bc)
 br = ar, bi = ai;
      else
 {
   br = extract_component (bsi, bc, 0);
   bi = extract_component (bsi, bc, 1);
 }
    }
  switch (code)
    {
    case PLUS_EXPR:
    case MINUS_EXPR:
      expand_complex_addition (bsi, inner_type, ar, ai, br, bi, code);
      break;
    case MULT_EXPR:
      expand_complex_multiplication (bsi, inner_type, ar, ai, br, bi);
      break;
    case TRUNC_DIV_EXPR:
    case CEIL_DIV_EXPR:
    case FLOOR_DIV_EXPR:
    case ROUND_DIV_EXPR:
    case RDIV_EXPR:
      expand_complex_division (bsi, inner_type, ar, ai, br, bi, code);
      break;
    case NEGATE_EXPR:
      expand_complex_negation (bsi, inner_type, ar, ai);
      break;
    case CONJ_EXPR:
      expand_complex_conjugate (bsi, inner_type, ar, ai);
      break;
    case EQ_EXPR:
    case NE_EXPR:
      expand_complex_comparison (bsi, ar, ai, br, bi, code);
      break;
    default:
      fancy_abort ("gcc.c", 149775, "?");
    }
}
static void
expand_complex_operations (void)
{
  int old_last_basic_block = last_basic_block;
  block_stmt_iterator bsi;
  basic_block bb;
  for (bb = ENTRY_BLOCK_PTR->next_bb; bb != EXIT_BLOCK_PTR; bb = bb->next_bb)
    {
      if (bb->index >= old_last_basic_block)
 continue;
      for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))
 expand_complex_operations_1 (&bsi);
    }
}
struct tree_opt_pass pass_lower_complex =
{
  "complex",
  ((void *)0),
  expand_complex_operations,
  ((void *)0),
  ((void *)0),
  0,
  0,
  (1 << 3),
  0,
  0,
  0,
  (1 << 0) | (1 << 1)
    | (1 << 2) | (1 << 3)
    | (1 << 5) | (1 << 4)
};
struct loops *current_loops;
static struct loops *
tree_loop_optimizer_init (FILE *dump)
{
  struct loops *loops = loop_optimizer_init (dump);
  if (!loops)
    return ((void *)0);
  kill_redundant_phi_nodes ();
  rewrite_into_ssa (0);
  bitmap_clear (vars_to_rename);
  return loops;
}
static unsigned char
gate_loop (void)
{
  return flag_tree_loop_optimize != 0;
}
struct tree_opt_pass pass_loop =
{
  "loop",
  gate_loop,
  ((void *)0),
  ((void *)0),
  ((void *)0),
  0,
  TV_TREE_LOOP,
  (1 << 3),
  0,
  0,
  (1 << 2),
  (1 << 0) | (1 << 3) | (1 << 2)
};
static void
tree_ssa_loop_init (void)
{
  current_loops = tree_loop_optimizer_init (dump_file);
}
struct tree_opt_pass pass_loop_init =
{
  "loopinit",
  ((void *)0),
  tree_ssa_loop_init,
  ((void *)0),
  ((void *)0),
  0,
  0,
  (1 << 3),
  0,
  0,
  0,
  0
};
static void
tree_ssa_loop_done (void)
{
  if (!current_loops)
    return;
  loop_optimizer_finalize (current_loops,
      (dump_flags & (1 << 3) ? dump_file : ((void *)0)));
  current_loops = ((void *)0);
  cleanup_tree_cfg ();
}
struct tree_opt_pass pass_loop_done =
{
  "loopdone",
  ((void *)0),
  tree_ssa_loop_done,
  ((void *)0),
  ((void *)0),
  0,
  0,
  (1 << 3),
  0,
  0,
  0,
  0
};
enum op_type {
  OP_IN,
  OP_OUT,
  OP_INOUT
};
struct operand_alternative
{
  const char *constraint;
  enum reg_class class;
  unsigned int reject;
  int matches;
  int matched;
  unsigned int earlyclobber:1;
  unsigned int memory_ok:1;
  unsigned int offmem_ok:1;
  unsigned int nonoffmem_ok:1;
  unsigned int decmem_ok:1;
  unsigned int incmem_ok:1;
  unsigned int is_address:1;
  unsigned int anything_ok:1;
};
extern void init_recog (void);
extern void init_recog_no_volatile (void);
extern int recog_memoized_1 (rtx);
extern int check_asm_operands (rtx);
extern int asm_operand_ok (rtx, const char *);
extern int validate_change (rtx, rtx *, rtx, int);
extern int insn_invalid_p (rtx);
extern int apply_change_group (void);
extern int num_validated_changes (void);
extern void cancel_changes (int);
extern int constrain_operands (int);
extern int constrain_operands_cached (int);
extern int memory_address_p (enum machine_mode, rtx);
extern int strict_memory_address_p (enum machine_mode, rtx);
extern int validate_replace_rtx_subexp (rtx, rtx, rtx, rtx *);
extern int validate_replace_rtx (rtx, rtx, rtx);
extern void validate_replace_rtx_group (rtx, rtx, rtx);
extern void validate_replace_src_group (rtx, rtx, rtx);
extern int num_changes_pending (void);
extern int reg_fits_class_p (rtx, enum reg_class, int, enum machine_mode);
extern rtx *find_single_use (rtx, rtx, rtx *);
extern int general_operand (rtx, enum machine_mode);
extern int address_operand (rtx, enum machine_mode);
extern int register_operand (rtx, enum machine_mode);
extern int pmode_register_operand (rtx, enum machine_mode);
extern int scratch_operand (rtx, enum machine_mode);
extern int immediate_operand (rtx, enum machine_mode);
extern int const_int_operand (rtx, enum machine_mode);
extern int const_double_operand (rtx, enum machine_mode);
extern int nonimmediate_operand (rtx, enum machine_mode);
extern int nonmemory_operand (rtx, enum machine_mode);
extern int push_operand (rtx, enum machine_mode);
extern int pop_operand (rtx, enum machine_mode);
extern int memory_operand (rtx, enum machine_mode);
extern int indirect_operand (rtx, enum machine_mode);
extern int comparison_operator (rtx, enum machine_mode);
extern int offsettable_memref_p (rtx);
extern int offsettable_nonstrict_memref_p (rtx);
extern int offsettable_address_p (int, enum machine_mode, rtx);
extern int mode_dependent_address_p (rtx);
extern int recog (rtx, rtx, int *);
extern void add_clobbers (rtx, int);
extern int added_clobbers_hard_reg_p (int);
extern void insn_extract (rtx);
extern void extract_insn (rtx);
extern void extract_constrain_insn_cached (rtx);
extern void extract_insn_cached (rtx);
extern void preprocess_constraints (void);
extern rtx peep2_next_insn (int);
extern int peep2_regno_dead_p (int, int);
extern int peep2_reg_dead_p (int, rtx);
extern rtx peep2_find_free_register (int, int, const char *,
         enum machine_mode, HARD_REG_SET *);
extern void peephole2_optimize (FILE *);
extern rtx peephole2_insns (rtx, rtx, int *);
extern int store_data_bypass_p (rtx, rtx);
extern int if_test_bypass_p (rtx, rtx);
extern int volatile_ok;
extern int which_alternative;
struct recog_data
{
  rtx operand[30];
  rtx *operand_loc[30];
  const char *constraints[30];
  enum machine_mode operand_mode[30];
  enum op_type operand_type[30];
  rtx *dup_loc[4];
  char dup_num[4];
  char n_operands;
  char n_dups;
  char n_alternatives;
  rtx insn;
};
extern struct recog_data recog_data;
extern struct operand_alternative recog_op_alt[30][30];
typedef int (*insn_operand_predicate_fn) (rtx, enum machine_mode);
typedef const char * (*insn_output_fn) (rtx *, rtx);
typedef rtx (*insn_gen_fn) (rtx, ...);
struct insn_operand_data
{
  const insn_operand_predicate_fn predicate;
  const char *const constraint;
  unsigned int const mode : 16;
  const char strict_low;
  const char eliminable;
};
struct insn_data
{
  const char *const name;
  struct {
    const char *single;
    const char *const *multi;
    insn_output_fn function;
  } output;
  const insn_gen_fn genfun;
  const struct insn_operand_data *const operand;
  const char n_operands;
  const char n_dups;
  const char n_alternatives;
  const char output_format;
};
extern const struct insn_data insn_data[];
extern int max_regno;
typedef struct reg_info_def
{
  int first_uid;
  int last_uid;
  int last_note_uid;
  int sets;
  int refs;
  int freq;
  int deaths;
  int live_length;
  int calls_crossed;
  int basic_block1;
  char changes_mode;
} reg_info;
extern varray_type reg_n_info;
extern bitmap_head subregs_of_mode;
extern short *reg_renumber;
extern char regs_ever_live[53];
extern char regs_asm_clobbered[53];
extern enum machine_mode reg_raw_mode[53];
extern rtx regs_may_share;
extern int caller_save_needed;
extern void allocate_reg_info (size_t, int, int);
extern unsigned char hard_regno_nregs[53][MAX_MACHINE_MODE];
enum attr_cpu {CPU_I386, CPU_I486, CPU_PENTIUM, CPU_PENTIUMPRO, CPU_K6, CPU_ATHLON, CPU_PENTIUM4, CPU_K8, CPU_NOCONA};
extern enum attr_cpu get_attr_cpu (void);
enum attr_type {TYPE_OTHER, TYPE_MULTI, TYPE_ALU, TYPE_ALU1, TYPE_NEGNOT, TYPE_IMOV, TYPE_IMOVX, TYPE_LEA, TYPE_INCDEC, TYPE_ISHIFT, TYPE_ISHIFT1, TYPE_ROTATE, TYPE_ROTATE1, TYPE_IMUL, TYPE_IDIV, TYPE_ICMP, TYPE_TEST, TYPE_IBR, TYPE_SETCC, TYPE_ICMOV, TYPE_PUSH, TYPE_POP, TYPE_CALL, TYPE_CALLV, TYPE_LEAVE, TYPE_STR, TYPE_CLD, TYPE_FMOV, TYPE_FOP, TYPE_FSGN, TYPE_FMUL, TYPE_FDIV, TYPE_FPSPC, TYPE_FCMOV, TYPE_FCMP, TYPE_FXCH, TYPE_FISTP, TYPE_SSELOG, TYPE_SSEIADD, TYPE_SSEISHFT, TYPE_SSEIMUL, TYPE_SSE, TYPE_SSEMOV, TYPE_SSEADD, TYPE_SSEMUL, TYPE_SSECMP, TYPE_SSECOMI, TYPE_SSECVT, TYPE_SSEICVT, TYPE_SSEDIV, TYPE_MMX, TYPE_MMXMOV, TYPE_MMXADD, TYPE_MMXMUL, TYPE_MMXCMP, TYPE_MMXCVT, TYPE_MMXSHFT};
extern enum attr_type get_attr_type (rtx);
enum attr_mode {MODE_UNKNOWN, MODE_NONE, MODE_QI, MODE_HI, MODE_SI, MODE_DI, MODE_SF, MODE_DF, MODE_XF, MODE_TI, MODE_V4SF, MODE_V2DF, MODE_V2SF};
extern enum attr_mode get_attr_mode (rtx);
enum attr_unit {UNIT_INTEGER, UNIT_I387, UNIT_SSE, UNIT_MMX, UNIT_UNKNOWN};
extern enum attr_unit get_attr_unit (rtx);
extern int get_attr_length_immediate (rtx);
extern int get_attr_length_address (rtx);
extern int get_attr_prefix_data16 (rtx);
extern int get_attr_prefix_rep (rtx);
extern int get_attr_prefix_0f (rtx);
extern int get_attr_prefix_rex (rtx);
extern int get_attr_modrm (rtx);
extern int get_attr_length (rtx);
extern void shorten_branches (rtx);
extern int insn_default_length (rtx);
extern int insn_variable_length_p (rtx);
extern int insn_current_length (rtx);
extern varray_type insn_addresses_;
extern int insn_current_address;
enum attr_memory {MEMORY_NONE, MEMORY_LOAD, MEMORY_STORE, MEMORY_BOTH, MEMORY_UNKNOWN};
extern enum attr_memory get_attr_memory (rtx);
enum attr_imm_disp {IMM_DISP_FALSE, IMM_DISP_TRUE, IMM_DISP_UNKNOWN};
extern enum attr_imm_disp get_attr_imm_disp (rtx);
enum attr_fp_int_src {FP_INT_SRC_FALSE, FP_INT_SRC_TRUE};
extern enum attr_fp_int_src get_attr_fp_int_src (rtx);
enum attr_pent_prefix {PENT_PREFIX_FALSE, PENT_PREFIX_TRUE};
extern enum attr_pent_prefix get_attr_pent_prefix (rtx);
enum attr_pent_pair {PENT_PAIR_UV, PENT_PAIR_PU, PENT_PAIR_PV, PENT_PAIR_NP};
extern enum attr_pent_pair get_attr_pent_pair (rtx);
enum attr_athlon_decode {ATHLON_DECODE_DIRECT, ATHLON_DECODE_VECTOR, ATHLON_DECODE_DOUBLE};
extern enum attr_athlon_decode get_attr_athlon_decode (rtx);
extern int result_ready_cost (rtx);
extern int function_units_used (rtx);
extern const struct function_unit_desc
{
  const char *const name;
  const int bitmask;
  const int multiplicity;
  const int simultaneity;
  const int default_cost;
  const int max_issue_delay;
  int (*const ready_cost_function) (rtx);
  int (*const conflict_cost_function) (rtx, rtx);
  const int max_blockage;
  unsigned int (*const blockage_range_function) (rtx);
  int (*const blockage_function) (rtx, rtx);
} function_units[];
extern int max_dfa_issue_rate;
extern int insn_default_latency (rtx);
extern int bypass_p (rtx);
extern int insn_latency (rtx, rtx);
extern int max_insn_queue_index;
typedef void *state_t;
extern int state_size (void);
extern void state_reset (state_t);
extern int state_transition (state_t, rtx);
extern int min_issue_delay (state_t, rtx);
extern int state_dead_lock_p (state_t);
extern int min_insn_conflict_delay (state_t, rtx, rtx);
extern void print_reservation (FILE *, rtx);
extern void dfa_clean_insn_cache (void);
extern void dfa_start (void);
extern void dfa_finish (void);
int
insn_current_length (rtx insn )
{
  switch (((((insn)->u.fld[6]).rtint) >= 0 ? (((insn)->u.fld[6]).rtint) : recog_memoized_1 (insn)))
    {
    case 514:
      extract_constrain_insn_cached (insn);
      if ((which_alternative == 0) && (((((insn_addresses_ != 0) ? ((insn_addresses_)->data.i[((((((enum rtx_code) (recog_data.operand[0])->code) == LABEL_REF ? (((recog_data.operand[0])->u.fld[0]).rtx1) : recog_data.operand[0])->u.fld[0]).rtint))]) : 0) - (insn_current_reference_address (insn))) >= (-126)) && ((((insn_addresses_ != 0) ? ((insn_addresses_)->data.i[((((((enum rtx_code) (recog_data.operand[0])->code) == LABEL_REF ? (((recog_data.operand[0])->u.fld[0]).rtx1) : recog_data.operand[0])->u.fld[0]).rtint))]) : 0) - (insn_current_reference_address (insn))) < (128))))
        {
   return 2;
        }
      else
        {
   return 16 ;
        }
    case 509:
      extract_insn_cached (insn);
      if (((((insn_addresses_ != 0) ? ((insn_addresses_)->data.i[((((((enum rtx_code) (recog_data.operand[0])->code) == LABEL_REF ? (((recog_data.operand[0])->u.fld[0]).rtx1) : recog_data.operand[0])->u.fld[0]).rtint))]) : 0) - (insn_current_reference_address (insn))) >= (-126)) && ((((insn_addresses_ != 0) ? ((insn_addresses_)->data.i[((((((enum rtx_code) (recog_data.operand[0])->code) == LABEL_REF ? (((recog_data.operand[0])->u.fld[0]).rtx1) : recog_data.operand[0])->u.fld[0]).rtint))]) : 0) - (insn_current_reference_address (insn))) < (128)))
        {
   return 2;
        }
      else
        {
   return 5;
        }
    case 498:
      extract_insn_cached (insn);
      if (((((insn_addresses_ != 0) ? ((insn_addresses_)->data.i[((((((enum rtx_code) (recog_data.operand[0])->code) == LABEL_REF ? (((recog_data.operand[0])->u.fld[0]).rtx1) : recog_data.operand[0])->u.fld[0]).rtint))]) : 0) - (insn_current_reference_address (insn))) >= (-126)) && ((((insn_addresses_ != 0) ? ((insn_addresses_)->data.i[((((((enum rtx_code) (recog_data.operand[0])->code) == LABEL_REF ? (((recog_data.operand[0])->u.fld[0]).rtx1) : recog_data.operand[0])->u.fld[0]).rtint))]) : 0) - (insn_current_reference_address (insn))) < (128)))
        {
   return 2;
        }
      else
        {
   return 6;
        }
    case 497:
      extract_insn_cached (insn);
      if (((((insn_addresses_ != 0) ? ((insn_addresses_)->data.i[((((((enum rtx_code) (recog_data.operand[0])->code) == LABEL_REF ? (((recog_data.operand[0])->u.fld[0]).rtx1) : recog_data.operand[0])->u.fld[0]).rtint))]) : 0) - (insn_current_reference_address (insn))) >= (-126)) && ((((insn_addresses_ != 0) ? ((insn_addresses_)->data.i[((((((enum rtx_code) (recog_data.operand[0])->code) == LABEL_REF ? (((recog_data.operand[0])->u.fld[0]).rtx1) : recog_data.operand[0])->u.fld[0]).rtint))]) : 0) - (insn_current_reference_address (insn))) < (128)))
        {
   return 2;
        }
      else
        {
   return 6;
        }
    case -1:
      if (((enum rtx_code) ((((insn)->u.fld[5]).rtx1))->code) != ASM_INPUT
          && asm_noperands ((((insn)->u.fld[5]).rtx1)) < 0)
        _fatal_insn_not_found (insn, "gcc.c", 150776, "?");
    default:
      return 0;
    }
}
int
insn_variable_length_p (rtx insn )
{
  switch (((((insn)->u.fld[6]).rtint) >= 0 ? (((insn)->u.fld[6]).rtint) : recog_memoized_1 (insn)))
    {
    case 514:
    case 509:
    case 498:
    case 497:
      return 1;
    case -1:
      if (((enum rtx_code) ((((insn)->u.fld[5]).rtx1))->code) != ASM_INPUT
          && asm_noperands ((((insn)->u.fld[5]).rtx1)) < 0)
        _fatal_insn_not_found (insn, "gcc.c", 150797, "?");
    default:
      return 0;
    }
}
int
insn_default_length (rtx insn )
{
  switch (((((insn)->u.fld[6]).rtint) >= 0 ? (((insn)->u.fld[6]).rtint) : recog_memoized_1 (insn)))
    {
    case 655:
      extract_constrain_insn_cached (insn);
      if (!((1 << which_alternative) & 0x3))
        {
   return 16 ;
        }
      else
        {
   return 2 + get_attr_prefix_data16 (insn) + get_attr_length_address (insn);
        }
    case 580:
    case 579:
    case 578:
    case 577:
    case 576:
    case 575:
    case 574:
    case 573:
    case 572:
    case 571:
    case 570:
    case 568:
    case 567:
    case 566:
    case 565:
    case 563:
    case 562:
      if (get_attr_unit (insn) == UNIT_I387)
        {
   return 2 + get_attr_prefix_data16 (insn) + get_attr_length_address (insn);
        }
      else
        {
   return get_attr_modrm (insn) + get_attr_prefix_0f (insn) + get_attr_prefix_rex (insn) + 1 + get_attr_prefix_rep (insn) + get_attr_prefix_data16 (insn) + get_attr_length_immediate (insn) + get_attr_length_address (insn);
        }
    case 584:
    case 581:
    case 559:
    case 556:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return 2 + get_attr_prefix_data16 (insn) + get_attr_length_address (insn);
        }
      else
        {
   return get_attr_modrm (insn) + get_attr_prefix_0f (insn) + get_attr_prefix_rex (insn) + 1 + get_attr_prefix_rep (insn) + get_attr_prefix_data16 (insn) + get_attr_length_immediate (insn) + get_attr_length_address (insn);
        }
    case 490:
    case 489:
    case 487:
    case 478:
    case 477:
    case 475:
    case 464:
    case 463:
    case 459:
    case 443:
    case 440:
    case 439:
    case 437:
    case 435:
      extract_insn_cached (insn);
      if (register_operand (recog_data.operand[0], VOIDmode))
        {
   return 2;
        }
      else
        {
   return get_attr_modrm (insn) + get_attr_prefix_0f (insn) + get_attr_prefix_rex (insn) + 1 + get_attr_prefix_rep (insn) + get_attr_prefix_data16 (insn) + get_attr_length_immediate (insn) + get_attr_length_address (insn);
        }
    case 484:
    case 483:
    case 471:
    case 467:
    case 461:
    case 455:
    case 451:
    case 431:
    case 427:
      extract_insn_cached (insn);
      if (register_operand (recog_data.operand[0], SImode))
        {
   return 2;
        }
      else
        {
   return get_attr_modrm (insn) + get_attr_prefix_0f (insn) + get_attr_prefix_rex (insn) + 1 + get_attr_prefix_rep (insn) + get_attr_prefix_data16 (insn) + get_attr_length_immediate (insn) + get_attr_length_address (insn);
        }
    case 481:
    case 469:
    case 447:
    case 445:
    case 420:
    case 418:
      extract_insn_cached (insn);
      if (register_operand (recog_data.operand[0], DImode))
        {
   return 2;
        }
      else
        {
   return get_attr_modrm (insn) + get_attr_prefix_0f (insn) + get_attr_prefix_rex (insn) + 1 + get_attr_prefix_rep (insn) + get_attr_prefix_data16 (insn) + get_attr_length_immediate (insn) + get_attr_length_address (insn);
        }
    case 172:
    case 169:
    case 166:
    case 163:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 1)
        {
   return 16 ;
        }
      else if (which_alternative == 0)
        {
   return 2 + get_attr_prefix_data16 (insn) + get_attr_length_address (insn);
        }
      else
        {
   return get_attr_modrm (insn) + get_attr_prefix_0f (insn) + get_attr_prefix_rex (insn) + 1 + get_attr_prefix_rep (insn) + get_attr_prefix_data16 (insn) + get_attr_length_immediate (insn) + get_attr_length_address (insn);
        }
    case 137:
      extract_constrain_insn_cached (insn);
      if (which_alternative != 0)
        {
   return 2 + get_attr_prefix_data16 (insn) + get_attr_length_address (insn);
        }
      else
        {
   return get_attr_modrm (insn) + get_attr_prefix_0f (insn) + get_attr_prefix_rex (insn) + 1 + get_attr_prefix_rep (insn) + get_attr_prefix_data16 (insn) + get_attr_length_immediate (insn) + get_attr_length_address (insn);
        }
    case 136:
      extract_constrain_insn_cached (insn);
      if (!((1 << which_alternative) & 0x3))
        {
   return 2 + get_attr_prefix_data16 (insn) + get_attr_length_address (insn);
        }
      else
        {
   return get_attr_modrm (insn) + get_attr_prefix_0f (insn) + get_attr_prefix_rex (insn) + 1 + get_attr_prefix_rep (insn) + get_attr_prefix_data16 (insn) + get_attr_length_immediate (insn) + get_attr_length_address (insn);
        }
    case 135:
    case 134:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0xe))
        {
   return 16 ;
        }
      else if (which_alternative == 0)
        {
   return 2 + get_attr_prefix_data16 (insn) + get_attr_length_address (insn);
        }
      else
        {
   return get_attr_modrm (insn) + get_attr_prefix_0f (insn) + get_attr_prefix_rex (insn) + 1 + get_attr_prefix_rep (insn) + get_attr_prefix_data16 (insn) + get_attr_length_immediate (insn) + get_attr_length_address (insn);
        }
    case 176:
    case 175:
    case 174:
    case 171:
    case 168:
    case 165:
    case 162:
    case 145:
    case 142:
    case 133:
      extract_constrain_insn_cached (insn);
      if (which_alternative != 0)
        {
   return 16 ;
        }
      else
        {
   return 2 + get_attr_prefix_data16 (insn) + get_attr_length_address (insn);
        }
    case 656:
    case 654:
    case 128:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x3))
        {
   return 2 + get_attr_prefix_data16 (insn) + get_attr_length_address (insn);
        }
      else
        {
   return get_attr_modrm (insn) + get_attr_prefix_0f (insn) + get_attr_prefix_rex (insn) + 1 + get_attr_prefix_rep (insn) + get_attr_prefix_data16 (insn) + get_attr_length_immediate (insn) + get_attr_length_address (insn);
        }
    case 112:
    case 111:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x7))
        {
   return 16 ;
        }
      else
        {
   return get_attr_modrm (insn) + get_attr_prefix_0f (insn) + get_attr_prefix_rex (insn) + 1 + get_attr_prefix_rep (insn) + get_attr_prefix_data16 (insn) + get_attr_length_immediate (insn) + get_attr_length_address (insn);
        }
    case 101:
    case 100:
      extract_constrain_insn_cached (insn);
      if (!((1 << which_alternative) & 0x7))
        {
   return 16 ;
        }
      else
        {
   return 2 + get_attr_prefix_data16 (insn) + get_attr_length_address (insn);
        }
    case 96:
    case 95:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x18))
        {
   return 16 ;
        }
      else if (((1 << which_alternative) & 0x7))
        {
   return 2 + get_attr_prefix_data16 (insn) + get_attr_length_address (insn);
        }
      else
        {
   return get_attr_modrm (insn) + get_attr_prefix_0f (insn) + get_attr_prefix_rex (insn) + 1 + get_attr_prefix_rep (insn) + get_attr_prefix_data16 (insn) + get_attr_length_immediate (insn) + get_attr_length_address (insn);
        }
    case 657:
    case 616:
    case 615:
    case 614:
    case 613:
    case 612:
    case 611:
    case 610:
    case 609:
    case 608:
    case 607:
    case 606:
    case 605:
    case 604:
    case 603:
    case 602:
    case 601:
    case 600:
    case 599:
    case 598:
    case 597:
    case 596:
    case 595:
    case 594:
    case 593:
    case 592:
    case 591:
    case 590:
    case 589:
    case 588:
    case 587:
    case 586:
    case 583:
    case 561:
    case 558:
    case 555:
    case 391:
    case 390:
    case 389:
    case 388:
    case 387:
    case 386:
    case 376:
    case 375:
    case 374:
    case 373:
    case 372:
    case 371:
    case 146:
    case 144:
    case 143:
    case 141:
    case 138:
    case 132:
    case 131:
    case 130:
    case 102:
    case 97:
    case 92:
      return 2 + get_attr_prefix_data16 (insn) + get_attr_length_address (insn);
    case 91:
    case 90:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x7))
        {
   return 2 + get_attr_prefix_data16 (insn) + get_attr_length_address (insn);
        }
      else
        {
   return get_attr_modrm (insn) + get_attr_prefix_0f (insn) + get_attr_prefix_rex (insn) + 1 + get_attr_prefix_rep (insn) + get_attr_prefix_data16 (insn) + get_attr_length_immediate (insn) + get_attr_length_address (insn);
        }
    case 89:
    case 88:
      extract_constrain_insn_cached (insn);
      if (which_alternative != 1)
        {
   return 16 ;
        }
      else
        {
   return get_attr_modrm (insn) + get_attr_prefix_0f (insn) + get_attr_prefix_rex (insn) + 1 + get_attr_prefix_rep (insn) + get_attr_prefix_data16 (insn) + get_attr_length_immediate (insn) + get_attr_length_address (insn);
        }
    case 84:
    case 83:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 4)
        {
   return 16 ;
        }
      else
        {
   return get_attr_modrm (insn) + get_attr_prefix_0f (insn) + get_attr_prefix_rex (insn) + 1 + get_attr_prefix_rep (insn) + get_attr_prefix_data16 (insn) + get_attr_length_immediate (insn) + get_attr_length_address (insn);
        }
    case 721:
    case 720:
    case 82:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x3))
        {
   return 16 ;
        }
      else
        {
   return get_attr_modrm (insn) + get_attr_prefix_0f (insn) + get_attr_prefix_rex (insn) + 1 + get_attr_prefix_rep (insn) + get_attr_prefix_data16 (insn) + get_attr_length_immediate (insn) + get_attr_length_address (insn);
        }
    case 76:
      extract_constrain_insn_cached (insn);
      if (which_alternative != 0)
        {
   return 16 ;
        }
      else
        {
   return get_attr_modrm (insn) + get_attr_prefix_0f (insn) + get_attr_prefix_rex (insn) + 1 + get_attr_prefix_rep (insn) + get_attr_prefix_data16 (insn) + get_attr_length_immediate (insn) + get_attr_length_address (insn);
        }
    case 34:
    case 31:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return 4;
        }
      else
        {
   return get_attr_modrm (insn) + get_attr_prefix_0f (insn) + get_attr_prefix_rex (insn) + 1 + get_attr_prefix_rep (insn) + get_attr_prefix_data16 (insn) + get_attr_length_immediate (insn) + get_attr_length_address (insn);
        }
    case 33:
    case 30:
    case 25:
    case 23:
    case 21:
    case 20:
    case 19:
      return 4;
    case -1:
      if (((enum rtx_code) ((((insn)->u.fld[5]).rtx1))->code) != ASM_INPUT
          && asm_noperands ((((insn)->u.fld[5]).rtx1)) < 0)
        _fatal_insn_not_found (insn, "gcc.c", 151193, "?");
      return 128 ;
    case 1022:
    case 1021:
    case 526:
      return 3;
    case 853:
      return 135 ;
    case 554:
    case 553:
    case 552:
    case 551:
      return 7;
    case 549:
    case 544:
    case 530:
      return 12 ;
    case 548:
      return 13 ;
    case 547:
      return 11 ;
    case 545:
      return 14 ;
    case 528:
    case 525:
    case 524:
    case 29:
      return 1;
    case 523:
      return 0;
    case 718:
    case 717:
    case 716:
    case 715:
    case 714:
    case 713:
    case 712:
    case 711:
    case 710:
    case 709:
    case 708:
    case 697:
    case 696:
    case 684:
    case 683:
    case 682:
    case 681:
    case 680:
    case 679:
    case 678:
    case 677:
    case 676:
    case 675:
    case 674:
    case 673:
    case 668:
    case 667:
    case 665:
    case 664:
    case 662:
    case 661:
    case 659:
    case 658:
    case 550:
    case 543:
    case 542:
    case 541:
    case 540:
    case 539:
    case 538:
    case 537:
    case 536:
    case 535:
    case 532:
    case 531:
    case 508:
    case 507:
    case 506:
    case 505:
    case 504:
    case 503:
    case 502:
    case 501:
    case 500:
    case 499:
    case 450:
    case 449:
    case 423:
    case 422:
    case 405:
    case 404:
    case 385:
    case 384:
    case 383:
    case 382:
    case 381:
    case 380:
    case 379:
    case 378:
    case 377:
    case 370:
    case 369:
    case 368:
    case 367:
    case 366:
    case 365:
    case 364:
    case 363:
    case 362:
    case 351:
    case 287:
    case 286:
    case 275:
    case 273:
    case 272:
    case 270:
    case 269:
    case 267:
    case 266:
    case 225:
    case 177:
    case 159:
    case 158:
    case 157:
    case 154:
    case 153:
    case 152:
    case 149:
    case 148:
    case 147:
    case 127:
    case 126:
    case 117:
    case 99:
    case 98:
    case 94:
    case 93:
    case 75:
    case 27:
    case 26:
    case 24:
    case 22:
    case 18:
    case 546:
    case 529:
    case 514:
      return 16 ;
    case 686:
    case 685:
    case 509:
      return 5;
    case 498:
    case 497:
      return 6;
    case 472:
    case 456:
    case 452:
    case 432:
    case 428:
    case 161:
    case 160:
    case 28:
      return 2;
    default:
      return get_attr_modrm (insn) + get_attr_prefix_0f (insn) + get_attr_prefix_rex (insn) + 1 + get_attr_prefix_rep (insn) + get_attr_prefix_data16 (insn) + get_attr_length_immediate (insn) + get_attr_length_address (insn);
    }
}
int
bypass_p (rtx insn )
{
  switch (((((insn)->u.fld[6]).rtint) >= 0 ? (((insn)->u.fld[6]).rtint) : recog_memoized_1 (insn)))
    {
    case 89:
    case 88:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 1) && (! (memory_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 76:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && (! (memory_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 534:
    case 533:
    case 79:
    case 78:
    case 40:
    case 39:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 77:
    case 58:
    case 57:
    case 49:
    case 48:
    case 38:
    case 37:
    case 36:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (! (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case -1:
      if (((enum rtx_code) ((((insn)->u.fld[5]).rtx1))->code) != ASM_INPUT
          && asm_noperands ((((insn)->u.fld[5]).rtx1)) < 0)
        _fatal_insn_not_found (insn, "gcc.c", 151440, "?");
    default:
      return 0;
    }
}
int
insn_default_latency (rtx insn )
{
  switch (((((insn)->u.fld[6]).rtint) >= 0 ? (((insn)->u.fld[6]).rtint) : recog_memoized_1 (insn)))
    {
    case 1015:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 0))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 1009:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && ((memory_operand (recog_data.operand[1], DFmode)) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_K8))) && (which_alternative == 1)) || (((((ix86_tune) == (CPU_ATHLON))) && (which_alternative == 1)) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 1)))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 1008:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && ((memory_operand (recog_data.operand[1], DFmode)) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || ((which_alternative == 1) && (((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))) || ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 1012:
    case 1011:
    case 1010:
    case 1004:
    case 1002:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((memory_operand (recog_data.operand[1], DFmode)) || (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || ((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 966:
    case 965:
    case 964:
    case 963:
    case 962:
    case 961:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 952:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((optimize_size) != (0))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 903:
    case 902:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 6;
        }
      else
        {
   return 0;
        }
    case 899:
    case 898:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 3;
        }
      else
        {
   return 0;
        }
    case 891:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 22 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 20 ;
        }
      else
        {
   return 0;
        }
    case 890:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 39 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 35 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 39 ;
        }
      else
        {
   return 0;
        }
    case 895:
    case 893:
    case 889:
    case 887:
    case 885:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 4;
        }
      else
        {
   return 0;
        }
    case 1028:
    case 1026:
    case 1024:
    case 894:
    case 892:
    case 888:
    case 886:
    case 884:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 7;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 5;
        }
      else
        {
   return 0;
        }
    case 881:
    case 880:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 879:
    case 878:
    case 870:
    case 869:
    case 865:
    case 864:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 1020:
    case 1019:
    case 1018:
    case 852:
      if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 3;
        }
      else
        {
   return 0;
        }
    case 851:
      if (((ix86_tune) == (CPU_K6)))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 850:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 2;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 3;
        }
      else
        {
   return 0;
        }
    case 849:
      if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 859:
    case 858:
    case 857:
    case 827:
    case 826:
    case 825:
    case 824:
    case 823:
    case 822:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD)) || (((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD)) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 871:
    case 842:
    case 841:
    case 840:
    case 839:
    case 838:
    case 837:
    case 836:
    case 835:
    case 834:
    case 833:
    case 832:
    case 818:
    case 817:
    case 816:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 883:
    case 882:
    case 863:
    case 813:
    case 812:
      if ((((ix86_tune) == (CPU_PENTIUM))) || (((ix86_tune) == (CPU_PENTIUMPRO))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 877:
    case 862:
    case 810:
    case 809:
    case 808:
    case 807:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 3;
        }
      else
        {
   return 0;
        }
    case 876:
    case 875:
    case 874:
    case 873:
    case 872:
    case 868:
    case 867:
    case 866:
    case 861:
    case 860:
    case 856:
    case 855:
    case 854:
    case 831:
    case 830:
    case 829:
    case 828:
    case 815:
    case 814:
    case 811:
    case 806:
    case 805:
    case 804:
    case 803:
    case 802:
    case 801:
    case 800:
    case 799:
    case 798:
    case 797:
    case 796:
    case 795:
    case 794:
    case 793:
    case 792:
    case 791:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 923:
    case 921:
    case 788:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD))) || (((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE))) || ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))))
        {
   return 9;
        }
      else
        {
   return 0;
        }
    case 922:
    case 920:
    case 787:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) || ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD))) || (((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE))) || ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))))
        {
   return 9;
        }
      else
        {
   return 0;
        }
    case 775:
    case 774:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 6;
        }
      else
        {
   return 0;
        }
    case 771:
    case 770:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 3;
        }
      else
        {
   return 0;
        }
    case 769:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 1;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 3;
        }
      else
        {
   return 0;
        }
    case 768:
      extract_constrain_insn_cached (insn);
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0)))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 3;
        }
      else
        {
   return 0;
        }
    case 767:
    case 766:
    case 765:
    case 764:
    case 763:
    case 762:
    case 761:
    case 760:
    case 759:
    case 758:
    case 757:
    case 756:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 3;
        }
      else
        {
   return 0;
        }
    case 755:
    case 754:
    case 753:
    case 752:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 3;
        }
      else
        {
   return 0;
        }
    case 1030:
    case 1029:
    case 780:
    case 778:
    case 750:
    case 748:
    case 746:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 745:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 18 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 22 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 20 ;
        }
      else
        {
   return 0;
        }
    case 744:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 48 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 39 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 35 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 39 ;
        }
      else
        {
   return 0;
        }
    case 743:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 4;
        }
      else
        {
   return 0;
        }
    case 742:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 7;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 5;
        }
      else
        {
   return 0;
        }
    case 741:
    case 739:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))) || ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 4;
        }
      else
        {
   return 0;
        }
    case 1027:
    case 1025:
    case 1023:
    case 740:
    case 738:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))) || ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 7;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 5;
        }
      else
        {
   return 0;
        }
    case 736:
    case 735:
    case 734:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD)) || (get_attr_memory (insn) == MEMORY_STORE))) || ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD)) || (((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 928:
    case 783:
    case 782:
    case 777:
    case 776:
    case 737:
    case 733:
    case 732:
    case 731:
    case 730:
    case 725:
    case 724:
    case 723:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 721:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((1 << which_alternative) & 0x3))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))))) || ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((memory_operand (recog_data.operand[1], DFmode)) || (((((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0xc)) && (! ((optimize_size) != (0)))) || ((which_alternative == 4) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0xc)) && (! ((optimize_size) != (0)))) || ((which_alternative == 4) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || (((((ix86_tune) == (CPU_K8))) && ((((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0xc)) && (! ((optimize_size) != (0)))) || ((which_alternative == 4) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0)))))))) || (((((ix86_tune) == (CPU_ATHLON))) && ((((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0xc)) && (! ((optimize_size) != (0)))) || ((which_alternative == 4) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0)))))))) || ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 720:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((1 << which_alternative) & 0x3))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))))) || ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((memory_operand (recog_data.operand[1], DFmode)) || (((((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0xc)) && (! ((optimize_size) != (0)))) || ((which_alternative == 4) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0xc)) && (! ((optimize_size) != (0)))) || ((which_alternative == 4) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || (((((ix86_tune) == (CPU_K8))) && ((((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0xc)) && (! ((optimize_size) != (0)))) || ((which_alternative == 4) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0)))))))) || (((((ix86_tune) == (CPU_ATHLON))) && ((((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0xc)) && (! ((optimize_size) != (0)))) || ((which_alternative == 4) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0)))))))) || ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 719:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((optimize_size) != (0)))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((optimize_size) != (0))))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((optimize_size) != (0)))))) || ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((memory_operand (recog_data.operand[1], DFmode)) || (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((optimize_size) != (0)))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && (! ((optimize_size) != (0)))) || (!((1 << which_alternative) & 0x7))))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((optimize_size) != (0)))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && (! ((optimize_size) != (0)))) || (!((1 << which_alternative) & 0x7))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || (((((ix86_tune) == (CPU_K8))) && ((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((optimize_size) != (0)))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && (! ((optimize_size) != (0)))) || (!((1 << which_alternative) & 0x7)))))) || ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 707:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))))) || ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((memory_operand (recog_data.operand[1], DFmode)) || (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || (((((ix86_tune) == (CPU_K8))) && ((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7)))))) || ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 706:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))))) || ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((memory_operand (recog_data.operand[1], DFmode)) || (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || (((((ix86_tune) == (CPU_K8))) && ((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7)))))) || ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 705:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))))) || ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((memory_operand (recog_data.operand[1], DFmode)) || (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || (((((ix86_tune) == (CPU_K8))) && ((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7)))))) || ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 848:
    case 847:
    case 846:
    case 845:
    case 844:
    case 843:
    case 821:
    case 820:
    case 819:
    case 727:
    case 726:
    case 704:
    case 703:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 729:
    case 702:
    case 701:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 0;
        }
      else if (((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD)) || (((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 700:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))))) || ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((memory_operand (recog_data.operand[1], DFmode)) || (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || (((((ix86_tune) == (CPU_K8))) && ((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7)))))) || ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 699:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))))) || ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((memory_operand (recog_data.operand[1], DFmode)) || (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || (((((ix86_tune) == (CPU_K8))) && ((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7)))))) || ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 728:
    case 722:
    case 698:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE)) || ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((memory_operand (recog_data.operand[1], DFmode)) || (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || ((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 695:
    case 694:
    case 693:
    case 692:
    case 691:
    case 690:
    case 689:
    case 688:
    case 687:
      extract_insn_cached (insn);
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 10 ;
        }
      else
        {
   return 6;
        }
    case 672:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_NONE)) || ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_NONE)) || ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 0)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (which_alternative == 0)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (which_alternative == 0)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if (((which_alternative == 1) && (((ix86_tune) == (CPU_K6)))) || (((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || ((which_alternative == 1) && ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 671:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 1) && (const0_operand (recog_data.operand[2], DImode))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x3))) && (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x3))) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x3))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 1) && (const0_operand (recog_data.operand[2], DImode))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((which_alternative == 1) && (const0_operand (recog_data.operand[2], DImode)))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((((get_attr_memory (insn) == MEMORY_STORE) && ((which_alternative == 1) && (const0_operand (recog_data.operand[2], DImode)))) || ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 1) && (! (const0_operand (recog_data.operand[2], DImode)))))) || ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 0))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (which_alternative == 0)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (which_alternative == 0)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 1) && (const0_operand (recog_data.operand[2], DImode))) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 1) && (const0_operand (recog_data.operand[2], DImode))) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 1) && (const0_operand (recog_data.operand[2], DImode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 1) && (const0_operand (recog_data.operand[2], DImode))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 1) && (const0_operand (recog_data.operand[2], DImode))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_K6))) && (((which_alternative == 1) && (! (const0_operand (recog_data.operand[2], DImode)))) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (! (const0_operand (recog_data.operand[2], DImode))))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((which_alternative == 1) && (const0_operand (recog_data.operand[2], DImode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((which_alternative == 1) && (const0_operand (recog_data.operand[2], DImode))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 670:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 1) && (const0_operand (recog_data.operand[2], SImode))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x3))) && (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x3))) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x3))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 1) && (const0_operand (recog_data.operand[2], SImode))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((which_alternative == 1) && (const0_operand (recog_data.operand[2], SImode)))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((((get_attr_memory (insn) == MEMORY_STORE) && ((which_alternative == 1) && (const0_operand (recog_data.operand[2], SImode)))) || ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 1) && (! (const0_operand (recog_data.operand[2], SImode)))))) || ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 0))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (which_alternative == 0)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (which_alternative == 0)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 1) && (const0_operand (recog_data.operand[2], SImode))) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 1) && (const0_operand (recog_data.operand[2], SImode))) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 1) && (const0_operand (recog_data.operand[2], SImode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 1) && (const0_operand (recog_data.operand[2], SImode))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 1) && (const0_operand (recog_data.operand[2], SImode))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_K6))) && (((which_alternative == 1) && (! (const0_operand (recog_data.operand[2], SImode)))) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (! (const0_operand (recog_data.operand[2], SImode))))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((which_alternative == 1) && (const0_operand (recog_data.operand[2], SImode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((which_alternative == 1) && (const0_operand (recog_data.operand[2], SImode))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 657:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 1;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 2;
        }
      else if (((ix86_tune) == (CPU_ATHLON)))
        {
   return 7;
        }
      else if (((ix86_tune) == (CPU_K8)))
        {
   return 15 ;
        }
      else
        {
   return 0;
        }
    case 655:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((1 << which_alternative) & 0x3)))
        {
   return 1;
        }
      else if (!((1 << which_alternative) & 0x3))
        {
   return 6;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 2;
        }
      else if (((ix86_tune) == (CPU_ATHLON)))
        {
   return 7;
        }
      else if (((ix86_tune) == (CPU_K8)))
        {
   return 15 ;
        }
      else
        {
   return 0;
        }
    case 656:
    case 654:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((1 << which_alternative) & 0x3)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (!((1 << which_alternative) & 0x3))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (!((1 << which_alternative) & 0x3))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (!((1 << which_alternative) & 0x3))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (!((1 << which_alternative) & 0x3))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x3)) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((1 << which_alternative) & 0x3)))
        {
   return 7;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 17 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((1 << which_alternative) & 0x3)))
        {
   return 15 ;
        }
      else
        {
   return 0;
        }
    case 653:
    case 652:
    case 651:
    case 649:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 650:
    case 648:
      if ((((ix86_tune) == (CPU_PENTIUM))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) || ((((ix86_tune) == (CPU_K6))) || ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))))))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 647:
    case 646:
    case 645:
    case 644:
    case 643:
    case 642:
    case 641:
    case 640:
    case 639:
    case 638:
    case 637:
    case 636:
    case 635:
    case 634:
    case 633:
    case 632:
    case 631:
    case 630:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 12 ;
        }
      else
        {
   return 6;
        }
    case 629:
    case 628:
    case 627:
    case 626:
    case 625:
    case 624:
    case 623:
    case 622:
    case 621:
    case 620:
    case 619:
    case 618:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 12 ;
        }
      else
        {
   return 6;
        }
    case 617:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 2;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 2;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 616:
    case 615:
    case 614:
    case 613:
    case 612:
    case 611:
    case 610:
    case 607:
    case 604:
    case 600:
    case 596:
    case 592:
    case 591:
    case 590:
    case 589:
    case 588:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 70 ;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 38 ;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 56 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 100 ;
        }
      else
        {
   return 0;
        }
    case 608:
    case 605:
    case 603:
    case 601:
    case 599:
    case 597:
    case 595:
    case 593:
    case 587:
    case 586:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 70 ;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 32 ;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 56 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 100 ;
        }
      else
        {
   return 0;
        }
    case 1031:
    case 1017:
    case 1013:
    case 1007:
    case 1006:
    case 1005:
    case 1003:
    case 1001:
    case 1000:
    case 999:
    case 998:
    case 997:
    case 996:
    case 995:
    case 994:
    case 993:
    case 992:
    case 991:
    case 990:
    case 989:
    case 960:
    case 959:
    case 958:
    case 957:
    case 956:
    case 929:
    case 919:
    case 918:
    case 917:
    case 916:
    case 915:
    case 914:
    case 913:
    case 912:
    case 911:
    case 910:
    case 909:
    case 908:
    case 907:
    case 906:
    case 905:
    case 904:
    case 896:
    case 784:
    case 669:
    case 663:
    case 585:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 584:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (which_alternative == 0))
        {
   return 70 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 0)))
        {
   return 32 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0)))
        {
   return 33 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (which_alternative == 0))
        {
   return 56 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 103 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 0))
        {
   return 100 ;
        }
      else
        {
   return 0;
        }
    case 609:
    case 606:
    case 602:
    case 598:
    case 594:
    case 583:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 70 ;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 18 ;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 56 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 100 ;
        }
      else
        {
   return 0;
        }
    case 897:
    case 781:
    case 779:
    case 751:
    case 749:
    case 747:
    case 666:
    case 660:
    case 582:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) || ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 581:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (which_alternative == 0))
        {
   return 70 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 0)))
        {
   return 18 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0)))
        {
   return 19 ;
        }
      else if (((which_alternative == 1) && (((ix86_tune) == (CPU_PENTIUMPRO)))) || ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (which_alternative == 0))
        {
   return 56 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 103 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 0))
        {
   return 100 ;
        }
      else
        {
   return 0;
        }
    case 580:
    case 579:
    case 578:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_type (insn) == TYPE_FOP) || (mult_operator (recog_data.operand[3], XFmode))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 39 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_FOP)) || ((get_attr_memory (insn) == MEMORY_NONE) && (mult_operator (recog_data.operand[3], XFmode)))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (mult_operator (recog_data.operand[3], XFmode))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FDIV)))
        {
   return 18 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FDIV)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], XFmode)) && ((get_attr_memory (insn) == MEMORY_NONE) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 56 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_FOP)) || ((((ix86_tune) == (CPU_ATHLON))) && ((mult_operator (recog_data.operand[3], XFmode)) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((mult_operator (recog_data.operand[3], XFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (mult_operator (recog_data.operand[3], XFmode)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 13 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 11 ;
        }
      else
        {
   return 0;
        }
    case 577:
    case 576:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_type (insn) == TYPE_FOP) || (mult_operator (recog_data.operand[3], XFmode))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 39 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_FOP)) || ((get_attr_memory (insn) == MEMORY_NONE) && (mult_operator (recog_data.operand[3], XFmode)))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (mult_operator (recog_data.operand[3], XFmode))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], XFmode)) && ((get_attr_memory (insn) == MEMORY_NONE) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 56 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_FOP)) || ((((ix86_tune) == (CPU_ATHLON))) && ((mult_operator (recog_data.operand[3], XFmode)) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((mult_operator (recog_data.operand[3], XFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (mult_operator (recog_data.operand[3], XFmode)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 13 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 11 ;
        }
      else
        {
   return 0;
        }
    case 575:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_type (insn) == TYPE_FOP) || (mult_operator (recog_data.operand[3], XFmode))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 39 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_FOP)) || ((get_attr_memory (insn) == MEMORY_NONE) && (mult_operator (recog_data.operand[3], XFmode)))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (mult_operator (recog_data.operand[3], XFmode))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FDIV)))
        {
   return 38 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FDIV)))
        {
   return 39 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], XFmode)) && ((get_attr_memory (insn) == MEMORY_NONE) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 56 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_FOP)) || ((((ix86_tune) == (CPU_ATHLON))) && ((mult_operator (recog_data.operand[3], XFmode)) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((mult_operator (recog_data.operand[3], XFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (mult_operator (recog_data.operand[3], XFmode)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 13 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 11 ;
        }
      else
        {
   return 0;
        }
    case 574:
    case 573:
    case 572:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_type (insn) == TYPE_FOP) || (mult_operator (recog_data.operand[3], DFmode))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 39 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_FOP)) || ((get_attr_memory (insn) == MEMORY_NONE) && (mult_operator (recog_data.operand[3], DFmode)))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (mult_operator (recog_data.operand[3], DFmode))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FDIV)))
        {
   return 18 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FDIV)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], DFmode)) && ((get_attr_memory (insn) == MEMORY_NONE) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 56 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_FOP)) || ((((ix86_tune) == (CPU_ATHLON))) && ((mult_operator (recog_data.operand[3], DFmode)) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((mult_operator (recog_data.operand[3], DFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (mult_operator (recog_data.operand[3], DFmode)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 13 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 11 ;
        }
      else
        {
   return 0;
        }
    case 571:
    case 570:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_type (insn) == TYPE_FOP) || (mult_operator (recog_data.operand[3], DFmode))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 39 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_FOP)) || ((get_attr_memory (insn) == MEMORY_NONE) && (mult_operator (recog_data.operand[3], DFmode)))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (mult_operator (recog_data.operand[3], DFmode))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], DFmode)) && ((get_attr_memory (insn) == MEMORY_NONE) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 56 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_FOP)) || ((((ix86_tune) == (CPU_ATHLON))) && ((mult_operator (recog_data.operand[3], DFmode)) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((mult_operator (recog_data.operand[3], DFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (mult_operator (recog_data.operand[3], DFmode)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 13 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 11 ;
        }
      else
        {
   return 0;
        }
    case 569:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_SSEADD) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_SSEADD) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_SSEADD))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && (get_attr_type (insn) == TYPE_SSEADD)) || ((((ix86_tune) == (CPU_K8))) && (get_attr_type (insn) == TYPE_SSEADD)))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (mult_operator (recog_data.operand[3], SFmode)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && (mult_operator (recog_data.operand[3], SFmode))) || ((((ix86_tune) == (CPU_K8))) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_SSEDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_SSEDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 22 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_SSEDIV))
        {
   return 20 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && (get_attr_type (insn) == TYPE_SSEDIV)) || ((((ix86_tune) == (CPU_K8))) && (get_attr_type (insn) == TYPE_SSEDIV)))
        {
   return 39 ;
        }
      else
        {
   return 0;
        }
    case 568:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_type (insn) == TYPE_FOP) || ((which_alternative != 2) && (mult_operator (recog_data.operand[3], DFmode)))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 39 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_FOP)) || ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative != 2) && (mult_operator (recog_data.operand[3], DFmode))))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((which_alternative != 2) && (mult_operator (recog_data.operand[3], DFmode)))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FDIV)))
        {
   return 32 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FDIV)))
        {
   return 33 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative != 2) && (mult_operator (recog_data.operand[3], DFmode))) && ((get_attr_memory (insn) == MEMORY_NONE) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 56 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_FOP)) || ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative != 2) && (mult_operator (recog_data.operand[3], DFmode))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative != 2) && (mult_operator (recog_data.operand[3], DFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative != 2) && (mult_operator (recog_data.operand[3], DFmode))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 13 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 11 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_SSEADD) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_SSEADD) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_SSEADD))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && (get_attr_type (insn) == TYPE_SSEADD)) || ((((ix86_tune) == (CPU_K8))) && (get_attr_type (insn) == TYPE_SSEADD)))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 7;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode)))) || ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_SSEDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_SSEDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 22 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_SSEDIV))
        {
   return 20 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && (get_attr_type (insn) == TYPE_SSEDIV)) || ((((ix86_tune) == (CPU_K8))) && (get_attr_type (insn) == TYPE_SSEDIV)))
        {
   return 39 ;
        }
      else
        {
   return 0;
        }
    case 567:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_type (insn) == TYPE_FOP) || (mult_operator (recog_data.operand[3], DFmode))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 39 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_FOP)) || ((get_attr_memory (insn) == MEMORY_NONE) && (mult_operator (recog_data.operand[3], DFmode)))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (mult_operator (recog_data.operand[3], DFmode))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FDIV)))
        {
   return 32 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FDIV)))
        {
   return 33 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], DFmode)) && ((get_attr_memory (insn) == MEMORY_NONE) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 56 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_FOP)) || ((((ix86_tune) == (CPU_ATHLON))) && ((mult_operator (recog_data.operand[3], DFmode)) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((mult_operator (recog_data.operand[3], DFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (mult_operator (recog_data.operand[3], DFmode)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 13 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 11 ;
        }
      else
        {
   return 0;
        }
    case 566:
    case 565:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_type (insn) == TYPE_FOP) || (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 39 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_FOP)) || ((get_attr_memory (insn) == MEMORY_NONE) && (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], SFmode)) && ((get_attr_memory (insn) == MEMORY_NONE) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 56 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_FOP)) || ((((ix86_tune) == (CPU_ATHLON))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (mult_operator (recog_data.operand[3], SFmode)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 13 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 11 ;
        }
      else
        {
   return 0;
        }
    case 564:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_SSEADD)) || ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_SSEADD))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_NONE) && (mult_operator (recog_data.operand[3], SFmode))) || ((get_attr_memory (insn) == MEMORY_LOAD) && (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_SSEDIV)))
        {
   return 18 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_SSEADD) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_SSEADD) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_SSEADD))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && (get_attr_type (insn) == TYPE_SSEADD)) || ((((ix86_tune) == (CPU_K8))) && (get_attr_type (insn) == TYPE_SSEADD)))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (mult_operator (recog_data.operand[3], SFmode)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && (mult_operator (recog_data.operand[3], SFmode))) || ((((ix86_tune) == (CPU_K8))) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_SSEDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_SSEDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 22 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_SSEDIV))
        {
   return 20 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && (get_attr_type (insn) == TYPE_SSEDIV)) || ((((ix86_tune) == (CPU_K8))) && (get_attr_type (insn) == TYPE_SSEDIV)))
        {
   return 39 ;
        }
      else
        {
   return 0;
        }
    case 563:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_type (insn) == TYPE_FOP) || ((which_alternative != 2) && (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 39 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_FOP)) || ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative != 2) && (mult_operator (recog_data.operand[3], SFmode))))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((which_alternative != 2) && (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FDIV)))
        {
   return 18 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FDIV)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_SSEADD)) || ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_SSEADD))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode)))) || ((get_attr_memory (insn) == MEMORY_LOAD) && ((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode))))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_SSEDIV)))
        {
   return 18 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative != 2) && (mult_operator (recog_data.operand[3], SFmode))) && ((get_attr_memory (insn) == MEMORY_NONE) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 56 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_FOP)) || ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative != 2) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative != 2) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative != 2) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 13 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 11 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_SSEADD) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_SSEADD) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_SSEADD))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && (get_attr_type (insn) == TYPE_SSEADD)) || ((((ix86_tune) == (CPU_K8))) && (get_attr_type (insn) == TYPE_SSEADD)))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 7;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode)))) || ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_SSEDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_SSEDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 22 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_SSEDIV))
        {
   return 20 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && (get_attr_type (insn) == TYPE_SSEDIV)) || ((((ix86_tune) == (CPU_K8))) && (get_attr_type (insn) == TYPE_SSEDIV)))
        {
   return 39 ;
        }
      else
        {
   return 0;
        }
    case 562:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_type (insn) == TYPE_FOP) || (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 39 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_FOP)) || ((get_attr_memory (insn) == MEMORY_NONE) && (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FDIV)))
        {
   return 18 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FDIV)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], SFmode)) && ((get_attr_memory (insn) == MEMORY_NONE) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 56 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_FOP)) || ((((ix86_tune) == (CPU_ATHLON))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (mult_operator (recog_data.operand[3], SFmode)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 13 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 11 ;
        }
      else
        {
   return 0;
        }
    case 561:
      extract_insn_cached (insn);
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (! (mult_operator (recog_data.operand[3], XFmode)))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (! (mult_operator (recog_data.operand[3], XFmode)))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (! (mult_operator (recog_data.operand[3], XFmode)))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_BOTH) && (! (mult_operator (recog_data.operand[3], XFmode)))) || ((get_attr_memory (insn) == MEMORY_NONE) && (mult_operator (recog_data.operand[3], XFmode)))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (mult_operator (recog_data.operand[3], XFmode))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || ((! (mult_operator (recog_data.operand[3], XFmode))) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((! (mult_operator (recog_data.operand[3], XFmode))) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], XFmode)) && ((get_attr_memory (insn) == MEMORY_NONE) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((! (mult_operator (recog_data.operand[3], XFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((! (mult_operator (recog_data.operand[3], XFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (! (mult_operator (recog_data.operand[3], XFmode)))) || ((((ix86_tune) == (CPU_ATHLON))) && ((mult_operator (recog_data.operand[3], XFmode)) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((mult_operator (recog_data.operand[3], XFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (mult_operator (recog_data.operand[3], XFmode)))
        {
   return 4;
        }
      else
        {
   return 0;
        }
    case 560:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((! (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((! (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (! (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && (! (mult_operator (recog_data.operand[3], SFmode)))) || ((((ix86_tune) == (CPU_K8))) && (! (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (mult_operator (recog_data.operand[3], SFmode)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && (mult_operator (recog_data.operand[3], SFmode))) || ((((ix86_tune) == (CPU_K8))) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 5;
        }
      else
        {
   return 0;
        }
    case 559:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative != 1) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode))))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode))))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && ((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode))))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_BOTH) && ((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode))))) || ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 0) && (mult_operator (recog_data.operand[3], SFmode))))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((which_alternative == 0) && (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || (((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 0) && (mult_operator (recog_data.operand[3], SFmode))) && ((get_attr_memory (insn) == MEMORY_NONE) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode))))) || ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 0) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 0) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 0) && (mult_operator (recog_data.operand[3], SFmode)))) || ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 7;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode))))) || ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode))))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 7;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode)))) || ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 5;
        }
      else
        {
   return 0;
        }
    case 557:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_NONE) && (! (mult_operator (recog_data.operand[3], SFmode)))) || ((get_attr_memory (insn) == MEMORY_LOAD) && (! (mult_operator (recog_data.operand[3], SFmode))))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_NONE) && (mult_operator (recog_data.operand[3], SFmode))) || ((get_attr_memory (insn) == MEMORY_LOAD) && (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((! (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((! (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (! (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && (! (mult_operator (recog_data.operand[3], SFmode)))) || ((((ix86_tune) == (CPU_K8))) && (! (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (mult_operator (recog_data.operand[3], SFmode)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && (mult_operator (recog_data.operand[3], SFmode))) || ((((ix86_tune) == (CPU_K8))) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 5;
        }
      else
        {
   return 0;
        }
    case 556:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative != 1) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode))))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode))))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && ((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode))))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_BOTH) && ((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode))))) || ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 0) && (mult_operator (recog_data.operand[3], SFmode))))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((which_alternative == 0) && (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode))))) || ((get_attr_memory (insn) == MEMORY_LOAD) && ((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode)))))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode)))) || ((get_attr_memory (insn) == MEMORY_LOAD) && ((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode))))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || (((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 0) && (mult_operator (recog_data.operand[3], SFmode))) && ((get_attr_memory (insn) == MEMORY_NONE) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode))))) || ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 0) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 0) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 0) && (mult_operator (recog_data.operand[3], SFmode)))) || ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 7;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode))))) || ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode))))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 7;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode)))) || ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 5;
        }
      else
        {
   return 0;
        }
    case 558:
    case 555:
      extract_insn_cached (insn);
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (! (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (! (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (! (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_BOTH) && (! (mult_operator (recog_data.operand[3], SFmode)))) || ((get_attr_memory (insn) == MEMORY_NONE) && (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || ((! (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((! (mult_operator (recog_data.operand[3], SFmode))) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], SFmode)) && ((get_attr_memory (insn) == MEMORY_NONE) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((! (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((! (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (! (mult_operator (recog_data.operand[3], SFmode)))) || ((((ix86_tune) == (CPU_ATHLON))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (mult_operator (recog_data.operand[3], SFmode)))
        {
   return 4;
        }
      else
        {
   return 0;
        }
    case 554:
    case 552:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) || (((ix86_tune) == (CPU_K6))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 4;
        }
      else
        {
   return 0;
        }
    case 534:
    case 533:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 1;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 4;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 3;
        }
      else
        {
   return 0;
        }
    case 522:
    case 521:
    case 520:
    case 519:
    case 518:
    case 517:
    case 516:
    case 515:
      extract_insn_cached (insn);
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 10 ;
        }
      else
        {
   return 6;
        }
    case 527:
    case 514:
    case 513:
    case 512:
    case 511:
    case 510:
    case 509:
    case 498:
    case 497:
      extract_insn_cached (insn);
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (memory_operand (recog_data.operand[0], VOIDmode))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (memory_operand (recog_data.operand[0], VOIDmode)))
        {
   return 6;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 0;
        }
      else
        {
   return 0;
        }
    case 901:
    case 900:
    case 496:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 773:
    case 772:
    case 495:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))) || ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 494:
    case 493:
      extract_insn_cached (insn);
      if (((((ix86_tune) == (CPU_PENTIUM))) && (! (memory_operand (recog_data.operand[0], VOIDmode)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) || ((((ix86_tune) == (CPU_K6))) && (! (memory_operand (recog_data.operand[0], VOIDmode))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (memory_operand (recog_data.operand[0], VOIDmode)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 492:
    case 490:
    case 479:
    case 477:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (const1_operand (recog_data.operand[1], VOIDmode))) && (get_attr_memory (insn) == MEMORY_BOTH)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (const1_operand (recog_data.operand[1], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (const1_operand (recog_data.operand[1], VOIDmode))) && (get_attr_memory (insn) == MEMORY_LOAD)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (const1_operand (recog_data.operand[1], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (const1_operand (recog_data.operand[1], VOIDmode))) && (get_attr_memory (insn) == MEMORY_NONE)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (const1_operand (recog_data.operand[1], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 491:
    case 489:
    case 488:
    case 487:
    case 486:
    case 485:
    case 484:
    case 483:
    case 482:
    case 481:
    case 480:
    case 478:
    case 476:
    case 475:
    case 474:
    case 473:
    case 472:
    case 471:
    case 470:
    case 469:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (const1_operand (recog_data.operand[2], VOIDmode))) && (get_attr_memory (insn) == MEMORY_BOTH)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (const1_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (const1_operand (recog_data.operand[2], VOIDmode))) && (get_attr_memory (insn) == MEMORY_LOAD)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (const1_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (const1_operand (recog_data.operand[2], VOIDmode))) && (get_attr_memory (insn) == MEMORY_NONE)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (const1_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 466:
    case 464:
    case 442:
    case 440:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (const_int_operand (recog_data.operand[1], VOIDmode))) && (memory_operand (recog_data.operand[1], VOIDmode))) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (const_int_operand (recog_data.operand[1], VOIDmode)))) && (memory_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (const_int_operand (recog_data.operand[1], VOIDmode))) && (get_attr_memory (insn) == MEMORY_NONE)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (const_int_operand (recog_data.operand[1], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 424:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 468:
    case 467:
    case 465:
    case 463:
    case 462:
    case 461:
    case 460:
    case 459:
    case 458:
    case 457:
    case 456:
    case 455:
    case 454:
    case 453:
    case 452:
    case 451:
    case 448:
    case 447:
    case 446:
    case 445:
    case 444:
    case 443:
    case 441:
    case 439:
    case 438:
    case 437:
    case 436:
    case 435:
    case 434:
    case 433:
    case 432:
    case 431:
    case 430:
    case 429:
    case 428:
    case 427:
    case 421:
    case 420:
    case 419:
    case 418:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (const_int_operand (recog_data.operand[2], VOIDmode))) && (get_attr_memory (insn) == MEMORY_BOTH)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (const_int_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (const_int_operand (recog_data.operand[2], VOIDmode))) && (get_attr_memory (insn) == MEMORY_LOAD)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (const_int_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (const_int_operand (recog_data.operand[2], VOIDmode))) && (get_attr_memory (insn) == MEMORY_NONE)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (const_int_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 426:
    case 425:
    case 417:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((which_alternative == 1) && (const_int_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_BOTH)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || ((which_alternative != 1) || (! (const_int_operand (recog_data.operand[2], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((which_alternative == 1) && (const_int_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || ((which_alternative != 1) || (! (const_int_operand (recog_data.operand[2], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((which_alternative == 1) && (const_int_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_NONE)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || ((which_alternative != 1) || (! (const_int_operand (recog_data.operand[2], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 0))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 1) && (! (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 414:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((get_attr_type (insn) == TYPE_ALU) || (which_alternative == 2))) && (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_BOTH))) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((get_attr_type (insn) == TYPE_ALU) || (which_alternative == 2))) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_LOAD))) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((get_attr_type (insn) == TYPE_ALU) || (which_alternative == 2))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_NONE))) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 2) || (get_attr_type (insn) == TYPE_ISHIFT)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((! (get_attr_memory (insn) == MEMORY_NONE)) && (get_attr_type (insn) == TYPE_ISHIFT)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ISHIFT) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ISHIFT) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ALU) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_type (insn) == TYPE_ALU) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_K6))) && ((which_alternative == 2) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 2)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 413:
    case 412:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_NONE)) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_ISHIFT))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((! (get_attr_memory (insn) == MEMORY_NONE)) && (get_attr_type (insn) == TYPE_ISHIFT)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ISHIFT) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ISHIFT) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ALU) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_type (insn) == TYPE_ALU) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 411:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((((which_alternative == 1) && (! (get_attr_imm_disp (insn) == IMM_DISP_TRUE))) && (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_BOTH))) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((((which_alternative == 1) && (! (get_attr_imm_disp (insn) == IMM_DISP_TRUE))) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_LOAD))) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (((((which_alternative == 1) && (! (get_attr_imm_disp (insn) == IMM_DISP_TRUE))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_NONE))) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative != 0) || (get_attr_type (insn) == TYPE_ISHIFT)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((! (get_attr_memory (insn) == MEMORY_NONE)) && (get_attr_type (insn) == TYPE_ISHIFT)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ISHIFT) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ISHIFT) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ALU) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_type (insn) == TYPE_ALU) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_K6))) && ((which_alternative != 0) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 1)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 410:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_BOTH))) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_LOAD))) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_NONE))) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((! (((x86_double_with_add & (1 << ix86_tune))) != (0))) || (! (const1_operand (recog_data.operand[2], VOIDmode)))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((! (get_attr_memory (insn) == MEMORY_NONE)) && ((! (((x86_double_with_add & (1 << ix86_tune))) != (0))) || (! (const1_operand (recog_data.operand[2], VOIDmode))))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode)))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode)))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((! (((x86_double_with_add & (1 << ix86_tune))) != (0))) || (! (const1_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((! (((x86_double_with_add & (1 << ix86_tune))) != (0))) || (! (const1_operand (recog_data.operand[2], VOIDmode)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode))) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 408:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((which_alternative != 0) || ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_BOTH))) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((which_alternative != 0) || ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_LOAD))) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((which_alternative != 0) || ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_NONE))) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative != 0) || ((! (((x86_double_with_add & (1 << ix86_tune))) != (0))) || (! (const1_operand (recog_data.operand[2], VOIDmode))))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((! (get_attr_memory (insn) == MEMORY_NONE)) && ((which_alternative == 0) && ((! (((x86_double_with_add & (1 << ix86_tune))) != (0))) || (! (const1_operand (recog_data.operand[2], VOIDmode)))))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 0) && ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((which_alternative == 0) && ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode))))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && ((which_alternative == 0) && ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && ((which_alternative == 0) && ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode))))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 0) && ((! (((x86_double_with_add & (1 << ix86_tune))) != (0))) || (! (const1_operand (recog_data.operand[2], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 0) && ((! (((x86_double_with_add & (1 << ix86_tune))) != (0))) || (! (const1_operand (recog_data.operand[2], VOIDmode))))) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 0) && ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((which_alternative == 0) && ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_K6))) && ((which_alternative != 0) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 1)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 406:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 416:
    case 415:
    case 409:
    case 403:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_type (insn) == TYPE_ALU)) && (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_BOTH))) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_type (insn) == TYPE_ALU)) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_LOAD))) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_type (insn) == TYPE_ALU)) && (get_attr_memory (insn) == MEMORY_NONE)) || ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_NONE))) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_ISHIFT))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((! (get_attr_memory (insn) == MEMORY_NONE)) && (get_attr_type (insn) == TYPE_ISHIFT)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ISHIFT) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ISHIFT) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ALU) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_type (insn) == TYPE_ALU) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 407:
    case 402:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((which_alternative != 0) || (get_attr_type (insn) == TYPE_ALU))) && (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_BOTH))) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((which_alternative != 0) || (get_attr_type (insn) == TYPE_ALU))) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_LOAD))) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((which_alternative != 0) || (get_attr_type (insn) == TYPE_ALU))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_NONE))) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative != 0) || (get_attr_type (insn) == TYPE_ISHIFT)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((! (get_attr_memory (insn) == MEMORY_NONE)) && (get_attr_type (insn) == TYPE_ISHIFT)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ISHIFT) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ISHIFT) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ALU) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_type (insn) == TYPE_ALU) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_K6))) && ((which_alternative != 0) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 1)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 391:
    case 390:
    case 389:
    case 388:
    case 387:
    case 386:
    case 376:
    case 375:
    case 374:
    case 373:
    case 372:
    case 371:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || (((ix86_tune) == (CPU_PENTIUMPRO))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 400:
    case 398:
    case 395:
    case 394:
    case 392:
    case 361:
    case 360:
    case 359:
    case 358:
    case 357:
    case 356:
    case 355:
    case 354:
    case 353:
    case 352:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 294:
    case 290:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x3))) && (get_attr_memory (insn) == MEMORY_BOTH)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (which_alternative == 2)) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x3))) && (get_attr_memory (insn) == MEMORY_LOAD)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (which_alternative == 2)) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x3))) && (get_attr_memory (insn) == MEMORY_NONE)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (which_alternative == 2)) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 2) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 2) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((1 << which_alternative) & 0x3))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((1 << which_alternative) & 0x3))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((1 << which_alternative) & 0x3))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (((1 << which_alternative) & 0x3))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 288:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x7))) && (get_attr_memory (insn) == MEMORY_BOTH)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (which_alternative == 3)) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x7))) && (get_attr_memory (insn) == MEMORY_LOAD)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (which_alternative == 3)) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x7))) && (get_attr_memory (insn) == MEMORY_NONE)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (which_alternative == 3)) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 3) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 3) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((1 << which_alternative) & 0x7))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((1 << which_alternative) & 0x7))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((1 << which_alternative) & 0x7))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (((1 << which_alternative) & 0x7))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 282:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else
        {
   return 0;
        }
    case 281:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((((1 << which_alternative) & 0x5)) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((!((1 << which_alternative) & 0x5)) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (((((1 << which_alternative) & 0x5)) && (get_attr_memory (insn) == MEMORY_NONE)) || ((!((1 << which_alternative) & 0x5)) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else
        {
   return 0;
        }
    case 280:
    case 279:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((which_alternative != 1) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (((which_alternative != 1) && (get_attr_memory (insn) == MEMORY_NONE)) || ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else
        {
   return 0;
        }
    case 278:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((!((1 << which_alternative) & 0xa)) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((((1 << which_alternative) & 0xa)) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (((!((1 << which_alternative) & 0xa)) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((1 << which_alternative) & 0xa)) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else
        {
   return 0;
        }
    case 277:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 17 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (! (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 19 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 9;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 276:
    case 271:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 39 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 17 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (! (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 19 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 9;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 274:
    case 268:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 17 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (! (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 19 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 9;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 265:
    case 264:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 17 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (! (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 19 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 9;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 263:
    case 262:
    case 260:
    case 259:
    case 257:
    case 255:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 11 ;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 4;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 8;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 261:
    case 258:
    case 256:
    case 254:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 11 ;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 4;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 8;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 7;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 253:
    case 252:
    case 251:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 11 ;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 4;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 8;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((! (((ix86_tune) == (CPU_ATHLON)))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((! (((ix86_tune) == (CPU_ATHLON)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((! (((ix86_tune) == (CPU_ATHLON)))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((! (((ix86_tune) == (CPU_ATHLON)))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 250:
      extract_constrain_insn_cached (insn);
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 11 ;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 4;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 8;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((which_alternative == 0) && (! (((ix86_tune) == (CPU_ATHLON))))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((which_alternative != 0) || (((ix86_tune) == (CPU_ATHLON)))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((which_alternative == 0) && (! (((ix86_tune) == (CPU_ATHLON))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((which_alternative != 0) || (((ix86_tune) == (CPU_ATHLON)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((which_alternative == 0) && (! (((ix86_tune) == (CPU_ATHLON))))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((which_alternative != 0) || (((ix86_tune) == (CPU_ATHLON)))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((which_alternative == 0) && (! (((ix86_tune) == (CPU_ATHLON))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((which_alternative != 0) || (((ix86_tune) == (CPU_ATHLON)))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 249:
    case 248:
      extract_constrain_insn_cached (insn);
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 11 ;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 4;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 8;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((! (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative != 1) && ((which_alternative != 2) || (! (memory_operand (recog_data.operand[1], VOIDmode)))))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((((ix86_tune) == (CPU_ATHLON))) || ((which_alternative == 1) || ((which_alternative == 2) && (memory_operand (recog_data.operand[1], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((! (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative != 1) && ((which_alternative != 2) || (! (memory_operand (recog_data.operand[1], VOIDmode)))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((((ix86_tune) == (CPU_ATHLON))) || ((which_alternative == 1) || ((which_alternative == 2) && (memory_operand (recog_data.operand[1], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((! (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative != 1) && ((which_alternative != 2) || (! (memory_operand (recog_data.operand[1], VOIDmode)))))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((((ix86_tune) == (CPU_ATHLON))) || ((which_alternative == 1) || ((which_alternative == 2) && (memory_operand (recog_data.operand[1], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((! (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative != 1) && ((which_alternative != 2) || (! (memory_operand (recog_data.operand[1], VOIDmode)))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((((ix86_tune) == (CPU_ATHLON))) || ((which_alternative == 1) || ((which_alternative == 2) && (memory_operand (recog_data.operand[1], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 247:
      extract_constrain_insn_cached (insn);
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 11 ;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 4;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 8;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 7;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((! (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative != 1) && ((which_alternative != 2) || (! (memory_operand (recog_data.operand[1], VOIDmode)))))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((((ix86_tune) == (CPU_ATHLON))) || ((which_alternative == 1) || ((which_alternative == 2) && (memory_operand (recog_data.operand[1], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((! (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative != 1) && ((which_alternative != 2) || (! (memory_operand (recog_data.operand[1], VOIDmode)))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((((ix86_tune) == (CPU_ATHLON))) || ((which_alternative == 1) || ((which_alternative == 2) && (memory_operand (recog_data.operand[1], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((! (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative != 1) && ((which_alternative != 2) || (! (memory_operand (recog_data.operand[1], VOIDmode)))))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((((ix86_tune) == (CPU_ATHLON))) || ((which_alternative == 1) || ((which_alternative == 2) && (memory_operand (recog_data.operand[1], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((! (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative != 1) && ((which_alternative != 2) || (! (memory_operand (recog_data.operand[1], VOIDmode)))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((((ix86_tune) == (CPU_ATHLON))) || ((which_alternative == 1) || ((which_alternative == 2) && (memory_operand (recog_data.operand[1], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 217:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_NONE)) || ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((! (incdec_operand (recog_data.operand[2], QImode))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((! (incdec_operand (recog_data.operand[2], QImode))) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 215:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_NONE)) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative != 3)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (which_alternative != 3)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (which_alternative != 3)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative != 3) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative != 3) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_K6))) && ((which_alternative == 3) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 3)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 209:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (which_alternative == 2)) && (get_attr_memory (insn) == MEMORY_BOTH)) || (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x3))) && (get_attr_memory (insn) == MEMORY_BOTH))) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (which_alternative == 2)) && (get_attr_memory (insn) == MEMORY_LOAD)) || (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x3))) && (get_attr_memory (insn) == MEMORY_LOAD))) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (which_alternative == 2)) && (get_attr_memory (insn) == MEMORY_NONE)) || (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x3))) && (get_attr_memory (insn) == MEMORY_NONE))) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative != 2)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (which_alternative != 2)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (which_alternative != 2)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative != 2) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative != 2) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_K6))) && ((which_alternative == 2) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 2)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 202:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_NONE)) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((which_alternative != 0) || (pic_symbolic_operand (recog_data.operand[2], SImode))) || ((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && ((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && ((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC)) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_K6))) && (((which_alternative != 0) || (pic_symbolic_operand (recog_data.operand[2], SImode))) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative != 0) || (pic_symbolic_operand (recog_data.operand[2], SImode)))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 201:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_NONE)) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((which_alternative == 2) || (pic_symbolic_operand (recog_data.operand[2], SImode))) || ((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && ((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && ((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC)) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_K6))) && (((which_alternative == 2) || (pic_symbolic_operand (recog_data.operand[2], SImode))) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 2) || (pic_symbolic_operand (recog_data.operand[2], SImode)))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 196:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_NONE)) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((which_alternative == 2) || (pic_symbolic_operand (recog_data.operand[2], DImode))) || ((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && ((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && ((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC)) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_K6))) && (((which_alternative == 2) || (pic_symbolic_operand (recog_data.operand[2], DImode))) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 2) || (pic_symbolic_operand (recog_data.operand[2], DImode)))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 195:
    case 194:
    case 193:
    case 192:
    case 191:
    case 190:
    case 189:
    case 188:
    case 187:
    case 186:
      if ((((ix86_tune) == (CPU_PENTIUM))) || (((ix86_tune) == (CPU_PENTIUMPRO))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) || ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 350:
    case 349:
    case 348:
    case 346:
    case 345:
    case 344:
    case 343:
    case 342:
    case 340:
    case 339:
    case 338:
    case 337:
    case 336:
    case 335:
    case 334:
    case 333:
    case 332:
    case 331:
    case 330:
    case 329:
    case 328:
    case 327:
    case 326:
    case 325:
    case 324:
    case 323:
    case 322:
    case 320:
    case 318:
    case 317:
    case 316:
    case 315:
    case 314:
    case 313:
    case 312:
    case 311:
    case 310:
    case 309:
    case 308:
    case 307:
    case 306:
    case 305:
    case 304:
    case 303:
    case 302:
    case 301:
    case 300:
    case 298:
    case 296:
    case 295:
    case 293:
    case 292:
    case 291:
    case 289:
    case 246:
    case 245:
    case 243:
    case 242:
    case 241:
    case 240:
    case 239:
    case 238:
    case 237:
    case 236:
    case 235:
    case 234:
    case 229:
    case 228:
    case 227:
    case 224:
    case 223:
    case 222:
    case 221:
    case 220:
    case 219:
    case 218:
    case 216:
    case 214:
    case 213:
    case 212:
    case 211:
    case 210:
    case 208:
    case 207:
    case 206:
    case 205:
    case 204:
    case 203:
    case 200:
    case 199:
    case 198:
    case 197:
    case 185:
    case 184:
    case 179:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_NONE)) || ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 233:
    case 232:
    case 231:
    case 230:
    case 226:
    case 183:
    case 182:
    case 181:
    case 180:
    case 178:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 176:
    case 175:
    case 174:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (which_alternative != 0)
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_STORE))) || ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 12 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 13 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 10 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 8;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 925:
    case 924:
    case 173:
    case 170:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD))) || ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 9;
        }
      else if (((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 11 ;
        }
      else
        {
   return 0;
        }
    case 172:
    case 169:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (which_alternative == 1)
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 0)) || ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0))) || ((get_attr_memory (insn) == MEMORY_STORE) && (which_alternative == 0))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_K8))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 0)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 3) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 2) && (get_attr_memory (insn) == MEMORY_LOAD))) || ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 2) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 9;
        }
      else if (((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative == 2) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 11 ;
        }
      else
        {
   return 0;
        }
    case 786:
    case 785:
    case 167:
    case 164:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD))) || ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 9;
        }
      else if (((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 11 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 14 ;
        }
      else
        {
   return 0;
        }
    case 166:
    case 163:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (which_alternative == 1)
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 0)) || ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0))) || ((get_attr_memory (insn) == MEMORY_STORE) && (which_alternative == 0))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (!((1 << which_alternative) & 0x3)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_K8))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 0)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 3) && (get_attr_memory (insn) == MEMORY_LOAD))) || ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 3) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 9;
        }
      else if (((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative == 3) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 11 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x3)) && ((((1 << which_alternative) & 0x6)) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 14 ;
        }
      else
        {
   return 0;
        }
    case 171:
    case 168:
    case 165:
    case 162:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (which_alternative != 0)
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD)) || (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 156:
    case 155:
    case 151:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD))) || ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 9;
        }
      else if (((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 11 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 14 ;
        }
      else
        {
   return 0;
        }
    case 790:
    case 789:
    case 150:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD))) || ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 9;
        }
      else if (((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 11 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 14 ;
        }
      else
        {
   return 0;
        }
    case 159:
    case 158:
    case 157:
    case 154:
    case 153:
    case 152:
    case 149:
    case 148:
    case 147:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 3;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 5;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 4;
        }
      else
        {
   return 0;
        }
    case 926:
    case 139:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 9;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 12 ;
        }
      else
        {
   return 0;
        }
    case 137:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 1) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 1) && (((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD)) || (get_attr_memory (insn) == MEMORY_STORE)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || ((which_alternative == 1) && ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 0))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 136:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 2) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 2) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 2) && (((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD)) || (get_attr_memory (insn) == MEMORY_STORE)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || ((which_alternative == 2) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 2) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 2) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 2) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 2) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_K8))) && ((which_alternative == 2) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || ((which_alternative == 2) && ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 9;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 12 ;
        }
      else
        {
   return 0;
        }
    case 135:
    case 134:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((1 << which_alternative) & 0xe))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 0)) || ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0))) || ((get_attr_memory (insn) == MEMORY_STORE) && (which_alternative == 0))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_K8))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 0)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative == 4) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((which_alternative == 4) && ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 145:
    case 142:
    case 133:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (which_alternative != 0)
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD)) || (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 146:
    case 144:
    case 143:
    case 141:
    case 138:
    case 132:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 131:
    case 130:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) || ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (which_alternative == 0)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_STORE))) || ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 12 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 13 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 10 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 8;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 1033:
    case 1032:
    case 1016:
    case 1014:
    case 927:
    case 140:
    case 129:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 128:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0x3)) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_STORE)) && (which_alternative == 1)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0x3)) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_NONE) && (((1 << which_alternative) & 0x3))) || ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 1)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (which_alternative == 0)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (which_alternative == 1))) || ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || ((((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x3)) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 1)))
        {
   return 12 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 1)))
        {
   return 13 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) && (which_alternative == 1)))
        {
   return 10 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) && (which_alternative == 1)))
        {
   return 8;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x3)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x3)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((1 << which_alternative) & 0x3))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative == 2) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((which_alternative == 2) && ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 114:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (which_alternative == 1))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (which_alternative == 1)) && (get_attr_memory (insn) == MEMORY_BOTH)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (which_alternative != 1)) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (which_alternative == 1)) && (get_attr_memory (insn) == MEMORY_LOAD)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (which_alternative != 1)) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (which_alternative == 1)) && (get_attr_memory (insn) == MEMORY_NONE)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (which_alternative != 1)) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 1))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 1)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_STORE) && (which_alternative == 1)) || ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 0))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 3) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 3) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((!((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 0;
        }
      else if (((((ix86_tune) == (CPU_K8))) && ((!((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_LOAD))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (!((1 << which_alternative) & 0x3))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 2) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 2))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 113:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (which_alternative == 1))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (which_alternative == 1)) && (get_attr_memory (insn) == MEMORY_BOTH)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (which_alternative != 1)) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (which_alternative == 1)) && (get_attr_memory (insn) == MEMORY_LOAD)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (which_alternative != 1)) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (which_alternative == 1)) && (get_attr_memory (insn) == MEMORY_NONE)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (which_alternative != 1)) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 1))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 1)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_STORE) && (which_alternative == 1)) || ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 0))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 3) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 3) && ((memory_operand (recog_data.operand[1], DFmode)) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 3) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((!((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((!((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 3) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x3)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((which_alternative == 3) && ((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON))))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (!((1 << which_alternative) & 0x3)))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 2) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 2))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 112:
    case 111:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((1 << which_alternative) & 0x7))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 4) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 4) && ((memory_operand (recog_data.operand[1], DFmode)) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 4) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || (((which_alternative == 4) && ((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON))))) || ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 109:
    case 106:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((((which_alternative == 1) && (! (get_attr_imm_disp (insn) == IMM_DISP_TRUE))) && (get_attr_memory (insn) == MEMORY_BOTH)) || (((which_alternative != 1) || (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((which_alternative == 1) && (! (get_attr_imm_disp (insn) == IMM_DISP_TRUE))) && (get_attr_memory (insn) == MEMORY_LOAD)) || (((which_alternative != 1) || (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && ((((which_alternative == 1) && (! (get_attr_imm_disp (insn) == IMM_DISP_TRUE))) && (get_attr_memory (insn) == MEMORY_NONE)) || (((which_alternative != 1) || (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 0))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 101:
    case 100:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0x7)) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (!((1 << which_alternative) & 0x7))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_STORE))) || ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 12 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 13 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 10 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 8;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 96:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0x7)) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((1 << which_alternative) & 0x18))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((((get_attr_memory (insn) == MEMORY_NONE) && (((1 << which_alternative) & 0x7))) || ((get_attr_memory (insn) == MEMORY_LOAD) && (((1 << which_alternative) & 0x7)))) || ((get_attr_memory (insn) == MEMORY_STORE) && (((1 << which_alternative) & 0x7)))) || ((get_attr_memory (insn) == MEMORY_NONE) && (((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0)))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0))))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0)))))) || ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || ((((1 << which_alternative) & 0x7)) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x7)) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x7)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x7)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((1 << which_alternative) & 0x7))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((!((1 << which_alternative) & 0x1f)) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((!((1 << which_alternative) & 0x1f)) && (memory_operand (recog_data.operand[1], DFmode))) || (((((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0)))) || ((((which_alternative == 5) && ((! ((optimize_size) != (0))) && (! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))))) || (((which_alternative == 6) && ((! ((optimize_size) != (0))) && (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)))) || ((which_alternative == 7) && (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((! ((optimize_size) != (0))) && (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)))))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0)))) || ((((which_alternative == 5) && ((! ((optimize_size) != (0))) && (! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))))) || (((which_alternative == 6) && ((! ((optimize_size) != (0))) && (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)))) || ((which_alternative == 7) && (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((! ((optimize_size) != (0))) && (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)))))) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((!((1 << which_alternative) & 0x1f)) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((!((1 << which_alternative) & 0x1f)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0)))) || ((((which_alternative == 5) && ((! ((optimize_size) != (0))) && (! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))))) || (((which_alternative == 6) && ((! ((optimize_size) != (0))) && (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)))) || ((which_alternative == 7) && (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((! ((optimize_size) != (0))) && (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x1f)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_K8))) && ((((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0)))) || ((((which_alternative == 5) && ((! ((optimize_size) != (0))) && (! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))))) || (((which_alternative == 6) && ((! ((optimize_size) != (0))) && (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)))) || ((which_alternative == 7) && (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((! ((optimize_size) != (0))) && (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))))))) || (((((ix86_tune) == (CPU_ATHLON))) && ((((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0)))) || ((((which_alternative == 5) && ((! ((optimize_size) != (0))) && (! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))))) || (((which_alternative == 6) && ((! ((optimize_size) != (0))) && (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)))) || ((which_alternative == 7) && (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((! ((optimize_size) != (0))) && (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))))))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (!((1 << which_alternative) & 0x1f))))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 95:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0x7)) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((1 << which_alternative) & 0x18))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((((get_attr_memory (insn) == MEMORY_NONE) && (((1 << which_alternative) & 0x7))) || ((get_attr_memory (insn) == MEMORY_LOAD) && (((1 << which_alternative) & 0x7)))) || ((get_attr_memory (insn) == MEMORY_STORE) && (((1 << which_alternative) & 0x7)))) || ((get_attr_memory (insn) == MEMORY_NONE) && (((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0)))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0))))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0)))))) || ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || ((((1 << which_alternative) & 0x7)) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x7)) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x7)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x7)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((1 << which_alternative) & 0x7))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((!((1 << which_alternative) & 0x1f)) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((!((1 << which_alternative) & 0x1f)) && (memory_operand (recog_data.operand[1], DFmode))) || (((((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0)))) || ((((which_alternative == 5) && ((! ((optimize_size) != (0))) && (! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))))) || (((which_alternative == 6) && ((! ((optimize_size) != (0))) && (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)))) || ((which_alternative == 7) && (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((! ((optimize_size) != (0))) && (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)))))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0)))) || ((((which_alternative == 5) && ((! ((optimize_size) != (0))) && (! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))))) || (((which_alternative == 6) && ((! ((optimize_size) != (0))) && (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)))) || ((which_alternative == 7) && (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((! ((optimize_size) != (0))) && (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)))))) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((!((1 << which_alternative) & 0x1f)) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((!((1 << which_alternative) & 0x1f)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0)))) || ((((which_alternative == 5) && ((! ((optimize_size) != (0))) && (! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))))) || (((which_alternative == 6) && ((! ((optimize_size) != (0))) && (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)))) || ((which_alternative == 7) && (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((! ((optimize_size) != (0))) && (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x1f)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_K8))) && ((((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0)))) || ((((which_alternative == 5) && ((! ((optimize_size) != (0))) && (! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))))) || (((which_alternative == 6) && ((! ((optimize_size) != (0))) && (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)))) || ((which_alternative == 7) && (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((! ((optimize_size) != (0))) && (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))))))) || (((((ix86_tune) == (CPU_ATHLON))) && ((((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0)))) || ((((which_alternative == 5) && ((! ((optimize_size) != (0))) && (! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))))) || (((which_alternative == 6) && ((! ((optimize_size) != (0))) && (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)))) || ((which_alternative == 7) && (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((! ((optimize_size) != (0))) && (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))))))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (!((1 << which_alternative) & 0x1f))))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 988:
    case 987:
    case 986:
    case 985:
    case 984:
    case 983:
    case 982:
    case 981:
    case 980:
    case 979:
    case 978:
    case 977:
    case 976:
    case 975:
    case 974:
    case 973:
    case 972:
    case 971:
    case 970:
    case 969:
    case 968:
    case 967:
    case 955:
    case 954:
    case 953:
    case 951:
    case 950:
    case 949:
    case 948:
    case 947:
    case 946:
    case 945:
    case 944:
    case 943:
    case 942:
    case 941:
    case 940:
    case 939:
    case 938:
    case 937:
    case 936:
    case 935:
    case 934:
    case 933:
    case 932:
    case 931:
    case 930:
    case 102:
    case 97:
    case 92:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 91:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0x7)) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((1 << which_alternative) & 0x18)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x18))) && (get_attr_memory (insn) == MEMORY_BOTH)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (!((1 << which_alternative) & 0x18))) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x18))) && (get_attr_memory (insn) == MEMORY_LOAD)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (!((1 << which_alternative) & 0x18))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x18))) && (get_attr_memory (insn) == MEMORY_NONE)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (!((1 << which_alternative) & 0x18))) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((1 << which_alternative) & 0x18)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((1 << which_alternative) & 0x18))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((((get_attr_memory (insn) == MEMORY_STORE) && (((1 << which_alternative) & 0x18))) || ((get_attr_memory (insn) == MEMORY_NONE) && (((1 << which_alternative) & 0x7)))) || ((get_attr_memory (insn) == MEMORY_LOAD) && (((1 << which_alternative) & 0x7)))) || ((get_attr_memory (insn) == MEMORY_STORE) && (((1 << which_alternative) & 0x7)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((((get_attr_memory (insn) == MEMORY_NONE) && ((((which_alternative == 6) && ((! (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0))) && (! (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || (!((1 << which_alternative) & 0xe78))) && (((1 << which_alternative) & 0x1e0)))) || ((get_attr_memory (insn) == MEMORY_LOAD) && ((((which_alternative == 6) && ((! (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0))) && (! (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || (!((1 << which_alternative) & 0xe78))) && (((1 << which_alternative) & 0x1e0))))) || ((get_attr_memory (insn) == MEMORY_STORE) && ((((which_alternative == 6) && ((! (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0))) && (! (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || (!((1 << which_alternative) & 0xe78))) && (((1 << which_alternative) & 0x1e0))))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0)))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0)))))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0)))))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x18)) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x18)) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || ((((1 << which_alternative) & 0x7)) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x7)) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x7)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x7)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((1 << which_alternative) & 0x7))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x1e0)) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((1 << which_alternative) & 0x1e0)) && (memory_operand (recog_data.operand[1], DFmode))) || (((((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)) && (((((target_flags & 0x00008000) != 0)) != (0)) && ((optimize_size) == (0)))))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)) && (((((target_flags & 0x00008000) != 0)) != (0)) && ((optimize_size) == (0)))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 0;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x1e0)) && ((((which_alternative == 6) && ((! (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0))) && (! (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || (!((1 << which_alternative) & 0xe78))) && (get_attr_memory (insn) == MEMORY_LOAD)))) || ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x1e0)) && ((((which_alternative == 6) && ((! (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0))) && (! (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || (!((1 << which_alternative) & 0xe78))) && (get_attr_memory (insn) == MEMORY_LOAD)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((!((1 << which_alternative) & 0x1f)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((!((1 << which_alternative) & 0x1f)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)) && (((((target_flags & 0x00008000) != 0)) != (0)) && ((optimize_size) == (0)))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x1f)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_K8))) && ((((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)) && (((((target_flags & 0x00008000) != 0)) != (0)) && ((optimize_size) == (0))))))) || (((((ix86_tune) == (CPU_ATHLON))) && ((((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)) && (((((target_flags & 0x00008000) != 0)) != (0)) && ((optimize_size) == (0))))))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (!((1 << which_alternative) & 0x1f))))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x1ff)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (!((1 << which_alternative) & 0x1ff)))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 90:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0x7)) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((1 << which_alternative) & 0x18)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x18))) && (get_attr_memory (insn) == MEMORY_BOTH)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (!((1 << which_alternative) & 0x18))) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x18))) && (get_attr_memory (insn) == MEMORY_LOAD)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (!((1 << which_alternative) & 0x18))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x18))) && (get_attr_memory (insn) == MEMORY_NONE)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (!((1 << which_alternative) & 0x18))) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((1 << which_alternative) & 0x18)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((1 << which_alternative) & 0x18))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((((get_attr_memory (insn) == MEMORY_STORE) && (((1 << which_alternative) & 0x18))) || ((get_attr_memory (insn) == MEMORY_NONE) && (((1 << which_alternative) & 0x7)))) || ((get_attr_memory (insn) == MEMORY_LOAD) && (((1 << which_alternative) & 0x7)))) || ((get_attr_memory (insn) == MEMORY_STORE) && (((1 << which_alternative) & 0x7)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((((get_attr_memory (insn) == MEMORY_NONE) && ((((which_alternative == 6) && ((! (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0))) && (! (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || (!((1 << which_alternative) & 0xe78))) && (((1 << which_alternative) & 0x1e0)))) || ((get_attr_memory (insn) == MEMORY_LOAD) && ((((which_alternative == 6) && ((! (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0))) && (! (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || (!((1 << which_alternative) & 0xe78))) && (((1 << which_alternative) & 0x1e0))))) || ((get_attr_memory (insn) == MEMORY_STORE) && ((((which_alternative == 6) && ((! (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0))) && (! (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || (!((1 << which_alternative) & 0xe78))) && (((1 << which_alternative) & 0x1e0))))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0)))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0)))))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0)))))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x18)) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x18)) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) || ((((1 << which_alternative) & 0x7)) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x7)) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x7)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x7)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((1 << which_alternative) & 0x7))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x1e0)) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((1 << which_alternative) & 0x1e0)) && (memory_operand (recog_data.operand[1], DFmode))) || (((((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)) && (((((target_flags & 0x00008000) != 0)) != (0)) && ((optimize_size) == (0)))))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)) && (((((target_flags & 0x00008000) != 0)) != (0)) && ((optimize_size) == (0)))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 0;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x1e0)) && ((((which_alternative == 6) && ((! (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0))) && (! (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || (!((1 << which_alternative) & 0xe78))) && (get_attr_memory (insn) == MEMORY_LOAD)))) || ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x1e0)) && ((((which_alternative == 6) && ((! (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0))) && (! (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || (!((1 << which_alternative) & 0xe78))) && (get_attr_memory (insn) == MEMORY_LOAD)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((!((1 << which_alternative) & 0x1f)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((!((1 << which_alternative) & 0x1f)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)) && (((((target_flags & 0x00008000) != 0)) != (0)) && ((optimize_size) == (0)))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x1f)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_K8))) && ((((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)) && (((((target_flags & 0x00008000) != 0)) != (0)) && ((optimize_size) == (0))))))) || (((((ix86_tune) == (CPU_ATHLON))) && ((((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)) && (((((target_flags & 0x00008000) != 0)) != (0)) && ((optimize_size) == (0))))))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (!((1 << which_alternative) & 0x1f))))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x1ff)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (!((1 << which_alternative) & 0x1ff)))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 89:
    case 88:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 1) && (! (memory_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((which_alternative == 1) && (! (memory_operand (recog_data.operand[1], VOIDmode)))) && ((which_alternative == 1) && (memory_operand (recog_data.operand[1], VOIDmode)))) || (((which_alternative != 1) || (memory_operand (recog_data.operand[1], VOIDmode))) && ((which_alternative == 1) && (memory_operand (recog_data.operand[1], VOIDmode))))))
        {
   return 3;
        }
      else if (which_alternative != 1)
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) || ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 84:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_NONE)) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 1;
        }
      else if (which_alternative == 4)
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode)))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode)))))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_STORE) && ((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode)))))) || ((get_attr_memory (insn) == MEMORY_NONE) && ((!((1 << which_alternative) & 0x7f0)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], DImode))))))) || ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && ((get_attr_memory (insn) == MEMORY_BOTH) || (which_alternative == 4))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0x7f0)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], DImode)))) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x7f0)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], DImode))))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x7e0)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x7e0)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x7e0)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x7e0)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x700)) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((1 << which_alternative) & 0x700)) && (memory_operand (recog_data.operand[1], DFmode))) || ((which_alternative == 8) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 8) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 0;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x700)) && ((!((1 << which_alternative) & 0x111)) && (get_attr_memory (insn) == MEMORY_LOAD)))) || ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x700)) && ((!((1 << which_alternative) & 0x111)) && (get_attr_memory (insn) == MEMORY_LOAD)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x7e0)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x7e0)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 8) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x7e0)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_K8))) && (which_alternative == 8)) || (((((ix86_tune) == (CPU_ATHLON))) && (which_alternative == 8)) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((1 << which_alternative) & 0x7e0))))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0xe0)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((1 << which_alternative) & 0xe0)))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 83:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_NONE)) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 1;
        }
      else if (which_alternative == 4)
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode)))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode)))))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_STORE) && ((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode)))))) || ((get_attr_memory (insn) == MEMORY_NONE) && ((!((1 << which_alternative) & 0x7f0)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], DImode))))))) || ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && ((get_attr_memory (insn) == MEMORY_BOTH) || (which_alternative == 4))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0x7f0)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], DImode)))) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x7f0)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], DImode))))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x7e0)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x7e0)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x7e0)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x7e0)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x700)) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((1 << which_alternative) & 0x700)) && (memory_operand (recog_data.operand[1], DFmode))) || ((which_alternative == 8) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 8) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 0;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x700)) && ((!((1 << which_alternative) & 0x111)) && (get_attr_memory (insn) == MEMORY_LOAD)))) || ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x700)) && ((!((1 << which_alternative) & 0x111)) && (get_attr_memory (insn) == MEMORY_LOAD)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x7e0)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x7e0)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 8) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x7e0)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_K8))) && (which_alternative == 8)) || (((((ix86_tune) == (CPU_ATHLON))) && (which_alternative == 8)) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((1 << which_alternative) & 0x7e0))))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0xe0)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((1 << which_alternative) & 0xe0)))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 82:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((1 << which_alternative) & 0x3))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((((1 << which_alternative) & 0xc)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((1 << which_alternative) & 0xc))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((1 << which_alternative) & 0xc))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (((1 << which_alternative) & 0xc))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((!((1 << which_alternative) & 0xf)) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((!((1 << which_alternative) & 0xf)) && (memory_operand (recog_data.operand[1], DFmode))) || ((which_alternative == 5) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 5) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 0;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) && ((!((1 << which_alternative) & 0xf)) && ((which_alternative != 5) && (get_attr_memory (insn) == MEMORY_LOAD)))) || ((((ix86_tune) == (CPU_K8))) && ((!((1 << which_alternative) & 0xf)) && ((which_alternative != 5) && (get_attr_memory (insn) == MEMORY_LOAD)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((!((1 << which_alternative) & 0xf)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((!((1 << which_alternative) & 0xf)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 5) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0xf)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_K8))) && (which_alternative == 5)) || (((((ix86_tune) == (CPU_ATHLON))) && (which_alternative == 5)) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (!((1 << which_alternative) & 0xf))))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0xc)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((1 << which_alternative) & 0xc)))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 76:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && (! (memory_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((which_alternative == 0) && (! (memory_operand (recog_data.operand[1], VOIDmode)))) && ((which_alternative == 0) && (memory_operand (recog_data.operand[1], VOIDmode)))) || (((which_alternative != 0) || (memory_operand (recog_data.operand[1], VOIDmode))) && ((which_alternative == 0) && (memory_operand (recog_data.operand[1], VOIDmode))))))
        {
   return 3;
        }
      else if (which_alternative != 0)
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) || ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 71:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0))))) && (get_attr_memory (insn) == MEMORY_BOTH)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || ((! (q_regs_operand (recog_data.operand[0], QImode))) || (((x86_movx & (1 << ix86_tune))) != (0)))) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0))))) && (get_attr_memory (insn) == MEMORY_LOAD)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || ((! (q_regs_operand (recog_data.operand[0], QImode))) || (((x86_movx & (1 << ix86_tune))) != (0)))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0))))) && (get_attr_memory (insn) == MEMORY_NONE)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || ((! (q_regs_operand (recog_data.operand[0], QImode))) || (((x86_movx & (1 << ix86_tune))) != (0)))) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0)))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0))))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_STORE) && ((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0))))) || ((get_attr_memory (insn) == MEMORY_NONE) && ((! (q_regs_operand (recog_data.operand[0], QImode))) || (((x86_movx & (1 << ix86_tune))) != (0))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((! (q_regs_operand (recog_data.operand[0], QImode))) || (((x86_movx & (1 << ix86_tune))) != (0)))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((! (q_regs_operand (recog_data.operand[0], QImode))) || (((x86_movx & (1 << ix86_tune))) != (0))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((! (q_regs_operand (recog_data.operand[0], QImode))) || (((x86_movx & (1 << ix86_tune))) != (0))) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0)))) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0)))) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0)))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0)))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0)))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 70:
    case 66:
    case 65:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_IMOV))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_type (insn) == TYPE_IMOV)) && (get_attr_memory (insn) == MEMORY_BOTH)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (get_attr_type (insn) == TYPE_IMOV))) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_type (insn) == TYPE_IMOV)) && (get_attr_memory (insn) == MEMORY_LOAD)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (get_attr_type (insn) == TYPE_IMOV))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && ((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_type (insn) == TYPE_IMOV)) && (get_attr_memory (insn) == MEMORY_NONE)) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (get_attr_type (insn) == TYPE_IMOV))) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_IMOV))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_IMOV)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_IMOV)) || ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_IMOVX))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_IMOVX)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_IMOVX) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_IMOVX) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_IMOV) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_IMOV) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_IMOV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_IMOV) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_IMOV) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_type (insn) == TYPE_IMOV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_type (insn) == TYPE_IMOV) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 125:
    case 124:
    case 123:
    case 122:
    case 121:
    case 120:
    case 119:
    case 118:
    case 116:
    case 115:
    case 110:
    case 107:
    case 104:
    case 69:
    case 64:
    case 63:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 59:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))) && ((((optimize_size) != (0)) || ((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0))))) || ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))) && (get_attr_memory (insn) == MEMORY_BOTH)) || (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2))))) && ((! ((optimize_size) != (0))) && (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((((1 << which_alternative) & 0x28)) || ((((x86_movx & (1 << ix86_tune))) != (0)) && (which_alternative == 2))))))) && (get_attr_memory (insn) == MEMORY_BOTH))) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || ((! ((optimize_size) != (0))) && (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || ((((1 << which_alternative) & 0x28)) || ((((x86_movx & (1 << ix86_tune))) != (0)) && (which_alternative == 2))))))) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))) && ((((optimize_size) != (0)) || ((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0))))) || ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))) && (get_attr_memory (insn) == MEMORY_LOAD)) || (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2))))) && ((! ((optimize_size) != (0))) && (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((((1 << which_alternative) & 0x28)) || ((((x86_movx & (1 << ix86_tune))) != (0)) && (which_alternative == 2))))))) && (get_attr_memory (insn) == MEMORY_LOAD))) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || ((! ((optimize_size) != (0))) && (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || ((((1 << which_alternative) & 0x28)) || ((((x86_movx & (1 << ix86_tune))) != (0)) && (which_alternative == 2))))))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (((((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))) && ((((optimize_size) != (0)) || ((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0))))) || ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))) && (get_attr_memory (insn) == MEMORY_NONE)) || (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2))))) && ((! ((optimize_size) != (0))) && (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((((1 << which_alternative) & 0x28)) || ((((x86_movx & (1 << ix86_tune))) != (0)) && (which_alternative == 2))))))) && (get_attr_memory (insn) == MEMORY_NONE))) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || ((! ((optimize_size) != (0))) && (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || ((((1 << which_alternative) & 0x28)) || ((((x86_movx & (1 << ix86_tune))) != (0)) && (which_alternative == 2))))))) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2))))))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_STORE) && (((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2))))))) || ((get_attr_memory (insn) == MEMORY_NONE) && (((! ((optimize_size) != (0))) && ((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0)))))) && ((((1 << which_alternative) & 0x28)) || ((((x86_movx & (1 << ix86_tune))) != (0)) && (which_alternative == 2)))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((! ((optimize_size) != (0))) && ((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0)))))) && ((((1 << which_alternative) & 0x28)) || ((((x86_movx & (1 << ix86_tune))) != (0)) && (which_alternative == 2))))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((! ((optimize_size) != (0))) && ((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0)))))) && ((((1 << which_alternative) & 0x28)) || ((((x86_movx & (1 << ix86_tune))) != (0)) && (which_alternative == 2)))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((! ((optimize_size) != (0))) && ((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0)))))) && ((((1 << which_alternative) & 0x28)) || ((((x86_movx & (1 << ix86_tune))) != (0)) && (which_alternative == 2)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 74:
    case 73:
    case 72:
    case 61:
    case 55:
      extract_insn_cached (insn);
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE)) || ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 60:
    case 54:
    case 53:
      extract_insn_cached (insn);
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE)) || ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 50:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_IMOV))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_BOTH))) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (get_attr_type (insn) == TYPE_IMOV))) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_LOAD))) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (get_attr_type (insn) == TYPE_IMOV))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && ((((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_NONE)) || ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_NONE))) || (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (get_attr_type (insn) == TYPE_IMOV))) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_IMOV))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_IMOV)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_IMOV)) || ((get_attr_memory (insn) == MEMORY_NONE) && (((! ((optimize_size) != (0))) && (((which_alternative != 0) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_himode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x6)) || (! (aligned_operand (recog_data.operand[1], HImode)))))) && ((((x86_movx & (1 << ix86_tune))) != (0)) && (((1 << which_alternative) & 0x5)))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((! ((optimize_size) != (0))) && (((which_alternative != 0) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_himode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x6)) || (! (aligned_operand (recog_data.operand[1], HImode)))))) && ((((x86_movx & (1 << ix86_tune))) != (0)) && (((1 << which_alternative) & 0x5))))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((! ((optimize_size) != (0))) && (((which_alternative != 0) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_himode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x6)) || (! (aligned_operand (recog_data.operand[1], HImode)))))) && ((((x86_movx & (1 << ix86_tune))) != (0)) && (((1 << which_alternative) & 0x5)))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((! ((optimize_size) != (0))) && (((which_alternative != 0) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_himode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x6)) || (! (aligned_operand (recog_data.operand[1], HImode)))))) && ((((x86_movx & (1 << ix86_tune))) != (0)) && (((1 << which_alternative) & 0x5)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_IMOV) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_IMOV) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_IMOV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_IMOV) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_IMOV) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_type (insn) == TYPE_IMOV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_type (insn) == TYPE_IMOV) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 87:
    case 47:
      extract_insn_cached (insn);
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE)) || ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 6;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 553:
    case 551:
    case 86:
    case 68:
    case 52:
    case 46:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 1;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 4;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 3;
        }
      else
        {
   return 0;
        }
    case 85:
    case 67:
    case 51:
    case 45:
      if ((((ix86_tune) == (CPU_PENTIUM))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) || (((ix86_tune) == (CPU_K6)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 44:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_NONE)) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode)))))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_STORE) && ((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode)))))) || ((get_attr_memory (insn) == MEMORY_NONE) && ((!((1 << which_alternative) & 0xfc)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], SImode))))))) || ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0xfc)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], SImode)))) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0xfc)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], SImode))))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0xfc)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0xfc)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0xfc)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0xfc)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0xe0)) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((1 << which_alternative) & 0xe0)) && (memory_operand (recog_data.operand[1], DFmode))) || ((which_alternative == 5) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 5) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((((1 << which_alternative) & 0xfc)) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0xfc)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 5) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0xfc)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_K8))) && (which_alternative == 5)) || (((((ix86_tune) == (CPU_ATHLON))) && (which_alternative == 5)) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((1 << which_alternative) & 0xfc))))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x1c)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((1 << which_alternative) & 0x1c)))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 43:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_BOTH)) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_NONE)) || ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode)))))))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_STORE) && ((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode)))))) || ((get_attr_memory (insn) == MEMORY_NONE) && ((!((1 << which_alternative) & 0xfc)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], SImode))))))) || ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode))))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0xfc)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], SImode)))) || ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0xfc)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], SImode))))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0xfc)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0xfc)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0xfc)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0xfc)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0xe0)) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((1 << which_alternative) & 0xe0)) && (memory_operand (recog_data.operand[1], DFmode))) || ((which_alternative == 5) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 5) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((((1 << which_alternative) & 0xfc)) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0xfc)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 5) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 3;
        }
      else if ((((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0xfc)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))) || (((((ix86_tune) == (CPU_K8))) && (which_alternative == 5)) || (((((ix86_tune) == (CPU_ATHLON))) && (which_alternative == 5)) || (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((1 << which_alternative) & 0xfc))))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x1c)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((1 << which_alternative) & 0x1c)))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 401:
    case 399:
    case 397:
    case 396:
    case 393:
    case 347:
    case 341:
    case 321:
    case 319:
    case 299:
    case 297:
    case 244:
    case 108:
    case 105:
    case 103:
    case 81:
    case 80:
    case 62:
    case 56:
    case 42:
    case 41:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (memory_operand (recog_data.operand[1], VOIDmode))) || ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (memory_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_NONE)) || ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 4;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 1;
        }
      else
        {
   return 0;
        }
    case 79:
    case 78:
    case 40:
    case 39:
      extract_insn_cached (insn);
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (memory_operand (recog_data.operand[0], VOIDmode))))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (memory_operand (recog_data.operand[0], VOIDmode)))
        {
   return 4;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 4;
        }
      else
        {
   return 0;
        }
    case 77:
    case 58:
    case 57:
    case 49:
    case 48:
    case 38:
    case 37:
    case 36:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (! (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) || ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 35:
    case 32:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_NONE) && (((enum machine_mode) (recog_data.operand[1])->mode) == SFmode)) || ((get_attr_memory (insn) == MEMORY_LOAD) && (((enum machine_mode) (recog_data.operand[1])->mode) == SFmode)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 6;
        }
      else
        {
   return 0;
        }
    case 34:
    case 31:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 0))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 1) && (((enum machine_mode) (recog_data.operand[1])->mode) == SFmode))) || ((get_attr_memory (insn) == MEMORY_LOAD) && ((which_alternative == 1) && (((enum machine_mode) (recog_data.operand[1])->mode) == SFmode)))))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 5;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 0))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 0))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 6;
        }
      else
        {
   return 0;
        }
    case 33:
    case 30:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 3;
        }
      else
        {
   return 0;
        }
    case 25:
    case 23:
    case 21:
    case 20:
    case 19:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE)) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 2;
        }
      else
        {
   return 0;
        }
    case 285:
    case 284:
    case 283:
    case 17:
    case 16:
    case 15:
    case 14:
    case 13:
    case 12:
    case 11:
    case 10:
    case 9:
    case 8:
    case 7:
    case 6:
    case 5:
    case 4:
    case 3:
    case 2:
    case 1:
    case 0:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_LOAD)) || ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 2;
        }
      else if (((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_NONE)) || ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_NONE)))) || ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 3;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 1;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 4;
        }
      else
        {
   return 0;
        }
    case -1:
      if (((enum rtx_code) ((((insn)->u.fld[5]).rtx1))->code) != ASM_INPUT
          && asm_noperands ((((insn)->u.fld[5]).rtx1)) < 0)
        _fatal_insn_not_found (insn, "gcc.c", 162728, "?");
    default:
      return 6;
    }
}
static int
internal_dfa_insn_code (rtx insn )
{
  switch (((((insn)->u.fld[6]).rtint) >= 0 ? (((insn)->u.fld[6]).rtint) : recog_memoized_1 (insn)))
    {
    case 1015:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 242 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 0))
        {
   return 243 ;
        }
      else
        {
   return 273 ;
        }
    case 1009:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 203 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 204 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 205 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 206 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 209 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 210 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 211 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 212 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 213 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (which_alternative == 1))
        {
   return 214 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (which_alternative == 1))
        {
   return 215 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 1))
        {
   return 216 ;
        }
      else
        {
   return 273 ;
        }
    case 1008:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 203 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 204 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 205 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 206 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 209 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 210 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 211 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 212 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 213 ;
        }
      else if ((which_alternative == 1) && (((ix86_tune) == (CPU_K8))))
        {
   return 214 ;
        }
      else if ((which_alternative == 1) && (((ix86_tune) == (CPU_ATHLON))))
        {
   return 215 ;
        }
      else if ((which_alternative == 1) && ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))))
        {
   return 216 ;
        }
      else
        {
   return 273 ;
        }
    case 1012:
    case 1011:
    case 1010:
    case 1004:
    case 1002:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 203 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 204 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 205 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 206 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 211 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 212 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 213 ;
        }
      else if (((ix86_tune) == (CPU_K8)))
        {
   return 214 ;
        }
      else if (((ix86_tune) == (CPU_ATHLON)))
        {
   return 215 ;
        }
      else
        {
   return 273 ;
        }
    case 966:
    case 965:
    case 964:
    case 963:
    case 962:
    case 961:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 226 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 227 ;
        }
      else
        {
   return 273 ;
        }
    case 952:
      extract_constrain_insn_cached (insn);
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((optimize_size) != (0)))
        {
   return 106 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 203 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 204 ;
        }
      else if (((ix86_tune) == (CPU_K8)))
        {
   return 214 ;
        }
      else if (((ix86_tune) == (CPU_ATHLON)))
        {
   return 215 ;
        }
      else
        {
   return 273 ;
        }
    case 903:
    case 902:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 232 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 233 ;
        }
      else
        {
   return 273 ;
        }
    case 899:
    case 898:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 228 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 229 ;
        }
      else if (((ix86_tune) == (CPU_ATHLON)))
        {
   return 230 ;
        }
      else if (((ix86_tune) == (CPU_K8)))
        {
   return 231 ;
        }
      else
        {
   return 273 ;
        }
    case 891:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 265 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 266 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 267 ;
        }
      else
        {
   return 273 ;
        }
    case 890:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 268 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 269 ;
        }
      else if (((ix86_tune) == (CPU_ATHLON)))
        {
   return 270 ;
        }
      else if (((ix86_tune) == (CPU_K8)))
        {
   return 271 ;
        }
      else
        {
   return 273 ;
        }
    case 889:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 258 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 259 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 260 ;
        }
      else
        {
   return 273 ;
        }
    case 888:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 261 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 262 ;
        }
      else if (((ix86_tune) == (CPU_ATHLON)))
        {
   return 263 ;
        }
      else if (((ix86_tune) == (CPU_K8)))
        {
   return 264 ;
        }
      else
        {
   return 273 ;
        }
    case 895:
    case 893:
    case 887:
    case 885:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 235 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 236 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 237 ;
        }
      else
        {
   return 273 ;
        }
    case 1028:
    case 1026:
    case 1024:
    case 894:
    case 892:
    case 886:
    case 884:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 238 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 239 ;
        }
      else if (((ix86_tune) == (CPU_ATHLON)))
        {
   return 240 ;
        }
      else if (((ix86_tune) == (CPU_K8)))
        {
   return 241 ;
        }
      else
        {
   return 273 ;
        }
    case 881:
    case 880:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 27 ;
        }
      else
        {
   return 273 ;
        }
    case 879:
    case 878:
    case 870:
    case 869:
    case 865:
    case 864:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 219 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 220 ;
        }
      else
        {
   return 273 ;
        }
    case 1020:
    case 1019:
    case 1018:
    case 852:
      if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 76 ;
        }
      else
        {
   return 273 ;
        }
    case 851:
      if (((ix86_tune) == (CPU_K6)))
        {
   return 135 ;
        }
      else
        {
   return 273 ;
        }
    case 850:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 23 ;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 131 ;
        }
      else
        {
   return 273 ;
        }
    case 849:
      if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 220 ;
        }
      else
        {
   return 273 ;
        }
    case 859:
    case 858:
    case 857:
    case 827:
    case 826:
    case 825:
    case 824:
    case 823:
    case 822:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 131 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 219 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 220 ;
        }
      else
        {
   return 273 ;
        }
    case 871:
    case 842:
    case 841:
    case 840:
    case 839:
    case 838:
    case 837:
    case 836:
    case 835:
    case 834:
    case 833:
    case 832:
    case 818:
    case 817:
    case 816:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 71 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 219 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 220 ;
        }
      else
        {
   return 273 ;
        }
    case 883:
    case 882:
    case 863:
    case 813:
    case 812:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 27 ;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 220 ;
        }
      else
        {
   return 273 ;
        }
    case 877:
    case 862:
    case 810:
    case 809:
    case 808:
    case 807:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 73 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 217 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 218 ;
        }
      else
        {
   return 273 ;
        }
    case 876:
    case 875:
    case 874:
    case 873:
    case 872:
    case 868:
    case 867:
    case 866:
    case 861:
    case 860:
    case 856:
    case 855:
    case 854:
    case 831:
    case 830:
    case 829:
    case 828:
    case 815:
    case 814:
    case 811:
    case 806:
    case 805:
    case 804:
    case 803:
    case 802:
    case 801:
    case 800:
    case 799:
    case 798:
    case 797:
    case 796:
    case 795:
    case 794:
    case 793:
    case 792:
    case 791:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 219 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 220 ;
        }
      else
        {
   return 273 ;
        }
    case 923:
    case 921:
    case 788:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 255 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 256 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 257 ;
        }
      else
        {
   return 273 ;
        }
    case 922:
    case 920:
    case 787:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 89 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 255 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 256 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 257 ;
        }
      else
        {
   return 273 ;
        }
    case 775:
    case 774:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 82 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 83 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 232 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 233 ;
        }
      else
        {
   return 273 ;
        }
    case 771:
    case 770:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 96 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 97 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 99 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 228 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 229 ;
        }
      else if (((ix86_tune) == (CPU_ATHLON)))
        {
   return 230 ;
        }
      else if (((ix86_tune) == (CPU_K8)))
        {
   return 231 ;
        }
      else
        {
   return 273 ;
        }
    case 769:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 27 ;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 104 ;
        }
      else if (((ix86_tune) == (CPU_ATHLON)))
        {
   return 223 ;
        }
      else if (((ix86_tune) == (CPU_K8)))
        {
   return 224 ;
        }
      else
        {
   return 273 ;
        }
    case 768:
      extract_constrain_insn_cached (insn);
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0)))))
        {
   return 104 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0)))))
        {
   return 105 ;
        }
      else if (((ix86_tune) == (CPU_ATHLON)))
        {
   return 223 ;
        }
      else if (((ix86_tune) == (CPU_K8)))
        {
   return 224 ;
        }
      else
        {
   return 273 ;
        }
    case 767:
    case 766:
    case 765:
    case 764:
    case 763:
    case 762:
    case 761:
    case 760:
    case 759:
    case 758:
    case 757:
    case 756:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 221 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 222 ;
        }
      else if (((ix86_tune) == (CPU_ATHLON)))
        {
   return 223 ;
        }
      else if (((ix86_tune) == (CPU_K8)))
        {
   return 224 ;
        }
      else
        {
   return 273 ;
        }
    case 755:
    case 754:
    case 753:
    case 752:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 104 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 221 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 222 ;
        }
      else if (((ix86_tune) == (CPU_ATHLON)))
        {
   return 223 ;
        }
      else if (((ix86_tune) == (CPU_K8)))
        {
   return 224 ;
        }
      else
        {
   return 273 ;
        }
    case 1030:
    case 1029:
    case 780:
    case 778:
    case 750:
    case 748:
    case 746:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 93 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else
        {
   return 273 ;
        }
    case 745:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 86 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 265 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 266 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 267 ;
        }
      else
        {
   return 273 ;
        }
    case 744:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 102 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 268 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 269 ;
        }
      else if (((ix86_tune) == (CPU_ATHLON)))
        {
   return 270 ;
        }
      else if (((ix86_tune) == (CPU_K8)))
        {
   return 271 ;
        }
      else
        {
   return 273 ;
        }
    case 743:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 84 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 85 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 258 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 259 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 260 ;
        }
      else
        {
   return 273 ;
        }
    case 742:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 100 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 101 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 261 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 262 ;
        }
      else if (((ix86_tune) == (CPU_ATHLON)))
        {
   return 263 ;
        }
      else if (((ix86_tune) == (CPU_K8)))
        {
   return 264 ;
        }
      else
        {
   return 273 ;
        }
    case 741:
    case 739:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 78 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 79 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 235 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 236 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 237 ;
        }
      else
        {
   return 273 ;
        }
    case 1027:
    case 1025:
    case 1023:
    case 740:
    case 738:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 94 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 95 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 238 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 239 ;
        }
      else if (((ix86_tune) == (CPU_ATHLON)))
        {
   return 240 ;
        }
      else if (((ix86_tune) == (CPU_K8)))
        {
   return 241 ;
        }
      else
        {
   return 273 ;
        }
    case 736:
    case 735:
    case 734:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 90 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 91 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 92 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 203 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 204 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 207 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 208 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 213 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 216 ;
        }
      else
        {
   return 273 ;
        }
    case 928:
    case 783:
    case 782:
    case 777:
    case 776:
    case 737:
    case 733:
    case 732:
    case 731:
    case 730:
    case 725:
    case 724:
    case 723:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 98 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else
        {
   return 273 ;
        }
    case 721:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if (((1 << which_alternative) & 0x3))
        {
   return 28 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 106 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 107 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 108 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 203 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 204 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0xc)) && (! ((optimize_size) != (0)))) || ((which_alternative == 4) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 205 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0xc)) && (! ((optimize_size) != (0)))) || ((which_alternative == 4) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 206 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 209 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 210 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0xc)) && (! ((optimize_size) != (0)))) || ((which_alternative == 4) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 211 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0xc)) && (! ((optimize_size) != (0)))) || ((which_alternative == 4) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 212 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 213 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0xc)) && (! ((optimize_size) != (0)))) || ((which_alternative == 4) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))))))
        {
   return 214 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0xc)) && (! ((optimize_size) != (0)))) || ((which_alternative == 4) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))))))
        {
   return 215 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 216 ;
        }
      else
        {
   return 273 ;
        }
    case 720:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if (((1 << which_alternative) & 0x3))
        {
   return 28 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 106 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 107 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 108 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 203 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 204 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0xc)) && (! ((optimize_size) != (0)))) || ((which_alternative == 4) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 205 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0xc)) && (! ((optimize_size) != (0)))) || ((which_alternative == 4) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 206 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 209 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 210 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0xc)) && (! ((optimize_size) != (0)))) || ((which_alternative == 4) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 211 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0xc)) && (! ((optimize_size) != (0)))) || ((which_alternative == 4) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 212 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 213 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0xc)) && (! ((optimize_size) != (0)))) || ((which_alternative == 4) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))))))
        {
   return 214 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((((1 << which_alternative) & 0xc)) && ((optimize_size) != (0))) || ((which_alternative == 4) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0xc)) && (! ((optimize_size) != (0)))) || ((which_alternative == 4) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))))))
        {
   return 215 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 216 ;
        }
      else
        {
   return 273 ;
        }
    case 719:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((optimize_size) != (0))))))
        {
   return 106 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((optimize_size) != (0))))))
        {
   return 107 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((optimize_size) != (0))))))
        {
   return 108 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 203 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 204 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((optimize_size) != (0)))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && (! ((optimize_size) != (0)))) || (!((1 << which_alternative) & 0x7))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 205 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((optimize_size) != (0)))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && (! ((optimize_size) != (0)))) || (!((1 << which_alternative) & 0x7))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 206 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 209 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 210 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((optimize_size) != (0)))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && (! ((optimize_size) != (0)))) || (!((1 << which_alternative) & 0x7))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 211 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((optimize_size) != (0)))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && (! ((optimize_size) != (0)))) || (!((1 << which_alternative) & 0x7))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 212 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 213 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((optimize_size) != (0)))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && (! ((optimize_size) != (0)))) || (!((1 << which_alternative) & 0x7))))))
        {
   return 214 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((optimize_size) != (0)))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && (! ((optimize_size) != (0)))) || (!((1 << which_alternative) & 0x7))))))
        {
   return 215 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 216 ;
        }
      else
        {
   return 273 ;
        }
    case 707:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 106 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 107 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 108 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 203 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 204 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 205 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 206 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 209 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 210 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 211 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 212 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 213 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))))
        {
   return 214 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))))
        {
   return 215 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 216 ;
        }
      else
        {
   return 273 ;
        }
    case 706:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 106 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 107 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 108 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 203 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 204 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 205 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 206 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 209 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 210 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 211 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 212 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 213 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))))
        {
   return 214 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))))
        {
   return 215 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 216 ;
        }
      else
        {
   return 273 ;
        }
    case 705:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 106 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 107 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 108 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 203 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 204 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 205 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 206 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 209 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 210 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 211 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 212 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 213 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))))
        {
   return 214 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))))
        {
   return 215 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 216 ;
        }
      else
        {
   return 273 ;
        }
    case 848:
    case 847:
    case 846:
    case 845:
    case 844:
    case 843:
    case 821:
    case 820:
    case 819:
    case 727:
    case 726:
    case 704:
    case 703:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 75 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 219 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 220 ;
        }
      else
        {
   return 273 ;
        }
    case 729:
    case 702:
    case 701:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 209 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 210 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 213 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 216 ;
        }
      else
        {
   return 273 ;
        }
    case 700:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 106 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 107 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 108 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 203 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 204 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 205 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 206 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 209 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 210 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 211 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 212 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 213 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))))
        {
   return 214 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))))
        {
   return 215 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 216 ;
        }
      else
        {
   return 273 ;
        }
    case 699:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 106 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 107 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))))))
        {
   return 108 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 203 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 204 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 205 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 206 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 209 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 210 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 211 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 212 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 213 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))))
        {
   return 214 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((((1 << which_alternative) & 0x3)) && ((optimize_size) != (0))) || ((which_alternative == 2) && ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0))))) || (((((1 << which_alternative) & 0x3)) && (! ((optimize_size) != (0)))) || (((which_alternative == 2) && ((! (((x86_sse_typeless_stores & (1 << ix86_tune))) != (0))) && (! ((optimize_size) != (0))))) || (!((1 << which_alternative) & 0x7))))))
        {
   return 215 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 216 ;
        }
      else
        {
   return 273 ;
        }
    case 728:
    case 722:
    case 698:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 106 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 107 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 108 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 203 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (memory_operand (recog_data.operand[1], DFmode)))
        {
   return 204 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 205 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 206 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 211 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 212 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 213 ;
        }
      else if (((ix86_tune) == (CPU_K8)))
        {
   return 214 ;
        }
      else if (((ix86_tune) == (CPU_ATHLON)))
        {
   return 215 ;
        }
      else
        {
   return 273 ;
        }
    case 695:
    case 694:
    case 693:
    case 692:
    case 691:
    case 690:
    case 689:
    case 688:
    case 687:
      extract_insn_cached (insn);
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 10 ;
        }
      else
        {
   return 28 ;
        }
    case 672:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 16 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 34 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 0)))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0)))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (which_alternative == 0)))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (which_alternative == 0)))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((which_alternative == 1) && (((ix86_tune) == (CPU_K6))))
        {
   return 134 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((which_alternative == 1) && ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))))
        {
   return 150 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 671:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 1) && (const0_operand (recog_data.operand[2], DImode))))
        {
   return 7;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x3))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 16 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x3))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x3))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 1) && (const0_operand (recog_data.operand[2], DImode)))))
        {
   return 29 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((which_alternative == 1) && (const0_operand (recog_data.operand[2], DImode)))))
        {
   return 30 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && ((which_alternative == 1) && (const0_operand (recog_data.operand[2], DImode)))))
        {
   return 31 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 1) && (! (const0_operand (recog_data.operand[2], DImode))))))
        {
   return 34 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 0)))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0)))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (which_alternative == 0)))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (which_alternative == 0)))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 1) && (const0_operand (recog_data.operand[2], DImode))) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 124 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 1) && (const0_operand (recog_data.operand[2], DImode))) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 125 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 1) && (const0_operand (recog_data.operand[2], DImode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 126 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 1) && (const0_operand (recog_data.operand[2], DImode))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 127 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 1) && (const0_operand (recog_data.operand[2], DImode))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 128 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && (! (const0_operand (recog_data.operand[2], DImode)))))
        {
   return 134 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (! (const0_operand (recog_data.operand[2], DImode)))))
        {
   return 150 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((which_alternative == 1) && (const0_operand (recog_data.operand[2], DImode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 162 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((which_alternative == 1) && (const0_operand (recog_data.operand[2], DImode))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 165 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 670:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 1) && (const0_operand (recog_data.operand[2], SImode))))
        {
   return 7;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x3))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 16 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x3))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x3))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 1) && (const0_operand (recog_data.operand[2], SImode)))))
        {
   return 29 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((which_alternative == 1) && (const0_operand (recog_data.operand[2], SImode)))))
        {
   return 30 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && ((which_alternative == 1) && (const0_operand (recog_data.operand[2], SImode)))))
        {
   return 31 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 1) && (! (const0_operand (recog_data.operand[2], SImode))))))
        {
   return 34 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 0)))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0)))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (which_alternative == 0)))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (which_alternative == 0)))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 1) && (const0_operand (recog_data.operand[2], SImode))) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 124 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 1) && (const0_operand (recog_data.operand[2], SImode))) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 125 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 1) && (const0_operand (recog_data.operand[2], SImode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 126 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 1) && (const0_operand (recog_data.operand[2], SImode))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 127 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 1) && (const0_operand (recog_data.operand[2], SImode))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 128 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && (! (const0_operand (recog_data.operand[2], SImode)))))
        {
   return 134 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (! (const0_operand (recog_data.operand[2], SImode)))))
        {
   return 150 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((which_alternative == 1) && (const0_operand (recog_data.operand[2], SImode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 162 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((which_alternative == 1) && (const0_operand (recog_data.operand[2], SImode))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 165 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 657:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 27 ;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 55 ;
        }
      else if (((ix86_tune) == (CPU_ATHLON)))
        {
   return 194 ;
        }
      else if (((ix86_tune) == (CPU_K8)))
        {
   return 196 ;
        }
      else
        {
   return 273 ;
        }
    case 655:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((1 << which_alternative) & 0x3)))
        {
   return 27 ;
        }
      else if (!((1 << which_alternative) & 0x3))
        {
   return 28 ;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 55 ;
        }
      else if (((ix86_tune) == (CPU_ATHLON)))
        {
   return 194 ;
        }
      else if (((ix86_tune) == (CPU_K8)))
        {
   return 196 ;
        }
      else
        {
   return 273 ;
        }
    case 656:
    case 654:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (((1 << which_alternative) & 0x3)))
        {
   return 55 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (!((1 << which_alternative) & 0x3))))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (!((1 << which_alternative) & 0x3))))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (!((1 << which_alternative) & 0x3))))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (!((1 << which_alternative) & 0x3))))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 168 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 193 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((1 << which_alternative) & 0x3)))
        {
   return 194 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 195 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((1 << which_alternative) & 0x3)))
        {
   return 196 ;
        }
      else
        {
   return 273 ;
        }
    case 653:
    case 652:
    case 651:
    case 649:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 650:
    case 648:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 25 ;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 109 ;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 160 ;
        }
      else
        {
   return 273 ;
        }
    case 647:
    case 646:
    case 645:
    case 644:
    case 643:
    case 642:
    case 641:
    case 640:
    case 639:
    case 638:
    case 637:
    case 636:
    case 635:
    case 634:
    case 633:
    case 632:
    case 631:
    case 630:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 1;
        }
      else
        {
   return 28 ;
        }
    case 629:
    case 628:
    case 627:
    case 626:
    case 625:
    case 624:
    case 623:
    case 622:
    case 621:
    case 620:
    case 619:
    case 618:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 1;
        }
      else
        {
   return 28 ;
        }
    case 617:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 3;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 37 ;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 113 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 161 ;
        }
      else
        {
   return 273 ;
        }
    case 616:
    case 615:
    case 614:
    case 613:
    case 612:
    case 611:
    case 610:
    case 607:
    case 604:
    case 600:
    case 596:
    case 592:
    case 591:
    case 590:
    case 589:
    case 588:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 15 ;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 69 ;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 142 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 192 ;
        }
      else
        {
   return 273 ;
        }
    case 608:
    case 605:
    case 603:
    case 601:
    case 599:
    case 597:
    case 595:
    case 593:
    case 587:
    case 586:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 15 ;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 67 ;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 142 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 192 ;
        }
      else
        {
   return 273 ;
        }
    case 1031:
    case 1017:
    case 1013:
    case 1007:
    case 1006:
    case 1005:
    case 1003:
    case 1001:
    case 1000:
    case 999:
    case 998:
    case 997:
    case 996:
    case 995:
    case 994:
    case 993:
    case 992:
    case 991:
    case 990:
    case 989:
    case 960:
    case 959:
    case 958:
    case 957:
    case 956:
    case 929:
    case 919:
    case 918:
    case 917:
    case 916:
    case 915:
    case 914:
    case 913:
    case 912:
    case 911:
    case 910:
    case 909:
    case 908:
    case 907:
    case 906:
    case 905:
    case 904:
    case 896:
    case 784:
    case 669:
    case 663:
    case 585:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else
        {
   return 273 ;
        }
    case 584:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (which_alternative == 0))
        {
   return 15 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 0)))
        {
   return 67 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0)))
        {
   return 68 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (which_alternative == 0))
        {
   return 142 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 191 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 0))
        {
   return 192 ;
        }
      else
        {
   return 273 ;
        }
    case 609:
    case 606:
    case 602:
    case 598:
    case 594:
    case 583:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 15 ;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 65 ;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 142 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 192 ;
        }
      else
        {
   return 273 ;
        }
    case 897:
    case 781:
    case 779:
    case 751:
    case 749:
    case 747:
    case 666:
    case 660:
    case 582:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 77 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else
        {
   return 273 ;
        }
    case 581:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (which_alternative == 0))
        {
   return 15 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 0)))
        {
   return 65 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0)))
        {
   return 66 ;
        }
      else if ((which_alternative == 1) && (((ix86_tune) == (CPU_PENTIUMPRO))))
        {
   return 77 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (which_alternative == 0))
        {
   return 142 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 191 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 0))
        {
   return 192 ;
        }
      else
        {
   return 273 ;
        }
    case 580:
    case 579:
    case 578:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FOP))
        {
   return 12 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (mult_operator (recog_data.operand[3], XFmode)))
        {
   return 13 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 14 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 49 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 50 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 51 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 52 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (mult_operator (recog_data.operand[3], XFmode))))
        {
   return 63 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (mult_operator (recog_data.operand[3], XFmode))))
        {
   return 64 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FDIV)))
        {
   return 65 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FDIV)))
        {
   return 66 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 139 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], XFmode)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 140 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], XFmode)) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 141 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 142 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 168 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 180 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 181 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_FOP))
        {
   return 182 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((mult_operator (recog_data.operand[3], XFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 183 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((mult_operator (recog_data.operand[3], XFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 184 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (mult_operator (recog_data.operand[3], XFmode)))
        {
   return 185 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 187 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 188 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 189 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 190 ;
        }
      else
        {
   return 273 ;
        }
    case 577:
    case 576:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FOP))
        {
   return 12 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (mult_operator (recog_data.operand[3], XFmode)))
        {
   return 13 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 14 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 49 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 50 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 51 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 52 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (mult_operator (recog_data.operand[3], XFmode))))
        {
   return 63 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (mult_operator (recog_data.operand[3], XFmode))))
        {
   return 64 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 139 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], XFmode)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 140 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], XFmode)) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 141 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 142 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 168 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 180 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 181 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_FOP))
        {
   return 182 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((mult_operator (recog_data.operand[3], XFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 183 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((mult_operator (recog_data.operand[3], XFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 184 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (mult_operator (recog_data.operand[3], XFmode)))
        {
   return 185 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 187 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 188 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 189 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 190 ;
        }
      else
        {
   return 273 ;
        }
    case 575:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FOP))
        {
   return 12 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (mult_operator (recog_data.operand[3], XFmode)))
        {
   return 13 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 14 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 49 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 50 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 51 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 52 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (mult_operator (recog_data.operand[3], XFmode))))
        {
   return 63 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (mult_operator (recog_data.operand[3], XFmode))))
        {
   return 64 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FDIV)))
        {
   return 69 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FDIV)))
        {
   return 70 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 139 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], XFmode)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 140 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], XFmode)) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 141 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 142 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 168 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 180 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 181 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_FOP))
        {
   return 182 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((mult_operator (recog_data.operand[3], XFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 183 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((mult_operator (recog_data.operand[3], XFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 184 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (mult_operator (recog_data.operand[3], XFmode)))
        {
   return 185 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 187 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 188 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 189 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 190 ;
        }
      else
        {
   return 273 ;
        }
    case 574:
    case 573:
    case 572:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FOP))
        {
   return 12 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (mult_operator (recog_data.operand[3], DFmode)))
        {
   return 13 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 14 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 49 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 50 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 51 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 52 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (mult_operator (recog_data.operand[3], DFmode))))
        {
   return 63 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (mult_operator (recog_data.operand[3], DFmode))))
        {
   return 64 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FDIV)))
        {
   return 65 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FDIV)))
        {
   return 66 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 139 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], DFmode)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 140 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], DFmode)) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 141 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 142 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 168 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 180 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 181 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_FOP))
        {
   return 182 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((mult_operator (recog_data.operand[3], DFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 183 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((mult_operator (recog_data.operand[3], DFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 184 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (mult_operator (recog_data.operand[3], DFmode)))
        {
   return 185 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 187 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 188 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 189 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 190 ;
        }
      else
        {
   return 273 ;
        }
    case 571:
    case 570:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FOP))
        {
   return 12 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (mult_operator (recog_data.operand[3], DFmode)))
        {
   return 13 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 14 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 49 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 50 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 51 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 52 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (mult_operator (recog_data.operand[3], DFmode))))
        {
   return 63 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (mult_operator (recog_data.operand[3], DFmode))))
        {
   return 64 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 139 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], DFmode)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 140 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], DFmode)) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 141 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 142 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 168 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 180 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 181 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_FOP))
        {
   return 182 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((mult_operator (recog_data.operand[3], DFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 183 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((mult_operator (recog_data.operand[3], DFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 184 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (mult_operator (recog_data.operand[3], DFmode)))
        {
   return 185 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 187 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 188 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 189 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 190 ;
        }
      else
        {
   return 273 ;
        }
    case 569:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 168 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_SSEADD) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 235 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_SSEADD) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 236 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_SSEADD))
        {
   return 237 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 258 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 259 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (mult_operator (recog_data.operand[3], SFmode)))
        {
   return 260 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_SSEDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 265 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_SSEDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 266 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_SSEDIV))
        {
   return 267 ;
        }
      else
        {
   return 273 ;
        }
    case 568:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FOP))
        {
   return 12 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative != 2) && (mult_operator (recog_data.operand[3], DFmode))))
        {
   return 13 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 14 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 49 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 50 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 51 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 52 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative != 2) && (mult_operator (recog_data.operand[3], DFmode)))))
        {
   return 63 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((which_alternative != 2) && (mult_operator (recog_data.operand[3], DFmode)))))
        {
   return 64 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FDIV)))
        {
   return 67 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FDIV)))
        {
   return 68 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 139 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative != 2) && (mult_operator (recog_data.operand[3], DFmode))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 140 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative != 2) && (mult_operator (recog_data.operand[3], DFmode))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 141 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 142 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 168 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 180 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 181 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_FOP))
        {
   return 182 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative != 2) && (mult_operator (recog_data.operand[3], DFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 183 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative != 2) && (mult_operator (recog_data.operand[3], DFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 184 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative != 2) && (mult_operator (recog_data.operand[3], DFmode))))
        {
   return 185 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 187 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 188 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 189 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 190 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_SSEADD) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 235 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_SSEADD) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 236 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_SSEADD))
        {
   return 237 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 258 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 259 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 260 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 261 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 262 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 263 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 264 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_SSEDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 265 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_SSEDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 266 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_SSEDIV))
        {
   return 267 ;
        }
      else
        {
   return 273 ;
        }
    case 567:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FOP))
        {
   return 12 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (mult_operator (recog_data.operand[3], DFmode)))
        {
   return 13 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 14 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 49 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 50 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 51 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 52 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (mult_operator (recog_data.operand[3], DFmode))))
        {
   return 63 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (mult_operator (recog_data.operand[3], DFmode))))
        {
   return 64 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FDIV)))
        {
   return 67 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FDIV)))
        {
   return 68 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 139 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], DFmode)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 140 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], DFmode)) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 141 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 142 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 168 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 180 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 181 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_FOP))
        {
   return 182 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((mult_operator (recog_data.operand[3], DFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 183 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((mult_operator (recog_data.operand[3], DFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 184 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (mult_operator (recog_data.operand[3], DFmode)))
        {
   return 185 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 187 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 188 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 189 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 190 ;
        }
      else
        {
   return 273 ;
        }
    case 566:
    case 565:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FOP))
        {
   return 12 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (mult_operator (recog_data.operand[3], SFmode)))
        {
   return 13 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 14 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 49 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 50 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 51 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 52 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 63 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 64 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 139 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 140 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], SFmode)) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 141 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 142 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 168 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 180 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 181 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_FOP))
        {
   return 182 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 183 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 184 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (mult_operator (recog_data.operand[3], SFmode)))
        {
   return 185 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 187 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 188 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 189 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 190 ;
        }
      else
        {
   return 273 ;
        }
    case 564:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_SSEADD)))
        {
   return 78 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_SSEADD)))
        {
   return 79 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 84 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 85 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_SSEDIV)))
        {
   return 86 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_SSEDIV)))
        {
   return 87 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 168 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_SSEADD) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 235 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_SSEADD) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 236 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_SSEADD))
        {
   return 237 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 258 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 259 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (mult_operator (recog_data.operand[3], SFmode)))
        {
   return 260 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_SSEDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 265 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_SSEDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 266 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_SSEDIV))
        {
   return 267 ;
        }
      else
        {
   return 273 ;
        }
    case 563:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FOP))
        {
   return 12 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative != 2) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 13 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 14 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 49 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 50 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 51 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 52 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative != 2) && (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 63 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((which_alternative != 2) && (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 64 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FDIV)))
        {
   return 65 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FDIV)))
        {
   return 66 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_SSEADD)))
        {
   return 78 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_SSEADD)))
        {
   return 79 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 84 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 85 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_SSEDIV)))
        {
   return 86 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_SSEDIV)))
        {
   return 87 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 139 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative != 2) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 140 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative != 2) && (mult_operator (recog_data.operand[3], SFmode))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 141 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 142 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 168 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 180 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 181 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_FOP))
        {
   return 182 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative != 2) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 183 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative != 2) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 184 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative != 2) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 185 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 187 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 188 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 189 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 190 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_SSEADD) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 235 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_SSEADD) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 236 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_SSEADD))
        {
   return 237 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 258 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 259 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 260 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 261 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 262 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 263 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 2) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 264 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_SSEDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 265 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_SSEDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 266 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_SSEDIV))
        {
   return 267 ;
        }
      else
        {
   return 273 ;
        }
    case 562:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FOP))
        {
   return 12 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (mult_operator (recog_data.operand[3], SFmode)))
        {
   return 13 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 14 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 49 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 50 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 51 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_FOP)))
        {
   return 52 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 63 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 64 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_FDIV)))
        {
   return 65 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_FDIV)))
        {
   return 66 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 139 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 140 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], SFmode)) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 141 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 142 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_unit (insn) == UNIT_INTEGER) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 168 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 180 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FOP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 181 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_type (insn) == TYPE_FOP))
        {
   return 182 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 183 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 184 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (mult_operator (recog_data.operand[3], SFmode)))
        {
   return 185 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 187 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_type (insn) == TYPE_FDIV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 188 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 189 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_type (insn) == TYPE_FDIV))
        {
   return 190 ;
        }
      else
        {
   return 273 ;
        }
    case 561:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (! (mult_operator (recog_data.operand[3], XFmode))))
        {
   return 12 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (mult_operator (recog_data.operand[3], XFmode)))
        {
   return 13 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (! (mult_operator (recog_data.operand[3], XFmode)))))
        {
   return 49 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (! (mult_operator (recog_data.operand[3], XFmode)))))
        {
   return 50 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (! (mult_operator (recog_data.operand[3], XFmode)))))
        {
   return 51 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (! (mult_operator (recog_data.operand[3], XFmode)))))
        {
   return 52 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (mult_operator (recog_data.operand[3], XFmode))))
        {
   return 63 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (mult_operator (recog_data.operand[3], XFmode))))
        {
   return 64 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((! (mult_operator (recog_data.operand[3], XFmode))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((! (mult_operator (recog_data.operand[3], XFmode))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((! (mult_operator (recog_data.operand[3], XFmode))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 139 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], XFmode)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 140 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], XFmode)) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 141 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((! (mult_operator (recog_data.operand[3], XFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 180 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((! (mult_operator (recog_data.operand[3], XFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 181 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (! (mult_operator (recog_data.operand[3], XFmode))))
        {
   return 182 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((mult_operator (recog_data.operand[3], XFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 183 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((mult_operator (recog_data.operand[3], XFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 184 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (mult_operator (recog_data.operand[3], XFmode)))
        {
   return 185 ;
        }
      else
        {
   return 273 ;
        }
    case 560:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((! (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 235 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((! (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 236 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (! (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 237 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 258 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 259 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (mult_operator (recog_data.operand[3], SFmode)))
        {
   return 260 ;
        }
      else
        {
   return 273 ;
        }
    case 559:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 12 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 13 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode))))))
        {
   return 49 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode))))))
        {
   return 50 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && ((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode))))))
        {
   return 51 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && ((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode))))))
        {
   return 52 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 0) && (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 63 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((which_alternative == 0) && (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 64 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 139 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 0) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 140 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 0) && (mult_operator (recog_data.operand[3], SFmode))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 141 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 180 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 181 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 182 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 0) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 183 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 0) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 184 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 0) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 185 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 235 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 236 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 237 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 238 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 239 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 240 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 241 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 258 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 259 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 260 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 261 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 262 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 263 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 264 ;
        }
      else
        {
   return 273 ;
        }
    case 557:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (! (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 78 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (! (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 79 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 84 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 85 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((! (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 235 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((! (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 236 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (! (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 237 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 258 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 259 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (mult_operator (recog_data.operand[3], SFmode)))
        {
   return 260 ;
        }
      else
        {
   return 273 ;
        }
    case 556:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 12 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 13 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode))))))
        {
   return 49 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode))))))
        {
   return 50 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && ((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode))))))
        {
   return 51 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && ((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode))))))
        {
   return 52 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 0) && (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 63 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((which_alternative == 0) && (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 64 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode))))))
        {
   return 78 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode))))))
        {
   return 79 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 84 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 85 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 139 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 0) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 140 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 0) && (mult_operator (recog_data.operand[3], SFmode))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 141 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 180 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 181 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 0) && (! (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 182 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 0) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 183 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 0) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 184 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 0) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 185 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 235 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 236 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 237 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 238 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 239 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 240 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && (! (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 241 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 258 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 259 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 260 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 261 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 262 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 263 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 264 ;
        }
      else
        {
   return 273 ;
        }
    case 558:
    case 555:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (! (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 12 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (mult_operator (recog_data.operand[3], SFmode)))
        {
   return 13 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (! (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 49 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (! (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 50 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (! (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 51 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (! (mult_operator (recog_data.operand[3], SFmode)))))
        {
   return 52 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 63 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 64 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((! (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((! (mult_operator (recog_data.operand[3], SFmode))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((! (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 139 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 140 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((mult_operator (recog_data.operand[3], SFmode)) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 141 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((! (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 180 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((! (mult_operator (recog_data.operand[3], SFmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 181 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (! (mult_operator (recog_data.operand[3], SFmode))))
        {
   return 182 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 183 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((mult_operator (recog_data.operand[3], SFmode)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 184 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (mult_operator (recog_data.operand[3], SFmode)))
        {
   return 185 ;
        }
      else
        {
   return 273 ;
        }
    case 554:
    case 552:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 20 ;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 110 ;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 163 ;
        }
      else
        {
   return 273 ;
        }
    case 553:
    case 551:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 7;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 30 ;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 126 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 162 ;
        }
      else
        {
   return 273 ;
        }
    case 534:
    case 533:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 9;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 40 ;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 131 ;
        }
      else if (((ix86_tune) == (CPU_ATHLON)))
        {
   return 148 ;
        }
      else if (((ix86_tune) == (CPU_K8)))
        {
   return 149 ;
        }
      else
        {
   return 273 ;
        }
    case 522:
    case 521:
    case 520:
    case 519:
    case 518:
    case 517:
    case 516:
    case 515:
      extract_insn_cached (insn);
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 10 ;
        }
      else
        {
   return 28 ;
        }
    case 527:
    case 514:
    case 513:
    case 512:
    case 511:
    case 510:
    case 509:
    case 498:
    case 497:
      extract_insn_cached (insn);
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 11 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (memory_operand (recog_data.operand[0], VOIDmode))))
        {
   return 38 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (memory_operand (recog_data.operand[0], VOIDmode)))
        {
   return 39 ;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 130 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 143 ;
        }
      else
        {
   return 273 ;
        }
    case 901:
    case 900:
    case 496:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 225 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 226 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 227 ;
        }
      else
        {
   return 273 ;
        }
    case 773:
    case 772:
    case 495:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 80 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 81 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 225 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 226 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 227 ;
        }
      else
        {
   return 273 ;
        }
    case 494:
    case 493:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (! (memory_operand (recog_data.operand[0], VOIDmode))))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (memory_operand (recog_data.operand[0], VOIDmode))))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (memory_operand (recog_data.operand[0], VOIDmode)))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (! (memory_operand (recog_data.operand[0], VOIDmode))))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (memory_operand (recog_data.operand[0], VOIDmode)))
        {
   return 123 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (! (memory_operand (recog_data.operand[0], VOIDmode))))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (memory_operand (recog_data.operand[0], VOIDmode)))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 492:
    case 490:
    case 479:
    case 477:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (const1_operand (recog_data.operand[1], VOIDmode))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 17 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (const1_operand (recog_data.operand[1], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (const1_operand (recog_data.operand[1], VOIDmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 21 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (const1_operand (recog_data.operand[1], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (const1_operand (recog_data.operand[1], VOIDmode))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 25 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (const1_operand (recog_data.operand[1], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 35 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 36 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 113 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 114 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 115 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 491:
    case 489:
    case 488:
    case 487:
    case 486:
    case 485:
    case 484:
    case 483:
    case 482:
    case 481:
    case 480:
    case 478:
    case 476:
    case 475:
    case 474:
    case 473:
    case 472:
    case 471:
    case 470:
    case 469:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (const1_operand (recog_data.operand[2], VOIDmode))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 17 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (const1_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (const1_operand (recog_data.operand[2], VOIDmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 21 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (const1_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (const1_operand (recog_data.operand[2], VOIDmode))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 25 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (const1_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 35 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 36 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 113 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 114 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 115 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 466:
    case 464:
    case 442:
    case 440:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (const_int_operand (recog_data.operand[1], VOIDmode))) && (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 17 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (const_int_operand (recog_data.operand[1], VOIDmode)))) && (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (const_int_operand (recog_data.operand[1], VOIDmode))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 25 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (const_int_operand (recog_data.operand[1], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 35 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 36 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 113 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 115 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 424:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 35 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 36 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 113 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 114 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 115 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 468:
    case 467:
    case 465:
    case 463:
    case 462:
    case 461:
    case 460:
    case 459:
    case 458:
    case 457:
    case 456:
    case 455:
    case 454:
    case 453:
    case 452:
    case 451:
    case 448:
    case 447:
    case 446:
    case 445:
    case 444:
    case 443:
    case 441:
    case 439:
    case 438:
    case 437:
    case 436:
    case 435:
    case 434:
    case 433:
    case 432:
    case 431:
    case 430:
    case 429:
    case 428:
    case 427:
    case 421:
    case 420:
    case 419:
    case 418:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (const_int_operand (recog_data.operand[2], VOIDmode))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 17 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (const_int_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (const_int_operand (recog_data.operand[2], VOIDmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 21 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (const_int_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (const_int_operand (recog_data.operand[2], VOIDmode))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 25 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (const_int_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 35 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 36 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 113 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 114 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 115 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 426:
    case 425:
    case 417:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((which_alternative == 1) && (const_int_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 17 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || ((which_alternative != 1) || (! (const_int_operand (recog_data.operand[2], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((which_alternative == 1) && (const_int_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 21 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || ((which_alternative != 1) || (! (const_int_operand (recog_data.operand[2], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((which_alternative == 1) && (const_int_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 25 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || ((which_alternative != 1) || (! (const_int_operand (recog_data.operand[2], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 0)))
        {
   return 32 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0)))
        {
   return 33 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 35 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 1) && (! (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 36 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 113 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 114 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 115 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 414:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((get_attr_type (insn) == TYPE_ALU) || (which_alternative == 2))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 16 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 17 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((get_attr_type (insn) == TYPE_ALU) || (which_alternative == 2))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 21 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((get_attr_type (insn) == TYPE_ALU) || (which_alternative == 2))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 25 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 2)))
        {
   return 34 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_ISHIFT)))
        {
   return 35 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((! (get_attr_memory (insn) == MEMORY_NONE)) && (get_attr_type (insn) == TYPE_ISHIFT)))
        {
   return 36 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ISHIFT) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 113 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ISHIFT) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 114 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ISHIFT) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 115 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ALU) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ALU) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ALU) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (which_alternative == 2))
        {
   return 134 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 2))
        {
   return 150 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 413:
    case 412:
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 17 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 21 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 25 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_ISHIFT)))
        {
   return 35 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((! (get_attr_memory (insn) == MEMORY_NONE)) && (get_attr_type (insn) == TYPE_ISHIFT)))
        {
   return 36 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ISHIFT) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 113 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ISHIFT) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 114 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ISHIFT) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 115 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ALU) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ALU) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ALU) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 411:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((which_alternative == 1) && (! (get_attr_imm_disp (insn) == IMM_DISP_TRUE))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 16 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 17 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((which_alternative == 1) && (! (get_attr_imm_disp (insn) == IMM_DISP_TRUE))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 21 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((which_alternative == 1) && (! (get_attr_imm_disp (insn) == IMM_DISP_TRUE))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 25 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 1)))
        {
   return 34 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_ISHIFT)))
        {
   return 35 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((! (get_attr_memory (insn) == MEMORY_NONE)) && (get_attr_type (insn) == TYPE_ISHIFT)))
        {
   return 36 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ISHIFT) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 113 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ISHIFT) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 114 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ISHIFT) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 115 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ALU) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ALU) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ALU) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (which_alternative == 1))
        {
   return 134 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 1))
        {
   return 150 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 410:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 16 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 17 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 21 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 25 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((! (((x86_double_with_add & (1 << ix86_tune))) != (0))) || (! (const1_operand (recog_data.operand[2], VOIDmode))))))
        {
   return 35 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((! (get_attr_memory (insn) == MEMORY_NONE)) && ((! (((x86_double_with_add & (1 << ix86_tune))) != (0))) || (! (const1_operand (recog_data.operand[2], VOIDmode))))))
        {
   return 36 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode)))))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode)))))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode)))))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode)))))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((! (((x86_double_with_add & (1 << ix86_tune))) != (0))) || (! (const1_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 113 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((! (((x86_double_with_add & (1 << ix86_tune))) != (0))) || (! (const1_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 114 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((! (((x86_double_with_add & (1 << ix86_tune))) != (0))) || (! (const1_operand (recog_data.operand[2], VOIDmode)))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 115 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 408:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((which_alternative != 0) || ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 16 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 17 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((which_alternative != 0) || ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 21 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((which_alternative != 0) || ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 25 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 1)))
        {
   return 34 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 0) && ((! (((x86_double_with_add & (1 << ix86_tune))) != (0))) || (! (const1_operand (recog_data.operand[2], VOIDmode)))))))
        {
   return 35 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((! (get_attr_memory (insn) == MEMORY_NONE)) && ((which_alternative == 0) && ((! (((x86_double_with_add & (1 << ix86_tune))) != (0))) || (! (const1_operand (recog_data.operand[2], VOIDmode)))))))
        {
   return 36 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 0) && ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode))))))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((which_alternative == 0) && ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode))))))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && ((which_alternative == 0) && ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode))))))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && ((which_alternative == 0) && ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode))))))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 0) && ((! (((x86_double_with_add & (1 << ix86_tune))) != (0))) || (! (const1_operand (recog_data.operand[2], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 113 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 0) && ((! (((x86_double_with_add & (1 << ix86_tune))) != (0))) || (! (const1_operand (recog_data.operand[2], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 114 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 0) && ((! (((x86_double_with_add & (1 << ix86_tune))) != (0))) || (! (const1_operand (recog_data.operand[2], VOIDmode))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 115 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 0) && ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 0) && ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((which_alternative == 0) && ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode)))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (which_alternative == 1))
        {
   return 134 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 1))
        {
   return 150 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 406:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 35 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 36 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 113 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 114 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 115 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 161 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 164 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 167 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 169 ;
        }
      else
        {
   return 273 ;
        }
    case 416:
    case 415:
    case 409:
    case 403:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_type (insn) == TYPE_ALU)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 16 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 17 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_type (insn) == TYPE_ALU)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 21 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_type (insn) == TYPE_ALU)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 25 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_ISHIFT)))
        {
   return 35 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((! (get_attr_memory (insn) == MEMORY_NONE)) && (get_attr_type (insn) == TYPE_ISHIFT)))
        {
   return 36 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ISHIFT) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 113 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ISHIFT) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 114 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ISHIFT) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 115 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ALU) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ALU) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ALU) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 407:
    case 402:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((which_alternative != 0) || (get_attr_type (insn) == TYPE_ALU))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 16 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 17 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((which_alternative != 0) || (get_attr_type (insn) == TYPE_ALU))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 21 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((which_alternative != 0) || (get_attr_type (insn) == TYPE_ALU))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 25 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 1)))
        {
   return 34 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_ISHIFT)))
        {
   return 35 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((! (get_attr_memory (insn) == MEMORY_NONE)) && (get_attr_type (insn) == TYPE_ISHIFT)))
        {
   return 36 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (get_attr_type (insn) == TYPE_ALU)))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ISHIFT) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 113 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ISHIFT) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 114 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ISHIFT) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 115 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ALU) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ALU) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_ALU) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (which_alternative == 1))
        {
   return 134 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 1))
        {
   return 150 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 391:
    case 390:
    case 389:
    case 388:
    case 387:
    case 386:
    case 376:
    case 375:
    case 374:
    case 373:
    case 372:
    case 371:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 53 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 186 ;
        }
      else
        {
   return 273 ;
        }
    case 400:
    case 398:
    case 395:
    case 394:
    case 392:
    case 361:
    case 360:
    case 359:
    case 358:
    case 357:
    case 356:
    case 355:
    case 354:
    case 353:
    case 352:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 113 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 115 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 294:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x3))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 17 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (which_alternative == 2)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x3))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 21 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (which_alternative == 2)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x3))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 25 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (which_alternative == 2)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 2) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 32 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 2) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 33 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((1 << which_alternative) & 0x3))))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((1 << which_alternative) & 0x3))))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((1 << which_alternative) & 0x3))))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (((1 << which_alternative) & 0x3))))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 290:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x3))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 16 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (which_alternative == 2)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x3))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (which_alternative == 2)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x3))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (which_alternative == 2)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 2) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 32 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 2) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 33 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((1 << which_alternative) & 0x3))))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((1 << which_alternative) & 0x3))))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((1 << which_alternative) & 0x3))))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (((1 << which_alternative) & 0x3))))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 288:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x7))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 16 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (which_alternative == 3)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x7))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (which_alternative == 3)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x7))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (which_alternative == 3)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 3) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 32 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 3) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 33 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((1 << which_alternative) & 0x7))))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((1 << which_alternative) & 0x7))))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((1 << which_alternative) & 0x7))))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (((1 << which_alternative) & 0x7))))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 282:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 122 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else
        {
   return 273 ;
        }
    case 281:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0x5)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((!((1 << which_alternative) & 0x5)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0x5)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((!((1 << which_alternative) & 0x5)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 122 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else
        {
   return 273 ;
        }
    case 280:
    case 279:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative != 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative != 1) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 122 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else
        {
   return 273 ;
        }
    case 278:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((!((1 << which_alternative) & 0xa)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0xa)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((!((1 << which_alternative) & 0xa)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0xa)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 122 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else
        {
   return 273 ;
        }
    case 277:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 45 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 46 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 119 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (! (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 120 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 157 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 158 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 161 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 164 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 167 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 169 ;
        }
      else
        {
   return 273 ;
        }
    case 276:
    case 271:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 47 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 48 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 119 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (! (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 120 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 157 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 158 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 161 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 164 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 167 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 169 ;
        }
      else
        {
   return 273 ;
        }
    case 274:
    case 268:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 119 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (! (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 120 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 157 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 158 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 161 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 164 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 167 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 169 ;
        }
      else
        {
   return 273 ;
        }
    case 265:
    case 264:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 2;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 43 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 44 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 119 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (! (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 120 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 157 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 158 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 161 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 164 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 167 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 169 ;
        }
      else
        {
   return 273 ;
        }
    case 263:
    case 262:
    case 260:
    case 259:
    case 257:
    case 255:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 41 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 42 ;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 116 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 151 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 153 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 154 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 156 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 161 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 164 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 167 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 169 ;
        }
      else
        {
   return 273 ;
        }
    case 261:
    case 258:
    case 256:
    case 254:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 41 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 42 ;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 116 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 151 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 152 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 154 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 155 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 156 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 161 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 164 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 167 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 169 ;
        }
      else
        {
   return 273 ;
        }
    case 253:
    case 252:
    case 251:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 41 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 42 ;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 116 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 151 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 153 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 154 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 156 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((! (((ix86_tune) == (CPU_ATHLON)))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 161 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((! (((ix86_tune) == (CPU_ATHLON)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 164 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((! (((ix86_tune) == (CPU_ATHLON)))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 167 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((! (((ix86_tune) == (CPU_ATHLON)))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 168 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 169 ;
        }
      else
        {
   return 273 ;
        }
    case 250:
      extract_constrain_insn_cached (insn);
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 41 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 42 ;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 116 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 151 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 153 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 154 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 156 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((which_alternative == 0) && (! (((ix86_tune) == (CPU_ATHLON))))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((which_alternative != 0) || (((ix86_tune) == (CPU_ATHLON)))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 161 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((which_alternative == 0) && (! (((ix86_tune) == (CPU_ATHLON))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((which_alternative != 0) || (((ix86_tune) == (CPU_ATHLON)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 164 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((which_alternative == 0) && (! (((ix86_tune) == (CPU_ATHLON))))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((which_alternative != 0) || (((ix86_tune) == (CPU_ATHLON)))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 167 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((which_alternative == 0) && (! (((ix86_tune) == (CPU_ATHLON))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 168 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((which_alternative != 0) || (((ix86_tune) == (CPU_ATHLON)))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 169 ;
        }
      else
        {
   return 273 ;
        }
    case 249:
    case 248:
      extract_constrain_insn_cached (insn);
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 41 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 42 ;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 116 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 151 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 153 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 154 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 156 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((! (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative != 1) && ((which_alternative != 2) || (! (memory_operand (recog_data.operand[1], VOIDmode)))))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((((ix86_tune) == (CPU_ATHLON))) || ((which_alternative == 1) || ((which_alternative == 2) && (memory_operand (recog_data.operand[1], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 161 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((! (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative != 1) && ((which_alternative != 2) || (! (memory_operand (recog_data.operand[1], VOIDmode)))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((((ix86_tune) == (CPU_ATHLON))) || ((which_alternative == 1) || ((which_alternative == 2) && (memory_operand (recog_data.operand[1], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 164 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((! (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative != 1) && ((which_alternative != 2) || (! (memory_operand (recog_data.operand[1], VOIDmode)))))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((((ix86_tune) == (CPU_ATHLON))) || ((which_alternative == 1) || ((which_alternative == 2) && (memory_operand (recog_data.operand[1], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 167 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((! (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative != 1) && ((which_alternative != 2) || (! (memory_operand (recog_data.operand[1], VOIDmode)))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 168 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((((ix86_tune) == (CPU_ATHLON))) || ((which_alternative == 1) || ((which_alternative == 2) && (memory_operand (recog_data.operand[1], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 169 ;
        }
      else
        {
   return 273 ;
        }
    case 247:
      extract_constrain_insn_cached (insn);
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 0;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 41 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 42 ;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 116 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 151 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 152 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 154 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 155 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 156 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((! (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative != 1) && ((which_alternative != 2) || (! (memory_operand (recog_data.operand[1], VOIDmode)))))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((((ix86_tune) == (CPU_ATHLON))) || ((which_alternative == 1) || ((which_alternative == 2) && (memory_operand (recog_data.operand[1], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 161 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((! (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative != 1) && ((which_alternative != 2) || (! (memory_operand (recog_data.operand[1], VOIDmode)))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((((ix86_tune) == (CPU_ATHLON))) || ((which_alternative == 1) || ((which_alternative == 2) && (memory_operand (recog_data.operand[1], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 164 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((! (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative != 1) && ((which_alternative != 2) || (! (memory_operand (recog_data.operand[1], VOIDmode)))))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((((ix86_tune) == (CPU_ATHLON))) || ((which_alternative == 1) || ((which_alternative == 2) && (memory_operand (recog_data.operand[1], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 167 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((! (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative != 1) && ((which_alternative != 2) || (! (memory_operand (recog_data.operand[1], VOIDmode)))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 168 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((((ix86_tune) == (CPU_ATHLON))) || ((which_alternative == 1) || ((which_alternative == 2) && (memory_operand (recog_data.operand[1], VOIDmode))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 169 ;
        }
      else
        {
   return 273 ;
        }
    case 217:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 16 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((! (incdec_operand (recog_data.operand[2], QImode))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 113 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((! (incdec_operand (recog_data.operand[2], QImode))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 114 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((! (incdec_operand (recog_data.operand[2], QImode))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 115 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 215:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 16 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 3)))
        {
   return 34 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative != 3)))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative != 3)))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (which_alternative != 3)))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (which_alternative != 3)))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative != 3) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative != 3) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative != 3) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (which_alternative == 3))
        {
   return 134 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 3))
        {
   return 150 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 339:
    case 338:
    case 337:
    case 317:
    case 316:
    case 315:
    case 295:
    case 242:
    case 241:
    case 240:
    case 214:
    case 212:
    case 211:
    case 210:
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 17 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 21 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 25 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 209:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (which_alternative == 2)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 16 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x3))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 17 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (which_alternative == 2)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x3))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 21 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (which_alternative == 2)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x3))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 25 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 2)))
        {
   return 34 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative != 2)))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative != 2)))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (which_alternative != 2)))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (which_alternative != 2)))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative != 2) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative != 2) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative != 2) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (which_alternative == 2))
        {
   return 134 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 2))
        {
   return 150 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 202:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 16 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative != 0) || (pic_symbolic_operand (recog_data.operand[2], SImode)))))
        {
   return 34 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC))))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC))))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && ((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC))))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && ((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC))))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative != 0) || (pic_symbolic_operand (recog_data.operand[2], SImode))))
        {
   return 134 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative != 0) || (pic_symbolic_operand (recog_data.operand[2], SImode))))
        {
   return 150 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 201:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 16 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 2) || (pic_symbolic_operand (recog_data.operand[2], SImode)))))
        {
   return 34 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC))))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC))))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && ((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC))))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && ((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC))))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 2) || (pic_symbolic_operand (recog_data.operand[2], SImode))))
        {
   return 134 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 2) || (pic_symbolic_operand (recog_data.operand[2], SImode))))
        {
   return 150 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 196:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 16 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 2) || (pic_symbolic_operand (recog_data.operand[2], DImode)))))
        {
   return 34 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC))))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC))))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && ((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC))))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && ((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC))))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_INCDEC)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 2) || (pic_symbolic_operand (recog_data.operand[2], DImode))))
        {
   return 134 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 2) || (pic_symbolic_operand (recog_data.operand[2], DImode))))
        {
   return 150 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 195:
    case 194:
    case 193:
    case 192:
    case 191:
    case 190:
    case 189:
    case 188:
    case 187:
    case 186:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 24 ;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 34 ;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 134 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 150 ;
        }
      else
        {
   return 273 ;
        }
    case 350:
    case 349:
    case 348:
    case 346:
    case 345:
    case 344:
    case 343:
    case 342:
    case 340:
    case 336:
    case 335:
    case 334:
    case 333:
    case 332:
    case 331:
    case 330:
    case 329:
    case 328:
    case 327:
    case 326:
    case 325:
    case 324:
    case 323:
    case 322:
    case 320:
    case 318:
    case 314:
    case 313:
    case 312:
    case 311:
    case 310:
    case 309:
    case 308:
    case 307:
    case 306:
    case 305:
    case 304:
    case 303:
    case 302:
    case 301:
    case 300:
    case 298:
    case 296:
    case 293:
    case 292:
    case 291:
    case 289:
    case 246:
    case 245:
    case 243:
    case 239:
    case 238:
    case 237:
    case 236:
    case 235:
    case 234:
    case 229:
    case 228:
    case 227:
    case 224:
    case 223:
    case 222:
    case 221:
    case 220:
    case 219:
    case 218:
    case 216:
    case 213:
    case 208:
    case 207:
    case 206:
    case 205:
    case 204:
    case 203:
    case 200:
    case 199:
    case 198:
    case 197:
    case 185:
    case 184:
    case 179:
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 16 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 233:
    case 232:
    case 231:
    case 230:
    case 226:
    case 183:
    case 182:
    case 181:
    case 180:
    case 178:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 17 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 21 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 25 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 176:
    case 175:
    case 174:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if (which_alternative != 0)
        {
   return 28 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 58 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 60 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 62 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 139 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 170 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 171 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 174 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 175 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 176 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 177 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 179 ;
        }
      else
        {
   return 273 ;
        }
    case 925:
    case 924:
    case 173:
    case 170:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 246 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 247 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 248 ;
        }
      else if (((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 249 ;
        }
      else
        {
   return 273 ;
        }
    case 172:
    case 169:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if (which_alternative == 1)
        {
   return 28 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 0)))
        {
   return 58 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0)))
        {
   return 59 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (which_alternative == 0)))
        {
   return 61 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 139 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 172 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 173 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 176 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 177 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 0))
        {
   return 179 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 3) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 246 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 2) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 247 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 2) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 248 ;
        }
      else if (((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative == 2) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 249 ;
        }
      else
        {
   return 273 ;
        }
    case 786:
    case 785:
    case 167:
    case 164:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 88 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 247 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 248 ;
        }
      else if (((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 249 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 250 ;
        }
      else
        {
   return 273 ;
        }
    case 166:
    case 163:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if (which_alternative == 1)
        {
   return 28 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 0)))
        {
   return 58 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0)))
        {
   return 59 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (which_alternative == 0)))
        {
   return 61 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (!((1 << which_alternative) & 0x3)))
        {
   return 88 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 139 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 172 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 173 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 176 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 177 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 0))
        {
   return 179 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 3) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 247 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 3) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 248 ;
        }
      else if (((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative == 3) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 249 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x3)) && ((((1 << which_alternative) & 0x6)) && (get_attr_memory (insn) == MEMORY_NONE))))
        {
   return 250 ;
        }
      else
        {
   return 273 ;
        }
    case 171:
    case 168:
    case 165:
    case 162:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if (which_alternative != 0)
        {
   return 28 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 58 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 59 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 61 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 139 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 172 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 173 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 176 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 177 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 179 ;
        }
      else
        {
   return 273 ;
        }
    case 156:
    case 155:
    case 151:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 247 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 248 ;
        }
      else if (((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 249 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 250 ;
        }
      else
        {
   return 273 ;
        }
    case 790:
    case 789:
    case 150:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 88 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 247 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 248 ;
        }
      else if (((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 249 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 250 ;
        }
      else
        {
   return 273 ;
        }
    case 159:
    case 158:
    case 157:
    case 154:
    case 153:
    case 152:
    case 149:
    case 148:
    case 147:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 12 ;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 54 ;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 178 ;
        }
      else
        {
   return 273 ;
        }
    case 926:
    case 139:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 251 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 252 ;
        }
      else
        {
   return 273 ;
        }
    case 137:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 1) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 58 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 59 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 61 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 139 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 172 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 173 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 176 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 177 ;
        }
      else if ((which_alternative == 1) && ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))))
        {
   return 179 ;
        }
      else if (((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 242 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 0))
        {
   return 243 ;
        }
      else
        {
   return 273 ;
        }
    case 136:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 2) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 2) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 2) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 58 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 2) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 59 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 2) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 61 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 2) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 2) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 2) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 139 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 2) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 172 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 2) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 173 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 2) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 176 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 2) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 177 ;
        }
      else if ((which_alternative == 2) && ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))))
        {
   return 179 ;
        }
      else if (((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 251 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 252 ;
        }
      else
        {
   return 273 ;
        }
    case 135:
    case 134:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if (((1 << which_alternative) & 0xe))
        {
   return 28 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 0)))
        {
   return 58 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0)))
        {
   return 59 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (which_alternative == 0)))
        {
   return 61 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 139 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 172 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 173 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 176 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 177 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 0))
        {
   return 179 ;
        }
      else if (((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative == 4) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 242 ;
        }
      else if ((which_alternative == 4) && ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))))
        {
   return 243 ;
        }
      else
        {
   return 273 ;
        }
    case 145:
    case 142:
    case 133:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if (which_alternative != 0)
        {
   return 28 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 58 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 59 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 61 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 139 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 172 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 173 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 176 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 177 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 179 ;
        }
      else
        {
   return 273 ;
        }
    case 146:
    case 144:
    case 143:
    case 141:
    case 138:
    case 132:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 58 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 59 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 61 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 139 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 172 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 173 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 176 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 177 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 179 ;
        }
      else
        {
   return 273 ;
        }
    case 131:
    case 130:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 58 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0)))
        {
   return 59 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 60 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (which_alternative == 0)))
        {
   return 61 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 62 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 139 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 170 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 171 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 172 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 173 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 174 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 175 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 176 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 177 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 179 ;
        }
      else
        {
   return 273 ;
        }
    case 1033:
    case 1032:
    case 1016:
    case 1014:
    case 927:
    case 140:
    case 129:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 242 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 243 ;
        }
      else
        {
   return 273 ;
        }
    case 128:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0x3)) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_STORE)) && (which_alternative == 1)))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0x3)) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((1 << which_alternative) & 0x3))))
        {
   return 58 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0)))
        {
   return 59 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 1)))
        {
   return 60 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (which_alternative == 0)))
        {
   return 61 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (which_alternative == 1)))
        {
   return 62 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x3)) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 139 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 1)))
        {
   return 170 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 1)))
        {
   return 171 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 172 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 173 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) && (which_alternative == 1)))
        {
   return 174 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)) && (which_alternative == 1)))
        {
   return 175 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x3)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 176 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x3)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 177 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((1 << which_alternative) & 0x3)))
        {
   return 179 ;
        }
      else if (((((ix86_tune) == (CPU_K8))) || (((ix86_tune) == (CPU_ATHLON)))) && ((which_alternative == 2) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 242 ;
        }
      else if ((which_alternative == 2) && ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))))
        {
   return 243 ;
        }
      else
        {
   return 273 ;
        }
    case 114:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (which_alternative == 1))
        {
   return 7;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (which_alternative != 1)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (which_alternative == 1)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (which_alternative != 1)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (which_alternative == 1)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (which_alternative != 1)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 1)))
        {
   return 29 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 1)))
        {
   return 30 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (which_alternative == 1)))
        {
   return 31 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 0)))
        {
   return 32 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0)))
        {
   return 33 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 124 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 125 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 126 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 127 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 128 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 162 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 165 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 168 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 3) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 203 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 3) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 204 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((!((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 209 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((!((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 210 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x3)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 213 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (!((1 << which_alternative) & 0x3)))
        {
   return 216 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 2) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 219 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 2))
        {
   return 220 ;
        }
      else
        {
   return 273 ;
        }
    case 113:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (which_alternative == 1))
        {
   return 7;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (which_alternative != 1)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (which_alternative == 1)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (which_alternative != 1)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (which_alternative == 1)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (which_alternative != 1)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 1)))
        {
   return 29 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 1)))
        {
   return 30 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (which_alternative == 1)))
        {
   return 31 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 0)))
        {
   return 32 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0)))
        {
   return 33 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 124 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 125 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 126 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 127 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 128 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 162 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 165 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 168 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 3) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 203 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 3) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 204 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 3) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 205 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 3) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 206 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((!((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 209 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((!((1 << which_alternative) & 0x3)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 210 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 3) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 211 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 3) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 212 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x3)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 213 ;
        }
      else if ((which_alternative == 3) && (((ix86_tune) == (CPU_K8))))
        {
   return 214 ;
        }
      else if ((which_alternative == 3) && (((ix86_tune) == (CPU_ATHLON))))
        {
   return 215 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (!((1 << which_alternative) & 0x3)))
        {
   return 216 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((which_alternative == 2) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 219 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 2))
        {
   return 220 ;
        }
      else
        {
   return 273 ;
        }
    case 112:
    case 111:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if (((1 << which_alternative) & 0x7))
        {
   return 28 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 4) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 203 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 4) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 204 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 4) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 205 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 4) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 206 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 209 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 210 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 4) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 211 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 4) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 212 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 213 ;
        }
      else if ((which_alternative == 4) && (((ix86_tune) == (CPU_K8))))
        {
   return 214 ;
        }
      else if ((which_alternative == 4) && (((ix86_tune) == (CPU_ATHLON))))
        {
   return 215 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 216 ;
        }
      else
        {
   return 273 ;
        }
    case 109:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((which_alternative == 1) && (! (get_attr_imm_disp (insn) == IMM_DISP_TRUE))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 16 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((which_alternative != 1) || (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((which_alternative == 1) && (! (get_attr_imm_disp (insn) == IMM_DISP_TRUE))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((which_alternative != 1) || (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((which_alternative == 1) && (! (get_attr_imm_disp (insn) == IMM_DISP_TRUE))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((which_alternative != 1) || (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 0)))
        {
   return 32 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0)))
        {
   return 33 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 113 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 114 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 115 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 106:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((which_alternative == 1) && (! (get_attr_imm_disp (insn) == IMM_DISP_TRUE))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 17 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((which_alternative != 1) || (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((which_alternative == 1) && (! (get_attr_imm_disp (insn) == IMM_DISP_TRUE))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 21 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((which_alternative != 1) || (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((which_alternative == 1) && (! (get_attr_imm_disp (insn) == IMM_DISP_TRUE))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 25 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((which_alternative != 1) || (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 0)))
        {
   return 32 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0)))
        {
   return 33 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 113 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 114 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 115 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 101:
    case 100:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 5;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0x7)) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if (!((1 << which_alternative) & 0x7))
        {
   return 28 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 58 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 60 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 62 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 139 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 170 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 171 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 174 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 175 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 176 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 177 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 179 ;
        }
      else
        {
   return 273 ;
        }
    case 96:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0x7)) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if (((1 << which_alternative) & 0x18))
        {
   return 28 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((1 << which_alternative) & 0x7))))
        {
   return 58 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((1 << which_alternative) & 0x7))))
        {
   return 59 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((1 << which_alternative) & 0x7))))
        {
   return 61 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0))))))
        {
   return 106 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0))))))
        {
   return 107 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0))))))
        {
   return 108 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x7)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x7)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 139 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x7)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 172 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x7)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 173 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 176 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 177 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((1 << which_alternative) & 0x7)))
        {
   return 179 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((!((1 << which_alternative) & 0x1f)) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 203 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((!((1 << which_alternative) & 0x1f)) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 204 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0)))) || ((((which_alternative == 5) && ((! ((optimize_size) != (0))) && (! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))))) || (((which_alternative == 6) && ((! ((optimize_size) != (0))) && (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)))) || ((which_alternative == 7) && (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((! ((optimize_size) != (0))) && (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 205 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0)))) || ((((which_alternative == 5) && ((! ((optimize_size) != (0))) && (! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))))) || (((which_alternative == 6) && ((! ((optimize_size) != (0))) && (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)))) || ((which_alternative == 7) && (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((! ((optimize_size) != (0))) && (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 206 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((!((1 << which_alternative) & 0x1f)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 209 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((!((1 << which_alternative) & 0x1f)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 210 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0)))) || ((((which_alternative == 5) && ((! ((optimize_size) != (0))) && (! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))))) || (((which_alternative == 6) && ((! ((optimize_size) != (0))) && (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)))) || ((which_alternative == 7) && (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((! ((optimize_size) != (0))) && (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 211 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0)))) || ((((which_alternative == 5) && ((! ((optimize_size) != (0))) && (! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))))) || (((which_alternative == 6) && ((! ((optimize_size) != (0))) && (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)))) || ((which_alternative == 7) && (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((! ((optimize_size) != (0))) && (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 212 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x1f)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 213 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0)))) || ((((which_alternative == 5) && ((! ((optimize_size) != (0))) && (! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))))) || (((which_alternative == 6) && ((! ((optimize_size) != (0))) && (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)))) || ((which_alternative == 7) && (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((! ((optimize_size) != (0))) && (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)))))))
        {
   return 214 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0)))) || ((((which_alternative == 5) && ((! ((optimize_size) != (0))) && (! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))))) || (((which_alternative == 6) && ((! ((optimize_size) != (0))) && (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)))) || ((which_alternative == 7) && (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((! ((optimize_size) != (0))) && (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)))))))
        {
   return 215 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (!((1 << which_alternative) & 0x1f)))
        {
   return 216 ;
        }
      else
        {
   return 273 ;
        }
    case 95:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0x7)) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if (((1 << which_alternative) & 0x18))
        {
   return 28 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((1 << which_alternative) & 0x7))))
        {
   return 58 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((1 << which_alternative) & 0x7))))
        {
   return 59 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((1 << which_alternative) & 0x7))))
        {
   return 61 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0))))))
        {
   return 106 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0))))))
        {
   return 107 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0))))))
        {
   return 108 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x7)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x7)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 139 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x7)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 172 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x7)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 173 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 176 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 177 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((1 << which_alternative) & 0x7)))
        {
   return 179 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((!((1 << which_alternative) & 0x1f)) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 203 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((!((1 << which_alternative) & 0x1f)) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 204 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0)))) || ((((which_alternative == 5) && ((! ((optimize_size) != (0))) && (! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))))) || (((which_alternative == 6) && ((! ((optimize_size) != (0))) && (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)))) || ((which_alternative == 7) && (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((! ((optimize_size) != (0))) && (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 205 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0)))) || ((((which_alternative == 5) && ((! ((optimize_size) != (0))) && (! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))))) || (((which_alternative == 6) && ((! ((optimize_size) != (0))) && (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)))) || ((which_alternative == 7) && (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((! ((optimize_size) != (0))) && (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 206 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((!((1 << which_alternative) & 0x1f)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 209 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((!((1 << which_alternative) & 0x1f)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 210 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0)))) || ((((which_alternative == 5) && ((! ((optimize_size) != (0))) && (! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))))) || (((which_alternative == 6) && ((! ((optimize_size) != (0))) && (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)))) || ((which_alternative == 7) && (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((! ((optimize_size) != (0))) && (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 211 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0)))) || ((((which_alternative == 5) && ((! ((optimize_size) != (0))) && (! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))))) || (((which_alternative == 6) && ((! ((optimize_size) != (0))) && (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)))) || ((which_alternative == 7) && (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((! ((optimize_size) != (0))) && (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 212 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x1f)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 213 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0)))) || ((((which_alternative == 5) && ((! ((optimize_size) != (0))) && (! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))))) || (((which_alternative == 6) && ((! ((optimize_size) != (0))) && (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)))) || ((which_alternative == 7) && (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((! ((optimize_size) != (0))) && (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)))))))
        {
   return 214 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((which_alternative == 5) && ((optimize_size) != (0))) || ((which_alternative == 6) && ((optimize_size) != (0)))) || ((((which_alternative == 5) && ((! ((optimize_size) != (0))) && (! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))))) || (((which_alternative == 6) && ((! ((optimize_size) != (0))) && (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)))) || ((which_alternative == 7) && (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((! ((optimize_size) != (0))) && (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)))))))
        {
   return 215 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (!((1 << which_alternative) & 0x1f)))
        {
   return 216 ;
        }
      else
        {
   return 273 ;
        }
    case 988:
    case 987:
    case 986:
    case 985:
    case 984:
    case 983:
    case 982:
    case 981:
    case 980:
    case 979:
    case 978:
    case 977:
    case 976:
    case 975:
    case 974:
    case 973:
    case 972:
    case 971:
    case 970:
    case 969:
    case 968:
    case 967:
    case 955:
    case 954:
    case 953:
    case 951:
    case 950:
    case 949:
    case 948:
    case 947:
    case 946:
    case 945:
    case 944:
    case 943:
    case 942:
    case 941:
    case 940:
    case 939:
    case 938:
    case 937:
    case 936:
    case 935:
    case 934:
    case 933:
    case 932:
    case 931:
    case 930:
    case 102:
    case 97:
    case 92:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else
        {
   return 273 ;
        }
    case 91:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0x7)) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((1 << which_alternative) & 0x18)))
        {
   return 7;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (!((1 << which_alternative) & 0x18))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x18))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (!((1 << which_alternative) & 0x18))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x18))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (!((1 << which_alternative) & 0x18))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((1 << which_alternative) & 0x18))))
        {
   return 29 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((1 << which_alternative) & 0x18))))
        {
   return 30 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((1 << which_alternative) & 0x18))))
        {
   return 31 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((1 << which_alternative) & 0x7))))
        {
   return 58 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((1 << which_alternative) & 0x7))))
        {
   return 59 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((1 << which_alternative) & 0x7))))
        {
   return 61 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((((which_alternative == 6) && ((! (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0))) && (! (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || (!((1 << which_alternative) & 0xe78))) && (((1 << which_alternative) & 0x1e0)))))
        {
   return 90 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((((which_alternative == 6) && ((! (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0))) && (! (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || (!((1 << which_alternative) & 0xe78))) && (((1 << which_alternative) & 0x1e0)))))
        {
   return 91 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && ((((which_alternative == 6) && ((! (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0))) && (! (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || (!((1 << which_alternative) & 0xe78))) && (((1 << which_alternative) & 0x1e0)))))
        {
   return 92 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0)))))))
        {
   return 106 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0)))))))
        {
   return 107 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0)))))))
        {
   return 108 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x18)) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 124 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x18)) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 125 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 126 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 127 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 128 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x7)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x7)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 139 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 162 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 165 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 168 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x7)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 172 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x7)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 173 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 176 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 177 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((1 << which_alternative) & 0x7)))
        {
   return 179 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x1e0)) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 203 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x1e0)) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 204 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)) && (((((target_flags & 0x00008000) != 0)) != (0)) && ((optimize_size) == (0)))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 205 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)) && (((((target_flags & 0x00008000) != 0)) != (0)) && ((optimize_size) == (0)))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 206 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x1e0)) && ((((which_alternative == 6) && ((! (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0))) && (! (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || (!((1 << which_alternative) & 0xe78))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 207 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x1e0)) && ((((which_alternative == 6) && ((! (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0))) && (! (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || (!((1 << which_alternative) & 0xe78))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 208 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((!((1 << which_alternative) & 0x1f)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 209 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((!((1 << which_alternative) & 0x1f)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 210 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)) && (((((target_flags & 0x00008000) != 0)) != (0)) && ((optimize_size) == (0)))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 211 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)) && (((((target_flags & 0x00008000) != 0)) != (0)) && ((optimize_size) == (0)))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 212 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x1f)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 213 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)) && (((((target_flags & 0x00008000) != 0)) != (0)) && ((optimize_size) == (0)))))))
        {
   return 214 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)) && (((((target_flags & 0x00008000) != 0)) != (0)) && ((optimize_size) == (0)))))))
        {
   return 215 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (!((1 << which_alternative) & 0x1f)))
        {
   return 216 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x1ff)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 219 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (!((1 << which_alternative) & 0x1ff)))
        {
   return 220 ;
        }
      else
        {
   return 273 ;
        }
    case 90:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_NONE) || (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 4;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((((1 << which_alternative) & 0x7)) && ((immediate_operand (recog_data.operand[1], VOIDmode)) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return 6;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((1 << which_alternative) & 0x18)))
        {
   return 7;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (!((1 << which_alternative) & 0x18))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x18))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (!((1 << which_alternative) & 0x18))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (((1 << which_alternative) & 0x18))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (!((1 << which_alternative) & 0x18))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((1 << which_alternative) & 0x18))))
        {
   return 29 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((1 << which_alternative) & 0x18))))
        {
   return 30 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((1 << which_alternative) & 0x18))))
        {
   return 31 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((1 << which_alternative) & 0x7))))
        {
   return 58 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((1 << which_alternative) & 0x7))))
        {
   return 59 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((1 << which_alternative) & 0x7))))
        {
   return 61 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((((which_alternative == 6) && ((! (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0))) && (! (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || (!((1 << which_alternative) & 0xe78))) && (((1 << which_alternative) & 0x1e0)))))
        {
   return 90 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((((which_alternative == 6) && ((! (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0))) && (! (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || (!((1 << which_alternative) & 0xe78))) && (((1 << which_alternative) & 0x1e0)))))
        {
   return 91 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && ((((which_alternative == 6) && ((! (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0))) && (! (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || (!((1 << which_alternative) & 0xe78))) && (((1 << which_alternative) & 0x1e0)))))
        {
   return 92 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0)))))))
        {
   return 106 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0)))))))
        {
   return 107 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0)))))))
        {
   return 108 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x18)) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 124 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x18)) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 125 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 126 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 127 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 128 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x7)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((1 << which_alternative) & 0x7)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 139 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 162 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 165 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x18)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 168 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x7)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 172 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x7)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 173 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 176 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 177 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((1 << which_alternative) & 0x7)))
        {
   return 179 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x1e0)) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 203 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x1e0)) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 204 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)) && (((((target_flags & 0x00008000) != 0)) != (0)) && ((optimize_size) == (0)))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 205 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (((((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)) && (((((target_flags & 0x00008000) != 0)) != (0)) && ((optimize_size) == (0)))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 206 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x1e0)) && ((((which_alternative == 6) && ((! (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0))) && (! (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || (!((1 << which_alternative) & 0xe78))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 207 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x1e0)) && ((((which_alternative == 6) && ((! (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0))) && (! (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || (!((1 << which_alternative) & 0xe78))) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 208 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((!((1 << which_alternative) & 0x1f)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 209 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((!((1 << which_alternative) & 0x1f)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 210 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)) && (((((target_flags & 0x00008000) != 0)) != (0)) && ((optimize_size) == (0)))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 211 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (((((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)) && (((((target_flags & 0x00008000) != 0)) != (0)) && ((optimize_size) == (0)))))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 212 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x1f)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 213 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)) && (((((target_flags & 0x00008000) != 0)) != (0)) && ((optimize_size) == (0)))))))
        {
   return 214 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((which_alternative == 5) && (((! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))) || (! ((((target_flags & 0x00008000) != 0)) != (0)))) || (! ((optimize_size) == (0))))) || ((which_alternative == 6) && ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || ((which_alternative == 5) && ((((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)) && (((((target_flags & 0x00008000) != 0)) != (0)) && ((optimize_size) == (0)))))))
        {
   return 215 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (!((1 << which_alternative) & 0x1f)))
        {
   return 216 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x1ff)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 219 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (!((1 << which_alternative) & 0x1ff)))
        {
   return 220 ;
        }
      else
        {
   return 273 ;
        }
    case 89:
    case 88:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 1) && (! (memory_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 8;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((which_alternative != 1) || (memory_operand (recog_data.operand[1], VOIDmode))) && ((which_alternative == 1) && (memory_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 19 ;
        }
      else if (which_alternative != 1)
        {
   return 28 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 131 ;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 145 ;
        }
      else
        {
   return 273 ;
        }
    case 84:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))))
        {
   return 7;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 16 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if (which_alternative == 4)
        {
   return 28 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode)))))))
        {
   return 29 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode)))))))
        {
   return 30 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && ((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode)))))))
        {
   return 31 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((!((1 << which_alternative) & 0x7f0)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], DImode))))))
        {
   return 34 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 124 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 125 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 126 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 127 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && ((get_attr_memory (insn) == MEMORY_BOTH) || (which_alternative == 4))))
        {
   return 128 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((!((1 << which_alternative) & 0x7f0)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], DImode)))))
        {
   return 134 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x7f0)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], DImode)))))
        {
   return 150 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x7e0)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 162 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x7e0)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 165 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x7e0)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x7e0)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 168 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x700)) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 203 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x700)) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 204 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 8) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 205 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 8) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 206 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x700)) && ((!((1 << which_alternative) & 0x111)) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 207 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x700)) && ((!((1 << which_alternative) & 0x111)) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 208 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x7e0)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 209 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x7e0)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 210 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 8) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 211 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 8) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 212 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x7e0)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 213 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (which_alternative == 8))
        {
   return 214 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (which_alternative == 8))
        {
   return 215 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((1 << which_alternative) & 0x7e0)))
        {
   return 216 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0xe0)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 219 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((1 << which_alternative) & 0xe0)))
        {
   return 220 ;
        }
      else
        {
   return 273 ;
        }
    case 83:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))))
        {
   return 7;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 16 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if (which_alternative == 4)
        {
   return 28 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode)))))))
        {
   return 29 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode)))))))
        {
   return 30 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && ((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode)))))))
        {
   return 31 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((!((1 << which_alternative) & 0x7f0)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], DImode))))))
        {
   return 34 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 124 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 125 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 126 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 127 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && ((get_attr_memory (insn) == MEMORY_BOTH) || (which_alternative == 4))))
        {
   return 128 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((!((1 << which_alternative) & 0x7f0)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], DImode)))))
        {
   return 134 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x7f0)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], DImode)))))
        {
   return 150 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x7e0)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 162 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x7e0)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 165 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x7e0)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0x7e0)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 168 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x700)) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 203 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x700)) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 204 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 8) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 205 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 8) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 206 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x700)) && ((!((1 << which_alternative) & 0x111)) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 207 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x700)) && ((!((1 << which_alternative) & 0x111)) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 208 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0x7e0)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 209 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0x7e0)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 210 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 8) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 211 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 8) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 212 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x7e0)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 213 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (which_alternative == 8))
        {
   return 214 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (which_alternative == 8))
        {
   return 215 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((1 << which_alternative) & 0x7e0)))
        {
   return 216 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0xe0)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 219 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((1 << which_alternative) & 0xe0)))
        {
   return 220 ;
        }
      else
        {
   return 273 ;
        }
    case 82:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if (((1 << which_alternative) & 0x3))
        {
   return 28 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((((1 << which_alternative) & 0xc)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((1 << which_alternative) & 0xc))))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((1 << which_alternative) & 0xc))))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_BOTH) && (((1 << which_alternative) & 0xc))))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((!((1 << which_alternative) & 0xf)) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 203 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((!((1 << which_alternative) & 0xf)) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 204 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 5) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 205 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 5) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 206 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((!((1 << which_alternative) & 0xf)) && ((which_alternative != 5) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 207 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((!((1 << which_alternative) & 0xf)) && ((which_alternative != 5) && (get_attr_memory (insn) == MEMORY_LOAD))))
        {
   return 208 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((!((1 << which_alternative) & 0xf)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 209 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((!((1 << which_alternative) & 0xf)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 210 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 5) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 211 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 5) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 212 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0xf)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 213 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (which_alternative == 5))
        {
   return 214 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (which_alternative == 5))
        {
   return 215 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (!((1 << which_alternative) & 0xf)))
        {
   return 216 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0xc)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 219 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((1 << which_alternative) & 0xc)))
        {
   return 220 ;
        }
      else
        {
   return 273 ;
        }
    case 76:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((which_alternative == 0) && (! (memory_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 8;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((which_alternative != 0) || (memory_operand (recog_data.operand[1], VOIDmode))) && ((which_alternative == 0) && (memory_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 19 ;
        }
      else if (which_alternative != 0)
        {
   return 28 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 131 ;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 145 ;
        }
      else
        {
   return 273 ;
        }
    case 71:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0)))))
        {
   return 7;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0))))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 16 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || ((! (q_regs_operand (recog_data.operand[0], QImode))) || (((x86_movx & (1 << ix86_tune))) != (0)))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || ((! (q_regs_operand (recog_data.operand[0], QImode))) || (((x86_movx & (1 << ix86_tune))) != (0)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0))))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || ((! (q_regs_operand (recog_data.operand[0], QImode))) || (((x86_movx & (1 << ix86_tune))) != (0)))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0))))))
        {
   return 29 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0))))))
        {
   return 30 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && ((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0))))))
        {
   return 31 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((! (q_regs_operand (recog_data.operand[0], QImode))) || (((x86_movx & (1 << ix86_tune))) != (0)))))
        {
   return 32 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((! (q_regs_operand (recog_data.operand[0], QImode))) || (((x86_movx & (1 << ix86_tune))) != (0)))))
        {
   return 33 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((! (q_regs_operand (recog_data.operand[0], QImode))) || (((x86_movx & (1 << ix86_tune))) != (0))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((! (q_regs_operand (recog_data.operand[0], QImode))) || (((x86_movx & (1 << ix86_tune))) != (0))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((! (q_regs_operand (recog_data.operand[0], QImode))) || (((x86_movx & (1 << ix86_tune))) != (0))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0)))) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 124 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0)))) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 125 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 126 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0)))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 127 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0)))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 128 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 162 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0)))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 165 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 70:
    case 66:
    case 65:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_IMOV))
        {
   return 7;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (get_attr_type (insn) == TYPE_IMOV))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_type (insn) == TYPE_IMOV)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (get_attr_type (insn) == TYPE_IMOV))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_type (insn) == TYPE_IMOV)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (get_attr_type (insn) == TYPE_IMOV))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_IMOV)))
        {
   return 29 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_IMOV)))
        {
   return 30 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_IMOV)))
        {
   return 31 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_IMOVX)))
        {
   return 32 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_IMOVX)))
        {
   return 33 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_IMOVX) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_IMOVX) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_IMOVX) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_IMOV) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 124 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_IMOV) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 125 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_IMOV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 126 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_IMOV) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 127 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_IMOV) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 128 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_type (insn) == TYPE_IMOV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 162 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_type (insn) == TYPE_IMOV) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 165 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 125:
    case 124:
    case 123:
    case 122:
    case 121:
    case 120:
    case 119:
    case 118:
    case 116:
    case 115:
    case 110:
    case 107:
    case 104:
    case 69:
    case 64:
    case 63:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 32 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 33 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 74:
    case 73:
    case 72:
    case 61:
      extract_insn_cached (insn);
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 7;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 29 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 30 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 31 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return 124 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return 125 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 126 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 127 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 128 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 162 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 165 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 59:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))))
        {
   return 7;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))) && ((((optimize_size) != (0)) || ((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0))))) || ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 16 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2))))) && ((! ((optimize_size) != (0))) && (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((((1 << which_alternative) & 0x28)) || ((((x86_movx & (1 << ix86_tune))) != (0)) && (which_alternative == 2))))))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 17 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || ((! ((optimize_size) != (0))) && (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || ((((1 << which_alternative) & 0x28)) || ((((x86_movx & (1 << ix86_tune))) != (0)) && (which_alternative == 2))))))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))) && ((((optimize_size) != (0)) || ((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0))))) || ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2))))) && ((! ((optimize_size) != (0))) && (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((((1 << which_alternative) & 0x28)) || ((((x86_movx & (1 << ix86_tune))) != (0)) && (which_alternative == 2))))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 21 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || ((! ((optimize_size) != (0))) && (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || ((((1 << which_alternative) & 0x28)) || ((((x86_movx & (1 << ix86_tune))) != (0)) && (which_alternative == 2))))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))) && ((((optimize_size) != (0)) || ((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0))))) || ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && ((((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2))))) && ((! ((optimize_size) != (0))) && (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((((1 << which_alternative) & 0x28)) || ((((x86_movx & (1 << ix86_tune))) != (0)) && (which_alternative == 2))))))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 25 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || ((! ((optimize_size) != (0))) && (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || ((((1 << which_alternative) & 0x28)) || ((((x86_movx & (1 << ix86_tune))) != (0)) && (which_alternative == 2))))))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2))))))))
        {
   return 29 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2))))))))
        {
   return 30 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2))))))))
        {
   return 31 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((! ((optimize_size) != (0))) && ((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0)))))) && ((((1 << which_alternative) & 0x28)) || ((((x86_movx & (1 << ix86_tune))) != (0)) && (which_alternative == 2))))))
        {
   return 32 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((! ((optimize_size) != (0))) && ((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0)))))) && ((((1 << which_alternative) & 0x28)) || ((((x86_movx & (1 << ix86_tune))) != (0)) && (which_alternative == 2))))))
        {
   return 33 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((! ((optimize_size) != (0))) && ((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0)))))) && ((((1 << which_alternative) & 0x28)) || ((((x86_movx & (1 << ix86_tune))) != (0)) && (which_alternative == 2)))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((! ((optimize_size) != (0))) && ((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0)))))) && ((((1 << which_alternative) & 0x28)) || ((((x86_movx & (1 << ix86_tune))) != (0)) && (which_alternative == 2)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((! ((optimize_size) != (0))) && ((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0)))))) && ((((1 << which_alternative) & 0x28)) || ((((x86_movx & (1 << ix86_tune))) != (0)) && (which_alternative == 2)))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 124 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 125 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 126 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 127 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 128 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 162 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 165 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 399:
    case 105:
    case 56:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 17 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 25 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 113 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 115 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 55:
      extract_insn_cached (insn);
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 7;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 29 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 30 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 31 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return 124 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return 125 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 126 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 127 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 128 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 162 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 165 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 60:
    case 54:
    case 53:
      extract_insn_cached (insn);
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 7;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 29 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 30 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 31 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return 124 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return 125 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 126 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 127 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 128 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 162 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 165 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 52:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 7;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 30 ;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 126 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 162 ;
        }
      else
        {
   return 273 ;
        }
    case 50:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_type (insn) == TYPE_IMOV))
        {
   return 7;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 16 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 17 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (get_attr_type (insn) == TYPE_IMOV))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 21 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (get_attr_type (insn) == TYPE_IMOV))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_PU) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 25 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (((get_attr_imm_disp (insn) == IMM_DISP_TRUE) || (! (get_attr_type (insn) == TYPE_IMOV))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (get_attr_type (insn) == TYPE_IMOV)))
        {
   return 29 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (get_attr_type (insn) == TYPE_IMOV)))
        {
   return 30 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && (get_attr_type (insn) == TYPE_IMOV)))
        {
   return 31 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((! ((optimize_size) != (0))) && (((which_alternative != 0) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_himode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x6)) || (! (aligned_operand (recog_data.operand[1], HImode)))))) && ((((x86_movx & (1 << ix86_tune))) != (0)) && (((1 << which_alternative) & 0x5))))))
        {
   return 32 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((! ((optimize_size) != (0))) && (((which_alternative != 0) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_himode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x6)) || (! (aligned_operand (recog_data.operand[1], HImode)))))) && ((((x86_movx & (1 << ix86_tune))) != (0)) && (((1 << which_alternative) & 0x5))))))
        {
   return 33 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((! ((optimize_size) != (0))) && (((which_alternative != 0) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_himode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x6)) || (! (aligned_operand (recog_data.operand[1], HImode)))))) && ((((x86_movx & (1 << ix86_tune))) != (0)) && (((1 << which_alternative) & 0x5)))) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((! ((optimize_size) != (0))) && (((which_alternative != 0) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_himode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x6)) || (! (aligned_operand (recog_data.operand[1], HImode)))))) && ((((x86_movx & (1 << ix86_tune))) != (0)) && (((1 << which_alternative) & 0x5)))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 122 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((((! ((optimize_size) != (0))) && (((which_alternative != 0) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_himode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x6)) || (! (aligned_operand (recog_data.operand[1], HImode)))))) && ((((x86_movx & (1 << ix86_tune))) != (0)) && (((1 << which_alternative) & 0x5)))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_IMOV) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 124 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_IMOV) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 125 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_IMOV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 126 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_IMOV) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 127 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_type (insn) == TYPE_IMOV) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 128 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_type (insn) == TYPE_IMOV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 162 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((get_attr_type (insn) == TYPE_IMOV) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 165 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 87:
    case 47:
      extract_insn_cached (insn);
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 7;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 29 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 30 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 31 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return 124 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return 125 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 126 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 127 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 128 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 161 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 162 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 164 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 165 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_BOTH))
        {
   return 167 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 169 ;
        }
      else
        {
   return 273 ;
        }
    case 86:
    case 68:
    case 46:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 7;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 30 ;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 126 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 162 ;
        }
      else
        {
   return 273 ;
        }
    case 85:
    case 67:
    case 51:
    case 45:
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 7;
        }
      else if (((ix86_tune) == (CPU_PENTIUMPRO)))
        {
   return 31 ;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 127 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 165 ;
        }
      else
        {
   return 273 ;
        }
    case 44:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))))
        {
   return 7;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 16 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode)))))))
        {
   return 29 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode)))))))
        {
   return 30 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && ((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode)))))))
        {
   return 31 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((!((1 << which_alternative) & 0xfc)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], SImode))))))
        {
   return 34 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 124 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 125 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 126 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 127 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 128 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((!((1 << which_alternative) & 0xfc)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], SImode)))))
        {
   return 134 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0xfc)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], SImode)))))
        {
   return 150 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0xfc)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 162 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0xfc)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 165 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0xfc)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0xfc)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 168 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0xe0)) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 203 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0xe0)) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 204 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 5) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 205 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 5) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 206 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0xfc)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 209 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0xfc)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 210 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 5) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 211 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 5) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 212 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0xfc)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 213 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (which_alternative == 5))
        {
   return 214 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (which_alternative == 5))
        {
   return 215 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((1 << which_alternative) & 0xfc)))
        {
   return 216 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x1c)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 219 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((1 << which_alternative) & 0x1c)))
        {
   return 220 ;
        }
      else
        {
   return 273 ;
        }
    case 43:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))))
        {
   return 7;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 16 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_UV) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_pent_pair (insn) == PENT_PAIR_NP) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode)))))))
        {
   return 29 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode)))))))
        {
   return 30 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_STORE) && ((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode)))))))
        {
   return 31 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((!((1 << which_alternative) & 0xfc)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], SImode))))))
        {
   return 34 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && ((get_attr_memory (insn) == MEMORY_NONE) && (nonimmediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 124 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && ((get_attr_memory (insn) == MEMORY_NONE) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 125 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 126 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 127 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 128 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((!((1 << which_alternative) & 0xfc)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], SImode)))))
        {
   return 134 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0xfc)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], SImode)))))
        {
   return 150 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0xfc)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 162 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0xfc)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 163 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 165 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0xfc)) && (get_attr_memory (insn) == MEMORY_BOTH)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((!((1 << which_alternative) & 0xfc)) && (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return 168 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0xe0)) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 203 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0xe0)) && (memory_operand (recog_data.operand[1], DFmode))))
        {
   return 204 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 5) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 205 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 5) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 206 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((((1 << which_alternative) & 0xfc)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 209 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((((1 << which_alternative) & 0xfc)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 210 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 5) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 211 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 5) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 212 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0xfc)) && ((get_attr_memory (insn) == MEMORY_STORE) || (get_attr_memory (insn) == MEMORY_BOTH))))
        {
   return 213 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (which_alternative == 5))
        {
   return 214 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (which_alternative == 5))
        {
   return 215 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((1 << which_alternative) & 0xfc)))
        {
   return 216 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && ((((1 << which_alternative) & 0x1c)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 219 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (((1 << which_alternative) & 0x1c)))
        {
   return 220 ;
        }
      else
        {
   return 273 ;
        }
    case 401:
    case 397:
    case 396:
    case 393:
    case 347:
    case 341:
    case 321:
    case 319:
    case 299:
    case 297:
    case 244:
    case 108:
    case 103:
    case 81:
    case 80:
    case 62:
    case 42:
    case 41:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 16 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 113 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 115 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 123 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((get_attr_memory (insn) == MEMORY_STORE) || (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 135 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 166 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_STORE))
        {
   return 168 ;
        }
      else
        {
   return 273 ;
        }
    case 79:
    case 78:
    case 40:
    case 39:
      extract_insn_cached (insn);
      if (((ix86_tune) == (CPU_PENTIUM)))
        {
   return 9;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (memory_operand (recog_data.operand[0], VOIDmode))))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (memory_operand (recog_data.operand[0], VOIDmode)))
        {
   return 112 ;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 146 ;
        }
      else
        {
   return 273 ;
        }
    case 77:
    case 58:
    case 57:
    case 49:
    case 48:
    case 38:
    case 37:
    case 36:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (! (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 8;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 19 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (! (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 111 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 112 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 131 ;
        }
      else if (((ix86_tune) == (CPU_K6)))
        {
   return 135 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 145 ;
        }
      else
        {
   return 273 ;
        }
    case 35:
    case 32:
      extract_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (((enum machine_mode) (recog_data.operand[1])->mode) == SFmode)))
        {
   return 82 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (((enum machine_mode) (recog_data.operand[1])->mode) == SFmode)))
        {
   return 83 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 232 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 233 ;
        }
      else
        {
   return 273 ;
        }
    case 34:
    case 31:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && (which_alternative == 0)))
        {
   return 56 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && (which_alternative == 0)))
        {
   return 57 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_NONE) && ((which_alternative == 1) && (((enum machine_mode) (recog_data.operand[1])->mode) == SFmode))))
        {
   return 82 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && ((get_attr_memory (insn) == MEMORY_LOAD) && ((which_alternative == 1) && (((enum machine_mode) (recog_data.operand[1])->mode) == SFmode))))
        {
   return 83 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 197 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 0) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 198 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 0))
        {
   return 199 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (which_alternative == 0))
        {
   return 202 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 232 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && ((which_alternative == 1) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 233 ;
        }
      else
        {
   return 273 ;
        }
    case 33:
    case 30:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 56 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 57 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 197 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 198 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 199 ;
        }
      else
        {
   return 273 ;
        }
    case 25:
    case 23:
    case 21:
    case 20:
    case 19:
      if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 56 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 57 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 131 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 137 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 138 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 200 ;
        }
      else if ((((ix86_tune) == (CPU_K8))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 201 ;
        }
      else if ((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8))))
        {
   return 202 ;
        }
      else
        {
   return 273 ;
        }
    case 8:
    case 7:
    case 6:
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 21 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 25 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 122 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else
        {
   return 273 ;
        }
    case 285:
    case 284:
    case 283:
    case 17:
    case 16:
    case 15:
    case 14:
    case 13:
    case 12:
    case 11:
    case 10:
    case 9:
    case 5:
    case 4:
    case 3:
    case 2:
    case 1:
    case 0:
      if ((((ix86_tune) == (CPU_PENTIUM))) && ((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 20 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_LOAD)))
        {
   return 23 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((! (get_attr_imm_disp (insn) == IMM_DISP_TRUE)) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 24 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUM))) && ((get_attr_imm_disp (insn) == IMM_DISP_TRUE) && (get_attr_memory (insn) == MEMORY_NONE)))
        {
   return 27 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 109 ;
        }
      else if ((((ix86_tune) == (CPU_PENTIUMPRO))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 110 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 121 ;
        }
      else if ((((ix86_tune) == (CPU_K6))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 122 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_NONE))
        {
   return 160 ;
        }
      else if (((((ix86_tune) == (CPU_ATHLON))) || (((ix86_tune) == (CPU_K8)))) && (get_attr_memory (insn) == MEMORY_LOAD))
        {
   return 163 ;
        }
      else
        {
   return 273 ;
        }
    case -1:
      if (((enum rtx_code) ((((insn)->u.fld[5]).rtx1))->code) != ASM_INPUT
          && asm_noperands ((((insn)->u.fld[5]).rtx1)) < 0)
        _fatal_insn_not_found (insn, "gcc.c", 187842, "?");
    default:
      return 28 ;
    }
}
int
result_ready_cost (rtx insn )
{
  switch (((((insn)->u.fld[6]).rtint) >= 0 ? (((insn)->u.fld[6]).rtint) : recog_memoized_1 (insn)))
    {
    case -1:
      if (((enum rtx_code) ((((insn)->u.fld[5]).rtx1))->code) != ASM_INPUT
          && asm_noperands ((((insn)->u.fld[5]).rtx1)) < 0)
        _fatal_insn_not_found (insn, "gcc.c", 187857, "?");
    default:
      return 1;
    }
}
int
function_units_used (rtx insn )
{
  switch (((((insn)->u.fld[6]).rtint) >= 0 ? (((insn)->u.fld[6]).rtint) : recog_memoized_1 (insn)))
    {
    case -1:
      if (((enum rtx_code) ((((insn)->u.fld[5]).rtx1))->code) != ASM_INPUT
          && asm_noperands ((((insn)->u.fld[5]).rtx1)) < 0)
        _fatal_insn_not_found (insn, "gcc.c", 187872, "?");
    default:
      return -1 ;
    }
}
enum attr_athlon_decode
get_attr_athlon_decode (rtx insn )
{
  switch (((((insn)->u.fld[6]).rtint) >= 0 ? (((insn)->u.fld[6]).rtint) : recog_memoized_1 (insn)))
    {
    case 584:
    case 581:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return ATHLON_DECODE_DIRECT;
        }
      else
        {
   return ATHLON_DECODE_DIRECT;
        }
    case 250:
      extract_constrain_insn_cached (insn);
      if ((which_alternative != 0) || (((ix86_tune) == (CPU_ATHLON))))
        {
   return ATHLON_DECODE_VECTOR;
        }
      else
        {
   return ATHLON_DECODE_DIRECT;
        }
    case 249:
    case 248:
    case 247:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_ATHLON))) || ((which_alternative == 1) || ((which_alternative == 2) && (memory_operand (recog_data.operand[1], VOIDmode)))))
        {
   return ATHLON_DECODE_VECTOR;
        }
      else
        {
   return ATHLON_DECODE_DIRECT;
        }
    case 176:
    case 175:
    case 174:
      extract_constrain_insn_cached (insn);
      if ((which_alternative != 0) || ((which_alternative == 0) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return ATHLON_DECODE_VECTOR;
        }
      else
        {
   return ATHLON_DECODE_DIRECT;
        }
    case 172:
    case 169:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x3))
        {
   if (which_alternative == 1)
     {
       return ATHLON_DECODE_VECTOR;
     }
   else
     {
       return ATHLON_DECODE_DIRECT;
     }
        }
      else if (which_alternative == 2)
        {
   return ATHLON_DECODE_DOUBLE;
        }
      else
        {
   return ATHLON_DECODE_DIRECT;
        }
    case 166:
    case 163:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x3))
        {
   if (which_alternative == 1)
     {
       return ATHLON_DECODE_VECTOR;
     }
   else
     {
       return ATHLON_DECODE_DIRECT;
     }
        }
      else if (which_alternative == 2)
        {
   return ATHLON_DECODE_VECTOR;
        }
      else
        {
   return ATHLON_DECODE_DOUBLE;
        }
    case 136:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return ATHLON_DECODE_VECTOR;
        }
      else if (which_alternative == 1)
        {
   return ATHLON_DECODE_DOUBLE;
        }
      else
        {
   return ATHLON_DECODE_DIRECT;
        }
    case 135:
    case 134:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0xe))
        {
   return ATHLON_DECODE_VECTOR;
        }
      else
        {
   return ATHLON_DECODE_DIRECT;
        }
    case 171:
    case 168:
    case 165:
    case 162:
    case 145:
    case 142:
    case 133:
      extract_constrain_insn_cached (insn);
      if (which_alternative != 0)
        {
   return ATHLON_DECODE_VECTOR;
        }
      else
        {
   return ATHLON_DECODE_DIRECT;
        }
    case 131:
    case 130:
      extract_constrain_insn_cached (insn);
      if ((which_alternative == 1) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_STORE)))
        {
   return ATHLON_DECODE_VECTOR;
        }
      else
        {
   return ATHLON_DECODE_DIRECT;
        }
    case 128:
      extract_constrain_insn_cached (insn);
      if (((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_STORE)) && (which_alternative == 1))
        {
   return ATHLON_DECODE_VECTOR;
        }
      else
        {
   return ATHLON_DECODE_DIRECT;
        }
    case 112:
    case 111:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x7))
        {
   return ATHLON_DECODE_VECTOR;
        }
      else
        {
   return ATHLON_DECODE_DIRECT;
        }
    case 101:
    case 100:
      extract_constrain_insn_cached (insn);
      if ((!((1 << which_alternative) & 0x7)) || ((((1 << which_alternative) & 0x7)) && ((get_attr_memory (insn) == MEMORY_LOAD) || (get_attr_memory (insn) == MEMORY_STORE))))
        {
   return ATHLON_DECODE_VECTOR;
        }
      else
        {
   return ATHLON_DECODE_DIRECT;
        }
    case 96:
    case 95:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x18))
        {
   return ATHLON_DECODE_VECTOR;
        }
      else
        {
   return ATHLON_DECODE_DIRECT;
        }
    case 89:
    case 88:
      extract_constrain_insn_cached (insn);
      if ((which_alternative != 1) || ((which_alternative == 1) && (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return ATHLON_DECODE_VECTOR;
        }
      else
        {
   return ATHLON_DECODE_DIRECT;
        }
    case 84:
    case 83:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 4)
        {
   return ATHLON_DECODE_VECTOR;
        }
      else
        {
   return ATHLON_DECODE_DIRECT;
        }
    case 721:
    case 720:
    case 656:
    case 654:
    case 82:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x3))
        {
   return ATHLON_DECODE_VECTOR;
        }
      else
        {
   return ATHLON_DECODE_DIRECT;
        }
    case 76:
      extract_constrain_insn_cached (insn);
      if ((which_alternative != 0) || ((which_alternative == 0) && (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return ATHLON_DECODE_VECTOR;
        }
      else
        {
   return ATHLON_DECODE_DIRECT;
        }
    case 77:
    case 58:
    case 57:
    case 49:
    case 48:
    case 38:
    case 37:
    case 36:
      extract_insn_cached (insn);
      if (memory_operand (recog_data.operand[1], VOIDmode))
        {
   return ATHLON_DECODE_VECTOR;
        }
      else
        {
   return ATHLON_DECODE_DIRECT;
        }
    case 251:
    case 252:
    case 253:
      if (((ix86_tune) == (CPU_ATHLON)))
        {
   return ATHLON_DECODE_VECTOR;
        }
      else
        {
   return ATHLON_DECODE_DIRECT;
        }
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
      if (((ix86_tune) == (CPU_ATHLON)))
        {
   return ATHLON_DECODE_VECTOR;
        }
      else
        {
   return ATHLON_DECODE_DOUBLE;
        }
    case 150:
    case 151:
    case 155:
    case 156:
    case 787:
    case 788:
    case 789:
    case 790:
    case 920:
    case 921:
    case 922:
    case 923:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return ATHLON_DECODE_DOUBLE;
        }
      else
        {
   return ATHLON_DECODE_VECTOR;
        }
    case 170:
    case 173:
    case 924:
    case 925:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return ATHLON_DECODE_DOUBLE;
        }
      else
        {
   return ATHLON_DECODE_DIRECT;
        }
    case 139:
    case 164:
    case 167:
    case 785:
    case 786:
    case 926:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return ATHLON_DECODE_VECTOR;
        }
      else
        {
   return ATHLON_DECODE_DOUBLE;
        }
    case -1:
      if (((enum rtx_code) ((((insn)->u.fld[5]).rtx1))->code) != ASM_INPUT
          && asm_noperands ((((insn)->u.fld[5]).rtx1)) < 0)
        _fatal_insn_not_found (insn, "gcc.c", 188236, "?");
    case 1022:
    case 1021:
    case 853:
    case 718:
    case 717:
    case 716:
    case 715:
    case 714:
    case 713:
    case 712:
    case 711:
    case 710:
    case 709:
    case 708:
    case 697:
    case 696:
    case 686:
    case 685:
    case 684:
    case 683:
    case 682:
    case 681:
    case 680:
    case 679:
    case 678:
    case 677:
    case 676:
    case 675:
    case 674:
    case 673:
    case 668:
    case 667:
    case 665:
    case 664:
    case 662:
    case 661:
    case 659:
    case 658:
    case 657:
    case 655:
    case 647:
    case 646:
    case 645:
    case 644:
    case 643:
    case 642:
    case 641:
    case 640:
    case 639:
    case 638:
    case 637:
    case 636:
    case 635:
    case 634:
    case 633:
    case 632:
    case 631:
    case 630:
    case 629:
    case 628:
    case 627:
    case 626:
    case 625:
    case 624:
    case 623:
    case 622:
    case 621:
    case 620:
    case 619:
    case 618:
    case 617:
    case 616:
    case 615:
    case 614:
    case 613:
    case 612:
    case 611:
    case 610:
    case 609:
    case 608:
    case 607:
    case 606:
    case 605:
    case 604:
    case 603:
    case 602:
    case 601:
    case 600:
    case 599:
    case 598:
    case 597:
    case 596:
    case 595:
    case 594:
    case 593:
    case 592:
    case 591:
    case 550:
    case 549:
    case 548:
    case 547:
    case 546:
    case 545:
    case 544:
    case 543:
    case 542:
    case 541:
    case 540:
    case 539:
    case 538:
    case 537:
    case 536:
    case 535:
    case 534:
    case 533:
    case 532:
    case 531:
    case 530:
    case 529:
    case 528:
    case 526:
    case 525:
    case 524:
    case 523:
    case 522:
    case 521:
    case 520:
    case 519:
    case 518:
    case 517:
    case 516:
    case 515:
    case 508:
    case 507:
    case 506:
    case 505:
    case 504:
    case 503:
    case 502:
    case 501:
    case 500:
    case 499:
    case 450:
    case 449:
    case 423:
    case 422:
    case 405:
    case 404:
    case 385:
    case 384:
    case 383:
    case 382:
    case 381:
    case 380:
    case 379:
    case 378:
    case 377:
    case 370:
    case 369:
    case 368:
    case 367:
    case 366:
    case 365:
    case 364:
    case 363:
    case 362:
    case 351:
    case 287:
    case 286:
    case 277:
    case 276:
    case 275:
    case 274:
    case 273:
    case 272:
    case 271:
    case 270:
    case 269:
    case 268:
    case 267:
    case 266:
    case 265:
    case 264:
    case 225:
    case 177:
    case 160:
    case 127:
    case 126:
    case 117:
    case 99:
    case 98:
    case 94:
    case 93:
    case 79:
    case 78:
    case 75:
    case 40:
    case 39:
    case 28:
    case 27:
    case 26:
    case 24:
    case 22:
    case 18:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 47:
    case 87:
    case 161:
    case 406:
      return ATHLON_DECODE_VECTOR;
    default:
      return ATHLON_DECODE_DIRECT;
    }
}
enum attr_fp_int_src
get_attr_fp_int_src (rtx insn )
{
  switch (((((insn)->u.fld[6]).rtint) >= 0 ? (((insn)->u.fld[6]).rtint) : recog_memoized_1 (insn)))
    {
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 565:
    case 566:
    case 570:
    case 571:
    case 576:
    case 577:
      return FP_INT_SRC_TRUE;
    case -1:
      if (((enum rtx_code) ((((insn)->u.fld[5]).rtx1))->code) != ASM_INPUT
          && asm_noperands ((((insn)->u.fld[5]).rtx1)) < 0)
        _fatal_insn_not_found (insn, "gcc.c", 188491, "?");
    default:
      return FP_INT_SRC_FALSE;
    }
}
enum attr_imm_disp
get_attr_imm_disp (rtx insn )
{
  switch (((((insn)->u.fld[6]).rtint) >= 0 ? (((insn)->u.fld[6]).rtint) : recog_memoized_1 (insn)))
    {
    case 672:
      extract_constrain_insn_cached (insn);
      if ((which_alternative == 0) && ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[2], VOIDmode))))
        {
   return IMM_DISP_TRUE;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 671:
      extract_constrain_insn_cached (insn);
      if ((((which_alternative == 1) && (const0_operand (recog_data.operand[2], DImode))) && ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[1], VOIDmode)))) || ((which_alternative == 0) && ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[2], VOIDmode)))))
        {
   return IMM_DISP_TRUE;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 670:
      extract_constrain_insn_cached (insn);
      if ((((which_alternative == 1) && (const0_operand (recog_data.operand[2], SImode))) && ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[1], VOIDmode)))) || ((which_alternative == 0) && ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[2], VOIDmode)))))
        {
   return IMM_DISP_TRUE;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 655:
      extract_constrain_insn_cached (insn);
      if (!((1 << which_alternative) & 0x3))
        {
   return IMM_DISP_UNKNOWN;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 426:
    case 425:
    case 417:
      extract_constrain_insn_cached (insn);
      if ((which_alternative == 1) && ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[2], VOIDmode))))
        {
   return IMM_DISP_TRUE;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 410:
      extract_constrain_insn_cached (insn);
      if ((((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode))) || ((! (((x86_double_with_add & (1 << ix86_tune))) != (0))) || (! (const1_operand (recog_data.operand[2], VOIDmode))))) && ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[2], VOIDmode))))
        {
   return IMM_DISP_TRUE;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 408:
      extract_constrain_insn_cached (insn);
      if (((which_alternative == 0) && (((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode))) || ((! (((x86_double_with_add & (1 << ix86_tune))) != (0))) || (! (const1_operand (recog_data.operand[2], VOIDmode)))))) && ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[2], VOIDmode))))
        {
   return IMM_DISP_TRUE;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 416:
    case 415:
    case 414:
    case 413:
    case 412:
    case 411:
    case 409:
    case 407:
    case 403:
    case 402:
      extract_insn_cached (insn);
      if (((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_ISHIFT)) && ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[2], VOIDmode))))
        {
   return IMM_DISP_TRUE;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 294:
    case 290:
      extract_constrain_insn_cached (insn);
      if ((((1 << which_alternative) & 0x3)) && ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[2], VOIDmode))))
        {
   return IMM_DISP_TRUE;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 288:
      extract_constrain_insn_cached (insn);
      if ((((1 << which_alternative) & 0x7)) && ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[2], VOIDmode))))
        {
   return IMM_DISP_TRUE;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 217:
      extract_insn_cached (insn);
      if ((! (incdec_operand (recog_data.operand[2], QImode))) && ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return IMM_DISP_TRUE;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 223:
    case 222:
    case 221:
    case 219:
    case 218:
    case 216:
      extract_insn_cached (insn);
      if ((! (incdec_operand (recog_data.operand[2], QImode))) && ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[2], VOIDmode))))
        {
   return IMM_DISP_TRUE;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 215:
      extract_constrain_insn_cached (insn);
      if (((which_alternative != 3) && (! (incdec_operand (recog_data.operand[2], QImode)))) && ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[2], VOIDmode))))
        {
   return IMM_DISP_TRUE;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 220:
    case 214:
    case 213:
    case 212:
    case 211:
    case 210:
      extract_insn_cached (insn);
      if ((! (incdec_operand (recog_data.operand[2], HImode))) && ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[2], VOIDmode))))
        {
   return IMM_DISP_TRUE;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 209:
      extract_constrain_insn_cached (insn);
      if (((which_alternative != 2) && (! (incdec_operand (recog_data.operand[2], HImode)))) && ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[2], VOIDmode))))
        {
   return IMM_DISP_TRUE;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 208:
    case 207:
    case 206:
    case 205:
    case 204:
    case 203:
      extract_insn_cached (insn);
      if ((! (incdec_operand (recog_data.operand[2], SImode))) && ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[2], VOIDmode))))
        {
   return IMM_DISP_TRUE;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 200:
    case 199:
    case 198:
    case 197:
      extract_insn_cached (insn);
      if ((! (incdec_operand (recog_data.operand[2], DImode))) && ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[2], VOIDmode))))
        {
   return IMM_DISP_TRUE;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 202:
    case 201:
    case 196:
      extract_insn_cached (insn);
      if ((get_attr_type (insn) == TYPE_ALU) && ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[2], VOIDmode))))
        {
   return IMM_DISP_TRUE;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 491:
    case 489:
    case 488:
    case 487:
    case 486:
    case 485:
    case 484:
    case 483:
    case 482:
    case 481:
    case 480:
    case 478:
    case 476:
    case 475:
    case 474:
    case 473:
    case 472:
    case 471:
    case 470:
    case 469:
    case 468:
    case 467:
    case 465:
    case 463:
    case 462:
    case 461:
    case 460:
    case 459:
    case 458:
    case 457:
    case 456:
    case 455:
    case 454:
    case 453:
    case 452:
    case 451:
    case 448:
    case 447:
    case 446:
    case 445:
    case 444:
    case 443:
    case 441:
    case 439:
    case 438:
    case 437:
    case 436:
    case 435:
    case 434:
    case 433:
    case 432:
    case 431:
    case 430:
    case 429:
    case 428:
    case 427:
    case 424:
    case 421:
    case 420:
    case 419:
    case 418:
    case 406:
    case 350:
    case 349:
    case 348:
    case 346:
    case 345:
    case 344:
    case 343:
    case 342:
    case 340:
    case 339:
    case 338:
    case 337:
    case 336:
    case 335:
    case 334:
    case 333:
    case 332:
    case 331:
    case 330:
    case 329:
    case 328:
    case 327:
    case 326:
    case 325:
    case 324:
    case 323:
    case 322:
    case 320:
    case 318:
    case 317:
    case 316:
    case 315:
    case 314:
    case 313:
    case 312:
    case 311:
    case 310:
    case 309:
    case 308:
    case 307:
    case 306:
    case 305:
    case 304:
    case 303:
    case 302:
    case 301:
    case 300:
    case 298:
    case 296:
    case 295:
    case 293:
    case 292:
    case 291:
    case 289:
    case 277:
    case 276:
    case 274:
    case 271:
    case 268:
    case 265:
    case 264:
    case 263:
    case 262:
    case 261:
    case 260:
    case 259:
    case 258:
    case 257:
    case 256:
    case 255:
    case 254:
    case 253:
    case 252:
    case 251:
    case 250:
    case 249:
    case 248:
    case 247:
    case 246:
    case 245:
    case 243:
    case 242:
    case 241:
    case 240:
    case 239:
    case 238:
    case 237:
    case 236:
    case 235:
    case 234:
    case 233:
    case 232:
    case 231:
    case 230:
    case 229:
    case 228:
    case 227:
    case 226:
    case 224:
    case 185:
    case 184:
    case 183:
    case 182:
    case 181:
    case 180:
    case 179:
    case 178:
      extract_insn_cached (insn);
      if ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[2], VOIDmode)))
        {
   return IMM_DISP_TRUE;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 172:
    case 169:
    case 166:
    case 163:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 1)
        {
   return IMM_DISP_UNKNOWN;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 135:
    case 134:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0xe))
        {
   return IMM_DISP_UNKNOWN;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 112:
    case 111:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x7))
        {
   return IMM_DISP_UNKNOWN;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 114:
    case 113:
    case 109:
    case 106:
      extract_constrain_insn_cached (insn);
      if ((which_alternative == 1) && ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return IMM_DISP_TRUE;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 101:
    case 100:
      extract_constrain_insn_cached (insn);
      if (!((1 << which_alternative) & 0x7))
        {
   return IMM_DISP_UNKNOWN;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 96:
    case 95:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x18))
        {
   return IMM_DISP_UNKNOWN;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 91:
    case 90:
      extract_constrain_insn_cached (insn);
      if ((((1 << which_alternative) & 0x18)) && ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return IMM_DISP_TRUE;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 89:
    case 88:
      extract_constrain_insn_cached (insn);
      if (which_alternative != 1)
        {
   return IMM_DISP_UNKNOWN;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 84:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 4)
        {
   return IMM_DISP_UNKNOWN;
        }
      else if (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return IMM_DISP_TRUE;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 83:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 4)
        {
   return IMM_DISP_UNKNOWN;
        }
      else if (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return IMM_DISP_TRUE;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 721:
    case 720:
    case 82:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x3))
        {
   return IMM_DISP_UNKNOWN;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 176:
    case 175:
    case 174:
    case 171:
    case 168:
    case 165:
    case 162:
    case 145:
    case 142:
    case 133:
    case 76:
      extract_constrain_insn_cached (insn);
      if (which_alternative != 0)
        {
   return IMM_DISP_UNKNOWN;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 71:
      extract_constrain_insn_cached (insn);
      if (((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0)))) && ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return IMM_DISP_TRUE;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 59:
      extract_constrain_insn_cached (insn);
      if ((((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))) && ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return IMM_DISP_TRUE;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 70:
    case 66:
    case 65:
    case 50:
      extract_insn_cached (insn);
      if ((get_attr_type (insn) == TYPE_IMOV) && ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return IMM_DISP_TRUE;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 44:
      extract_constrain_insn_cached (insn);
      if (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return IMM_DISP_TRUE;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 43:
      extract_constrain_insn_cached (insn);
      if (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return IMM_DISP_TRUE;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case 492:
    case 490:
    case 479:
    case 477:
    case 466:
    case 464:
    case 442:
    case 440:
    case 401:
    case 399:
    case 397:
    case 396:
    case 393:
    case 347:
    case 341:
    case 321:
    case 319:
    case 299:
    case 297:
    case 285:
    case 284:
    case 283:
    case 282:
    case 281:
    case 280:
    case 279:
    case 278:
    case 244:
    case 108:
    case 105:
    case 103:
    case 87:
    case 86:
    case 85:
    case 81:
    case 80:
    case 74:
    case 73:
    case 72:
    case 68:
    case 67:
    case 62:
    case 61:
    case 60:
    case 56:
    case 55:
    case 54:
    case 53:
    case 52:
    case 51:
    case 47:
    case 46:
    case 45:
    case 42:
    case 41:
    case 17:
    case 16:
    case 15:
    case 14:
    case 13:
    case 12:
    case 11:
    case 10:
    case 9:
    case 8:
    case 7:
    case 6:
    case 5:
    case 4:
    case 3:
    case 2:
    case 1:
    case 0:
      extract_insn_cached (insn);
      if ((memory_displacement_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[1], VOIDmode)))
        {
   return IMM_DISP_TRUE;
        }
      else
        {
   return IMM_DISP_FALSE;
        }
    case -1:
      if (((enum rtx_code) ((((insn)->u.fld[5]).rtx1))->code) != ASM_INPUT
          && asm_noperands ((((insn)->u.fld[5]).rtx1)) < 0)
        _fatal_insn_not_found (insn, "gcc.c", 189220, "?");
    case 1022:
    case 1021:
    case 853:
    case 718:
    case 717:
    case 716:
    case 715:
    case 714:
    case 713:
    case 712:
    case 711:
    case 710:
    case 709:
    case 708:
    case 697:
    case 696:
    case 686:
    case 685:
    case 684:
    case 683:
    case 682:
    case 681:
    case 680:
    case 679:
    case 678:
    case 677:
    case 676:
    case 675:
    case 674:
    case 673:
    case 668:
    case 667:
    case 665:
    case 664:
    case 662:
    case 661:
    case 659:
    case 658:
    case 550:
    case 549:
    case 548:
    case 547:
    case 546:
    case 545:
    case 544:
    case 543:
    case 542:
    case 541:
    case 540:
    case 539:
    case 538:
    case 537:
    case 536:
    case 535:
    case 532:
    case 531:
    case 530:
    case 529:
    case 528:
    case 526:
    case 525:
    case 524:
    case 523:
    case 508:
    case 507:
    case 506:
    case 505:
    case 504:
    case 503:
    case 502:
    case 501:
    case 500:
    case 499:
    case 450:
    case 449:
    case 423:
    case 422:
    case 405:
    case 404:
    case 385:
    case 384:
    case 383:
    case 382:
    case 381:
    case 380:
    case 379:
    case 378:
    case 377:
    case 370:
    case 369:
    case 368:
    case 367:
    case 366:
    case 365:
    case 364:
    case 363:
    case 362:
    case 351:
    case 287:
    case 286:
    case 275:
    case 273:
    case 272:
    case 270:
    case 269:
    case 267:
    case 266:
    case 225:
    case 177:
    case 161:
    case 160:
    case 127:
    case 126:
    case 117:
    case 99:
    case 98:
    case 94:
    case 93:
    case 75:
    case 29:
    case 28:
    case 27:
    case 26:
    case 24:
    case 22:
    case 18:
      return IMM_DISP_UNKNOWN;
    default:
      return IMM_DISP_FALSE;
    }
}
int
get_attr_length_address (rtx insn )
{
  switch (((((insn)->u.fld[6]).rtint) >= 0 ? (((insn)->u.fld[6]).rtint) : recog_memoized_1 (insn)))
    {
    case 695:
    case 694:
    case 693:
    case 692:
    case 691:
    case 690:
    case 689:
    case 688:
    case 687:
      extract_constrain_insn_cached (insn);
      if (constant_call_address_operand (recog_data.operand[1], VOIDmode))
        {
   return 0;
        }
      else
        {
   return ix86_attr_length_address_default (insn);
        }
    case 655:
      extract_constrain_insn_cached (insn);
      if (!((1 << which_alternative) & 0x3))
        {
   return 0;
        }
      else
        {
   return ix86_attr_length_address_default (insn);
        }
    case 522:
    case 521:
    case 520:
    case 519:
    case 518:
    case 517:
    case 516:
    case 515:
      extract_constrain_insn_cached (insn);
      if (constant_call_address_operand (recog_data.operand[0], VOIDmode))
        {
   return 0;
        }
      else
        {
   return ix86_attr_length_address_default (insn);
        }
    case 172:
    case 169:
    case 166:
    case 163:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 1)
        {
   return 0;
        }
      else
        {
   return ix86_attr_length_address_default (insn);
        }
    case 135:
    case 134:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0xe))
        {
   return 0;
        }
      else
        {
   return ix86_attr_length_address_default (insn);
        }
    case 112:
    case 111:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x7))
        {
   return 0;
        }
      else
        {
   return ix86_attr_length_address_default (insn);
        }
    case 101:
    case 100:
      extract_constrain_insn_cached (insn);
      if (!((1 << which_alternative) & 0x7))
        {
   return 0;
        }
      else
        {
   return ix86_attr_length_address_default (insn);
        }
    case 96:
    case 95:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x18))
        {
   return 0;
        }
      else
        {
   return ix86_attr_length_address_default (insn);
        }
    case 89:
    case 88:
      extract_constrain_insn_cached (insn);
      if (which_alternative != 1)
        {
   return 0;
        }
      else
        {
   return ix86_attr_length_address_default (insn);
        }
    case 84:
    case 83:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 4)
        {
   return 0;
        }
      else
        {
   return ix86_attr_length_address_default (insn);
        }
    case 721:
    case 720:
    case 82:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x3))
        {
   return 0;
        }
      else
        {
   return ix86_attr_length_address_default (insn);
        }
    case 176:
    case 175:
    case 174:
    case 171:
    case 168:
    case 165:
    case 162:
    case 145:
    case 142:
    case 133:
    case 76:
      extract_constrain_insn_cached (insn);
      if (which_alternative != 0)
        {
   return 0;
        }
      else
        {
   return ix86_attr_length_address_default (insn);
        }
    case 45:
    case 46:
    case 51:
    case 52:
    case 67:
    case 68:
    case 85:
    case 86:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return 8;
        }
      else
        {
   return 0;
        }
    case -1:
      if (((enum rtx_code) ((((insn)->u.fld[5]).rtx1))->code) != ASM_INPUT
          && asm_noperands ((((insn)->u.fld[5]).rtx1)) < 0)
        _fatal_insn_not_found (insn, "gcc.c", 189549, "?");
    case 1022:
    case 1021:
    case 718:
    case 717:
    case 716:
    case 715:
    case 714:
    case 713:
    case 712:
    case 711:
    case 710:
    case 709:
    case 708:
    case 697:
    case 696:
    case 686:
    case 685:
    case 684:
    case 683:
    case 682:
    case 681:
    case 680:
    case 679:
    case 678:
    case 677:
    case 676:
    case 675:
    case 674:
    case 673:
    case 668:
    case 667:
    case 665:
    case 664:
    case 662:
    case 661:
    case 659:
    case 658:
    case 647:
    case 646:
    case 645:
    case 644:
    case 643:
    case 642:
    case 641:
    case 640:
    case 639:
    case 638:
    case 637:
    case 636:
    case 635:
    case 634:
    case 633:
    case 632:
    case 631:
    case 630:
    case 629:
    case 628:
    case 627:
    case 626:
    case 625:
    case 624:
    case 623:
    case 622:
    case 621:
    case 620:
    case 619:
    case 618:
    case 617:
    case 550:
    case 549:
    case 548:
    case 547:
    case 546:
    case 545:
    case 544:
    case 543:
    case 542:
    case 541:
    case 540:
    case 539:
    case 538:
    case 537:
    case 536:
    case 535:
    case 532:
    case 531:
    case 530:
    case 529:
    case 528:
    case 526:
    case 525:
    case 524:
    case 523:
    case 508:
    case 507:
    case 506:
    case 505:
    case 504:
    case 503:
    case 502:
    case 501:
    case 500:
    case 499:
    case 450:
    case 449:
    case 423:
    case 422:
    case 405:
    case 404:
    case 385:
    case 384:
    case 383:
    case 382:
    case 381:
    case 380:
    case 379:
    case 378:
    case 377:
    case 370:
    case 369:
    case 368:
    case 367:
    case 366:
    case 365:
    case 364:
    case 363:
    case 362:
    case 351:
    case 287:
    case 286:
    case 275:
    case 273:
    case 272:
    case 270:
    case 269:
    case 267:
    case 266:
    case 225:
    case 177:
    case 161:
    case 160:
    case 127:
    case 126:
    case 117:
    case 102:
    case 99:
    case 98:
    case 97:
    case 94:
    case 93:
    case 92:
    case 75:
    case 29:
    case 28:
    case 27:
    case 26:
    case 24:
    case 22:
    case 18:
    case 853:
      return 0;
    default:
      extract_constrain_insn_cached (insn);
      return ix86_attr_length_address_default (insn);
    }
}
int
get_attr_length_immediate (rtx insn )
{
  switch (((((insn)->u.fld[6]).rtint) >= 0 ? (((insn)->u.fld[6]).rtint) : recog_memoized_1 (insn)))
    {
    case 695:
    case 694:
    case 693:
    case 692:
    case 691:
    case 690:
    case 689:
    case 688:
    case 687:
      extract_insn_cached (insn);
      if (constant_call_address_operand (recog_data.operand[1], VOIDmode))
        {
   return 4;
        }
      else
        {
   return 0;
        }
    case 671:
      extract_constrain_insn_cached (insn);
      if ((which_alternative == 1) && (! (const0_operand (recog_data.operand[2], DImode))))
        {
   return 0;
        }
      else if (which_alternative == 0)
        {
   return ix86_attr_length_immediate_default(insn,1);
        }
      else
        {
   return ix86_attr_length_immediate_default(insn,0);
        }
    case 670:
      extract_constrain_insn_cached (insn);
      if ((which_alternative == 1) && (! (const0_operand (recog_data.operand[2], SImode))))
        {
   return 0;
        }
      else if (which_alternative == 0)
        {
   return ix86_attr_length_immediate_default(insn,1);
        }
      else
        {
   return ix86_attr_length_immediate_default(insn,0);
        }
    case 569:
    case 564:
      extract_constrain_insn_cached (insn);
      if (get_attr_unit (insn) == UNIT_SSE)
        {
   return 0;
        }
      else
        {
   return
        fancy_abort ("gcc.c", 189783, "?"),1;
        }
    case 568:
    case 563:
      extract_constrain_insn_cached (insn);
      if ((get_attr_unit (insn) == UNIT_I387) || (get_attr_unit (insn) == UNIT_SSE))
        {
   return 0;
        }
      else
        {
   return
        fancy_abort ("gcc.c", 189796, "?"),1;
        }
    case 580:
    case 579:
    case 578:
    case 577:
    case 576:
    case 575:
    case 574:
    case 573:
    case 572:
    case 571:
    case 570:
    case 567:
    case 566:
    case 565:
    case 562:
      extract_constrain_insn_cached (insn);
      if (get_attr_unit (insn) == UNIT_I387)
        {
   return 0;
        }
      else
        {
   return
        fancy_abort ("gcc.c", 189822, "?"),1;
        }
    case 559:
    case 556:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x3))
        {
   return 0;
        }
      else
        {
   return
        fancy_abort ("gcc.c", 189835, "?"),1;
        }
    case 522:
    case 521:
    case 520:
    case 519:
    case 518:
    case 517:
    case 516:
    case 515:
      extract_insn_cached (insn);
      if (constant_call_address_operand (recog_data.operand[0], VOIDmode))
        {
   return 4;
        }
      else
        {
   return 0;
        }
    case 426:
    case 425:
    case 417:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return 0;
        }
      else
        {
   return ix86_attr_length_immediate_default(insn,1);
        }
    case 414:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 2)
        {
   return 0;
        }
      else if ((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_ISHIFT))
        {
   return ix86_attr_length_immediate_default(insn,1);
        }
      else
        {
   return
        fancy_abort ("gcc.c", 189882, "?"),1;
        }
    case 410:
      extract_constrain_insn_cached (insn);
      if (((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode))) || ((! (((x86_double_with_add & (1 << ix86_tune))) != (0))) || (! (const1_operand (recog_data.operand[2], VOIDmode)))))
        {
   return ix86_attr_length_immediate_default(insn,1);
        }
      else
        {
   return
        fancy_abort ("gcc.c", 189894, "?"),1;
        }
    case 408:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 1)
        {
   return 0;
        }
      else if ((which_alternative == 0) && (((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode))) || ((! (((x86_double_with_add & (1 << ix86_tune))) != (0))) || (! (const1_operand (recog_data.operand[2], VOIDmode))))))
        {
   return ix86_attr_length_immediate_default(insn,1);
        }
      else
        {
   return
        fancy_abort ("gcc.c", 189910, "?"),1;
        }
    case 416:
    case 415:
    case 413:
    case 412:
    case 409:
    case 403:
      extract_constrain_insn_cached (insn);
      if ((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_ISHIFT))
        {
   return ix86_attr_length_immediate_default(insn,1);
        }
      else
        {
   return
        fancy_abort ("gcc.c", 189927, "?"),1;
        }
    case 411:
    case 407:
    case 402:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 1)
        {
   return 0;
        }
      else if ((get_attr_type (insn) == TYPE_ALU) || (get_attr_type (insn) == TYPE_ISHIFT))
        {
   return ix86_attr_length_immediate_default(insn,1);
        }
      else
        {
   return
        fancy_abort ("gcc.c", 189945, "?"),1;
        }
    case 294:
    case 290:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x3))
        {
   return ix86_attr_length_immediate_default(insn,1);
        }
      else
        {
   return 0;
        }
    case 288:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x7))
        {
   return ix86_attr_length_immediate_default(insn,1);
        }
      else
        {
   return 0;
        }
    case 223:
    case 222:
    case 221:
    case 219:
    case 218:
    case 217:
    case 216:
      extract_constrain_insn_cached (insn);
      if (incdec_operand (recog_data.operand[2], QImode))
        {
   return 0;
        }
      else
        {
   return ix86_attr_length_immediate_default(insn,1);
        }
    case 215:
      extract_constrain_insn_cached (insn);
      if (((which_alternative != 3) && (incdec_operand (recog_data.operand[2], QImode))) || (which_alternative == 3))
        {
   return 0;
        }
      else
        {
   return ix86_attr_length_immediate_default(insn,1);
        }
    case 220:
    case 214:
    case 213:
    case 212:
    case 211:
    case 210:
      extract_constrain_insn_cached (insn);
      if (incdec_operand (recog_data.operand[2], HImode))
        {
   return 0;
        }
      else
        {
   return ix86_attr_length_immediate_default(insn,1);
        }
    case 209:
      extract_constrain_insn_cached (insn);
      if (((which_alternative != 2) && (incdec_operand (recog_data.operand[2], HImode))) || (which_alternative == 2))
        {
   return 0;
        }
      else
        {
   return ix86_attr_length_immediate_default(insn,1);
        }
    case 208:
    case 207:
    case 206:
    case 205:
    case 204:
    case 203:
      extract_constrain_insn_cached (insn);
      if (incdec_operand (recog_data.operand[2], SImode))
        {
   return 0;
        }
      else
        {
   return ix86_attr_length_immediate_default(insn,1);
        }
    case 202:
      extract_constrain_insn_cached (insn);
      if ((get_attr_type (insn) == TYPE_INCDEC) || ((which_alternative != 0) || (pic_symbolic_operand (recog_data.operand[2], SImode))))
        {
   return 0;
        }
      else if (get_attr_type (insn) == TYPE_ALU)
        {
   return ix86_attr_length_immediate_default(insn,1);
        }
      else
        {
   return
        fancy_abort ("gcc.c", 190055, "?"),1;
        }
    case 201:
      extract_constrain_insn_cached (insn);
      if ((get_attr_type (insn) == TYPE_INCDEC) || ((which_alternative == 2) || (pic_symbolic_operand (recog_data.operand[2], SImode))))
        {
   return 0;
        }
      else if (get_attr_type (insn) == TYPE_ALU)
        {
   return ix86_attr_length_immediate_default(insn,1);
        }
      else
        {
   return
        fancy_abort ("gcc.c", 190071, "?"),1;
        }
    case 200:
    case 199:
    case 198:
    case 197:
      extract_constrain_insn_cached (insn);
      if (incdec_operand (recog_data.operand[2], DImode))
        {
   return 0;
        }
      else
        {
   return ix86_attr_length_immediate_default(insn,1);
        }
    case 196:
      extract_constrain_insn_cached (insn);
      if ((get_attr_type (insn) == TYPE_INCDEC) || ((which_alternative == 2) || (pic_symbolic_operand (recog_data.operand[2], DImode))))
        {
   return 0;
        }
      else if (get_attr_type (insn) == TYPE_ALU)
        {
   return ix86_attr_length_immediate_default(insn,1);
        }
      else
        {
   return
        fancy_abort ("gcc.c", 190101, "?"),1;
        }
    case 114:
    case 113:
      extract_constrain_insn_cached (insn);
      if (!((1 << which_alternative) & 0x3))
        {
   return 0;
        }
      else if (which_alternative == 0)
        {
   return ix86_attr_length_immediate_default(insn,1);
        }
      else
        {
   return ix86_attr_length_immediate_default(insn,0);
        }
    case 91:
    case 90:
      extract_constrain_insn_cached (insn);
      if (!((1 << which_alternative) & 0x18))
        {
   return 0;
        }
      else
        {
   return ix86_attr_length_immediate_default(insn,0);
        }
    case 89:
    case 88:
      extract_constrain_insn_cached (insn);
      if (which_alternative != 1)
        {
   return 0;
        }
      else
        {
   return ix86_attr_length_immediate_default(insn,1);
        }
    case 84:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   if (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], DImode)))
     {
       return 0;
     }
   else
     {
       return ix86_attr_length_immediate_default(insn,0);
     }
        }
      else if (which_alternative == 1)
        {
   return 4;
        }
      else if (which_alternative == 2)
        {
   return 8;
        }
      else
        {
   if (((!((1 << which_alternative) & 0x7f0)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], DImode)))) || (((1 << which_alternative) & 0x7f0)))
     {
       return 0;
     }
   else
     {
       return ix86_attr_length_immediate_default(insn,0);
     }
        }
    case 83:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   if (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], DImode)))
     {
       return 0;
     }
   else
     {
       return ix86_attr_length_immediate_default(insn,0);
     }
        }
      else if (which_alternative == 1)
        {
   return 4;
        }
      else if (which_alternative == 2)
        {
   return 8;
        }
      else
        {
   if (((!((1 << which_alternative) & 0x7f0)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], DImode)))) || (((1 << which_alternative) & 0x7f0)))
     {
       return 0;
     }
   else
     {
       return ix86_attr_length_immediate_default(insn,0);
     }
        }
    case 672:
    case 76:
      extract_constrain_insn_cached (insn);
      if (which_alternative != 0)
        {
   return 0;
        }
      else
        {
   return ix86_attr_length_immediate_default(insn,1);
        }
    case 71:
      extract_constrain_insn_cached (insn);
      if ((! (q_regs_operand (recog_data.operand[0], QImode))) || (((x86_movx & (1 << ix86_tune))) != (0)))
        {
   return ix86_attr_length_immediate_default(insn,1);
        }
      else
        {
   return ix86_attr_length_immediate_default(insn,0);
        }
    case 70:
    case 66:
    case 65:
      extract_constrain_insn_cached (insn);
      if (get_attr_type (insn) == TYPE_IMOVX)
        {
   return ix86_attr_length_immediate_default(insn,1);
        }
      else if (get_attr_type (insn) == TYPE_IMOV)
        {
   return ix86_attr_length_immediate_default(insn,0);
        }
      else
        {
   return
        fancy_abort ("gcc.c", 190248, "?"),1;
        }
    case 59:
      extract_constrain_insn_cached (insn);
      if (((! ((optimize_size) != (0))) && ((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0)))))) && ((((1 << which_alternative) & 0x28)) || ((((x86_movx & (1 << ix86_tune))) != (0)) && (which_alternative == 2))))
        {
   return ix86_attr_length_immediate_default(insn,1);
        }
      else if (((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2))))))
        {
   return ix86_attr_length_immediate_default(insn,0);
        }
      else
        {
   return
        fancy_abort ("gcc.c", 190264, "?"),1;
        }
    case 50:
      extract_constrain_insn_cached (insn);
      if (((! ((optimize_size) != (0))) && (((which_alternative != 0) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_himode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x6)) || (! (aligned_operand (recog_data.operand[1], HImode)))))) && ((((x86_movx & (1 << ix86_tune))) != (0)) && (((1 << which_alternative) & 0x5))))
        {
   return ix86_attr_length_immediate_default(insn,1);
        }
      else if (get_attr_type (insn) == TYPE_IMOV)
        {
   return ix86_attr_length_immediate_default(insn,0);
        }
      else
        {
   return
        fancy_abort ("gcc.c", 190280, "?"),1;
        }
    case 553:
    case 551:
    case 285:
    case 284:
    case 283:
    case 281:
    case 280:
    case 279:
    case 278:
    case 87:
    case 74:
    case 73:
    case 72:
    case 61:
    case 60:
    case 55:
    case 54:
    case 53:
    case 47:
      extract_constrain_insn_cached (insn);
      return ix86_attr_length_immediate_default(insn,0);
    case 85:
    case 67:
    case 51:
    case 45:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return 0;
        }
      else
        {
   return ix86_attr_length_immediate_default(insn,0);
        }
    case 44:
      extract_constrain_insn_cached (insn);
      if (((!((1 << which_alternative) & 0xfc)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], SImode)))) || (((1 << which_alternative) & 0xfc)))
        {
   return 0;
        }
      else
        {
   return ix86_attr_length_immediate_default(insn,0);
        }
    case 43:
      extract_constrain_insn_cached (insn);
      if (((!((1 << which_alternative) & 0xfc)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], SImode)))) || (((1 << which_alternative) & 0xfc)))
        {
   return 0;
        }
      else
        {
   return ix86_attr_length_immediate_default(insn,0);
        }
    case 554:
    case 552:
    case 492:
    case 491:
    case 490:
    case 489:
    case 488:
    case 487:
    case 486:
    case 485:
    case 484:
    case 483:
    case 482:
    case 481:
    case 480:
    case 479:
    case 478:
    case 477:
    case 476:
    case 475:
    case 474:
    case 473:
    case 472:
    case 471:
    case 470:
    case 469:
    case 468:
    case 467:
    case 466:
    case 465:
    case 464:
    case 463:
    case 462:
    case 461:
    case 460:
    case 459:
    case 458:
    case 457:
    case 456:
    case 455:
    case 454:
    case 453:
    case 452:
    case 451:
    case 448:
    case 447:
    case 446:
    case 445:
    case 444:
    case 443:
    case 442:
    case 441:
    case 440:
    case 439:
    case 438:
    case 437:
    case 436:
    case 435:
    case 434:
    case 433:
    case 432:
    case 431:
    case 430:
    case 429:
    case 428:
    case 427:
    case 424:
    case 421:
    case 420:
    case 419:
    case 418:
    case 406:
    case 401:
    case 400:
    case 399:
    case 398:
    case 397:
    case 396:
    case 395:
    case 394:
    case 393:
    case 392:
    case 361:
    case 360:
    case 359:
    case 358:
    case 357:
    case 356:
    case 355:
    case 354:
    case 353:
    case 352:
    case 350:
    case 349:
    case 348:
    case 347:
    case 346:
    case 341:
    case 340:
    case 339:
    case 338:
    case 337:
    case 336:
    case 335:
    case 334:
    case 333:
    case 332:
    case 331:
    case 330:
    case 329:
    case 328:
    case 327:
    case 322:
    case 321:
    case 320:
    case 319:
    case 318:
    case 317:
    case 316:
    case 315:
    case 314:
    case 313:
    case 312:
    case 311:
    case 310:
    case 309:
    case 308:
    case 307:
    case 306:
    case 305:
    case 299:
    case 298:
    case 297:
    case 296:
    case 295:
    case 293:
    case 292:
    case 291:
    case 289:
    case 263:
    case 262:
    case 261:
    case 250:
    case 249:
    case 248:
    case 247:
    case 246:
    case 245:
    case 244:
    case 243:
    case 242:
    case 241:
    case 240:
    case 239:
    case 238:
    case 237:
    case 236:
    case 235:
    case 234:
    case 233:
    case 232:
    case 231:
    case 230:
    case 229:
    case 228:
    case 227:
    case 226:
    case 224:
    case 185:
    case 184:
    case 183:
    case 182:
    case 181:
    case 180:
    case 179:
    case 178:
    case 125:
    case 124:
    case 123:
    case 122:
    case 121:
    case 120:
    case 119:
    case 118:
    case 116:
    case 115:
    case 110:
    case 109:
    case 108:
    case 107:
    case 106:
    case 105:
    case 104:
    case 103:
    case 79:
    case 78:
    case 77:
    case 69:
    case 64:
    case 63:
    case 58:
    case 57:
    case 49:
    case 48:
    case 40:
    case 39:
    case 38:
    case 37:
    case 36:
    case 17:
    case 16:
    case 15:
    case 13:
    case 12:
    case 11:
    case 10:
    case 8:
    case 7:
    case 5:
    case 4:
    case 2:
    case 1:
      extract_constrain_insn_cached (insn);
      return ix86_attr_length_immediate_default(insn,1);
    case 0:
    case 3:
    case 6:
    case 9:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 514:
    case 509:
    case 498:
    case 497:
    case 42:
    case 81:
    case 282:
    case 300:
    case 301:
    case 323:
    case 342:
      return 1;
    case 526:
      return 2;
    case -1:
      if (((enum rtx_code) ((((insn)->u.fld[5]).rtx1))->code) != ASM_INPUT
          && asm_noperands ((((insn)->u.fld[5]).rtx1)) < 0)
        _fatal_insn_not_found (insn, "gcc.c", 190599, "?");
    default:
      return 0;
    }
}
enum attr_memory
get_attr_memory (rtx insn )
{
  switch (((((insn)->u.fld[6]).rtint) >= 0 ? (((insn)->u.fld[6]).rtint) : recog_memoized_1 (insn)))
    {
    case 695:
    case 694:
    case 693:
    case 692:
    case 691:
    case 690:
    case 689:
    case 688:
    case 687:
      extract_insn_cached (insn);
      if (constant_call_address_operand (recog_data.operand[1], VOIDmode))
        {
   return MEMORY_NONE;
        }
      else
        {
   return MEMORY_LOAD;
        }
    case 672:
      extract_constrain_insn_cached (insn);
      if (which_alternative != 0)
        {
   return MEMORY_NONE;
        }
      else if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if ((memory_operand (recog_data.operand[1], VOIDmode)) || (memory_operand (recog_data.operand[2], VOIDmode)))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 671:
      extract_constrain_insn_cached (insn);
      if ((which_alternative == 1) && (! (const0_operand (recog_data.operand[2], DImode))))
        {
   return MEMORY_NONE;
        }
      else if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if ((memory_operand (recog_data.operand[1], VOIDmode)) || (((which_alternative != 1) || (! (const0_operand (recog_data.operand[2], DImode)))) && (memory_operand (recog_data.operand[2], VOIDmode))))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 670:
      extract_constrain_insn_cached (insn);
      if ((which_alternative == 1) && (! (const0_operand (recog_data.operand[2], SImode))))
        {
   return MEMORY_NONE;
        }
      else if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if ((memory_operand (recog_data.operand[1], VOIDmode)) || (((which_alternative != 1) || (! (const0_operand (recog_data.operand[2], SImode)))) && (memory_operand (recog_data.operand[2], VOIDmode))))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 655:
      extract_constrain_insn_cached (insn);
      if (!((1 << which_alternative) & 0x3))
        {
   return MEMORY_UNKNOWN;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 656:
    case 654:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x3))
        {
   return MEMORY_NONE;
        }
      else if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if ((memory_operand (recog_data.operand[1], VOIDmode)) || ((memory_operand (recog_data.operand[2], VOIDmode)) || (memory_operand (recog_data.operand[3], VOIDmode))))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 653:
    case 652:
    case 651:
    case 649:
      extract_insn_cached (insn);
      if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if ((memory_operand (recog_data.operand[1], VOIDmode)) || ((memory_operand (recog_data.operand[2], VOIDmode)) || (memory_operand (recog_data.operand[3], VOIDmode))))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 584:
    case 581:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return MEMORY_NONE;
        }
      else if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if (memory_operand (recog_data.operand[1], VOIDmode))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 522:
    case 521:
    case 520:
    case 519:
    case 518:
    case 517:
    case 516:
    case 515:
      extract_insn_cached (insn);
      if (constant_call_address_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_NONE;
        }
      else
        {
   return MEMORY_LOAD;
        }
    case 527:
    case 514:
    case 513:
    case 512:
    case 511:
    case 510:
    case 509:
    case 498:
    case 497:
      extract_insn_cached (insn);
      if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 494:
    case 493:
      extract_insn_cached (insn);
      if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 426:
    case 425:
    case 417:
      extract_constrain_insn_cached (insn);
      if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if ((memory_operand (recog_data.operand[1], VOIDmode)) || ((which_alternative == 1) && (memory_operand (recog_data.operand[2], VOIDmode))))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 411:
    case 408:
    case 407:
    case 402:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 1)
        {
   return MEMORY_NONE;
        }
      else if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if ((memory_operand (recog_data.operand[1], VOIDmode)) || (memory_operand (recog_data.operand[2], VOIDmode)))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 294:
    case 290:
      extract_constrain_insn_cached (insn);
      if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if ((memory_operand (recog_data.operand[1], VOIDmode)) || ((((1 << which_alternative) & 0x3)) && (memory_operand (recog_data.operand[2], VOIDmode))))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 288:
      extract_constrain_insn_cached (insn);
      if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if ((memory_operand (recog_data.operand[1], VOIDmode)) || ((((1 << which_alternative) & 0x7)) && (memory_operand (recog_data.operand[2], VOIDmode))))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 217:
      extract_insn_cached (insn);
      if (((! (incdec_operand (recog_data.operand[2], QImode))) && (memory_operand (recog_data.operand[1], VOIDmode))) || ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if ((memory_operand (recog_data.operand[1], VOIDmode)) || ((incdec_operand (recog_data.operand[2], QImode)) && (memory_operand (recog_data.operand[2], VOIDmode))))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 215:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 3)
        {
   return MEMORY_NONE;
        }
      else if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if ((memory_operand (recog_data.operand[1], VOIDmode)) || (memory_operand (recog_data.operand[2], VOIDmode)))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 414:
    case 209:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 2)
        {
   return MEMORY_NONE;
        }
      else if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if ((memory_operand (recog_data.operand[1], VOIDmode)) || (memory_operand (recog_data.operand[2], VOIDmode)))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 202:
      extract_constrain_insn_cached (insn);
      if ((which_alternative != 0) || (pic_symbolic_operand (recog_data.operand[2], SImode)))
        {
   return MEMORY_NONE;
        }
      else if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if ((memory_operand (recog_data.operand[1], VOIDmode)) || (memory_operand (recog_data.operand[2], VOIDmode)))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 201:
      extract_constrain_insn_cached (insn);
      if ((which_alternative == 2) || (pic_symbolic_operand (recog_data.operand[2], SImode)))
        {
   return MEMORY_NONE;
        }
      else if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if ((memory_operand (recog_data.operand[1], VOIDmode)) || (memory_operand (recog_data.operand[2], VOIDmode)))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 196:
      extract_constrain_insn_cached (insn);
      if ((which_alternative == 2) || (pic_symbolic_operand (recog_data.operand[2], DImode)))
        {
   return MEMORY_NONE;
        }
      else if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if ((memory_operand (recog_data.operand[1], VOIDmode)) || (memory_operand (recog_data.operand[2], VOIDmode)))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 172:
    case 169:
    case 166:
    case 163:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 1)
        {
   return MEMORY_UNKNOWN;
        }
      else if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if (memory_operand (recog_data.operand[1], VOIDmode))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 176:
    case 175:
    case 174:
    case 171:
    case 168:
    case 165:
    case 162:
      extract_constrain_insn_cached (insn);
      if (which_alternative != 0)
        {
   return MEMORY_UNKNOWN;
        }
      else if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if (memory_operand (recog_data.operand[1], VOIDmode))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 135:
    case 134:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0xe))
        {
   return MEMORY_UNKNOWN;
        }
      else if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if (memory_operand (recog_data.operand[1], VOIDmode))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 145:
    case 142:
    case 133:
      extract_constrain_insn_cached (insn);
      if (which_alternative != 0)
        {
   return MEMORY_UNKNOWN;
        }
      else if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if (memory_operand (recog_data.operand[1], VOIDmode))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 112:
    case 111:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x7))
        {
   return MEMORY_UNKNOWN;
        }
      else if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if (memory_operand (recog_data.operand[1], VOIDmode))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 109:
    case 106:
      extract_constrain_insn_cached (insn);
      if (((which_alternative == 1) && (memory_operand (recog_data.operand[1], VOIDmode))) || ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if (memory_operand (recog_data.operand[1], VOIDmode))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 101:
    case 100:
      extract_constrain_insn_cached (insn);
      if (!((1 << which_alternative) & 0x7))
        {
   return MEMORY_UNKNOWN;
        }
      else if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if (memory_operand (recog_data.operand[1], VOIDmode))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 96:
    case 95:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x18))
        {
   return MEMORY_UNKNOWN;
        }
      else if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if (memory_operand (recog_data.operand[1], VOIDmode))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 89:
    case 88:
      extract_constrain_insn_cached (insn);
      if (which_alternative != 1)
        {
   return MEMORY_UNKNOWN;
        }
      else
        {
   if (memory_operand (recog_data.operand[1], VOIDmode))
     {
       return MEMORY_BOTH;
     }
   else
     {
       return MEMORY_STORE;
     }
        }
    case 84:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 4)
        {
   return MEMORY_UNKNOWN;
        }
      else if ((!((1 << which_alternative) & 0x7f0)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], DImode))))
        {
   return MEMORY_NONE;
        }
      else if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if ((memory_operand (recog_data.operand[1], VOIDmode)) || ((((((1 << which_alternative) & 0x7f0)) || (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], DImode)))) && (!((1 << which_alternative) & 0x7e0))) && (memory_operand (recog_data.operand[2], VOIDmode))))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 83:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 4)
        {
   return MEMORY_UNKNOWN;
        }
      else if ((!((1 << which_alternative) & 0x7f0)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], DImode))))
        {
   return MEMORY_NONE;
        }
      else if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if ((memory_operand (recog_data.operand[1], VOIDmode)) || ((((((1 << which_alternative) & 0x7f0)) || (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], DImode)))) && (!((1 << which_alternative) & 0x7e0))) && (memory_operand (recog_data.operand[2], VOIDmode))))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 721:
    case 720:
    case 82:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x3))
        {
   return MEMORY_UNKNOWN;
        }
      else if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if (memory_operand (recog_data.operand[1], VOIDmode))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 76:
      extract_constrain_insn_cached (insn);
      if (which_alternative != 0)
        {
   return MEMORY_UNKNOWN;
        }
      else
        {
   if (memory_operand (recog_data.operand[1], VOIDmode))
     {
       return MEMORY_BOTH;
     }
   else
     {
       return MEMORY_STORE;
     }
        }
    case 71:
      extract_constrain_insn_cached (insn);
      if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if ((memory_operand (recog_data.operand[1], VOIDmode)) || ((((! (q_regs_operand (recog_data.operand[0], QImode))) || (((x86_movx & (1 << ix86_tune))) != (0))) && ((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0))))) && (memory_operand (recog_data.operand[2], VOIDmode))))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 70:
    case 66:
    case 65:
      extract_insn_cached (insn);
      if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if ((memory_operand (recog_data.operand[1], VOIDmode)) || (((! (get_attr_type (insn) == TYPE_IMOV)) && (! (get_attr_type (insn) == TYPE_IMOVX))) && (memory_operand (recog_data.operand[2], VOIDmode))))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 59:
      extract_constrain_insn_cached (insn);
      if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if ((memory_operand (recog_data.operand[1], VOIDmode)) || ((((! ((optimize_size) != (0))) && (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || ((((1 << which_alternative) & 0x28)) || ((((x86_movx & (1 << ix86_tune))) != (0)) && (which_alternative == 2)))))) && ((((optimize_size) != (0)) || ((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0))))) || ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2))))) && (memory_operand (recog_data.operand[2], VOIDmode))))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 50:
      extract_constrain_insn_cached (insn);
      if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if ((memory_operand (recog_data.operand[1], VOIDmode)) || (((! (get_attr_type (insn) == TYPE_IMOV)) && ((((optimize_size) != (0)) || (((which_alternative == 0) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_himode_math & (1 << ix86_tune))) == (0)))) || ((((1 << which_alternative) & 0x6)) && (aligned_operand (recog_data.operand[1], HImode))))) || ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (!((1 << which_alternative) & 0x5))))) && (memory_operand (recog_data.operand[2], VOIDmode))))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 1033:
    case 1032:
    case 1031:
    case 1030:
    case 1029:
    case 1017:
    case 1016:
    case 1015:
    case 1014:
    case 1013:
    case 1012:
    case 1011:
    case 1010:
    case 1009:
    case 1008:
    case 1007:
    case 1006:
    case 1005:
    case 1004:
    case 1003:
    case 1002:
    case 1001:
    case 1000:
    case 999:
    case 998:
    case 997:
    case 996:
    case 995:
    case 994:
    case 993:
    case 992:
    case 991:
    case 990:
    case 989:
    case 960:
    case 959:
    case 958:
    case 957:
    case 956:
    case 929:
    case 928:
    case 927:
    case 926:
    case 925:
    case 924:
    case 923:
    case 922:
    case 921:
    case 920:
    case 919:
    case 918:
    case 917:
    case 916:
    case 915:
    case 914:
    case 913:
    case 912:
    case 911:
    case 910:
    case 909:
    case 908:
    case 907:
    case 906:
    case 905:
    case 904:
    case 897:
    case 896:
    case 879:
    case 878:
    case 876:
    case 875:
    case 874:
    case 873:
    case 872:
    case 870:
    case 869:
    case 865:
    case 864:
    case 848:
    case 847:
    case 846:
    case 845:
    case 844:
    case 843:
    case 821:
    case 820:
    case 819:
    case 790:
    case 789:
    case 788:
    case 787:
    case 786:
    case 785:
    case 784:
    case 783:
    case 782:
    case 781:
    case 780:
    case 779:
    case 778:
    case 777:
    case 776:
    case 751:
    case 750:
    case 749:
    case 748:
    case 747:
    case 746:
    case 737:
    case 736:
    case 735:
    case 734:
    case 733:
    case 732:
    case 731:
    case 730:
    case 729:
    case 728:
    case 727:
    case 726:
    case 725:
    case 724:
    case 723:
    case 722:
    case 719:
    case 707:
    case 706:
    case 705:
    case 704:
    case 703:
    case 702:
    case 701:
    case 700:
    case 699:
    case 698:
    case 669:
    case 666:
    case 663:
    case 660:
    case 585:
    case 582:
    case 391:
    case 390:
    case 389:
    case 388:
    case 387:
    case 386:
    case 376:
    case 375:
    case 374:
    case 373:
    case 372:
    case 371:
    case 173:
    case 170:
    case 167:
    case 164:
    case 156:
    case 155:
    case 151:
    case 150:
    case 146:
    case 144:
    case 143:
    case 141:
    case 140:
    case 139:
    case 138:
    case 137:
    case 136:
    case 132:
    case 131:
    case 130:
    case 129:
    case 128:
    case 125:
    case 124:
    case 123:
    case 122:
    case 121:
    case 120:
    case 119:
    case 118:
    case 116:
    case 115:
    case 114:
    case 113:
    case 110:
    case 107:
    case 104:
    case 91:
    case 90:
    case 87:
    case 74:
    case 73:
    case 72:
    case 69:
    case 64:
    case 63:
    case 61:
    case 60:
    case 55:
    case 54:
    case 53:
    case 47:
      extract_insn_cached (insn);
      if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if (memory_operand (recog_data.operand[1], VOIDmode))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 44:
      extract_constrain_insn_cached (insn);
      if ((!((1 << which_alternative) & 0xfc)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], SImode))))
        {
   return MEMORY_NONE;
        }
      else if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if ((memory_operand (recog_data.operand[1], VOIDmode)) || (((((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], SImode))) && (!((1 << which_alternative) & 0xfc))) && (memory_operand (recog_data.operand[2], VOIDmode))))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 43:
      extract_constrain_insn_cached (insn);
      if ((!((1 << which_alternative) & 0xfc)) && (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], SImode))))
        {
   return MEMORY_NONE;
        }
      else if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if ((memory_operand (recog_data.operand[1], VOIDmode)) || (((((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], SImode))) && (!((1 << which_alternative) & 0xfc))) && (memory_operand (recog_data.operand[2], VOIDmode))))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 466:
    case 464:
    case 442:
    case 440:
    case 401:
    case 400:
    case 399:
    case 398:
    case 397:
    case 396:
    case 395:
    case 394:
    case 393:
    case 392:
    case 361:
    case 360:
    case 359:
    case 358:
    case 357:
    case 356:
    case 355:
    case 354:
    case 353:
    case 352:
    case 347:
    case 341:
    case 321:
    case 319:
    case 299:
    case 297:
    case 244:
    case 108:
    case 105:
    case 103:
    case 81:
    case 80:
    case 62:
    case 56:
    case 42:
    case 41:
      extract_insn_cached (insn);
      if (memory_operand (recog_data.operand[1], VOIDmode))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else
        {
   return MEMORY_NONE;
        }
    case 79:
    case 78:
    case 40:
    case 39:
      extract_insn_cached (insn);
      if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_BOTH;
        }
      else
        {
   return MEMORY_LOAD;
        }
    case 77:
    case 58:
    case 57:
    case 49:
    case 48:
    case 38:
    case 37:
    case 36:
      extract_insn_cached (insn);
      if (memory_operand (recog_data.operand[1], VOIDmode))
        {
   return MEMORY_BOTH;
        }
      else
        {
   return MEMORY_STORE;
        }
    case 966:
    case 965:
    case 964:
    case 963:
    case 962:
    case 961:
    case 903:
    case 902:
    case 901:
    case 900:
    case 899:
    case 898:
    case 859:
    case 858:
    case 857:
    case 827:
    case 826:
    case 825:
    case 824:
    case 823:
    case 822:
    case 775:
    case 774:
    case 773:
    case 772:
    case 771:
    case 770:
    case 496:
    case 495:
    case 285:
    case 284:
    case 283:
    case 282:
    case 281:
    case 280:
    case 279:
    case 278:
    case 35:
    case 34:
    case 33:
    case 32:
    case 31:
    case 30:
    case 25:
    case 23:
    case 21:
    case 20:
    case 19:
    case 17:
    case 16:
    case 15:
    case 14:
    case 13:
    case 12:
    case 11:
    case 10:
    case 9:
    case 8:
    case 7:
    case 6:
    case 5:
    case 4:
    case 3:
    case 2:
    case 1:
    case 0:
      extract_insn_cached (insn);
      if ((memory_operand (recog_data.operand[0], VOIDmode)) || (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    case -1:
      if (((enum rtx_code) ((((insn)->u.fld[5]).rtx1))->code) != ASM_INPUT
          && asm_noperands ((((insn)->u.fld[5]).rtx1)) < 0)
        _fatal_insn_not_found (insn, "gcc.c", 191874, "?");
    case 1022:
    case 1021:
    case 718:
    case 717:
    case 716:
    case 715:
    case 714:
    case 713:
    case 712:
    case 711:
    case 710:
    case 709:
    case 708:
    case 697:
    case 696:
    case 686:
    case 685:
    case 684:
    case 683:
    case 682:
    case 681:
    case 680:
    case 679:
    case 678:
    case 677:
    case 676:
    case 675:
    case 674:
    case 673:
    case 668:
    case 667:
    case 665:
    case 664:
    case 662:
    case 661:
    case 659:
    case 658:
    case 647:
    case 646:
    case 645:
    case 644:
    case 643:
    case 642:
    case 550:
    case 549:
    case 548:
    case 547:
    case 546:
    case 545:
    case 544:
    case 543:
    case 542:
    case 541:
    case 540:
    case 539:
    case 538:
    case 537:
    case 536:
    case 535:
    case 532:
    case 531:
    case 530:
    case 529:
    case 528:
    case 526:
    case 525:
    case 524:
    case 523:
    case 508:
    case 507:
    case 506:
    case 505:
    case 504:
    case 503:
    case 502:
    case 501:
    case 500:
    case 499:
    case 450:
    case 449:
    case 423:
    case 422:
    case 405:
    case 404:
    case 385:
    case 384:
    case 383:
    case 382:
    case 381:
    case 380:
    case 379:
    case 378:
    case 377:
    case 370:
    case 369:
    case 368:
    case 367:
    case 366:
    case 365:
    case 364:
    case 363:
    case 362:
    case 351:
    case 287:
    case 286:
    case 275:
    case 273:
    case 272:
    case 270:
    case 269:
    case 267:
    case 266:
    case 225:
    case 177:
    case 161:
    case 160:
    case 127:
    case 126:
    case 117:
    case 99:
    case 98:
    case 94:
    case 93:
    case 75:
    case 29:
    case 28:
    case 27:
    case 26:
    case 24:
    case 22:
    case 18:
    case 849:
    case 852:
    case 1018:
    case 1019:
    case 1020:
      return MEMORY_UNKNOWN;
    case 534:
    case 533:
    case 159:
    case 158:
    case 157:
    case 154:
    case 153:
    case 152:
    case 149:
    case 148:
    case 147:
    case 618:
    case 619:
    case 620:
    case 621:
    case 622:
    case 623:
    case 624:
    case 625:
    case 626:
    case 627:
    case 628:
    case 629:
      return MEMORY_BOTH;
    case 45:
    case 51:
    case 67:
    case 85:
    case 630:
    case 631:
    case 632:
    case 633:
    case 634:
    case 635:
    case 636:
    case 637:
    case 638:
    case 639:
    case 640:
    case 641:
    case 851:
    case 853:
      return MEMORY_STORE;
    case 46:
    case 52:
    case 68:
    case 86:
    case 551:
    case 552:
    case 553:
    case 554:
    case 850:
      return MEMORY_LOAD;
    case 657:
    case 617:
    case 616:
    case 615:
    case 614:
    case 613:
    case 612:
    case 611:
    case 610:
    case 609:
    case 608:
    case 607:
    case 606:
    case 605:
    case 604:
    case 603:
    case 602:
    case 601:
    case 600:
    case 599:
    case 598:
    case 597:
    case 596:
    case 595:
    case 594:
    case 593:
    case 592:
    case 591:
    case 590:
    case 589:
    case 588:
    case 587:
    case 586:
    case 583:
    case 195:
    case 194:
    case 193:
    case 192:
    case 191:
    case 190:
    case 189:
    case 188:
    case 187:
    case 186:
    case 648:
    case 650:
    case 768:
    case 769:
    case 812:
    case 813:
    case 863:
    case 880:
    case 881:
    case 882:
    case 883:
    case 952:
      return MEMORY_NONE;
    default:
      extract_insn_cached (insn);
      if ((memory_operand (recog_data.operand[0], VOIDmode)) && (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return MEMORY_BOTH;
        }
      else if (memory_operand (recog_data.operand[0], VOIDmode))
        {
   return MEMORY_STORE;
        }
      else if ((memory_operand (recog_data.operand[1], VOIDmode)) || (memory_operand (recog_data.operand[2], VOIDmode)))
        {
   return MEMORY_LOAD;
        }
      else
        {
   return MEMORY_NONE;
        }
    }
}
int
get_attr_modrm (rtx insn )
{
  switch (((((insn)->u.fld[6]).rtint) >= 0 ? (((insn)->u.fld[6]).rtint) : recog_memoized_1 (insn)))
    {
    case 695:
    case 694:
    case 693:
    case 692:
    case 691:
    case 690:
    case 689:
    case 688:
    case 687:
      extract_insn_cached (insn);
      if (constant_call_address_operand (recog_data.operand[1], VOIDmode))
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 671:
      extract_constrain_insn_cached (insn);
      if (((which_alternative == 1) && (const0_operand (recog_data.operand[2], DImode))) && ((register_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 670:
      extract_constrain_insn_cached (insn);
      if (((which_alternative == 1) && (const0_operand (recog_data.operand[2], SImode))) && ((register_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 580:
    case 579:
    case 578:
    case 577:
    case 576:
    case 575:
    case 574:
    case 573:
    case 572:
    case 571:
    case 570:
    case 568:
    case 567:
    case 566:
    case 565:
    case 563:
    case 562:
      if (get_attr_unit (insn) == UNIT_I387)
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 522:
    case 521:
    case 520:
    case 519:
    case 518:
    case 517:
    case 516:
    case 515:
      extract_insn_cached (insn);
      if (constant_call_address_operand (recog_data.operand[0], VOIDmode))
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 278:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return 0;
        }
      else if (which_alternative == 1)
        {
   return 1;
        }
      else if (which_alternative == 2)
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 223:
    case 222:
    case 221:
    case 219:
    case 218:
    case 217:
    case 216:
      extract_insn_cached (insn);
      if ((incdec_operand (recog_data.operand[2], QImode)) && ((register_operand (recog_data.operand[1], SImode)) || (register_operand (recog_data.operand[1], HImode))))
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 215:
      extract_constrain_insn_cached (insn);
      if (((which_alternative != 3) && (incdec_operand (recog_data.operand[2], QImode))) && ((register_operand (recog_data.operand[1], SImode)) || (register_operand (recog_data.operand[1], HImode))))
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 220:
    case 214:
    case 213:
    case 212:
    case 211:
    case 210:
      extract_insn_cached (insn);
      if ((incdec_operand (recog_data.operand[2], HImode)) && ((register_operand (recog_data.operand[1], SImode)) || (register_operand (recog_data.operand[1], HImode))))
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 209:
      extract_constrain_insn_cached (insn);
      if (((which_alternative != 2) && (incdec_operand (recog_data.operand[2], HImode))) && ((register_operand (recog_data.operand[1], SImode)) || (register_operand (recog_data.operand[1], HImode))))
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 208:
    case 207:
    case 206:
    case 205:
    case 204:
    case 203:
      extract_insn_cached (insn);
      if ((incdec_operand (recog_data.operand[2], SImode)) && ((register_operand (recog_data.operand[1], SImode)) || (register_operand (recog_data.operand[1], HImode))))
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 200:
    case 199:
    case 198:
    case 197:
      extract_insn_cached (insn);
      if ((incdec_operand (recog_data.operand[2], DImode)) && ((register_operand (recog_data.operand[1], SImode)) || (register_operand (recog_data.operand[1], HImode))))
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 202:
    case 201:
    case 196:
      extract_insn_cached (insn);
      if ((get_attr_type (insn) == TYPE_INCDEC) && ((register_operand (recog_data.operand[1], SImode)) || (register_operand (recog_data.operand[1], HImode))))
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 137:
      extract_constrain_insn_cached (insn);
      if (which_alternative != 0)
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 136:
      extract_constrain_insn_cached (insn);
      if (!((1 << which_alternative) & 0x3))
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 656:
    case 655:
    case 654:
    case 128:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x3))
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 123:
    case 122:
    case 121:
      extract_constrain_insn_cached (insn);
      if ((! (((ix86_tune) == (CPU_K6)))) && (which_alternative == 0))
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 114:
    case 113:
      extract_constrain_insn_cached (insn);
      if ((which_alternative == 1) && ((register_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 101:
    case 100:
    case 96:
    case 95:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x7))
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 91:
    case 90:
      extract_constrain_insn_cached (insn);
      if ((((1 << which_alternative) & 0x7)) || ((((1 << which_alternative) & 0x18)) && ((register_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[1], VOIDmode)))))
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 89:
    case 88:
      extract_constrain_insn_cached (insn);
      if ((which_alternative == 1) && (! (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 84:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   if (((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode)))) && ((register_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[1], VOIDmode))))
     {
       return 0;
     }
   else
     {
       return 1;
     }
        }
      else if (((1 << which_alternative) & 0x6))
        {
   return 0;
        }
      else
        {
   if (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && ((register_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[1], VOIDmode))))
     {
       return 0;
     }
   else
     {
       return 1;
     }
        }
    case 83:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   if (((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode)))) && ((register_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[1], VOIDmode))))
     {
       return 0;
     }
   else
     {
       return 1;
     }
        }
      else if (((1 << which_alternative) & 0x6))
        {
   return 0;
        }
      else
        {
   if (((!((1 << which_alternative) & 0x7f0)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode))))) && ((register_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[1], VOIDmode))))
     {
       return 0;
     }
   else
     {
       return 1;
     }
        }
    case 76:
      extract_constrain_insn_cached (insn);
      if ((which_alternative == 0) && (! (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 71:
      extract_constrain_insn_cached (insn);
      if (((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0)))) && ((register_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 59:
      extract_constrain_insn_cached (insn);
      if ((((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2)))))) && ((register_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 74:
    case 73:
    case 72:
    case 61:
    case 55:
      extract_insn_cached (insn);
      if ((register_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[1], VOIDmode)))
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 70:
    case 66:
    case 65:
    case 50:
      extract_insn_cached (insn);
      if ((get_attr_type (insn) == TYPE_IMOV) && ((register_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 86:
    case 85:
    case 68:
    case 67:
    case 52:
    case 51:
    case 46:
    case 45:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return 0;
        }
      else
        {
   if ((register_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[1], VOIDmode)))
     {
       return 0;
     }
   else
     {
       return 1;
     }
        }
    case 44:
      extract_constrain_insn_cached (insn);
      if (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && ((register_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 43:
      extract_constrain_insn_cached (insn);
      if (((!((1 << which_alternative) & 0xfc)) && ((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode))))) && ((register_operand (recog_data.operand[0], VOIDmode)) && (immediate_operand (recog_data.operand[1], VOIDmode))))
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 79:
    case 78:
    case 40:
    case 39:
      extract_insn_cached (insn);
      if (! (memory_operand (recog_data.operand[0], VOIDmode)))
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 77:
    case 58:
    case 57:
    case 49:
    case 48:
    case 38:
    case 37:
    case 36:
      extract_insn_cached (insn);
      if (! (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 584:
    case 581:
    case 559:
    case 556:
    case 281:
    case 280:
    case 279:
    case 176:
    case 175:
    case 174:
    case 172:
    case 171:
    case 169:
    case 168:
    case 166:
    case 165:
    case 163:
    case 162:
    case 145:
    case 142:
    case 135:
    case 134:
    case 133:
    case 34:
    case 31:
    case 118:
    case 417:
    case 425:
    case 426:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return 0;
        }
      else
        {
   return 1;
        }
    case 657:
    case 647:
    case 646:
    case 645:
    case 644:
    case 643:
    case 642:
    case 641:
    case 640:
    case 639:
    case 638:
    case 637:
    case 636:
    case 635:
    case 634:
    case 633:
    case 632:
    case 631:
    case 630:
    case 629:
    case 628:
    case 627:
    case 626:
    case 625:
    case 624:
    case 623:
    case 622:
    case 621:
    case 620:
    case 619:
    case 618:
    case 617:
    case 616:
    case 615:
    case 614:
    case 613:
    case 612:
    case 611:
    case 610:
    case 609:
    case 608:
    case 607:
    case 606:
    case 605:
    case 604:
    case 603:
    case 602:
    case 601:
    case 600:
    case 599:
    case 598:
    case 597:
    case 596:
    case 595:
    case 594:
    case 593:
    case 592:
    case 591:
    case 590:
    case 589:
    case 588:
    case 587:
    case 586:
    case 583:
    case 561:
    case 558:
    case 555:
    case 534:
    case 533:
    case 391:
    case 390:
    case 389:
    case 388:
    case 387:
    case 386:
    case 376:
    case 375:
    case 374:
    case 373:
    case 372:
    case 371:
    case 161:
    case 160:
    case 159:
    case 158:
    case 157:
    case 154:
    case 153:
    case 152:
    case 149:
    case 148:
    case 147:
    case 146:
    case 144:
    case 143:
    case 141:
    case 138:
    case 132:
    case 131:
    case 130:
    case 102:
    case 97:
    case 92:
    case 33:
    case 30:
    case 28:
    case 25:
    case 23:
    case 21:
    case 20:
    case 19:
    case 47:
    case 53:
    case 54:
    case 60:
    case 87:
    case 497:
    case 498:
    case 509:
    case 524:
    case 525:
    case 526:
    case 528:
    case 551:
    case 552:
    case 553:
    case 554:
    case 853:
      return 0;
    case -1:
      if (((enum rtx_code) ((((insn)->u.fld[5]).rtx1))->code) != ASM_INPUT
          && asm_noperands ((((insn)->u.fld[5]).rtx1)) < 0)
        _fatal_insn_not_found (insn, "gcc.c", 192826, "?");
    default:
      return 1;
    }
}
enum attr_mode
get_attr_mode (rtx insn )
{
  switch (((((insn)->u.fld[6]).rtint) >= 0 ? (((insn)->u.fld[6]).rtint) : recog_memoized_1 (insn)))
    {
    case 1015:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return MODE_DF;
        }
      else
        {
   return MODE_V2DF;
        }
    case 654:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x3))
        {
   return MODE_SF;
        }
      else
        {
   return MODE_SI;
        }
    case 281:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x7))
        {
   return MODE_QI;
        }
      else
        {
   return MODE_SI;
        }
    case 278:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x3))
        {
   return MODE_SI;
        }
      else
        {
   return MODE_DI;
        }
    case 340:
    case 318:
    case 298:
    case 296:
    case 216:
    case 215:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x3))
        {
   return MODE_QI;
        }
      else
        {
   return MODE_SI;
        }
    case 294:
    case 209:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x3))
        {
   return MODE_HI;
        }
      else
        {
   return MODE_SI;
        }
    case 135:
    case 134:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0xf))
        {
   return MODE_SF;
        }
      else
        {
   return MODE_DF;
        }
    case 114:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return MODE_SI;
        }
      else if (which_alternative == 1)
        {
   return MODE_DI;
        }
      else
        {
   return MODE_SI;
        }
    case 113:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return MODE_SI;
        }
      else if (((1 << which_alternative) & 0x6))
        {
   return MODE_DI;
        }
      else
        {
   return MODE_TI;
        }
    case 112:
    case 111:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x7))
        {
   return MODE_SI;
        }
      else if (which_alternative == 3)
        {
   return MODE_DI;
        }
      else
        {
   return MODE_TI;
        }
    case 101:
    case 100:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x7))
        {
   return MODE_XF;
        }
      else
        {
   return MODE_SI;
        }
    case 93:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return MODE_DF;
        }
      else if (((1 << which_alternative) & 0x6))
        {
   return MODE_SI;
        }
      else
        {
   return MODE_DF;
        }
    case 84:
    case 83:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return MODE_SI;
        }
      else if (((1 << which_alternative) & 0xe))
        {
   return MODE_DI;
        }
      else if (which_alternative == 4)
        {
   return MODE_SI;
        }
      else if (((1 << which_alternative) & 0xe0))
        {
   return MODE_DI;
        }
      else if (which_alternative == 8)
        {
   return MODE_TI;
        }
      else
        {
   return MODE_DI;
        }
    case 82:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x1f))
        {
   return MODE_DI;
        }
      else if (which_alternative == 5)
        {
   return MODE_TI;
        }
      else
        {
   return MODE_DI;
        }
    case 71:
      extract_constrain_insn_cached (insn);
      if ((! (q_regs_operand (recog_data.operand[0], QImode))) || (((x86_movx & (1 << ix86_tune))) != (0)))
        {
   return MODE_SI;
        }
      else
        {
   return MODE_QI;
        }
    case 59:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x38))
        {
   return MODE_SI;
        }
      else if (which_alternative == 6)
        {
   return MODE_QI;
        }
      else if (((! ((optimize_size) != (0))) && ((((x86_movx & (1 << ix86_tune))) != (0)) && (which_alternative == 2))) || ((((optimize_size) != (0)) || ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2))) && ((((1 << which_alternative) & 0x7)) && ((((x86_partial_reg_dependency & (1 << ix86_tune))) != (0)) || ((((x86_partial_reg_stall & (1 << ix86_tune))) != (0)) && (((x86_qimode_math & (1 << ix86_tune))) == (0)))))))
        {
   return MODE_SI;
        }
      else
        {
   return MODE_QI;
        }
    case 50:
      extract_constrain_insn_cached (insn);
      if ((((! ((optimize_size) != (0))) && (((which_alternative != 0) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_himode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x6)) || (! (aligned_operand (recog_data.operand[1], HImode)))))) && ((((x86_movx & (1 << ix86_tune))) != (0)) && (((1 << which_alternative) & 0x5)))) || (((((1 << which_alternative) & 0x6)) && (aligned_operand (recog_data.operand[1], HImode))) || ((which_alternative == 0) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_himode_math & (1 << ix86_tune))) == (0))))))
        {
   return MODE_SI;
        }
      else
        {
   return MODE_HI;
        }
    case 44:
    case 43:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x3))
        {
   return MODE_SI;
        }
      else if (which_alternative == 2)
        {
   return MODE_DI;
        }
      else if (((1 << which_alternative) & 0x18))
        {
   return MODE_SI;
        }
      else if (which_alternative == 5)
        {
   return MODE_TI;
        }
      else
        {
   return MODE_SI;
        }
    case 18:
    case 25:
    case 26:
    case 30:
    case 33:
      extract_insn_cached (insn);
      if (((enum machine_mode) (recog_data.operand[1])->mode) == SFmode)
        {
   return MODE_SF;
        }
      else if (((enum machine_mode) (recog_data.operand[1])->mode) == DFmode)
        {
   return MODE_DF;
        }
      else
        {
   return MODE_XF;
        }
    case 31:
    case 32:
    case 34:
    case 35:
      extract_insn_cached (insn);
      if (((enum machine_mode) (recog_data.operand[1])->mode) == SFmode)
        {
   return MODE_SF;
        }
      else
        {
   return MODE_DF;
        }
    case 65:
    case 66:
    case 70:
      if (get_attr_type (insn) == TYPE_IMOVX)
        {
   return MODE_SI;
        }
      else
        {
   return MODE_QI;
        }
    case 88:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return MODE_SF;
        }
      else if (which_alternative == 1)
        {
   return MODE_SI;
        }
      else
        {
   return MODE_SF;
        }
    case 89:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return MODE_SF;
        }
      else if (which_alternative == 1)
        {
   return MODE_DI;
        }
      else
        {
   return MODE_SF;
        }
    case 90:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x618))
        {
   return MODE_SI;
        }
      else if (which_alternative == 5)
        {
   if (((((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)) && ((((target_flags & 0x00008000) != 0)) != (0))) && ((optimize_size) == (0)))
     {
       return MODE_TI;
     }
   else
     {
       return MODE_V4SF;
     }
        }
      else if (which_alternative == 6)
        {
   if ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0)))
     {
       return MODE_V4SF;
     }
   else
     {
       return MODE_SF;
     }
        }
      else if (which_alternative == 11)
        {
   return MODE_DI;
        }
      else
        {
   return MODE_SF;
        }
    case 91:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x618))
        {
   return MODE_SI;
        }
      else if (which_alternative == 5)
        {
   if (((((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)) && ((((target_flags & 0x00008000) != 0)) != (0))) && ((optimize_size) == (0)))
     {
       return MODE_TI;
     }
   else
     {
       return MODE_V4SF;
     }
        }
      else if (which_alternative == 6)
        {
   if ((((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)) || (((x86_sse_partial_regs & (1 << ix86_tune))) != (0)))
     {
       return MODE_V4SF;
     }
   else
     {
       return MODE_SF;
     }
        }
      else if (which_alternative == 11)
        {
   return MODE_DI;
        }
      else
        {
   return MODE_SF;
        }
    case 94:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return MODE_DF;
        }
      else if (which_alternative == 1)
        {
   return MODE_SI;
        }
      else
        {
   return MODE_DF;
        }
    case 95:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x18))
        {
   return MODE_SI;
        }
      else if (which_alternative == 5)
        {
   if ((optimize_size) != (0))
     {
       return MODE_V4SF;
     }
   else if (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))
     {
       return MODE_TI;
     }
   else
     {
       return MODE_V2DF;
     }
        }
      else if (which_alternative == 6)
        {
   if ((optimize_size) != (0))
     {
       return MODE_V4SF;
     }
   else if (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0))
     {
       return MODE_V2DF;
     }
   else
     {
       return MODE_DF;
     }
        }
      else if (which_alternative == 7)
        {
   if (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))
     {
       return MODE_V2DF;
     }
   else
     {
       return MODE_DF;
     }
        }
      else
        {
   return MODE_DF;
        }
    case 96:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x18))
        {
   return MODE_SI;
        }
      else if (which_alternative == 5)
        {
   if ((optimize_size) != (0))
     {
       return MODE_V4SF;
     }
   else if (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))
     {
       return MODE_TI;
     }
   else
     {
       return MODE_V2DF;
     }
        }
      else if (which_alternative == 6)
        {
   if ((optimize_size) != (0))
     {
       return MODE_V4SF;
     }
   else if (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0))
     {
       return MODE_V2DF;
     }
   else
     {
       return MODE_DF;
     }
        }
      else if (which_alternative == 7)
        {
   if (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))
     {
       return MODE_V2DF;
     }
   else
     {
       return MODE_DF;
     }
        }
      else
        {
   return MODE_DF;
        }
    case 98:
    case 99:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return MODE_XF;
        }
      else
        {
   return MODE_SI;
        }
    case 289:
    case 288:
    case 115:
    case 116:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return MODE_SI;
        }
      else
        {
   return MODE_DI;
        }
    case 128:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return MODE_SF;
        }
      else if (which_alternative == 1)
        {
   return MODE_XF;
        }
      else
        {
   return MODE_DF;
        }
    case 130:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return MODE_SF;
        }
      else
        {
   return MODE_XF;
        }
    case 131:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return MODE_DF;
        }
      else
        {
   return MODE_XF;
        }
    case 137:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return MODE_DF;
        }
      else
        {
   return MODE_SF;
        }
    case 411:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return MODE_HI;
        }
      else
        {
   return MODE_SI;
        }
    case 414:
    case 400:
    case 415:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return MODE_QI;
        }
      else
        {
   return MODE_SI;
        }
    case 699:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x3))
        {
   if ((optimize_size) != (0))
     {
       return MODE_V4SF;
     }
   else
     {
       return MODE_TI;
     }
        }
      else if (which_alternative == 2)
        {
   if ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))
     {
       return MODE_V4SF;
     }
   else
     {
       return MODE_TI;
     }
        }
      else
        {
   return MODE_TI;
        }
    case 700:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x3))
        {
   if ((optimize_size) != (0))
     {
       return MODE_V4SF;
     }
   else
     {
       return MODE_TI;
     }
        }
      else if (which_alternative == 2)
        {
   if ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))
     {
       return MODE_V4SF;
     }
   else
     {
       return MODE_TI;
     }
        }
      else
        {
   return MODE_TI;
        }
    case 705:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x3))
        {
   if ((optimize_size) != (0))
     {
       return MODE_V4SF;
     }
   else
     {
       return MODE_V2DF;
     }
        }
      else if (which_alternative == 2)
        {
   if ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))
     {
       return MODE_V4SF;
     }
   else
     {
       return MODE_V2DF;
     }
        }
      else
        {
   return MODE_V2DF;
        }
    case 706:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x3))
        {
   if ((optimize_size) != (0))
     {
       return MODE_V4SF;
     }
   else
     {
       return MODE_TI;
     }
        }
      else if (which_alternative == 2)
        {
   if ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))
     {
       return MODE_V4SF;
     }
   else
     {
       return MODE_TI;
     }
        }
      else
        {
   return MODE_TI;
        }
    case 707:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x3))
        {
   if ((optimize_size) != (0))
     {
       return MODE_V4SF;
     }
   else
     {
       return MODE_TI;
     }
        }
      else if (which_alternative == 2)
        {
   if ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))
     {
       return MODE_V4SF;
     }
   else
     {
       return MODE_TI;
     }
        }
      else
        {
   return MODE_TI;
        }
    case 719:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x3))
        {
   if ((optimize_size) != (0))
     {
       return MODE_V4SF;
     }
   else
     {
       return MODE_TI;
     }
        }
      else if (which_alternative == 2)
        {
   if ((optimize_size) != (0))
     {
       return MODE_V4SF;
     }
   else
     {
       return MODE_TI;
     }
        }
      else
        {
   return MODE_TI;
        }
    case 720:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0xc))
        {
   if ((optimize_size) != (0))
     {
       return MODE_V4SF;
     }
   else
     {
       return MODE_TI;
     }
        }
      else if (which_alternative == 4)
        {
   if ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))
     {
       return MODE_V4SF;
     }
   else
     {
       return MODE_TI;
     }
        }
      else
        {
   return MODE_DI;
        }
    case 721:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0xc))
        {
   if ((optimize_size) != (0))
     {
       return MODE_V4SF;
     }
   else
     {
       return MODE_TI;
     }
        }
      else if (which_alternative == 4)
        {
   if ((((x86_sse_typeless_stores & (1 << ix86_tune))) != (0)) || ((optimize_size) != (0)))
     {
       return MODE_V4SF;
     }
   else
     {
       return MODE_TI;
     }
        }
      else
        {
   return MODE_DI;
        }
    case 768:
      extract_constrain_insn_cached (insn);
      if (((((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0)) && ((((target_flags & 0x00008000) != 0)) != (0))) && ((optimize_size) == (0)))
        {
   return MODE_TI;
        }
      else
        {
   return MODE_V4SF;
        }
    case 952:
      extract_constrain_insn_cached (insn);
      if ((optimize_size) != (0))
        {
   return MODE_V4SF;
        }
      else
        {
   return MODE_TI;
        }
    case 854:
    case 855:
    case 856:
    case 857:
    case 858:
    case 859:
    case 860:
    case 861:
    case 862:
    case 864:
    case 865:
    case 866:
    case 867:
    case 868:
    case 869:
    case 870:
      return MODE_V2SF;
    case 756:
    case 757:
    case 758:
    case 759:
    case 884:
    case 886:
    case 888:
    case 890:
    case 892:
    case 894:
    case 896:
    case 898:
    case 899:
    case 904:
    case 905:
    case 908:
    case 910:
    case 911:
    case 914:
    case 929:
    case 989:
    case 990:
    case 1002:
    case 1003:
    case 1013:
    case 1017:
    case 1024:
    case 1026:
    case 1028:
      return MODE_V2DF;
    case 698:
    case 722:
    case 723:
    case 724:
    case 725:
    case 728:
    case 730:
    case 731:
    case 732:
    case 733:
    case 737:
    case 738:
    case 740:
    case 742:
    case 744:
    case 746:
    case 748:
    case 750:
    case 752:
    case 753:
    case 754:
    case 755:
    case 769:
    case 770:
    case 771:
    case 776:
    case 777:
    case 778:
    case 780:
    case 782:
    case 783:
    case 928:
    case 1023:
    case 1025:
    case 1027:
    case 1029:
    case 1030:
      return MODE_V4SF;
    case 760:
    case 761:
    case 762:
    case 763:
    case 764:
    case 765:
    case 766:
    case 767:
    case 871:
    case 872:
    case 873:
    case 874:
    case 875:
    case 876:
    case 877:
    case 878:
    case 879:
    case 906:
    case 907:
    case 909:
    case 912:
    case 913:
    case 915:
    case 916:
    case 917:
    case 918:
    case 919:
    case 930:
    case 931:
    case 932:
    case 933:
    case 934:
    case 935:
    case 936:
    case 937:
    case 938:
    case 939:
    case 940:
    case 941:
    case 942:
    case 943:
    case 944:
    case 945:
    case 946:
    case 947:
    case 948:
    case 949:
    case 950:
    case 951:
    case 953:
    case 954:
    case 955:
    case 956:
    case 957:
    case 958:
    case 959:
    case 960:
    case 961:
    case 962:
    case 963:
    case 964:
    case 965:
    case 966:
    case 967:
    case 968:
    case 969:
    case 970:
    case 971:
    case 972:
    case 973:
    case 974:
    case 975:
    case 976:
    case 977:
    case 978:
    case 979:
    case 980:
    case 981:
    case 982:
    case 983:
    case 984:
    case 985:
    case 986:
    case 987:
    case 988:
    case 991:
    case 992:
    case 993:
    case 994:
    case 995:
    case 996:
    case 997:
    case 998:
    case 999:
    case 1000:
    case 1001:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1031:
      return MODE_TI;
    case 23:
    case 24:
    case 102:
    case 174:
    case 175:
    case 176:
    case 374:
    case 375:
    case 376:
    case 390:
    case 391:
    case 561:
    case 575:
    case 588:
    case 589:
    case 590:
    case 591:
    case 592:
    case 596:
    case 600:
    case 604:
    case 607:
    case 610:
    case 611:
    case 612:
    case 613:
    case 614:
    case 615:
    case 616:
    case 657:
      return MODE_XF;
    case 21:
    case 22:
    case 97:
    case 129:
    case 140:
    case 144:
    case 145:
    case 146:
    case 151:
    case 155:
    case 156:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 372:
    case 373:
    case 387:
    case 388:
    case 389:
    case 496:
    case 558:
    case 559:
    case 560:
    case 567:
    case 568:
    case 569:
    case 584:
    case 585:
    case 586:
    case 587:
    case 593:
    case 595:
    case 597:
    case 599:
    case 601:
    case 603:
    case 605:
    case 608:
    case 655:
    case 656:
    case 663:
    case 669:
    case 885:
    case 887:
    case 889:
    case 891:
    case 893:
    case 895:
    case 900:
    case 901:
    case 902:
    case 903:
    case 924:
    case 925:
    case 927:
    case 1014:
    case 1016:
    case 1032:
    case 1033:
      return MODE_DF;
    case 19:
    case 20:
    case 92:
    case 132:
    case 133:
    case 136:
    case 138:
    case 139:
    case 141:
    case 142:
    case 143:
    case 150:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 371:
    case 386:
    case 495:
    case 555:
    case 556:
    case 557:
    case 562:
    case 563:
    case 564:
    case 572:
    case 573:
    case 574:
    case 578:
    case 579:
    case 580:
    case 581:
    case 582:
    case 583:
    case 594:
    case 598:
    case 602:
    case 606:
    case 609:
    case 660:
    case 666:
    case 734:
    case 735:
    case 736:
    case 739:
    case 741:
    case 743:
    case 745:
    case 747:
    case 749:
    case 751:
    case 772:
    case 773:
    case 774:
    case 775:
    case 779:
    case 781:
    case 784:
    case 785:
    case 786:
    case 789:
    case 790:
    case 897:
    case 926:
      return MODE_SF;
    case 0:
    case 1:
    case 2:
    case 76:
    case 77:
    case 78:
    case 79:
    case 81:
    case 85:
    case 86:
    case 87:
    case 118:
    case 119:
    case 120:
    case 147:
    case 148:
    case 149:
    case 178:
    case 179:
    case 189:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 226:
    case 227:
    case 228:
    case 229:
    case 239:
    case 247:
    case 254:
    case 256:
    case 258:
    case 261:
    case 268:
    case 273:
    case 274:
    case 305:
    case 306:
    case 307:
    case 327:
    case 328:
    case 329:
    case 352:
    case 353:
    case 392:
    case 393:
    case 402:
    case 403:
    case 417:
    case 419:
    case 421:
    case 446:
    case 448:
    case 470:
    case 482:
    case 618:
    case 625:
    case 630:
    case 637:
    case 648:
    case 649:
    case 671:
    case 672:
    case 701:
    case 702:
    case 703:
    case 704:
    case 726:
    case 727:
    case 729:
    case 788:
    case 791:
    case 792:
    case 793:
    case 794:
    case 795:
    case 796:
    case 797:
    case 798:
    case 799:
    case 800:
    case 801:
    case 802:
    case 803:
    case 804:
    case 805:
    case 806:
    case 807:
    case 808:
    case 809:
    case 810:
    case 811:
    case 812:
    case 813:
    case 814:
    case 815:
    case 816:
    case 817:
    case 818:
    case 819:
    case 820:
    case 821:
    case 822:
    case 823:
    case 824:
    case 825:
    case 826:
    case 827:
    case 828:
    case 829:
    case 830:
    case 831:
    case 832:
    case 833:
    case 834:
    case 835:
    case 836:
    case 837:
    case 838:
    case 839:
    case 840:
    case 841:
    case 842:
    case 843:
    case 844:
    case 845:
    case 846:
    case 847:
    case 848:
    case 853:
    case 921:
    case 923:
      return MODE_DI;
    case 3:
    case 4:
    case 5:
    case 28:
    case 29:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 45:
    case 46:
    case 47:
    case 54:
    case 63:
    case 64:
    case 69:
    case 80:
    case 103:
    case 104:
    case 108:
    case 109:
    case 110:
    case 121:
    case 122:
    case 124:
    case 125:
    case 152:
    case 153:
    case 154:
    case 182:
    case 183:
    case 184:
    case 186:
    case 187:
    case 188:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 213:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 248:
    case 249:
    case 255:
    case 257:
    case 259:
    case 260:
    case 262:
    case 263:
    case 271:
    case 272:
    case 275:
    case 276:
    case 279:
    case 290:
    case 291:
    case 292:
    case 293:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 335:
    case 336:
    case 354:
    case 355:
    case 356:
    case 357:
    case 394:
    case 395:
    case 396:
    case 397:
    case 406:
    case 407:
    case 408:
    case 409:
    case 410:
    case 424:
    case 425:
    case 426:
    case 429:
    case 430:
    case 433:
    case 434:
    case 453:
    case 454:
    case 457:
    case 458:
    case 473:
    case 474:
    case 485:
    case 486:
    case 565:
    case 566:
    case 570:
    case 571:
    case 576:
    case 577:
    case 619:
    case 620:
    case 626:
    case 627:
    case 628:
    case 629:
    case 631:
    case 632:
    case 638:
    case 639:
    case 650:
    case 651:
    case 653:
    case 670:
    case 787:
    case 920:
    case 922:
      return MODE_SI;
    case 6:
    case 7:
    case 8:
    case 48:
    case 51:
    case 52:
    case 53:
    case 55:
    case 56:
    case 57:
    case 105:
    case 106:
    case 107:
    case 123:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 181:
    case 210:
    case 211:
    case 212:
    case 214:
    case 231:
    case 240:
    case 241:
    case 242:
    case 250:
    case 277:
    case 280:
    case 295:
    case 315:
    case 316:
    case 317:
    case 337:
    case 338:
    case 339:
    case 358:
    case 359:
    case 398:
    case 399:
    case 412:
    case 413:
    case 436:
    case 438:
    case 460:
    case 462:
    case 476:
    case 488:
    case 621:
    case 622:
    case 633:
    case 634:
    case 652:
      return MODE_HI;
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 49:
    case 58:
    case 60:
    case 61:
    case 62:
    case 67:
    case 68:
    case 72:
    case 73:
    case 74:
    case 180:
    case 185:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 230:
    case 243:
    case 244:
    case 245:
    case 246:
    case 251:
    case 252:
    case 253:
    case 264:
    case 265:
    case 282:
    case 283:
    case 284:
    case 285:
    case 297:
    case 299:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 341:
    case 342:
    case 343:
    case 344:
    case 345:
    case 346:
    case 347:
    case 348:
    case 349:
    case 350:
    case 360:
    case 361:
    case 401:
    case 416:
    case 441:
    case 442:
    case 444:
    case 465:
    case 466:
    case 468:
    case 479:
    case 480:
    case 491:
    case 492:
    case 493:
    case 494:
    case 623:
    case 624:
    case 635:
    case 636:
    case 640:
    case 641:
    case 642:
    case 643:
    case 644:
    case 645:
    case 646:
    case 647:
      return MODE_QI;
    case -1:
      if (((enum rtx_code) ((((insn)->u.fld[5]).rtx1))->code) != ASM_INPUT
          && asm_noperands ((((insn)->u.fld[5]).rtx1)) < 0)
        _fatal_insn_not_found (insn, "gcc.c", 194521, "?");
    default:
      return MODE_UNKNOWN;
    }
}
enum attr_pent_pair
get_attr_pent_pair (rtx insn )
{
  switch (((((insn)->u.fld[6]).rtint) >= 0 ? (((insn)->u.fld[6]).rtint) : recog_memoized_1 (insn)))
    {
    case 695:
    case 694:
    case 693:
    case 692:
    case 691:
    case 690:
    case 689:
    case 688:
    case 687:
      extract_insn_cached (insn);
      if (constant_call_address_operand (recog_data.operand[1], VOIDmode))
        {
   return PENT_PAIR_PV;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 671:
    case 670:
      extract_constrain_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else
        {
   return PENT_PAIR_UV;
        }
    case 522:
    case 521:
    case 520:
    case 519:
    case 518:
    case 517:
    case 516:
    case 515:
      extract_insn_cached (insn);
      if (constant_call_address_operand (recog_data.operand[0], VOIDmode))
        {
   return PENT_PAIR_PV;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 492:
    case 490:
    case 479:
    case 477:
      extract_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if (const1_operand (recog_data.operand[1], VOIDmode))
        {
   return PENT_PAIR_PU;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 491:
    case 489:
    case 488:
    case 487:
    case 486:
    case 485:
    case 484:
    case 483:
    case 482:
    case 481:
    case 480:
    case 478:
    case 476:
    case 475:
    case 474:
    case 473:
    case 472:
    case 471:
    case 470:
    case 469:
      extract_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if (const1_operand (recog_data.operand[2], VOIDmode))
        {
   return PENT_PAIR_PU;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 466:
    case 464:
    case 442:
    case 440:
      extract_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if (const_int_operand (recog_data.operand[1], VOIDmode))
        {
   return PENT_PAIR_PU;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 468:
    case 467:
    case 465:
    case 463:
    case 462:
    case 461:
    case 460:
    case 459:
    case 458:
    case 457:
    case 456:
    case 455:
    case 454:
    case 453:
    case 452:
    case 451:
    case 448:
    case 447:
    case 446:
    case 445:
    case 444:
    case 443:
    case 441:
    case 439:
    case 438:
    case 437:
    case 436:
    case 435:
    case 434:
    case 433:
    case 432:
    case 431:
    case 430:
    case 429:
    case 428:
    case 427:
    case 421:
    case 420:
    case 419:
    case 418:
      extract_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if (const_int_operand (recog_data.operand[2], VOIDmode))
        {
   return PENT_PAIR_PU;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 426:
    case 425:
    case 417:
      extract_constrain_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if ((which_alternative == 1) && (const_int_operand (recog_data.operand[2], VOIDmode)))
        {
   return PENT_PAIR_PU;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 414:
      extract_constrain_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if ((get_attr_type (insn) == TYPE_ALU) || (which_alternative == 2))
        {
   return PENT_PAIR_UV;
        }
      else if ((get_attr_type (insn) == TYPE_ISHIFT) && (const_int_operand (recog_data.operand[2], VOIDmode)))
        {
   return PENT_PAIR_PU;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 413:
    case 412:
      extract_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if ((get_attr_type (insn) == TYPE_ALU) || ((get_attr_type (insn) == TYPE_ISHIFT) && (const_int_operand (recog_data.operand[2], VOIDmode))))
        {
   return PENT_PAIR_PU;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 411:
      extract_constrain_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if ((which_alternative != 0) || (get_attr_type (insn) == TYPE_ALU))
        {
   if (which_alternative == 0)
     {
       return PENT_PAIR_PU;
     }
   else
     {
       return PENT_PAIR_UV;
     }
        }
      else if ((get_attr_type (insn) == TYPE_ISHIFT) && (const_int_operand (recog_data.operand[2], VOIDmode)))
        {
   return PENT_PAIR_PU;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 410:
      extract_constrain_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode)))
        {
   return PENT_PAIR_UV;
        }
      else if (const_int_operand (recog_data.operand[2], VOIDmode))
        {
   return PENT_PAIR_PU;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 408:
      extract_constrain_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if ((which_alternative != 0) || ((((x86_double_with_add & (1 << ix86_tune))) != (0)) && (const1_operand (recog_data.operand[2], VOIDmode))))
        {
   return PENT_PAIR_UV;
        }
      else if (const_int_operand (recog_data.operand[2], VOIDmode))
        {
   return PENT_PAIR_PU;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 416:
    case 415:
    case 409:
    case 403:
      extract_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if (get_attr_type (insn) == TYPE_ALU)
        {
   return PENT_PAIR_UV;
        }
      else if ((get_attr_type (insn) == TYPE_ISHIFT) && (const_int_operand (recog_data.operand[2], VOIDmode)))
        {
   return PENT_PAIR_PU;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 407:
    case 402:
      extract_constrain_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if ((which_alternative != 0) || (get_attr_type (insn) == TYPE_ALU))
        {
   return PENT_PAIR_UV;
        }
      else if ((get_attr_type (insn) == TYPE_ISHIFT) && (const_int_operand (recog_data.operand[2], VOIDmode)))
        {
   return PENT_PAIR_PU;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 294:
      extract_constrain_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if (((1 << which_alternative) & 0x3))
        {
   return PENT_PAIR_PU;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 290:
      extract_constrain_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if (((1 << which_alternative) & 0x3))
        {
   return PENT_PAIR_UV;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 288:
      extract_constrain_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if (((1 << which_alternative) & 0x7))
        {
   return PENT_PAIR_UV;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 215:
      extract_constrain_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if (((which_alternative != 3) && (! (incdec_operand (recog_data.operand[2], QImode)))) || ((which_alternative == 3) || ((which_alternative != 3) && (incdec_operand (recog_data.operand[2], QImode)))))
        {
   return PENT_PAIR_UV;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 209:
      extract_constrain_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if (((which_alternative != 2) && (! (incdec_operand (recog_data.operand[2], HImode)))) || ((which_alternative == 2) || ((which_alternative != 2) && (incdec_operand (recog_data.operand[2], HImode)))))
        {
   if (((1 << which_alternative) & 0x3))
     {
       return PENT_PAIR_PU;
     }
   else
     {
       return PENT_PAIR_UV;
     }
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 202:
      extract_constrain_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if ((get_attr_type (insn) == TYPE_ALU) || (((which_alternative != 0) || (pic_symbolic_operand (recog_data.operand[2], SImode))) || (get_attr_type (insn) == TYPE_INCDEC)))
        {
   return PENT_PAIR_UV;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 201:
      extract_constrain_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if ((get_attr_type (insn) == TYPE_ALU) || (((which_alternative == 2) || (pic_symbolic_operand (recog_data.operand[2], SImode))) || (get_attr_type (insn) == TYPE_INCDEC)))
        {
   return PENT_PAIR_UV;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 196:
      extract_constrain_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if ((get_attr_type (insn) == TYPE_ALU) || (((which_alternative == 2) || (pic_symbolic_operand (recog_data.operand[2], DImode))) || (get_attr_type (insn) == TYPE_INCDEC)))
        {
   return PENT_PAIR_UV;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 114:
    case 113:
      extract_constrain_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if (which_alternative == 1)
        {
   return PENT_PAIR_UV;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 109:
      extract_constrain_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if (which_alternative != 0)
        {
   return PENT_PAIR_UV;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 106:
      extract_constrain_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if (which_alternative != 0)
        {
   return PENT_PAIR_PU;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 91:
      extract_constrain_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if (((1 << which_alternative) & 0x18))
        {
   return PENT_PAIR_UV;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 90:
      extract_constrain_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if (((1 << which_alternative) & 0x18))
        {
   return PENT_PAIR_UV;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 89:
    case 88:
      extract_constrain_insn_cached (insn);
      if ((which_alternative == 1) && (! (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return PENT_PAIR_UV;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 84:
      extract_constrain_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if ((!((1 << which_alternative) & 0x7f0)) && (((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode)))) || (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], DImode)))))
        {
   return PENT_PAIR_UV;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 83:
      extract_constrain_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if ((!((1 << which_alternative) & 0x7f0)) && (((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], DImode)))) || (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], DImode)))))
        {
   return PENT_PAIR_UV;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 76:
      extract_constrain_insn_cached (insn);
      if ((which_alternative == 0) && (! (memory_operand (recog_data.operand[1], VOIDmode))))
        {
   return PENT_PAIR_UV;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 71:
      extract_constrain_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if ((q_regs_operand (recog_data.operand[0], QImode)) && (! (((x86_movx & (1 << ix86_tune))) != (0))))
        {
   return PENT_PAIR_UV;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 70:
    case 66:
    case 65:
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if (get_attr_type (insn) == TYPE_IMOV)
        {
   return PENT_PAIR_UV;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 59:
      extract_constrain_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if (((optimize_size) != (0)) || (((which_alternative == 3) && ((((x86_partial_reg_stall & (1 << ix86_tune))) == (0)) || (((x86_qimode_math & (1 << ix86_tune))) == (0)))) || (((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x28)) && ((! (((x86_movx & (1 << ix86_tune))) != (0))) || (which_alternative != 2))))))
        {
   if (((! ((optimize_size) != (0))) && ((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0)))))) && ((((1 << which_alternative) & 0x28)) || ((((x86_movx & (1 << ix86_tune))) != (0)) && (which_alternative == 2))))
     {
       return PENT_PAIR_PU;
     }
   else
     {
       return PENT_PAIR_UV;
     }
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 50:
      extract_constrain_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if (get_attr_type (insn) == TYPE_IMOV)
        {
   if ((((! ((optimize_size) != (0))) && (((which_alternative != 0) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_himode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x6)) || (! (aligned_operand (recog_data.operand[1], HImode)))))) && ((((x86_movx & (1 << ix86_tune))) != (0)) && (((1 << which_alternative) & 0x5)))) || (get_attr_mode (insn) == MODE_HI))
     {
       return PENT_PAIR_PU;
     }
   else
     {
       return PENT_PAIR_UV;
     }
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 57:
    case 48:
      extract_insn_cached (insn);
      if (! (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return PENT_PAIR_PU;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 44:
      extract_constrain_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if ((!((1 << which_alternative) & 0xfc)) && (((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode)))) || (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], SImode)))))
        {
   return PENT_PAIR_UV;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 43:
      extract_constrain_insn_cached (insn);
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else if ((!((1 << which_alternative) & 0xfc)) && (((! ((flag_pic) != (0))) || (! (symbolic_operand (recog_data.operand[1], SImode)))) || (((flag_pic) != (0)) && (symbolic_operand (recog_data.operand[1], SImode)))))
        {
   return PENT_PAIR_UV;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 79:
    case 78:
    case 40:
    case 39:
      extract_insn_cached (insn);
      if (! (memory_operand (recog_data.operand[0], VOIDmode)))
        {
   return PENT_PAIR_UV;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 77:
    case 58:
    case 49:
    case 38:
    case 37:
    case 36:
      extract_insn_cached (insn);
      if (! (memory_operand (recog_data.operand[1], VOIDmode)))
        {
   return PENT_PAIR_UV;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 399:
    case 339:
    case 338:
    case 337:
    case 317:
    case 316:
    case 315:
    case 295:
    case 242:
    case 241:
    case 240:
    case 214:
    case 212:
    case 211:
    case 210:
    case 105:
    case 56:
    case 55:
    case 52:
    case 51:
    case 8:
    case 7:
    case 6:
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else
        {
   return PENT_PAIR_PU;
        }
    case 672:
    case 401:
    case 397:
    case 396:
    case 393:
    case 350:
    case 349:
    case 348:
    case 347:
    case 346:
    case 345:
    case 344:
    case 343:
    case 342:
    case 341:
    case 340:
    case 336:
    case 335:
    case 334:
    case 333:
    case 332:
    case 331:
    case 330:
    case 329:
    case 328:
    case 327:
    case 326:
    case 325:
    case 324:
    case 323:
    case 322:
    case 321:
    case 320:
    case 319:
    case 318:
    case 314:
    case 313:
    case 312:
    case 311:
    case 310:
    case 309:
    case 308:
    case 307:
    case 306:
    case 305:
    case 304:
    case 303:
    case 302:
    case 301:
    case 300:
    case 299:
    case 298:
    case 297:
    case 296:
    case 293:
    case 292:
    case 291:
    case 289:
    case 285:
    case 284:
    case 283:
    case 246:
    case 245:
    case 244:
    case 243:
    case 239:
    case 238:
    case 237:
    case 236:
    case 235:
    case 234:
    case 229:
    case 228:
    case 227:
    case 224:
    case 223:
    case 222:
    case 221:
    case 220:
    case 219:
    case 218:
    case 217:
    case 216:
    case 213:
    case 208:
    case 207:
    case 206:
    case 205:
    case 204:
    case 203:
    case 200:
    case 199:
    case 198:
    case 197:
    case 185:
    case 184:
    case 179:
    case 108:
    case 103:
    case 86:
    case 85:
    case 81:
    case 80:
    case 74:
    case 73:
    case 72:
    case 68:
    case 67:
    case 62:
    case 61:
    case 46:
    case 45:
    case 42:
    case 41:
    case 17:
    case 16:
    case 15:
    case 14:
    case 13:
    case 12:
    case 11:
    case 10:
    case 9:
    case 5:
    case 4:
    case 3:
    case 2:
    case 1:
    case 0:
      if (get_attr_imm_disp (insn) == IMM_DISP_TRUE)
        {
   return PENT_PAIR_NP;
        }
      else
        {
   return PENT_PAIR_UV;
        }
    case 278:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return PENT_PAIR_UV;
        }
      else if (which_alternative == 1)
        {
   return PENT_PAIR_NP;
        }
      else if (which_alternative == 2)
        {
   return PENT_PAIR_UV;
        }
      else if (which_alternative == 3)
        {
   return PENT_PAIR_NP;
        }
      else
        {
   return PENT_PAIR_UV;
        }
    case 279:
    case 280:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return PENT_PAIR_UV;
        }
      else if (which_alternative == 1)
        {
   return PENT_PAIR_NP;
        }
      else
        {
   return PENT_PAIR_UV;
        }
    case 281:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return PENT_PAIR_UV;
        }
      else if (which_alternative == 1)
        {
   return PENT_PAIR_NP;
        }
      else if (which_alternative == 2)
        {
   return PENT_PAIR_UV;
        }
      else
        {
   return PENT_PAIR_NP;
        }
    case 527:
    case 514:
    case 513:
    case 512:
    case 511:
    case 510:
    case 509:
    case 498:
    case 497:
      return PENT_PAIR_PV;
    case 178:
    case 180:
    case 181:
    case 182:
    case 183:
    case 226:
    case 230:
    case 231:
    case 232:
    case 233:
    case 648:
    case 650:
      return PENT_PAIR_PU;
    case 554:
    case 553:
    case 552:
    case 551:
    case 195:
    case 194:
    case 193:
    case 192:
    case 191:
    case 190:
    case 189:
    case 188:
    case 187:
    case 186:
      return PENT_PAIR_UV;
    case -1:
      if (((enum rtx_code) ((((insn)->u.fld[5]).rtx1))->code) != ASM_INPUT
          && asm_noperands ((((insn)->u.fld[5]).rtx1)) < 0)
        _fatal_insn_not_found (insn, "gcc.c", 195539, "?");
    default:
      return PENT_PAIR_NP;
    }
}
enum attr_pent_prefix
get_attr_pent_prefix (rtx insn )
{
  switch (((((insn)->u.fld[6]).rtint) >= 0 ? (((insn)->u.fld[6]).rtint) : recog_memoized_1 (insn)))
    {
    case 569:
    case 568:
    case 564:
    case 563:
      if (get_attr_unit (insn) == UNIT_SSE)
        {
   return PENT_PREFIX_TRUE;
        }
      else
        {
   return PENT_PREFIX_FALSE;
        }
    case 559:
    case 556:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 1)
        {
   return PENT_PREFIX_TRUE;
        }
      else
        {
   return PENT_PREFIX_FALSE;
        }
    case 209:
    case 136:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x3))
        {
   return PENT_PREFIX_TRUE;
        }
      else
        {
   return PENT_PREFIX_FALSE;
        }
    case 135:
    case 134:
      extract_constrain_insn_cached (insn);
      if (!((1 << which_alternative) & 0xf))
        {
   return PENT_PREFIX_TRUE;
        }
      else
        {
   return PENT_PREFIX_FALSE;
        }
    case 122:
    case 121:
      extract_constrain_insn_cached (insn);
      if ((((ix86_tune) == (CPU_K6))) || (which_alternative != 0))
        {
   return PENT_PREFIX_TRUE;
        }
      else
        {
   return PENT_PREFIX_FALSE;
        }
    case 114:
    case 113:
      extract_constrain_insn_cached (insn);
      if (which_alternative != 1)
        {
   return PENT_PREFIX_TRUE;
        }
      else
        {
   return PENT_PREFIX_FALSE;
        }
    case 288:
    case 112:
    case 111:
      extract_constrain_insn_cached (insn);
      if (!((1 << which_alternative) & 0x7))
        {
   return PENT_PREFIX_TRUE;
        }
      else
        {
   return PENT_PREFIX_FALSE;
        }
    case 411:
    case 137:
    case 109:
      extract_constrain_insn_cached (insn);
      if (which_alternative == 0)
        {
   return PENT_PREFIX_TRUE;
        }
      else
        {
   return PENT_PREFIX_FALSE;
        }
    case 96:
      extract_constrain_insn_cached (insn);
      if ((!((1 << which_alternative) & 0x1f)) || (((which_alternative == 5) && ((! ((optimize_size) != (0))) && (! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))))) || (((which_alternative == 6) && ((! ((optimize_size) != (0))) && (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)))) || ((which_alternative == 7) && (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))))
        {
   return PENT_PREFIX_TRUE;
        }
      else
        {
   return PENT_PREFIX_FALSE;
        }
    case 95:
      extract_constrain_insn_cached (insn);
      if ((!((1 << which_alternative) & 0x1f)) || (((which_alternative == 5) && ((! ((optimize_size) != (0))) && (! (((x86_sse_load0_by_pxor & (1 << ix86_tune))) != (0))))) || (((which_alternative == 6) && ((! ((optimize_size) != (0))) && (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0)))) || ((which_alternative == 7) && (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))))
        {
   return PENT_PREFIX_TRUE;
        }
      else
        {
   return PENT_PREFIX_FALSE;
        }
    case 91:
      extract_constrain_insn_cached (insn);
      if ((!((1 << which_alternative) & 0x1f)) || ((((1 << which_alternative) & 0x1e0)) && (((which_alternative == 6) && ((! (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0))) && (! (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || (!((1 << which_alternative) & 0xe78)))))
        {
   return PENT_PREFIX_TRUE;
        }
      else
        {
   return PENT_PREFIX_FALSE;
        }
    case 90:
      extract_constrain_insn_cached (insn);
      if ((!((1 << which_alternative) & 0x1f)) || ((((1 << which_alternative) & 0x1e0)) && (((which_alternative == 6) && ((! (((x86_sse_partial_reg_dependency & (1 << ix86_tune))) != (0))) && (! (((x86_sse_partial_regs & (1 << ix86_tune))) != (0))))) || (!((1 << which_alternative) & 0xe78)))))
        {
   return PENT_PREFIX_TRUE;
        }
      else
        {
   return PENT_PREFIX_FALSE;
        }
    case 84:
    case 83:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0x7e0))
        {
   return PENT_PREFIX_TRUE;
        }
      else
        {
   return PENT_PREFIX_FALSE;
        }
    case 721:
    case 720:
    case 656:
    case 654:
    case 290:
    case 249:
    case 248:
    case 247:
    case 172:
    case 169:
    case 166:
    case 163:
    case 128:
    case 82:
      extract_constrain_insn_cached (insn);
      if (!((1 << which_alternative) & 0x3))
        {
   return PENT_PREFIX_TRUE;
        }
      else
        {
   return PENT_PREFIX_FALSE;
        }
    case 71:
      extract_constrain_insn_cached (insn);
      if ((! (q_regs_operand (recog_data.operand[0], QImode))) || (((x86_movx & (1 << ix86_tune))) != (0)))
        {
   return PENT_PREFIX_TRUE;
        }
      else
        {
   return PENT_PREFIX_FALSE;
        }
    case 70:
    case 66:
    case 65:
      if (get_attr_type (insn) == TYPE_IMOVX)
        {
   return PENT_PREFIX_TRUE;
        }
      else
        {
   return PENT_PREFIX_FALSE;
        }
    case 59:
      extract_constrain_insn_cached (insn);
      if (((! ((optimize_size) != (0))) && ((which_alternative != 3) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_qimode_math & (1 << ix86_tune))) == (0)))))) && ((((1 << which_alternative) & 0x28)) || ((((x86_movx & (1 << ix86_tune))) != (0)) && (which_alternative == 2))))
        {
   return PENT_PREFIX_TRUE;
        }
      else
        {
   return PENT_PREFIX_FALSE;
        }
    case 50:
      extract_constrain_insn_cached (insn);
      if ((((! ((optimize_size) != (0))) && (((which_alternative != 0) || ((! (((x86_partial_reg_stall & (1 << ix86_tune))) == (0))) && (! (((x86_himode_math & (1 << ix86_tune))) == (0))))) && ((!((1 << which_alternative) & 0x6)) || (! (aligned_operand (recog_data.operand[1], HImode)))))) && ((((x86_movx & (1 << ix86_tune))) != (0)) && (((1 << which_alternative) & 0x5)))) || (get_attr_mode (insn) == MODE_HI))
        {
   return PENT_PREFIX_TRUE;
        }
      else
        {
   return PENT_PREFIX_FALSE;
        }
    case 44:
    case 43:
      extract_constrain_insn_cached (insn);
      if (((1 << which_alternative) & 0xfc))
        {
   return PENT_PREFIX_TRUE;
        }
      else
        {
   return PENT_PREFIX_FALSE;
        }
    case 584:
    case 581:
    case 34:
    case 31:
      extract_constrain_insn_cached (insn);
      if (which_alternative != 0)
        {
   return PENT_PREFIX_TRUE;
        }
      else
        {
   return PENT_PREFIX_FALSE;
        }
    case 1033:
    case 1032:
    case 1031:
    case 1030:
    case 1029:
    case 1028:
    case 1027:
    case 1026:
    case 1025:
    case 1024:
    case 1023:
    case 1020:
    case 1019:
    case 1018:
    case 1017:
    case 1016:
    case 1015:
    case 1014:
    case 1013:
    case 1012:
    case 1011:
    case 1010:
    case 1009:
    case 1008:
    case 1007:
    case 1006:
    case 1005:
    case 1004:
    case 1003:
    case 1002:
    case 1001:
    case 1000:
    case 999:
    case 998:
    case 997:
    case 996:
    case 995:
    case 994:
    case 993:
    case 992:
    case 991:
    case 990:
    case 989:
    case 988:
    case 987:
    case 986:
    case 985:
    case 984:
    case 983:
    case 982:
    case 981:
    case 980:
    case 979:
    case 978:
    case 977:
    case 976:
    case 975:
    case 974:
    case 973:
    case 972:
    case 971:
    case 970:
    case 969:
    case 968:
    case 967:
    case 966:
    case 965:
    case 964:
    case 963:
    case 962:
    case 961:
    case 960:
    case 959:
    case 958:
    case 957:
    case 956:
    case 955:
    case 954:
    case 953:
    case 952:
    case 951:
    case 950:
    case 949:
    case 948:
    case 947:
    case 946:
    case 945:
    case 944:
    case 943:
    case 942:
    case 941:
    case 940:
    case 939:
    case 938:
    case 937:
    case 936:
    case 935:
    case 934:
    case 933:
    case 932:
    case 931:
    case 930:
    case 929:
    case 928:
    case 927:
    case 926:
    case 925:
    case 924:
    case 923:
    case 922:
    case 921:
    case 920:
    case 919:
    case 918:
    case 917:
    case 916:
    case 915:
    case 914:
    case 913:
    case 912:
    case 911:
    case 910:
    case 909:
    case 908:
    case 907:
    case 906:
    case 905:
    case 904:
    case 903:
    case 902:
    case 901:
    case 900:
    case 899:
    case 898:
    case 897:
    case 896:
    case 895:
    case 894:
    case 893:
    case 892:
    case 891:
    case 890:
    case 889:
    case 888:
    case 887:
    case 886:
    case 885:
    case 884:
    case 883:
    case 882:
    case 881:
    case 880:
    case 879:
    case 878:
    case 877:
    case 876:
    case 875:
    case 874:
    case 873:
    case 872:
    case 871:
    case 870:
    case 869:
    case 868:
    case 867:
    case 866:
    case 865:
    case 864:
    case 863:
    case 862:
    case 861:
    case 860:
    case 859:
    case 858:
    case 857:
    case 856:
    case 855:
    case 854:
    case 852:
    case 851:
    case 850:
    case 849:
    case 848:
    case 847:
    case 846:
    case 845:
    case 844:
    case 843:
    case 842:
    case 841:
    case 840:
    case 839:
    case 838:
    case 837:
    case 836:
    case 835:
    case 834:
    case 833:
    case 832:
    case 831:
    case 830:
    case 829:
    case 828:
    case 827:
    case 826:
    case 825:
    case 824:
    case 823:
    case 822:
    case 821:
    case 820:
    case 819:
    case 818:
    case 817:
    case 816:
    case 815:
    case 814:
    case 813:
    case 812:
    case 811:
    case 810:
    case 809:
    case 808:
    case 807:
    case 806:
    case 805:
    case 804:
    case 803:
    case 802:
    case 801:
    case 800:
    case 799:
    case 798:
    case 797:
    case 796:
    case 795:
    case 794:
    case 793:
    case 792:
    case 791:
    case 790:
    case 789:
    case 788:
    case 787:
    case 786:
    case 785:
    case 784:
    case 783:
    case 782:
    case 781:
    case 780:
    case 779:
    case 778:
    case 777:
    case 776:
    case 775:
    case 774:
    case 773:
    case 772:
    case 771:
    case 770:
    case 769:
    case 768:
    case 767:
    case 766:
    case 765:
    case 764:
    case 763:
    case 762:
    case 761:
    case 760:
    case 759:
    case 758:
    case 757:
    case 756:
    case 755:
    case 754:
    case 753:
    case 752:
    case 751:
    case 750:
    case 749:
    case 748:
    case 747:
    case 746:
    case 745:
    case 744:
    case 743:
    case 742:
    case 741:
    case 740:
    case 739:
    case 738:
    case 737:
    case 736:
    case 735:
    case 734:
    case 733:
    case 732:
    case 731:
    case 730:
    case 729:
    case 728:
    case 727:
    case 726:
    case 725:
    case 724:
    case 723:
    case 722:
    case 719:
    case 707:
    case 706:
    case 705:
    case 704:
    case 703:
    case 702:
    case 701:
    case 700:
    case 699:
    case 698:
    case 669:
    case 666:
    case 663:
    case 660:
    case 653:
    case 652:
    case 651:
    case 649:
    case 647:
    case 646:
    case 645:
    case 644:
    case 643:
    case 642:
    case 641:
    case 640:
    case 639:
    case 638:
    case 637:
    case 634:
    case 633:
    case 629:
    case 628:
    case 627:
    case 626:
    case 625:
    case 622:
    case 621:
    case 585:
    case 582:
    case 560:
    case 557:
    case 543:
    case 542:
    case 541:
    case 540:
    case 539:
    case 537:
    case 525:
    case 496:
    case 495:
    case 494:
    case 493:
    case 488:
    case 476:
    case 462:
    case 460:
    case 438:
    case 436:
    case 424:
    case 413:
    case 412:
    case 406:
    case 399:
    case 398:
    case 359:
    case 358:
    case 339:
    case 338:
    case 337:
    case 317:
    case 316:
    case 315:
    case 295:
    case 294:
    case 280:
    case 277:
    case 250:
    case 242:
    case 241:
    case 240:
    case 231:
    case 214:
    case 212:
    case 211:
    case 210:
    case 181:
    case 173:
    case 170:
    case 167:
    case 164:
    case 161:
    case 160:
    case 159:
    case 158:
    case 157:
    case 156:
    case 155:
    case 151:
    case 150:
    case 140:
    case 139:
    case 129:
    case 125:
    case 124:
    case 123:
    case 120:
    case 119:
    case 116:
    case 115:
    case 110:
    case 107:
    case 106:
    case 105:
    case 104:
    case 69:
    case 64:
    case 63:
    case 57:
    case 56:
    case 55:
    case 53:
    case 52:
    case 51:
    case 48:
    case 35:
    case 32:
    case 8:
    case 7:
    case 6:
      return PENT_PREFIX_TRUE;
    case -1:
      if (((enum rtx_code) ((((insn)->u.fld[5]).rtx1))->code) != ASM_INPUT
          && asm_noperands ((((insn)->u.fld[5]).rtx1)) < 0)
        _fatal_insn_not_found (insn, "gcc.c", 196246, "?");
    default:
      return PENT_PREFIX_FALSE;
    }
}
